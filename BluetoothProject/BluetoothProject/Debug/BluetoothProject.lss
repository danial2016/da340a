
BluetoothProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f50  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083f50  00083f50  00013f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20070000  00083f58  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000019c  20070af0  00084a48  00020af0  2**2
                  ALLOC
  4 .stack        00002004  20070c8c  00084be4  00020af0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020af0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b19  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015eff  00000000  00000000  00020b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000033c6  00000000  00000000  00036a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000041e4  00000000  00000000  00039e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009d0  00000000  00000000  0003e01b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000918  00000000  00000000  0003e9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000197e7  00000000  00000000  0003f303  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000f9a8  00000000  00000000  00058aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00064446  00000000  00000000  00068492  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000220c  00000000  00000000  000cc8d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	90 2c 07 20 79 0c 08 00 75 0c 08 00 75 0c 08 00     .,. y...u...u...
   80010:	75 0c 08 00 75 0c 08 00 75 0c 08 00 00 00 00 00     u...u...u.......
	...
   8002c:	75 0c 08 00 75 0c 08 00 00 00 00 00 75 0c 08 00     u...u.......u...
   8003c:	75 0c 08 00 75 0c 08 00 75 0c 08 00 75 0c 08 00     u...u...u...u...
   8004c:	75 0c 08 00 75 0c 08 00 75 0c 08 00 75 0c 08 00     u...u...u...u...
   8005c:	75 0c 08 00 75 0c 08 00 75 0c 08 00 00 00 00 00     u...u...u.......
   8006c:	e9 0a 08 00 fd 0a 08 00 11 0b 08 00 25 0b 08 00     ............%...
	...
   80084:	d9 02 08 00 75 0c 08 00 75 0c 08 00 75 0c 08 00     ....u...u...u...
   80094:	75 0c 08 00 75 0c 08 00 75 0c 08 00 75 0c 08 00     u...u...u...u...
   800a4:	00 00 00 00 75 0c 08 00 75 0c 08 00 75 0c 08 00     ....u...u...u...
   800b4:	75 0c 08 00 75 0c 08 00 75 0c 08 00 75 0c 08 00     u...u...u...u...
   800c4:	75 0c 08 00 75 0c 08 00 75 0c 08 00 75 0c 08 00     u...u...u...u...
   800d4:	75 0c 08 00 75 0c 08 00 75 0c 08 00 75 0c 08 00     u...u...u...u...
   800e4:	75 0c 08 00 75 0c 08 00 75 0c 08 00 75 0c 08 00     u...u...u...u...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070af0 	.word	0x20070af0
   80110:	00000000 	.word	0x00000000
   80114:	00083f58 	.word	0x00083f58

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00083f58 	.word	0x00083f58
   80154:	20070af4 	.word	0x20070af4
   80158:	00083f58 	.word	0x00083f58
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	20070c60 	.word	0x20070c60
   80198:	20070c58 	.word	0x20070c58

0008019c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8019c:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8019e:	010b      	lsls	r3, r1, #4
   801a0:	4293      	cmp	r3, r2
   801a2:	d914      	bls.n	801ce <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   801a4:	00c9      	lsls	r1, r1, #3
   801a6:	084b      	lsrs	r3, r1, #1
   801a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   801ac:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   801b0:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   801b2:	1e5c      	subs	r4, r3, #1
   801b4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   801b8:	428c      	cmp	r4, r1
   801ba:	d901      	bls.n	801c0 <usart_set_async_baudrate+0x24>
		return 1;
   801bc:	2001      	movs	r0, #1
   801be:	e017      	b.n	801f0 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   801c0:	6841      	ldr	r1, [r0, #4]
   801c2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   801c6:	6041      	str	r1, [r0, #4]
   801c8:	e00c      	b.n	801e4 <usart_set_async_baudrate+0x48>
		return 1;
   801ca:	2001      	movs	r0, #1
   801cc:	e010      	b.n	801f0 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   801ce:	0859      	lsrs	r1, r3, #1
   801d0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   801d4:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   801d8:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   801da:	1e5c      	subs	r4, r3, #1
   801dc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   801e0:	428c      	cmp	r4, r1
   801e2:	d8f2      	bhi.n	801ca <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   801e4:	0412      	lsls	r2, r2, #16
   801e6:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   801ea:	431a      	orrs	r2, r3
   801ec:	6202      	str	r2, [r0, #32]

	return 0;
   801ee:	2000      	movs	r0, #0
}
   801f0:	bc10      	pop	{r4}
   801f2:	4770      	bx	lr

000801f4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   801f4:	4b08      	ldr	r3, [pc, #32]	; (80218 <usart_reset+0x24>)
   801f6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
   801fa:	2300      	movs	r3, #0
   801fc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   801fe:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80200:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   80202:	2388      	movs	r3, #136	; 0x88
   80204:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80206:	2324      	movs	r3, #36	; 0x24
   80208:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
   8020a:	f44f 7380 	mov.w	r3, #256	; 0x100
   8020e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   80210:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   80214:	6003      	str	r3, [r0, #0]
   80216:	4770      	bx	lr
   80218:	55534100 	.word	0x55534100

0008021c <usart_init_rs232>:
{
   8021c:	b570      	push	{r4, r5, r6, lr}
   8021e:	4605      	mov	r5, r0
   80220:	460c      	mov	r4, r1
   80222:	4616      	mov	r6, r2
	usart_reset(p_usart);
   80224:	4b0f      	ldr	r3, [pc, #60]	; (80264 <usart_init_rs232+0x48>)
   80226:	4798      	blx	r3
	ul_reg_val = 0;
   80228:	2200      	movs	r2, #0
   8022a:	4b0f      	ldr	r3, [pc, #60]	; (80268 <usart_init_rs232+0x4c>)
   8022c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8022e:	b1a4      	cbz	r4, 8025a <usart_init_rs232+0x3e>
   80230:	4632      	mov	r2, r6
   80232:	6821      	ldr	r1, [r4, #0]
   80234:	4628      	mov	r0, r5
   80236:	4b0d      	ldr	r3, [pc, #52]	; (8026c <usart_init_rs232+0x50>)
   80238:	4798      	blx	r3
   8023a:	4602      	mov	r2, r0
   8023c:	b978      	cbnz	r0, 8025e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8023e:	6863      	ldr	r3, [r4, #4]
   80240:	68a1      	ldr	r1, [r4, #8]
   80242:	430b      	orrs	r3, r1
   80244:	6921      	ldr	r1, [r4, #16]
   80246:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   80248:	68e1      	ldr	r1, [r4, #12]
   8024a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8024c:	4906      	ldr	r1, [pc, #24]	; (80268 <usart_init_rs232+0x4c>)
   8024e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
   80250:	6869      	ldr	r1, [r5, #4]
   80252:	430b      	orrs	r3, r1
   80254:	606b      	str	r3, [r5, #4]
}
   80256:	4610      	mov	r0, r2
   80258:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   8025a:	2201      	movs	r2, #1
   8025c:	e7fb      	b.n	80256 <usart_init_rs232+0x3a>
   8025e:	2201      	movs	r2, #1
   80260:	e7f9      	b.n	80256 <usart_init_rs232+0x3a>
   80262:	bf00      	nop
   80264:	000801f5 	.word	0x000801f5
   80268:	20070b0c 	.word	0x20070b0c
   8026c:	0008019d 	.word	0x0008019d

00080270 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   80270:	2340      	movs	r3, #64	; 0x40
   80272:	6003      	str	r3, [r0, #0]
   80274:	4770      	bx	lr

00080276 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   80276:	2310      	movs	r3, #16
   80278:	6003      	str	r3, [r0, #0]
   8027a:	4770      	bx	lr

0008027c <usart_is_tx_empty>:
	return (p_usart->US_CSR & US_CSR_TXEMPTY) > 0;
   8027c:	6940      	ldr	r0, [r0, #20]
}
   8027e:	f3c0 2040 	ubfx	r0, r0, #9, #1
   80282:	4770      	bx	lr

00080284 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80284:	6943      	ldr	r3, [r0, #20]
   80286:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   8028a:	bf1d      	ittte	ne
   8028c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80290:	61c1      	strne	r1, [r0, #28]
	return 0;
   80292:	2000      	movne	r0, #0
		return 1;
   80294:	2001      	moveq	r0, #1
}
   80296:	4770      	bx	lr

00080298 <usart_putchar>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80298:	6943      	ldr	r3, [r0, #20]
   8029a:	f013 0f02 	tst.w	r3, #2
	p_usart->US_THR = US_THR_TXCHR(c);
   8029e:	bf1d      	ittte	ne
   802a0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   802a4:	61c1      	strne	r1, [r0, #28]
	return 0;
   802a6:	2000      	movne	r0, #0
		return 1;
   802a8:	2001      	moveq	r0, #1
}
   802aa:	4770      	bx	lr

000802ac <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   802ac:	6943      	ldr	r3, [r0, #20]
   802ae:	f013 0f01 	tst.w	r3, #1
   802b2:	d005      	beq.n	802c0 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   802b4:	6983      	ldr	r3, [r0, #24]
   802b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   802ba:	600b      	str	r3, [r1, #0]
	return 0;
   802bc:	2000      	movs	r0, #0
   802be:	4770      	bx	lr
		return 1;
   802c0:	2001      	movs	r0, #1
}
   802c2:	4770      	bx	lr

000802c4 <usart_getchar>:
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   802c4:	6943      	ldr	r3, [r0, #20]
   802c6:	f013 0f01 	tst.w	r3, #1
   802ca:	d0fb      	beq.n	802c4 <usart_getchar>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   802cc:	6983      	ldr	r3, [r0, #24]
   802ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   802d2:	600b      	str	r3, [r1, #0]
}
   802d4:	2000      	movs	r0, #0
   802d6:	4770      	bx	lr

000802d8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   802d8:	b500      	push	{lr}
   802da:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   802dc:	2201      	movs	r2, #1
   802de:	f10d 0107 	add.w	r1, sp, #7
   802e2:	4810      	ldr	r0, [pc, #64]	; (80324 <USART0_Handler+0x4c>)
   802e4:	4b10      	ldr	r3, [pc, #64]	; (80328 <USART0_Handler+0x50>)
   802e6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   802e8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   802ea:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   802ee:	2200      	movs	r2, #0
   802f0:	4b0e      	ldr	r3, [pc, #56]	; (8032c <USART0_Handler+0x54>)
   802f2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   802f4:	4b0e      	ldr	r3, [pc, #56]	; (80330 <USART0_Handler+0x58>)
   802f6:	781b      	ldrb	r3, [r3, #0]
   802f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   802fc:	4a0d      	ldr	r2, [pc, #52]	; (80334 <USART0_Handler+0x5c>)
   802fe:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80300:	2b9b      	cmp	r3, #155	; 0x9b
   80302:	d00b      	beq.n	8031c <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   80304:	3301      	adds	r3, #1
   80306:	4a0a      	ldr	r2, [pc, #40]	; (80330 <USART0_Handler+0x58>)
   80308:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8030a:	2201      	movs	r2, #1
   8030c:	4b07      	ldr	r3, [pc, #28]	; (8032c <USART0_Handler+0x54>)
   8030e:	701a      	strb	r2, [r3, #0]
   80310:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80314:	b662      	cpsie	i
}
   80316:	b003      	add	sp, #12
   80318:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   8031c:	2200      	movs	r2, #0
   8031e:	4b04      	ldr	r3, [pc, #16]	; (80330 <USART0_Handler+0x58>)
   80320:	701a      	strb	r2, [r3, #0]
   80322:	e7f2      	b.n	8030a <USART0_Handler+0x32>
   80324:	40098000 	.word	0x40098000
   80328:	000804ad 	.word	0x000804ad
   8032c:	2007013c 	.word	0x2007013c
   80330:	20070bac 	.word	0x20070bac
   80334:	20070b10 	.word	0x20070b10

00080338 <bluetooth_init>:

#define TX3 IOPORT_CREATE_PIN(PIOD, 4)
#define RX3 IOPORT_CREATE_PIN(PIOD, 5)

void bluetooth_init()
{
   80338:	b570      	push	{r4, r5, r6, lr}
   8033a:	b086      	sub	sp, #24
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8033c:	4b1e      	ldr	r3, [pc, #120]	; (803b8 <bluetooth_init+0x80>)
   8033e:	2210      	movs	r2, #16
   80340:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80342:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
   80346:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_MDDR = mask;
   80348:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
   8034a:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_SCIFSR = mask;
   8034c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR &= ~mask;
   80350:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80352:	f022 0210 	bic.w	r2, r2, #16
   80356:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80358:	2220      	movs	r2, #32
   8035a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8035c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
   80360:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_MDDR = mask;
   80362:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
   80364:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_SCIFSR = mask;
   80366:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR &= ~mask;
   8036a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8036c:	f022 0220 	bic.w	r2, r2, #32
   80370:	671a      	str	r2, [r3, #112]	; 0x70
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80372:	2014      	movs	r0, #20
   80374:	4c11      	ldr	r4, [pc, #68]	; (803bc <bluetooth_init+0x84>)
   80376:	47a0      	blx	r4
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
   80378:	4b11      	ldr	r3, [pc, #68]	; (803c0 <bluetooth_init+0x88>)
   8037a:	689a      	ldr	r2, [r3, #8]
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   8037c:	6819      	ldr	r1, [r3, #0]
   8037e:	9100      	str	r1, [sp, #0]
	usart_settings.char_length = opt->charlength;
   80380:	6859      	ldr	r1, [r3, #4]
   80382:	9101      	str	r1, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
   80384:	9202      	str	r2, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
   80386:	68db      	ldr	r3, [r3, #12]
   80388:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   8038a:	2300      	movs	r3, #0
   8038c:	9304      	str	r3, [sp, #16]
   8038e:	2014      	movs	r0, #20
   80390:	47a0      	blx	r4
		flexcom_set_opmode(FLEXCOM3, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART3);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   80392:	4c0c      	ldr	r4, [pc, #48]	; (803c4 <bluetooth_init+0x8c>)
   80394:	4a0c      	ldr	r2, [pc, #48]	; (803c8 <bluetooth_init+0x90>)
   80396:	4669      	mov	r1, sp
   80398:	4620      	mov	r0, r4
   8039a:	4b0c      	ldr	r3, [pc, #48]	; (803cc <bluetooth_init+0x94>)
   8039c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   8039e:	4620      	mov	r0, r4
   803a0:	4e0b      	ldr	r6, [pc, #44]	; (803d0 <bluetooth_init+0x98>)
   803a2:	47b0      	blx	r6
		usart_enable_rx(p_usart);
   803a4:	4620      	mov	r0, r4
   803a6:	4d0b      	ldr	r5, [pc, #44]	; (803d4 <bluetooth_init+0x9c>)
   803a8:	47a8      	blx	r5
	ioport_set_pin_dir(RX3, IOPORT_DIR_INPUT);
	*/

	//usart_init_rs232(USART_SERIAL, &usart_options, sysclk_get_main_hz());
	
	usart_enable_tx(USART_SERIAL);
   803aa:	4620      	mov	r0, r4
   803ac:	47b0      	blx	r6
	usart_enable_rx(USART_SERIAL);
   803ae:	4620      	mov	r0, r4
   803b0:	47a8      	blx	r5
}
   803b2:	b006      	add	sp, #24
   803b4:	bd70      	pop	{r4, r5, r6, pc}
   803b6:	bf00      	nop
   803b8:	400e1400 	.word	0x400e1400
   803bc:	00080c21 	.word	0x00080c21
   803c0:	2007012c 	.word	0x2007012c
   803c4:	400a4000 	.word	0x400a4000
   803c8:	0501bd00 	.word	0x0501bd00
   803cc:	0008021d 	.word	0x0008021d
   803d0:	00080271 	.word	0x00080271
   803d4:	00080277 	.word	0x00080277

000803d8 <bluetooth_getmessage>:

void bluetooth_getmessage(char *buf, int size)
{
   803d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   803da:	b083      	sub	sp, #12
	uint32_t received_byte;
	for (int i = 0; i < size; i++)
   803dc:	1e0d      	subs	r5, r1, #0
   803de:	dd0d      	ble.n	803fc <bluetooth_getmessage+0x24>
   803e0:	4604      	mov	r4, r0
   803e2:	4405      	add	r5, r0
	{
		// uart_read(CONF_UART, &received_byte);
		usart_getchar(USART_SERIAL, &received_byte);
   803e4:	4f06      	ldr	r7, [pc, #24]	; (80400 <bluetooth_getmessage+0x28>)
   803e6:	4e07      	ldr	r6, [pc, #28]	; (80404 <bluetooth_getmessage+0x2c>)
   803e8:	a901      	add	r1, sp, #4
   803ea:	4638      	mov	r0, r7
   803ec:	47b0      	blx	r6
		buf[i] = received_byte;
   803ee:	9b01      	ldr	r3, [sp, #4]
   803f0:	f804 3b01 	strb.w	r3, [r4], #1

		if (received_byte == '\n')
   803f4:	2b0a      	cmp	r3, #10
   803f6:	d001      	beq.n	803fc <bluetooth_getmessage+0x24>
	for (int i = 0; i < size; i++)
   803f8:	42ac      	cmp	r4, r5
   803fa:	d1f5      	bne.n	803e8 <bluetooth_getmessage+0x10>
		{
			break;
		}
	}
}
   803fc:	b003      	add	sp, #12
   803fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80400:	400a4000 	.word	0x400a4000
   80404:	000802c5 	.word	0x000802c5

00080408 <bluetooth_sendmessage>:

void bluetooth_sendmessage(char *buf, int size)
{
   80408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = 0; i < size; i++)
   8040c:	1e0d      	subs	r5, r1, #0
   8040e:	dd18      	ble.n	80442 <bluetooth_sendmessage+0x3a>
   80410:	4604      	mov	r4, r0
   80412:	4405      	add	r5, r0
	{
		// uart_write(CONF_UART, buf[i]);
		if (usart_is_tx_empty(USART_SERIAL) == 1)
   80414:	4e0c      	ldr	r6, [pc, #48]	; (80448 <bluetooth_sendmessage+0x40>)
   80416:	4f0d      	ldr	r7, [pc, #52]	; (8044c <bluetooth_sendmessage+0x44>)
		{
			uint32_t retval = usart_putchar(USART_SERIAL, buf[i]);
   80418:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80458 <bluetooth_sendmessage+0x50>
   8041c:	e005      	b.n	8042a <bluetooth_sendmessage+0x22>
			printf("success == 0? %d\n", retval);
		}

		if (buf[i] == '\n')
   8041e:	7823      	ldrb	r3, [r4, #0]
   80420:	2b0a      	cmp	r3, #10
   80422:	d00e      	beq.n	80442 <bluetooth_sendmessage+0x3a>
   80424:	3401      	adds	r4, #1
	for (int i = 0; i < size; i++)
   80426:	42ac      	cmp	r4, r5
   80428:	d00b      	beq.n	80442 <bluetooth_sendmessage+0x3a>
		if (usart_is_tx_empty(USART_SERIAL) == 1)
   8042a:	4630      	mov	r0, r6
   8042c:	47b8      	blx	r7
   8042e:	2801      	cmp	r0, #1
   80430:	d1f5      	bne.n	8041e <bluetooth_sendmessage+0x16>
			uint32_t retval = usart_putchar(USART_SERIAL, buf[i]);
   80432:	7821      	ldrb	r1, [r4, #0]
   80434:	4630      	mov	r0, r6
   80436:	47c0      	blx	r8
			printf("success == 0? %d\n", retval);
   80438:	4601      	mov	r1, r0
   8043a:	4805      	ldr	r0, [pc, #20]	; (80450 <bluetooth_sendmessage+0x48>)
   8043c:	4b05      	ldr	r3, [pc, #20]	; (80454 <bluetooth_sendmessage+0x4c>)
   8043e:	4798      	blx	r3
   80440:	e7ed      	b.n	8041e <bluetooth_sendmessage+0x16>
   80442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80446:	bf00      	nop
   80448:	400a4000 	.word	0x400a4000
   8044c:	0008027d 	.word	0x0008027d
   80450:	00083d74 	.word	0x00083d74
   80454:	00080f45 	.word	0x00080f45
   80458:	00080299 	.word	0x00080299

0008045c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8045c:	3801      	subs	r0, #1
   8045e:	2802      	cmp	r0, #2
   80460:	d815      	bhi.n	8048e <_write+0x32>
{
   80462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80466:	460e      	mov	r6, r1
   80468:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8046a:	b19a      	cbz	r2, 80494 <_write+0x38>
   8046c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8046e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 804a8 <_write+0x4c>
   80472:	4f0c      	ldr	r7, [pc, #48]	; (804a4 <_write+0x48>)
   80474:	f8d8 0000 	ldr.w	r0, [r8]
   80478:	f815 1b01 	ldrb.w	r1, [r5], #1
   8047c:	683b      	ldr	r3, [r7, #0]
   8047e:	4798      	blx	r3
   80480:	2800      	cmp	r0, #0
   80482:	db0a      	blt.n	8049a <_write+0x3e>
   80484:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   80486:	3c01      	subs	r4, #1
   80488:	d1f4      	bne.n	80474 <_write+0x18>
   8048a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8048e:	f04f 30ff 	mov.w	r0, #4294967295
   80492:	4770      	bx	lr
	for (; len != 0; --len) {
   80494:	4610      	mov	r0, r2
   80496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8049a:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8049e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804a2:	bf00      	nop
   804a4:	20070c5c 	.word	0x20070c5c
   804a8:	20070c60 	.word	0x20070c60

000804ac <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   804ac:	2a00      	cmp	r2, #0
   804ae:	d051      	beq.n	80554 <usart_serial_read_packet+0xa8>
{
   804b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804b4:	b083      	sub	sp, #12
   804b6:	4605      	mov	r5, r0
   804b8:	460c      	mov	r4, r1
   804ba:	4692      	mov	sl, r2
   804bc:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   804be:	4f26      	ldr	r7, [pc, #152]	; (80558 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   804c0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8056c <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   804c4:	4e25      	ldr	r6, [pc, #148]	; (8055c <usart_serial_read_packet+0xb0>)
   804c6:	e01d      	b.n	80504 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   804c8:	4621      	mov	r1, r4
   804ca:	4638      	mov	r0, r7
   804cc:	47c8      	blx	r9
   804ce:	2800      	cmp	r0, #0
   804d0:	d1fa      	bne.n	804c8 <usart_serial_read_packet+0x1c>
   804d2:	e021      	b.n	80518 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   804d4:	469b      	mov	fp, r3
   804d6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80570 <usart_serial_read_packet+0xc4>
   804da:	a901      	add	r1, sp, #4
   804dc:	4658      	mov	r0, fp
   804de:	47c0      	blx	r8
   804e0:	2800      	cmp	r0, #0
   804e2:	d1fa      	bne.n	804da <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   804e4:	9b01      	ldr	r3, [sp, #4]
   804e6:	7023      	strb	r3, [r4, #0]
   804e8:	e019      	b.n	8051e <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   804ea:	469b      	mov	fp, r3
   804ec:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80570 <usart_serial_read_packet+0xc4>
   804f0:	a901      	add	r1, sp, #4
   804f2:	4658      	mov	r0, fp
   804f4:	47c0      	blx	r8
   804f6:	2800      	cmp	r0, #0
   804f8:	d1fa      	bne.n	804f0 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   804fa:	9b01      	ldr	r3, [sp, #4]
   804fc:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   804fe:	3401      	adds	r4, #1
	while (len) {
   80500:	4554      	cmp	r4, sl
   80502:	d023      	beq.n	8054c <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   80504:	2300      	movs	r3, #0
   80506:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80508:	42bd      	cmp	r5, r7
   8050a:	d0dd      	beq.n	804c8 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   8050c:	4b14      	ldr	r3, [pc, #80]	; (80560 <usart_serial_read_packet+0xb4>)
   8050e:	429d      	cmp	r5, r3
   80510:	d0e0      	beq.n	804d4 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   80512:	4b14      	ldr	r3, [pc, #80]	; (80564 <usart_serial_read_packet+0xb8>)
   80514:	429d      	cmp	r5, r3
   80516:	d0e8      	beq.n	804ea <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   80518:	4b13      	ldr	r3, [pc, #76]	; (80568 <usart_serial_read_packet+0xbc>)
   8051a:	429d      	cmp	r5, r3
   8051c:	d00b      	beq.n	80536 <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   8051e:	42b5      	cmp	r5, r6
   80520:	d1ed      	bne.n	804fe <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80522:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80570 <usart_serial_read_packet+0xc4>
   80526:	a901      	add	r1, sp, #4
   80528:	4630      	mov	r0, r6
   8052a:	47c0      	blx	r8
   8052c:	2800      	cmp	r0, #0
   8052e:	d1fa      	bne.n	80526 <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80530:	9b01      	ldr	r3, [sp, #4]
   80532:	7023      	strb	r3, [r4, #0]
   80534:	e7e3      	b.n	804fe <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80536:	469b      	mov	fp, r3
   80538:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80570 <usart_serial_read_packet+0xc4>
   8053c:	a901      	add	r1, sp, #4
   8053e:	4658      	mov	r0, fp
   80540:	47c0      	blx	r8
   80542:	2800      	cmp	r0, #0
   80544:	d1fa      	bne.n	8053c <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   80546:	9b01      	ldr	r3, [sp, #4]
   80548:	7023      	strb	r3, [r4, #0]
   8054a:	e7d8      	b.n	804fe <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   8054c:	2000      	movs	r0, #0
   8054e:	b003      	add	sp, #12
   80550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80554:	2000      	movs	r0, #0
   80556:	4770      	bx	lr
   80558:	400e0800 	.word	0x400e0800
   8055c:	400a4000 	.word	0x400a4000
   80560:	40098000 	.word	0x40098000
   80564:	4009c000 	.word	0x4009c000
   80568:	400a0000 	.word	0x400a0000
   8056c:	000805bb 	.word	0x000805bb
   80570:	000802ad 	.word	0x000802ad

00080574 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80574:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80576:	23ac      	movs	r3, #172	; 0xac
   80578:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8057a:	680b      	ldr	r3, [r1, #0]
   8057c:	684a      	ldr	r2, [r1, #4]
   8057e:	fbb3 f3f2 	udiv	r3, r3, r2
   80582:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80584:	1e5c      	subs	r4, r3, #1
   80586:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8058a:	4294      	cmp	r4, r2
   8058c:	d80b      	bhi.n	805a6 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8058e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80590:	688b      	ldr	r3, [r1, #8]
   80592:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80594:	f240 2302 	movw	r3, #514	; 0x202
   80598:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8059c:	2350      	movs	r3, #80	; 0x50
   8059e:	6003      	str	r3, [r0, #0]

	return 0;
   805a0:	2000      	movs	r0, #0
}
   805a2:	bc10      	pop	{r4}
   805a4:	4770      	bx	lr
		return 1;
   805a6:	2001      	movs	r0, #1
   805a8:	e7fb      	b.n	805a2 <uart_init+0x2e>

000805aa <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   805aa:	6943      	ldr	r3, [r0, #20]
   805ac:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   805b0:	bf1a      	itte	ne
   805b2:	61c1      	strne	r1, [r0, #28]
	return 0;
   805b4:	2000      	movne	r0, #0
		return 1;
   805b6:	2001      	moveq	r0, #1
}
   805b8:	4770      	bx	lr

000805ba <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   805ba:	6943      	ldr	r3, [r0, #20]
   805bc:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   805c0:	bf1d      	ittte	ne
   805c2:	6983      	ldrne	r3, [r0, #24]
   805c4:	700b      	strbne	r3, [r1, #0]
	return 0;
   805c6:	2000      	movne	r0, #0
		return 1;
   805c8:	2001      	moveq	r0, #1
}
   805ca:	4770      	bx	lr

000805cc <usart_serial_getchar>:
{
   805cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   805ce:	b083      	sub	sp, #12
   805d0:	4604      	mov	r4, r0
   805d2:	460d      	mov	r5, r1
	uint32_t val = 0;
   805d4:	2300      	movs	r3, #0
   805d6:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   805d8:	4b20      	ldr	r3, [pc, #128]	; (8065c <usart_serial_getchar+0x90>)
   805da:	4298      	cmp	r0, r3
   805dc:	d00d      	beq.n	805fa <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   805de:	4b20      	ldr	r3, [pc, #128]	; (80660 <usart_serial_getchar+0x94>)
   805e0:	4298      	cmp	r0, r3
   805e2:	d012      	beq.n	8060a <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   805e4:	4b1f      	ldr	r3, [pc, #124]	; (80664 <usart_serial_getchar+0x98>)
   805e6:	4298      	cmp	r0, r3
   805e8:	d019      	beq.n	8061e <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   805ea:	4b1f      	ldr	r3, [pc, #124]	; (80668 <usart_serial_getchar+0x9c>)
   805ec:	429c      	cmp	r4, r3
   805ee:	d020      	beq.n	80632 <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   805f0:	4b1e      	ldr	r3, [pc, #120]	; (8066c <usart_serial_getchar+0xa0>)
   805f2:	429c      	cmp	r4, r3
   805f4:	d027      	beq.n	80646 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   805f6:	b003      	add	sp, #12
   805f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   805fa:	461f      	mov	r7, r3
   805fc:	4e1c      	ldr	r6, [pc, #112]	; (80670 <usart_serial_getchar+0xa4>)
   805fe:	4629      	mov	r1, r5
   80600:	4638      	mov	r0, r7
   80602:	47b0      	blx	r6
   80604:	2800      	cmp	r0, #0
   80606:	d1fa      	bne.n	805fe <usart_serial_getchar+0x32>
   80608:	e7ef      	b.n	805ea <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8060a:	461f      	mov	r7, r3
   8060c:	4e19      	ldr	r6, [pc, #100]	; (80674 <usart_serial_getchar+0xa8>)
   8060e:	a901      	add	r1, sp, #4
   80610:	4638      	mov	r0, r7
   80612:	47b0      	blx	r6
   80614:	2800      	cmp	r0, #0
   80616:	d1fa      	bne.n	8060e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80618:	9b01      	ldr	r3, [sp, #4]
   8061a:	702b      	strb	r3, [r5, #0]
   8061c:	e7e8      	b.n	805f0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8061e:	461e      	mov	r6, r3
   80620:	4c14      	ldr	r4, [pc, #80]	; (80674 <usart_serial_getchar+0xa8>)
   80622:	a901      	add	r1, sp, #4
   80624:	4630      	mov	r0, r6
   80626:	47a0      	blx	r4
   80628:	2800      	cmp	r0, #0
   8062a:	d1fa      	bne.n	80622 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   8062c:	9b01      	ldr	r3, [sp, #4]
   8062e:	702b      	strb	r3, [r5, #0]
   80630:	e7e1      	b.n	805f6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80632:	461e      	mov	r6, r3
   80634:	4c0f      	ldr	r4, [pc, #60]	; (80674 <usart_serial_getchar+0xa8>)
   80636:	a901      	add	r1, sp, #4
   80638:	4630      	mov	r0, r6
   8063a:	47a0      	blx	r4
   8063c:	2800      	cmp	r0, #0
   8063e:	d1fa      	bne.n	80636 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80640:	9b01      	ldr	r3, [sp, #4]
   80642:	702b      	strb	r3, [r5, #0]
   80644:	e7d7      	b.n	805f6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80646:	461e      	mov	r6, r3
   80648:	4c0a      	ldr	r4, [pc, #40]	; (80674 <usart_serial_getchar+0xa8>)
   8064a:	a901      	add	r1, sp, #4
   8064c:	4630      	mov	r0, r6
   8064e:	47a0      	blx	r4
   80650:	2800      	cmp	r0, #0
   80652:	d1fa      	bne.n	8064a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80654:	9b01      	ldr	r3, [sp, #4]
   80656:	702b      	strb	r3, [r5, #0]
}
   80658:	e7cd      	b.n	805f6 <usart_serial_getchar+0x2a>
   8065a:	bf00      	nop
   8065c:	400e0800 	.word	0x400e0800
   80660:	40098000 	.word	0x40098000
   80664:	4009c000 	.word	0x4009c000
   80668:	400a0000 	.word	0x400a0000
   8066c:	400a4000 	.word	0x400a4000
   80670:	000805bb 	.word	0x000805bb
   80674:	000802ad 	.word	0x000802ad

00080678 <usart_serial_putchar>:
{
   80678:	b570      	push	{r4, r5, r6, lr}
   8067a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   8067c:	4b1e      	ldr	r3, [pc, #120]	; (806f8 <usart_serial_putchar+0x80>)
   8067e:	4298      	cmp	r0, r3
   80680:	d00d      	beq.n	8069e <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80682:	4b1e      	ldr	r3, [pc, #120]	; (806fc <usart_serial_putchar+0x84>)
   80684:	4298      	cmp	r0, r3
   80686:	d013      	beq.n	806b0 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80688:	4b1d      	ldr	r3, [pc, #116]	; (80700 <usart_serial_putchar+0x88>)
   8068a:	4298      	cmp	r0, r3
   8068c:	d019      	beq.n	806c2 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   8068e:	4b1d      	ldr	r3, [pc, #116]	; (80704 <usart_serial_putchar+0x8c>)
   80690:	4298      	cmp	r0, r3
   80692:	d01f      	beq.n	806d4 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80694:	4b1c      	ldr	r3, [pc, #112]	; (80708 <usart_serial_putchar+0x90>)
   80696:	4298      	cmp	r0, r3
   80698:	d025      	beq.n	806e6 <usart_serial_putchar+0x6e>
	return 0;
   8069a:	2000      	movs	r0, #0
}
   8069c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8069e:	461e      	mov	r6, r3
   806a0:	4d1a      	ldr	r5, [pc, #104]	; (8070c <usart_serial_putchar+0x94>)
   806a2:	4621      	mov	r1, r4
   806a4:	4630      	mov	r0, r6
   806a6:	47a8      	blx	r5
   806a8:	2800      	cmp	r0, #0
   806aa:	d1fa      	bne.n	806a2 <usart_serial_putchar+0x2a>
		return 1;
   806ac:	2001      	movs	r0, #1
   806ae:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   806b0:	461e      	mov	r6, r3
   806b2:	4d17      	ldr	r5, [pc, #92]	; (80710 <usart_serial_putchar+0x98>)
   806b4:	4621      	mov	r1, r4
   806b6:	4630      	mov	r0, r6
   806b8:	47a8      	blx	r5
   806ba:	2800      	cmp	r0, #0
   806bc:	d1fa      	bne.n	806b4 <usart_serial_putchar+0x3c>
		return 1;
   806be:	2001      	movs	r0, #1
   806c0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   806c2:	461e      	mov	r6, r3
   806c4:	4d12      	ldr	r5, [pc, #72]	; (80710 <usart_serial_putchar+0x98>)
   806c6:	4621      	mov	r1, r4
   806c8:	4630      	mov	r0, r6
   806ca:	47a8      	blx	r5
   806cc:	2800      	cmp	r0, #0
   806ce:	d1fa      	bne.n	806c6 <usart_serial_putchar+0x4e>
		return 1;
   806d0:	2001      	movs	r0, #1
   806d2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   806d4:	461e      	mov	r6, r3
   806d6:	4d0e      	ldr	r5, [pc, #56]	; (80710 <usart_serial_putchar+0x98>)
   806d8:	4621      	mov	r1, r4
   806da:	4630      	mov	r0, r6
   806dc:	47a8      	blx	r5
   806de:	2800      	cmp	r0, #0
   806e0:	d1fa      	bne.n	806d8 <usart_serial_putchar+0x60>
		return 1;
   806e2:	2001      	movs	r0, #1
   806e4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   806e6:	461e      	mov	r6, r3
   806e8:	4d09      	ldr	r5, [pc, #36]	; (80710 <usart_serial_putchar+0x98>)
   806ea:	4621      	mov	r1, r4
   806ec:	4630      	mov	r0, r6
   806ee:	47a8      	blx	r5
   806f0:	2800      	cmp	r0, #0
   806f2:	d1fa      	bne.n	806ea <usart_serial_putchar+0x72>
		return 1;
   806f4:	2001      	movs	r0, #1
   806f6:	bd70      	pop	{r4, r5, r6, pc}
   806f8:	400e0800 	.word	0x400e0800
   806fc:	40098000 	.word	0x40098000
   80700:	4009c000 	.word	0x4009c000
   80704:	400a0000 	.word	0x400a0000
   80708:	400a4000 	.word	0x400a4000
   8070c:	000805ab 	.word	0x000805ab
   80710:	00080285 	.word	0x00080285

00080714 <configure_console>:
#include <asf.h>
#include "config/conf_board.h"
#include "console_functions.h"

void configure_console(void)
{
   80714:	b530      	push	{r4, r5, lr}
   80716:	b085      	sub	sp, #20
   80718:	2008      	movs	r0, #8
   8071a:	4d15      	ldr	r5, [pc, #84]	; (80770 <configure_console+0x5c>)
   8071c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8071e:	4c15      	ldr	r4, [pc, #84]	; (80774 <configure_console+0x60>)
   80720:	4b15      	ldr	r3, [pc, #84]	; (80778 <configure_console+0x64>)
   80722:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80724:	4a15      	ldr	r2, [pc, #84]	; (8077c <configure_console+0x68>)
   80726:	4b16      	ldr	r3, [pc, #88]	; (80780 <configure_console+0x6c>)
   80728:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8072a:	4a16      	ldr	r2, [pc, #88]	; (80784 <configure_console+0x70>)
   8072c:	4b16      	ldr	r3, [pc, #88]	; (80788 <configure_console+0x74>)
   8072e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80730:	4b16      	ldr	r3, [pc, #88]	; (8078c <configure_console+0x78>)
   80732:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80734:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   80738:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8073a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8073e:	9303      	str	r3, [sp, #12]
   80740:	2008      	movs	r0, #8
   80742:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80744:	a901      	add	r1, sp, #4
   80746:	4620      	mov	r0, r4
   80748:	4b11      	ldr	r3, [pc, #68]	; (80790 <configure_console+0x7c>)
   8074a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8074c:	4d11      	ldr	r5, [pc, #68]	; (80794 <configure_console+0x80>)
   8074e:	682b      	ldr	r3, [r5, #0]
   80750:	2100      	movs	r1, #0
   80752:	6898      	ldr	r0, [r3, #8]
   80754:	4c10      	ldr	r4, [pc, #64]	; (80798 <configure_console+0x84>)
   80756:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80758:	682b      	ldr	r3, [r5, #0]
   8075a:	2100      	movs	r1, #0
   8075c:	6858      	ldr	r0, [r3, #4]
   8075e:	47a0      	blx	r4
	};

	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);

	printf("Console ready\n");
   80760:	480e      	ldr	r0, [pc, #56]	; (8079c <configure_console+0x88>)
   80762:	4c0f      	ldr	r4, [pc, #60]	; (807a0 <configure_console+0x8c>)
   80764:	47a0      	blx	r4
	printf("=============\n");
   80766:	480f      	ldr	r0, [pc, #60]	; (807a4 <configure_console+0x90>)
   80768:	47a0      	blx	r4
}
   8076a:	b005      	add	sp, #20
   8076c:	bd30      	pop	{r4, r5, pc}
   8076e:	bf00      	nop
   80770:	00080c21 	.word	0x00080c21
   80774:	400e0800 	.word	0x400e0800
   80778:	20070c60 	.word	0x20070c60
   8077c:	00080679 	.word	0x00080679
   80780:	20070c5c 	.word	0x20070c5c
   80784:	000805cd 	.word	0x000805cd
   80788:	20070c58 	.word	0x20070c58
   8078c:	0501bd00 	.word	0x0501bd00
   80790:	00080575 	.word	0x00080575
   80794:	20070144 	.word	0x20070144
   80798:	00081009 	.word	0x00081009
   8079c:	00083d88 	.word	0x00083d88
   807a0:	00080f45 	.word	0x00080f45
   807a4:	00083d98 	.word	0x00083d98

000807a8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   807a8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   807aa:	480e      	ldr	r0, [pc, #56]	; (807e4 <sysclk_init+0x3c>)
   807ac:	4b0e      	ldr	r3, [pc, #56]	; (807e8 <sysclk_init+0x40>)
   807ae:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   807b0:	213e      	movs	r1, #62	; 0x3e
   807b2:	2000      	movs	r0, #0
   807b4:	4b0d      	ldr	r3, [pc, #52]	; (807ec <sysclk_init+0x44>)
   807b6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   807b8:	4c0d      	ldr	r4, [pc, #52]	; (807f0 <sysclk_init+0x48>)
   807ba:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   807bc:	2800      	cmp	r0, #0
   807be:	d0fc      	beq.n	807ba <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   807c0:	4b0c      	ldr	r3, [pc, #48]	; (807f4 <sysclk_init+0x4c>)
   807c2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   807c4:	4a0c      	ldr	r2, [pc, #48]	; (807f8 <sysclk_init+0x50>)
   807c6:	4b0d      	ldr	r3, [pc, #52]	; (807fc <sysclk_init+0x54>)
   807c8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   807ca:	4c0d      	ldr	r4, [pc, #52]	; (80800 <sysclk_init+0x58>)
   807cc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   807ce:	2800      	cmp	r0, #0
   807d0:	d0fc      	beq.n	807cc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   807d2:	2010      	movs	r0, #16
   807d4:	4b0b      	ldr	r3, [pc, #44]	; (80804 <sysclk_init+0x5c>)
   807d6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   807d8:	4b0b      	ldr	r3, [pc, #44]	; (80808 <sysclk_init+0x60>)
   807da:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   807dc:	4801      	ldr	r0, [pc, #4]	; (807e4 <sysclk_init+0x3c>)
   807de:	4b02      	ldr	r3, [pc, #8]	; (807e8 <sysclk_init+0x40>)
   807e0:	4798      	blx	r3
   807e2:	bd10      	pop	{r4, pc}
   807e4:	0501bd00 	.word	0x0501bd00
   807e8:	200700a5 	.word	0x200700a5
   807ec:	00080b9d 	.word	0x00080b9d
   807f0:	00080bf1 	.word	0x00080bf1
   807f4:	00080c01 	.word	0x00080c01
   807f8:	200d3f01 	.word	0x200d3f01
   807fc:	400e0600 	.word	0x400e0600
   80800:	00080c11 	.word	0x00080c11
   80804:	00080b39 	.word	0x00080b39
   80808:	00080d11 	.word	0x00080d11

0008080c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8080c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8080e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80812:	4b16      	ldr	r3, [pc, #88]	; (8086c <board_init+0x60>)
   80814:	605a      	str	r2, [r3, #4]
   80816:	200b      	movs	r0, #11
   80818:	4c15      	ldr	r4, [pc, #84]	; (80870 <board_init+0x64>)
   8081a:	47a0      	blx	r4
   8081c:	200c      	movs	r0, #12
   8081e:	47a0      	blx	r4
   80820:	200d      	movs	r0, #13
   80822:	47a0      	blx	r4
   80824:	200e      	movs	r0, #14
   80826:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80828:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8082c:	203b      	movs	r0, #59	; 0x3b
   8082e:	4c11      	ldr	r4, [pc, #68]	; (80874 <board_init+0x68>)
   80830:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80832:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80836:	2055      	movs	r0, #85	; 0x55
   80838:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8083a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8083e:	2056      	movs	r0, #86	; 0x56
   80840:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80842:	490d      	ldr	r1, [pc, #52]	; (80878 <board_init+0x6c>)
   80844:	2068      	movs	r0, #104	; 0x68
   80846:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80848:	490c      	ldr	r1, [pc, #48]	; (8087c <board_init+0x70>)
   8084a:	205c      	movs	r0, #92	; 0x5c
   8084c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8084e:	4a0c      	ldr	r2, [pc, #48]	; (80880 <board_init+0x74>)
   80850:	f44f 7140 	mov.w	r1, #768	; 0x300
   80854:	480b      	ldr	r0, [pc, #44]	; (80884 <board_init+0x78>)
   80856:	4b0c      	ldr	r3, [pc, #48]	; (80888 <board_init+0x7c>)
   80858:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8085a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8085e:	202b      	movs	r0, #43	; 0x2b
   80860:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80862:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80866:	202a      	movs	r0, #42	; 0x2a
   80868:	47a0      	blx	r4
   8086a:	bd10      	pop	{r4, pc}
   8086c:	400e1a50 	.word	0x400e1a50
   80870:	00080c21 	.word	0x00080c21
   80874:	0008092d 	.word	0x0008092d
   80878:	28000079 	.word	0x28000079
   8087c:	28000001 	.word	0x28000001
   80880:	08000001 	.word	0x08000001
   80884:	400e0e00 	.word	0x400e0e00
   80888:	000809fd 	.word	0x000809fd

0008088c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8088c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8088e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80892:	d016      	beq.n	808c2 <pio_set_peripheral+0x36>
   80894:	d80b      	bhi.n	808ae <pio_set_peripheral+0x22>
   80896:	b149      	cbz	r1, 808ac <pio_set_peripheral+0x20>
   80898:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8089c:	d105      	bne.n	808aa <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8089e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   808a0:	6f01      	ldr	r1, [r0, #112]	; 0x70
   808a2:	400b      	ands	r3, r1
   808a4:	ea23 0302 	bic.w	r3, r3, r2
   808a8:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   808aa:	6042      	str	r2, [r0, #4]
   808ac:	4770      	bx	lr
	switch (ul_type) {
   808ae:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   808b2:	d0fb      	beq.n	808ac <pio_set_peripheral+0x20>
   808b4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   808b8:	d0f8      	beq.n	808ac <pio_set_peripheral+0x20>
   808ba:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   808be:	d1f4      	bne.n	808aa <pio_set_peripheral+0x1e>
   808c0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   808c2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   808c4:	4313      	orrs	r3, r2
   808c6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   808c8:	e7ef      	b.n	808aa <pio_set_peripheral+0x1e>

000808ca <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808ca:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   808cc:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   808d0:	bf14      	ite	ne
   808d2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   808d4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   808d6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   808da:	bf14      	ite	ne
   808dc:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   808de:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   808e0:	f012 0f02 	tst.w	r2, #2
   808e4:	d107      	bne.n	808f6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   808e6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   808ea:	bf18      	it	ne
   808ec:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   808f0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   808f2:	6001      	str	r1, [r0, #0]
   808f4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   808f6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   808fa:	e7f9      	b.n	808f0 <pio_set_input+0x26>

000808fc <pio_set_output>:
{
   808fc:	b410      	push	{r4}
   808fe:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80900:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80902:	b944      	cbnz	r4, 80916 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80904:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80906:	b143      	cbz	r3, 8091a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80908:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8090a:	b942      	cbnz	r2, 8091e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8090c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8090e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80910:	6001      	str	r1, [r0, #0]
}
   80912:	bc10      	pop	{r4}
   80914:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80916:	6641      	str	r1, [r0, #100]	; 0x64
   80918:	e7f5      	b.n	80906 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8091a:	6541      	str	r1, [r0, #84]	; 0x54
   8091c:	e7f5      	b.n	8090a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8091e:	6301      	str	r1, [r0, #48]	; 0x30
   80920:	e7f5      	b.n	8090e <pio_set_output+0x12>

00080922 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80922:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80924:	4770      	bx	lr

00080926 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80926:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80928:	4770      	bx	lr
	...

0008092c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8092c:	b570      	push	{r4, r5, r6, lr}
   8092e:	b082      	sub	sp, #8
   80930:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80932:	0943      	lsrs	r3, r0, #5
   80934:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80938:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8093c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8093e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80942:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80946:	d031      	beq.n	809ac <pio_configure_pin+0x80>
   80948:	d816      	bhi.n	80978 <pio_configure_pin+0x4c>
   8094a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8094e:	d01b      	beq.n	80988 <pio_configure_pin+0x5c>
   80950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80954:	d116      	bne.n	80984 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80956:	f000 001f 	and.w	r0, r0, #31
   8095a:	2601      	movs	r6, #1
   8095c:	4086      	lsls	r6, r0
   8095e:	4632      	mov	r2, r6
   80960:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80964:	4620      	mov	r0, r4
   80966:	4b22      	ldr	r3, [pc, #136]	; (809f0 <pio_configure_pin+0xc4>)
   80968:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8096a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8096e:	bf14      	ite	ne
   80970:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80972:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80974:	2001      	movs	r0, #1
   80976:	e017      	b.n	809a8 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80978:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8097c:	d021      	beq.n	809c2 <pio_configure_pin+0x96>
   8097e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80982:	d01e      	beq.n	809c2 <pio_configure_pin+0x96>
		return 0;
   80984:	2000      	movs	r0, #0
   80986:	e00f      	b.n	809a8 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80988:	f000 001f 	and.w	r0, r0, #31
   8098c:	2601      	movs	r6, #1
   8098e:	4086      	lsls	r6, r0
   80990:	4632      	mov	r2, r6
   80992:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80996:	4620      	mov	r0, r4
   80998:	4b15      	ldr	r3, [pc, #84]	; (809f0 <pio_configure_pin+0xc4>)
   8099a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8099c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809a0:	bf14      	ite	ne
   809a2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   809a4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   809a6:	2001      	movs	r0, #1
}
   809a8:	b002      	add	sp, #8
   809aa:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   809ac:	f000 011f 	and.w	r1, r0, #31
   809b0:	2601      	movs	r6, #1
   809b2:	462a      	mov	r2, r5
   809b4:	fa06 f101 	lsl.w	r1, r6, r1
   809b8:	4620      	mov	r0, r4
   809ba:	4b0e      	ldr	r3, [pc, #56]	; (809f4 <pio_configure_pin+0xc8>)
   809bc:	4798      	blx	r3
	return 1;
   809be:	4630      	mov	r0, r6
		break;
   809c0:	e7f2      	b.n	809a8 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   809c2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   809c6:	f000 011f 	and.w	r1, r0, #31
   809ca:	2601      	movs	r6, #1
   809cc:	ea05 0306 	and.w	r3, r5, r6
   809d0:	9300      	str	r3, [sp, #0]
   809d2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   809d6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   809da:	bf14      	ite	ne
   809dc:	2200      	movne	r2, #0
   809de:	2201      	moveq	r2, #1
   809e0:	fa06 f101 	lsl.w	r1, r6, r1
   809e4:	4620      	mov	r0, r4
   809e6:	4c04      	ldr	r4, [pc, #16]	; (809f8 <pio_configure_pin+0xcc>)
   809e8:	47a0      	blx	r4
	return 1;
   809ea:	4630      	mov	r0, r6
		break;
   809ec:	e7dc      	b.n	809a8 <pio_configure_pin+0x7c>
   809ee:	bf00      	nop
   809f0:	0008088d 	.word	0x0008088d
   809f4:	000808cb 	.word	0x000808cb
   809f8:	000808fd 	.word	0x000808fd

000809fc <pio_configure_pin_group>:
{
   809fc:	b570      	push	{r4, r5, r6, lr}
   809fe:	b082      	sub	sp, #8
   80a00:	4605      	mov	r5, r0
   80a02:	460e      	mov	r6, r1
   80a04:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80a06:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80a0a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80a0e:	d027      	beq.n	80a60 <pio_configure_pin_group+0x64>
   80a10:	d811      	bhi.n	80a36 <pio_configure_pin_group+0x3a>
   80a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80a16:	d016      	beq.n	80a46 <pio_configure_pin_group+0x4a>
   80a18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80a1c:	d111      	bne.n	80a42 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a1e:	460a      	mov	r2, r1
   80a20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a24:	4b19      	ldr	r3, [pc, #100]	; (80a8c <pio_configure_pin_group+0x90>)
   80a26:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80a28:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80a2c:	bf14      	ite	ne
   80a2e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a30:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80a32:	2001      	movs	r0, #1
   80a34:	e012      	b.n	80a5c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80a36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80a3a:	d015      	beq.n	80a68 <pio_configure_pin_group+0x6c>
   80a3c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80a40:	d012      	beq.n	80a68 <pio_configure_pin_group+0x6c>
		return 0;
   80a42:	2000      	movs	r0, #0
   80a44:	e00a      	b.n	80a5c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80a46:	460a      	mov	r2, r1
   80a48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a4c:	4b0f      	ldr	r3, [pc, #60]	; (80a8c <pio_configure_pin_group+0x90>)
   80a4e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80a50:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80a54:	bf14      	ite	ne
   80a56:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a58:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80a5a:	2001      	movs	r0, #1
}
   80a5c:	b002      	add	sp, #8
   80a5e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80a60:	4b0b      	ldr	r3, [pc, #44]	; (80a90 <pio_configure_pin_group+0x94>)
   80a62:	4798      	blx	r3
	return 1;
   80a64:	2001      	movs	r0, #1
		break;
   80a66:	e7f9      	b.n	80a5c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a68:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80a6c:	f004 0301 	and.w	r3, r4, #1
   80a70:	9300      	str	r3, [sp, #0]
   80a72:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80a76:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a7a:	bf14      	ite	ne
   80a7c:	2200      	movne	r2, #0
   80a7e:	2201      	moveq	r2, #1
   80a80:	4631      	mov	r1, r6
   80a82:	4628      	mov	r0, r5
   80a84:	4c03      	ldr	r4, [pc, #12]	; (80a94 <pio_configure_pin_group+0x98>)
   80a86:	47a0      	blx	r4
	return 1;
   80a88:	2001      	movs	r0, #1
		break;
   80a8a:	e7e7      	b.n	80a5c <pio_configure_pin_group+0x60>
   80a8c:	0008088d 	.word	0x0008088d
   80a90:	000808cb 	.word	0x000808cb
   80a94:	000808fd 	.word	0x000808fd

00080a98 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80a9c:	4604      	mov	r4, r0
   80a9e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80aa0:	4b0e      	ldr	r3, [pc, #56]	; (80adc <pio_handler_process+0x44>)
   80aa2:	4798      	blx	r3
   80aa4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80aa6:	4620      	mov	r0, r4
   80aa8:	4b0d      	ldr	r3, [pc, #52]	; (80ae0 <pio_handler_process+0x48>)
   80aaa:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80aac:	4005      	ands	r5, r0
   80aae:	d013      	beq.n	80ad8 <pio_handler_process+0x40>
   80ab0:	4c0c      	ldr	r4, [pc, #48]	; (80ae4 <pio_handler_process+0x4c>)
   80ab2:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80ab6:	e003      	b.n	80ac0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80ab8:	42b4      	cmp	r4, r6
   80aba:	d00d      	beq.n	80ad8 <pio_handler_process+0x40>
   80abc:	3410      	adds	r4, #16
		while (status != 0) {
   80abe:	b15d      	cbz	r5, 80ad8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80ac0:	6820      	ldr	r0, [r4, #0]
   80ac2:	4540      	cmp	r0, r8
   80ac4:	d1f8      	bne.n	80ab8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80ac6:	6861      	ldr	r1, [r4, #4]
   80ac8:	4229      	tst	r1, r5
   80aca:	d0f5      	beq.n	80ab8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80acc:	68e3      	ldr	r3, [r4, #12]
   80ace:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80ad0:	6863      	ldr	r3, [r4, #4]
   80ad2:	ea25 0503 	bic.w	r5, r5, r3
   80ad6:	e7ef      	b.n	80ab8 <pio_handler_process+0x20>
   80ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80adc:	00080923 	.word	0x00080923
   80ae0:	00080927 	.word	0x00080927
   80ae4:	20070bb0 	.word	0x20070bb0

00080ae8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80ae8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80aea:	210b      	movs	r1, #11
   80aec:	4801      	ldr	r0, [pc, #4]	; (80af4 <PIOA_Handler+0xc>)
   80aee:	4b02      	ldr	r3, [pc, #8]	; (80af8 <PIOA_Handler+0x10>)
   80af0:	4798      	blx	r3
   80af2:	bd08      	pop	{r3, pc}
   80af4:	400e0e00 	.word	0x400e0e00
   80af8:	00080a99 	.word	0x00080a99

00080afc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80afc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80afe:	210c      	movs	r1, #12
   80b00:	4801      	ldr	r0, [pc, #4]	; (80b08 <PIOB_Handler+0xc>)
   80b02:	4b02      	ldr	r3, [pc, #8]	; (80b0c <PIOB_Handler+0x10>)
   80b04:	4798      	blx	r3
   80b06:	bd08      	pop	{r3, pc}
   80b08:	400e1000 	.word	0x400e1000
   80b0c:	00080a99 	.word	0x00080a99

00080b10 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80b10:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80b12:	210d      	movs	r1, #13
   80b14:	4801      	ldr	r0, [pc, #4]	; (80b1c <PIOC_Handler+0xc>)
   80b16:	4b02      	ldr	r3, [pc, #8]	; (80b20 <PIOC_Handler+0x10>)
   80b18:	4798      	blx	r3
   80b1a:	bd08      	pop	{r3, pc}
   80b1c:	400e1200 	.word	0x400e1200
   80b20:	00080a99 	.word	0x00080a99

00080b24 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80b24:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80b26:	210e      	movs	r1, #14
   80b28:	4801      	ldr	r0, [pc, #4]	; (80b30 <PIOD_Handler+0xc>)
   80b2a:	4b02      	ldr	r3, [pc, #8]	; (80b34 <PIOD_Handler+0x10>)
   80b2c:	4798      	blx	r3
   80b2e:	bd08      	pop	{r3, pc}
   80b30:	400e1400 	.word	0x400e1400
   80b34:	00080a99 	.word	0x00080a99

00080b38 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80b38:	4a17      	ldr	r2, [pc, #92]	; (80b98 <pmc_switch_mck_to_pllack+0x60>)
   80b3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80b40:	4318      	orrs	r0, r3
   80b42:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b44:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b46:	f013 0f08 	tst.w	r3, #8
   80b4a:	d10a      	bne.n	80b62 <pmc_switch_mck_to_pllack+0x2a>
   80b4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b50:	4911      	ldr	r1, [pc, #68]	; (80b98 <pmc_switch_mck_to_pllack+0x60>)
   80b52:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b54:	f012 0f08 	tst.w	r2, #8
   80b58:	d103      	bne.n	80b62 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b5a:	3b01      	subs	r3, #1
   80b5c:	d1f9      	bne.n	80b52 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80b5e:	2001      	movs	r0, #1
   80b60:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80b62:	4a0d      	ldr	r2, [pc, #52]	; (80b98 <pmc_switch_mck_to_pllack+0x60>)
   80b64:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80b66:	f023 0303 	bic.w	r3, r3, #3
   80b6a:	f043 0302 	orr.w	r3, r3, #2
   80b6e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80b70:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b72:	f013 0f08 	tst.w	r3, #8
   80b76:	d10a      	bne.n	80b8e <pmc_switch_mck_to_pllack+0x56>
   80b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80b7c:	4906      	ldr	r1, [pc, #24]	; (80b98 <pmc_switch_mck_to_pllack+0x60>)
   80b7e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80b80:	f012 0f08 	tst.w	r2, #8
   80b84:	d105      	bne.n	80b92 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80b86:	3b01      	subs	r3, #1
   80b88:	d1f9      	bne.n	80b7e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80b8a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80b8c:	4770      	bx	lr
	return 0;
   80b8e:	2000      	movs	r0, #0
   80b90:	4770      	bx	lr
   80b92:	2000      	movs	r0, #0
   80b94:	4770      	bx	lr
   80b96:	bf00      	nop
   80b98:	400e0600 	.word	0x400e0600

00080b9c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80b9c:	b9c8      	cbnz	r0, 80bd2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b9e:	4a11      	ldr	r2, [pc, #68]	; (80be4 <pmc_switch_mainck_to_xtal+0x48>)
   80ba0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80ba2:	0209      	lsls	r1, r1, #8
   80ba4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80ba6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80baa:	f023 0303 	bic.w	r3, r3, #3
   80bae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80bb2:	f043 0301 	orr.w	r3, r3, #1
   80bb6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80bb8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80bba:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80bbc:	f013 0f01 	tst.w	r3, #1
   80bc0:	d0fb      	beq.n	80bba <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80bc2:	4a08      	ldr	r2, [pc, #32]	; (80be4 <pmc_switch_mainck_to_xtal+0x48>)
   80bc4:	6a13      	ldr	r3, [r2, #32]
   80bc6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80bce:	6213      	str	r3, [r2, #32]
   80bd0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bd2:	4904      	ldr	r1, [pc, #16]	; (80be4 <pmc_switch_mainck_to_xtal+0x48>)
   80bd4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80bd6:	4a04      	ldr	r2, [pc, #16]	; (80be8 <pmc_switch_mainck_to_xtal+0x4c>)
   80bd8:	401a      	ands	r2, r3
   80bda:	4b04      	ldr	r3, [pc, #16]	; (80bec <pmc_switch_mainck_to_xtal+0x50>)
   80bdc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80bde:	620b      	str	r3, [r1, #32]
   80be0:	4770      	bx	lr
   80be2:	bf00      	nop
   80be4:	400e0600 	.word	0x400e0600
   80be8:	fec8fffc 	.word	0xfec8fffc
   80bec:	01370002 	.word	0x01370002

00080bf0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80bf0:	4b02      	ldr	r3, [pc, #8]	; (80bfc <pmc_osc_is_ready_mainck+0xc>)
   80bf2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80bf4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80bf8:	4770      	bx	lr
   80bfa:	bf00      	nop
   80bfc:	400e0600 	.word	0x400e0600

00080c00 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80c00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80c04:	4b01      	ldr	r3, [pc, #4]	; (80c0c <pmc_disable_pllack+0xc>)
   80c06:	629a      	str	r2, [r3, #40]	; 0x28
   80c08:	4770      	bx	lr
   80c0a:	bf00      	nop
   80c0c:	400e0600 	.word	0x400e0600

00080c10 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80c10:	4b02      	ldr	r3, [pc, #8]	; (80c1c <pmc_is_locked_pllack+0xc>)
   80c12:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80c14:	f000 0002 	and.w	r0, r0, #2
   80c18:	4770      	bx	lr
   80c1a:	bf00      	nop
   80c1c:	400e0600 	.word	0x400e0600

00080c20 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80c20:	282c      	cmp	r0, #44	; 0x2c
   80c22:	d81e      	bhi.n	80c62 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80c24:	281f      	cmp	r0, #31
   80c26:	d80c      	bhi.n	80c42 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80c28:	4b11      	ldr	r3, [pc, #68]	; (80c70 <pmc_enable_periph_clk+0x50>)
   80c2a:	699a      	ldr	r2, [r3, #24]
   80c2c:	2301      	movs	r3, #1
   80c2e:	4083      	lsls	r3, r0
   80c30:	4393      	bics	r3, r2
   80c32:	d018      	beq.n	80c66 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80c34:	2301      	movs	r3, #1
   80c36:	fa03 f000 	lsl.w	r0, r3, r0
   80c3a:	4b0d      	ldr	r3, [pc, #52]	; (80c70 <pmc_enable_periph_clk+0x50>)
   80c3c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80c3e:	2000      	movs	r0, #0
   80c40:	4770      	bx	lr
		ul_id -= 32;
   80c42:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80c44:	4b0a      	ldr	r3, [pc, #40]	; (80c70 <pmc_enable_periph_clk+0x50>)
   80c46:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80c4a:	2301      	movs	r3, #1
   80c4c:	4083      	lsls	r3, r0
   80c4e:	4393      	bics	r3, r2
   80c50:	d00b      	beq.n	80c6a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80c52:	2301      	movs	r3, #1
   80c54:	fa03 f000 	lsl.w	r0, r3, r0
   80c58:	4b05      	ldr	r3, [pc, #20]	; (80c70 <pmc_enable_periph_clk+0x50>)
   80c5a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80c5e:	2000      	movs	r0, #0
   80c60:	4770      	bx	lr
		return 1;
   80c62:	2001      	movs	r0, #1
   80c64:	4770      	bx	lr
	return 0;
   80c66:	2000      	movs	r0, #0
   80c68:	4770      	bx	lr
   80c6a:	2000      	movs	r0, #0
}
   80c6c:	4770      	bx	lr
   80c6e:	bf00      	nop
   80c70:	400e0600 	.word	0x400e0600

00080c74 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80c74:	e7fe      	b.n	80c74 <Dummy_Handler>
	...

00080c78 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80c78:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80c7a:	4b1c      	ldr	r3, [pc, #112]	; (80cec <Reset_Handler+0x74>)
   80c7c:	4a1c      	ldr	r2, [pc, #112]	; (80cf0 <Reset_Handler+0x78>)
   80c7e:	429a      	cmp	r2, r3
   80c80:	d010      	beq.n	80ca4 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80c82:	4b1c      	ldr	r3, [pc, #112]	; (80cf4 <Reset_Handler+0x7c>)
   80c84:	4a19      	ldr	r2, [pc, #100]	; (80cec <Reset_Handler+0x74>)
   80c86:	429a      	cmp	r2, r3
   80c88:	d20c      	bcs.n	80ca4 <Reset_Handler+0x2c>
   80c8a:	3b01      	subs	r3, #1
   80c8c:	1a9b      	subs	r3, r3, r2
   80c8e:	f023 0303 	bic.w	r3, r3, #3
   80c92:	3304      	adds	r3, #4
   80c94:	4413      	add	r3, r2
   80c96:	4916      	ldr	r1, [pc, #88]	; (80cf0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80c98:	f851 0b04 	ldr.w	r0, [r1], #4
   80c9c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80ca0:	429a      	cmp	r2, r3
   80ca2:	d1f9      	bne.n	80c98 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ca4:	4b14      	ldr	r3, [pc, #80]	; (80cf8 <Reset_Handler+0x80>)
   80ca6:	4a15      	ldr	r2, [pc, #84]	; (80cfc <Reset_Handler+0x84>)
   80ca8:	429a      	cmp	r2, r3
   80caa:	d20a      	bcs.n	80cc2 <Reset_Handler+0x4a>
   80cac:	3b01      	subs	r3, #1
   80cae:	1a9b      	subs	r3, r3, r2
   80cb0:	f023 0303 	bic.w	r3, r3, #3
   80cb4:	3304      	adds	r3, #4
   80cb6:	4413      	add	r3, r2
		*pDest++ = 0;
   80cb8:	2100      	movs	r1, #0
   80cba:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80cbe:	4293      	cmp	r3, r2
   80cc0:	d1fb      	bne.n	80cba <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80cc2:	4b0f      	ldr	r3, [pc, #60]	; (80d00 <Reset_Handler+0x88>)
   80cc4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80cc8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80ccc:	490d      	ldr	r1, [pc, #52]	; (80d04 <Reset_Handler+0x8c>)
   80cce:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80cd0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80cd8:	d203      	bcs.n	80ce2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80cda:	688b      	ldr	r3, [r1, #8]
   80cdc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80ce0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80ce2:	4b09      	ldr	r3, [pc, #36]	; (80d08 <Reset_Handler+0x90>)
   80ce4:	4798      	blx	r3

	/* Branch to main function */
	main();
   80ce6:	4b09      	ldr	r3, [pc, #36]	; (80d0c <Reset_Handler+0x94>)
   80ce8:	4798      	blx	r3
   80cea:	e7fe      	b.n	80cea <Reset_Handler+0x72>
   80cec:	20070000 	.word	0x20070000
   80cf0:	00083f58 	.word	0x00083f58
   80cf4:	20070af0 	.word	0x20070af0
   80cf8:	20070c8c 	.word	0x20070c8c
   80cfc:	20070af0 	.word	0x20070af0
   80d00:	00080000 	.word	0x00080000
   80d04:	e000ed00 	.word	0xe000ed00
   80d08:	00080ef5 	.word	0x00080ef5
   80d0c:	00080e79 	.word	0x00080e79

00080d10 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80d10:	4b3d      	ldr	r3, [pc, #244]	; (80e08 <SystemCoreClockUpdate+0xf8>)
   80d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d14:	f003 0303 	and.w	r3, r3, #3
   80d18:	2b03      	cmp	r3, #3
   80d1a:	d80e      	bhi.n	80d3a <SystemCoreClockUpdate+0x2a>
   80d1c:	e8df f003 	tbb	[pc, r3]
   80d20:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d24:	4b39      	ldr	r3, [pc, #228]	; (80e0c <SystemCoreClockUpdate+0xfc>)
   80d26:	695b      	ldr	r3, [r3, #20]
   80d28:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80d2c:	bf14      	ite	ne
   80d2e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80d32:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80d36:	4b36      	ldr	r3, [pc, #216]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80d38:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80d3a:	4b33      	ldr	r3, [pc, #204]	; (80e08 <SystemCoreClockUpdate+0xf8>)
   80d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d42:	2b70      	cmp	r3, #112	; 0x70
   80d44:	d057      	beq.n	80df6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80d46:	4b30      	ldr	r3, [pc, #192]	; (80e08 <SystemCoreClockUpdate+0xf8>)
   80d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80d4a:	4931      	ldr	r1, [pc, #196]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80d4c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80d50:	680b      	ldr	r3, [r1, #0]
   80d52:	40d3      	lsrs	r3, r2
   80d54:	600b      	str	r3, [r1, #0]
   80d56:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d58:	4b2b      	ldr	r3, [pc, #172]	; (80e08 <SystemCoreClockUpdate+0xf8>)
   80d5a:	6a1b      	ldr	r3, [r3, #32]
   80d5c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d60:	d003      	beq.n	80d6a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d62:	4a2c      	ldr	r2, [pc, #176]	; (80e14 <SystemCoreClockUpdate+0x104>)
   80d64:	4b2a      	ldr	r3, [pc, #168]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80d66:	601a      	str	r2, [r3, #0]
   80d68:	e7e7      	b.n	80d3a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d6a:	4a2b      	ldr	r2, [pc, #172]	; (80e18 <SystemCoreClockUpdate+0x108>)
   80d6c:	4b28      	ldr	r3, [pc, #160]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80d6e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d70:	4b25      	ldr	r3, [pc, #148]	; (80e08 <SystemCoreClockUpdate+0xf8>)
   80d72:	6a1b      	ldr	r3, [r3, #32]
   80d74:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d78:	2b10      	cmp	r3, #16
   80d7a:	d005      	beq.n	80d88 <SystemCoreClockUpdate+0x78>
   80d7c:	2b20      	cmp	r3, #32
   80d7e:	d1dc      	bne.n	80d3a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80d80:	4a24      	ldr	r2, [pc, #144]	; (80e14 <SystemCoreClockUpdate+0x104>)
   80d82:	4b23      	ldr	r3, [pc, #140]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80d84:	601a      	str	r2, [r3, #0]
				break;
   80d86:	e7d8      	b.n	80d3a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80d88:	4a24      	ldr	r2, [pc, #144]	; (80e1c <SystemCoreClockUpdate+0x10c>)
   80d8a:	4b21      	ldr	r3, [pc, #132]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80d8c:	601a      	str	r2, [r3, #0]
				break;
   80d8e:	e7d4      	b.n	80d3a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d90:	4b1d      	ldr	r3, [pc, #116]	; (80e08 <SystemCoreClockUpdate+0xf8>)
   80d92:	6a1b      	ldr	r3, [r3, #32]
   80d94:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d98:	d00c      	beq.n	80db4 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d9a:	4a1e      	ldr	r2, [pc, #120]	; (80e14 <SystemCoreClockUpdate+0x104>)
   80d9c:	4b1c      	ldr	r3, [pc, #112]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80d9e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80da0:	4b19      	ldr	r3, [pc, #100]	; (80e08 <SystemCoreClockUpdate+0xf8>)
   80da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80da4:	f003 0303 	and.w	r3, r3, #3
   80da8:	2b02      	cmp	r3, #2
   80daa:	d016      	beq.n	80dda <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80dac:	4a1c      	ldr	r2, [pc, #112]	; (80e20 <SystemCoreClockUpdate+0x110>)
   80dae:	4b18      	ldr	r3, [pc, #96]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80db0:	601a      	str	r2, [r3, #0]
   80db2:	e7c2      	b.n	80d3a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80db4:	4a18      	ldr	r2, [pc, #96]	; (80e18 <SystemCoreClockUpdate+0x108>)
   80db6:	4b16      	ldr	r3, [pc, #88]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80db8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80dba:	4b13      	ldr	r3, [pc, #76]	; (80e08 <SystemCoreClockUpdate+0xf8>)
   80dbc:	6a1b      	ldr	r3, [r3, #32]
   80dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80dc2:	2b10      	cmp	r3, #16
   80dc4:	d005      	beq.n	80dd2 <SystemCoreClockUpdate+0xc2>
   80dc6:	2b20      	cmp	r3, #32
   80dc8:	d1ea      	bne.n	80da0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80dca:	4a12      	ldr	r2, [pc, #72]	; (80e14 <SystemCoreClockUpdate+0x104>)
   80dcc:	4b10      	ldr	r3, [pc, #64]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80dce:	601a      	str	r2, [r3, #0]
				break;
   80dd0:	e7e6      	b.n	80da0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80dd2:	4a12      	ldr	r2, [pc, #72]	; (80e1c <SystemCoreClockUpdate+0x10c>)
   80dd4:	4b0e      	ldr	r3, [pc, #56]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80dd6:	601a      	str	r2, [r3, #0]
				break;
   80dd8:	e7e2      	b.n	80da0 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dda:	4a0b      	ldr	r2, [pc, #44]	; (80e08 <SystemCoreClockUpdate+0xf8>)
   80ddc:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dde:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80de0:	480b      	ldr	r0, [pc, #44]	; (80e10 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80de2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80de6:	6803      	ldr	r3, [r0, #0]
   80de8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dec:	b2d2      	uxtb	r2, r2
   80dee:	fbb3 f3f2 	udiv	r3, r3, r2
   80df2:	6003      	str	r3, [r0, #0]
   80df4:	e7a1      	b.n	80d3a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80df6:	4a06      	ldr	r2, [pc, #24]	; (80e10 <SystemCoreClockUpdate+0x100>)
   80df8:	6813      	ldr	r3, [r2, #0]
   80dfa:	490a      	ldr	r1, [pc, #40]	; (80e24 <SystemCoreClockUpdate+0x114>)
   80dfc:	fba1 1303 	umull	r1, r3, r1, r3
   80e00:	085b      	lsrs	r3, r3, #1
   80e02:	6013      	str	r3, [r2, #0]
   80e04:	4770      	bx	lr
   80e06:	bf00      	nop
   80e08:	400e0600 	.word	0x400e0600
   80e0c:	400e1a10 	.word	0x400e1a10
   80e10:	20070140 	.word	0x20070140
   80e14:	00b71b00 	.word	0x00b71b00
   80e18:	003d0900 	.word	0x003d0900
   80e1c:	007a1200 	.word	0x007a1200
   80e20:	0e4e1c00 	.word	0x0e4e1c00
   80e24:	aaaaaaab 	.word	0xaaaaaaab

00080e28 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80e28:	4b0a      	ldr	r3, [pc, #40]	; (80e54 <_sbrk+0x2c>)
   80e2a:	681b      	ldr	r3, [r3, #0]
   80e2c:	b153      	cbz	r3, 80e44 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80e2e:	4b09      	ldr	r3, [pc, #36]	; (80e54 <_sbrk+0x2c>)
   80e30:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80e32:	181a      	adds	r2, r3, r0
   80e34:	4908      	ldr	r1, [pc, #32]	; (80e58 <_sbrk+0x30>)
   80e36:	4291      	cmp	r1, r2
   80e38:	db08      	blt.n	80e4c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80e3a:	4610      	mov	r0, r2
   80e3c:	4a05      	ldr	r2, [pc, #20]	; (80e54 <_sbrk+0x2c>)
   80e3e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80e40:	4618      	mov	r0, r3
   80e42:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80e44:	4a05      	ldr	r2, [pc, #20]	; (80e5c <_sbrk+0x34>)
   80e46:	4b03      	ldr	r3, [pc, #12]	; (80e54 <_sbrk+0x2c>)
   80e48:	601a      	str	r2, [r3, #0]
   80e4a:	e7f0      	b.n	80e2e <_sbrk+0x6>
		return (caddr_t) -1;	
   80e4c:	f04f 30ff 	mov.w	r0, #4294967295
}
   80e50:	4770      	bx	lr
   80e52:	bf00      	nop
   80e54:	20070c20 	.word	0x20070c20
   80e58:	20087ffc 	.word	0x20087ffc
   80e5c:	20072c90 	.word	0x20072c90

00080e60 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80e60:	f04f 30ff 	mov.w	r0, #4294967295
   80e64:	4770      	bx	lr

00080e66 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80e6a:	604b      	str	r3, [r1, #4]

	return 0;
}
   80e6c:	2000      	movs	r0, #0
   80e6e:	4770      	bx	lr

00080e70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80e70:	2001      	movs	r0, #1
   80e72:	4770      	bx	lr

00080e74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80e74:	2000      	movs	r0, #0
   80e76:	4770      	bx	lr

00080e78 <main>:
#include <string.h>
#include "console_functions.h"
#include "bluetooth_functions.h"

int main (void)
{
   80e78:	b530      	push	{r4, r5, lr}
   80e7a:	b085      	sub	sp, #20
	sysclk_init();
   80e7c:	4b13      	ldr	r3, [pc, #76]	; (80ecc <main+0x54>)
   80e7e:	4798      	blx	r3
	board_init();
   80e80:	4b13      	ldr	r3, [pc, #76]	; (80ed0 <main+0x58>)
   80e82:	4798      	blx	r3
   80e84:	200b      	movs	r0, #11
   80e86:	4c13      	ldr	r4, [pc, #76]	; (80ed4 <main+0x5c>)
   80e88:	47a0      	blx	r4
   80e8a:	200c      	movs	r0, #12
   80e8c:	47a0      	blx	r4
   80e8e:	200d      	movs	r0, #13
   80e90:	47a0      	blx	r4
   80e92:	200e      	movs	r0, #14
   80e94:	47a0      	blx	r4
	ioport_init();

	configure_console();
   80e96:	4b10      	ldr	r3, [pc, #64]	; (80ed8 <main+0x60>)
   80e98:	4798      	blx	r3
	bluetooth_init();
   80e9a:	4b10      	ldr	r3, [pc, #64]	; (80edc <main+0x64>)
   80e9c:	4798      	blx	r3
	
	char arr[10] = {0};
   80e9e:	2400      	movs	r4, #0
   80ea0:	9401      	str	r4, [sp, #4]
   80ea2:	9402      	str	r4, [sp, #8]
   80ea4:	f8ad 400c 	strh.w	r4, [sp, #12]

	bluetooth_getmessage(arr, 10);
   80ea8:	210a      	movs	r1, #10
   80eaa:	a801      	add	r0, sp, #4
   80eac:	4b0c      	ldr	r3, [pc, #48]	; (80ee0 <main+0x68>)
   80eae:	4798      	blx	r3
	printf("Received %s\n", arr);
   80eb0:	a901      	add	r1, sp, #4
   80eb2:	480c      	ldr	r0, [pc, #48]	; (80ee4 <main+0x6c>)
   80eb4:	4d0c      	ldr	r5, [pc, #48]	; (80ee8 <main+0x70>)
   80eb6:	47a8      	blx	r5

	bluetooth_sendmessage(arr, 10);
   80eb8:	210a      	movs	r1, #10
   80eba:	a801      	add	r0, sp, #4
   80ebc:	4b0b      	ldr	r3, [pc, #44]	; (80eec <main+0x74>)
   80ebe:	4798      	blx	r3
	printf("Sent %s\n", arr);
   80ec0:	a901      	add	r1, sp, #4
   80ec2:	480b      	ldr	r0, [pc, #44]	; (80ef0 <main+0x78>)
   80ec4:	47a8      	blx	r5
		if (strcmp(str, "Hi") == 0)
		{
			printf("Hi!");
		}
	}*/
}
   80ec6:	4620      	mov	r0, r4
   80ec8:	b005      	add	sp, #20
   80eca:	bd30      	pop	{r4, r5, pc}
   80ecc:	000807a9 	.word	0x000807a9
   80ed0:	0008080d 	.word	0x0008080d
   80ed4:	00080c21 	.word	0x00080c21
   80ed8:	00080715 	.word	0x00080715
   80edc:	00080339 	.word	0x00080339
   80ee0:	000803d9 	.word	0x000803d9
   80ee4:	00083da8 	.word	0x00083da8
   80ee8:	00080f45 	.word	0x00080f45
   80eec:	00080409 	.word	0x00080409
   80ef0:	00083db8 	.word	0x00083db8

00080ef4 <__libc_init_array>:
   80ef4:	b570      	push	{r4, r5, r6, lr}
   80ef6:	4e0f      	ldr	r6, [pc, #60]	; (80f34 <__libc_init_array+0x40>)
   80ef8:	4d0f      	ldr	r5, [pc, #60]	; (80f38 <__libc_init_array+0x44>)
   80efa:	1b76      	subs	r6, r6, r5
   80efc:	10b6      	asrs	r6, r6, #2
   80efe:	bf18      	it	ne
   80f00:	2400      	movne	r4, #0
   80f02:	d005      	beq.n	80f10 <__libc_init_array+0x1c>
   80f04:	3401      	adds	r4, #1
   80f06:	f855 3b04 	ldr.w	r3, [r5], #4
   80f0a:	4798      	blx	r3
   80f0c:	42a6      	cmp	r6, r4
   80f0e:	d1f9      	bne.n	80f04 <__libc_init_array+0x10>
   80f10:	4e0a      	ldr	r6, [pc, #40]	; (80f3c <__libc_init_array+0x48>)
   80f12:	4d0b      	ldr	r5, [pc, #44]	; (80f40 <__libc_init_array+0x4c>)
   80f14:	f003 f80a 	bl	83f2c <_init>
   80f18:	1b76      	subs	r6, r6, r5
   80f1a:	10b6      	asrs	r6, r6, #2
   80f1c:	bf18      	it	ne
   80f1e:	2400      	movne	r4, #0
   80f20:	d006      	beq.n	80f30 <__libc_init_array+0x3c>
   80f22:	3401      	adds	r4, #1
   80f24:	f855 3b04 	ldr.w	r3, [r5], #4
   80f28:	4798      	blx	r3
   80f2a:	42a6      	cmp	r6, r4
   80f2c:	d1f9      	bne.n	80f22 <__libc_init_array+0x2e>
   80f2e:	bd70      	pop	{r4, r5, r6, pc}
   80f30:	bd70      	pop	{r4, r5, r6, pc}
   80f32:	bf00      	nop
   80f34:	00083f38 	.word	0x00083f38
   80f38:	00083f38 	.word	0x00083f38
   80f3c:	00083f40 	.word	0x00083f40
   80f40:	00083f38 	.word	0x00083f38

00080f44 <iprintf>:
   80f44:	b40f      	push	{r0, r1, r2, r3}
   80f46:	b510      	push	{r4, lr}
   80f48:	4b07      	ldr	r3, [pc, #28]	; (80f68 <iprintf+0x24>)
   80f4a:	b082      	sub	sp, #8
   80f4c:	ac04      	add	r4, sp, #16
   80f4e:	f854 2b04 	ldr.w	r2, [r4], #4
   80f52:	6818      	ldr	r0, [r3, #0]
   80f54:	4623      	mov	r3, r4
   80f56:	6881      	ldr	r1, [r0, #8]
   80f58:	9401      	str	r4, [sp, #4]
   80f5a:	f000 f965 	bl	81228 <_vfiprintf_r>
   80f5e:	b002      	add	sp, #8
   80f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80f64:	b004      	add	sp, #16
   80f66:	4770      	bx	lr
   80f68:	20070144 	.word	0x20070144

00080f6c <memset>:
   80f6c:	b470      	push	{r4, r5, r6}
   80f6e:	0786      	lsls	r6, r0, #30
   80f70:	d046      	beq.n	81000 <memset+0x94>
   80f72:	1e54      	subs	r4, r2, #1
   80f74:	2a00      	cmp	r2, #0
   80f76:	d041      	beq.n	80ffc <memset+0x90>
   80f78:	b2ca      	uxtb	r2, r1
   80f7a:	4603      	mov	r3, r0
   80f7c:	e002      	b.n	80f84 <memset+0x18>
   80f7e:	f114 34ff 	adds.w	r4, r4, #4294967295
   80f82:	d33b      	bcc.n	80ffc <memset+0x90>
   80f84:	f803 2b01 	strb.w	r2, [r3], #1
   80f88:	079d      	lsls	r5, r3, #30
   80f8a:	d1f8      	bne.n	80f7e <memset+0x12>
   80f8c:	2c03      	cmp	r4, #3
   80f8e:	d92e      	bls.n	80fee <memset+0x82>
   80f90:	b2cd      	uxtb	r5, r1
   80f92:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80f96:	2c0f      	cmp	r4, #15
   80f98:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80f9c:	d919      	bls.n	80fd2 <memset+0x66>
   80f9e:	4626      	mov	r6, r4
   80fa0:	f103 0210 	add.w	r2, r3, #16
   80fa4:	3e10      	subs	r6, #16
   80fa6:	2e0f      	cmp	r6, #15
   80fa8:	f842 5c10 	str.w	r5, [r2, #-16]
   80fac:	f842 5c0c 	str.w	r5, [r2, #-12]
   80fb0:	f842 5c08 	str.w	r5, [r2, #-8]
   80fb4:	f842 5c04 	str.w	r5, [r2, #-4]
   80fb8:	f102 0210 	add.w	r2, r2, #16
   80fbc:	d8f2      	bhi.n	80fa4 <memset+0x38>
   80fbe:	f1a4 0210 	sub.w	r2, r4, #16
   80fc2:	f022 020f 	bic.w	r2, r2, #15
   80fc6:	f004 040f 	and.w	r4, r4, #15
   80fca:	3210      	adds	r2, #16
   80fcc:	2c03      	cmp	r4, #3
   80fce:	4413      	add	r3, r2
   80fd0:	d90d      	bls.n	80fee <memset+0x82>
   80fd2:	461e      	mov	r6, r3
   80fd4:	4622      	mov	r2, r4
   80fd6:	3a04      	subs	r2, #4
   80fd8:	2a03      	cmp	r2, #3
   80fda:	f846 5b04 	str.w	r5, [r6], #4
   80fde:	d8fa      	bhi.n	80fd6 <memset+0x6a>
   80fe0:	1f22      	subs	r2, r4, #4
   80fe2:	f022 0203 	bic.w	r2, r2, #3
   80fe6:	3204      	adds	r2, #4
   80fe8:	4413      	add	r3, r2
   80fea:	f004 0403 	and.w	r4, r4, #3
   80fee:	b12c      	cbz	r4, 80ffc <memset+0x90>
   80ff0:	b2c9      	uxtb	r1, r1
   80ff2:	441c      	add	r4, r3
   80ff4:	f803 1b01 	strb.w	r1, [r3], #1
   80ff8:	429c      	cmp	r4, r3
   80ffa:	d1fb      	bne.n	80ff4 <memset+0x88>
   80ffc:	bc70      	pop	{r4, r5, r6}
   80ffe:	4770      	bx	lr
   81000:	4614      	mov	r4, r2
   81002:	4603      	mov	r3, r0
   81004:	e7c2      	b.n	80f8c <memset+0x20>
   81006:	bf00      	nop

00081008 <setbuf>:
   81008:	2900      	cmp	r1, #0
   8100a:	bf0c      	ite	eq
   8100c:	2202      	moveq	r2, #2
   8100e:	2200      	movne	r2, #0
   81010:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81014:	f000 b800 	b.w	81018 <setvbuf>

00081018 <setvbuf>:
   81018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8101c:	4d61      	ldr	r5, [pc, #388]	; (811a4 <setvbuf+0x18c>)
   8101e:	b083      	sub	sp, #12
   81020:	682d      	ldr	r5, [r5, #0]
   81022:	4604      	mov	r4, r0
   81024:	460f      	mov	r7, r1
   81026:	4690      	mov	r8, r2
   81028:	461e      	mov	r6, r3
   8102a:	b115      	cbz	r5, 81032 <setvbuf+0x1a>
   8102c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8102e:	2b00      	cmp	r3, #0
   81030:	d064      	beq.n	810fc <setvbuf+0xe4>
   81032:	f1b8 0f02 	cmp.w	r8, #2
   81036:	d006      	beq.n	81046 <setvbuf+0x2e>
   81038:	f1b8 0f01 	cmp.w	r8, #1
   8103c:	f200 809f 	bhi.w	8117e <setvbuf+0x166>
   81040:	2e00      	cmp	r6, #0
   81042:	f2c0 809c 	blt.w	8117e <setvbuf+0x166>
   81046:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81048:	07d8      	lsls	r0, r3, #31
   8104a:	d534      	bpl.n	810b6 <setvbuf+0x9e>
   8104c:	4621      	mov	r1, r4
   8104e:	4628      	mov	r0, r5
   81050:	f001 f882 	bl	82158 <_fflush_r>
   81054:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81056:	b141      	cbz	r1, 8106a <setvbuf+0x52>
   81058:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8105c:	4299      	cmp	r1, r3
   8105e:	d002      	beq.n	81066 <setvbuf+0x4e>
   81060:	4628      	mov	r0, r5
   81062:	f001 f9f7 	bl	82454 <_free_r>
   81066:	2300      	movs	r3, #0
   81068:	6323      	str	r3, [r4, #48]	; 0x30
   8106a:	2200      	movs	r2, #0
   8106c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81070:	61a2      	str	r2, [r4, #24]
   81072:	6062      	str	r2, [r4, #4]
   81074:	061a      	lsls	r2, r3, #24
   81076:	d43a      	bmi.n	810ee <setvbuf+0xd6>
   81078:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   8107c:	f023 0303 	bic.w	r3, r3, #3
   81080:	f1b8 0f02 	cmp.w	r8, #2
   81084:	81a3      	strh	r3, [r4, #12]
   81086:	d01d      	beq.n	810c4 <setvbuf+0xac>
   81088:	ab01      	add	r3, sp, #4
   8108a:	466a      	mov	r2, sp
   8108c:	4621      	mov	r1, r4
   8108e:	4628      	mov	r0, r5
   81090:	f001 fc7e 	bl	82990 <__swhatbuf_r>
   81094:	89a3      	ldrh	r3, [r4, #12]
   81096:	4318      	orrs	r0, r3
   81098:	81a0      	strh	r0, [r4, #12]
   8109a:	2e00      	cmp	r6, #0
   8109c:	d132      	bne.n	81104 <setvbuf+0xec>
   8109e:	9e00      	ldr	r6, [sp, #0]
   810a0:	4630      	mov	r0, r6
   810a2:	f001 fced 	bl	82a80 <malloc>
   810a6:	4607      	mov	r7, r0
   810a8:	2800      	cmp	r0, #0
   810aa:	d06b      	beq.n	81184 <setvbuf+0x16c>
   810ac:	89a3      	ldrh	r3, [r4, #12]
   810ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   810b2:	81a3      	strh	r3, [r4, #12]
   810b4:	e028      	b.n	81108 <setvbuf+0xf0>
   810b6:	89a3      	ldrh	r3, [r4, #12]
   810b8:	0599      	lsls	r1, r3, #22
   810ba:	d4c7      	bmi.n	8104c <setvbuf+0x34>
   810bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   810be:	f001 fc63 	bl	82988 <__retarget_lock_acquire_recursive>
   810c2:	e7c3      	b.n	8104c <setvbuf+0x34>
   810c4:	2500      	movs	r5, #0
   810c6:	2600      	movs	r6, #0
   810c8:	2001      	movs	r0, #1
   810ca:	6e61      	ldr	r1, [r4, #100]	; 0x64
   810cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   810d0:	f043 0302 	orr.w	r3, r3, #2
   810d4:	60a6      	str	r6, [r4, #8]
   810d6:	07ce      	lsls	r6, r1, #31
   810d8:	81a3      	strh	r3, [r4, #12]
   810da:	6160      	str	r0, [r4, #20]
   810dc:	6022      	str	r2, [r4, #0]
   810de:	6122      	str	r2, [r4, #16]
   810e0:	d401      	bmi.n	810e6 <setvbuf+0xce>
   810e2:	0598      	lsls	r0, r3, #22
   810e4:	d53e      	bpl.n	81164 <setvbuf+0x14c>
   810e6:	4628      	mov	r0, r5
   810e8:	b003      	add	sp, #12
   810ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   810ee:	6921      	ldr	r1, [r4, #16]
   810f0:	4628      	mov	r0, r5
   810f2:	f001 f9af 	bl	82454 <_free_r>
   810f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   810fa:	e7bd      	b.n	81078 <setvbuf+0x60>
   810fc:	4628      	mov	r0, r5
   810fe:	f001 f883 	bl	82208 <__sinit>
   81102:	e796      	b.n	81032 <setvbuf+0x1a>
   81104:	2f00      	cmp	r7, #0
   81106:	d0cb      	beq.n	810a0 <setvbuf+0x88>
   81108:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8110a:	2b00      	cmp	r3, #0
   8110c:	d033      	beq.n	81176 <setvbuf+0x15e>
   8110e:	9b00      	ldr	r3, [sp, #0]
   81110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81114:	429e      	cmp	r6, r3
   81116:	bf1c      	itt	ne
   81118:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   8111c:	81a2      	strhne	r2, [r4, #12]
   8111e:	f1b8 0f01 	cmp.w	r8, #1
   81122:	bf04      	itt	eq
   81124:	f042 0201 	orreq.w	r2, r2, #1
   81128:	81a2      	strheq	r2, [r4, #12]
   8112a:	b292      	uxth	r2, r2
   8112c:	f012 0308 	ands.w	r3, r2, #8
   81130:	6027      	str	r7, [r4, #0]
   81132:	6127      	str	r7, [r4, #16]
   81134:	6166      	str	r6, [r4, #20]
   81136:	d00e      	beq.n	81156 <setvbuf+0x13e>
   81138:	07d1      	lsls	r1, r2, #31
   8113a:	d51a      	bpl.n	81172 <setvbuf+0x15a>
   8113c:	2300      	movs	r3, #0
   8113e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81140:	4276      	negs	r6, r6
   81142:	f015 0501 	ands.w	r5, r5, #1
   81146:	61a6      	str	r6, [r4, #24]
   81148:	60a3      	str	r3, [r4, #8]
   8114a:	d009      	beq.n	81160 <setvbuf+0x148>
   8114c:	2500      	movs	r5, #0
   8114e:	4628      	mov	r0, r5
   81150:	b003      	add	sp, #12
   81152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81156:	60a3      	str	r3, [r4, #8]
   81158:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8115a:	f015 0501 	ands.w	r5, r5, #1
   8115e:	d1f5      	bne.n	8114c <setvbuf+0x134>
   81160:	0593      	lsls	r3, r2, #22
   81162:	d4c0      	bmi.n	810e6 <setvbuf+0xce>
   81164:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81166:	f001 fc11 	bl	8298c <__retarget_lock_release_recursive>
   8116a:	4628      	mov	r0, r5
   8116c:	b003      	add	sp, #12
   8116e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81172:	60a6      	str	r6, [r4, #8]
   81174:	e7f0      	b.n	81158 <setvbuf+0x140>
   81176:	4628      	mov	r0, r5
   81178:	f001 f846 	bl	82208 <__sinit>
   8117c:	e7c7      	b.n	8110e <setvbuf+0xf6>
   8117e:	f04f 35ff 	mov.w	r5, #4294967295
   81182:	e7b0      	b.n	810e6 <setvbuf+0xce>
   81184:	f8dd 9000 	ldr.w	r9, [sp]
   81188:	45b1      	cmp	r9, r6
   8118a:	d004      	beq.n	81196 <setvbuf+0x17e>
   8118c:	4648      	mov	r0, r9
   8118e:	f001 fc77 	bl	82a80 <malloc>
   81192:	4607      	mov	r7, r0
   81194:	b920      	cbnz	r0, 811a0 <setvbuf+0x188>
   81196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8119a:	f04f 35ff 	mov.w	r5, #4294967295
   8119e:	e792      	b.n	810c6 <setvbuf+0xae>
   811a0:	464e      	mov	r6, r9
   811a2:	e783      	b.n	810ac <setvbuf+0x94>
   811a4:	20070144 	.word	0x20070144

000811a8 <__sprint_r.part.0>:
   811a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811ac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   811ae:	4693      	mov	fp, r2
   811b0:	049c      	lsls	r4, r3, #18
   811b2:	d52f      	bpl.n	81214 <__sprint_r.part.0+0x6c>
   811b4:	6893      	ldr	r3, [r2, #8]
   811b6:	6812      	ldr	r2, [r2, #0]
   811b8:	b353      	cbz	r3, 81210 <__sprint_r.part.0+0x68>
   811ba:	460e      	mov	r6, r1
   811bc:	4607      	mov	r7, r0
   811be:	f102 0908 	add.w	r9, r2, #8
   811c2:	e919 0420 	ldmdb	r9, {r5, sl}
   811c6:	ea5f 089a 	movs.w	r8, sl, lsr #2
   811ca:	d017      	beq.n	811fc <__sprint_r.part.0+0x54>
   811cc:	2400      	movs	r4, #0
   811ce:	3d04      	subs	r5, #4
   811d0:	e001      	b.n	811d6 <__sprint_r.part.0+0x2e>
   811d2:	45a0      	cmp	r8, r4
   811d4:	d010      	beq.n	811f8 <__sprint_r.part.0+0x50>
   811d6:	4632      	mov	r2, r6
   811d8:	f855 1f04 	ldr.w	r1, [r5, #4]!
   811dc:	4638      	mov	r0, r7
   811de:	f001 f8b5 	bl	8234c <_fputwc_r>
   811e2:	1c43      	adds	r3, r0, #1
   811e4:	f104 0401 	add.w	r4, r4, #1
   811e8:	d1f3      	bne.n	811d2 <__sprint_r.part.0+0x2a>
   811ea:	2300      	movs	r3, #0
   811ec:	f8cb 3008 	str.w	r3, [fp, #8]
   811f0:	f8cb 3004 	str.w	r3, [fp, #4]
   811f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   811f8:	f8db 3008 	ldr.w	r3, [fp, #8]
   811fc:	f02a 0a03 	bic.w	sl, sl, #3
   81200:	eba3 030a 	sub.w	r3, r3, sl
   81204:	f8cb 3008 	str.w	r3, [fp, #8]
   81208:	f109 0908 	add.w	r9, r9, #8
   8120c:	2b00      	cmp	r3, #0
   8120e:	d1d8      	bne.n	811c2 <__sprint_r.part.0+0x1a>
   81210:	2000      	movs	r0, #0
   81212:	e7ea      	b.n	811ea <__sprint_r.part.0+0x42>
   81214:	f001 fa04 	bl	82620 <__sfvwrite_r>
   81218:	2300      	movs	r3, #0
   8121a:	f8cb 3008 	str.w	r3, [fp, #8]
   8121e:	f8cb 3004 	str.w	r3, [fp, #4]
   81222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81226:	bf00      	nop

00081228 <_vfiprintf_r>:
   81228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8122c:	b0ad      	sub	sp, #180	; 0xb4
   8122e:	461d      	mov	r5, r3
   81230:	468b      	mov	fp, r1
   81232:	4690      	mov	r8, r2
   81234:	9307      	str	r3, [sp, #28]
   81236:	9006      	str	r0, [sp, #24]
   81238:	b118      	cbz	r0, 81242 <_vfiprintf_r+0x1a>
   8123a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8123c:	2b00      	cmp	r3, #0
   8123e:	f000 80f3 	beq.w	81428 <_vfiprintf_r+0x200>
   81242:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81246:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8124a:	07df      	lsls	r7, r3, #31
   8124c:	b281      	uxth	r1, r0
   8124e:	d402      	bmi.n	81256 <_vfiprintf_r+0x2e>
   81250:	058e      	lsls	r6, r1, #22
   81252:	f140 80fc 	bpl.w	8144e <_vfiprintf_r+0x226>
   81256:	048c      	lsls	r4, r1, #18
   81258:	d40a      	bmi.n	81270 <_vfiprintf_r+0x48>
   8125a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8125e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81266:	f8ab 100c 	strh.w	r1, [fp, #12]
   8126a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8126e:	b289      	uxth	r1, r1
   81270:	0708      	lsls	r0, r1, #28
   81272:	f140 80b3 	bpl.w	813dc <_vfiprintf_r+0x1b4>
   81276:	f8db 3010 	ldr.w	r3, [fp, #16]
   8127a:	2b00      	cmp	r3, #0
   8127c:	f000 80ae 	beq.w	813dc <_vfiprintf_r+0x1b4>
   81280:	f001 031a 	and.w	r3, r1, #26
   81284:	2b0a      	cmp	r3, #10
   81286:	f000 80b5 	beq.w	813f4 <_vfiprintf_r+0x1cc>
   8128a:	2300      	movs	r3, #0
   8128c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81290:	46d1      	mov	r9, sl
   81292:	930b      	str	r3, [sp, #44]	; 0x2c
   81294:	9303      	str	r3, [sp, #12]
   81296:	9311      	str	r3, [sp, #68]	; 0x44
   81298:	9310      	str	r3, [sp, #64]	; 0x40
   8129a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8129e:	f8cd b010 	str.w	fp, [sp, #16]
   812a2:	f898 3000 	ldrb.w	r3, [r8]
   812a6:	4644      	mov	r4, r8
   812a8:	b1fb      	cbz	r3, 812ea <_vfiprintf_r+0xc2>
   812aa:	2b25      	cmp	r3, #37	; 0x25
   812ac:	d102      	bne.n	812b4 <_vfiprintf_r+0x8c>
   812ae:	e01c      	b.n	812ea <_vfiprintf_r+0xc2>
   812b0:	2b25      	cmp	r3, #37	; 0x25
   812b2:	d003      	beq.n	812bc <_vfiprintf_r+0x94>
   812b4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   812b8:	2b00      	cmp	r3, #0
   812ba:	d1f9      	bne.n	812b0 <_vfiprintf_r+0x88>
   812bc:	eba4 0508 	sub.w	r5, r4, r8
   812c0:	b19d      	cbz	r5, 812ea <_vfiprintf_r+0xc2>
   812c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   812c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   812c6:	3301      	adds	r3, #1
   812c8:	442a      	add	r2, r5
   812ca:	2b07      	cmp	r3, #7
   812cc:	f8c9 8000 	str.w	r8, [r9]
   812d0:	f8c9 5004 	str.w	r5, [r9, #4]
   812d4:	9211      	str	r2, [sp, #68]	; 0x44
   812d6:	9310      	str	r3, [sp, #64]	; 0x40
   812d8:	dd7a      	ble.n	813d0 <_vfiprintf_r+0x1a8>
   812da:	2a00      	cmp	r2, #0
   812dc:	f040 84b5 	bne.w	81c4a <_vfiprintf_r+0xa22>
   812e0:	46d1      	mov	r9, sl
   812e2:	9b03      	ldr	r3, [sp, #12]
   812e4:	9210      	str	r2, [sp, #64]	; 0x40
   812e6:	442b      	add	r3, r5
   812e8:	9303      	str	r3, [sp, #12]
   812ea:	7823      	ldrb	r3, [r4, #0]
   812ec:	2b00      	cmp	r3, #0
   812ee:	f000 83e5 	beq.w	81abc <_vfiprintf_r+0x894>
   812f2:	2000      	movs	r0, #0
   812f4:	f04f 0300 	mov.w	r3, #0
   812f8:	f104 0801 	add.w	r8, r4, #1
   812fc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81300:	7862      	ldrb	r2, [r4, #1]
   81302:	4606      	mov	r6, r0
   81304:	4605      	mov	r5, r0
   81306:	4603      	mov	r3, r0
   81308:	f04f 34ff 	mov.w	r4, #4294967295
   8130c:	f108 0801 	add.w	r8, r8, #1
   81310:	f1a2 0120 	sub.w	r1, r2, #32
   81314:	2958      	cmp	r1, #88	; 0x58
   81316:	f200 82d9 	bhi.w	818cc <_vfiprintf_r+0x6a4>
   8131a:	e8df f011 	tbh	[pc, r1, lsl #1]
   8131e:	0228      	.short	0x0228
   81320:	02d702d7 	.word	0x02d702d7
   81324:	02d70230 	.word	0x02d70230
   81328:	02d702d7 	.word	0x02d702d7
   8132c:	02d702d7 	.word	0x02d702d7
   81330:	00a002d7 	.word	0x00a002d7
   81334:	02d70288 	.word	0x02d70288
   81338:	02b800a8 	.word	0x02b800a8
   8133c:	01a602d7 	.word	0x01a602d7
   81340:	01ab01ab 	.word	0x01ab01ab
   81344:	01ab01ab 	.word	0x01ab01ab
   81348:	01ab01ab 	.word	0x01ab01ab
   8134c:	01ab01ab 	.word	0x01ab01ab
   81350:	02d701ab 	.word	0x02d701ab
   81354:	02d702d7 	.word	0x02d702d7
   81358:	02d702d7 	.word	0x02d702d7
   8135c:	02d702d7 	.word	0x02d702d7
   81360:	02d702d7 	.word	0x02d702d7
   81364:	01b902d7 	.word	0x01b902d7
   81368:	02d702d7 	.word	0x02d702d7
   8136c:	02d702d7 	.word	0x02d702d7
   81370:	02d702d7 	.word	0x02d702d7
   81374:	02d702d7 	.word	0x02d702d7
   81378:	02d702d7 	.word	0x02d702d7
   8137c:	02d7019e 	.word	0x02d7019e
   81380:	02d702d7 	.word	0x02d702d7
   81384:	02d702d7 	.word	0x02d702d7
   81388:	02d701a2 	.word	0x02d701a2
   8138c:	025a02d7 	.word	0x025a02d7
   81390:	02d702d7 	.word	0x02d702d7
   81394:	02d702d7 	.word	0x02d702d7
   81398:	02d702d7 	.word	0x02d702d7
   8139c:	02d702d7 	.word	0x02d702d7
   813a0:	02d702d7 	.word	0x02d702d7
   813a4:	02220261 	.word	0x02220261
   813a8:	02d702d7 	.word	0x02d702d7
   813ac:	027602d7 	.word	0x027602d7
   813b0:	02d70222 	.word	0x02d70222
   813b4:	027b02d7 	.word	0x027b02d7
   813b8:	01fc02d7 	.word	0x01fc02d7
   813bc:	02100189 	.word	0x02100189
   813c0:	02d702d2 	.word	0x02d702d2
   813c4:	02d70295 	.word	0x02d70295
   813c8:	02d700ad 	.word	0x02d700ad
   813cc:	023502d7 	.word	0x023502d7
   813d0:	f109 0908 	add.w	r9, r9, #8
   813d4:	9b03      	ldr	r3, [sp, #12]
   813d6:	442b      	add	r3, r5
   813d8:	9303      	str	r3, [sp, #12]
   813da:	e786      	b.n	812ea <_vfiprintf_r+0xc2>
   813dc:	4659      	mov	r1, fp
   813de:	9806      	ldr	r0, [sp, #24]
   813e0:	f000 fdaa 	bl	81f38 <__swsetup_r>
   813e4:	bb18      	cbnz	r0, 8142e <_vfiprintf_r+0x206>
   813e6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   813ea:	f001 031a 	and.w	r3, r1, #26
   813ee:	2b0a      	cmp	r3, #10
   813f0:	f47f af4b 	bne.w	8128a <_vfiprintf_r+0x62>
   813f4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   813f8:	2b00      	cmp	r3, #0
   813fa:	f6ff af46 	blt.w	8128a <_vfiprintf_r+0x62>
   813fe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81402:	07db      	lsls	r3, r3, #31
   81404:	d405      	bmi.n	81412 <_vfiprintf_r+0x1ea>
   81406:	058f      	lsls	r7, r1, #22
   81408:	d403      	bmi.n	81412 <_vfiprintf_r+0x1ea>
   8140a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8140e:	f001 fabd 	bl	8298c <__retarget_lock_release_recursive>
   81412:	462b      	mov	r3, r5
   81414:	4642      	mov	r2, r8
   81416:	4659      	mov	r1, fp
   81418:	9806      	ldr	r0, [sp, #24]
   8141a:	f000 fd49 	bl	81eb0 <__sbprintf>
   8141e:	9003      	str	r0, [sp, #12]
   81420:	9803      	ldr	r0, [sp, #12]
   81422:	b02d      	add	sp, #180	; 0xb4
   81424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81428:	f000 feee 	bl	82208 <__sinit>
   8142c:	e709      	b.n	81242 <_vfiprintf_r+0x1a>
   8142e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81432:	07d9      	lsls	r1, r3, #31
   81434:	d404      	bmi.n	81440 <_vfiprintf_r+0x218>
   81436:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8143a:	059a      	lsls	r2, r3, #22
   8143c:	f140 84ae 	bpl.w	81d9c <_vfiprintf_r+0xb74>
   81440:	f04f 33ff 	mov.w	r3, #4294967295
   81444:	9303      	str	r3, [sp, #12]
   81446:	9803      	ldr	r0, [sp, #12]
   81448:	b02d      	add	sp, #180	; 0xb4
   8144a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8144e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81452:	f001 fa99 	bl	82988 <__retarget_lock_acquire_recursive>
   81456:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8145a:	b281      	uxth	r1, r0
   8145c:	e6fb      	b.n	81256 <_vfiprintf_r+0x2e>
   8145e:	9907      	ldr	r1, [sp, #28]
   81460:	460a      	mov	r2, r1
   81462:	680d      	ldr	r5, [r1, #0]
   81464:	3204      	adds	r2, #4
   81466:	2d00      	cmp	r5, #0
   81468:	9207      	str	r2, [sp, #28]
   8146a:	da02      	bge.n	81472 <_vfiprintf_r+0x24a>
   8146c:	426d      	negs	r5, r5
   8146e:	f043 0304 	orr.w	r3, r3, #4
   81472:	f898 2000 	ldrb.w	r2, [r8]
   81476:	e749      	b.n	8130c <_vfiprintf_r+0xe4>
   81478:	9508      	str	r5, [sp, #32]
   8147a:	069e      	lsls	r6, r3, #26
   8147c:	f100 845a 	bmi.w	81d34 <_vfiprintf_r+0xb0c>
   81480:	9907      	ldr	r1, [sp, #28]
   81482:	06dd      	lsls	r5, r3, #27
   81484:	460a      	mov	r2, r1
   81486:	f100 83ef 	bmi.w	81c68 <_vfiprintf_r+0xa40>
   8148a:	0658      	lsls	r0, r3, #25
   8148c:	f140 83ec 	bpl.w	81c68 <_vfiprintf_r+0xa40>
   81490:	2700      	movs	r7, #0
   81492:	2201      	movs	r2, #1
   81494:	880e      	ldrh	r6, [r1, #0]
   81496:	3104      	adds	r1, #4
   81498:	9107      	str	r1, [sp, #28]
   8149a:	f04f 0100 	mov.w	r1, #0
   8149e:	2500      	movs	r5, #0
   814a0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   814a4:	1c61      	adds	r1, r4, #1
   814a6:	f000 8117 	beq.w	816d8 <_vfiprintf_r+0x4b0>
   814aa:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   814ae:	9102      	str	r1, [sp, #8]
   814b0:	ea56 0107 	orrs.w	r1, r6, r7
   814b4:	f040 8115 	bne.w	816e2 <_vfiprintf_r+0x4ba>
   814b8:	2c00      	cmp	r4, #0
   814ba:	f040 835b 	bne.w	81b74 <_vfiprintf_r+0x94c>
   814be:	2a00      	cmp	r2, #0
   814c0:	f040 83b6 	bne.w	81c30 <_vfiprintf_r+0xa08>
   814c4:	f013 0301 	ands.w	r3, r3, #1
   814c8:	9305      	str	r3, [sp, #20]
   814ca:	f000 8455 	beq.w	81d78 <_vfiprintf_r+0xb50>
   814ce:	2330      	movs	r3, #48	; 0x30
   814d0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   814d4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   814d8:	9b05      	ldr	r3, [sp, #20]
   814da:	42a3      	cmp	r3, r4
   814dc:	bfb8      	it	lt
   814de:	4623      	movlt	r3, r4
   814e0:	9301      	str	r3, [sp, #4]
   814e2:	b10d      	cbz	r5, 814e8 <_vfiprintf_r+0x2c0>
   814e4:	3301      	adds	r3, #1
   814e6:	9301      	str	r3, [sp, #4]
   814e8:	9b02      	ldr	r3, [sp, #8]
   814ea:	f013 0302 	ands.w	r3, r3, #2
   814ee:	9309      	str	r3, [sp, #36]	; 0x24
   814f0:	d002      	beq.n	814f8 <_vfiprintf_r+0x2d0>
   814f2:	9b01      	ldr	r3, [sp, #4]
   814f4:	3302      	adds	r3, #2
   814f6:	9301      	str	r3, [sp, #4]
   814f8:	9b02      	ldr	r3, [sp, #8]
   814fa:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   814fe:	930a      	str	r3, [sp, #40]	; 0x28
   81500:	f040 8215 	bne.w	8192e <_vfiprintf_r+0x706>
   81504:	9b08      	ldr	r3, [sp, #32]
   81506:	9a01      	ldr	r2, [sp, #4]
   81508:	1a9d      	subs	r5, r3, r2
   8150a:	2d00      	cmp	r5, #0
   8150c:	f340 820f 	ble.w	8192e <_vfiprintf_r+0x706>
   81510:	2d10      	cmp	r5, #16
   81512:	f340 8484 	ble.w	81e1e <_vfiprintf_r+0xbf6>
   81516:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81518:	46ce      	mov	lr, r9
   8151a:	2710      	movs	r7, #16
   8151c:	46a1      	mov	r9, r4
   8151e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81520:	4ec5      	ldr	r6, [pc, #788]	; (81838 <_vfiprintf_r+0x610>)
   81522:	4619      	mov	r1, r3
   81524:	9c06      	ldr	r4, [sp, #24]
   81526:	e007      	b.n	81538 <_vfiprintf_r+0x310>
   81528:	f101 0c02 	add.w	ip, r1, #2
   8152c:	4601      	mov	r1, r0
   8152e:	f10e 0e08 	add.w	lr, lr, #8
   81532:	3d10      	subs	r5, #16
   81534:	2d10      	cmp	r5, #16
   81536:	dd11      	ble.n	8155c <_vfiprintf_r+0x334>
   81538:	1c48      	adds	r0, r1, #1
   8153a:	3210      	adds	r2, #16
   8153c:	2807      	cmp	r0, #7
   8153e:	9211      	str	r2, [sp, #68]	; 0x44
   81540:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81544:	9010      	str	r0, [sp, #64]	; 0x40
   81546:	ddef      	ble.n	81528 <_vfiprintf_r+0x300>
   81548:	2a00      	cmp	r2, #0
   8154a:	f040 81d9 	bne.w	81900 <_vfiprintf_r+0x6d8>
   8154e:	3d10      	subs	r5, #16
   81550:	2d10      	cmp	r5, #16
   81552:	4611      	mov	r1, r2
   81554:	f04f 0c01 	mov.w	ip, #1
   81558:	46d6      	mov	lr, sl
   8155a:	dced      	bgt.n	81538 <_vfiprintf_r+0x310>
   8155c:	464c      	mov	r4, r9
   8155e:	4661      	mov	r1, ip
   81560:	46f1      	mov	r9, lr
   81562:	442a      	add	r2, r5
   81564:	2907      	cmp	r1, #7
   81566:	9211      	str	r2, [sp, #68]	; 0x44
   81568:	f8c9 6000 	str.w	r6, [r9]
   8156c:	f8c9 5004 	str.w	r5, [r9, #4]
   81570:	9110      	str	r1, [sp, #64]	; 0x40
   81572:	f300 82eb 	bgt.w	81b4c <_vfiprintf_r+0x924>
   81576:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8157a:	f109 0908 	add.w	r9, r9, #8
   8157e:	1c48      	adds	r0, r1, #1
   81580:	2d00      	cmp	r5, #0
   81582:	f040 81dc 	bne.w	8193e <_vfiprintf_r+0x716>
   81586:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81588:	2b00      	cmp	r3, #0
   8158a:	f000 81f6 	beq.w	8197a <_vfiprintf_r+0x752>
   8158e:	2102      	movs	r1, #2
   81590:	ab0e      	add	r3, sp, #56	; 0x38
   81592:	440a      	add	r2, r1
   81594:	2807      	cmp	r0, #7
   81596:	9211      	str	r2, [sp, #68]	; 0x44
   81598:	9010      	str	r0, [sp, #64]	; 0x40
   8159a:	f8c9 1004 	str.w	r1, [r9, #4]
   8159e:	f8c9 3000 	str.w	r3, [r9]
   815a2:	f340 81e6 	ble.w	81972 <_vfiprintf_r+0x74a>
   815a6:	2a00      	cmp	r2, #0
   815a8:	f040 8395 	bne.w	81cd6 <_vfiprintf_r+0xaae>
   815ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   815ae:	2001      	movs	r0, #1
   815b0:	2b80      	cmp	r3, #128	; 0x80
   815b2:	4611      	mov	r1, r2
   815b4:	46d1      	mov	r9, sl
   815b6:	f040 81e4 	bne.w	81982 <_vfiprintf_r+0x75a>
   815ba:	9b08      	ldr	r3, [sp, #32]
   815bc:	9d01      	ldr	r5, [sp, #4]
   815be:	1b5e      	subs	r6, r3, r5
   815c0:	2e00      	cmp	r6, #0
   815c2:	f340 81de 	ble.w	81982 <_vfiprintf_r+0x75a>
   815c6:	2e10      	cmp	r6, #16
   815c8:	f340 843c 	ble.w	81e44 <_vfiprintf_r+0xc1c>
   815cc:	46cc      	mov	ip, r9
   815ce:	2710      	movs	r7, #16
   815d0:	46a1      	mov	r9, r4
   815d2:	4d9a      	ldr	r5, [pc, #616]	; (8183c <_vfiprintf_r+0x614>)
   815d4:	9c06      	ldr	r4, [sp, #24]
   815d6:	e007      	b.n	815e8 <_vfiprintf_r+0x3c0>
   815d8:	f101 0e02 	add.w	lr, r1, #2
   815dc:	4601      	mov	r1, r0
   815de:	f10c 0c08 	add.w	ip, ip, #8
   815e2:	3e10      	subs	r6, #16
   815e4:	2e10      	cmp	r6, #16
   815e6:	dd11      	ble.n	8160c <_vfiprintf_r+0x3e4>
   815e8:	1c48      	adds	r0, r1, #1
   815ea:	3210      	adds	r2, #16
   815ec:	2807      	cmp	r0, #7
   815ee:	9211      	str	r2, [sp, #68]	; 0x44
   815f0:	e88c 00a0 	stmia.w	ip, {r5, r7}
   815f4:	9010      	str	r0, [sp, #64]	; 0x40
   815f6:	ddef      	ble.n	815d8 <_vfiprintf_r+0x3b0>
   815f8:	2a00      	cmp	r2, #0
   815fa:	f040 829b 	bne.w	81b34 <_vfiprintf_r+0x90c>
   815fe:	3e10      	subs	r6, #16
   81600:	2e10      	cmp	r6, #16
   81602:	f04f 0e01 	mov.w	lr, #1
   81606:	4611      	mov	r1, r2
   81608:	46d4      	mov	ip, sl
   8160a:	dced      	bgt.n	815e8 <_vfiprintf_r+0x3c0>
   8160c:	464c      	mov	r4, r9
   8160e:	46e1      	mov	r9, ip
   81610:	4432      	add	r2, r6
   81612:	f1be 0f07 	cmp.w	lr, #7
   81616:	9211      	str	r2, [sp, #68]	; 0x44
   81618:	e889 0060 	stmia.w	r9, {r5, r6}
   8161c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81620:	f300 8366 	bgt.w	81cf0 <_vfiprintf_r+0xac8>
   81624:	f109 0908 	add.w	r9, r9, #8
   81628:	f10e 0001 	add.w	r0, lr, #1
   8162c:	4671      	mov	r1, lr
   8162e:	e1a8      	b.n	81982 <_vfiprintf_r+0x75a>
   81630:	9508      	str	r5, [sp, #32]
   81632:	f013 0220 	ands.w	r2, r3, #32
   81636:	f040 8389 	bne.w	81d4c <_vfiprintf_r+0xb24>
   8163a:	f013 0110 	ands.w	r1, r3, #16
   8163e:	f040 8319 	bne.w	81c74 <_vfiprintf_r+0xa4c>
   81642:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   81646:	f000 8315 	beq.w	81c74 <_vfiprintf_r+0xa4c>
   8164a:	9807      	ldr	r0, [sp, #28]
   8164c:	460a      	mov	r2, r1
   8164e:	4601      	mov	r1, r0
   81650:	3104      	adds	r1, #4
   81652:	8806      	ldrh	r6, [r0, #0]
   81654:	2700      	movs	r7, #0
   81656:	9107      	str	r1, [sp, #28]
   81658:	e71f      	b.n	8149a <_vfiprintf_r+0x272>
   8165a:	9508      	str	r5, [sp, #32]
   8165c:	f043 0310 	orr.w	r3, r3, #16
   81660:	e7e7      	b.n	81632 <_vfiprintf_r+0x40a>
   81662:	9508      	str	r5, [sp, #32]
   81664:	f043 0310 	orr.w	r3, r3, #16
   81668:	e707      	b.n	8147a <_vfiprintf_r+0x252>
   8166a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8166e:	f898 2000 	ldrb.w	r2, [r8]
   81672:	e64b      	b.n	8130c <_vfiprintf_r+0xe4>
   81674:	2500      	movs	r5, #0
   81676:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8167a:	f818 2b01 	ldrb.w	r2, [r8], #1
   8167e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81682:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   81686:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8168a:	2909      	cmp	r1, #9
   8168c:	d9f5      	bls.n	8167a <_vfiprintf_r+0x452>
   8168e:	e63f      	b.n	81310 <_vfiprintf_r+0xe8>
   81690:	9508      	str	r5, [sp, #32]
   81692:	2800      	cmp	r0, #0
   81694:	f040 8402 	bne.w	81e9c <_vfiprintf_r+0xc74>
   81698:	f043 0310 	orr.w	r3, r3, #16
   8169c:	069e      	lsls	r6, r3, #26
   8169e:	f100 833d 	bmi.w	81d1c <_vfiprintf_r+0xaf4>
   816a2:	9907      	ldr	r1, [sp, #28]
   816a4:	06dd      	lsls	r5, r3, #27
   816a6:	460a      	mov	r2, r1
   816a8:	f100 82f0 	bmi.w	81c8c <_vfiprintf_r+0xa64>
   816ac:	0658      	lsls	r0, r3, #25
   816ae:	f140 82ed 	bpl.w	81c8c <_vfiprintf_r+0xa64>
   816b2:	f9b1 6000 	ldrsh.w	r6, [r1]
   816b6:	3204      	adds	r2, #4
   816b8:	17f7      	asrs	r7, r6, #31
   816ba:	4630      	mov	r0, r6
   816bc:	4639      	mov	r1, r7
   816be:	9207      	str	r2, [sp, #28]
   816c0:	2800      	cmp	r0, #0
   816c2:	f171 0200 	sbcs.w	r2, r1, #0
   816c6:	f2c0 835a 	blt.w	81d7e <_vfiprintf_r+0xb56>
   816ca:	1c61      	adds	r1, r4, #1
   816cc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   816d0:	f04f 0201 	mov.w	r2, #1
   816d4:	f47f aee9 	bne.w	814aa <_vfiprintf_r+0x282>
   816d8:	ea56 0107 	orrs.w	r1, r6, r7
   816dc:	f000 824b 	beq.w	81b76 <_vfiprintf_r+0x94e>
   816e0:	9302      	str	r3, [sp, #8]
   816e2:	2a01      	cmp	r2, #1
   816e4:	f000 828a 	beq.w	81bfc <_vfiprintf_r+0x9d4>
   816e8:	2a02      	cmp	r2, #2
   816ea:	f040 825a 	bne.w	81ba2 <_vfiprintf_r+0x97a>
   816ee:	46d3      	mov	fp, sl
   816f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   816f2:	0933      	lsrs	r3, r6, #4
   816f4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   816f8:	0939      	lsrs	r1, r7, #4
   816fa:	f006 020f 	and.w	r2, r6, #15
   816fe:	460f      	mov	r7, r1
   81700:	461e      	mov	r6, r3
   81702:	5c83      	ldrb	r3, [r0, r2]
   81704:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81708:	ea56 0307 	orrs.w	r3, r6, r7
   8170c:	d1f1      	bne.n	816f2 <_vfiprintf_r+0x4ca>
   8170e:	ebaa 030b 	sub.w	r3, sl, fp
   81712:	9305      	str	r3, [sp, #20]
   81714:	e6e0      	b.n	814d8 <_vfiprintf_r+0x2b0>
   81716:	2800      	cmp	r0, #0
   81718:	f040 83bd 	bne.w	81e96 <_vfiprintf_r+0xc6e>
   8171c:	0699      	lsls	r1, r3, #26
   8171e:	f100 8359 	bmi.w	81dd4 <_vfiprintf_r+0xbac>
   81722:	06da      	lsls	r2, r3, #27
   81724:	f100 80e5 	bmi.w	818f2 <_vfiprintf_r+0x6ca>
   81728:	065b      	lsls	r3, r3, #25
   8172a:	f140 80e2 	bpl.w	818f2 <_vfiprintf_r+0x6ca>
   8172e:	9a07      	ldr	r2, [sp, #28]
   81730:	6813      	ldr	r3, [r2, #0]
   81732:	3204      	adds	r2, #4
   81734:	9207      	str	r2, [sp, #28]
   81736:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   8173a:	801a      	strh	r2, [r3, #0]
   8173c:	e5b1      	b.n	812a2 <_vfiprintf_r+0x7a>
   8173e:	2278      	movs	r2, #120	; 0x78
   81740:	2130      	movs	r1, #48	; 0x30
   81742:	9508      	str	r5, [sp, #32]
   81744:	9d07      	ldr	r5, [sp, #28]
   81746:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8174a:	1d2a      	adds	r2, r5, #4
   8174c:	9207      	str	r2, [sp, #28]
   8174e:	4a3c      	ldr	r2, [pc, #240]	; (81840 <_vfiprintf_r+0x618>)
   81750:	682e      	ldr	r6, [r5, #0]
   81752:	920b      	str	r2, [sp, #44]	; 0x2c
   81754:	f043 0302 	orr.w	r3, r3, #2
   81758:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8175c:	2700      	movs	r7, #0
   8175e:	2202      	movs	r2, #2
   81760:	e69b      	b.n	8149a <_vfiprintf_r+0x272>
   81762:	9508      	str	r5, [sp, #32]
   81764:	2800      	cmp	r0, #0
   81766:	d099      	beq.n	8169c <_vfiprintf_r+0x474>
   81768:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8176c:	e796      	b.n	8169c <_vfiprintf_r+0x474>
   8176e:	f898 2000 	ldrb.w	r2, [r8]
   81772:	2e00      	cmp	r6, #0
   81774:	f47f adca 	bne.w	8130c <_vfiprintf_r+0xe4>
   81778:	2001      	movs	r0, #1
   8177a:	2620      	movs	r6, #32
   8177c:	e5c6      	b.n	8130c <_vfiprintf_r+0xe4>
   8177e:	f043 0301 	orr.w	r3, r3, #1
   81782:	f898 2000 	ldrb.w	r2, [r8]
   81786:	e5c1      	b.n	8130c <_vfiprintf_r+0xe4>
   81788:	9508      	str	r5, [sp, #32]
   8178a:	2800      	cmp	r0, #0
   8178c:	f040 8380 	bne.w	81e90 <_vfiprintf_r+0xc68>
   81790:	492b      	ldr	r1, [pc, #172]	; (81840 <_vfiprintf_r+0x618>)
   81792:	910b      	str	r1, [sp, #44]	; 0x2c
   81794:	069f      	lsls	r7, r3, #26
   81796:	f100 82e5 	bmi.w	81d64 <_vfiprintf_r+0xb3c>
   8179a:	9807      	ldr	r0, [sp, #28]
   8179c:	06de      	lsls	r6, r3, #27
   8179e:	4601      	mov	r1, r0
   817a0:	f100 826f 	bmi.w	81c82 <_vfiprintf_r+0xa5a>
   817a4:	065d      	lsls	r5, r3, #25
   817a6:	f140 826c 	bpl.w	81c82 <_vfiprintf_r+0xa5a>
   817aa:	2700      	movs	r7, #0
   817ac:	3104      	adds	r1, #4
   817ae:	8806      	ldrh	r6, [r0, #0]
   817b0:	9107      	str	r1, [sp, #28]
   817b2:	07d8      	lsls	r0, r3, #31
   817b4:	f140 8220 	bpl.w	81bf8 <_vfiprintf_r+0x9d0>
   817b8:	ea56 0107 	orrs.w	r1, r6, r7
   817bc:	f000 821c 	beq.w	81bf8 <_vfiprintf_r+0x9d0>
   817c0:	2130      	movs	r1, #48	; 0x30
   817c2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   817c6:	f043 0302 	orr.w	r3, r3, #2
   817ca:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   817ce:	2202      	movs	r2, #2
   817d0:	e663      	b.n	8149a <_vfiprintf_r+0x272>
   817d2:	9508      	str	r5, [sp, #32]
   817d4:	2800      	cmp	r0, #0
   817d6:	f040 8355 	bne.w	81e84 <_vfiprintf_r+0xc5c>
   817da:	491a      	ldr	r1, [pc, #104]	; (81844 <_vfiprintf_r+0x61c>)
   817dc:	910b      	str	r1, [sp, #44]	; 0x2c
   817de:	e7d9      	b.n	81794 <_vfiprintf_r+0x56c>
   817e0:	2201      	movs	r2, #1
   817e2:	9807      	ldr	r0, [sp, #28]
   817e4:	4611      	mov	r1, r2
   817e6:	9201      	str	r2, [sp, #4]
   817e8:	6802      	ldr	r2, [r0, #0]
   817ea:	f04f 0400 	mov.w	r4, #0
   817ee:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   817f2:	4602      	mov	r2, r0
   817f4:	3204      	adds	r2, #4
   817f6:	9508      	str	r5, [sp, #32]
   817f8:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   817fc:	9105      	str	r1, [sp, #20]
   817fe:	9207      	str	r2, [sp, #28]
   81800:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81804:	9302      	str	r3, [sp, #8]
   81806:	2400      	movs	r4, #0
   81808:	e66e      	b.n	814e8 <_vfiprintf_r+0x2c0>
   8180a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8180e:	f898 2000 	ldrb.w	r2, [r8]
   81812:	e57b      	b.n	8130c <_vfiprintf_r+0xe4>
   81814:	f898 2000 	ldrb.w	r2, [r8]
   81818:	2a6c      	cmp	r2, #108	; 0x6c
   8181a:	bf03      	ittte	eq
   8181c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81820:	f043 0320 	orreq.w	r3, r3, #32
   81824:	f108 0801 	addeq.w	r8, r8, #1
   81828:	f043 0310 	orrne.w	r3, r3, #16
   8182c:	e56e      	b.n	8130c <_vfiprintf_r+0xe4>
   8182e:	f898 2000 	ldrb.w	r2, [r8]
   81832:	2001      	movs	r0, #1
   81834:	262b      	movs	r6, #43	; 0x2b
   81836:	e569      	b.n	8130c <_vfiprintf_r+0xe4>
   81838:	00083df8 	.word	0x00083df8
   8183c:	00083e08 	.word	0x00083e08
   81840:	00083ddc 	.word	0x00083ddc
   81844:	00083dc8 	.word	0x00083dc8
   81848:	f04f 0200 	mov.w	r2, #0
   8184c:	9907      	ldr	r1, [sp, #28]
   8184e:	9508      	str	r5, [sp, #32]
   81850:	f8d1 b000 	ldr.w	fp, [r1]
   81854:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81858:	1d0d      	adds	r5, r1, #4
   8185a:	f1bb 0f00 	cmp.w	fp, #0
   8185e:	f000 82e4 	beq.w	81e2a <_vfiprintf_r+0xc02>
   81862:	1c67      	adds	r7, r4, #1
   81864:	f000 82c3 	beq.w	81dee <_vfiprintf_r+0xbc6>
   81868:	4622      	mov	r2, r4
   8186a:	2100      	movs	r1, #0
   8186c:	4658      	mov	r0, fp
   8186e:	9301      	str	r3, [sp, #4]
   81870:	f001 fbc6 	bl	83000 <memchr>
   81874:	9b01      	ldr	r3, [sp, #4]
   81876:	2800      	cmp	r0, #0
   81878:	f000 82e8 	beq.w	81e4c <_vfiprintf_r+0xc24>
   8187c:	eba0 020b 	sub.w	r2, r0, fp
   81880:	9507      	str	r5, [sp, #28]
   81882:	9205      	str	r2, [sp, #20]
   81884:	9302      	str	r3, [sp, #8]
   81886:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8188a:	2400      	movs	r4, #0
   8188c:	e624      	b.n	814d8 <_vfiprintf_r+0x2b0>
   8188e:	f898 2000 	ldrb.w	r2, [r8]
   81892:	f108 0701 	add.w	r7, r8, #1
   81896:	2a2a      	cmp	r2, #42	; 0x2a
   81898:	f000 82e9 	beq.w	81e6e <_vfiprintf_r+0xc46>
   8189c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   818a0:	2909      	cmp	r1, #9
   818a2:	46b8      	mov	r8, r7
   818a4:	f04f 0400 	mov.w	r4, #0
   818a8:	f63f ad32 	bhi.w	81310 <_vfiprintf_r+0xe8>
   818ac:	f818 2b01 	ldrb.w	r2, [r8], #1
   818b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   818b4:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   818b8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   818bc:	2909      	cmp	r1, #9
   818be:	d9f5      	bls.n	818ac <_vfiprintf_r+0x684>
   818c0:	e526      	b.n	81310 <_vfiprintf_r+0xe8>
   818c2:	f043 0320 	orr.w	r3, r3, #32
   818c6:	f898 2000 	ldrb.w	r2, [r8]
   818ca:	e51f      	b.n	8130c <_vfiprintf_r+0xe4>
   818cc:	9508      	str	r5, [sp, #32]
   818ce:	2800      	cmp	r0, #0
   818d0:	f040 82db 	bne.w	81e8a <_vfiprintf_r+0xc62>
   818d4:	2a00      	cmp	r2, #0
   818d6:	f000 80f1 	beq.w	81abc <_vfiprintf_r+0x894>
   818da:	2101      	movs	r1, #1
   818dc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   818e0:	f04f 0200 	mov.w	r2, #0
   818e4:	9101      	str	r1, [sp, #4]
   818e6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   818ea:	9105      	str	r1, [sp, #20]
   818ec:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   818f0:	e788      	b.n	81804 <_vfiprintf_r+0x5dc>
   818f2:	9a07      	ldr	r2, [sp, #28]
   818f4:	6813      	ldr	r3, [r2, #0]
   818f6:	3204      	adds	r2, #4
   818f8:	9207      	str	r2, [sp, #28]
   818fa:	9a03      	ldr	r2, [sp, #12]
   818fc:	601a      	str	r2, [r3, #0]
   818fe:	e4d0      	b.n	812a2 <_vfiprintf_r+0x7a>
   81900:	aa0f      	add	r2, sp, #60	; 0x3c
   81902:	9904      	ldr	r1, [sp, #16]
   81904:	4620      	mov	r0, r4
   81906:	f7ff fc4f 	bl	811a8 <__sprint_r.part.0>
   8190a:	2800      	cmp	r0, #0
   8190c:	f040 8143 	bne.w	81b96 <_vfiprintf_r+0x96e>
   81910:	9910      	ldr	r1, [sp, #64]	; 0x40
   81912:	46d6      	mov	lr, sl
   81914:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81916:	f101 0c01 	add.w	ip, r1, #1
   8191a:	e60a      	b.n	81532 <_vfiprintf_r+0x30a>
   8191c:	aa0f      	add	r2, sp, #60	; 0x3c
   8191e:	9904      	ldr	r1, [sp, #16]
   81920:	9806      	ldr	r0, [sp, #24]
   81922:	f7ff fc41 	bl	811a8 <__sprint_r.part.0>
   81926:	2800      	cmp	r0, #0
   81928:	f040 8135 	bne.w	81b96 <_vfiprintf_r+0x96e>
   8192c:	46d1      	mov	r9, sl
   8192e:	9910      	ldr	r1, [sp, #64]	; 0x40
   81930:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81934:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81936:	1c48      	adds	r0, r1, #1
   81938:	2d00      	cmp	r5, #0
   8193a:	f43f ae24 	beq.w	81586 <_vfiprintf_r+0x35e>
   8193e:	2101      	movs	r1, #1
   81940:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81944:	440a      	add	r2, r1
   81946:	2807      	cmp	r0, #7
   81948:	9211      	str	r2, [sp, #68]	; 0x44
   8194a:	9010      	str	r0, [sp, #64]	; 0x40
   8194c:	f8c9 1004 	str.w	r1, [r9, #4]
   81950:	f8c9 5000 	str.w	r5, [r9]
   81954:	f340 8109 	ble.w	81b6a <_vfiprintf_r+0x942>
   81958:	2a00      	cmp	r2, #0
   8195a:	f040 81af 	bne.w	81cbc <_vfiprintf_r+0xa94>
   8195e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81960:	2b00      	cmp	r3, #0
   81962:	f43f ae23 	beq.w	815ac <_vfiprintf_r+0x384>
   81966:	2202      	movs	r2, #2
   81968:	4608      	mov	r0, r1
   8196a:	46d1      	mov	r9, sl
   8196c:	ab0e      	add	r3, sp, #56	; 0x38
   8196e:	921d      	str	r2, [sp, #116]	; 0x74
   81970:	931c      	str	r3, [sp, #112]	; 0x70
   81972:	4601      	mov	r1, r0
   81974:	f109 0908 	add.w	r9, r9, #8
   81978:	3001      	adds	r0, #1
   8197a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8197c:	2b80      	cmp	r3, #128	; 0x80
   8197e:	f43f ae1c 	beq.w	815ba <_vfiprintf_r+0x392>
   81982:	9b05      	ldr	r3, [sp, #20]
   81984:	1ae4      	subs	r4, r4, r3
   81986:	2c00      	cmp	r4, #0
   81988:	dd2f      	ble.n	819ea <_vfiprintf_r+0x7c2>
   8198a:	2c10      	cmp	r4, #16
   8198c:	f340 8220 	ble.w	81dd0 <_vfiprintf_r+0xba8>
   81990:	46ce      	mov	lr, r9
   81992:	2610      	movs	r6, #16
   81994:	4db2      	ldr	r5, [pc, #712]	; (81c60 <_vfiprintf_r+0xa38>)
   81996:	9f06      	ldr	r7, [sp, #24]
   81998:	f8dd 9010 	ldr.w	r9, [sp, #16]
   8199c:	e006      	b.n	819ac <_vfiprintf_r+0x784>
   8199e:	1c88      	adds	r0, r1, #2
   819a0:	4619      	mov	r1, r3
   819a2:	f10e 0e08 	add.w	lr, lr, #8
   819a6:	3c10      	subs	r4, #16
   819a8:	2c10      	cmp	r4, #16
   819aa:	dd10      	ble.n	819ce <_vfiprintf_r+0x7a6>
   819ac:	1c4b      	adds	r3, r1, #1
   819ae:	3210      	adds	r2, #16
   819b0:	2b07      	cmp	r3, #7
   819b2:	9211      	str	r2, [sp, #68]	; 0x44
   819b4:	e88e 0060 	stmia.w	lr, {r5, r6}
   819b8:	9310      	str	r3, [sp, #64]	; 0x40
   819ba:	ddf0      	ble.n	8199e <_vfiprintf_r+0x776>
   819bc:	2a00      	cmp	r2, #0
   819be:	d165      	bne.n	81a8c <_vfiprintf_r+0x864>
   819c0:	3c10      	subs	r4, #16
   819c2:	2c10      	cmp	r4, #16
   819c4:	f04f 0001 	mov.w	r0, #1
   819c8:	4611      	mov	r1, r2
   819ca:	46d6      	mov	lr, sl
   819cc:	dcee      	bgt.n	819ac <_vfiprintf_r+0x784>
   819ce:	46f1      	mov	r9, lr
   819d0:	4422      	add	r2, r4
   819d2:	2807      	cmp	r0, #7
   819d4:	9211      	str	r2, [sp, #68]	; 0x44
   819d6:	f8c9 5000 	str.w	r5, [r9]
   819da:	f8c9 4004 	str.w	r4, [r9, #4]
   819de:	9010      	str	r0, [sp, #64]	; 0x40
   819e0:	f300 8085 	bgt.w	81aee <_vfiprintf_r+0x8c6>
   819e4:	f109 0908 	add.w	r9, r9, #8
   819e8:	3001      	adds	r0, #1
   819ea:	9905      	ldr	r1, [sp, #20]
   819ec:	2807      	cmp	r0, #7
   819ee:	440a      	add	r2, r1
   819f0:	9211      	str	r2, [sp, #68]	; 0x44
   819f2:	f8c9 b000 	str.w	fp, [r9]
   819f6:	f8c9 1004 	str.w	r1, [r9, #4]
   819fa:	9010      	str	r0, [sp, #64]	; 0x40
   819fc:	f340 8082 	ble.w	81b04 <_vfiprintf_r+0x8dc>
   81a00:	2a00      	cmp	r2, #0
   81a02:	f040 8118 	bne.w	81c36 <_vfiprintf_r+0xa0e>
   81a06:	9b02      	ldr	r3, [sp, #8]
   81a08:	9210      	str	r2, [sp, #64]	; 0x40
   81a0a:	0758      	lsls	r0, r3, #29
   81a0c:	d535      	bpl.n	81a7a <_vfiprintf_r+0x852>
   81a0e:	9b08      	ldr	r3, [sp, #32]
   81a10:	9901      	ldr	r1, [sp, #4]
   81a12:	1a5c      	subs	r4, r3, r1
   81a14:	2c00      	cmp	r4, #0
   81a16:	f340 80e7 	ble.w	81be8 <_vfiprintf_r+0x9c0>
   81a1a:	46d1      	mov	r9, sl
   81a1c:	2c10      	cmp	r4, #16
   81a1e:	f340 820d 	ble.w	81e3c <_vfiprintf_r+0xc14>
   81a22:	2510      	movs	r5, #16
   81a24:	9910      	ldr	r1, [sp, #64]	; 0x40
   81a26:	4e8f      	ldr	r6, [pc, #572]	; (81c64 <_vfiprintf_r+0xa3c>)
   81a28:	9f06      	ldr	r7, [sp, #24]
   81a2a:	f8dd b010 	ldr.w	fp, [sp, #16]
   81a2e:	e006      	b.n	81a3e <_vfiprintf_r+0x816>
   81a30:	1c88      	adds	r0, r1, #2
   81a32:	4619      	mov	r1, r3
   81a34:	f109 0908 	add.w	r9, r9, #8
   81a38:	3c10      	subs	r4, #16
   81a3a:	2c10      	cmp	r4, #16
   81a3c:	dd11      	ble.n	81a62 <_vfiprintf_r+0x83a>
   81a3e:	1c4b      	adds	r3, r1, #1
   81a40:	3210      	adds	r2, #16
   81a42:	2b07      	cmp	r3, #7
   81a44:	9211      	str	r2, [sp, #68]	; 0x44
   81a46:	f8c9 6000 	str.w	r6, [r9]
   81a4a:	f8c9 5004 	str.w	r5, [r9, #4]
   81a4e:	9310      	str	r3, [sp, #64]	; 0x40
   81a50:	ddee      	ble.n	81a30 <_vfiprintf_r+0x808>
   81a52:	bb42      	cbnz	r2, 81aa6 <_vfiprintf_r+0x87e>
   81a54:	3c10      	subs	r4, #16
   81a56:	2c10      	cmp	r4, #16
   81a58:	f04f 0001 	mov.w	r0, #1
   81a5c:	4611      	mov	r1, r2
   81a5e:	46d1      	mov	r9, sl
   81a60:	dced      	bgt.n	81a3e <_vfiprintf_r+0x816>
   81a62:	4422      	add	r2, r4
   81a64:	2807      	cmp	r0, #7
   81a66:	9211      	str	r2, [sp, #68]	; 0x44
   81a68:	f8c9 6000 	str.w	r6, [r9]
   81a6c:	f8c9 4004 	str.w	r4, [r9, #4]
   81a70:	9010      	str	r0, [sp, #64]	; 0x40
   81a72:	dd51      	ble.n	81b18 <_vfiprintf_r+0x8f0>
   81a74:	2a00      	cmp	r2, #0
   81a76:	f040 819a 	bne.w	81dae <_vfiprintf_r+0xb86>
   81a7a:	9b03      	ldr	r3, [sp, #12]
   81a7c:	9a08      	ldr	r2, [sp, #32]
   81a7e:	9901      	ldr	r1, [sp, #4]
   81a80:	428a      	cmp	r2, r1
   81a82:	bfac      	ite	ge
   81a84:	189b      	addge	r3, r3, r2
   81a86:	185b      	addlt	r3, r3, r1
   81a88:	9303      	str	r3, [sp, #12]
   81a8a:	e04e      	b.n	81b2a <_vfiprintf_r+0x902>
   81a8c:	aa0f      	add	r2, sp, #60	; 0x3c
   81a8e:	4649      	mov	r1, r9
   81a90:	4638      	mov	r0, r7
   81a92:	f7ff fb89 	bl	811a8 <__sprint_r.part.0>
   81a96:	2800      	cmp	r0, #0
   81a98:	f040 813e 	bne.w	81d18 <_vfiprintf_r+0xaf0>
   81a9c:	9910      	ldr	r1, [sp, #64]	; 0x40
   81a9e:	46d6      	mov	lr, sl
   81aa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81aa2:	1c48      	adds	r0, r1, #1
   81aa4:	e77f      	b.n	819a6 <_vfiprintf_r+0x77e>
   81aa6:	aa0f      	add	r2, sp, #60	; 0x3c
   81aa8:	4659      	mov	r1, fp
   81aaa:	4638      	mov	r0, r7
   81aac:	f7ff fb7c 	bl	811a8 <__sprint_r.part.0>
   81ab0:	b960      	cbnz	r0, 81acc <_vfiprintf_r+0x8a4>
   81ab2:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ab4:	46d1      	mov	r9, sl
   81ab6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ab8:	1c48      	adds	r0, r1, #1
   81aba:	e7bd      	b.n	81a38 <_vfiprintf_r+0x810>
   81abc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81abe:	f8dd b010 	ldr.w	fp, [sp, #16]
   81ac2:	2b00      	cmp	r3, #0
   81ac4:	f040 81ca 	bne.w	81e5c <_vfiprintf_r+0xc34>
   81ac8:	2300      	movs	r3, #0
   81aca:	9310      	str	r3, [sp, #64]	; 0x40
   81acc:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81ad0:	f013 0f01 	tst.w	r3, #1
   81ad4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81ad8:	d102      	bne.n	81ae0 <_vfiprintf_r+0x8b8>
   81ada:	059a      	lsls	r2, r3, #22
   81adc:	f140 80dd 	bpl.w	81c9a <_vfiprintf_r+0xa72>
   81ae0:	065b      	lsls	r3, r3, #25
   81ae2:	f53f acad 	bmi.w	81440 <_vfiprintf_r+0x218>
   81ae6:	9803      	ldr	r0, [sp, #12]
   81ae8:	b02d      	add	sp, #180	; 0xb4
   81aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81aee:	2a00      	cmp	r2, #0
   81af0:	f040 8105 	bne.w	81cfe <_vfiprintf_r+0xad6>
   81af4:	2301      	movs	r3, #1
   81af6:	46d1      	mov	r9, sl
   81af8:	9a05      	ldr	r2, [sp, #20]
   81afa:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81afe:	921d      	str	r2, [sp, #116]	; 0x74
   81b00:	9211      	str	r2, [sp, #68]	; 0x44
   81b02:	9310      	str	r3, [sp, #64]	; 0x40
   81b04:	f109 0908 	add.w	r9, r9, #8
   81b08:	9b02      	ldr	r3, [sp, #8]
   81b0a:	0759      	lsls	r1, r3, #29
   81b0c:	d504      	bpl.n	81b18 <_vfiprintf_r+0x8f0>
   81b0e:	9b08      	ldr	r3, [sp, #32]
   81b10:	9901      	ldr	r1, [sp, #4]
   81b12:	1a5c      	subs	r4, r3, r1
   81b14:	2c00      	cmp	r4, #0
   81b16:	dc81      	bgt.n	81a1c <_vfiprintf_r+0x7f4>
   81b18:	9b03      	ldr	r3, [sp, #12]
   81b1a:	9908      	ldr	r1, [sp, #32]
   81b1c:	9801      	ldr	r0, [sp, #4]
   81b1e:	4281      	cmp	r1, r0
   81b20:	bfac      	ite	ge
   81b22:	185b      	addge	r3, r3, r1
   81b24:	181b      	addlt	r3, r3, r0
   81b26:	9303      	str	r3, [sp, #12]
   81b28:	bb72      	cbnz	r2, 81b88 <_vfiprintf_r+0x960>
   81b2a:	2300      	movs	r3, #0
   81b2c:	46d1      	mov	r9, sl
   81b2e:	9310      	str	r3, [sp, #64]	; 0x40
   81b30:	f7ff bbb7 	b.w	812a2 <_vfiprintf_r+0x7a>
   81b34:	aa0f      	add	r2, sp, #60	; 0x3c
   81b36:	9904      	ldr	r1, [sp, #16]
   81b38:	4620      	mov	r0, r4
   81b3a:	f7ff fb35 	bl	811a8 <__sprint_r.part.0>
   81b3e:	bb50      	cbnz	r0, 81b96 <_vfiprintf_r+0x96e>
   81b40:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b42:	46d4      	mov	ip, sl
   81b44:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b46:	f101 0e01 	add.w	lr, r1, #1
   81b4a:	e54a      	b.n	815e2 <_vfiprintf_r+0x3ba>
   81b4c:	2a00      	cmp	r2, #0
   81b4e:	f47f aee5 	bne.w	8191c <_vfiprintf_r+0x6f4>
   81b52:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81b56:	2900      	cmp	r1, #0
   81b58:	f000 811a 	beq.w	81d90 <_vfiprintf_r+0xb68>
   81b5c:	2201      	movs	r2, #1
   81b5e:	46d1      	mov	r9, sl
   81b60:	4610      	mov	r0, r2
   81b62:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81b66:	921d      	str	r2, [sp, #116]	; 0x74
   81b68:	911c      	str	r1, [sp, #112]	; 0x70
   81b6a:	4601      	mov	r1, r0
   81b6c:	f109 0908 	add.w	r9, r9, #8
   81b70:	3001      	adds	r0, #1
   81b72:	e508      	b.n	81586 <_vfiprintf_r+0x35e>
   81b74:	9b02      	ldr	r3, [sp, #8]
   81b76:	2a01      	cmp	r2, #1
   81b78:	f000 8097 	beq.w	81caa <_vfiprintf_r+0xa82>
   81b7c:	2a02      	cmp	r2, #2
   81b7e:	d10d      	bne.n	81b9c <_vfiprintf_r+0x974>
   81b80:	9302      	str	r3, [sp, #8]
   81b82:	2600      	movs	r6, #0
   81b84:	2700      	movs	r7, #0
   81b86:	e5b2      	b.n	816ee <_vfiprintf_r+0x4c6>
   81b88:	aa0f      	add	r2, sp, #60	; 0x3c
   81b8a:	9904      	ldr	r1, [sp, #16]
   81b8c:	9806      	ldr	r0, [sp, #24]
   81b8e:	f7ff fb0b 	bl	811a8 <__sprint_r.part.0>
   81b92:	2800      	cmp	r0, #0
   81b94:	d0c9      	beq.n	81b2a <_vfiprintf_r+0x902>
   81b96:	f8dd b010 	ldr.w	fp, [sp, #16]
   81b9a:	e797      	b.n	81acc <_vfiprintf_r+0x8a4>
   81b9c:	2600      	movs	r6, #0
   81b9e:	2700      	movs	r7, #0
   81ba0:	9302      	str	r3, [sp, #8]
   81ba2:	4651      	mov	r1, sl
   81ba4:	e000      	b.n	81ba8 <_vfiprintf_r+0x980>
   81ba6:	4659      	mov	r1, fp
   81ba8:	08f2      	lsrs	r2, r6, #3
   81baa:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81bae:	08f8      	lsrs	r0, r7, #3
   81bb0:	f006 0307 	and.w	r3, r6, #7
   81bb4:	4607      	mov	r7, r0
   81bb6:	4616      	mov	r6, r2
   81bb8:	3330      	adds	r3, #48	; 0x30
   81bba:	ea56 0207 	orrs.w	r2, r6, r7
   81bbe:	f801 3c01 	strb.w	r3, [r1, #-1]
   81bc2:	f101 3bff 	add.w	fp, r1, #4294967295
   81bc6:	d1ee      	bne.n	81ba6 <_vfiprintf_r+0x97e>
   81bc8:	9a02      	ldr	r2, [sp, #8]
   81bca:	07d6      	lsls	r6, r2, #31
   81bcc:	f57f ad9f 	bpl.w	8170e <_vfiprintf_r+0x4e6>
   81bd0:	2b30      	cmp	r3, #48	; 0x30
   81bd2:	f43f ad9c 	beq.w	8170e <_vfiprintf_r+0x4e6>
   81bd6:	2330      	movs	r3, #48	; 0x30
   81bd8:	3902      	subs	r1, #2
   81bda:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81bde:	ebaa 0301 	sub.w	r3, sl, r1
   81be2:	9305      	str	r3, [sp, #20]
   81be4:	468b      	mov	fp, r1
   81be6:	e477      	b.n	814d8 <_vfiprintf_r+0x2b0>
   81be8:	9b03      	ldr	r3, [sp, #12]
   81bea:	9a08      	ldr	r2, [sp, #32]
   81bec:	428a      	cmp	r2, r1
   81bee:	bfac      	ite	ge
   81bf0:	189b      	addge	r3, r3, r2
   81bf2:	185b      	addlt	r3, r3, r1
   81bf4:	9303      	str	r3, [sp, #12]
   81bf6:	e798      	b.n	81b2a <_vfiprintf_r+0x902>
   81bf8:	2202      	movs	r2, #2
   81bfa:	e44e      	b.n	8149a <_vfiprintf_r+0x272>
   81bfc:	2f00      	cmp	r7, #0
   81bfe:	bf08      	it	eq
   81c00:	2e0a      	cmpeq	r6, #10
   81c02:	d351      	bcc.n	81ca8 <_vfiprintf_r+0xa80>
   81c04:	46d3      	mov	fp, sl
   81c06:	4630      	mov	r0, r6
   81c08:	4639      	mov	r1, r7
   81c0a:	220a      	movs	r2, #10
   81c0c:	2300      	movs	r3, #0
   81c0e:	f001 ff29 	bl	83a64 <__aeabi_uldivmod>
   81c12:	3230      	adds	r2, #48	; 0x30
   81c14:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81c18:	4630      	mov	r0, r6
   81c1a:	4639      	mov	r1, r7
   81c1c:	2300      	movs	r3, #0
   81c1e:	220a      	movs	r2, #10
   81c20:	f001 ff20 	bl	83a64 <__aeabi_uldivmod>
   81c24:	4606      	mov	r6, r0
   81c26:	460f      	mov	r7, r1
   81c28:	ea56 0307 	orrs.w	r3, r6, r7
   81c2c:	d1eb      	bne.n	81c06 <_vfiprintf_r+0x9de>
   81c2e:	e56e      	b.n	8170e <_vfiprintf_r+0x4e6>
   81c30:	9405      	str	r4, [sp, #20]
   81c32:	46d3      	mov	fp, sl
   81c34:	e450      	b.n	814d8 <_vfiprintf_r+0x2b0>
   81c36:	aa0f      	add	r2, sp, #60	; 0x3c
   81c38:	9904      	ldr	r1, [sp, #16]
   81c3a:	9806      	ldr	r0, [sp, #24]
   81c3c:	f7ff fab4 	bl	811a8 <__sprint_r.part.0>
   81c40:	2800      	cmp	r0, #0
   81c42:	d1a8      	bne.n	81b96 <_vfiprintf_r+0x96e>
   81c44:	46d1      	mov	r9, sl
   81c46:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81c48:	e75e      	b.n	81b08 <_vfiprintf_r+0x8e0>
   81c4a:	aa0f      	add	r2, sp, #60	; 0x3c
   81c4c:	9904      	ldr	r1, [sp, #16]
   81c4e:	9806      	ldr	r0, [sp, #24]
   81c50:	f7ff faaa 	bl	811a8 <__sprint_r.part.0>
   81c54:	2800      	cmp	r0, #0
   81c56:	d19e      	bne.n	81b96 <_vfiprintf_r+0x96e>
   81c58:	46d1      	mov	r9, sl
   81c5a:	f7ff bbbb 	b.w	813d4 <_vfiprintf_r+0x1ac>
   81c5e:	bf00      	nop
   81c60:	00083e08 	.word	0x00083e08
   81c64:	00083df8 	.word	0x00083df8
   81c68:	3104      	adds	r1, #4
   81c6a:	6816      	ldr	r6, [r2, #0]
   81c6c:	2700      	movs	r7, #0
   81c6e:	2201      	movs	r2, #1
   81c70:	9107      	str	r1, [sp, #28]
   81c72:	e412      	b.n	8149a <_vfiprintf_r+0x272>
   81c74:	9807      	ldr	r0, [sp, #28]
   81c76:	2700      	movs	r7, #0
   81c78:	4601      	mov	r1, r0
   81c7a:	3104      	adds	r1, #4
   81c7c:	6806      	ldr	r6, [r0, #0]
   81c7e:	9107      	str	r1, [sp, #28]
   81c80:	e40b      	b.n	8149a <_vfiprintf_r+0x272>
   81c82:	680e      	ldr	r6, [r1, #0]
   81c84:	3104      	adds	r1, #4
   81c86:	9107      	str	r1, [sp, #28]
   81c88:	2700      	movs	r7, #0
   81c8a:	e592      	b.n	817b2 <_vfiprintf_r+0x58a>
   81c8c:	6816      	ldr	r6, [r2, #0]
   81c8e:	3204      	adds	r2, #4
   81c90:	17f7      	asrs	r7, r6, #31
   81c92:	9207      	str	r2, [sp, #28]
   81c94:	4630      	mov	r0, r6
   81c96:	4639      	mov	r1, r7
   81c98:	e512      	b.n	816c0 <_vfiprintf_r+0x498>
   81c9a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81c9e:	f000 fe75 	bl	8298c <__retarget_lock_release_recursive>
   81ca2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81ca6:	e71b      	b.n	81ae0 <_vfiprintf_r+0x8b8>
   81ca8:	9b02      	ldr	r3, [sp, #8]
   81caa:	9302      	str	r3, [sp, #8]
   81cac:	2301      	movs	r3, #1
   81cae:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81cb2:	3630      	adds	r6, #48	; 0x30
   81cb4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   81cb8:	9305      	str	r3, [sp, #20]
   81cba:	e40d      	b.n	814d8 <_vfiprintf_r+0x2b0>
   81cbc:	aa0f      	add	r2, sp, #60	; 0x3c
   81cbe:	9904      	ldr	r1, [sp, #16]
   81cc0:	9806      	ldr	r0, [sp, #24]
   81cc2:	f7ff fa71 	bl	811a8 <__sprint_r.part.0>
   81cc6:	2800      	cmp	r0, #0
   81cc8:	f47f af65 	bne.w	81b96 <_vfiprintf_r+0x96e>
   81ccc:	9910      	ldr	r1, [sp, #64]	; 0x40
   81cce:	46d1      	mov	r9, sl
   81cd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81cd2:	1c48      	adds	r0, r1, #1
   81cd4:	e457      	b.n	81586 <_vfiprintf_r+0x35e>
   81cd6:	aa0f      	add	r2, sp, #60	; 0x3c
   81cd8:	9904      	ldr	r1, [sp, #16]
   81cda:	9806      	ldr	r0, [sp, #24]
   81cdc:	f7ff fa64 	bl	811a8 <__sprint_r.part.0>
   81ce0:	2800      	cmp	r0, #0
   81ce2:	f47f af58 	bne.w	81b96 <_vfiprintf_r+0x96e>
   81ce6:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ce8:	46d1      	mov	r9, sl
   81cea:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81cec:	1c48      	adds	r0, r1, #1
   81cee:	e644      	b.n	8197a <_vfiprintf_r+0x752>
   81cf0:	2a00      	cmp	r2, #0
   81cf2:	f040 8087 	bne.w	81e04 <_vfiprintf_r+0xbdc>
   81cf6:	2001      	movs	r0, #1
   81cf8:	4611      	mov	r1, r2
   81cfa:	46d1      	mov	r9, sl
   81cfc:	e641      	b.n	81982 <_vfiprintf_r+0x75a>
   81cfe:	aa0f      	add	r2, sp, #60	; 0x3c
   81d00:	9904      	ldr	r1, [sp, #16]
   81d02:	9806      	ldr	r0, [sp, #24]
   81d04:	f7ff fa50 	bl	811a8 <__sprint_r.part.0>
   81d08:	2800      	cmp	r0, #0
   81d0a:	f47f af44 	bne.w	81b96 <_vfiprintf_r+0x96e>
   81d0e:	9810      	ldr	r0, [sp, #64]	; 0x40
   81d10:	46d1      	mov	r9, sl
   81d12:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d14:	3001      	adds	r0, #1
   81d16:	e668      	b.n	819ea <_vfiprintf_r+0x7c2>
   81d18:	46cb      	mov	fp, r9
   81d1a:	e6d7      	b.n	81acc <_vfiprintf_r+0x8a4>
   81d1c:	9d07      	ldr	r5, [sp, #28]
   81d1e:	3507      	adds	r5, #7
   81d20:	f025 0507 	bic.w	r5, r5, #7
   81d24:	f105 0208 	add.w	r2, r5, #8
   81d28:	e9d5 0100 	ldrd	r0, r1, [r5]
   81d2c:	9207      	str	r2, [sp, #28]
   81d2e:	4606      	mov	r6, r0
   81d30:	460f      	mov	r7, r1
   81d32:	e4c5      	b.n	816c0 <_vfiprintf_r+0x498>
   81d34:	9d07      	ldr	r5, [sp, #28]
   81d36:	3507      	adds	r5, #7
   81d38:	f025 0207 	bic.w	r2, r5, #7
   81d3c:	f102 0108 	add.w	r1, r2, #8
   81d40:	e9d2 6700 	ldrd	r6, r7, [r2]
   81d44:	9107      	str	r1, [sp, #28]
   81d46:	2201      	movs	r2, #1
   81d48:	f7ff bba7 	b.w	8149a <_vfiprintf_r+0x272>
   81d4c:	9d07      	ldr	r5, [sp, #28]
   81d4e:	3507      	adds	r5, #7
   81d50:	f025 0207 	bic.w	r2, r5, #7
   81d54:	f102 0108 	add.w	r1, r2, #8
   81d58:	e9d2 6700 	ldrd	r6, r7, [r2]
   81d5c:	9107      	str	r1, [sp, #28]
   81d5e:	2200      	movs	r2, #0
   81d60:	f7ff bb9b 	b.w	8149a <_vfiprintf_r+0x272>
   81d64:	9d07      	ldr	r5, [sp, #28]
   81d66:	3507      	adds	r5, #7
   81d68:	f025 0107 	bic.w	r1, r5, #7
   81d6c:	f101 0008 	add.w	r0, r1, #8
   81d70:	9007      	str	r0, [sp, #28]
   81d72:	e9d1 6700 	ldrd	r6, r7, [r1]
   81d76:	e51c      	b.n	817b2 <_vfiprintf_r+0x58a>
   81d78:	46d3      	mov	fp, sl
   81d7a:	f7ff bbad 	b.w	814d8 <_vfiprintf_r+0x2b0>
   81d7e:	252d      	movs	r5, #45	; 0x2d
   81d80:	4276      	negs	r6, r6
   81d82:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81d86:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   81d8a:	2201      	movs	r2, #1
   81d8c:	f7ff bb8a 	b.w	814a4 <_vfiprintf_r+0x27c>
   81d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81d92:	b9b3      	cbnz	r3, 81dc2 <_vfiprintf_r+0xb9a>
   81d94:	4611      	mov	r1, r2
   81d96:	2001      	movs	r0, #1
   81d98:	46d1      	mov	r9, sl
   81d9a:	e5f2      	b.n	81982 <_vfiprintf_r+0x75a>
   81d9c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81da0:	f000 fdf4 	bl	8298c <__retarget_lock_release_recursive>
   81da4:	f04f 33ff 	mov.w	r3, #4294967295
   81da8:	9303      	str	r3, [sp, #12]
   81daa:	f7ff bb4c 	b.w	81446 <_vfiprintf_r+0x21e>
   81dae:	aa0f      	add	r2, sp, #60	; 0x3c
   81db0:	9904      	ldr	r1, [sp, #16]
   81db2:	9806      	ldr	r0, [sp, #24]
   81db4:	f7ff f9f8 	bl	811a8 <__sprint_r.part.0>
   81db8:	2800      	cmp	r0, #0
   81dba:	f47f aeec 	bne.w	81b96 <_vfiprintf_r+0x96e>
   81dbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81dc0:	e6aa      	b.n	81b18 <_vfiprintf_r+0x8f0>
   81dc2:	2202      	movs	r2, #2
   81dc4:	ab0e      	add	r3, sp, #56	; 0x38
   81dc6:	921d      	str	r2, [sp, #116]	; 0x74
   81dc8:	931c      	str	r3, [sp, #112]	; 0x70
   81dca:	2001      	movs	r0, #1
   81dcc:	46d1      	mov	r9, sl
   81dce:	e5d0      	b.n	81972 <_vfiprintf_r+0x74a>
   81dd0:	4d34      	ldr	r5, [pc, #208]	; (81ea4 <_vfiprintf_r+0xc7c>)
   81dd2:	e5fd      	b.n	819d0 <_vfiprintf_r+0x7a8>
   81dd4:	9a07      	ldr	r2, [sp, #28]
   81dd6:	4613      	mov	r3, r2
   81dd8:	3304      	adds	r3, #4
   81dda:	9307      	str	r3, [sp, #28]
   81ddc:	9b03      	ldr	r3, [sp, #12]
   81dde:	6811      	ldr	r1, [r2, #0]
   81de0:	17dd      	asrs	r5, r3, #31
   81de2:	461a      	mov	r2, r3
   81de4:	462b      	mov	r3, r5
   81de6:	e9c1 2300 	strd	r2, r3, [r1]
   81dea:	f7ff ba5a 	b.w	812a2 <_vfiprintf_r+0x7a>
   81dee:	4658      	mov	r0, fp
   81df0:	9507      	str	r5, [sp, #28]
   81df2:	9302      	str	r3, [sp, #8]
   81df4:	f001 fc3c 	bl	83670 <strlen>
   81df8:	2400      	movs	r4, #0
   81dfa:	9005      	str	r0, [sp, #20]
   81dfc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e00:	f7ff bb6a 	b.w	814d8 <_vfiprintf_r+0x2b0>
   81e04:	aa0f      	add	r2, sp, #60	; 0x3c
   81e06:	9904      	ldr	r1, [sp, #16]
   81e08:	9806      	ldr	r0, [sp, #24]
   81e0a:	f7ff f9cd 	bl	811a8 <__sprint_r.part.0>
   81e0e:	2800      	cmp	r0, #0
   81e10:	f47f aec1 	bne.w	81b96 <_vfiprintf_r+0x96e>
   81e14:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e16:	46d1      	mov	r9, sl
   81e18:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e1a:	1c48      	adds	r0, r1, #1
   81e1c:	e5b1      	b.n	81982 <_vfiprintf_r+0x75a>
   81e1e:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e22:	3101      	adds	r1, #1
   81e24:	4e20      	ldr	r6, [pc, #128]	; (81ea8 <_vfiprintf_r+0xc80>)
   81e26:	f7ff bb9c 	b.w	81562 <_vfiprintf_r+0x33a>
   81e2a:	2c06      	cmp	r4, #6
   81e2c:	bf28      	it	cs
   81e2e:	2406      	movcs	r4, #6
   81e30:	9507      	str	r5, [sp, #28]
   81e32:	9405      	str	r4, [sp, #20]
   81e34:	9401      	str	r4, [sp, #4]
   81e36:	f8df b074 	ldr.w	fp, [pc, #116]	; 81eac <_vfiprintf_r+0xc84>
   81e3a:	e4e3      	b.n	81804 <_vfiprintf_r+0x5dc>
   81e3c:	9810      	ldr	r0, [sp, #64]	; 0x40
   81e3e:	4e1a      	ldr	r6, [pc, #104]	; (81ea8 <_vfiprintf_r+0xc80>)
   81e40:	3001      	adds	r0, #1
   81e42:	e60e      	b.n	81a62 <_vfiprintf_r+0x83a>
   81e44:	4686      	mov	lr, r0
   81e46:	4d17      	ldr	r5, [pc, #92]	; (81ea4 <_vfiprintf_r+0xc7c>)
   81e48:	f7ff bbe2 	b.w	81610 <_vfiprintf_r+0x3e8>
   81e4c:	9405      	str	r4, [sp, #20]
   81e4e:	9507      	str	r5, [sp, #28]
   81e50:	9302      	str	r3, [sp, #8]
   81e52:	4604      	mov	r4, r0
   81e54:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e58:	f7ff bb3e 	b.w	814d8 <_vfiprintf_r+0x2b0>
   81e5c:	9806      	ldr	r0, [sp, #24]
   81e5e:	aa0f      	add	r2, sp, #60	; 0x3c
   81e60:	4659      	mov	r1, fp
   81e62:	f7ff f9a1 	bl	811a8 <__sprint_r.part.0>
   81e66:	2800      	cmp	r0, #0
   81e68:	f43f ae2e 	beq.w	81ac8 <_vfiprintf_r+0x8a0>
   81e6c:	e62e      	b.n	81acc <_vfiprintf_r+0x8a4>
   81e6e:	9907      	ldr	r1, [sp, #28]
   81e70:	f898 2001 	ldrb.w	r2, [r8, #1]
   81e74:	680c      	ldr	r4, [r1, #0]
   81e76:	3104      	adds	r1, #4
   81e78:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   81e7c:	46b8      	mov	r8, r7
   81e7e:	9107      	str	r1, [sp, #28]
   81e80:	f7ff ba44 	b.w	8130c <_vfiprintf_r+0xe4>
   81e84:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81e88:	e4a7      	b.n	817da <_vfiprintf_r+0x5b2>
   81e8a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81e8e:	e521      	b.n	818d4 <_vfiprintf_r+0x6ac>
   81e90:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81e94:	e47c      	b.n	81790 <_vfiprintf_r+0x568>
   81e96:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81e9a:	e43f      	b.n	8171c <_vfiprintf_r+0x4f4>
   81e9c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81ea0:	f7ff bbfa 	b.w	81698 <_vfiprintf_r+0x470>
   81ea4:	00083e08 	.word	0x00083e08
   81ea8:	00083df8 	.word	0x00083df8
   81eac:	00083df0 	.word	0x00083df0

00081eb0 <__sbprintf>:
   81eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81eb4:	460c      	mov	r4, r1
   81eb6:	f04f 0e00 	mov.w	lr, #0
   81eba:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81ebe:	4606      	mov	r6, r0
   81ec0:	4617      	mov	r7, r2
   81ec2:	4698      	mov	r8, r3
   81ec4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   81ec6:	89e3      	ldrh	r3, [r4, #14]
   81ec8:	8989      	ldrh	r1, [r1, #12]
   81eca:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81ece:	f021 0102 	bic.w	r1, r1, #2
   81ed2:	9219      	str	r2, [sp, #100]	; 0x64
   81ed4:	f8ad 300e 	strh.w	r3, [sp, #14]
   81ed8:	69e2      	ldr	r2, [r4, #28]
   81eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81edc:	f8ad 100c 	strh.w	r1, [sp, #12]
   81ee0:	a816      	add	r0, sp, #88	; 0x58
   81ee2:	a91a      	add	r1, sp, #104	; 0x68
   81ee4:	f8cd e018 	str.w	lr, [sp, #24]
   81ee8:	9207      	str	r2, [sp, #28]
   81eea:	9309      	str	r3, [sp, #36]	; 0x24
   81eec:	9100      	str	r1, [sp, #0]
   81eee:	9104      	str	r1, [sp, #16]
   81ef0:	9502      	str	r5, [sp, #8]
   81ef2:	9505      	str	r5, [sp, #20]
   81ef4:	f000 fd44 	bl	82980 <__retarget_lock_init_recursive>
   81ef8:	4643      	mov	r3, r8
   81efa:	463a      	mov	r2, r7
   81efc:	4669      	mov	r1, sp
   81efe:	4630      	mov	r0, r6
   81f00:	f7ff f992 	bl	81228 <_vfiprintf_r>
   81f04:	1e05      	subs	r5, r0, #0
   81f06:	db07      	blt.n	81f18 <__sbprintf+0x68>
   81f08:	4630      	mov	r0, r6
   81f0a:	4669      	mov	r1, sp
   81f0c:	f000 f924 	bl	82158 <_fflush_r>
   81f10:	2800      	cmp	r0, #0
   81f12:	bf18      	it	ne
   81f14:	f04f 35ff 	movne.w	r5, #4294967295
   81f18:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81f1c:	065b      	lsls	r3, r3, #25
   81f1e:	d503      	bpl.n	81f28 <__sbprintf+0x78>
   81f20:	89a3      	ldrh	r3, [r4, #12]
   81f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f26:	81a3      	strh	r3, [r4, #12]
   81f28:	9816      	ldr	r0, [sp, #88]	; 0x58
   81f2a:	f000 fd2b 	bl	82984 <__retarget_lock_close_recursive>
   81f2e:	4628      	mov	r0, r5
   81f30:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081f38 <__swsetup_r>:
   81f38:	b538      	push	{r3, r4, r5, lr}
   81f3a:	4b30      	ldr	r3, [pc, #192]	; (81ffc <__swsetup_r+0xc4>)
   81f3c:	4605      	mov	r5, r0
   81f3e:	6818      	ldr	r0, [r3, #0]
   81f40:	460c      	mov	r4, r1
   81f42:	b110      	cbz	r0, 81f4a <__swsetup_r+0x12>
   81f44:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81f46:	2b00      	cmp	r3, #0
   81f48:	d038      	beq.n	81fbc <__swsetup_r+0x84>
   81f4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81f4e:	b293      	uxth	r3, r2
   81f50:	0718      	lsls	r0, r3, #28
   81f52:	d50c      	bpl.n	81f6e <__swsetup_r+0x36>
   81f54:	6920      	ldr	r0, [r4, #16]
   81f56:	b1a8      	cbz	r0, 81f84 <__swsetup_r+0x4c>
   81f58:	f013 0201 	ands.w	r2, r3, #1
   81f5c:	d01e      	beq.n	81f9c <__swsetup_r+0x64>
   81f5e:	2200      	movs	r2, #0
   81f60:	6963      	ldr	r3, [r4, #20]
   81f62:	60a2      	str	r2, [r4, #8]
   81f64:	425b      	negs	r3, r3
   81f66:	61a3      	str	r3, [r4, #24]
   81f68:	b1f0      	cbz	r0, 81fa8 <__swsetup_r+0x70>
   81f6a:	2000      	movs	r0, #0
   81f6c:	bd38      	pop	{r3, r4, r5, pc}
   81f6e:	06d9      	lsls	r1, r3, #27
   81f70:	d53b      	bpl.n	81fea <__swsetup_r+0xb2>
   81f72:	0758      	lsls	r0, r3, #29
   81f74:	d425      	bmi.n	81fc2 <__swsetup_r+0x8a>
   81f76:	6920      	ldr	r0, [r4, #16]
   81f78:	f042 0308 	orr.w	r3, r2, #8
   81f7c:	81a3      	strh	r3, [r4, #12]
   81f7e:	b29b      	uxth	r3, r3
   81f80:	2800      	cmp	r0, #0
   81f82:	d1e9      	bne.n	81f58 <__swsetup_r+0x20>
   81f84:	f403 7220 	and.w	r2, r3, #640	; 0x280
   81f88:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81f8c:	d0e4      	beq.n	81f58 <__swsetup_r+0x20>
   81f8e:	4628      	mov	r0, r5
   81f90:	4621      	mov	r1, r4
   81f92:	f000 fd2b 	bl	829ec <__smakebuf_r>
   81f96:	89a3      	ldrh	r3, [r4, #12]
   81f98:	6920      	ldr	r0, [r4, #16]
   81f9a:	e7dd      	b.n	81f58 <__swsetup_r+0x20>
   81f9c:	0799      	lsls	r1, r3, #30
   81f9e:	bf58      	it	pl
   81fa0:	6962      	ldrpl	r2, [r4, #20]
   81fa2:	60a2      	str	r2, [r4, #8]
   81fa4:	2800      	cmp	r0, #0
   81fa6:	d1e0      	bne.n	81f6a <__swsetup_r+0x32>
   81fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81fac:	061a      	lsls	r2, r3, #24
   81fae:	d5dd      	bpl.n	81f6c <__swsetup_r+0x34>
   81fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81fb4:	81a3      	strh	r3, [r4, #12]
   81fb6:	f04f 30ff 	mov.w	r0, #4294967295
   81fba:	bd38      	pop	{r3, r4, r5, pc}
   81fbc:	f000 f924 	bl	82208 <__sinit>
   81fc0:	e7c3      	b.n	81f4a <__swsetup_r+0x12>
   81fc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81fc4:	b151      	cbz	r1, 81fdc <__swsetup_r+0xa4>
   81fc6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81fca:	4299      	cmp	r1, r3
   81fcc:	d004      	beq.n	81fd8 <__swsetup_r+0xa0>
   81fce:	4628      	mov	r0, r5
   81fd0:	f000 fa40 	bl	82454 <_free_r>
   81fd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81fd8:	2300      	movs	r3, #0
   81fda:	6323      	str	r3, [r4, #48]	; 0x30
   81fdc:	2300      	movs	r3, #0
   81fde:	6920      	ldr	r0, [r4, #16]
   81fe0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   81fe4:	e884 0009 	stmia.w	r4, {r0, r3}
   81fe8:	e7c6      	b.n	81f78 <__swsetup_r+0x40>
   81fea:	2309      	movs	r3, #9
   81fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   81ff0:	602b      	str	r3, [r5, #0]
   81ff2:	f04f 30ff 	mov.w	r0, #4294967295
   81ff6:	81a2      	strh	r2, [r4, #12]
   81ff8:	bd38      	pop	{r3, r4, r5, pc}
   81ffa:	bf00      	nop
   81ffc:	20070144 	.word	0x20070144

00082000 <register_fini>:
   82000:	4b02      	ldr	r3, [pc, #8]	; (8200c <register_fini+0xc>)
   82002:	b113      	cbz	r3, 8200a <register_fini+0xa>
   82004:	4802      	ldr	r0, [pc, #8]	; (82010 <register_fini+0x10>)
   82006:	f000 b805 	b.w	82014 <atexit>
   8200a:	4770      	bx	lr
   8200c:	00000000 	.word	0x00000000
   82010:	00082281 	.word	0x00082281

00082014 <atexit>:
   82014:	2300      	movs	r3, #0
   82016:	4601      	mov	r1, r0
   82018:	461a      	mov	r2, r3
   8201a:	4618      	mov	r0, r3
   8201c:	f001 bbfa 	b.w	83814 <__register_exitproc>

00082020 <__sflush_r>:
   82020:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82028:	b29a      	uxth	r2, r3
   8202a:	460d      	mov	r5, r1
   8202c:	0711      	lsls	r1, r2, #28
   8202e:	4680      	mov	r8, r0
   82030:	d43a      	bmi.n	820a8 <__sflush_r+0x88>
   82032:	686a      	ldr	r2, [r5, #4]
   82034:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82038:	2a00      	cmp	r2, #0
   8203a:	81ab      	strh	r3, [r5, #12]
   8203c:	dd70      	ble.n	82120 <__sflush_r+0x100>
   8203e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82040:	2c00      	cmp	r4, #0
   82042:	d04a      	beq.n	820da <__sflush_r+0xba>
   82044:	2200      	movs	r2, #0
   82046:	b29b      	uxth	r3, r3
   82048:	f8d8 6000 	ldr.w	r6, [r8]
   8204c:	f8c8 2000 	str.w	r2, [r8]
   82050:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82054:	d068      	beq.n	82128 <__sflush_r+0x108>
   82056:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82058:	075f      	lsls	r7, r3, #29
   8205a:	d505      	bpl.n	82068 <__sflush_r+0x48>
   8205c:	6869      	ldr	r1, [r5, #4]
   8205e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82060:	1a52      	subs	r2, r2, r1
   82062:	b10b      	cbz	r3, 82068 <__sflush_r+0x48>
   82064:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82066:	1ad2      	subs	r2, r2, r3
   82068:	2300      	movs	r3, #0
   8206a:	69e9      	ldr	r1, [r5, #28]
   8206c:	4640      	mov	r0, r8
   8206e:	47a0      	blx	r4
   82070:	1c44      	adds	r4, r0, #1
   82072:	d03d      	beq.n	820f0 <__sflush_r+0xd0>
   82074:	2100      	movs	r1, #0
   82076:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8207a:	692a      	ldr	r2, [r5, #16]
   8207c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82080:	81ab      	strh	r3, [r5, #12]
   82082:	04db      	lsls	r3, r3, #19
   82084:	6069      	str	r1, [r5, #4]
   82086:	602a      	str	r2, [r5, #0]
   82088:	d448      	bmi.n	8211c <__sflush_r+0xfc>
   8208a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8208c:	f8c8 6000 	str.w	r6, [r8]
   82090:	b319      	cbz	r1, 820da <__sflush_r+0xba>
   82092:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82096:	4299      	cmp	r1, r3
   82098:	d002      	beq.n	820a0 <__sflush_r+0x80>
   8209a:	4640      	mov	r0, r8
   8209c:	f000 f9da 	bl	82454 <_free_r>
   820a0:	2000      	movs	r0, #0
   820a2:	6328      	str	r0, [r5, #48]	; 0x30
   820a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820a8:	692e      	ldr	r6, [r5, #16]
   820aa:	b1b6      	cbz	r6, 820da <__sflush_r+0xba>
   820ac:	0791      	lsls	r1, r2, #30
   820ae:	bf18      	it	ne
   820b0:	2300      	movne	r3, #0
   820b2:	682c      	ldr	r4, [r5, #0]
   820b4:	bf08      	it	eq
   820b6:	696b      	ldreq	r3, [r5, #20]
   820b8:	602e      	str	r6, [r5, #0]
   820ba:	1ba4      	subs	r4, r4, r6
   820bc:	60ab      	str	r3, [r5, #8]
   820be:	e00a      	b.n	820d6 <__sflush_r+0xb6>
   820c0:	4623      	mov	r3, r4
   820c2:	4632      	mov	r2, r6
   820c4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   820c6:	69e9      	ldr	r1, [r5, #28]
   820c8:	4640      	mov	r0, r8
   820ca:	47b8      	blx	r7
   820cc:	2800      	cmp	r0, #0
   820ce:	eba4 0400 	sub.w	r4, r4, r0
   820d2:	4406      	add	r6, r0
   820d4:	dd04      	ble.n	820e0 <__sflush_r+0xc0>
   820d6:	2c00      	cmp	r4, #0
   820d8:	dcf2      	bgt.n	820c0 <__sflush_r+0xa0>
   820da:	2000      	movs	r0, #0
   820dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820e0:	89ab      	ldrh	r3, [r5, #12]
   820e2:	f04f 30ff 	mov.w	r0, #4294967295
   820e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   820ea:	81ab      	strh	r3, [r5, #12]
   820ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820f0:	f8d8 4000 	ldr.w	r4, [r8]
   820f4:	2c1d      	cmp	r4, #29
   820f6:	d8f3      	bhi.n	820e0 <__sflush_r+0xc0>
   820f8:	4b16      	ldr	r3, [pc, #88]	; (82154 <__sflush_r+0x134>)
   820fa:	40e3      	lsrs	r3, r4
   820fc:	43db      	mvns	r3, r3
   820fe:	f013 0301 	ands.w	r3, r3, #1
   82102:	d1ed      	bne.n	820e0 <__sflush_r+0xc0>
   82104:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82108:	6929      	ldr	r1, [r5, #16]
   8210a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8210e:	81aa      	strh	r2, [r5, #12]
   82110:	04d2      	lsls	r2, r2, #19
   82112:	606b      	str	r3, [r5, #4]
   82114:	6029      	str	r1, [r5, #0]
   82116:	d5b8      	bpl.n	8208a <__sflush_r+0x6a>
   82118:	2c00      	cmp	r4, #0
   8211a:	d1b6      	bne.n	8208a <__sflush_r+0x6a>
   8211c:	6528      	str	r0, [r5, #80]	; 0x50
   8211e:	e7b4      	b.n	8208a <__sflush_r+0x6a>
   82120:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82122:	2a00      	cmp	r2, #0
   82124:	dc8b      	bgt.n	8203e <__sflush_r+0x1e>
   82126:	e7d8      	b.n	820da <__sflush_r+0xba>
   82128:	2301      	movs	r3, #1
   8212a:	69e9      	ldr	r1, [r5, #28]
   8212c:	4640      	mov	r0, r8
   8212e:	47a0      	blx	r4
   82130:	1c43      	adds	r3, r0, #1
   82132:	4602      	mov	r2, r0
   82134:	d002      	beq.n	8213c <__sflush_r+0x11c>
   82136:	89ab      	ldrh	r3, [r5, #12]
   82138:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8213a:	e78d      	b.n	82058 <__sflush_r+0x38>
   8213c:	f8d8 3000 	ldr.w	r3, [r8]
   82140:	2b00      	cmp	r3, #0
   82142:	d0f8      	beq.n	82136 <__sflush_r+0x116>
   82144:	2b1d      	cmp	r3, #29
   82146:	d001      	beq.n	8214c <__sflush_r+0x12c>
   82148:	2b16      	cmp	r3, #22
   8214a:	d1c9      	bne.n	820e0 <__sflush_r+0xc0>
   8214c:	f8c8 6000 	str.w	r6, [r8]
   82150:	e7c3      	b.n	820da <__sflush_r+0xba>
   82152:	bf00      	nop
   82154:	20400001 	.word	0x20400001

00082158 <_fflush_r>:
   82158:	b538      	push	{r3, r4, r5, lr}
   8215a:	460d      	mov	r5, r1
   8215c:	4604      	mov	r4, r0
   8215e:	b108      	cbz	r0, 82164 <_fflush_r+0xc>
   82160:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82162:	b1bb      	cbz	r3, 82194 <_fflush_r+0x3c>
   82164:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82168:	b188      	cbz	r0, 8218e <_fflush_r+0x36>
   8216a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8216c:	07db      	lsls	r3, r3, #31
   8216e:	d401      	bmi.n	82174 <_fflush_r+0x1c>
   82170:	0581      	lsls	r1, r0, #22
   82172:	d517      	bpl.n	821a4 <_fflush_r+0x4c>
   82174:	4620      	mov	r0, r4
   82176:	4629      	mov	r1, r5
   82178:	f7ff ff52 	bl	82020 <__sflush_r>
   8217c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8217e:	4604      	mov	r4, r0
   82180:	07da      	lsls	r2, r3, #31
   82182:	d402      	bmi.n	8218a <_fflush_r+0x32>
   82184:	89ab      	ldrh	r3, [r5, #12]
   82186:	059b      	lsls	r3, r3, #22
   82188:	d507      	bpl.n	8219a <_fflush_r+0x42>
   8218a:	4620      	mov	r0, r4
   8218c:	bd38      	pop	{r3, r4, r5, pc}
   8218e:	4604      	mov	r4, r0
   82190:	4620      	mov	r0, r4
   82192:	bd38      	pop	{r3, r4, r5, pc}
   82194:	f000 f838 	bl	82208 <__sinit>
   82198:	e7e4      	b.n	82164 <_fflush_r+0xc>
   8219a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8219c:	f000 fbf6 	bl	8298c <__retarget_lock_release_recursive>
   821a0:	4620      	mov	r0, r4
   821a2:	bd38      	pop	{r3, r4, r5, pc}
   821a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   821a6:	f000 fbef 	bl	82988 <__retarget_lock_acquire_recursive>
   821aa:	e7e3      	b.n	82174 <_fflush_r+0x1c>

000821ac <_cleanup_r>:
   821ac:	4901      	ldr	r1, [pc, #4]	; (821b4 <_cleanup_r+0x8>)
   821ae:	f000 bbb1 	b.w	82914 <_fwalk_reent>
   821b2:	bf00      	nop
   821b4:	000838fd 	.word	0x000838fd

000821b8 <std.isra.0>:
   821b8:	2300      	movs	r3, #0
   821ba:	b510      	push	{r4, lr}
   821bc:	4604      	mov	r4, r0
   821be:	8181      	strh	r1, [r0, #12]
   821c0:	81c2      	strh	r2, [r0, #14]
   821c2:	6003      	str	r3, [r0, #0]
   821c4:	6043      	str	r3, [r0, #4]
   821c6:	6083      	str	r3, [r0, #8]
   821c8:	6643      	str	r3, [r0, #100]	; 0x64
   821ca:	6103      	str	r3, [r0, #16]
   821cc:	6143      	str	r3, [r0, #20]
   821ce:	6183      	str	r3, [r0, #24]
   821d0:	4619      	mov	r1, r3
   821d2:	2208      	movs	r2, #8
   821d4:	305c      	adds	r0, #92	; 0x5c
   821d6:	f7fe fec9 	bl	80f6c <memset>
   821da:	4807      	ldr	r0, [pc, #28]	; (821f8 <std.isra.0+0x40>)
   821dc:	4907      	ldr	r1, [pc, #28]	; (821fc <std.isra.0+0x44>)
   821de:	4a08      	ldr	r2, [pc, #32]	; (82200 <std.isra.0+0x48>)
   821e0:	4b08      	ldr	r3, [pc, #32]	; (82204 <std.isra.0+0x4c>)
   821e2:	6220      	str	r0, [r4, #32]
   821e4:	61e4      	str	r4, [r4, #28]
   821e6:	6261      	str	r1, [r4, #36]	; 0x24
   821e8:	62a2      	str	r2, [r4, #40]	; 0x28
   821ea:	62e3      	str	r3, [r4, #44]	; 0x2c
   821ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
   821f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   821f4:	f000 bbc4 	b.w	82980 <__retarget_lock_init_recursive>
   821f8:	000835e9 	.word	0x000835e9
   821fc:	0008360d 	.word	0x0008360d
   82200:	00083649 	.word	0x00083649
   82204:	00083669 	.word	0x00083669

00082208 <__sinit>:
   82208:	b510      	push	{r4, lr}
   8220a:	4604      	mov	r4, r0
   8220c:	4814      	ldr	r0, [pc, #80]	; (82260 <__sinit+0x58>)
   8220e:	f000 fbbb 	bl	82988 <__retarget_lock_acquire_recursive>
   82212:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82214:	b9fa      	cbnz	r2, 82256 <__sinit+0x4e>
   82216:	2003      	movs	r0, #3
   82218:	4912      	ldr	r1, [pc, #72]	; (82264 <__sinit+0x5c>)
   8221a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8221e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   82222:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82226:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8222a:	63e1      	str	r1, [r4, #60]	; 0x3c
   8222c:	6860      	ldr	r0, [r4, #4]
   8222e:	2104      	movs	r1, #4
   82230:	f7ff ffc2 	bl	821b8 <std.isra.0>
   82234:	68a0      	ldr	r0, [r4, #8]
   82236:	2201      	movs	r2, #1
   82238:	2109      	movs	r1, #9
   8223a:	f7ff ffbd 	bl	821b8 <std.isra.0>
   8223e:	68e0      	ldr	r0, [r4, #12]
   82240:	2202      	movs	r2, #2
   82242:	2112      	movs	r1, #18
   82244:	f7ff ffb8 	bl	821b8 <std.isra.0>
   82248:	2301      	movs	r3, #1
   8224a:	4805      	ldr	r0, [pc, #20]	; (82260 <__sinit+0x58>)
   8224c:	63a3      	str	r3, [r4, #56]	; 0x38
   8224e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82252:	f000 bb9b 	b.w	8298c <__retarget_lock_release_recursive>
   82256:	4802      	ldr	r0, [pc, #8]	; (82260 <__sinit+0x58>)
   82258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8225c:	f000 bb96 	b.w	8298c <__retarget_lock_release_recursive>
   82260:	20070c70 	.word	0x20070c70
   82264:	000821ad 	.word	0x000821ad

00082268 <__sfp_lock_acquire>:
   82268:	4801      	ldr	r0, [pc, #4]	; (82270 <__sfp_lock_acquire+0x8>)
   8226a:	f000 bb8d 	b.w	82988 <__retarget_lock_acquire_recursive>
   8226e:	bf00      	nop
   82270:	20070c84 	.word	0x20070c84

00082274 <__sfp_lock_release>:
   82274:	4801      	ldr	r0, [pc, #4]	; (8227c <__sfp_lock_release+0x8>)
   82276:	f000 bb89 	b.w	8298c <__retarget_lock_release_recursive>
   8227a:	bf00      	nop
   8227c:	20070c84 	.word	0x20070c84

00082280 <__libc_fini_array>:
   82280:	b538      	push	{r3, r4, r5, lr}
   82282:	4c0a      	ldr	r4, [pc, #40]	; (822ac <__libc_fini_array+0x2c>)
   82284:	4d0a      	ldr	r5, [pc, #40]	; (822b0 <__libc_fini_array+0x30>)
   82286:	1b64      	subs	r4, r4, r5
   82288:	10a4      	asrs	r4, r4, #2
   8228a:	d00a      	beq.n	822a2 <__libc_fini_array+0x22>
   8228c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82290:	3b01      	subs	r3, #1
   82292:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82296:	3c01      	subs	r4, #1
   82298:	f855 3904 	ldr.w	r3, [r5], #-4
   8229c:	4798      	blx	r3
   8229e:	2c00      	cmp	r4, #0
   822a0:	d1f9      	bne.n	82296 <__libc_fini_array+0x16>
   822a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   822a6:	f001 be4b 	b.w	83f40 <_fini>
   822aa:	bf00      	nop
   822ac:	00083f50 	.word	0x00083f50
   822b0:	00083f4c 	.word	0x00083f4c

000822b4 <__fputwc>:
   822b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   822b8:	b083      	sub	sp, #12
   822ba:	4607      	mov	r7, r0
   822bc:	4688      	mov	r8, r1
   822be:	4614      	mov	r4, r2
   822c0:	f000 fb50 	bl	82964 <__locale_mb_cur_max>
   822c4:	2801      	cmp	r0, #1
   822c6:	d033      	beq.n	82330 <__fputwc+0x7c>
   822c8:	4642      	mov	r2, r8
   822ca:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   822ce:	a901      	add	r1, sp, #4
   822d0:	4638      	mov	r0, r7
   822d2:	f001 fa53 	bl	8377c <_wcrtomb_r>
   822d6:	1c42      	adds	r2, r0, #1
   822d8:	4606      	mov	r6, r0
   822da:	d022      	beq.n	82322 <__fputwc+0x6e>
   822dc:	b390      	cbz	r0, 82344 <__fputwc+0x90>
   822de:	f89d 1004 	ldrb.w	r1, [sp, #4]
   822e2:	2500      	movs	r5, #0
   822e4:	f10d 0904 	add.w	r9, sp, #4
   822e8:	e008      	b.n	822fc <__fputwc+0x48>
   822ea:	6823      	ldr	r3, [r4, #0]
   822ec:	1c5a      	adds	r2, r3, #1
   822ee:	6022      	str	r2, [r4, #0]
   822f0:	7019      	strb	r1, [r3, #0]
   822f2:	3501      	adds	r5, #1
   822f4:	42b5      	cmp	r5, r6
   822f6:	d225      	bcs.n	82344 <__fputwc+0x90>
   822f8:	f815 1009 	ldrb.w	r1, [r5, r9]
   822fc:	68a3      	ldr	r3, [r4, #8]
   822fe:	3b01      	subs	r3, #1
   82300:	2b00      	cmp	r3, #0
   82302:	60a3      	str	r3, [r4, #8]
   82304:	daf1      	bge.n	822ea <__fputwc+0x36>
   82306:	69a2      	ldr	r2, [r4, #24]
   82308:	4293      	cmp	r3, r2
   8230a:	db01      	blt.n	82310 <__fputwc+0x5c>
   8230c:	290a      	cmp	r1, #10
   8230e:	d1ec      	bne.n	822ea <__fputwc+0x36>
   82310:	4622      	mov	r2, r4
   82312:	4638      	mov	r0, r7
   82314:	f001 f9da 	bl	836cc <__swbuf_r>
   82318:	1c43      	adds	r3, r0, #1
   8231a:	d1ea      	bne.n	822f2 <__fputwc+0x3e>
   8231c:	b003      	add	sp, #12
   8231e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82322:	89a3      	ldrh	r3, [r4, #12]
   82324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82328:	81a3      	strh	r3, [r4, #12]
   8232a:	b003      	add	sp, #12
   8232c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82330:	f108 33ff 	add.w	r3, r8, #4294967295
   82334:	2bfe      	cmp	r3, #254	; 0xfe
   82336:	d8c7      	bhi.n	822c8 <__fputwc+0x14>
   82338:	fa5f f188 	uxtb.w	r1, r8
   8233c:	4606      	mov	r6, r0
   8233e:	f88d 1004 	strb.w	r1, [sp, #4]
   82342:	e7ce      	b.n	822e2 <__fputwc+0x2e>
   82344:	4640      	mov	r0, r8
   82346:	b003      	add	sp, #12
   82348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008234c <_fputwc_r>:
   8234c:	b530      	push	{r4, r5, lr}
   8234e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82350:	4614      	mov	r4, r2
   82352:	f013 0f01 	tst.w	r3, #1
   82356:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8235a:	b083      	sub	sp, #12
   8235c:	4605      	mov	r5, r0
   8235e:	b29a      	uxth	r2, r3
   82360:	d101      	bne.n	82366 <_fputwc_r+0x1a>
   82362:	0590      	lsls	r0, r2, #22
   82364:	d51c      	bpl.n	823a0 <_fputwc_r+0x54>
   82366:	0490      	lsls	r0, r2, #18
   82368:	d406      	bmi.n	82378 <_fputwc_r+0x2c>
   8236a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8236c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82370:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82374:	81a3      	strh	r3, [r4, #12]
   82376:	6662      	str	r2, [r4, #100]	; 0x64
   82378:	4628      	mov	r0, r5
   8237a:	4622      	mov	r2, r4
   8237c:	f7ff ff9a 	bl	822b4 <__fputwc>
   82380:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82382:	4605      	mov	r5, r0
   82384:	07da      	lsls	r2, r3, #31
   82386:	d402      	bmi.n	8238e <_fputwc_r+0x42>
   82388:	89a3      	ldrh	r3, [r4, #12]
   8238a:	059b      	lsls	r3, r3, #22
   8238c:	d502      	bpl.n	82394 <_fputwc_r+0x48>
   8238e:	4628      	mov	r0, r5
   82390:	b003      	add	sp, #12
   82392:	bd30      	pop	{r4, r5, pc}
   82394:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82396:	f000 faf9 	bl	8298c <__retarget_lock_release_recursive>
   8239a:	4628      	mov	r0, r5
   8239c:	b003      	add	sp, #12
   8239e:	bd30      	pop	{r4, r5, pc}
   823a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   823a2:	9101      	str	r1, [sp, #4]
   823a4:	f000 faf0 	bl	82988 <__retarget_lock_acquire_recursive>
   823a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   823ac:	9901      	ldr	r1, [sp, #4]
   823ae:	b29a      	uxth	r2, r3
   823b0:	e7d9      	b.n	82366 <_fputwc_r+0x1a>
   823b2:	bf00      	nop

000823b4 <_malloc_trim_r>:
   823b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   823b6:	460c      	mov	r4, r1
   823b8:	4f23      	ldr	r7, [pc, #140]	; (82448 <_malloc_trim_r+0x94>)
   823ba:	4606      	mov	r6, r0
   823bc:	f000 ff40 	bl	83240 <__malloc_lock>
   823c0:	68bb      	ldr	r3, [r7, #8]
   823c2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   823c6:	685d      	ldr	r5, [r3, #4]
   823c8:	310f      	adds	r1, #15
   823ca:	f025 0503 	bic.w	r5, r5, #3
   823ce:	4429      	add	r1, r5
   823d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   823d4:	f021 010f 	bic.w	r1, r1, #15
   823d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   823dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   823e0:	db07      	blt.n	823f2 <_malloc_trim_r+0x3e>
   823e2:	2100      	movs	r1, #0
   823e4:	4630      	mov	r0, r6
   823e6:	f001 f8ed 	bl	835c4 <_sbrk_r>
   823ea:	68bb      	ldr	r3, [r7, #8]
   823ec:	442b      	add	r3, r5
   823ee:	4298      	cmp	r0, r3
   823f0:	d004      	beq.n	823fc <_malloc_trim_r+0x48>
   823f2:	4630      	mov	r0, r6
   823f4:	f000 ff2a 	bl	8324c <__malloc_unlock>
   823f8:	2000      	movs	r0, #0
   823fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   823fc:	4261      	negs	r1, r4
   823fe:	4630      	mov	r0, r6
   82400:	f001 f8e0 	bl	835c4 <_sbrk_r>
   82404:	3001      	adds	r0, #1
   82406:	d00d      	beq.n	82424 <_malloc_trim_r+0x70>
   82408:	4b10      	ldr	r3, [pc, #64]	; (8244c <_malloc_trim_r+0x98>)
   8240a:	68ba      	ldr	r2, [r7, #8]
   8240c:	6819      	ldr	r1, [r3, #0]
   8240e:	1b2d      	subs	r5, r5, r4
   82410:	f045 0501 	orr.w	r5, r5, #1
   82414:	4630      	mov	r0, r6
   82416:	1b09      	subs	r1, r1, r4
   82418:	6055      	str	r5, [r2, #4]
   8241a:	6019      	str	r1, [r3, #0]
   8241c:	f000 ff16 	bl	8324c <__malloc_unlock>
   82420:	2001      	movs	r0, #1
   82422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82424:	2100      	movs	r1, #0
   82426:	4630      	mov	r0, r6
   82428:	f001 f8cc 	bl	835c4 <_sbrk_r>
   8242c:	68ba      	ldr	r2, [r7, #8]
   8242e:	1a83      	subs	r3, r0, r2
   82430:	2b0f      	cmp	r3, #15
   82432:	ddde      	ble.n	823f2 <_malloc_trim_r+0x3e>
   82434:	4c06      	ldr	r4, [pc, #24]	; (82450 <_malloc_trim_r+0x9c>)
   82436:	4905      	ldr	r1, [pc, #20]	; (8244c <_malloc_trim_r+0x98>)
   82438:	6824      	ldr	r4, [r4, #0]
   8243a:	f043 0301 	orr.w	r3, r3, #1
   8243e:	1b00      	subs	r0, r0, r4
   82440:	6053      	str	r3, [r2, #4]
   82442:	6008      	str	r0, [r1, #0]
   82444:	e7d5      	b.n	823f2 <_malloc_trim_r+0x3e>
   82446:	bf00      	nop
   82448:	200706e0 	.word	0x200706e0
   8244c:	20070c24 	.word	0x20070c24
   82450:	20070ae8 	.word	0x20070ae8

00082454 <_free_r>:
   82454:	2900      	cmp	r1, #0
   82456:	d044      	beq.n	824e2 <_free_r+0x8e>
   82458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8245c:	460d      	mov	r5, r1
   8245e:	4680      	mov	r8, r0
   82460:	f000 feee 	bl	83240 <__malloc_lock>
   82464:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82468:	4969      	ldr	r1, [pc, #420]	; (82610 <_free_r+0x1bc>)
   8246a:	f1a5 0408 	sub.w	r4, r5, #8
   8246e:	f027 0301 	bic.w	r3, r7, #1
   82472:	18e2      	adds	r2, r4, r3
   82474:	688e      	ldr	r6, [r1, #8]
   82476:	6850      	ldr	r0, [r2, #4]
   82478:	42b2      	cmp	r2, r6
   8247a:	f020 0003 	bic.w	r0, r0, #3
   8247e:	d05e      	beq.n	8253e <_free_r+0xea>
   82480:	07fe      	lsls	r6, r7, #31
   82482:	6050      	str	r0, [r2, #4]
   82484:	d40b      	bmi.n	8249e <_free_r+0x4a>
   82486:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8248a:	f101 0e08 	add.w	lr, r1, #8
   8248e:	1be4      	subs	r4, r4, r7
   82490:	68a5      	ldr	r5, [r4, #8]
   82492:	443b      	add	r3, r7
   82494:	4575      	cmp	r5, lr
   82496:	d06d      	beq.n	82574 <_free_r+0x120>
   82498:	68e7      	ldr	r7, [r4, #12]
   8249a:	60ef      	str	r7, [r5, #12]
   8249c:	60bd      	str	r5, [r7, #8]
   8249e:	1815      	adds	r5, r2, r0
   824a0:	686d      	ldr	r5, [r5, #4]
   824a2:	07ed      	lsls	r5, r5, #31
   824a4:	d53e      	bpl.n	82524 <_free_r+0xd0>
   824a6:	f043 0201 	orr.w	r2, r3, #1
   824aa:	6062      	str	r2, [r4, #4]
   824ac:	50e3      	str	r3, [r4, r3]
   824ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   824b2:	d217      	bcs.n	824e4 <_free_r+0x90>
   824b4:	2201      	movs	r2, #1
   824b6:	08db      	lsrs	r3, r3, #3
   824b8:	1098      	asrs	r0, r3, #2
   824ba:	684d      	ldr	r5, [r1, #4]
   824bc:	4413      	add	r3, r2
   824be:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   824c2:	4082      	lsls	r2, r0
   824c4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   824c8:	432a      	orrs	r2, r5
   824ca:	3808      	subs	r0, #8
   824cc:	60e0      	str	r0, [r4, #12]
   824ce:	60a7      	str	r7, [r4, #8]
   824d0:	604a      	str	r2, [r1, #4]
   824d2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   824d6:	60fc      	str	r4, [r7, #12]
   824d8:	4640      	mov	r0, r8
   824da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   824de:	f000 beb5 	b.w	8324c <__malloc_unlock>
   824e2:	4770      	bx	lr
   824e4:	0a5a      	lsrs	r2, r3, #9
   824e6:	2a04      	cmp	r2, #4
   824e8:	d852      	bhi.n	82590 <_free_r+0x13c>
   824ea:	099a      	lsrs	r2, r3, #6
   824ec:	f102 0739 	add.w	r7, r2, #57	; 0x39
   824f0:	00ff      	lsls	r7, r7, #3
   824f2:	f102 0538 	add.w	r5, r2, #56	; 0x38
   824f6:	19c8      	adds	r0, r1, r7
   824f8:	59ca      	ldr	r2, [r1, r7]
   824fa:	3808      	subs	r0, #8
   824fc:	4290      	cmp	r0, r2
   824fe:	d04f      	beq.n	825a0 <_free_r+0x14c>
   82500:	6851      	ldr	r1, [r2, #4]
   82502:	f021 0103 	bic.w	r1, r1, #3
   82506:	428b      	cmp	r3, r1
   82508:	d232      	bcs.n	82570 <_free_r+0x11c>
   8250a:	6892      	ldr	r2, [r2, #8]
   8250c:	4290      	cmp	r0, r2
   8250e:	d1f7      	bne.n	82500 <_free_r+0xac>
   82510:	68c3      	ldr	r3, [r0, #12]
   82512:	60a0      	str	r0, [r4, #8]
   82514:	60e3      	str	r3, [r4, #12]
   82516:	609c      	str	r4, [r3, #8]
   82518:	60c4      	str	r4, [r0, #12]
   8251a:	4640      	mov	r0, r8
   8251c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82520:	f000 be94 	b.w	8324c <__malloc_unlock>
   82524:	6895      	ldr	r5, [r2, #8]
   82526:	4f3b      	ldr	r7, [pc, #236]	; (82614 <_free_r+0x1c0>)
   82528:	4403      	add	r3, r0
   8252a:	42bd      	cmp	r5, r7
   8252c:	d040      	beq.n	825b0 <_free_r+0x15c>
   8252e:	68d0      	ldr	r0, [r2, #12]
   82530:	f043 0201 	orr.w	r2, r3, #1
   82534:	60e8      	str	r0, [r5, #12]
   82536:	6085      	str	r5, [r0, #8]
   82538:	6062      	str	r2, [r4, #4]
   8253a:	50e3      	str	r3, [r4, r3]
   8253c:	e7b7      	b.n	824ae <_free_r+0x5a>
   8253e:	07ff      	lsls	r7, r7, #31
   82540:	4403      	add	r3, r0
   82542:	d407      	bmi.n	82554 <_free_r+0x100>
   82544:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82548:	1b64      	subs	r4, r4, r5
   8254a:	68e2      	ldr	r2, [r4, #12]
   8254c:	68a0      	ldr	r0, [r4, #8]
   8254e:	442b      	add	r3, r5
   82550:	60c2      	str	r2, [r0, #12]
   82552:	6090      	str	r0, [r2, #8]
   82554:	4a30      	ldr	r2, [pc, #192]	; (82618 <_free_r+0x1c4>)
   82556:	f043 0001 	orr.w	r0, r3, #1
   8255a:	6812      	ldr	r2, [r2, #0]
   8255c:	6060      	str	r0, [r4, #4]
   8255e:	4293      	cmp	r3, r2
   82560:	608c      	str	r4, [r1, #8]
   82562:	d3b9      	bcc.n	824d8 <_free_r+0x84>
   82564:	4b2d      	ldr	r3, [pc, #180]	; (8261c <_free_r+0x1c8>)
   82566:	4640      	mov	r0, r8
   82568:	6819      	ldr	r1, [r3, #0]
   8256a:	f7ff ff23 	bl	823b4 <_malloc_trim_r>
   8256e:	e7b3      	b.n	824d8 <_free_r+0x84>
   82570:	4610      	mov	r0, r2
   82572:	e7cd      	b.n	82510 <_free_r+0xbc>
   82574:	1811      	adds	r1, r2, r0
   82576:	6849      	ldr	r1, [r1, #4]
   82578:	07c9      	lsls	r1, r1, #31
   8257a:	d444      	bmi.n	82606 <_free_r+0x1b2>
   8257c:	6891      	ldr	r1, [r2, #8]
   8257e:	4403      	add	r3, r0
   82580:	68d2      	ldr	r2, [r2, #12]
   82582:	f043 0001 	orr.w	r0, r3, #1
   82586:	60ca      	str	r2, [r1, #12]
   82588:	6091      	str	r1, [r2, #8]
   8258a:	6060      	str	r0, [r4, #4]
   8258c:	50e3      	str	r3, [r4, r3]
   8258e:	e7a3      	b.n	824d8 <_free_r+0x84>
   82590:	2a14      	cmp	r2, #20
   82592:	d816      	bhi.n	825c2 <_free_r+0x16e>
   82594:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82598:	00ff      	lsls	r7, r7, #3
   8259a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8259e:	e7aa      	b.n	824f6 <_free_r+0xa2>
   825a0:	2301      	movs	r3, #1
   825a2:	10aa      	asrs	r2, r5, #2
   825a4:	684d      	ldr	r5, [r1, #4]
   825a6:	4093      	lsls	r3, r2
   825a8:	432b      	orrs	r3, r5
   825aa:	604b      	str	r3, [r1, #4]
   825ac:	4603      	mov	r3, r0
   825ae:	e7b0      	b.n	82512 <_free_r+0xbe>
   825b0:	f043 0201 	orr.w	r2, r3, #1
   825b4:	614c      	str	r4, [r1, #20]
   825b6:	610c      	str	r4, [r1, #16]
   825b8:	60e5      	str	r5, [r4, #12]
   825ba:	60a5      	str	r5, [r4, #8]
   825bc:	6062      	str	r2, [r4, #4]
   825be:	50e3      	str	r3, [r4, r3]
   825c0:	e78a      	b.n	824d8 <_free_r+0x84>
   825c2:	2a54      	cmp	r2, #84	; 0x54
   825c4:	d806      	bhi.n	825d4 <_free_r+0x180>
   825c6:	0b1a      	lsrs	r2, r3, #12
   825c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   825cc:	00ff      	lsls	r7, r7, #3
   825ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   825d2:	e790      	b.n	824f6 <_free_r+0xa2>
   825d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   825d8:	d806      	bhi.n	825e8 <_free_r+0x194>
   825da:	0bda      	lsrs	r2, r3, #15
   825dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
   825e0:	00ff      	lsls	r7, r7, #3
   825e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   825e6:	e786      	b.n	824f6 <_free_r+0xa2>
   825e8:	f240 5054 	movw	r0, #1364	; 0x554
   825ec:	4282      	cmp	r2, r0
   825ee:	d806      	bhi.n	825fe <_free_r+0x1aa>
   825f0:	0c9a      	lsrs	r2, r3, #18
   825f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   825f6:	00ff      	lsls	r7, r7, #3
   825f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   825fc:	e77b      	b.n	824f6 <_free_r+0xa2>
   825fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82602:	257e      	movs	r5, #126	; 0x7e
   82604:	e777      	b.n	824f6 <_free_r+0xa2>
   82606:	f043 0101 	orr.w	r1, r3, #1
   8260a:	6061      	str	r1, [r4, #4]
   8260c:	6013      	str	r3, [r2, #0]
   8260e:	e763      	b.n	824d8 <_free_r+0x84>
   82610:	200706e0 	.word	0x200706e0
   82614:	200706e8 	.word	0x200706e8
   82618:	20070aec 	.word	0x20070aec
   8261c:	20070c54 	.word	0x20070c54

00082620 <__sfvwrite_r>:
   82620:	6893      	ldr	r3, [r2, #8]
   82622:	2b00      	cmp	r3, #0
   82624:	d071      	beq.n	8270a <__sfvwrite_r+0xea>
   82626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8262a:	898b      	ldrh	r3, [r1, #12]
   8262c:	b083      	sub	sp, #12
   8262e:	460c      	mov	r4, r1
   82630:	0719      	lsls	r1, r3, #28
   82632:	9000      	str	r0, [sp, #0]
   82634:	4616      	mov	r6, r2
   82636:	d525      	bpl.n	82684 <__sfvwrite_r+0x64>
   82638:	6922      	ldr	r2, [r4, #16]
   8263a:	b31a      	cbz	r2, 82684 <__sfvwrite_r+0x64>
   8263c:	f013 0002 	ands.w	r0, r3, #2
   82640:	6835      	ldr	r5, [r6, #0]
   82642:	d02b      	beq.n	8269c <__sfvwrite_r+0x7c>
   82644:	f04f 0900 	mov.w	r9, #0
   82648:	46b0      	mov	r8, r6
   8264a:	464f      	mov	r7, r9
   8264c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82910 <__sfvwrite_r+0x2f0>
   82650:	2f00      	cmp	r7, #0
   82652:	d055      	beq.n	82700 <__sfvwrite_r+0xe0>
   82654:	4557      	cmp	r7, sl
   82656:	463b      	mov	r3, r7
   82658:	464a      	mov	r2, r9
   8265a:	bf28      	it	cs
   8265c:	4653      	movcs	r3, sl
   8265e:	69e1      	ldr	r1, [r4, #28]
   82660:	9800      	ldr	r0, [sp, #0]
   82662:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82664:	47b0      	blx	r6
   82666:	2800      	cmp	r0, #0
   82668:	dd56      	ble.n	82718 <__sfvwrite_r+0xf8>
   8266a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8266e:	4481      	add	r9, r0
   82670:	1a1b      	subs	r3, r3, r0
   82672:	1a3f      	subs	r7, r7, r0
   82674:	f8c8 3008 	str.w	r3, [r8, #8]
   82678:	2b00      	cmp	r3, #0
   8267a:	d1e9      	bne.n	82650 <__sfvwrite_r+0x30>
   8267c:	2000      	movs	r0, #0
   8267e:	b003      	add	sp, #12
   82680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82684:	4621      	mov	r1, r4
   82686:	9800      	ldr	r0, [sp, #0]
   82688:	f7ff fc56 	bl	81f38 <__swsetup_r>
   8268c:	2800      	cmp	r0, #0
   8268e:	f040 8135 	bne.w	828fc <__sfvwrite_r+0x2dc>
   82692:	89a3      	ldrh	r3, [r4, #12]
   82694:	6835      	ldr	r5, [r6, #0]
   82696:	f013 0002 	ands.w	r0, r3, #2
   8269a:	d1d3      	bne.n	82644 <__sfvwrite_r+0x24>
   8269c:	f013 0901 	ands.w	r9, r3, #1
   826a0:	d144      	bne.n	8272c <__sfvwrite_r+0x10c>
   826a2:	464f      	mov	r7, r9
   826a4:	9601      	str	r6, [sp, #4]
   826a6:	b337      	cbz	r7, 826f6 <__sfvwrite_r+0xd6>
   826a8:	059a      	lsls	r2, r3, #22
   826aa:	f8d4 8008 	ldr.w	r8, [r4, #8]
   826ae:	f140 8085 	bpl.w	827bc <__sfvwrite_r+0x19c>
   826b2:	4547      	cmp	r7, r8
   826b4:	46c3      	mov	fp, r8
   826b6:	f0c0 80ad 	bcc.w	82814 <__sfvwrite_r+0x1f4>
   826ba:	f413 6f90 	tst.w	r3, #1152	; 0x480
   826be:	f040 80ae 	bne.w	8281e <__sfvwrite_r+0x1fe>
   826c2:	46ba      	mov	sl, r7
   826c4:	6820      	ldr	r0, [r4, #0]
   826c6:	465a      	mov	r2, fp
   826c8:	4649      	mov	r1, r9
   826ca:	f000 fd55 	bl	83178 <memmove>
   826ce:	68a2      	ldr	r2, [r4, #8]
   826d0:	6823      	ldr	r3, [r4, #0]
   826d2:	eba2 0208 	sub.w	r2, r2, r8
   826d6:	445b      	add	r3, fp
   826d8:	60a2      	str	r2, [r4, #8]
   826da:	6023      	str	r3, [r4, #0]
   826dc:	9a01      	ldr	r2, [sp, #4]
   826de:	44d1      	add	r9, sl
   826e0:	6893      	ldr	r3, [r2, #8]
   826e2:	eba7 070a 	sub.w	r7, r7, sl
   826e6:	eba3 030a 	sub.w	r3, r3, sl
   826ea:	6093      	str	r3, [r2, #8]
   826ec:	2b00      	cmp	r3, #0
   826ee:	d0c5      	beq.n	8267c <__sfvwrite_r+0x5c>
   826f0:	89a3      	ldrh	r3, [r4, #12]
   826f2:	2f00      	cmp	r7, #0
   826f4:	d1d8      	bne.n	826a8 <__sfvwrite_r+0x88>
   826f6:	f8d5 9000 	ldr.w	r9, [r5]
   826fa:	686f      	ldr	r7, [r5, #4]
   826fc:	3508      	adds	r5, #8
   826fe:	e7d2      	b.n	826a6 <__sfvwrite_r+0x86>
   82700:	f8d5 9000 	ldr.w	r9, [r5]
   82704:	686f      	ldr	r7, [r5, #4]
   82706:	3508      	adds	r5, #8
   82708:	e7a2      	b.n	82650 <__sfvwrite_r+0x30>
   8270a:	2000      	movs	r0, #0
   8270c:	4770      	bx	lr
   8270e:	4621      	mov	r1, r4
   82710:	9800      	ldr	r0, [sp, #0]
   82712:	f7ff fd21 	bl	82158 <_fflush_r>
   82716:	b378      	cbz	r0, 82778 <__sfvwrite_r+0x158>
   82718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8271c:	f04f 30ff 	mov.w	r0, #4294967295
   82720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82724:	81a3      	strh	r3, [r4, #12]
   82726:	b003      	add	sp, #12
   82728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8272c:	4681      	mov	r9, r0
   8272e:	4633      	mov	r3, r6
   82730:	464e      	mov	r6, r9
   82732:	46a8      	mov	r8, r5
   82734:	469a      	mov	sl, r3
   82736:	464d      	mov	r5, r9
   82738:	b356      	cbz	r6, 82790 <__sfvwrite_r+0x170>
   8273a:	2800      	cmp	r0, #0
   8273c:	d032      	beq.n	827a4 <__sfvwrite_r+0x184>
   8273e:	45b1      	cmp	r9, r6
   82740:	46cb      	mov	fp, r9
   82742:	bf28      	it	cs
   82744:	46b3      	movcs	fp, r6
   82746:	6820      	ldr	r0, [r4, #0]
   82748:	6923      	ldr	r3, [r4, #16]
   8274a:	465f      	mov	r7, fp
   8274c:	4298      	cmp	r0, r3
   8274e:	6962      	ldr	r2, [r4, #20]
   82750:	d904      	bls.n	8275c <__sfvwrite_r+0x13c>
   82752:	68a3      	ldr	r3, [r4, #8]
   82754:	4413      	add	r3, r2
   82756:	459b      	cmp	fp, r3
   82758:	f300 80a8 	bgt.w	828ac <__sfvwrite_r+0x28c>
   8275c:	4593      	cmp	fp, r2
   8275e:	db4d      	blt.n	827fc <__sfvwrite_r+0x1dc>
   82760:	4613      	mov	r3, r2
   82762:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82764:	462a      	mov	r2, r5
   82766:	69e1      	ldr	r1, [r4, #28]
   82768:	9800      	ldr	r0, [sp, #0]
   8276a:	47b8      	blx	r7
   8276c:	1e07      	subs	r7, r0, #0
   8276e:	ddd3      	ble.n	82718 <__sfvwrite_r+0xf8>
   82770:	ebb9 0907 	subs.w	r9, r9, r7
   82774:	d0cb      	beq.n	8270e <__sfvwrite_r+0xee>
   82776:	2001      	movs	r0, #1
   82778:	f8da 3008 	ldr.w	r3, [sl, #8]
   8277c:	443d      	add	r5, r7
   8277e:	1bdb      	subs	r3, r3, r7
   82780:	1bf6      	subs	r6, r6, r7
   82782:	f8ca 3008 	str.w	r3, [sl, #8]
   82786:	2b00      	cmp	r3, #0
   82788:	f43f af78 	beq.w	8267c <__sfvwrite_r+0x5c>
   8278c:	2e00      	cmp	r6, #0
   8278e:	d1d4      	bne.n	8273a <__sfvwrite_r+0x11a>
   82790:	f108 0308 	add.w	r3, r8, #8
   82794:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82798:	4698      	mov	r8, r3
   8279a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8279e:	3308      	adds	r3, #8
   827a0:	2e00      	cmp	r6, #0
   827a2:	d0f7      	beq.n	82794 <__sfvwrite_r+0x174>
   827a4:	4632      	mov	r2, r6
   827a6:	210a      	movs	r1, #10
   827a8:	4628      	mov	r0, r5
   827aa:	f000 fc29 	bl	83000 <memchr>
   827ae:	2800      	cmp	r0, #0
   827b0:	f000 80a1 	beq.w	828f6 <__sfvwrite_r+0x2d6>
   827b4:	3001      	adds	r0, #1
   827b6:	eba0 0905 	sub.w	r9, r0, r5
   827ba:	e7c0      	b.n	8273e <__sfvwrite_r+0x11e>
   827bc:	6820      	ldr	r0, [r4, #0]
   827be:	6923      	ldr	r3, [r4, #16]
   827c0:	4298      	cmp	r0, r3
   827c2:	d802      	bhi.n	827ca <__sfvwrite_r+0x1aa>
   827c4:	6963      	ldr	r3, [r4, #20]
   827c6:	429f      	cmp	r7, r3
   827c8:	d25d      	bcs.n	82886 <__sfvwrite_r+0x266>
   827ca:	45b8      	cmp	r8, r7
   827cc:	bf28      	it	cs
   827ce:	46b8      	movcs	r8, r7
   827d0:	4649      	mov	r1, r9
   827d2:	4642      	mov	r2, r8
   827d4:	f000 fcd0 	bl	83178 <memmove>
   827d8:	68a3      	ldr	r3, [r4, #8]
   827da:	6822      	ldr	r2, [r4, #0]
   827dc:	eba3 0308 	sub.w	r3, r3, r8
   827e0:	4442      	add	r2, r8
   827e2:	60a3      	str	r3, [r4, #8]
   827e4:	6022      	str	r2, [r4, #0]
   827e6:	b10b      	cbz	r3, 827ec <__sfvwrite_r+0x1cc>
   827e8:	46c2      	mov	sl, r8
   827ea:	e777      	b.n	826dc <__sfvwrite_r+0xbc>
   827ec:	4621      	mov	r1, r4
   827ee:	9800      	ldr	r0, [sp, #0]
   827f0:	f7ff fcb2 	bl	82158 <_fflush_r>
   827f4:	2800      	cmp	r0, #0
   827f6:	d18f      	bne.n	82718 <__sfvwrite_r+0xf8>
   827f8:	46c2      	mov	sl, r8
   827fa:	e76f      	b.n	826dc <__sfvwrite_r+0xbc>
   827fc:	465a      	mov	r2, fp
   827fe:	4629      	mov	r1, r5
   82800:	f000 fcba 	bl	83178 <memmove>
   82804:	68a2      	ldr	r2, [r4, #8]
   82806:	6823      	ldr	r3, [r4, #0]
   82808:	eba2 020b 	sub.w	r2, r2, fp
   8280c:	445b      	add	r3, fp
   8280e:	60a2      	str	r2, [r4, #8]
   82810:	6023      	str	r3, [r4, #0]
   82812:	e7ad      	b.n	82770 <__sfvwrite_r+0x150>
   82814:	46b8      	mov	r8, r7
   82816:	46ba      	mov	sl, r7
   82818:	46bb      	mov	fp, r7
   8281a:	6820      	ldr	r0, [r4, #0]
   8281c:	e753      	b.n	826c6 <__sfvwrite_r+0xa6>
   8281e:	6962      	ldr	r2, [r4, #20]
   82820:	6820      	ldr	r0, [r4, #0]
   82822:	6921      	ldr	r1, [r4, #16]
   82824:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82828:	eba0 0a01 	sub.w	sl, r0, r1
   8282c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82830:	f10a 0001 	add.w	r0, sl, #1
   82834:	ea4f 0868 	mov.w	r8, r8, asr #1
   82838:	4438      	add	r0, r7
   8283a:	4540      	cmp	r0, r8
   8283c:	4642      	mov	r2, r8
   8283e:	bf84      	itt	hi
   82840:	4680      	movhi	r8, r0
   82842:	4642      	movhi	r2, r8
   82844:	055b      	lsls	r3, r3, #21
   82846:	d544      	bpl.n	828d2 <__sfvwrite_r+0x2b2>
   82848:	4611      	mov	r1, r2
   8284a:	9800      	ldr	r0, [sp, #0]
   8284c:	f000 f920 	bl	82a90 <_malloc_r>
   82850:	4683      	mov	fp, r0
   82852:	2800      	cmp	r0, #0
   82854:	d055      	beq.n	82902 <__sfvwrite_r+0x2e2>
   82856:	4652      	mov	r2, sl
   82858:	6921      	ldr	r1, [r4, #16]
   8285a:	f000 fc17 	bl	8308c <memcpy>
   8285e:	89a3      	ldrh	r3, [r4, #12]
   82860:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82868:	81a3      	strh	r3, [r4, #12]
   8286a:	eb0b 000a 	add.w	r0, fp, sl
   8286e:	eba8 030a 	sub.w	r3, r8, sl
   82872:	f8c4 b010 	str.w	fp, [r4, #16]
   82876:	f8c4 8014 	str.w	r8, [r4, #20]
   8287a:	6020      	str	r0, [r4, #0]
   8287c:	60a3      	str	r3, [r4, #8]
   8287e:	46b8      	mov	r8, r7
   82880:	46ba      	mov	sl, r7
   82882:	46bb      	mov	fp, r7
   82884:	e71f      	b.n	826c6 <__sfvwrite_r+0xa6>
   82886:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8288a:	42ba      	cmp	r2, r7
   8288c:	bf28      	it	cs
   8288e:	463a      	movcs	r2, r7
   82890:	fb92 f2f3 	sdiv	r2, r2, r3
   82894:	69e1      	ldr	r1, [r4, #28]
   82896:	fb03 f302 	mul.w	r3, r3, r2
   8289a:	9800      	ldr	r0, [sp, #0]
   8289c:	464a      	mov	r2, r9
   8289e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   828a0:	47b0      	blx	r6
   828a2:	f1b0 0a00 	subs.w	sl, r0, #0
   828a6:	f73f af19 	bgt.w	826dc <__sfvwrite_r+0xbc>
   828aa:	e735      	b.n	82718 <__sfvwrite_r+0xf8>
   828ac:	461a      	mov	r2, r3
   828ae:	4629      	mov	r1, r5
   828b0:	9301      	str	r3, [sp, #4]
   828b2:	f000 fc61 	bl	83178 <memmove>
   828b6:	6822      	ldr	r2, [r4, #0]
   828b8:	9b01      	ldr	r3, [sp, #4]
   828ba:	4621      	mov	r1, r4
   828bc:	441a      	add	r2, r3
   828be:	6022      	str	r2, [r4, #0]
   828c0:	9800      	ldr	r0, [sp, #0]
   828c2:	f7ff fc49 	bl	82158 <_fflush_r>
   828c6:	9b01      	ldr	r3, [sp, #4]
   828c8:	2800      	cmp	r0, #0
   828ca:	f47f af25 	bne.w	82718 <__sfvwrite_r+0xf8>
   828ce:	461f      	mov	r7, r3
   828d0:	e74e      	b.n	82770 <__sfvwrite_r+0x150>
   828d2:	9800      	ldr	r0, [sp, #0]
   828d4:	f000 fcc0 	bl	83258 <_realloc_r>
   828d8:	4683      	mov	fp, r0
   828da:	2800      	cmp	r0, #0
   828dc:	d1c5      	bne.n	8286a <__sfvwrite_r+0x24a>
   828de:	9d00      	ldr	r5, [sp, #0]
   828e0:	6921      	ldr	r1, [r4, #16]
   828e2:	4628      	mov	r0, r5
   828e4:	f7ff fdb6 	bl	82454 <_free_r>
   828e8:	220c      	movs	r2, #12
   828ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   828ee:	602a      	str	r2, [r5, #0]
   828f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   828f4:	e712      	b.n	8271c <__sfvwrite_r+0xfc>
   828f6:	f106 0901 	add.w	r9, r6, #1
   828fa:	e720      	b.n	8273e <__sfvwrite_r+0x11e>
   828fc:	f04f 30ff 	mov.w	r0, #4294967295
   82900:	e6bd      	b.n	8267e <__sfvwrite_r+0x5e>
   82902:	220c      	movs	r2, #12
   82904:	9900      	ldr	r1, [sp, #0]
   82906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8290a:	600a      	str	r2, [r1, #0]
   8290c:	e706      	b.n	8271c <__sfvwrite_r+0xfc>
   8290e:	bf00      	nop
   82910:	7ffffc00 	.word	0x7ffffc00

00082914 <_fwalk_reent>:
   82914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82918:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8291c:	d01e      	beq.n	8295c <_fwalk_reent+0x48>
   8291e:	4688      	mov	r8, r1
   82920:	4607      	mov	r7, r0
   82922:	f04f 0900 	mov.w	r9, #0
   82926:	6875      	ldr	r5, [r6, #4]
   82928:	68b4      	ldr	r4, [r6, #8]
   8292a:	3d01      	subs	r5, #1
   8292c:	d410      	bmi.n	82950 <_fwalk_reent+0x3c>
   8292e:	89a3      	ldrh	r3, [r4, #12]
   82930:	3d01      	subs	r5, #1
   82932:	2b01      	cmp	r3, #1
   82934:	d908      	bls.n	82948 <_fwalk_reent+0x34>
   82936:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8293a:	3301      	adds	r3, #1
   8293c:	d004      	beq.n	82948 <_fwalk_reent+0x34>
   8293e:	4621      	mov	r1, r4
   82940:	4638      	mov	r0, r7
   82942:	47c0      	blx	r8
   82944:	ea49 0900 	orr.w	r9, r9, r0
   82948:	1c6b      	adds	r3, r5, #1
   8294a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8294e:	d1ee      	bne.n	8292e <_fwalk_reent+0x1a>
   82950:	6836      	ldr	r6, [r6, #0]
   82952:	2e00      	cmp	r6, #0
   82954:	d1e7      	bne.n	82926 <_fwalk_reent+0x12>
   82956:	4648      	mov	r0, r9
   82958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8295c:	46b1      	mov	r9, r6
   8295e:	4648      	mov	r0, r9
   82960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082964 <__locale_mb_cur_max>:
   82964:	4b04      	ldr	r3, [pc, #16]	; (82978 <__locale_mb_cur_max+0x14>)
   82966:	4a05      	ldr	r2, [pc, #20]	; (8297c <__locale_mb_cur_max+0x18>)
   82968:	681b      	ldr	r3, [r3, #0]
   8296a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8296c:	2b00      	cmp	r3, #0
   8296e:	bf08      	it	eq
   82970:	4613      	moveq	r3, r2
   82972:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82976:	4770      	bx	lr
   82978:	20070144 	.word	0x20070144
   8297c:	20070574 	.word	0x20070574

00082980 <__retarget_lock_init_recursive>:
   82980:	4770      	bx	lr
   82982:	bf00      	nop

00082984 <__retarget_lock_close_recursive>:
   82984:	4770      	bx	lr
   82986:	bf00      	nop

00082988 <__retarget_lock_acquire_recursive>:
   82988:	4770      	bx	lr
   8298a:	bf00      	nop

0008298c <__retarget_lock_release_recursive>:
   8298c:	4770      	bx	lr
   8298e:	bf00      	nop

00082990 <__swhatbuf_r>:
   82990:	b570      	push	{r4, r5, r6, lr}
   82992:	460c      	mov	r4, r1
   82994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82998:	b090      	sub	sp, #64	; 0x40
   8299a:	2900      	cmp	r1, #0
   8299c:	4615      	mov	r5, r2
   8299e:	461e      	mov	r6, r3
   829a0:	db14      	blt.n	829cc <__swhatbuf_r+0x3c>
   829a2:	aa01      	add	r2, sp, #4
   829a4:	f001 f80c 	bl	839c0 <_fstat_r>
   829a8:	2800      	cmp	r0, #0
   829aa:	db0f      	blt.n	829cc <__swhatbuf_r+0x3c>
   829ac:	9a02      	ldr	r2, [sp, #8]
   829ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
   829b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   829b6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   829ba:	fab2 f282 	clz	r2, r2
   829be:	f44f 6000 	mov.w	r0, #2048	; 0x800
   829c2:	0952      	lsrs	r2, r2, #5
   829c4:	6032      	str	r2, [r6, #0]
   829c6:	602b      	str	r3, [r5, #0]
   829c8:	b010      	add	sp, #64	; 0x40
   829ca:	bd70      	pop	{r4, r5, r6, pc}
   829cc:	2300      	movs	r3, #0
   829ce:	89a2      	ldrh	r2, [r4, #12]
   829d0:	6033      	str	r3, [r6, #0]
   829d2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   829d6:	d004      	beq.n	829e2 <__swhatbuf_r+0x52>
   829d8:	2240      	movs	r2, #64	; 0x40
   829da:	4618      	mov	r0, r3
   829dc:	602a      	str	r2, [r5, #0]
   829de:	b010      	add	sp, #64	; 0x40
   829e0:	bd70      	pop	{r4, r5, r6, pc}
   829e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   829e6:	602b      	str	r3, [r5, #0]
   829e8:	b010      	add	sp, #64	; 0x40
   829ea:	bd70      	pop	{r4, r5, r6, pc}

000829ec <__smakebuf_r>:
   829ec:	898a      	ldrh	r2, [r1, #12]
   829ee:	460b      	mov	r3, r1
   829f0:	0792      	lsls	r2, r2, #30
   829f2:	d506      	bpl.n	82a02 <__smakebuf_r+0x16>
   829f4:	2101      	movs	r1, #1
   829f6:	f103 0243 	add.w	r2, r3, #67	; 0x43
   829fa:	6159      	str	r1, [r3, #20]
   829fc:	601a      	str	r2, [r3, #0]
   829fe:	611a      	str	r2, [r3, #16]
   82a00:	4770      	bx	lr
   82a02:	b5f0      	push	{r4, r5, r6, r7, lr}
   82a04:	b083      	sub	sp, #12
   82a06:	ab01      	add	r3, sp, #4
   82a08:	466a      	mov	r2, sp
   82a0a:	460c      	mov	r4, r1
   82a0c:	4606      	mov	r6, r0
   82a0e:	f7ff ffbf 	bl	82990 <__swhatbuf_r>
   82a12:	9900      	ldr	r1, [sp, #0]
   82a14:	4605      	mov	r5, r0
   82a16:	4630      	mov	r0, r6
   82a18:	f000 f83a 	bl	82a90 <_malloc_r>
   82a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82a20:	b1d8      	cbz	r0, 82a5a <__smakebuf_r+0x6e>
   82a22:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82a26:	4f15      	ldr	r7, [pc, #84]	; (82a7c <__smakebuf_r+0x90>)
   82a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82a2c:	63f7      	str	r7, [r6, #60]	; 0x3c
   82a2e:	81a3      	strh	r3, [r4, #12]
   82a30:	6020      	str	r0, [r4, #0]
   82a32:	6120      	str	r0, [r4, #16]
   82a34:	6161      	str	r1, [r4, #20]
   82a36:	b91a      	cbnz	r2, 82a40 <__smakebuf_r+0x54>
   82a38:	432b      	orrs	r3, r5
   82a3a:	81a3      	strh	r3, [r4, #12]
   82a3c:	b003      	add	sp, #12
   82a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82a40:	4630      	mov	r0, r6
   82a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a46:	f000 ffcf 	bl	839e8 <_isatty_r>
   82a4a:	b1a0      	cbz	r0, 82a76 <__smakebuf_r+0x8a>
   82a4c:	89a3      	ldrh	r3, [r4, #12]
   82a4e:	f023 0303 	bic.w	r3, r3, #3
   82a52:	f043 0301 	orr.w	r3, r3, #1
   82a56:	b21b      	sxth	r3, r3
   82a58:	e7ee      	b.n	82a38 <__smakebuf_r+0x4c>
   82a5a:	059a      	lsls	r2, r3, #22
   82a5c:	d4ee      	bmi.n	82a3c <__smakebuf_r+0x50>
   82a5e:	2101      	movs	r1, #1
   82a60:	f023 0303 	bic.w	r3, r3, #3
   82a64:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82a68:	f043 0302 	orr.w	r3, r3, #2
   82a6c:	81a3      	strh	r3, [r4, #12]
   82a6e:	6161      	str	r1, [r4, #20]
   82a70:	6022      	str	r2, [r4, #0]
   82a72:	6122      	str	r2, [r4, #16]
   82a74:	e7e2      	b.n	82a3c <__smakebuf_r+0x50>
   82a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82a7a:	e7dd      	b.n	82a38 <__smakebuf_r+0x4c>
   82a7c:	000821ad 	.word	0x000821ad

00082a80 <malloc>:
   82a80:	4b02      	ldr	r3, [pc, #8]	; (82a8c <malloc+0xc>)
   82a82:	4601      	mov	r1, r0
   82a84:	6818      	ldr	r0, [r3, #0]
   82a86:	f000 b803 	b.w	82a90 <_malloc_r>
   82a8a:	bf00      	nop
   82a8c:	20070144 	.word	0x20070144

00082a90 <_malloc_r>:
   82a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a94:	f101 060b 	add.w	r6, r1, #11
   82a98:	2e16      	cmp	r6, #22
   82a9a:	b083      	sub	sp, #12
   82a9c:	4605      	mov	r5, r0
   82a9e:	f240 809e 	bls.w	82bde <_malloc_r+0x14e>
   82aa2:	f036 0607 	bics.w	r6, r6, #7
   82aa6:	f100 80bd 	bmi.w	82c24 <_malloc_r+0x194>
   82aaa:	42b1      	cmp	r1, r6
   82aac:	f200 80ba 	bhi.w	82c24 <_malloc_r+0x194>
   82ab0:	f000 fbc6 	bl	83240 <__malloc_lock>
   82ab4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82ab8:	f0c0 8285 	bcc.w	82fc6 <_malloc_r+0x536>
   82abc:	0a73      	lsrs	r3, r6, #9
   82abe:	f000 80b8 	beq.w	82c32 <_malloc_r+0x1a2>
   82ac2:	2b04      	cmp	r3, #4
   82ac4:	f200 816c 	bhi.w	82da0 <_malloc_r+0x310>
   82ac8:	09b3      	lsrs	r3, r6, #6
   82aca:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82ace:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82ad2:	00c1      	lsls	r1, r0, #3
   82ad4:	4fb8      	ldr	r7, [pc, #736]	; (82db8 <_malloc_r+0x328>)
   82ad6:	4439      	add	r1, r7
   82ad8:	684c      	ldr	r4, [r1, #4]
   82ada:	3908      	subs	r1, #8
   82adc:	42a1      	cmp	r1, r4
   82ade:	d106      	bne.n	82aee <_malloc_r+0x5e>
   82ae0:	e00c      	b.n	82afc <_malloc_r+0x6c>
   82ae2:	2a00      	cmp	r2, #0
   82ae4:	f280 80ab 	bge.w	82c3e <_malloc_r+0x1ae>
   82ae8:	68e4      	ldr	r4, [r4, #12]
   82aea:	42a1      	cmp	r1, r4
   82aec:	d006      	beq.n	82afc <_malloc_r+0x6c>
   82aee:	6863      	ldr	r3, [r4, #4]
   82af0:	f023 0303 	bic.w	r3, r3, #3
   82af4:	1b9a      	subs	r2, r3, r6
   82af6:	2a0f      	cmp	r2, #15
   82af8:	ddf3      	ble.n	82ae2 <_malloc_r+0x52>
   82afa:	4670      	mov	r0, lr
   82afc:	693c      	ldr	r4, [r7, #16]
   82afe:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 82dcc <_malloc_r+0x33c>
   82b02:	4574      	cmp	r4, lr
   82b04:	f000 819e 	beq.w	82e44 <_malloc_r+0x3b4>
   82b08:	6863      	ldr	r3, [r4, #4]
   82b0a:	f023 0303 	bic.w	r3, r3, #3
   82b0e:	1b9a      	subs	r2, r3, r6
   82b10:	2a0f      	cmp	r2, #15
   82b12:	f300 8183 	bgt.w	82e1c <_malloc_r+0x38c>
   82b16:	2a00      	cmp	r2, #0
   82b18:	f8c7 e014 	str.w	lr, [r7, #20]
   82b1c:	f8c7 e010 	str.w	lr, [r7, #16]
   82b20:	f280 8091 	bge.w	82c46 <_malloc_r+0x1b6>
   82b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82b28:	f080 8154 	bcs.w	82dd4 <_malloc_r+0x344>
   82b2c:	2201      	movs	r2, #1
   82b2e:	08db      	lsrs	r3, r3, #3
   82b30:	6879      	ldr	r1, [r7, #4]
   82b32:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82b36:	4413      	add	r3, r2
   82b38:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82b3c:	fa02 f20c 	lsl.w	r2, r2, ip
   82b40:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82b44:	430a      	orrs	r2, r1
   82b46:	f1ac 0108 	sub.w	r1, ip, #8
   82b4a:	60e1      	str	r1, [r4, #12]
   82b4c:	f8c4 8008 	str.w	r8, [r4, #8]
   82b50:	607a      	str	r2, [r7, #4]
   82b52:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82b56:	f8c8 400c 	str.w	r4, [r8, #12]
   82b5a:	2401      	movs	r4, #1
   82b5c:	1083      	asrs	r3, r0, #2
   82b5e:	409c      	lsls	r4, r3
   82b60:	4294      	cmp	r4, r2
   82b62:	d87d      	bhi.n	82c60 <_malloc_r+0x1d0>
   82b64:	4214      	tst	r4, r2
   82b66:	d106      	bne.n	82b76 <_malloc_r+0xe6>
   82b68:	f020 0003 	bic.w	r0, r0, #3
   82b6c:	0064      	lsls	r4, r4, #1
   82b6e:	4214      	tst	r4, r2
   82b70:	f100 0004 	add.w	r0, r0, #4
   82b74:	d0fa      	beq.n	82b6c <_malloc_r+0xdc>
   82b76:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82b7a:	46cc      	mov	ip, r9
   82b7c:	4680      	mov	r8, r0
   82b7e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82b82:	459c      	cmp	ip, r3
   82b84:	d107      	bne.n	82b96 <_malloc_r+0x106>
   82b86:	e15f      	b.n	82e48 <_malloc_r+0x3b8>
   82b88:	2a00      	cmp	r2, #0
   82b8a:	f280 816d 	bge.w	82e68 <_malloc_r+0x3d8>
   82b8e:	68db      	ldr	r3, [r3, #12]
   82b90:	459c      	cmp	ip, r3
   82b92:	f000 8159 	beq.w	82e48 <_malloc_r+0x3b8>
   82b96:	6859      	ldr	r1, [r3, #4]
   82b98:	f021 0103 	bic.w	r1, r1, #3
   82b9c:	1b8a      	subs	r2, r1, r6
   82b9e:	2a0f      	cmp	r2, #15
   82ba0:	ddf2      	ble.n	82b88 <_malloc_r+0xf8>
   82ba2:	68dc      	ldr	r4, [r3, #12]
   82ba4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82ba8:	f046 0801 	orr.w	r8, r6, #1
   82bac:	4628      	mov	r0, r5
   82bae:	441e      	add	r6, r3
   82bb0:	f042 0501 	orr.w	r5, r2, #1
   82bb4:	f8c3 8004 	str.w	r8, [r3, #4]
   82bb8:	f8cc 400c 	str.w	r4, [ip, #12]
   82bbc:	f8c4 c008 	str.w	ip, [r4, #8]
   82bc0:	617e      	str	r6, [r7, #20]
   82bc2:	613e      	str	r6, [r7, #16]
   82bc4:	f8c6 e00c 	str.w	lr, [r6, #12]
   82bc8:	f8c6 e008 	str.w	lr, [r6, #8]
   82bcc:	6075      	str	r5, [r6, #4]
   82bce:	505a      	str	r2, [r3, r1]
   82bd0:	9300      	str	r3, [sp, #0]
   82bd2:	f000 fb3b 	bl	8324c <__malloc_unlock>
   82bd6:	9b00      	ldr	r3, [sp, #0]
   82bd8:	f103 0408 	add.w	r4, r3, #8
   82bdc:	e01e      	b.n	82c1c <_malloc_r+0x18c>
   82bde:	2910      	cmp	r1, #16
   82be0:	d820      	bhi.n	82c24 <_malloc_r+0x194>
   82be2:	f000 fb2d 	bl	83240 <__malloc_lock>
   82be6:	2610      	movs	r6, #16
   82be8:	2318      	movs	r3, #24
   82bea:	2002      	movs	r0, #2
   82bec:	4f72      	ldr	r7, [pc, #456]	; (82db8 <_malloc_r+0x328>)
   82bee:	443b      	add	r3, r7
   82bf0:	685c      	ldr	r4, [r3, #4]
   82bf2:	f1a3 0208 	sub.w	r2, r3, #8
   82bf6:	4294      	cmp	r4, r2
   82bf8:	f000 812f 	beq.w	82e5a <_malloc_r+0x3ca>
   82bfc:	6863      	ldr	r3, [r4, #4]
   82bfe:	68e1      	ldr	r1, [r4, #12]
   82c00:	f023 0303 	bic.w	r3, r3, #3
   82c04:	4423      	add	r3, r4
   82c06:	685a      	ldr	r2, [r3, #4]
   82c08:	68a6      	ldr	r6, [r4, #8]
   82c0a:	f042 0201 	orr.w	r2, r2, #1
   82c0e:	60f1      	str	r1, [r6, #12]
   82c10:	4628      	mov	r0, r5
   82c12:	608e      	str	r6, [r1, #8]
   82c14:	605a      	str	r2, [r3, #4]
   82c16:	f000 fb19 	bl	8324c <__malloc_unlock>
   82c1a:	3408      	adds	r4, #8
   82c1c:	4620      	mov	r0, r4
   82c1e:	b003      	add	sp, #12
   82c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c24:	2400      	movs	r4, #0
   82c26:	230c      	movs	r3, #12
   82c28:	4620      	mov	r0, r4
   82c2a:	602b      	str	r3, [r5, #0]
   82c2c:	b003      	add	sp, #12
   82c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c32:	2040      	movs	r0, #64	; 0x40
   82c34:	f44f 7100 	mov.w	r1, #512	; 0x200
   82c38:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82c3c:	e74a      	b.n	82ad4 <_malloc_r+0x44>
   82c3e:	4423      	add	r3, r4
   82c40:	685a      	ldr	r2, [r3, #4]
   82c42:	68e1      	ldr	r1, [r4, #12]
   82c44:	e7e0      	b.n	82c08 <_malloc_r+0x178>
   82c46:	4423      	add	r3, r4
   82c48:	685a      	ldr	r2, [r3, #4]
   82c4a:	4628      	mov	r0, r5
   82c4c:	f042 0201 	orr.w	r2, r2, #1
   82c50:	605a      	str	r2, [r3, #4]
   82c52:	3408      	adds	r4, #8
   82c54:	f000 fafa 	bl	8324c <__malloc_unlock>
   82c58:	4620      	mov	r0, r4
   82c5a:	b003      	add	sp, #12
   82c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c60:	68bc      	ldr	r4, [r7, #8]
   82c62:	6863      	ldr	r3, [r4, #4]
   82c64:	f023 0803 	bic.w	r8, r3, #3
   82c68:	45b0      	cmp	r8, r6
   82c6a:	d304      	bcc.n	82c76 <_malloc_r+0x1e6>
   82c6c:	eba8 0306 	sub.w	r3, r8, r6
   82c70:	2b0f      	cmp	r3, #15
   82c72:	f300 8085 	bgt.w	82d80 <_malloc_r+0x2f0>
   82c76:	f8df 9158 	ldr.w	r9, [pc, #344]	; 82dd0 <_malloc_r+0x340>
   82c7a:	4b50      	ldr	r3, [pc, #320]	; (82dbc <_malloc_r+0x32c>)
   82c7c:	f8d9 2000 	ldr.w	r2, [r9]
   82c80:	681b      	ldr	r3, [r3, #0]
   82c82:	3201      	adds	r2, #1
   82c84:	4433      	add	r3, r6
   82c86:	eb04 0a08 	add.w	sl, r4, r8
   82c8a:	f000 8154 	beq.w	82f36 <_malloc_r+0x4a6>
   82c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82c92:	330f      	adds	r3, #15
   82c94:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82c98:	f02b 0b0f 	bic.w	fp, fp, #15
   82c9c:	4659      	mov	r1, fp
   82c9e:	4628      	mov	r0, r5
   82ca0:	f000 fc90 	bl	835c4 <_sbrk_r>
   82ca4:	1c41      	adds	r1, r0, #1
   82ca6:	4602      	mov	r2, r0
   82ca8:	f000 80fb 	beq.w	82ea2 <_malloc_r+0x412>
   82cac:	4582      	cmp	sl, r0
   82cae:	f200 80f6 	bhi.w	82e9e <_malloc_r+0x40e>
   82cb2:	4b43      	ldr	r3, [pc, #268]	; (82dc0 <_malloc_r+0x330>)
   82cb4:	6819      	ldr	r1, [r3, #0]
   82cb6:	4459      	add	r1, fp
   82cb8:	6019      	str	r1, [r3, #0]
   82cba:	f000 814c 	beq.w	82f56 <_malloc_r+0x4c6>
   82cbe:	f8d9 0000 	ldr.w	r0, [r9]
   82cc2:	3001      	adds	r0, #1
   82cc4:	bf1b      	ittet	ne
   82cc6:	eba2 0a0a 	subne.w	sl, r2, sl
   82cca:	4451      	addne	r1, sl
   82ccc:	f8c9 2000 	streq.w	r2, [r9]
   82cd0:	6019      	strne	r1, [r3, #0]
   82cd2:	f012 0107 	ands.w	r1, r2, #7
   82cd6:	f000 8114 	beq.w	82f02 <_malloc_r+0x472>
   82cda:	f1c1 0008 	rsb	r0, r1, #8
   82cde:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82ce2:	4402      	add	r2, r0
   82ce4:	3108      	adds	r1, #8
   82ce6:	eb02 090b 	add.w	r9, r2, fp
   82cea:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82cee:	eba1 0909 	sub.w	r9, r1, r9
   82cf2:	4649      	mov	r1, r9
   82cf4:	4628      	mov	r0, r5
   82cf6:	9301      	str	r3, [sp, #4]
   82cf8:	9200      	str	r2, [sp, #0]
   82cfa:	f000 fc63 	bl	835c4 <_sbrk_r>
   82cfe:	1c43      	adds	r3, r0, #1
   82d00:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82d04:	f000 8142 	beq.w	82f8c <_malloc_r+0x4fc>
   82d08:	1a80      	subs	r0, r0, r2
   82d0a:	4448      	add	r0, r9
   82d0c:	f040 0001 	orr.w	r0, r0, #1
   82d10:	6819      	ldr	r1, [r3, #0]
   82d12:	42bc      	cmp	r4, r7
   82d14:	4449      	add	r1, r9
   82d16:	60ba      	str	r2, [r7, #8]
   82d18:	6019      	str	r1, [r3, #0]
   82d1a:	6050      	str	r0, [r2, #4]
   82d1c:	d017      	beq.n	82d4e <_malloc_r+0x2be>
   82d1e:	f1b8 0f0f 	cmp.w	r8, #15
   82d22:	f240 80fa 	bls.w	82f1a <_malloc_r+0x48a>
   82d26:	f04f 0c05 	mov.w	ip, #5
   82d2a:	6862      	ldr	r2, [r4, #4]
   82d2c:	f1a8 000c 	sub.w	r0, r8, #12
   82d30:	f020 0007 	bic.w	r0, r0, #7
   82d34:	f002 0201 	and.w	r2, r2, #1
   82d38:	eb04 0e00 	add.w	lr, r4, r0
   82d3c:	4302      	orrs	r2, r0
   82d3e:	280f      	cmp	r0, #15
   82d40:	6062      	str	r2, [r4, #4]
   82d42:	f8ce c004 	str.w	ip, [lr, #4]
   82d46:	f8ce c008 	str.w	ip, [lr, #8]
   82d4a:	f200 8116 	bhi.w	82f7a <_malloc_r+0x4ea>
   82d4e:	4b1d      	ldr	r3, [pc, #116]	; (82dc4 <_malloc_r+0x334>)
   82d50:	68bc      	ldr	r4, [r7, #8]
   82d52:	681a      	ldr	r2, [r3, #0]
   82d54:	4291      	cmp	r1, r2
   82d56:	bf88      	it	hi
   82d58:	6019      	strhi	r1, [r3, #0]
   82d5a:	4b1b      	ldr	r3, [pc, #108]	; (82dc8 <_malloc_r+0x338>)
   82d5c:	681a      	ldr	r2, [r3, #0]
   82d5e:	4291      	cmp	r1, r2
   82d60:	6862      	ldr	r2, [r4, #4]
   82d62:	bf88      	it	hi
   82d64:	6019      	strhi	r1, [r3, #0]
   82d66:	f022 0203 	bic.w	r2, r2, #3
   82d6a:	4296      	cmp	r6, r2
   82d6c:	eba2 0306 	sub.w	r3, r2, r6
   82d70:	d801      	bhi.n	82d76 <_malloc_r+0x2e6>
   82d72:	2b0f      	cmp	r3, #15
   82d74:	dc04      	bgt.n	82d80 <_malloc_r+0x2f0>
   82d76:	4628      	mov	r0, r5
   82d78:	f000 fa68 	bl	8324c <__malloc_unlock>
   82d7c:	2400      	movs	r4, #0
   82d7e:	e74d      	b.n	82c1c <_malloc_r+0x18c>
   82d80:	f046 0201 	orr.w	r2, r6, #1
   82d84:	f043 0301 	orr.w	r3, r3, #1
   82d88:	4426      	add	r6, r4
   82d8a:	6062      	str	r2, [r4, #4]
   82d8c:	4628      	mov	r0, r5
   82d8e:	60be      	str	r6, [r7, #8]
   82d90:	3408      	adds	r4, #8
   82d92:	6073      	str	r3, [r6, #4]
   82d94:	f000 fa5a 	bl	8324c <__malloc_unlock>
   82d98:	4620      	mov	r0, r4
   82d9a:	b003      	add	sp, #12
   82d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82da0:	2b14      	cmp	r3, #20
   82da2:	d970      	bls.n	82e86 <_malloc_r+0x3f6>
   82da4:	2b54      	cmp	r3, #84	; 0x54
   82da6:	f200 80a2 	bhi.w	82eee <_malloc_r+0x45e>
   82daa:	0b33      	lsrs	r3, r6, #12
   82dac:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   82db0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   82db4:	00c1      	lsls	r1, r0, #3
   82db6:	e68d      	b.n	82ad4 <_malloc_r+0x44>
   82db8:	200706e0 	.word	0x200706e0
   82dbc:	20070c54 	.word	0x20070c54
   82dc0:	20070c24 	.word	0x20070c24
   82dc4:	20070c4c 	.word	0x20070c4c
   82dc8:	20070c50 	.word	0x20070c50
   82dcc:	200706e8 	.word	0x200706e8
   82dd0:	20070ae8 	.word	0x20070ae8
   82dd4:	0a5a      	lsrs	r2, r3, #9
   82dd6:	2a04      	cmp	r2, #4
   82dd8:	d95b      	bls.n	82e92 <_malloc_r+0x402>
   82dda:	2a14      	cmp	r2, #20
   82ddc:	f200 80ae 	bhi.w	82f3c <_malloc_r+0x4ac>
   82de0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   82de4:	00c9      	lsls	r1, r1, #3
   82de6:	325b      	adds	r2, #91	; 0x5b
   82de8:	eb07 0c01 	add.w	ip, r7, r1
   82dec:	5879      	ldr	r1, [r7, r1]
   82dee:	f1ac 0c08 	sub.w	ip, ip, #8
   82df2:	458c      	cmp	ip, r1
   82df4:	f000 8088 	beq.w	82f08 <_malloc_r+0x478>
   82df8:	684a      	ldr	r2, [r1, #4]
   82dfa:	f022 0203 	bic.w	r2, r2, #3
   82dfe:	4293      	cmp	r3, r2
   82e00:	d273      	bcs.n	82eea <_malloc_r+0x45a>
   82e02:	6889      	ldr	r1, [r1, #8]
   82e04:	458c      	cmp	ip, r1
   82e06:	d1f7      	bne.n	82df8 <_malloc_r+0x368>
   82e08:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82e0c:	687a      	ldr	r2, [r7, #4]
   82e0e:	60e3      	str	r3, [r4, #12]
   82e10:	f8c4 c008 	str.w	ip, [r4, #8]
   82e14:	609c      	str	r4, [r3, #8]
   82e16:	f8cc 400c 	str.w	r4, [ip, #12]
   82e1a:	e69e      	b.n	82b5a <_malloc_r+0xca>
   82e1c:	f046 0c01 	orr.w	ip, r6, #1
   82e20:	f042 0101 	orr.w	r1, r2, #1
   82e24:	4426      	add	r6, r4
   82e26:	f8c4 c004 	str.w	ip, [r4, #4]
   82e2a:	4628      	mov	r0, r5
   82e2c:	617e      	str	r6, [r7, #20]
   82e2e:	613e      	str	r6, [r7, #16]
   82e30:	f8c6 e00c 	str.w	lr, [r6, #12]
   82e34:	f8c6 e008 	str.w	lr, [r6, #8]
   82e38:	6071      	str	r1, [r6, #4]
   82e3a:	50e2      	str	r2, [r4, r3]
   82e3c:	f000 fa06 	bl	8324c <__malloc_unlock>
   82e40:	3408      	adds	r4, #8
   82e42:	e6eb      	b.n	82c1c <_malloc_r+0x18c>
   82e44:	687a      	ldr	r2, [r7, #4]
   82e46:	e688      	b.n	82b5a <_malloc_r+0xca>
   82e48:	f108 0801 	add.w	r8, r8, #1
   82e4c:	f018 0f03 	tst.w	r8, #3
   82e50:	f10c 0c08 	add.w	ip, ip, #8
   82e54:	f47f ae93 	bne.w	82b7e <_malloc_r+0xee>
   82e58:	e02d      	b.n	82eb6 <_malloc_r+0x426>
   82e5a:	68dc      	ldr	r4, [r3, #12]
   82e5c:	42a3      	cmp	r3, r4
   82e5e:	bf08      	it	eq
   82e60:	3002      	addeq	r0, #2
   82e62:	f43f ae4b 	beq.w	82afc <_malloc_r+0x6c>
   82e66:	e6c9      	b.n	82bfc <_malloc_r+0x16c>
   82e68:	461c      	mov	r4, r3
   82e6a:	4419      	add	r1, r3
   82e6c:	684a      	ldr	r2, [r1, #4]
   82e6e:	68db      	ldr	r3, [r3, #12]
   82e70:	f854 6f08 	ldr.w	r6, [r4, #8]!
   82e74:	f042 0201 	orr.w	r2, r2, #1
   82e78:	604a      	str	r2, [r1, #4]
   82e7a:	4628      	mov	r0, r5
   82e7c:	60f3      	str	r3, [r6, #12]
   82e7e:	609e      	str	r6, [r3, #8]
   82e80:	f000 f9e4 	bl	8324c <__malloc_unlock>
   82e84:	e6ca      	b.n	82c1c <_malloc_r+0x18c>
   82e86:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   82e8a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   82e8e:	00c1      	lsls	r1, r0, #3
   82e90:	e620      	b.n	82ad4 <_malloc_r+0x44>
   82e92:	099a      	lsrs	r2, r3, #6
   82e94:	f102 0139 	add.w	r1, r2, #57	; 0x39
   82e98:	00c9      	lsls	r1, r1, #3
   82e9a:	3238      	adds	r2, #56	; 0x38
   82e9c:	e7a4      	b.n	82de8 <_malloc_r+0x358>
   82e9e:	42bc      	cmp	r4, r7
   82ea0:	d054      	beq.n	82f4c <_malloc_r+0x4bc>
   82ea2:	68bc      	ldr	r4, [r7, #8]
   82ea4:	6862      	ldr	r2, [r4, #4]
   82ea6:	f022 0203 	bic.w	r2, r2, #3
   82eaa:	e75e      	b.n	82d6a <_malloc_r+0x2da>
   82eac:	f859 3908 	ldr.w	r3, [r9], #-8
   82eb0:	4599      	cmp	r9, r3
   82eb2:	f040 8086 	bne.w	82fc2 <_malloc_r+0x532>
   82eb6:	f010 0f03 	tst.w	r0, #3
   82eba:	f100 30ff 	add.w	r0, r0, #4294967295
   82ebe:	d1f5      	bne.n	82eac <_malloc_r+0x41c>
   82ec0:	687b      	ldr	r3, [r7, #4]
   82ec2:	ea23 0304 	bic.w	r3, r3, r4
   82ec6:	607b      	str	r3, [r7, #4]
   82ec8:	0064      	lsls	r4, r4, #1
   82eca:	429c      	cmp	r4, r3
   82ecc:	f63f aec8 	bhi.w	82c60 <_malloc_r+0x1d0>
   82ed0:	2c00      	cmp	r4, #0
   82ed2:	f43f aec5 	beq.w	82c60 <_malloc_r+0x1d0>
   82ed6:	421c      	tst	r4, r3
   82ed8:	4640      	mov	r0, r8
   82eda:	f47f ae4c 	bne.w	82b76 <_malloc_r+0xe6>
   82ede:	0064      	lsls	r4, r4, #1
   82ee0:	421c      	tst	r4, r3
   82ee2:	f100 0004 	add.w	r0, r0, #4
   82ee6:	d0fa      	beq.n	82ede <_malloc_r+0x44e>
   82ee8:	e645      	b.n	82b76 <_malloc_r+0xe6>
   82eea:	468c      	mov	ip, r1
   82eec:	e78c      	b.n	82e08 <_malloc_r+0x378>
   82eee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82ef2:	d815      	bhi.n	82f20 <_malloc_r+0x490>
   82ef4:	0bf3      	lsrs	r3, r6, #15
   82ef6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   82efa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   82efe:	00c1      	lsls	r1, r0, #3
   82f00:	e5e8      	b.n	82ad4 <_malloc_r+0x44>
   82f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82f06:	e6ee      	b.n	82ce6 <_malloc_r+0x256>
   82f08:	2101      	movs	r1, #1
   82f0a:	687b      	ldr	r3, [r7, #4]
   82f0c:	1092      	asrs	r2, r2, #2
   82f0e:	fa01 f202 	lsl.w	r2, r1, r2
   82f12:	431a      	orrs	r2, r3
   82f14:	607a      	str	r2, [r7, #4]
   82f16:	4663      	mov	r3, ip
   82f18:	e779      	b.n	82e0e <_malloc_r+0x37e>
   82f1a:	2301      	movs	r3, #1
   82f1c:	6053      	str	r3, [r2, #4]
   82f1e:	e72a      	b.n	82d76 <_malloc_r+0x2e6>
   82f20:	f240 5254 	movw	r2, #1364	; 0x554
   82f24:	4293      	cmp	r3, r2
   82f26:	d822      	bhi.n	82f6e <_malloc_r+0x4de>
   82f28:	0cb3      	lsrs	r3, r6, #18
   82f2a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   82f2e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   82f32:	00c1      	lsls	r1, r0, #3
   82f34:	e5ce      	b.n	82ad4 <_malloc_r+0x44>
   82f36:	f103 0b10 	add.w	fp, r3, #16
   82f3a:	e6af      	b.n	82c9c <_malloc_r+0x20c>
   82f3c:	2a54      	cmp	r2, #84	; 0x54
   82f3e:	d829      	bhi.n	82f94 <_malloc_r+0x504>
   82f40:	0b1a      	lsrs	r2, r3, #12
   82f42:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   82f46:	00c9      	lsls	r1, r1, #3
   82f48:	326e      	adds	r2, #110	; 0x6e
   82f4a:	e74d      	b.n	82de8 <_malloc_r+0x358>
   82f4c:	4b20      	ldr	r3, [pc, #128]	; (82fd0 <_malloc_r+0x540>)
   82f4e:	6819      	ldr	r1, [r3, #0]
   82f50:	4459      	add	r1, fp
   82f52:	6019      	str	r1, [r3, #0]
   82f54:	e6b3      	b.n	82cbe <_malloc_r+0x22e>
   82f56:	f3ca 000b 	ubfx	r0, sl, #0, #12
   82f5a:	2800      	cmp	r0, #0
   82f5c:	f47f aeaf 	bne.w	82cbe <_malloc_r+0x22e>
   82f60:	eb08 030b 	add.w	r3, r8, fp
   82f64:	68ba      	ldr	r2, [r7, #8]
   82f66:	f043 0301 	orr.w	r3, r3, #1
   82f6a:	6053      	str	r3, [r2, #4]
   82f6c:	e6ef      	b.n	82d4e <_malloc_r+0x2be>
   82f6e:	207f      	movs	r0, #127	; 0x7f
   82f70:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   82f74:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   82f78:	e5ac      	b.n	82ad4 <_malloc_r+0x44>
   82f7a:	f104 0108 	add.w	r1, r4, #8
   82f7e:	4628      	mov	r0, r5
   82f80:	9300      	str	r3, [sp, #0]
   82f82:	f7ff fa67 	bl	82454 <_free_r>
   82f86:	9b00      	ldr	r3, [sp, #0]
   82f88:	6819      	ldr	r1, [r3, #0]
   82f8a:	e6e0      	b.n	82d4e <_malloc_r+0x2be>
   82f8c:	2001      	movs	r0, #1
   82f8e:	f04f 0900 	mov.w	r9, #0
   82f92:	e6bd      	b.n	82d10 <_malloc_r+0x280>
   82f94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82f98:	d805      	bhi.n	82fa6 <_malloc_r+0x516>
   82f9a:	0bda      	lsrs	r2, r3, #15
   82f9c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   82fa0:	00c9      	lsls	r1, r1, #3
   82fa2:	3277      	adds	r2, #119	; 0x77
   82fa4:	e720      	b.n	82de8 <_malloc_r+0x358>
   82fa6:	f240 5154 	movw	r1, #1364	; 0x554
   82faa:	428a      	cmp	r2, r1
   82fac:	d805      	bhi.n	82fba <_malloc_r+0x52a>
   82fae:	0c9a      	lsrs	r2, r3, #18
   82fb0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   82fb4:	00c9      	lsls	r1, r1, #3
   82fb6:	327c      	adds	r2, #124	; 0x7c
   82fb8:	e716      	b.n	82de8 <_malloc_r+0x358>
   82fba:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   82fbe:	227e      	movs	r2, #126	; 0x7e
   82fc0:	e712      	b.n	82de8 <_malloc_r+0x358>
   82fc2:	687b      	ldr	r3, [r7, #4]
   82fc4:	e780      	b.n	82ec8 <_malloc_r+0x438>
   82fc6:	08f0      	lsrs	r0, r6, #3
   82fc8:	f106 0308 	add.w	r3, r6, #8
   82fcc:	e60e      	b.n	82bec <_malloc_r+0x15c>
   82fce:	bf00      	nop
   82fd0:	20070c24 	.word	0x20070c24

00082fd4 <__ascii_mbtowc>:
   82fd4:	b082      	sub	sp, #8
   82fd6:	b149      	cbz	r1, 82fec <__ascii_mbtowc+0x18>
   82fd8:	b15a      	cbz	r2, 82ff2 <__ascii_mbtowc+0x1e>
   82fda:	b16b      	cbz	r3, 82ff8 <__ascii_mbtowc+0x24>
   82fdc:	7813      	ldrb	r3, [r2, #0]
   82fde:	600b      	str	r3, [r1, #0]
   82fe0:	7812      	ldrb	r2, [r2, #0]
   82fe2:	1c10      	adds	r0, r2, #0
   82fe4:	bf18      	it	ne
   82fe6:	2001      	movne	r0, #1
   82fe8:	b002      	add	sp, #8
   82fea:	4770      	bx	lr
   82fec:	a901      	add	r1, sp, #4
   82fee:	2a00      	cmp	r2, #0
   82ff0:	d1f3      	bne.n	82fda <__ascii_mbtowc+0x6>
   82ff2:	4610      	mov	r0, r2
   82ff4:	b002      	add	sp, #8
   82ff6:	4770      	bx	lr
   82ff8:	f06f 0001 	mvn.w	r0, #1
   82ffc:	e7f4      	b.n	82fe8 <__ascii_mbtowc+0x14>
   82ffe:	bf00      	nop

00083000 <memchr>:
   83000:	0783      	lsls	r3, r0, #30
   83002:	b470      	push	{r4, r5, r6}
   83004:	b2cd      	uxtb	r5, r1
   83006:	d03d      	beq.n	83084 <memchr+0x84>
   83008:	1e54      	subs	r4, r2, #1
   8300a:	b30a      	cbz	r2, 83050 <memchr+0x50>
   8300c:	7803      	ldrb	r3, [r0, #0]
   8300e:	42ab      	cmp	r3, r5
   83010:	d01f      	beq.n	83052 <memchr+0x52>
   83012:	1c43      	adds	r3, r0, #1
   83014:	e005      	b.n	83022 <memchr+0x22>
   83016:	f114 34ff 	adds.w	r4, r4, #4294967295
   8301a:	d319      	bcc.n	83050 <memchr+0x50>
   8301c:	7802      	ldrb	r2, [r0, #0]
   8301e:	42aa      	cmp	r2, r5
   83020:	d017      	beq.n	83052 <memchr+0x52>
   83022:	f013 0f03 	tst.w	r3, #3
   83026:	4618      	mov	r0, r3
   83028:	f103 0301 	add.w	r3, r3, #1
   8302c:	d1f3      	bne.n	83016 <memchr+0x16>
   8302e:	2c03      	cmp	r4, #3
   83030:	d811      	bhi.n	83056 <memchr+0x56>
   83032:	b34c      	cbz	r4, 83088 <memchr+0x88>
   83034:	7803      	ldrb	r3, [r0, #0]
   83036:	42ab      	cmp	r3, r5
   83038:	d00b      	beq.n	83052 <memchr+0x52>
   8303a:	4404      	add	r4, r0
   8303c:	1c43      	adds	r3, r0, #1
   8303e:	e002      	b.n	83046 <memchr+0x46>
   83040:	7802      	ldrb	r2, [r0, #0]
   83042:	42aa      	cmp	r2, r5
   83044:	d005      	beq.n	83052 <memchr+0x52>
   83046:	429c      	cmp	r4, r3
   83048:	4618      	mov	r0, r3
   8304a:	f103 0301 	add.w	r3, r3, #1
   8304e:	d1f7      	bne.n	83040 <memchr+0x40>
   83050:	2000      	movs	r0, #0
   83052:	bc70      	pop	{r4, r5, r6}
   83054:	4770      	bx	lr
   83056:	0209      	lsls	r1, r1, #8
   83058:	b289      	uxth	r1, r1
   8305a:	4329      	orrs	r1, r5
   8305c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83060:	6803      	ldr	r3, [r0, #0]
   83062:	4606      	mov	r6, r0
   83064:	404b      	eors	r3, r1
   83066:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8306a:	ea22 0303 	bic.w	r3, r2, r3
   8306e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83072:	f100 0004 	add.w	r0, r0, #4
   83076:	d103      	bne.n	83080 <memchr+0x80>
   83078:	3c04      	subs	r4, #4
   8307a:	2c03      	cmp	r4, #3
   8307c:	d8f0      	bhi.n	83060 <memchr+0x60>
   8307e:	e7d8      	b.n	83032 <memchr+0x32>
   83080:	4630      	mov	r0, r6
   83082:	e7d7      	b.n	83034 <memchr+0x34>
   83084:	4614      	mov	r4, r2
   83086:	e7d2      	b.n	8302e <memchr+0x2e>
   83088:	4620      	mov	r0, r4
   8308a:	e7e2      	b.n	83052 <memchr+0x52>

0008308c <memcpy>:
   8308c:	4684      	mov	ip, r0
   8308e:	ea41 0300 	orr.w	r3, r1, r0
   83092:	f013 0303 	ands.w	r3, r3, #3
   83096:	d149      	bne.n	8312c <memcpy+0xa0>
   83098:	3a40      	subs	r2, #64	; 0x40
   8309a:	d323      	bcc.n	830e4 <memcpy+0x58>
   8309c:	680b      	ldr	r3, [r1, #0]
   8309e:	6003      	str	r3, [r0, #0]
   830a0:	684b      	ldr	r3, [r1, #4]
   830a2:	6043      	str	r3, [r0, #4]
   830a4:	688b      	ldr	r3, [r1, #8]
   830a6:	6083      	str	r3, [r0, #8]
   830a8:	68cb      	ldr	r3, [r1, #12]
   830aa:	60c3      	str	r3, [r0, #12]
   830ac:	690b      	ldr	r3, [r1, #16]
   830ae:	6103      	str	r3, [r0, #16]
   830b0:	694b      	ldr	r3, [r1, #20]
   830b2:	6143      	str	r3, [r0, #20]
   830b4:	698b      	ldr	r3, [r1, #24]
   830b6:	6183      	str	r3, [r0, #24]
   830b8:	69cb      	ldr	r3, [r1, #28]
   830ba:	61c3      	str	r3, [r0, #28]
   830bc:	6a0b      	ldr	r3, [r1, #32]
   830be:	6203      	str	r3, [r0, #32]
   830c0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   830c2:	6243      	str	r3, [r0, #36]	; 0x24
   830c4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   830c6:	6283      	str	r3, [r0, #40]	; 0x28
   830c8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   830ca:	62c3      	str	r3, [r0, #44]	; 0x2c
   830cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   830ce:	6303      	str	r3, [r0, #48]	; 0x30
   830d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   830d2:	6343      	str	r3, [r0, #52]	; 0x34
   830d4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   830d6:	6383      	str	r3, [r0, #56]	; 0x38
   830d8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   830da:	63c3      	str	r3, [r0, #60]	; 0x3c
   830dc:	3040      	adds	r0, #64	; 0x40
   830de:	3140      	adds	r1, #64	; 0x40
   830e0:	3a40      	subs	r2, #64	; 0x40
   830e2:	d2db      	bcs.n	8309c <memcpy+0x10>
   830e4:	3230      	adds	r2, #48	; 0x30
   830e6:	d30b      	bcc.n	83100 <memcpy+0x74>
   830e8:	680b      	ldr	r3, [r1, #0]
   830ea:	6003      	str	r3, [r0, #0]
   830ec:	684b      	ldr	r3, [r1, #4]
   830ee:	6043      	str	r3, [r0, #4]
   830f0:	688b      	ldr	r3, [r1, #8]
   830f2:	6083      	str	r3, [r0, #8]
   830f4:	68cb      	ldr	r3, [r1, #12]
   830f6:	60c3      	str	r3, [r0, #12]
   830f8:	3010      	adds	r0, #16
   830fa:	3110      	adds	r1, #16
   830fc:	3a10      	subs	r2, #16
   830fe:	d2f3      	bcs.n	830e8 <memcpy+0x5c>
   83100:	320c      	adds	r2, #12
   83102:	d305      	bcc.n	83110 <memcpy+0x84>
   83104:	f851 3b04 	ldr.w	r3, [r1], #4
   83108:	f840 3b04 	str.w	r3, [r0], #4
   8310c:	3a04      	subs	r2, #4
   8310e:	d2f9      	bcs.n	83104 <memcpy+0x78>
   83110:	3204      	adds	r2, #4
   83112:	d008      	beq.n	83126 <memcpy+0x9a>
   83114:	07d2      	lsls	r2, r2, #31
   83116:	bf1c      	itt	ne
   83118:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8311c:	f800 3b01 	strbne.w	r3, [r0], #1
   83120:	d301      	bcc.n	83126 <memcpy+0x9a>
   83122:	880b      	ldrh	r3, [r1, #0]
   83124:	8003      	strh	r3, [r0, #0]
   83126:	4660      	mov	r0, ip
   83128:	4770      	bx	lr
   8312a:	bf00      	nop
   8312c:	2a08      	cmp	r2, #8
   8312e:	d313      	bcc.n	83158 <memcpy+0xcc>
   83130:	078b      	lsls	r3, r1, #30
   83132:	d0b1      	beq.n	83098 <memcpy+0xc>
   83134:	f010 0303 	ands.w	r3, r0, #3
   83138:	d0ae      	beq.n	83098 <memcpy+0xc>
   8313a:	f1c3 0304 	rsb	r3, r3, #4
   8313e:	1ad2      	subs	r2, r2, r3
   83140:	07db      	lsls	r3, r3, #31
   83142:	bf1c      	itt	ne
   83144:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83148:	f800 3b01 	strbne.w	r3, [r0], #1
   8314c:	d3a4      	bcc.n	83098 <memcpy+0xc>
   8314e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83152:	f820 3b02 	strh.w	r3, [r0], #2
   83156:	e79f      	b.n	83098 <memcpy+0xc>
   83158:	3a04      	subs	r2, #4
   8315a:	d3d9      	bcc.n	83110 <memcpy+0x84>
   8315c:	3a01      	subs	r2, #1
   8315e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83162:	f800 3b01 	strb.w	r3, [r0], #1
   83166:	d2f9      	bcs.n	8315c <memcpy+0xd0>
   83168:	780b      	ldrb	r3, [r1, #0]
   8316a:	7003      	strb	r3, [r0, #0]
   8316c:	784b      	ldrb	r3, [r1, #1]
   8316e:	7043      	strb	r3, [r0, #1]
   83170:	788b      	ldrb	r3, [r1, #2]
   83172:	7083      	strb	r3, [r0, #2]
   83174:	4660      	mov	r0, ip
   83176:	4770      	bx	lr

00083178 <memmove>:
   83178:	4288      	cmp	r0, r1
   8317a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8317c:	d90d      	bls.n	8319a <memmove+0x22>
   8317e:	188b      	adds	r3, r1, r2
   83180:	4298      	cmp	r0, r3
   83182:	d20a      	bcs.n	8319a <memmove+0x22>
   83184:	1884      	adds	r4, r0, r2
   83186:	2a00      	cmp	r2, #0
   83188:	d051      	beq.n	8322e <memmove+0xb6>
   8318a:	4622      	mov	r2, r4
   8318c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83190:	4299      	cmp	r1, r3
   83192:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83196:	d1f9      	bne.n	8318c <memmove+0x14>
   83198:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8319a:	2a0f      	cmp	r2, #15
   8319c:	d948      	bls.n	83230 <memmove+0xb8>
   8319e:	ea41 0300 	orr.w	r3, r1, r0
   831a2:	079b      	lsls	r3, r3, #30
   831a4:	d146      	bne.n	83234 <memmove+0xbc>
   831a6:	4615      	mov	r5, r2
   831a8:	f100 0410 	add.w	r4, r0, #16
   831ac:	f101 0310 	add.w	r3, r1, #16
   831b0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   831b4:	3d10      	subs	r5, #16
   831b6:	f844 6c10 	str.w	r6, [r4, #-16]
   831ba:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   831be:	2d0f      	cmp	r5, #15
   831c0:	f844 6c0c 	str.w	r6, [r4, #-12]
   831c4:	f853 6c08 	ldr.w	r6, [r3, #-8]
   831c8:	f104 0410 	add.w	r4, r4, #16
   831cc:	f844 6c18 	str.w	r6, [r4, #-24]
   831d0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   831d4:	f103 0310 	add.w	r3, r3, #16
   831d8:	f844 6c14 	str.w	r6, [r4, #-20]
   831dc:	d8e8      	bhi.n	831b0 <memmove+0x38>
   831de:	f1a2 0310 	sub.w	r3, r2, #16
   831e2:	f023 030f 	bic.w	r3, r3, #15
   831e6:	f002 0e0f 	and.w	lr, r2, #15
   831ea:	3310      	adds	r3, #16
   831ec:	f1be 0f03 	cmp.w	lr, #3
   831f0:	4419      	add	r1, r3
   831f2:	4403      	add	r3, r0
   831f4:	d921      	bls.n	8323a <memmove+0xc2>
   831f6:	460e      	mov	r6, r1
   831f8:	4674      	mov	r4, lr
   831fa:	1f1d      	subs	r5, r3, #4
   831fc:	f856 7b04 	ldr.w	r7, [r6], #4
   83200:	3c04      	subs	r4, #4
   83202:	2c03      	cmp	r4, #3
   83204:	f845 7f04 	str.w	r7, [r5, #4]!
   83208:	d8f8      	bhi.n	831fc <memmove+0x84>
   8320a:	f1ae 0404 	sub.w	r4, lr, #4
   8320e:	f024 0403 	bic.w	r4, r4, #3
   83212:	3404      	adds	r4, #4
   83214:	4421      	add	r1, r4
   83216:	4423      	add	r3, r4
   83218:	f002 0203 	and.w	r2, r2, #3
   8321c:	b162      	cbz	r2, 83238 <memmove+0xc0>
   8321e:	3b01      	subs	r3, #1
   83220:	440a      	add	r2, r1
   83222:	f811 4b01 	ldrb.w	r4, [r1], #1
   83226:	428a      	cmp	r2, r1
   83228:	f803 4f01 	strb.w	r4, [r3, #1]!
   8322c:	d1f9      	bne.n	83222 <memmove+0xaa>
   8322e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83230:	4603      	mov	r3, r0
   83232:	e7f3      	b.n	8321c <memmove+0xa4>
   83234:	4603      	mov	r3, r0
   83236:	e7f2      	b.n	8321e <memmove+0xa6>
   83238:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8323a:	4672      	mov	r2, lr
   8323c:	e7ee      	b.n	8321c <memmove+0xa4>
   8323e:	bf00      	nop

00083240 <__malloc_lock>:
   83240:	4801      	ldr	r0, [pc, #4]	; (83248 <__malloc_lock+0x8>)
   83242:	f7ff bba1 	b.w	82988 <__retarget_lock_acquire_recursive>
   83246:	bf00      	nop
   83248:	20070c74 	.word	0x20070c74

0008324c <__malloc_unlock>:
   8324c:	4801      	ldr	r0, [pc, #4]	; (83254 <__malloc_unlock+0x8>)
   8324e:	f7ff bb9d 	b.w	8298c <__retarget_lock_release_recursive>
   83252:	bf00      	nop
   83254:	20070c74 	.word	0x20070c74

00083258 <_realloc_r>:
   83258:	2900      	cmp	r1, #0
   8325a:	f000 8094 	beq.w	83386 <_realloc_r+0x12e>
   8325e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83262:	460c      	mov	r4, r1
   83264:	4615      	mov	r5, r2
   83266:	b083      	sub	sp, #12
   83268:	4680      	mov	r8, r0
   8326a:	f105 060b 	add.w	r6, r5, #11
   8326e:	f7ff ffe7 	bl	83240 <__malloc_lock>
   83272:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83276:	2e16      	cmp	r6, #22
   83278:	f02e 0703 	bic.w	r7, lr, #3
   8327c:	f1a4 0908 	sub.w	r9, r4, #8
   83280:	d83c      	bhi.n	832fc <_realloc_r+0xa4>
   83282:	2210      	movs	r2, #16
   83284:	4616      	mov	r6, r2
   83286:	42b5      	cmp	r5, r6
   83288:	d83d      	bhi.n	83306 <_realloc_r+0xae>
   8328a:	4297      	cmp	r7, r2
   8328c:	da43      	bge.n	83316 <_realloc_r+0xbe>
   8328e:	4bc6      	ldr	r3, [pc, #792]	; (835a8 <_realloc_r+0x350>)
   83290:	eb09 0007 	add.w	r0, r9, r7
   83294:	6899      	ldr	r1, [r3, #8]
   83296:	4288      	cmp	r0, r1
   83298:	f000 80c3 	beq.w	83422 <_realloc_r+0x1ca>
   8329c:	6843      	ldr	r3, [r0, #4]
   8329e:	f023 0101 	bic.w	r1, r3, #1
   832a2:	4401      	add	r1, r0
   832a4:	6849      	ldr	r1, [r1, #4]
   832a6:	07c9      	lsls	r1, r1, #31
   832a8:	d54d      	bpl.n	83346 <_realloc_r+0xee>
   832aa:	f01e 0f01 	tst.w	lr, #1
   832ae:	f000 809b 	beq.w	833e8 <_realloc_r+0x190>
   832b2:	4629      	mov	r1, r5
   832b4:	4640      	mov	r0, r8
   832b6:	f7ff fbeb 	bl	82a90 <_malloc_r>
   832ba:	4605      	mov	r5, r0
   832bc:	2800      	cmp	r0, #0
   832be:	d03b      	beq.n	83338 <_realloc_r+0xe0>
   832c0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   832c4:	f1a0 0208 	sub.w	r2, r0, #8
   832c8:	f023 0301 	bic.w	r3, r3, #1
   832cc:	444b      	add	r3, r9
   832ce:	429a      	cmp	r2, r3
   832d0:	f000 812b 	beq.w	8352a <_realloc_r+0x2d2>
   832d4:	1f3a      	subs	r2, r7, #4
   832d6:	2a24      	cmp	r2, #36	; 0x24
   832d8:	f200 8118 	bhi.w	8350c <_realloc_r+0x2b4>
   832dc:	2a13      	cmp	r2, #19
   832de:	f200 80eb 	bhi.w	834b8 <_realloc_r+0x260>
   832e2:	4603      	mov	r3, r0
   832e4:	4622      	mov	r2, r4
   832e6:	6811      	ldr	r1, [r2, #0]
   832e8:	6019      	str	r1, [r3, #0]
   832ea:	6851      	ldr	r1, [r2, #4]
   832ec:	6059      	str	r1, [r3, #4]
   832ee:	6892      	ldr	r2, [r2, #8]
   832f0:	609a      	str	r2, [r3, #8]
   832f2:	4621      	mov	r1, r4
   832f4:	4640      	mov	r0, r8
   832f6:	f7ff f8ad 	bl	82454 <_free_r>
   832fa:	e01d      	b.n	83338 <_realloc_r+0xe0>
   832fc:	f026 0607 	bic.w	r6, r6, #7
   83300:	2e00      	cmp	r6, #0
   83302:	4632      	mov	r2, r6
   83304:	dabf      	bge.n	83286 <_realloc_r+0x2e>
   83306:	2500      	movs	r5, #0
   83308:	230c      	movs	r3, #12
   8330a:	4628      	mov	r0, r5
   8330c:	f8c8 3000 	str.w	r3, [r8]
   83310:	b003      	add	sp, #12
   83312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83316:	4625      	mov	r5, r4
   83318:	1bbb      	subs	r3, r7, r6
   8331a:	2b0f      	cmp	r3, #15
   8331c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83320:	d81d      	bhi.n	8335e <_realloc_r+0x106>
   83322:	f002 0201 	and.w	r2, r2, #1
   83326:	433a      	orrs	r2, r7
   83328:	eb09 0107 	add.w	r1, r9, r7
   8332c:	f8c9 2004 	str.w	r2, [r9, #4]
   83330:	684b      	ldr	r3, [r1, #4]
   83332:	f043 0301 	orr.w	r3, r3, #1
   83336:	604b      	str	r3, [r1, #4]
   83338:	4640      	mov	r0, r8
   8333a:	f7ff ff87 	bl	8324c <__malloc_unlock>
   8333e:	4628      	mov	r0, r5
   83340:	b003      	add	sp, #12
   83342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83346:	f023 0303 	bic.w	r3, r3, #3
   8334a:	18f9      	adds	r1, r7, r3
   8334c:	4291      	cmp	r1, r2
   8334e:	db1d      	blt.n	8338c <_realloc_r+0x134>
   83350:	68c3      	ldr	r3, [r0, #12]
   83352:	6882      	ldr	r2, [r0, #8]
   83354:	4625      	mov	r5, r4
   83356:	60d3      	str	r3, [r2, #12]
   83358:	460f      	mov	r7, r1
   8335a:	609a      	str	r2, [r3, #8]
   8335c:	e7dc      	b.n	83318 <_realloc_r+0xc0>
   8335e:	f002 0201 	and.w	r2, r2, #1
   83362:	eb09 0106 	add.w	r1, r9, r6
   83366:	f043 0301 	orr.w	r3, r3, #1
   8336a:	4332      	orrs	r2, r6
   8336c:	f8c9 2004 	str.w	r2, [r9, #4]
   83370:	444f      	add	r7, r9
   83372:	604b      	str	r3, [r1, #4]
   83374:	687b      	ldr	r3, [r7, #4]
   83376:	3108      	adds	r1, #8
   83378:	f043 0301 	orr.w	r3, r3, #1
   8337c:	607b      	str	r3, [r7, #4]
   8337e:	4640      	mov	r0, r8
   83380:	f7ff f868 	bl	82454 <_free_r>
   83384:	e7d8      	b.n	83338 <_realloc_r+0xe0>
   83386:	4611      	mov	r1, r2
   83388:	f7ff bb82 	b.w	82a90 <_malloc_r>
   8338c:	f01e 0f01 	tst.w	lr, #1
   83390:	d18f      	bne.n	832b2 <_realloc_r+0x5a>
   83392:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83396:	eba9 0a01 	sub.w	sl, r9, r1
   8339a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8339e:	f021 0103 	bic.w	r1, r1, #3
   833a2:	440b      	add	r3, r1
   833a4:	443b      	add	r3, r7
   833a6:	4293      	cmp	r3, r2
   833a8:	db26      	blt.n	833f8 <_realloc_r+0x1a0>
   833aa:	4655      	mov	r5, sl
   833ac:	68c1      	ldr	r1, [r0, #12]
   833ae:	6880      	ldr	r0, [r0, #8]
   833b0:	1f3a      	subs	r2, r7, #4
   833b2:	60c1      	str	r1, [r0, #12]
   833b4:	6088      	str	r0, [r1, #8]
   833b6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   833ba:	f8da 100c 	ldr.w	r1, [sl, #12]
   833be:	2a24      	cmp	r2, #36	; 0x24
   833c0:	60c1      	str	r1, [r0, #12]
   833c2:	6088      	str	r0, [r1, #8]
   833c4:	d826      	bhi.n	83414 <_realloc_r+0x1bc>
   833c6:	2a13      	cmp	r2, #19
   833c8:	f240 8081 	bls.w	834ce <_realloc_r+0x276>
   833cc:	6821      	ldr	r1, [r4, #0]
   833ce:	2a1b      	cmp	r2, #27
   833d0:	f8ca 1008 	str.w	r1, [sl, #8]
   833d4:	6861      	ldr	r1, [r4, #4]
   833d6:	f8ca 100c 	str.w	r1, [sl, #12]
   833da:	f200 80ad 	bhi.w	83538 <_realloc_r+0x2e0>
   833de:	f104 0008 	add.w	r0, r4, #8
   833e2:	f10a 0210 	add.w	r2, sl, #16
   833e6:	e074      	b.n	834d2 <_realloc_r+0x27a>
   833e8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   833ec:	eba9 0a03 	sub.w	sl, r9, r3
   833f0:	f8da 1004 	ldr.w	r1, [sl, #4]
   833f4:	f021 0103 	bic.w	r1, r1, #3
   833f8:	187b      	adds	r3, r7, r1
   833fa:	4293      	cmp	r3, r2
   833fc:	f6ff af59 	blt.w	832b2 <_realloc_r+0x5a>
   83400:	4655      	mov	r5, sl
   83402:	f8da 100c 	ldr.w	r1, [sl, #12]
   83406:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8340a:	1f3a      	subs	r2, r7, #4
   8340c:	2a24      	cmp	r2, #36	; 0x24
   8340e:	60c1      	str	r1, [r0, #12]
   83410:	6088      	str	r0, [r1, #8]
   83412:	d9d8      	bls.n	833c6 <_realloc_r+0x16e>
   83414:	4621      	mov	r1, r4
   83416:	4628      	mov	r0, r5
   83418:	461f      	mov	r7, r3
   8341a:	46d1      	mov	r9, sl
   8341c:	f7ff feac 	bl	83178 <memmove>
   83420:	e77a      	b.n	83318 <_realloc_r+0xc0>
   83422:	6841      	ldr	r1, [r0, #4]
   83424:	f106 0010 	add.w	r0, r6, #16
   83428:	f021 0b03 	bic.w	fp, r1, #3
   8342c:	44bb      	add	fp, r7
   8342e:	4583      	cmp	fp, r0
   83430:	da58      	bge.n	834e4 <_realloc_r+0x28c>
   83432:	f01e 0f01 	tst.w	lr, #1
   83436:	f47f af3c 	bne.w	832b2 <_realloc_r+0x5a>
   8343a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8343e:	eba9 0a01 	sub.w	sl, r9, r1
   83442:	f8da 1004 	ldr.w	r1, [sl, #4]
   83446:	f021 0103 	bic.w	r1, r1, #3
   8344a:	448b      	add	fp, r1
   8344c:	4558      	cmp	r0, fp
   8344e:	dcd3      	bgt.n	833f8 <_realloc_r+0x1a0>
   83450:	4655      	mov	r5, sl
   83452:	f8da 100c 	ldr.w	r1, [sl, #12]
   83456:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8345a:	1f3a      	subs	r2, r7, #4
   8345c:	2a24      	cmp	r2, #36	; 0x24
   8345e:	60c1      	str	r1, [r0, #12]
   83460:	6088      	str	r0, [r1, #8]
   83462:	f200 808d 	bhi.w	83580 <_realloc_r+0x328>
   83466:	2a13      	cmp	r2, #19
   83468:	f240 8087 	bls.w	8357a <_realloc_r+0x322>
   8346c:	6821      	ldr	r1, [r4, #0]
   8346e:	2a1b      	cmp	r2, #27
   83470:	f8ca 1008 	str.w	r1, [sl, #8]
   83474:	6861      	ldr	r1, [r4, #4]
   83476:	f8ca 100c 	str.w	r1, [sl, #12]
   8347a:	f200 8088 	bhi.w	8358e <_realloc_r+0x336>
   8347e:	f104 0108 	add.w	r1, r4, #8
   83482:	f10a 0210 	add.w	r2, sl, #16
   83486:	6808      	ldr	r0, [r1, #0]
   83488:	6010      	str	r0, [r2, #0]
   8348a:	6848      	ldr	r0, [r1, #4]
   8348c:	6050      	str	r0, [r2, #4]
   8348e:	6889      	ldr	r1, [r1, #8]
   83490:	6091      	str	r1, [r2, #8]
   83492:	ebab 0206 	sub.w	r2, fp, r6
   83496:	eb0a 0106 	add.w	r1, sl, r6
   8349a:	f042 0201 	orr.w	r2, r2, #1
   8349e:	6099      	str	r1, [r3, #8]
   834a0:	604a      	str	r2, [r1, #4]
   834a2:	f8da 3004 	ldr.w	r3, [sl, #4]
   834a6:	4640      	mov	r0, r8
   834a8:	f003 0301 	and.w	r3, r3, #1
   834ac:	431e      	orrs	r6, r3
   834ae:	f8ca 6004 	str.w	r6, [sl, #4]
   834b2:	f7ff fecb 	bl	8324c <__malloc_unlock>
   834b6:	e742      	b.n	8333e <_realloc_r+0xe6>
   834b8:	6823      	ldr	r3, [r4, #0]
   834ba:	2a1b      	cmp	r2, #27
   834bc:	6003      	str	r3, [r0, #0]
   834be:	6863      	ldr	r3, [r4, #4]
   834c0:	6043      	str	r3, [r0, #4]
   834c2:	d827      	bhi.n	83514 <_realloc_r+0x2bc>
   834c4:	f100 0308 	add.w	r3, r0, #8
   834c8:	f104 0208 	add.w	r2, r4, #8
   834cc:	e70b      	b.n	832e6 <_realloc_r+0x8e>
   834ce:	4620      	mov	r0, r4
   834d0:	462a      	mov	r2, r5
   834d2:	6801      	ldr	r1, [r0, #0]
   834d4:	461f      	mov	r7, r3
   834d6:	6011      	str	r1, [r2, #0]
   834d8:	6841      	ldr	r1, [r0, #4]
   834da:	46d1      	mov	r9, sl
   834dc:	6051      	str	r1, [r2, #4]
   834de:	6883      	ldr	r3, [r0, #8]
   834e0:	6093      	str	r3, [r2, #8]
   834e2:	e719      	b.n	83318 <_realloc_r+0xc0>
   834e4:	ebab 0b06 	sub.w	fp, fp, r6
   834e8:	eb09 0106 	add.w	r1, r9, r6
   834ec:	f04b 0201 	orr.w	r2, fp, #1
   834f0:	6099      	str	r1, [r3, #8]
   834f2:	604a      	str	r2, [r1, #4]
   834f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   834f8:	4640      	mov	r0, r8
   834fa:	f003 0301 	and.w	r3, r3, #1
   834fe:	431e      	orrs	r6, r3
   83500:	f844 6c04 	str.w	r6, [r4, #-4]
   83504:	f7ff fea2 	bl	8324c <__malloc_unlock>
   83508:	4625      	mov	r5, r4
   8350a:	e718      	b.n	8333e <_realloc_r+0xe6>
   8350c:	4621      	mov	r1, r4
   8350e:	f7ff fe33 	bl	83178 <memmove>
   83512:	e6ee      	b.n	832f2 <_realloc_r+0x9a>
   83514:	68a3      	ldr	r3, [r4, #8]
   83516:	2a24      	cmp	r2, #36	; 0x24
   83518:	6083      	str	r3, [r0, #8]
   8351a:	68e3      	ldr	r3, [r4, #12]
   8351c:	60c3      	str	r3, [r0, #12]
   8351e:	d018      	beq.n	83552 <_realloc_r+0x2fa>
   83520:	f100 0310 	add.w	r3, r0, #16
   83524:	f104 0210 	add.w	r2, r4, #16
   83528:	e6dd      	b.n	832e6 <_realloc_r+0x8e>
   8352a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8352e:	4625      	mov	r5, r4
   83530:	f023 0303 	bic.w	r3, r3, #3
   83534:	441f      	add	r7, r3
   83536:	e6ef      	b.n	83318 <_realloc_r+0xc0>
   83538:	68a1      	ldr	r1, [r4, #8]
   8353a:	2a24      	cmp	r2, #36	; 0x24
   8353c:	f8ca 1010 	str.w	r1, [sl, #16]
   83540:	68e1      	ldr	r1, [r4, #12]
   83542:	f8ca 1014 	str.w	r1, [sl, #20]
   83546:	d00d      	beq.n	83564 <_realloc_r+0x30c>
   83548:	f104 0010 	add.w	r0, r4, #16
   8354c:	f10a 0218 	add.w	r2, sl, #24
   83550:	e7bf      	b.n	834d2 <_realloc_r+0x27a>
   83552:	6922      	ldr	r2, [r4, #16]
   83554:	f100 0318 	add.w	r3, r0, #24
   83558:	6102      	str	r2, [r0, #16]
   8355a:	6961      	ldr	r1, [r4, #20]
   8355c:	f104 0218 	add.w	r2, r4, #24
   83560:	6141      	str	r1, [r0, #20]
   83562:	e6c0      	b.n	832e6 <_realloc_r+0x8e>
   83564:	6922      	ldr	r2, [r4, #16]
   83566:	f104 0018 	add.w	r0, r4, #24
   8356a:	f8ca 2018 	str.w	r2, [sl, #24]
   8356e:	6961      	ldr	r1, [r4, #20]
   83570:	f10a 0220 	add.w	r2, sl, #32
   83574:	f8ca 101c 	str.w	r1, [sl, #28]
   83578:	e7ab      	b.n	834d2 <_realloc_r+0x27a>
   8357a:	4621      	mov	r1, r4
   8357c:	462a      	mov	r2, r5
   8357e:	e782      	b.n	83486 <_realloc_r+0x22e>
   83580:	4621      	mov	r1, r4
   83582:	4628      	mov	r0, r5
   83584:	9301      	str	r3, [sp, #4]
   83586:	f7ff fdf7 	bl	83178 <memmove>
   8358a:	9b01      	ldr	r3, [sp, #4]
   8358c:	e781      	b.n	83492 <_realloc_r+0x23a>
   8358e:	68a1      	ldr	r1, [r4, #8]
   83590:	2a24      	cmp	r2, #36	; 0x24
   83592:	f8ca 1010 	str.w	r1, [sl, #16]
   83596:	68e1      	ldr	r1, [r4, #12]
   83598:	f8ca 1014 	str.w	r1, [sl, #20]
   8359c:	d006      	beq.n	835ac <_realloc_r+0x354>
   8359e:	f104 0110 	add.w	r1, r4, #16
   835a2:	f10a 0218 	add.w	r2, sl, #24
   835a6:	e76e      	b.n	83486 <_realloc_r+0x22e>
   835a8:	200706e0 	.word	0x200706e0
   835ac:	6922      	ldr	r2, [r4, #16]
   835ae:	f104 0118 	add.w	r1, r4, #24
   835b2:	f8ca 2018 	str.w	r2, [sl, #24]
   835b6:	6960      	ldr	r0, [r4, #20]
   835b8:	f10a 0220 	add.w	r2, sl, #32
   835bc:	f8ca 001c 	str.w	r0, [sl, #28]
   835c0:	e761      	b.n	83486 <_realloc_r+0x22e>
   835c2:	bf00      	nop

000835c4 <_sbrk_r>:
   835c4:	b538      	push	{r3, r4, r5, lr}
   835c6:	2300      	movs	r3, #0
   835c8:	4c06      	ldr	r4, [pc, #24]	; (835e4 <_sbrk_r+0x20>)
   835ca:	4605      	mov	r5, r0
   835cc:	4608      	mov	r0, r1
   835ce:	6023      	str	r3, [r4, #0]
   835d0:	f7fd fc2a 	bl	80e28 <_sbrk>
   835d4:	1c43      	adds	r3, r0, #1
   835d6:	d000      	beq.n	835da <_sbrk_r+0x16>
   835d8:	bd38      	pop	{r3, r4, r5, pc}
   835da:	6823      	ldr	r3, [r4, #0]
   835dc:	2b00      	cmp	r3, #0
   835de:	d0fb      	beq.n	835d8 <_sbrk_r+0x14>
   835e0:	602b      	str	r3, [r5, #0]
   835e2:	bd38      	pop	{r3, r4, r5, pc}
   835e4:	20070c88 	.word	0x20070c88

000835e8 <__sread>:
   835e8:	b510      	push	{r4, lr}
   835ea:	460c      	mov	r4, r1
   835ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   835f0:	f000 fa22 	bl	83a38 <_read_r>
   835f4:	2800      	cmp	r0, #0
   835f6:	db03      	blt.n	83600 <__sread+0x18>
   835f8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   835fa:	4403      	add	r3, r0
   835fc:	6523      	str	r3, [r4, #80]	; 0x50
   835fe:	bd10      	pop	{r4, pc}
   83600:	89a3      	ldrh	r3, [r4, #12]
   83602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83606:	81a3      	strh	r3, [r4, #12]
   83608:	bd10      	pop	{r4, pc}
   8360a:	bf00      	nop

0008360c <__swrite>:
   8360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83610:	460c      	mov	r4, r1
   83612:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83616:	461f      	mov	r7, r3
   83618:	05cb      	lsls	r3, r1, #23
   8361a:	4616      	mov	r6, r2
   8361c:	4605      	mov	r5, r0
   8361e:	d507      	bpl.n	83630 <__swrite+0x24>
   83620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83624:	2302      	movs	r3, #2
   83626:	2200      	movs	r2, #0
   83628:	f000 f9f0 	bl	83a0c <_lseek_r>
   8362c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83630:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83634:	81a1      	strh	r1, [r4, #12]
   83636:	463b      	mov	r3, r7
   83638:	4632      	mov	r2, r6
   8363a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8363e:	4628      	mov	r0, r5
   83640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83644:	f000 b8d0 	b.w	837e8 <_write_r>

00083648 <__sseek>:
   83648:	b510      	push	{r4, lr}
   8364a:	460c      	mov	r4, r1
   8364c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83650:	f000 f9dc 	bl	83a0c <_lseek_r>
   83654:	89a3      	ldrh	r3, [r4, #12]
   83656:	1c42      	adds	r2, r0, #1
   83658:	bf0e      	itee	eq
   8365a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8365e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83662:	6520      	strne	r0, [r4, #80]	; 0x50
   83664:	81a3      	strh	r3, [r4, #12]
   83666:	bd10      	pop	{r4, pc}

00083668 <__sclose>:
   83668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8366c:	f000 b934 	b.w	838d8 <_close_r>

00083670 <strlen>:
   83670:	f020 0103 	bic.w	r1, r0, #3
   83674:	f010 0003 	ands.w	r0, r0, #3
   83678:	f1c0 0000 	rsb	r0, r0, #0
   8367c:	f851 3b04 	ldr.w	r3, [r1], #4
   83680:	f100 0c04 	add.w	ip, r0, #4
   83684:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83688:	f06f 0200 	mvn.w	r2, #0
   8368c:	bf1c      	itt	ne
   8368e:	fa22 f20c 	lsrne.w	r2, r2, ip
   83692:	4313      	orrne	r3, r2
   83694:	f04f 0c01 	mov.w	ip, #1
   83698:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8369c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   836a0:	eba3 020c 	sub.w	r2, r3, ip
   836a4:	ea22 0203 	bic.w	r2, r2, r3
   836a8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   836ac:	bf04      	itt	eq
   836ae:	f851 3b04 	ldreq.w	r3, [r1], #4
   836b2:	3004      	addeq	r0, #4
   836b4:	d0f4      	beq.n	836a0 <strlen+0x30>
   836b6:	f1c2 0100 	rsb	r1, r2, #0
   836ba:	ea02 0201 	and.w	r2, r2, r1
   836be:	fab2 f282 	clz	r2, r2
   836c2:	f1c2 021f 	rsb	r2, r2, #31
   836c6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   836ca:	4770      	bx	lr

000836cc <__swbuf_r>:
   836cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   836ce:	460d      	mov	r5, r1
   836d0:	4614      	mov	r4, r2
   836d2:	4606      	mov	r6, r0
   836d4:	b110      	cbz	r0, 836dc <__swbuf_r+0x10>
   836d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   836d8:	2b00      	cmp	r3, #0
   836da:	d04b      	beq.n	83774 <__swbuf_r+0xa8>
   836dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   836e0:	69a3      	ldr	r3, [r4, #24]
   836e2:	b291      	uxth	r1, r2
   836e4:	0708      	lsls	r0, r1, #28
   836e6:	60a3      	str	r3, [r4, #8]
   836e8:	d539      	bpl.n	8375e <__swbuf_r+0x92>
   836ea:	6923      	ldr	r3, [r4, #16]
   836ec:	2b00      	cmp	r3, #0
   836ee:	d036      	beq.n	8375e <__swbuf_r+0x92>
   836f0:	b2ed      	uxtb	r5, r5
   836f2:	0489      	lsls	r1, r1, #18
   836f4:	462f      	mov	r7, r5
   836f6:	d515      	bpl.n	83724 <__swbuf_r+0x58>
   836f8:	6822      	ldr	r2, [r4, #0]
   836fa:	6961      	ldr	r1, [r4, #20]
   836fc:	1ad3      	subs	r3, r2, r3
   836fe:	428b      	cmp	r3, r1
   83700:	da1c      	bge.n	8373c <__swbuf_r+0x70>
   83702:	3301      	adds	r3, #1
   83704:	68a1      	ldr	r1, [r4, #8]
   83706:	1c50      	adds	r0, r2, #1
   83708:	3901      	subs	r1, #1
   8370a:	60a1      	str	r1, [r4, #8]
   8370c:	6020      	str	r0, [r4, #0]
   8370e:	7015      	strb	r5, [r2, #0]
   83710:	6962      	ldr	r2, [r4, #20]
   83712:	429a      	cmp	r2, r3
   83714:	d01a      	beq.n	8374c <__swbuf_r+0x80>
   83716:	89a3      	ldrh	r3, [r4, #12]
   83718:	07db      	lsls	r3, r3, #31
   8371a:	d501      	bpl.n	83720 <__swbuf_r+0x54>
   8371c:	2d0a      	cmp	r5, #10
   8371e:	d015      	beq.n	8374c <__swbuf_r+0x80>
   83720:	4638      	mov	r0, r7
   83722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83724:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8372a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8372e:	81a2      	strh	r2, [r4, #12]
   83730:	6822      	ldr	r2, [r4, #0]
   83732:	6661      	str	r1, [r4, #100]	; 0x64
   83734:	6961      	ldr	r1, [r4, #20]
   83736:	1ad3      	subs	r3, r2, r3
   83738:	428b      	cmp	r3, r1
   8373a:	dbe2      	blt.n	83702 <__swbuf_r+0x36>
   8373c:	4621      	mov	r1, r4
   8373e:	4630      	mov	r0, r6
   83740:	f7fe fd0a 	bl	82158 <_fflush_r>
   83744:	b940      	cbnz	r0, 83758 <__swbuf_r+0x8c>
   83746:	2301      	movs	r3, #1
   83748:	6822      	ldr	r2, [r4, #0]
   8374a:	e7db      	b.n	83704 <__swbuf_r+0x38>
   8374c:	4621      	mov	r1, r4
   8374e:	4630      	mov	r0, r6
   83750:	f7fe fd02 	bl	82158 <_fflush_r>
   83754:	2800      	cmp	r0, #0
   83756:	d0e3      	beq.n	83720 <__swbuf_r+0x54>
   83758:	f04f 37ff 	mov.w	r7, #4294967295
   8375c:	e7e0      	b.n	83720 <__swbuf_r+0x54>
   8375e:	4621      	mov	r1, r4
   83760:	4630      	mov	r0, r6
   83762:	f7fe fbe9 	bl	81f38 <__swsetup_r>
   83766:	2800      	cmp	r0, #0
   83768:	d1f6      	bne.n	83758 <__swbuf_r+0x8c>
   8376a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8376e:	6923      	ldr	r3, [r4, #16]
   83770:	b291      	uxth	r1, r2
   83772:	e7bd      	b.n	836f0 <__swbuf_r+0x24>
   83774:	f7fe fd48 	bl	82208 <__sinit>
   83778:	e7b0      	b.n	836dc <__swbuf_r+0x10>
   8377a:	bf00      	nop

0008377c <_wcrtomb_r>:
   8377c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8377e:	4606      	mov	r6, r0
   83780:	b085      	sub	sp, #20
   83782:	461f      	mov	r7, r3
   83784:	b189      	cbz	r1, 837aa <_wcrtomb_r+0x2e>
   83786:	4c10      	ldr	r4, [pc, #64]	; (837c8 <_wcrtomb_r+0x4c>)
   83788:	4d10      	ldr	r5, [pc, #64]	; (837cc <_wcrtomb_r+0x50>)
   8378a:	6824      	ldr	r4, [r4, #0]
   8378c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8378e:	2c00      	cmp	r4, #0
   83790:	bf08      	it	eq
   83792:	462c      	moveq	r4, r5
   83794:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83798:	47a0      	blx	r4
   8379a:	1c43      	adds	r3, r0, #1
   8379c:	d103      	bne.n	837a6 <_wcrtomb_r+0x2a>
   8379e:	2200      	movs	r2, #0
   837a0:	238a      	movs	r3, #138	; 0x8a
   837a2:	603a      	str	r2, [r7, #0]
   837a4:	6033      	str	r3, [r6, #0]
   837a6:	b005      	add	sp, #20
   837a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837aa:	460c      	mov	r4, r1
   837ac:	4a06      	ldr	r2, [pc, #24]	; (837c8 <_wcrtomb_r+0x4c>)
   837ae:	4d07      	ldr	r5, [pc, #28]	; (837cc <_wcrtomb_r+0x50>)
   837b0:	6811      	ldr	r1, [r2, #0]
   837b2:	4622      	mov	r2, r4
   837b4:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   837b6:	a901      	add	r1, sp, #4
   837b8:	2c00      	cmp	r4, #0
   837ba:	bf08      	it	eq
   837bc:	462c      	moveq	r4, r5
   837be:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   837c2:	47a0      	blx	r4
   837c4:	e7e9      	b.n	8379a <_wcrtomb_r+0x1e>
   837c6:	bf00      	nop
   837c8:	20070144 	.word	0x20070144
   837cc:	20070574 	.word	0x20070574

000837d0 <__ascii_wctomb>:
   837d0:	b119      	cbz	r1, 837da <__ascii_wctomb+0xa>
   837d2:	2aff      	cmp	r2, #255	; 0xff
   837d4:	d803      	bhi.n	837de <__ascii_wctomb+0xe>
   837d6:	700a      	strb	r2, [r1, #0]
   837d8:	2101      	movs	r1, #1
   837da:	4608      	mov	r0, r1
   837dc:	4770      	bx	lr
   837de:	238a      	movs	r3, #138	; 0x8a
   837e0:	f04f 31ff 	mov.w	r1, #4294967295
   837e4:	6003      	str	r3, [r0, #0]
   837e6:	e7f8      	b.n	837da <__ascii_wctomb+0xa>

000837e8 <_write_r>:
   837e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   837ea:	460e      	mov	r6, r1
   837ec:	2500      	movs	r5, #0
   837ee:	4c08      	ldr	r4, [pc, #32]	; (83810 <_write_r+0x28>)
   837f0:	4611      	mov	r1, r2
   837f2:	4607      	mov	r7, r0
   837f4:	461a      	mov	r2, r3
   837f6:	4630      	mov	r0, r6
   837f8:	6025      	str	r5, [r4, #0]
   837fa:	f7fc fe2f 	bl	8045c <_write>
   837fe:	1c43      	adds	r3, r0, #1
   83800:	d000      	beq.n	83804 <_write_r+0x1c>
   83802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83804:	6823      	ldr	r3, [r4, #0]
   83806:	2b00      	cmp	r3, #0
   83808:	d0fb      	beq.n	83802 <_write_r+0x1a>
   8380a:	603b      	str	r3, [r7, #0]
   8380c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8380e:	bf00      	nop
   83810:	20070c88 	.word	0x20070c88

00083814 <__register_exitproc>:
   83814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83818:	4d2c      	ldr	r5, [pc, #176]	; (838cc <__register_exitproc+0xb8>)
   8381a:	4606      	mov	r6, r0
   8381c:	6828      	ldr	r0, [r5, #0]
   8381e:	4698      	mov	r8, r3
   83820:	460f      	mov	r7, r1
   83822:	4691      	mov	r9, r2
   83824:	f7ff f8b0 	bl	82988 <__retarget_lock_acquire_recursive>
   83828:	4b29      	ldr	r3, [pc, #164]	; (838d0 <__register_exitproc+0xbc>)
   8382a:	681c      	ldr	r4, [r3, #0]
   8382c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83830:	2b00      	cmp	r3, #0
   83832:	d03e      	beq.n	838b2 <__register_exitproc+0x9e>
   83834:	685a      	ldr	r2, [r3, #4]
   83836:	2a1f      	cmp	r2, #31
   83838:	dc1c      	bgt.n	83874 <__register_exitproc+0x60>
   8383a:	f102 0e01 	add.w	lr, r2, #1
   8383e:	b176      	cbz	r6, 8385e <__register_exitproc+0x4a>
   83840:	2101      	movs	r1, #1
   83842:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83846:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8384a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   8384e:	4091      	lsls	r1, r2
   83850:	4308      	orrs	r0, r1
   83852:	2e02      	cmp	r6, #2
   83854:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83858:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   8385c:	d023      	beq.n	838a6 <__register_exitproc+0x92>
   8385e:	3202      	adds	r2, #2
   83860:	f8c3 e004 	str.w	lr, [r3, #4]
   83864:	6828      	ldr	r0, [r5, #0]
   83866:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8386a:	f7ff f88f 	bl	8298c <__retarget_lock_release_recursive>
   8386e:	2000      	movs	r0, #0
   83870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83874:	4b17      	ldr	r3, [pc, #92]	; (838d4 <__register_exitproc+0xc0>)
   83876:	b30b      	cbz	r3, 838bc <__register_exitproc+0xa8>
   83878:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8387c:	f7ff f900 	bl	82a80 <malloc>
   83880:	4603      	mov	r3, r0
   83882:	b1d8      	cbz	r0, 838bc <__register_exitproc+0xa8>
   83884:	2000      	movs	r0, #0
   83886:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8388a:	f04f 0e01 	mov.w	lr, #1
   8388e:	6058      	str	r0, [r3, #4]
   83890:	6019      	str	r1, [r3, #0]
   83892:	4602      	mov	r2, r0
   83894:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83898:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8389c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   838a0:	2e00      	cmp	r6, #0
   838a2:	d0dc      	beq.n	8385e <__register_exitproc+0x4a>
   838a4:	e7cc      	b.n	83840 <__register_exitproc+0x2c>
   838a6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   838aa:	4301      	orrs	r1, r0
   838ac:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   838b0:	e7d5      	b.n	8385e <__register_exitproc+0x4a>
   838b2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   838b6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   838ba:	e7bb      	b.n	83834 <__register_exitproc+0x20>
   838bc:	6828      	ldr	r0, [r5, #0]
   838be:	f7ff f865 	bl	8298c <__retarget_lock_release_recursive>
   838c2:	f04f 30ff 	mov.w	r0, #4294967295
   838c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   838ca:	bf00      	nop
   838cc:	20070570 	.word	0x20070570
   838d0:	00083dc4 	.word	0x00083dc4
   838d4:	00082a81 	.word	0x00082a81

000838d8 <_close_r>:
   838d8:	b538      	push	{r3, r4, r5, lr}
   838da:	2300      	movs	r3, #0
   838dc:	4c06      	ldr	r4, [pc, #24]	; (838f8 <_close_r+0x20>)
   838de:	4605      	mov	r5, r0
   838e0:	4608      	mov	r0, r1
   838e2:	6023      	str	r3, [r4, #0]
   838e4:	f7fd fabc 	bl	80e60 <_close>
   838e8:	1c43      	adds	r3, r0, #1
   838ea:	d000      	beq.n	838ee <_close_r+0x16>
   838ec:	bd38      	pop	{r3, r4, r5, pc}
   838ee:	6823      	ldr	r3, [r4, #0]
   838f0:	2b00      	cmp	r3, #0
   838f2:	d0fb      	beq.n	838ec <_close_r+0x14>
   838f4:	602b      	str	r3, [r5, #0]
   838f6:	bd38      	pop	{r3, r4, r5, pc}
   838f8:	20070c88 	.word	0x20070c88

000838fc <_fclose_r>:
   838fc:	b570      	push	{r4, r5, r6, lr}
   838fe:	b159      	cbz	r1, 83918 <_fclose_r+0x1c>
   83900:	4605      	mov	r5, r0
   83902:	460c      	mov	r4, r1
   83904:	b110      	cbz	r0, 8390c <_fclose_r+0x10>
   83906:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83908:	2b00      	cmp	r3, #0
   8390a:	d03c      	beq.n	83986 <_fclose_r+0x8a>
   8390c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8390e:	07d8      	lsls	r0, r3, #31
   83910:	d505      	bpl.n	8391e <_fclose_r+0x22>
   83912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83916:	b92b      	cbnz	r3, 83924 <_fclose_r+0x28>
   83918:	2600      	movs	r6, #0
   8391a:	4630      	mov	r0, r6
   8391c:	bd70      	pop	{r4, r5, r6, pc}
   8391e:	89a3      	ldrh	r3, [r4, #12]
   83920:	0599      	lsls	r1, r3, #22
   83922:	d53c      	bpl.n	8399e <_fclose_r+0xa2>
   83924:	4621      	mov	r1, r4
   83926:	4628      	mov	r0, r5
   83928:	f7fe fb7a 	bl	82020 <__sflush_r>
   8392c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8392e:	4606      	mov	r6, r0
   83930:	b133      	cbz	r3, 83940 <_fclose_r+0x44>
   83932:	69e1      	ldr	r1, [r4, #28]
   83934:	4628      	mov	r0, r5
   83936:	4798      	blx	r3
   83938:	2800      	cmp	r0, #0
   8393a:	bfb8      	it	lt
   8393c:	f04f 36ff 	movlt.w	r6, #4294967295
   83940:	89a3      	ldrh	r3, [r4, #12]
   83942:	061a      	lsls	r2, r3, #24
   83944:	d422      	bmi.n	8398c <_fclose_r+0x90>
   83946:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83948:	b141      	cbz	r1, 8395c <_fclose_r+0x60>
   8394a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8394e:	4299      	cmp	r1, r3
   83950:	d002      	beq.n	83958 <_fclose_r+0x5c>
   83952:	4628      	mov	r0, r5
   83954:	f7fe fd7e 	bl	82454 <_free_r>
   83958:	2300      	movs	r3, #0
   8395a:	6323      	str	r3, [r4, #48]	; 0x30
   8395c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8395e:	b121      	cbz	r1, 8396a <_fclose_r+0x6e>
   83960:	4628      	mov	r0, r5
   83962:	f7fe fd77 	bl	82454 <_free_r>
   83966:	2300      	movs	r3, #0
   83968:	6463      	str	r3, [r4, #68]	; 0x44
   8396a:	f7fe fc7d 	bl	82268 <__sfp_lock_acquire>
   8396e:	2200      	movs	r2, #0
   83970:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83972:	81a2      	strh	r2, [r4, #12]
   83974:	07db      	lsls	r3, r3, #31
   83976:	d50e      	bpl.n	83996 <_fclose_r+0x9a>
   83978:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8397a:	f7ff f803 	bl	82984 <__retarget_lock_close_recursive>
   8397e:	f7fe fc79 	bl	82274 <__sfp_lock_release>
   83982:	4630      	mov	r0, r6
   83984:	bd70      	pop	{r4, r5, r6, pc}
   83986:	f7fe fc3f 	bl	82208 <__sinit>
   8398a:	e7bf      	b.n	8390c <_fclose_r+0x10>
   8398c:	6921      	ldr	r1, [r4, #16]
   8398e:	4628      	mov	r0, r5
   83990:	f7fe fd60 	bl	82454 <_free_r>
   83994:	e7d7      	b.n	83946 <_fclose_r+0x4a>
   83996:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83998:	f7fe fff8 	bl	8298c <__retarget_lock_release_recursive>
   8399c:	e7ec      	b.n	83978 <_fclose_r+0x7c>
   8399e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   839a0:	f7fe fff2 	bl	82988 <__retarget_lock_acquire_recursive>
   839a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   839a8:	2b00      	cmp	r3, #0
   839aa:	d1bb      	bne.n	83924 <_fclose_r+0x28>
   839ac:	6e66      	ldr	r6, [r4, #100]	; 0x64
   839ae:	f016 0601 	ands.w	r6, r6, #1
   839b2:	d1b1      	bne.n	83918 <_fclose_r+0x1c>
   839b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   839b6:	f7fe ffe9 	bl	8298c <__retarget_lock_release_recursive>
   839ba:	4630      	mov	r0, r6
   839bc:	bd70      	pop	{r4, r5, r6, pc}
   839be:	bf00      	nop

000839c0 <_fstat_r>:
   839c0:	b570      	push	{r4, r5, r6, lr}
   839c2:	460d      	mov	r5, r1
   839c4:	2300      	movs	r3, #0
   839c6:	4c07      	ldr	r4, [pc, #28]	; (839e4 <_fstat_r+0x24>)
   839c8:	4606      	mov	r6, r0
   839ca:	4611      	mov	r1, r2
   839cc:	4628      	mov	r0, r5
   839ce:	6023      	str	r3, [r4, #0]
   839d0:	f7fd fa49 	bl	80e66 <_fstat>
   839d4:	1c43      	adds	r3, r0, #1
   839d6:	d000      	beq.n	839da <_fstat_r+0x1a>
   839d8:	bd70      	pop	{r4, r5, r6, pc}
   839da:	6823      	ldr	r3, [r4, #0]
   839dc:	2b00      	cmp	r3, #0
   839de:	d0fb      	beq.n	839d8 <_fstat_r+0x18>
   839e0:	6033      	str	r3, [r6, #0]
   839e2:	bd70      	pop	{r4, r5, r6, pc}
   839e4:	20070c88 	.word	0x20070c88

000839e8 <_isatty_r>:
   839e8:	b538      	push	{r3, r4, r5, lr}
   839ea:	2300      	movs	r3, #0
   839ec:	4c06      	ldr	r4, [pc, #24]	; (83a08 <_isatty_r+0x20>)
   839ee:	4605      	mov	r5, r0
   839f0:	4608      	mov	r0, r1
   839f2:	6023      	str	r3, [r4, #0]
   839f4:	f7fd fa3c 	bl	80e70 <_isatty>
   839f8:	1c43      	adds	r3, r0, #1
   839fa:	d000      	beq.n	839fe <_isatty_r+0x16>
   839fc:	bd38      	pop	{r3, r4, r5, pc}
   839fe:	6823      	ldr	r3, [r4, #0]
   83a00:	2b00      	cmp	r3, #0
   83a02:	d0fb      	beq.n	839fc <_isatty_r+0x14>
   83a04:	602b      	str	r3, [r5, #0]
   83a06:	bd38      	pop	{r3, r4, r5, pc}
   83a08:	20070c88 	.word	0x20070c88

00083a0c <_lseek_r>:
   83a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a0e:	460e      	mov	r6, r1
   83a10:	2500      	movs	r5, #0
   83a12:	4c08      	ldr	r4, [pc, #32]	; (83a34 <_lseek_r+0x28>)
   83a14:	4611      	mov	r1, r2
   83a16:	4607      	mov	r7, r0
   83a18:	461a      	mov	r2, r3
   83a1a:	4630      	mov	r0, r6
   83a1c:	6025      	str	r5, [r4, #0]
   83a1e:	f7fd fa29 	bl	80e74 <_lseek>
   83a22:	1c43      	adds	r3, r0, #1
   83a24:	d000      	beq.n	83a28 <_lseek_r+0x1c>
   83a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a28:	6823      	ldr	r3, [r4, #0]
   83a2a:	2b00      	cmp	r3, #0
   83a2c:	d0fb      	beq.n	83a26 <_lseek_r+0x1a>
   83a2e:	603b      	str	r3, [r7, #0]
   83a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a32:	bf00      	nop
   83a34:	20070c88 	.word	0x20070c88

00083a38 <_read_r>:
   83a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a3a:	460e      	mov	r6, r1
   83a3c:	2500      	movs	r5, #0
   83a3e:	4c08      	ldr	r4, [pc, #32]	; (83a60 <_read_r+0x28>)
   83a40:	4611      	mov	r1, r2
   83a42:	4607      	mov	r7, r0
   83a44:	461a      	mov	r2, r3
   83a46:	4630      	mov	r0, r6
   83a48:	6025      	str	r5, [r4, #0]
   83a4a:	f7fc fb89 	bl	80160 <_read>
   83a4e:	1c43      	adds	r3, r0, #1
   83a50:	d000      	beq.n	83a54 <_read_r+0x1c>
   83a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a54:	6823      	ldr	r3, [r4, #0]
   83a56:	2b00      	cmp	r3, #0
   83a58:	d0fb      	beq.n	83a52 <_read_r+0x1a>
   83a5a:	603b      	str	r3, [r7, #0]
   83a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a5e:	bf00      	nop
   83a60:	20070c88 	.word	0x20070c88

00083a64 <__aeabi_uldivmod>:
   83a64:	b953      	cbnz	r3, 83a7c <__aeabi_uldivmod+0x18>
   83a66:	b94a      	cbnz	r2, 83a7c <__aeabi_uldivmod+0x18>
   83a68:	2900      	cmp	r1, #0
   83a6a:	bf08      	it	eq
   83a6c:	2800      	cmpeq	r0, #0
   83a6e:	bf1c      	itt	ne
   83a70:	f04f 31ff 	movne.w	r1, #4294967295
   83a74:	f04f 30ff 	movne.w	r0, #4294967295
   83a78:	f000 b97a 	b.w	83d70 <__aeabi_idiv0>
   83a7c:	f1ad 0c08 	sub.w	ip, sp, #8
   83a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83a84:	f000 f806 	bl	83a94 <__udivmoddi4>
   83a88:	f8dd e004 	ldr.w	lr, [sp, #4]
   83a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83a90:	b004      	add	sp, #16
   83a92:	4770      	bx	lr

00083a94 <__udivmoddi4>:
   83a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83a98:	468c      	mov	ip, r1
   83a9a:	460e      	mov	r6, r1
   83a9c:	4604      	mov	r4, r0
   83a9e:	9d08      	ldr	r5, [sp, #32]
   83aa0:	2b00      	cmp	r3, #0
   83aa2:	d150      	bne.n	83b46 <__udivmoddi4+0xb2>
   83aa4:	428a      	cmp	r2, r1
   83aa6:	4617      	mov	r7, r2
   83aa8:	d96c      	bls.n	83b84 <__udivmoddi4+0xf0>
   83aaa:	fab2 fe82 	clz	lr, r2
   83aae:	f1be 0f00 	cmp.w	lr, #0
   83ab2:	d00b      	beq.n	83acc <__udivmoddi4+0x38>
   83ab4:	f1ce 0c20 	rsb	ip, lr, #32
   83ab8:	fa01 f60e 	lsl.w	r6, r1, lr
   83abc:	fa20 fc0c 	lsr.w	ip, r0, ip
   83ac0:	fa02 f70e 	lsl.w	r7, r2, lr
   83ac4:	ea4c 0c06 	orr.w	ip, ip, r6
   83ac8:	fa00 f40e 	lsl.w	r4, r0, lr
   83acc:	0c3a      	lsrs	r2, r7, #16
   83ace:	fbbc f9f2 	udiv	r9, ip, r2
   83ad2:	b2bb      	uxth	r3, r7
   83ad4:	fb02 cc19 	mls	ip, r2, r9, ip
   83ad8:	fb09 fa03 	mul.w	sl, r9, r3
   83adc:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83ae0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83ae4:	45b2      	cmp	sl, r6
   83ae6:	d90a      	bls.n	83afe <__udivmoddi4+0x6a>
   83ae8:	19f6      	adds	r6, r6, r7
   83aea:	f109 31ff 	add.w	r1, r9, #4294967295
   83aee:	f080 8125 	bcs.w	83d3c <__udivmoddi4+0x2a8>
   83af2:	45b2      	cmp	sl, r6
   83af4:	f240 8122 	bls.w	83d3c <__udivmoddi4+0x2a8>
   83af8:	f1a9 0902 	sub.w	r9, r9, #2
   83afc:	443e      	add	r6, r7
   83afe:	eba6 060a 	sub.w	r6, r6, sl
   83b02:	fbb6 f0f2 	udiv	r0, r6, r2
   83b06:	fb02 6610 	mls	r6, r2, r0, r6
   83b0a:	fb00 f303 	mul.w	r3, r0, r3
   83b0e:	b2a4      	uxth	r4, r4
   83b10:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83b14:	42a3      	cmp	r3, r4
   83b16:	d909      	bls.n	83b2c <__udivmoddi4+0x98>
   83b18:	19e4      	adds	r4, r4, r7
   83b1a:	f100 32ff 	add.w	r2, r0, #4294967295
   83b1e:	f080 810b 	bcs.w	83d38 <__udivmoddi4+0x2a4>
   83b22:	42a3      	cmp	r3, r4
   83b24:	f240 8108 	bls.w	83d38 <__udivmoddi4+0x2a4>
   83b28:	3802      	subs	r0, #2
   83b2a:	443c      	add	r4, r7
   83b2c:	2100      	movs	r1, #0
   83b2e:	1ae4      	subs	r4, r4, r3
   83b30:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83b34:	2d00      	cmp	r5, #0
   83b36:	d062      	beq.n	83bfe <__udivmoddi4+0x16a>
   83b38:	2300      	movs	r3, #0
   83b3a:	fa24 f40e 	lsr.w	r4, r4, lr
   83b3e:	602c      	str	r4, [r5, #0]
   83b40:	606b      	str	r3, [r5, #4]
   83b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83b46:	428b      	cmp	r3, r1
   83b48:	d907      	bls.n	83b5a <__udivmoddi4+0xc6>
   83b4a:	2d00      	cmp	r5, #0
   83b4c:	d055      	beq.n	83bfa <__udivmoddi4+0x166>
   83b4e:	2100      	movs	r1, #0
   83b50:	e885 0041 	stmia.w	r5, {r0, r6}
   83b54:	4608      	mov	r0, r1
   83b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83b5a:	fab3 f183 	clz	r1, r3
   83b5e:	2900      	cmp	r1, #0
   83b60:	f040 808f 	bne.w	83c82 <__udivmoddi4+0x1ee>
   83b64:	42b3      	cmp	r3, r6
   83b66:	d302      	bcc.n	83b6e <__udivmoddi4+0xda>
   83b68:	4282      	cmp	r2, r0
   83b6a:	f200 80fc 	bhi.w	83d66 <__udivmoddi4+0x2d2>
   83b6e:	1a84      	subs	r4, r0, r2
   83b70:	eb66 0603 	sbc.w	r6, r6, r3
   83b74:	2001      	movs	r0, #1
   83b76:	46b4      	mov	ip, r6
   83b78:	2d00      	cmp	r5, #0
   83b7a:	d040      	beq.n	83bfe <__udivmoddi4+0x16a>
   83b7c:	e885 1010 	stmia.w	r5, {r4, ip}
   83b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83b84:	b912      	cbnz	r2, 83b8c <__udivmoddi4+0xf8>
   83b86:	2701      	movs	r7, #1
   83b88:	fbb7 f7f2 	udiv	r7, r7, r2
   83b8c:	fab7 fe87 	clz	lr, r7
   83b90:	f1be 0f00 	cmp.w	lr, #0
   83b94:	d135      	bne.n	83c02 <__udivmoddi4+0x16e>
   83b96:	2101      	movs	r1, #1
   83b98:	1bf6      	subs	r6, r6, r7
   83b9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83b9e:	fa1f f887 	uxth.w	r8, r7
   83ba2:	fbb6 f2fc 	udiv	r2, r6, ip
   83ba6:	fb0c 6612 	mls	r6, ip, r2, r6
   83baa:	fb08 f002 	mul.w	r0, r8, r2
   83bae:	0c23      	lsrs	r3, r4, #16
   83bb0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83bb4:	42b0      	cmp	r0, r6
   83bb6:	d907      	bls.n	83bc8 <__udivmoddi4+0x134>
   83bb8:	19f6      	adds	r6, r6, r7
   83bba:	f102 33ff 	add.w	r3, r2, #4294967295
   83bbe:	d202      	bcs.n	83bc6 <__udivmoddi4+0x132>
   83bc0:	42b0      	cmp	r0, r6
   83bc2:	f200 80d2 	bhi.w	83d6a <__udivmoddi4+0x2d6>
   83bc6:	461a      	mov	r2, r3
   83bc8:	1a36      	subs	r6, r6, r0
   83bca:	fbb6 f0fc 	udiv	r0, r6, ip
   83bce:	fb0c 6610 	mls	r6, ip, r0, r6
   83bd2:	fb08 f800 	mul.w	r8, r8, r0
   83bd6:	b2a3      	uxth	r3, r4
   83bd8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83bdc:	45a0      	cmp	r8, r4
   83bde:	d907      	bls.n	83bf0 <__udivmoddi4+0x15c>
   83be0:	19e4      	adds	r4, r4, r7
   83be2:	f100 33ff 	add.w	r3, r0, #4294967295
   83be6:	d202      	bcs.n	83bee <__udivmoddi4+0x15a>
   83be8:	45a0      	cmp	r8, r4
   83bea:	f200 80b9 	bhi.w	83d60 <__udivmoddi4+0x2cc>
   83bee:	4618      	mov	r0, r3
   83bf0:	eba4 0408 	sub.w	r4, r4, r8
   83bf4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83bf8:	e79c      	b.n	83b34 <__udivmoddi4+0xa0>
   83bfa:	4629      	mov	r1, r5
   83bfc:	4628      	mov	r0, r5
   83bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83c02:	fa07 f70e 	lsl.w	r7, r7, lr
   83c06:	f1ce 0320 	rsb	r3, lr, #32
   83c0a:	fa26 f203 	lsr.w	r2, r6, r3
   83c0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83c12:	fbb2 f1fc 	udiv	r1, r2, ip
   83c16:	fa1f f887 	uxth.w	r8, r7
   83c1a:	fb0c 2211 	mls	r2, ip, r1, r2
   83c1e:	fa06 f60e 	lsl.w	r6, r6, lr
   83c22:	fa20 f303 	lsr.w	r3, r0, r3
   83c26:	fb01 f908 	mul.w	r9, r1, r8
   83c2a:	4333      	orrs	r3, r6
   83c2c:	0c1e      	lsrs	r6, r3, #16
   83c2e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83c32:	45b1      	cmp	r9, r6
   83c34:	fa00 f40e 	lsl.w	r4, r0, lr
   83c38:	d909      	bls.n	83c4e <__udivmoddi4+0x1ba>
   83c3a:	19f6      	adds	r6, r6, r7
   83c3c:	f101 32ff 	add.w	r2, r1, #4294967295
   83c40:	f080 808c 	bcs.w	83d5c <__udivmoddi4+0x2c8>
   83c44:	45b1      	cmp	r9, r6
   83c46:	f240 8089 	bls.w	83d5c <__udivmoddi4+0x2c8>
   83c4a:	3902      	subs	r1, #2
   83c4c:	443e      	add	r6, r7
   83c4e:	eba6 0609 	sub.w	r6, r6, r9
   83c52:	fbb6 f0fc 	udiv	r0, r6, ip
   83c56:	fb0c 6210 	mls	r2, ip, r0, r6
   83c5a:	fb00 f908 	mul.w	r9, r0, r8
   83c5e:	b29e      	uxth	r6, r3
   83c60:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83c64:	45b1      	cmp	r9, r6
   83c66:	d907      	bls.n	83c78 <__udivmoddi4+0x1e4>
   83c68:	19f6      	adds	r6, r6, r7
   83c6a:	f100 33ff 	add.w	r3, r0, #4294967295
   83c6e:	d271      	bcs.n	83d54 <__udivmoddi4+0x2c0>
   83c70:	45b1      	cmp	r9, r6
   83c72:	d96f      	bls.n	83d54 <__udivmoddi4+0x2c0>
   83c74:	3802      	subs	r0, #2
   83c76:	443e      	add	r6, r7
   83c78:	eba6 0609 	sub.w	r6, r6, r9
   83c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83c80:	e78f      	b.n	83ba2 <__udivmoddi4+0x10e>
   83c82:	f1c1 0720 	rsb	r7, r1, #32
   83c86:	fa22 f807 	lsr.w	r8, r2, r7
   83c8a:	408b      	lsls	r3, r1
   83c8c:	ea48 0303 	orr.w	r3, r8, r3
   83c90:	fa26 f407 	lsr.w	r4, r6, r7
   83c94:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83c98:	fbb4 f9fe 	udiv	r9, r4, lr
   83c9c:	fa1f fc83 	uxth.w	ip, r3
   83ca0:	fb0e 4419 	mls	r4, lr, r9, r4
   83ca4:	408e      	lsls	r6, r1
   83ca6:	fa20 f807 	lsr.w	r8, r0, r7
   83caa:	fb09 fa0c 	mul.w	sl, r9, ip
   83cae:	ea48 0806 	orr.w	r8, r8, r6
   83cb2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83cb6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83cba:	45a2      	cmp	sl, r4
   83cbc:	fa02 f201 	lsl.w	r2, r2, r1
   83cc0:	fa00 f601 	lsl.w	r6, r0, r1
   83cc4:	d908      	bls.n	83cd8 <__udivmoddi4+0x244>
   83cc6:	18e4      	adds	r4, r4, r3
   83cc8:	f109 30ff 	add.w	r0, r9, #4294967295
   83ccc:	d244      	bcs.n	83d58 <__udivmoddi4+0x2c4>
   83cce:	45a2      	cmp	sl, r4
   83cd0:	d942      	bls.n	83d58 <__udivmoddi4+0x2c4>
   83cd2:	f1a9 0902 	sub.w	r9, r9, #2
   83cd6:	441c      	add	r4, r3
   83cd8:	eba4 040a 	sub.w	r4, r4, sl
   83cdc:	fbb4 f0fe 	udiv	r0, r4, lr
   83ce0:	fb0e 4410 	mls	r4, lr, r0, r4
   83ce4:	fb00 fc0c 	mul.w	ip, r0, ip
   83ce8:	fa1f f888 	uxth.w	r8, r8
   83cec:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83cf0:	45a4      	cmp	ip, r4
   83cf2:	d907      	bls.n	83d04 <__udivmoddi4+0x270>
   83cf4:	18e4      	adds	r4, r4, r3
   83cf6:	f100 3eff 	add.w	lr, r0, #4294967295
   83cfa:	d229      	bcs.n	83d50 <__udivmoddi4+0x2bc>
   83cfc:	45a4      	cmp	ip, r4
   83cfe:	d927      	bls.n	83d50 <__udivmoddi4+0x2bc>
   83d00:	3802      	subs	r0, #2
   83d02:	441c      	add	r4, r3
   83d04:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83d08:	fba0 8902 	umull	r8, r9, r0, r2
   83d0c:	eba4 0c0c 	sub.w	ip, r4, ip
   83d10:	45cc      	cmp	ip, r9
   83d12:	46c2      	mov	sl, r8
   83d14:	46ce      	mov	lr, r9
   83d16:	d315      	bcc.n	83d44 <__udivmoddi4+0x2b0>
   83d18:	d012      	beq.n	83d40 <__udivmoddi4+0x2ac>
   83d1a:	b155      	cbz	r5, 83d32 <__udivmoddi4+0x29e>
   83d1c:	ebb6 030a 	subs.w	r3, r6, sl
   83d20:	eb6c 060e 	sbc.w	r6, ip, lr
   83d24:	fa06 f707 	lsl.w	r7, r6, r7
   83d28:	40cb      	lsrs	r3, r1
   83d2a:	431f      	orrs	r7, r3
   83d2c:	40ce      	lsrs	r6, r1
   83d2e:	602f      	str	r7, [r5, #0]
   83d30:	606e      	str	r6, [r5, #4]
   83d32:	2100      	movs	r1, #0
   83d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d38:	4610      	mov	r0, r2
   83d3a:	e6f7      	b.n	83b2c <__udivmoddi4+0x98>
   83d3c:	4689      	mov	r9, r1
   83d3e:	e6de      	b.n	83afe <__udivmoddi4+0x6a>
   83d40:	4546      	cmp	r6, r8
   83d42:	d2ea      	bcs.n	83d1a <__udivmoddi4+0x286>
   83d44:	ebb8 0a02 	subs.w	sl, r8, r2
   83d48:	eb69 0e03 	sbc.w	lr, r9, r3
   83d4c:	3801      	subs	r0, #1
   83d4e:	e7e4      	b.n	83d1a <__udivmoddi4+0x286>
   83d50:	4670      	mov	r0, lr
   83d52:	e7d7      	b.n	83d04 <__udivmoddi4+0x270>
   83d54:	4618      	mov	r0, r3
   83d56:	e78f      	b.n	83c78 <__udivmoddi4+0x1e4>
   83d58:	4681      	mov	r9, r0
   83d5a:	e7bd      	b.n	83cd8 <__udivmoddi4+0x244>
   83d5c:	4611      	mov	r1, r2
   83d5e:	e776      	b.n	83c4e <__udivmoddi4+0x1ba>
   83d60:	3802      	subs	r0, #2
   83d62:	443c      	add	r4, r7
   83d64:	e744      	b.n	83bf0 <__udivmoddi4+0x15c>
   83d66:	4608      	mov	r0, r1
   83d68:	e706      	b.n	83b78 <__udivmoddi4+0xe4>
   83d6a:	3a02      	subs	r2, #2
   83d6c:	443e      	add	r6, r7
   83d6e:	e72b      	b.n	83bc8 <__udivmoddi4+0x134>

00083d70 <__aeabi_idiv0>:
   83d70:	4770      	bx	lr
   83d72:	bf00      	nop
   83d74:	63637573 	.word	0x63637573
   83d78:	20737365 	.word	0x20737365
   83d7c:	30203d3d 	.word	0x30203d3d
   83d80:	6425203f 	.word	0x6425203f
   83d84:	0000000a 	.word	0x0000000a
   83d88:	736e6f43 	.word	0x736e6f43
   83d8c:	20656c6f 	.word	0x20656c6f
   83d90:	64616572 	.word	0x64616572
   83d94:	00000a79 	.word	0x00000a79
   83d98:	3d3d3d3d 	.word	0x3d3d3d3d
   83d9c:	3d3d3d3d 	.word	0x3d3d3d3d
   83da0:	3d3d3d3d 	.word	0x3d3d3d3d
   83da4:	00000a3d 	.word	0x00000a3d
   83da8:	65636552 	.word	0x65636552
   83dac:	64657669 	.word	0x64657669
   83db0:	0a732520 	.word	0x0a732520
   83db4:	00000000 	.word	0x00000000
   83db8:	746e6553 	.word	0x746e6553
   83dbc:	0a732520 	.word	0x0a732520
   83dc0:	00000000 	.word	0x00000000

00083dc4 <_global_impure_ptr>:
   83dc4:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   83dd4:	46454443 00000000 33323130 37363534     CDEF....01234567
   83de4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83df4:	0000296c                                l)..

00083df8 <blanks.7217>:
   83df8:	20202020 20202020 20202020 20202020                     

00083e08 <zeroes.7218>:
   83e08:	30303030 30303030 30303030 30303030     0000000000000000
   83e18:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00083e28 <_ctype_>:
   83e28:	20202000 20202020 28282020 20282828     .         ((((( 
   83e38:	20202020 20202020 20202020 20202020                     
   83e48:	10108820 10101010 10101010 10101010      ...............
   83e58:	04040410 04040404 10040404 10101010     ................
   83e68:	41411010 41414141 01010101 01010101     ..AAAAAA........
   83e78:	01010101 01010101 01010101 10101010     ................
   83e88:	42421010 42424242 02020202 02020202     ..BBBBBB........
   83e98:	02020202 02020202 02020202 10101010     ................
   83ea8:	00000020 00000000 00000000 00000000      ...............
	...

00083f2c <_init>:
   83f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f2e:	bf00      	nop
   83f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83f32:	bc08      	pop	{r3}
   83f34:	469e      	mov	lr, r3
   83f36:	4770      	bx	lr

00083f38 <__init_array_start>:
   83f38:	00082001 	.word	0x00082001

00083f3c <__frame_dummy_init_array_entry>:
   83f3c:	00080119                                ....

00083f40 <_fini>:
   83f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f42:	bf00      	nop
   83f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83f46:	bc08      	pop	{r3}
   83f48:	469e      	mov	lr, r3
   83f4a:	4770      	bx	lr

00083f4c <__fini_array_start>:
   83f4c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070140 	.word	0x20070140

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <usart_serial_options.8145>:
2007012c:	00002580 000000c0 00000800 00000000     .%..............

2007013c <g_interrupt_enabled>:
2007013c:	00000001                                ....

20070140 <SystemCoreClock>:
20070140:	003d0900                                ..=.

20070144 <_impure_ptr>:
20070144:	20070148                                H.. 

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <__atexit_recursive_mutex>:
20070570:	20070c64                                d.. 

20070574 <__global_locale>:
20070574:	00000043 00000000 00000000 00000000     C...............
	...
20070594:	00000043 00000000 00000000 00000000     C...............
	...
200705b4:	00000043 00000000 00000000 00000000     C...............
	...
200705d4:	00000043 00000000 00000000 00000000     C...............
	...
200705f4:	00000043 00000000 00000000 00000000     C...............
	...
20070614:	00000043 00000000 00000000 00000000     C...............
	...
20070634:	00000043 00000000 00000000 00000000     C...............
	...
20070654:	000837d1 00082fd5 00000000 00083e28     .7.../......(>..
20070664:	00083e24 00083db4 00083db4 00083db4     $>...=...=...=..
20070674:	00083db4 00083db4 00083db4 00083db4     .=...=...=...=..
20070684:	00083db4 00083db4 ffffffff ffffffff     .=...=..........
20070694:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706bc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706e0 <__malloc_av_>:
	...
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 

20070ae8 <__malloc_sbrk_base>:
20070ae8:	ffffffff                                ....

20070aec <__malloc_trim_threshold>:
20070aec:	00020000                                ....
