
AdcDacProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004160  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084160  00084160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  00084168  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00003490  20070ae0  00084c48  00020ae0  2**2
                  ALLOC
  4 .stack        00002000  20073f70  000880d8  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c166  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000040aa  00000000  00000000  0003ccc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000053bf  00000000  00000000  00040d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d28  00000000  00000000  00046131  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c08  00000000  00000000  00046e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bbcf  00000000  00000000  00047a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000142f4  00000000  00000000  00063630  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000665eb  00000000  00000000  00077924  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000028b0  00000000  00000000  000ddf10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	70 5f 07 20 1d 0e 08 00 19 0e 08 00 19 0e 08 00     p_. ............
   80010:	19 0e 08 00 19 0e 08 00 19 0e 08 00 00 00 00 00     ................
	...
   8002c:	19 0e 08 00 19 0e 08 00 00 00 00 00 19 0e 08 00     ................
   8003c:	19 0e 08 00 19 0e 08 00 19 0e 08 00 19 0e 08 00     ................
   8004c:	19 0e 08 00 19 0e 08 00 19 0e 08 00 19 0e 08 00     ................
   8005c:	19 0e 08 00 19 0e 08 00 19 0e 08 00 00 00 00 00     ................
   8006c:	8d 0c 08 00 a1 0c 08 00 b5 0c 08 00 c9 0c 08 00     ................
	...
   80084:	d9 03 08 00 19 0e 08 00 19 0e 08 00 19 0e 08 00     ................
   80094:	19 0e 08 00 19 0e 08 00 19 0e 08 00 19 0e 08 00     ................
   800a4:	00 00 00 00 19 0e 08 00 e5 06 08 00 19 0e 08 00     ................
   800b4:	19 0e 08 00 19 0e 08 00 11 07 08 00 19 0e 08 00     ................
   800c4:	19 0e 08 00 19 0e 08 00 19 0e 08 00 19 0e 08 00     ................
   800d4:	35 02 08 00 19 0e 08 00 19 0e 08 00 19 0e 08 00     5...............
   800e4:	19 0e 08 00 19 0e 08 00 19 0e 08 00 19 0e 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	00084168 	.word	0x00084168

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00084168 	.word	0x00084168
   80154:	20070ae4 	.word	0x20070ae4
   80158:	00084168 	.word	0x00084168
   8015c:	00000000 	.word	0x00000000

00080160 <adc_read_buffer>:
	NVIC_EnableIRQ(ADC_IRQn);
}

uint32_t adc_read_buffer(int16_t *p_s_buffer)
{
	if ((ADC->ADC_RCR == 0) && (ADC->ADC_RNCR == 0))
   80160:	4b10      	ldr	r3, [pc, #64]	; (801a4 <adc_read_buffer+0x44>)
   80162:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   80166:	b91b      	cbnz	r3, 80170 <adc_read_buffer+0x10>
   80168:	4b0e      	ldr	r3, [pc, #56]	; (801a4 <adc_read_buffer+0x44>)
   8016a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   8016e:	b163      	cbz	r3, 8018a <adc_read_buffer+0x2a>
		ADC->ADC_RCR = ADC_BUFFER_SIZE;
		ADC->ADC_PTCR = ADC_PTCR_RXTEN;
		
		return 1;
	}
	else if (ADC->ADC_RNCR == 0)
   80170:	4b0c      	ldr	r3, [pc, #48]	; (801a4 <adc_read_buffer+0x44>)
   80172:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   80176:	b99b      	cbnz	r3, 801a0 <adc_read_buffer+0x40>
	{
		ADC->ADC_RNPR = (uint32_t) p_s_buffer;
   80178:	4b0a      	ldr	r3, [pc, #40]	; (801a4 <adc_read_buffer+0x44>)
   8017a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
		ADC->ADC_RNCR = ADC_BUFFER_SIZE;
   8017e:	f640 42bc 	movw	r2, #3260	; 0xcbc
   80182:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		
		return 1;
   80186:	2001      	movs	r0, #1
   80188:	4770      	bx	lr
		ADC->ADC_RPR = (uint32_t) p_s_buffer;
   8018a:	4b06      	ldr	r3, [pc, #24]	; (801a4 <adc_read_buffer+0x44>)
   8018c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		ADC->ADC_RCR = ADC_BUFFER_SIZE;
   80190:	f640 42bc 	movw	r2, #3260	; 0xcbc
   80194:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		ADC->ADC_PTCR = ADC_PTCR_RXTEN;
   80198:	2001      	movs	r0, #1
   8019a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
		return 1;
   8019e:	4770      	bx	lr
	}
	return 0;
   801a0:	2000      	movs	r0, #0
}
   801a2:	4770      	bx	lr
   801a4:	400c0000 	.word	0x400c0000

000801a8 <configure_adc>:
{
   801a8:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   801aa:	2025      	movs	r0, #37	; 0x25
   801ac:	4b14      	ldr	r3, [pc, #80]	; (80200 <configure_adc+0x58>)
   801ae:	4798      	blx	r3
	adc_init(ADC, sysclk_get_cpu_hz(), ADC_CLOCK, ADC_STARTUP_TIME_4);
   801b0:	4c14      	ldr	r4, [pc, #80]	; (80204 <configure_adc+0x5c>)
   801b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   801b6:	4a14      	ldr	r2, [pc, #80]	; (80208 <configure_adc+0x60>)
   801b8:	4914      	ldr	r1, [pc, #80]	; (8020c <configure_adc+0x64>)
   801ba:	4620      	mov	r0, r4
   801bc:	4d14      	ldr	r5, [pc, #80]	; (80210 <configure_adc+0x68>)
   801be:	47a8      	blx	r5
	adc_configure_timing(ADC, TRACKING_TIME, SETTLING_TIME, TRANSFER_TIME);
   801c0:	2300      	movs	r3, #0
   801c2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   801c6:	4619      	mov	r1, r3
   801c8:	4620      	mov	r0, r4
   801ca:	4d12      	ldr	r5, [pc, #72]	; (80214 <configure_adc+0x6c>)
   801cc:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   801ce:	2100      	movs	r1, #0
   801d0:	4620      	mov	r0, r4
   801d2:	4b11      	ldr	r3, [pc, #68]	; (80218 <configure_adc+0x70>)
   801d4:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_7);
   801d6:	2107      	movs	r1, #7
   801d8:	4620      	mov	r0, r4
   801da:	4b10      	ldr	r3, [pc, #64]	; (8021c <configure_adc+0x74>)
   801dc:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   801de:	2200      	movs	r2, #0
   801e0:	4611      	mov	r1, r2
   801e2:	4620      	mov	r0, r4
   801e4:	4b0e      	ldr	r3, [pc, #56]	; (80220 <configure_adc+0x78>)
   801e6:	4798      	blx	r3
	adc_read_buffer(adc_values);
   801e8:	480e      	ldr	r0, [pc, #56]	; (80224 <configure_adc+0x7c>)
   801ea:	4b0f      	ldr	r3, [pc, #60]	; (80228 <configure_adc+0x80>)
   801ec:	4798      	blx	r3
	adc_enable_interrupt(ADC, ADC_IER_RXBUFF);
   801ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   801f2:	4620      	mov	r0, r4
   801f4:	4b0d      	ldr	r3, [pc, #52]	; (8022c <configure_adc+0x84>)
   801f6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   801f8:	2220      	movs	r2, #32
   801fa:	4b0d      	ldr	r3, [pc, #52]	; (80230 <configure_adc+0x88>)
   801fc:	605a      	str	r2, [r3, #4]
   801fe:	bd38      	pop	{r3, r4, r5, pc}
   80200:	00080dc5 	.word	0x00080dc5
   80204:	400c0000 	.word	0x400c0000
   80208:	0061a800 	.word	0x0061a800
   8020c:	0501bd00 	.word	0x0501bd00
   80210:	000802e5 	.word	0x000802e5
   80214:	00080337 	.word	0x00080337
   80218:	00080319 	.word	0x00080319
   8021c:	00080359 	.word	0x00080359
   80220:	00080329 	.word	0x00080329
   80224:	200725c0 	.word	0x200725c0
   80228:	00080161 	.word	0x00080161
   8022c:	00080363 	.word	0x00080363
   80230:	e000e100 	.word	0xe000e100

00080234 <ADC_Handler>:

/* Interrupt handler for ADC */
void ADC_Handler(void)
{
   80234:	b510      	push	{r4, lr}
	if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF)
   80236:	4811      	ldr	r0, [pc, #68]	; (8027c <ADC_Handler+0x48>)
   80238:	4b11      	ldr	r3, [pc, #68]	; (80280 <ADC_Handler+0x4c>)
   8023a:	4798      	blx	r3
   8023c:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   80240:	d100      	bne.n	80244 <ADC_Handler+0x10>
   80242:	bd10      	pop	{r4, pc}
	{
		tc_stop(TC0, 0);
   80244:	2100      	movs	r1, #0
   80246:	480f      	ldr	r0, [pc, #60]	; (80284 <ADC_Handler+0x50>)
   80248:	4b0f      	ldr	r3, [pc, #60]	; (80288 <ADC_Handler+0x54>)
   8024a:	4798      	blx	r3
   8024c:	4b0f      	ldr	r3, [pc, #60]	; (8028c <ADC_Handler+0x58>)
   8024e:	4a10      	ldr	r2, [pc, #64]	; (80290 <ADC_Handler+0x5c>)
   80250:	4810      	ldr	r0, [pc, #64]	; (80294 <ADC_Handler+0x60>)

		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
		{
			dacc_values[i] = adc_values[i];
   80252:	f833 1f02 	ldrh.w	r1, [r3, #2]!
   80256:	f822 1f02 	strh.w	r1, [r2, #2]!
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   8025a:	4283      	cmp	r3, r0
   8025c:	d1f9      	bne.n	80252 <ADC_Handler+0x1e>
		}
		adc_finished = 1;
   8025e:	2201      	movs	r2, #1
   80260:	4b0d      	ldr	r3, [pc, #52]	; (80298 <ADC_Handler+0x64>)
   80262:	801a      	strh	r2, [r3, #0]

		memset((void *) &adc_values, 0, sizeof(adc_values));
   80264:	4c0d      	ldr	r4, [pc, #52]	; (8029c <ADC_Handler+0x68>)
   80266:	f641 1278 	movw	r2, #6520	; 0x1978
   8026a:	2100      	movs	r1, #0
   8026c:	4620      	mov	r0, r4
   8026e:	4b0c      	ldr	r3, [pc, #48]	; (802a0 <ADC_Handler+0x6c>)
   80270:	4798      	blx	r3
		adc_read_buffer(adc_values);
   80272:	4620      	mov	r0, r4
   80274:	4b0b      	ldr	r3, [pc, #44]	; (802a4 <ADC_Handler+0x70>)
   80276:	4798      	blx	r3
	}
}
   80278:	e7e3      	b.n	80242 <ADC_Handler+0xe>
   8027a:	bf00      	nop
   8027c:	400c0000 	.word	0x400c0000
   80280:	00080367 	.word	0x00080367
   80284:	40080000 	.word	0x40080000
   80288:	0008038b 	.word	0x0008038b
   8028c:	200725be 	.word	0x200725be
   80290:	20070c46 	.word	0x20070c46
   80294:	20073f36 	.word	0x20073f36
   80298:	20070c44 	.word	0x20070c44
   8029c:	200725c0 	.word	0x200725c0
   802a0:	00081169 	.word	0x00081169
   802a4:	00080161 	.word	0x00080161

000802a8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   802a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   802ac:	b980      	cbnz	r0, 802d0 <_read+0x28>
   802ae:	460c      	mov	r4, r1
   802b0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   802b2:	2a00      	cmp	r2, #0
   802b4:	dd0f      	ble.n	802d6 <_read+0x2e>
   802b6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   802b8:	4e08      	ldr	r6, [pc, #32]	; (802dc <_read+0x34>)
   802ba:	4d09      	ldr	r5, [pc, #36]	; (802e0 <_read+0x38>)
   802bc:	6830      	ldr	r0, [r6, #0]
   802be:	4621      	mov	r1, r4
   802c0:	682b      	ldr	r3, [r5, #0]
   802c2:	4798      	blx	r3
		ptr++;
   802c4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   802c6:	42bc      	cmp	r4, r7
   802c8:	d1f8      	bne.n	802bc <_read+0x14>
		nChars++;
	}
	return nChars;
}
   802ca:	4640      	mov	r0, r8
   802cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   802d0:	f04f 38ff 	mov.w	r8, #4294967295
   802d4:	e7f9      	b.n	802ca <_read+0x22>
	for (; len > 0; --len) {
   802d6:	4680      	mov	r8, r0
   802d8:	e7f7      	b.n	802ca <_read+0x22>
   802da:	bf00      	nop
   802dc:	20073f44 	.word	0x20073f44
   802e0:	20073f38 	.word	0x20073f38

000802e4 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   802e4:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   802e6:	2401      	movs	r4, #1
   802e8:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   802ea:	2400      	movs	r4, #0
   802ec:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   802ee:	f240 2502 	movw	r5, #514	; 0x202
   802f2:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   802f6:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   802fa:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   802fe:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80300:	0052      	lsls	r2, r2, #1
   80302:	fbb1 f2f2 	udiv	r2, r1, r2
   80306:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80308:	0212      	lsls	r2, r2, #8
   8030a:	b292      	uxth	r2, r2
   8030c:	432b      	orrs	r3, r5
   8030e:	431a      	orrs	r2, r3
   80310:	6042      	str	r2, [r0, #4]
	return 0;
}
   80312:	4620      	mov	r0, r4
   80314:	bc30      	pop	{r4, r5}
   80316:	4770      	bx	lr

00080318 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80318:	6843      	ldr	r3, [r0, #4]
   8031a:	f023 0310 	bic.w	r3, r3, #16
   8031e:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80320:	6843      	ldr	r3, [r0, #4]
   80322:	4319      	orrs	r1, r3
   80324:	6041      	str	r1, [r0, #4]
   80326:	4770      	bx	lr

00080328 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80328:	6843      	ldr	r3, [r0, #4]
   8032a:	01d2      	lsls	r2, r2, #7
   8032c:	b2d2      	uxtb	r2, r2
   8032e:	4319      	orrs	r1, r3
   80330:	430a      	orrs	r2, r1
   80332:	6042      	str	r2, [r0, #4]
   80334:	4770      	bx	lr

00080336 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80336:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80338:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   8033a:	0609      	lsls	r1, r1, #24
   8033c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80340:	4321      	orrs	r1, r4
   80342:	430a      	orrs	r2, r1
   80344:	0719      	lsls	r1, r3, #28
   80346:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   8034a:	4311      	orrs	r1, r2
   8034c:	6041      	str	r1, [r0, #4]
}
   8034e:	bc10      	pop	{r4}
   80350:	4770      	bx	lr

00080352 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80352:	2302      	movs	r3, #2
   80354:	6003      	str	r3, [r0, #0]
   80356:	4770      	bx	lr

00080358 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80358:	2301      	movs	r3, #1
   8035a:	fa03 f101 	lsl.w	r1, r3, r1
   8035e:	6101      	str	r1, [r0, #16]
   80360:	4770      	bx	lr

00080362 <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   80362:	6241      	str	r1, [r0, #36]	; 0x24
   80364:	4770      	bx	lr

00080366 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80366:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80368:	4770      	bx	lr

0008036a <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8036a:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8036c:	0189      	lsls	r1, r1, #6
   8036e:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80370:	2402      	movs	r4, #2
   80372:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80374:	f04f 31ff 	mov.w	r1, #4294967295
   80378:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8037a:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8037c:	605a      	str	r2, [r3, #4]
}
   8037e:	bc10      	pop	{r4}
   80380:	4770      	bx	lr

00080382 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80382:	0189      	lsls	r1, r1, #6
   80384:	2305      	movs	r3, #5
   80386:	5043      	str	r3, [r0, r1]
   80388:	4770      	bx	lr

0008038a <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8038a:	0189      	lsls	r1, r1, #6
   8038c:	2302      	movs	r3, #2
   8038e:	5043      	str	r3, [r0, r1]
   80390:	4770      	bx	lr

00080392 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80392:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80396:	61ca      	str	r2, [r1, #28]
   80398:	4770      	bx	lr

0008039a <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8039a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   8039e:	624a      	str	r2, [r1, #36]	; 0x24
   803a0:	4770      	bx	lr

000803a2 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803a2:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   803a6:	6a08      	ldr	r0, [r1, #32]
}
   803a8:	4770      	bx	lr

000803aa <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   803aa:	6943      	ldr	r3, [r0, #20]
   803ac:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   803b0:	bf1d      	ittte	ne
   803b2:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   803b6:	61c1      	strne	r1, [r0, #28]
	return 0;
   803b8:	2000      	movne	r0, #0
		return 1;
   803ba:	2001      	moveq	r0, #1
}
   803bc:	4770      	bx	lr

000803be <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   803be:	6943      	ldr	r3, [r0, #20]
   803c0:	f013 0f01 	tst.w	r3, #1
   803c4:	d005      	beq.n	803d2 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   803c6:	6983      	ldr	r3, [r0, #24]
   803c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   803cc:	600b      	str	r3, [r1, #0]

	return 0;
   803ce:	2000      	movs	r0, #0
   803d0:	4770      	bx	lr
		return 1;
   803d2:	2001      	movs	r0, #1
}
   803d4:	4770      	bx	lr
	...

000803d8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   803d8:	b500      	push	{lr}
   803da:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   803dc:	2201      	movs	r2, #1
   803de:	f10d 0107 	add.w	r1, sp, #7
   803e2:	4810      	ldr	r0, [pc, #64]	; (80424 <USART0_Handler+0x4c>)
   803e4:	4b10      	ldr	r3, [pc, #64]	; (80428 <USART0_Handler+0x50>)
   803e6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   803e8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803ea:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   803ee:	2200      	movs	r2, #0
   803f0:	4b0e      	ldr	r3, [pc, #56]	; (8042c <USART0_Handler+0x54>)
   803f2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   803f4:	4b0e      	ldr	r3, [pc, #56]	; (80430 <USART0_Handler+0x58>)
   803f6:	781b      	ldrb	r3, [r3, #0]
   803f8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803fc:	4a0d      	ldr	r2, [pc, #52]	; (80434 <USART0_Handler+0x5c>)
   803fe:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80400:	2b9b      	cmp	r3, #155	; 0x9b
   80402:	d00b      	beq.n	8041c <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   80404:	3301      	adds	r3, #1
   80406:	4a0a      	ldr	r2, [pc, #40]	; (80430 <USART0_Handler+0x58>)
   80408:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8040a:	2201      	movs	r2, #1
   8040c:	4b07      	ldr	r3, [pc, #28]	; (8042c <USART0_Handler+0x54>)
   8040e:	701a      	strb	r2, [r3, #0]
   80410:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80414:	b662      	cpsie	i
}
   80416:	b003      	add	sp, #12
   80418:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   8041c:	2200      	movs	r2, #0
   8041e:	4b04      	ldr	r3, [pc, #16]	; (80430 <USART0_Handler+0x58>)
   80420:	701a      	strb	r2, [r3, #0]
   80422:	e7f2      	b.n	8040a <USART0_Handler+0x32>
   80424:	40098000 	.word	0x40098000
   80428:	000807c1 	.word	0x000807c1
   8042c:	2007012c 	.word	0x2007012c
   80430:	20070b98 	.word	0x20070b98
   80434:	20070afc 	.word	0x20070afc

00080438 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80438:	b5f0      	push	{r4, r5, r6, r7, lr}
   8043a:	b083      	sub	sp, #12
   8043c:	4604      	mov	r4, r0
   8043e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80440:	2300      	movs	r3, #0
   80442:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80444:	4b20      	ldr	r3, [pc, #128]	; (804c8 <usart_serial_getchar+0x90>)
   80446:	4298      	cmp	r0, r3
   80448:	d00d      	beq.n	80466 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8044a:	4b20      	ldr	r3, [pc, #128]	; (804cc <usart_serial_getchar+0x94>)
   8044c:	4298      	cmp	r0, r3
   8044e:	d012      	beq.n	80476 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80450:	4b1f      	ldr	r3, [pc, #124]	; (804d0 <usart_serial_getchar+0x98>)
   80452:	4298      	cmp	r0, r3
   80454:	d019      	beq.n	8048a <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80456:	4b1f      	ldr	r3, [pc, #124]	; (804d4 <usart_serial_getchar+0x9c>)
   80458:	429c      	cmp	r4, r3
   8045a:	d020      	beq.n	8049e <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8045c:	4b1e      	ldr	r3, [pc, #120]	; (804d8 <usart_serial_getchar+0xa0>)
   8045e:	429c      	cmp	r4, r3
   80460:	d027      	beq.n	804b2 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80462:	b003      	add	sp, #12
   80464:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80466:	461f      	mov	r7, r3
   80468:	4e1c      	ldr	r6, [pc, #112]	; (804dc <usart_serial_getchar+0xa4>)
   8046a:	4629      	mov	r1, r5
   8046c:	4638      	mov	r0, r7
   8046e:	47b0      	blx	r6
   80470:	2800      	cmp	r0, #0
   80472:	d1fa      	bne.n	8046a <usart_serial_getchar+0x32>
   80474:	e7ef      	b.n	80456 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80476:	461f      	mov	r7, r3
   80478:	4e19      	ldr	r6, [pc, #100]	; (804e0 <usart_serial_getchar+0xa8>)
   8047a:	a901      	add	r1, sp, #4
   8047c:	4638      	mov	r0, r7
   8047e:	47b0      	blx	r6
   80480:	2800      	cmp	r0, #0
   80482:	d1fa      	bne.n	8047a <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80484:	9b01      	ldr	r3, [sp, #4]
   80486:	702b      	strb	r3, [r5, #0]
   80488:	e7e8      	b.n	8045c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8048a:	461e      	mov	r6, r3
   8048c:	4c14      	ldr	r4, [pc, #80]	; (804e0 <usart_serial_getchar+0xa8>)
   8048e:	a901      	add	r1, sp, #4
   80490:	4630      	mov	r0, r6
   80492:	47a0      	blx	r4
   80494:	2800      	cmp	r0, #0
   80496:	d1fa      	bne.n	8048e <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80498:	9b01      	ldr	r3, [sp, #4]
   8049a:	702b      	strb	r3, [r5, #0]
   8049c:	e7e1      	b.n	80462 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8049e:	461e      	mov	r6, r3
   804a0:	4c0f      	ldr	r4, [pc, #60]	; (804e0 <usart_serial_getchar+0xa8>)
   804a2:	a901      	add	r1, sp, #4
   804a4:	4630      	mov	r0, r6
   804a6:	47a0      	blx	r4
   804a8:	2800      	cmp	r0, #0
   804aa:	d1fa      	bne.n	804a2 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   804ac:	9b01      	ldr	r3, [sp, #4]
   804ae:	702b      	strb	r3, [r5, #0]
   804b0:	e7d7      	b.n	80462 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   804b2:	461e      	mov	r6, r3
   804b4:	4c0a      	ldr	r4, [pc, #40]	; (804e0 <usart_serial_getchar+0xa8>)
   804b6:	a901      	add	r1, sp, #4
   804b8:	4630      	mov	r0, r6
   804ba:	47a0      	blx	r4
   804bc:	2800      	cmp	r0, #0
   804be:	d1fa      	bne.n	804b6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   804c0:	9b01      	ldr	r3, [sp, #4]
   804c2:	702b      	strb	r3, [r5, #0]
}
   804c4:	e7cd      	b.n	80462 <usart_serial_getchar+0x2a>
   804c6:	bf00      	nop
   804c8:	400e0800 	.word	0x400e0800
   804cc:	40098000 	.word	0x40098000
   804d0:	4009c000 	.word	0x4009c000
   804d4:	400a0000 	.word	0x400a0000
   804d8:	400a4000 	.word	0x400a4000
   804dc:	0008094b 	.word	0x0008094b
   804e0:	000803bf 	.word	0x000803bf

000804e4 <usart_serial_putchar>:
{
   804e4:	b570      	push	{r4, r5, r6, lr}
   804e6:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   804e8:	4b1e      	ldr	r3, [pc, #120]	; (80564 <usart_serial_putchar+0x80>)
   804ea:	4298      	cmp	r0, r3
   804ec:	d00d      	beq.n	8050a <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   804ee:	4b1e      	ldr	r3, [pc, #120]	; (80568 <usart_serial_putchar+0x84>)
   804f0:	4298      	cmp	r0, r3
   804f2:	d013      	beq.n	8051c <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   804f4:	4b1d      	ldr	r3, [pc, #116]	; (8056c <usart_serial_putchar+0x88>)
   804f6:	4298      	cmp	r0, r3
   804f8:	d019      	beq.n	8052e <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   804fa:	4b1d      	ldr	r3, [pc, #116]	; (80570 <usart_serial_putchar+0x8c>)
   804fc:	4298      	cmp	r0, r3
   804fe:	d01f      	beq.n	80540 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80500:	4b1c      	ldr	r3, [pc, #112]	; (80574 <usart_serial_putchar+0x90>)
   80502:	4298      	cmp	r0, r3
   80504:	d025      	beq.n	80552 <usart_serial_putchar+0x6e>
	return 0;
   80506:	2000      	movs	r0, #0
}
   80508:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8050a:	461e      	mov	r6, r3
   8050c:	4d1a      	ldr	r5, [pc, #104]	; (80578 <usart_serial_putchar+0x94>)
   8050e:	4621      	mov	r1, r4
   80510:	4630      	mov	r0, r6
   80512:	47a8      	blx	r5
   80514:	2800      	cmp	r0, #0
   80516:	d1fa      	bne.n	8050e <usart_serial_putchar+0x2a>
		return 1;
   80518:	2001      	movs	r0, #1
   8051a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8051c:	461e      	mov	r6, r3
   8051e:	4d17      	ldr	r5, [pc, #92]	; (8057c <usart_serial_putchar+0x98>)
   80520:	4621      	mov	r1, r4
   80522:	4630      	mov	r0, r6
   80524:	47a8      	blx	r5
   80526:	2800      	cmp	r0, #0
   80528:	d1fa      	bne.n	80520 <usart_serial_putchar+0x3c>
		return 1;
   8052a:	2001      	movs	r0, #1
   8052c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8052e:	461e      	mov	r6, r3
   80530:	4d12      	ldr	r5, [pc, #72]	; (8057c <usart_serial_putchar+0x98>)
   80532:	4621      	mov	r1, r4
   80534:	4630      	mov	r0, r6
   80536:	47a8      	blx	r5
   80538:	2800      	cmp	r0, #0
   8053a:	d1fa      	bne.n	80532 <usart_serial_putchar+0x4e>
		return 1;
   8053c:	2001      	movs	r0, #1
   8053e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80540:	461e      	mov	r6, r3
   80542:	4d0e      	ldr	r5, [pc, #56]	; (8057c <usart_serial_putchar+0x98>)
   80544:	4621      	mov	r1, r4
   80546:	4630      	mov	r0, r6
   80548:	47a8      	blx	r5
   8054a:	2800      	cmp	r0, #0
   8054c:	d1fa      	bne.n	80544 <usart_serial_putchar+0x60>
		return 1;
   8054e:	2001      	movs	r0, #1
   80550:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80552:	461e      	mov	r6, r3
   80554:	4d09      	ldr	r5, [pc, #36]	; (8057c <usart_serial_putchar+0x98>)
   80556:	4621      	mov	r1, r4
   80558:	4630      	mov	r0, r6
   8055a:	47a8      	blx	r5
   8055c:	2800      	cmp	r0, #0
   8055e:	d1fa      	bne.n	80556 <usart_serial_putchar+0x72>
		return 1;
   80560:	2001      	movs	r0, #1
   80562:	bd70      	pop	{r4, r5, r6, pc}
   80564:	400e0800 	.word	0x400e0800
   80568:	40098000 	.word	0x40098000
   8056c:	4009c000 	.word	0x4009c000
   80570:	400a0000 	.word	0x400a0000
   80574:	400a4000 	.word	0x400a4000
   80578:	0008093b 	.word	0x0008093b
   8057c:	000803ab 	.word	0x000803ab

00080580 <configure_console>:
#include <asf.h>
#include "config/conf_board.h"
#include "console_functions.h"

void configure_console(void)
{
   80580:	b530      	push	{r4, r5, lr}
   80582:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80584:	2008      	movs	r0, #8
   80586:	4d15      	ldr	r5, [pc, #84]	; (805dc <configure_console+0x5c>)
   80588:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8058a:	4c15      	ldr	r4, [pc, #84]	; (805e0 <configure_console+0x60>)
   8058c:	4b15      	ldr	r3, [pc, #84]	; (805e4 <configure_console+0x64>)
   8058e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80590:	4a15      	ldr	r2, [pc, #84]	; (805e8 <configure_console+0x68>)
   80592:	4b16      	ldr	r3, [pc, #88]	; (805ec <configure_console+0x6c>)
   80594:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80596:	4a16      	ldr	r2, [pc, #88]	; (805f0 <configure_console+0x70>)
   80598:	4b16      	ldr	r3, [pc, #88]	; (805f4 <configure_console+0x74>)
   8059a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8059c:	4b16      	ldr	r3, [pc, #88]	; (805f8 <configure_console+0x78>)
   8059e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   805a0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   805a4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   805a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805aa:	9303      	str	r3, [sp, #12]
   805ac:	2008      	movs	r0, #8
   805ae:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   805b0:	a901      	add	r1, sp, #4
   805b2:	4620      	mov	r0, r4
   805b4:	4b11      	ldr	r3, [pc, #68]	; (805fc <configure_console+0x7c>)
   805b6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   805b8:	4d11      	ldr	r5, [pc, #68]	; (80600 <configure_console+0x80>)
   805ba:	682b      	ldr	r3, [r5, #0]
   805bc:	2100      	movs	r1, #0
   805be:	6898      	ldr	r0, [r3, #8]
   805c0:	4c10      	ldr	r4, [pc, #64]	; (80604 <configure_console+0x84>)
   805c2:	47a0      	blx	r4
	setbuf(stdin, NULL);
   805c4:	682b      	ldr	r3, [r5, #0]
   805c6:	2100      	movs	r1, #0
   805c8:	6858      	ldr	r0, [r3, #4]
   805ca:	47a0      	blx	r4
	};

	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);

	printf("Console ready\n");
   805cc:	480e      	ldr	r0, [pc, #56]	; (80608 <configure_console+0x88>)
   805ce:	4c0f      	ldr	r4, [pc, #60]	; (8060c <configure_console+0x8c>)
   805d0:	47a0      	blx	r4
	printf("=============\n");
   805d2:	480f      	ldr	r0, [pc, #60]	; (80610 <configure_console+0x90>)
   805d4:	47a0      	blx	r4
}
   805d6:	b005      	add	sp, #20
   805d8:	bd30      	pop	{r4, r5, pc}
   805da:	bf00      	nop
   805dc:	00080dc5 	.word	0x00080dc5
   805e0:	400e0800 	.word	0x400e0800
   805e4:	20073f44 	.word	0x20073f44
   805e8:	000804e5 	.word	0x000804e5
   805ec:	20073f40 	.word	0x20073f40
   805f0:	00080439 	.word	0x00080439
   805f4:	20073f38 	.word	0x20073f38
   805f8:	0501bd00 	.word	0x0501bd00
   805fc:	00080905 	.word	0x00080905
   80600:	20070134 	.word	0x20070134
   80604:	00081205 	.word	0x00081205
   80608:	00083f70 	.word	0x00083f70
   8060c:	00081141 	.word	0x00081141
   80610:	00083f80 	.word	0x00083f80

00080614 <configure_dacc>:

 #include <asf.h>
 #include "dacc_functions.h"
 
 void configure_dacc(void)
 {
   80614:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_DACC);
   80616:	2026      	movs	r0, #38	; 0x26
   80618:	4b0c      	ldr	r3, [pc, #48]	; (8064c <configure_dacc+0x38>)
   8061a:	4798      	blx	r3
	
	dacc_reset(DACC);
   8061c:	4c0c      	ldr	r4, [pc, #48]	; (80650 <configure_dacc+0x3c>)
   8061e:	4620      	mov	r0, r4
   80620:	4b0c      	ldr	r3, [pc, #48]	; (80654 <configure_dacc+0x40>)
   80622:	4798      	blx	r3
	dacc_set_transfer_mode(DACC, 0);
   80624:	2100      	movs	r1, #0
   80626:	4620      	mov	r0, r4
   80628:	4b0b      	ldr	r3, [pc, #44]	; (80658 <configure_dacc+0x44>)
   8062a:	4798      	blx	r3
	dacc_set_timing(DACC, 1, 1, 0);			
   8062c:	2300      	movs	r3, #0
   8062e:	2201      	movs	r2, #1
   80630:	4611      	mov	r1, r2
   80632:	4620      	mov	r0, r4
   80634:	4d09      	ldr	r5, [pc, #36]	; (8065c <configure_dacc+0x48>)
   80636:	47a8      	blx	r5
	
	dacc_set_channel_selection(DACC, 0);	
   80638:	2100      	movs	r1, #0
   8063a:	4620      	mov	r0, r4
   8063c:	4b08      	ldr	r3, [pc, #32]	; (80660 <configure_dacc+0x4c>)
   8063e:	4798      	blx	r3
	dacc_enable_channel(DACC, 0);		
   80640:	2100      	movs	r1, #0
   80642:	4620      	mov	r0, r4
   80644:	4b07      	ldr	r3, [pc, #28]	; (80664 <configure_dacc+0x50>)
   80646:	4798      	blx	r3
   80648:	bd38      	pop	{r3, r4, r5, pc}
   8064a:	bf00      	nop
   8064c:	00080dc5 	.word	0x00080dc5
   80650:	400c8000 	.word	0x400c8000
   80654:	00080889 	.word	0x00080889
   80658:	0008088f 	.word	0x0008088f
   8065c:	000808c3 	.word	0x000808c3
   80660:	000808ab 	.word	0x000808ab
   80664:	000808f1 	.word	0x000808f1

00080668 <configure_tc>:
  * Configure and enable interrupt for TC0 with a 500 kHz frequency
  * TC0 = MCK / 2 <-> 84 MHz / 2 = 42 MHz
  * Fs = 0.5 MHz, TC0 = 42 MHz -> 42 MHz / 0.5 MHz = 84
  */
 void configure_tc(void)
 {
   80668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	 // Configure TC0
	 pmc_enable_periph_clk(ID_TC0);
   8066c:	201b      	movs	r0, #27
   8066e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 806dc <configure_tc+0x74>
   80672:	47c8      	blx	r9
	 
	 tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);
   80674:	4c15      	ldr	r4, [pc, #84]	; (806cc <configure_tc+0x64>)
   80676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8067a:	2100      	movs	r1, #0
   8067c:	4620      	mov	r0, r4
   8067e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 806e0 <configure_tc+0x78>
   80682:	47c0      	blx	r8
	 tc_write_rc(TC0, 0, 84);
   80684:	2254      	movs	r2, #84	; 0x54
   80686:	2100      	movs	r1, #0
   80688:	4620      	mov	r0, r4
   8068a:	4f11      	ldr	r7, [pc, #68]	; (806d0 <configure_tc+0x68>)
   8068c:	47b8      	blx	r7
   8068e:	4e11      	ldr	r6, [pc, #68]	; (806d4 <configure_tc+0x6c>)
   80690:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80694:	6033      	str	r3, [r6, #0]

	 NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	 tc_enable_interrupt(TC0, 0, TC_IER_CPCS);
   80696:	2210      	movs	r2, #16
   80698:	2100      	movs	r1, #0
   8069a:	4620      	mov	r0, r4
   8069c:	4d0e      	ldr	r5, [pc, #56]	; (806d8 <configure_tc+0x70>)
   8069e:	47a8      	blx	r5
	 
	 // Configure TC1
	 pmc_enable_periph_clk(ID_TC4);
   806a0:	201f      	movs	r0, #31
   806a2:	47c8      	blx	r9
	 
	 tc_init(TC1, 1, 0 | TC_CMR_CPCTRG);
   806a4:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
   806a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   806ac:	2101      	movs	r1, #1
   806ae:	4620      	mov	r0, r4
   806b0:	47c0      	blx	r8
	 tc_write_rc(TC1, 1, 84);
   806b2:	2254      	movs	r2, #84	; 0x54
   806b4:	2101      	movs	r1, #1
   806b6:	4620      	mov	r0, r4
   806b8:	47b8      	blx	r7
   806ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   806be:	6033      	str	r3, [r6, #0]

	 NVIC_EnableIRQ((IRQn_Type) ID_TC4);
	 tc_enable_interrupt(TC1, 1, TC_IER_CPCS);
   806c0:	2210      	movs	r2, #16
   806c2:	2101      	movs	r1, #1
   806c4:	4620      	mov	r0, r4
   806c6:	47a8      	blx	r5
   806c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   806cc:	40080000 	.word	0x40080000
   806d0:	00080393 	.word	0x00080393
   806d4:	e000e100 	.word	0xe000e100
   806d8:	0008039b 	.word	0x0008039b
   806dc:	00080dc5 	.word	0x00080dc5
   806e0:	0008036b 	.word	0x0008036b

000806e4 <TC0_Handler>:

 /*
  * Interrupt handler for TC0 interrupt. Takes one single sample
  */
 void TC0_Handler(void)
 {
   806e4:	b500      	push	{lr}
   806e6:	b083      	sub	sp, #12
	 volatile uint32_t ul_dummy;
	 ul_dummy = tc_get_status(TC0, 0);
   806e8:	2100      	movs	r1, #0
   806ea:	4805      	ldr	r0, [pc, #20]	; (80700 <TC0_Handler+0x1c>)
   806ec:	4b05      	ldr	r3, [pc, #20]	; (80704 <TC0_Handler+0x20>)
   806ee:	4798      	blx	r3
   806f0:	9001      	str	r0, [sp, #4]

	 /* Avoid compiler warning */
	 UNUSED(ul_dummy);
   806f2:	9b01      	ldr	r3, [sp, #4]
	 
	 adc_start(ADC);
   806f4:	4804      	ldr	r0, [pc, #16]	; (80708 <TC0_Handler+0x24>)
   806f6:	4b05      	ldr	r3, [pc, #20]	; (8070c <TC0_Handler+0x28>)
   806f8:	4798      	blx	r3
 }
   806fa:	b003      	add	sp, #12
   806fc:	f85d fb04 	ldr.w	pc, [sp], #4
   80700:	40080000 	.word	0x40080000
   80704:	000803a3 	.word	0x000803a3
   80708:	400c0000 	.word	0x400c0000
   8070c:	00080353 	.word	0x00080353

00080710 <TC4_Handler>:

 /*
  * Interrupt handler for TC1 interrupt
  */
 void TC4_Handler(void)
 {
   80710:	b510      	push	{r4, lr}
   80712:	b082      	sub	sp, #8
	 volatile uint32_t ul_dummy;
	 ul_dummy = tc_get_status(TC1, 1);
   80714:	2101      	movs	r1, #1
   80716:	480f      	ldr	r0, [pc, #60]	; (80754 <TC4_Handler+0x44>)
   80718:	4b0f      	ldr	r3, [pc, #60]	; (80758 <TC4_Handler+0x48>)
   8071a:	4798      	blx	r3
   8071c:	9001      	str	r0, [sp, #4]

	 /* Avoid compiler warning */
	 UNUSED(ul_dummy);
   8071e:	9b01      	ldr	r3, [sp, #4]
	 
	 dacc_write_conversion_data(DACC, dacc_values[dacc_index]);
   80720:	4c0e      	ldr	r4, [pc, #56]	; (8075c <TC4_Handler+0x4c>)
   80722:	f9b4 2000 	ldrsh.w	r2, [r4]
   80726:	4b0e      	ldr	r3, [pc, #56]	; (80760 <TC4_Handler+0x50>)
   80728:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
   8072c:	480d      	ldr	r0, [pc, #52]	; (80764 <TC4_Handler+0x54>)
   8072e:	4b0e      	ldr	r3, [pc, #56]	; (80768 <TC4_Handler+0x58>)
   80730:	4798      	blx	r3
	 dacc_index++;
   80732:	8823      	ldrh	r3, [r4, #0]
   80734:	3301      	adds	r3, #1
   80736:	b21b      	sxth	r3, r3

	 if (dacc_index >= DACC_BUFFER_SIZE)
   80738:	f640 42bb 	movw	r2, #3259	; 0xcbb
   8073c:	4293      	cmp	r3, r2
   8073e:	dd07      	ble.n	80750 <TC4_Handler+0x40>
	 {
	 	dacc_index = 0;
   80740:	2200      	movs	r2, #0
   80742:	4b06      	ldr	r3, [pc, #24]	; (8075c <TC4_Handler+0x4c>)
   80744:	801a      	strh	r2, [r3, #0]
		dacc_finished = 1;
   80746:	2201      	movs	r2, #1
   80748:	4b08      	ldr	r3, [pc, #32]	; (8076c <TC4_Handler+0x5c>)
   8074a:	801a      	strh	r2, [r3, #0]
	 }
   8074c:	b002      	add	sp, #8
   8074e:	bd10      	pop	{r4, pc}
	 dacc_index++;
   80750:	8023      	strh	r3, [r4, #0]
   80752:	e7fb      	b.n	8074c <TC4_Handler+0x3c>
   80754:	40084000 	.word	0x40084000
   80758:	000803a3 	.word	0x000803a3
   8075c:	20073f3e 	.word	0x20073f3e
   80760:	20070c48 	.word	0x20070c48
   80764:	400c8000 	.word	0x400c8000
   80768:	000808a7 	.word	0x000808a7
   8076c:	20073f3c 	.word	0x20073f3c

00080770 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80770:	3801      	subs	r0, #1
   80772:	2802      	cmp	r0, #2
   80774:	d815      	bhi.n	807a2 <_write+0x32>
{
   80776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8077a:	460e      	mov	r6, r1
   8077c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8077e:	b19a      	cbz	r2, 807a8 <_write+0x38>
   80780:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80782:	f8df 8038 	ldr.w	r8, [pc, #56]	; 807bc <_write+0x4c>
   80786:	4f0c      	ldr	r7, [pc, #48]	; (807b8 <_write+0x48>)
   80788:	f8d8 0000 	ldr.w	r0, [r8]
   8078c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80790:	683b      	ldr	r3, [r7, #0]
   80792:	4798      	blx	r3
   80794:	2800      	cmp	r0, #0
   80796:	db0a      	blt.n	807ae <_write+0x3e>
   80798:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8079a:	3c01      	subs	r4, #1
   8079c:	d1f4      	bne.n	80788 <_write+0x18>
   8079e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   807a2:	f04f 30ff 	mov.w	r0, #4294967295
   807a6:	4770      	bx	lr
	for (; len != 0; --len) {
   807a8:	4610      	mov	r0, r2
   807aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   807ae:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   807b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807b6:	bf00      	nop
   807b8:	20073f40 	.word	0x20073f40
   807bc:	20073f44 	.word	0x20073f44

000807c0 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   807c0:	2a00      	cmp	r2, #0
   807c2:	d051      	beq.n	80868 <usart_serial_read_packet+0xa8>
{
   807c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   807c8:	b083      	sub	sp, #12
   807ca:	4605      	mov	r5, r0
   807cc:	460c      	mov	r4, r1
   807ce:	4692      	mov	sl, r2
   807d0:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   807d2:	4f26      	ldr	r7, [pc, #152]	; (8086c <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   807d4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80880 <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   807d8:	4e25      	ldr	r6, [pc, #148]	; (80870 <usart_serial_read_packet+0xb0>)
   807da:	e01d      	b.n	80818 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   807dc:	4621      	mov	r1, r4
   807de:	4638      	mov	r0, r7
   807e0:	47c8      	blx	r9
   807e2:	2800      	cmp	r0, #0
   807e4:	d1fa      	bne.n	807dc <usart_serial_read_packet+0x1c>
   807e6:	e021      	b.n	8082c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   807e8:	469b      	mov	fp, r3
   807ea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80884 <usart_serial_read_packet+0xc4>
   807ee:	a901      	add	r1, sp, #4
   807f0:	4658      	mov	r0, fp
   807f2:	47c0      	blx	r8
   807f4:	2800      	cmp	r0, #0
   807f6:	d1fa      	bne.n	807ee <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   807f8:	9b01      	ldr	r3, [sp, #4]
   807fa:	7023      	strb	r3, [r4, #0]
   807fc:	e019      	b.n	80832 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   807fe:	469b      	mov	fp, r3
   80800:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80884 <usart_serial_read_packet+0xc4>
   80804:	a901      	add	r1, sp, #4
   80806:	4658      	mov	r0, fp
   80808:	47c0      	blx	r8
   8080a:	2800      	cmp	r0, #0
   8080c:	d1fa      	bne.n	80804 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   8080e:	9b01      	ldr	r3, [sp, #4]
   80810:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   80812:	3401      	adds	r4, #1
	while (len) {
   80814:	4554      	cmp	r4, sl
   80816:	d023      	beq.n	80860 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   80818:	2300      	movs	r3, #0
   8081a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   8081c:	42bd      	cmp	r5, r7
   8081e:	d0dd      	beq.n	807dc <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   80820:	4b14      	ldr	r3, [pc, #80]	; (80874 <usart_serial_read_packet+0xb4>)
   80822:	429d      	cmp	r5, r3
   80824:	d0e0      	beq.n	807e8 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   80826:	4b14      	ldr	r3, [pc, #80]	; (80878 <usart_serial_read_packet+0xb8>)
   80828:	429d      	cmp	r5, r3
   8082a:	d0e8      	beq.n	807fe <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   8082c:	4b13      	ldr	r3, [pc, #76]	; (8087c <usart_serial_read_packet+0xbc>)
   8082e:	429d      	cmp	r5, r3
   80830:	d00b      	beq.n	8084a <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   80832:	42b5      	cmp	r5, r6
   80834:	d1ed      	bne.n	80812 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80836:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80884 <usart_serial_read_packet+0xc4>
   8083a:	a901      	add	r1, sp, #4
   8083c:	4630      	mov	r0, r6
   8083e:	47c0      	blx	r8
   80840:	2800      	cmp	r0, #0
   80842:	d1fa      	bne.n	8083a <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80844:	9b01      	ldr	r3, [sp, #4]
   80846:	7023      	strb	r3, [r4, #0]
   80848:	e7e3      	b.n	80812 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8084a:	469b      	mov	fp, r3
   8084c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80884 <usart_serial_read_packet+0xc4>
   80850:	a901      	add	r1, sp, #4
   80852:	4658      	mov	r0, fp
   80854:	47c0      	blx	r8
   80856:	2800      	cmp	r0, #0
   80858:	d1fa      	bne.n	80850 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   8085a:	9b01      	ldr	r3, [sp, #4]
   8085c:	7023      	strb	r3, [r4, #0]
   8085e:	e7d8      	b.n	80812 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80860:	2000      	movs	r0, #0
   80862:	b003      	add	sp, #12
   80864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80868:	2000      	movs	r0, #0
   8086a:	4770      	bx	lr
   8086c:	400e0800 	.word	0x400e0800
   80870:	400a4000 	.word	0x400a4000
   80874:	40098000 	.word	0x40098000
   80878:	4009c000 	.word	0x4009c000
   8087c:	400a0000 	.word	0x400a0000
   80880:	0008094b 	.word	0x0008094b
   80884:	000803bf 	.word	0x000803bf

00080888 <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
   80888:	2301      	movs	r3, #1
   8088a:	6003      	str	r3, [r0, #0]
   8088c:	4770      	bx	lr

0008088e <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
   8088e:	b929      	cbnz	r1, 8089c <dacc_set_transfer_mode+0xe>
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
   80890:	6843      	ldr	r3, [r0, #4]
   80892:	f023 0310 	bic.w	r3, r3, #16
   80896:	6043      	str	r3, [r0, #4]
#endif
	}
	return DACC_RC_OK;
}
   80898:	2000      	movs	r0, #0
   8089a:	4770      	bx	lr
		p_dacc->DACC_MR |= DACC_MR_WORD_WORD;
   8089c:	6843      	ldr	r3, [r0, #4]
   8089e:	f043 0310 	orr.w	r3, r3, #16
   808a2:	6043      	str	r3, [r0, #4]
   808a4:	e7f8      	b.n	80898 <dacc_set_transfer_mode+0xa>

000808a6 <dacc_write_conversion_data>:
 * \param p_dacc Pointer to a DACC instance. 
 * \param ul_data The data to be transferred to analog value.
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data)
{
	p_dacc->DACC_CDR = ul_data;
   808a6:	6201      	str	r1, [r0, #32]
   808a8:	4770      	bx	lr

000808aa <dacc_set_channel_selection>:
 *
 * \return \ref DACC_RC_OK if successful.
 */
uint32_t dacc_set_channel_selection(Dacc *p_dacc, uint32_t ul_channel)
{
	uint32_t mr = p_dacc->DACC_MR & (~DACC_MR_USER_SEL_Msk);
   808aa:	6843      	ldr	r3, [r0, #4]
	if (ul_channel > MAX_CH_NB) {
   808ac:	2901      	cmp	r1, #1
   808ae:	d901      	bls.n	808b4 <dacc_set_channel_selection+0xa>
		return DACC_RC_INVALID_PARAM;
   808b0:	2001      	movs	r0, #1
	mr &= ~(DACC_MR_TAG);
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
	p_dacc->DACC_MR = mr;

	return DACC_RC_OK;
}
   808b2:	4770      	bx	lr
	mr &= ~(DACC_MR_TAG);
   808b4:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
	mr |= ul_channel << DACC_MR_USER_SEL_Pos;
   808b8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	p_dacc->DACC_MR = mr;
   808bc:	6041      	str	r1, [r0, #4]
	return DACC_RC_OK;
   808be:	2000      	movs	r0, #0
   808c0:	4770      	bx	lr

000808c2 <dacc_set_timing>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_timing(Dacc *p_dacc,
		uint32_t ul_refresh, uint32_t ul_maxs, uint32_t ul_startup)
{
   808c2:	b410      	push	{r4}
	uint32_t mr = p_dacc->DACC_MR
   808c4:	6844      	ldr	r4, [r0, #4]
   808c6:	f024 547c 	bic.w	r4, r4, #1056964608	; 0x3f000000
   808ca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
	& (~(DACC_MR_REFRESH_Msk | DACC_MR_STARTUP_Msk));
	mr |= DACC_MR_REFRESH(ul_refresh);
   808ce:	0209      	lsls	r1, r1, #8
   808d0:	b289      	uxth	r1, r1
   808d2:	4321      	orrs	r1, r4
	if (ul_maxs) {
   808d4:	b94a      	cbnz	r2, 808ea <dacc_set_timing+0x28>
		mr |= DACC_MR_MAXS;
		} else {
		mr &= ~DACC_MR_MAXS;
   808d6:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
	}
	mr |= (DACC_MR_STARTUP_Msk & ((ul_startup) << DACC_MR_STARTUP_Pos));
   808da:	061b      	lsls	r3, r3, #24
   808dc:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
   808e0:	430b      	orrs	r3, r1

	p_dacc->DACC_MR = mr;
   808e2:	6043      	str	r3, [r0, #4]
	return DACC_RC_OK;
}
   808e4:	2000      	movs	r0, #0
   808e6:	bc10      	pop	{r4}
   808e8:	4770      	bx	lr
		mr |= DACC_MR_MAXS;
   808ea:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
   808ee:	e7f4      	b.n	808da <dacc_set_timing+0x18>

000808f0 <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
   808f0:	2901      	cmp	r1, #1
   808f2:	d901      	bls.n	808f8 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
   808f4:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
   808f6:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
   808f8:	2301      	movs	r3, #1
   808fa:	fa03 f101 	lsl.w	r1, r3, r1
   808fe:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
   80900:	2000      	movs	r0, #0
   80902:	4770      	bx	lr

00080904 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80904:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80906:	23ac      	movs	r3, #172	; 0xac
   80908:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8090a:	680b      	ldr	r3, [r1, #0]
   8090c:	684a      	ldr	r2, [r1, #4]
   8090e:	fbb3 f3f2 	udiv	r3, r3, r2
   80912:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80914:	1e5c      	subs	r4, r3, #1
   80916:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8091a:	4294      	cmp	r4, r2
   8091c:	d80b      	bhi.n	80936 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8091e:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80920:	688b      	ldr	r3, [r1, #8]
   80922:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80924:	f240 2302 	movw	r3, #514	; 0x202
   80928:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8092c:	2350      	movs	r3, #80	; 0x50
   8092e:	6003      	str	r3, [r0, #0]

	return 0;
   80930:	2000      	movs	r0, #0
}
   80932:	bc10      	pop	{r4}
   80934:	4770      	bx	lr
		return 1;
   80936:	2001      	movs	r0, #1
   80938:	e7fb      	b.n	80932 <uart_init+0x2e>

0008093a <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8093a:	6943      	ldr	r3, [r0, #20]
   8093c:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80940:	bf1a      	itte	ne
   80942:	61c1      	strne	r1, [r0, #28]
	return 0;
   80944:	2000      	movne	r0, #0
		return 1;
   80946:	2001      	moveq	r0, #1
}
   80948:	4770      	bx	lr

0008094a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8094a:	6943      	ldr	r3, [r0, #20]
   8094c:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80950:	bf1d      	ittte	ne
   80952:	6983      	ldrne	r3, [r0, #24]
   80954:	700b      	strbne	r3, [r1, #0]
	return 0;
   80956:	2000      	movne	r0, #0
		return 1;
   80958:	2001      	moveq	r0, #1
}
   8095a:	4770      	bx	lr

0008095c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8095c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8095e:	480e      	ldr	r0, [pc, #56]	; (80998 <sysclk_init+0x3c>)
   80960:	4b0e      	ldr	r3, [pc, #56]	; (8099c <sysclk_init+0x40>)
   80962:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80964:	213e      	movs	r1, #62	; 0x3e
   80966:	2000      	movs	r0, #0
   80968:	4b0d      	ldr	r3, [pc, #52]	; (809a0 <sysclk_init+0x44>)
   8096a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8096c:	4c0d      	ldr	r4, [pc, #52]	; (809a4 <sysclk_init+0x48>)
   8096e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80970:	2800      	cmp	r0, #0
   80972:	d0fc      	beq.n	8096e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80974:	4b0c      	ldr	r3, [pc, #48]	; (809a8 <sysclk_init+0x4c>)
   80976:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80978:	4a0c      	ldr	r2, [pc, #48]	; (809ac <sysclk_init+0x50>)
   8097a:	4b0d      	ldr	r3, [pc, #52]	; (809b0 <sysclk_init+0x54>)
   8097c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8097e:	4c0d      	ldr	r4, [pc, #52]	; (809b4 <sysclk_init+0x58>)
   80980:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80982:	2800      	cmp	r0, #0
   80984:	d0fc      	beq.n	80980 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80986:	2010      	movs	r0, #16
   80988:	4b0b      	ldr	r3, [pc, #44]	; (809b8 <sysclk_init+0x5c>)
   8098a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8098c:	4b0b      	ldr	r3, [pc, #44]	; (809bc <sysclk_init+0x60>)
   8098e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80990:	4801      	ldr	r0, [pc, #4]	; (80998 <sysclk_init+0x3c>)
   80992:	4b02      	ldr	r3, [pc, #8]	; (8099c <sysclk_init+0x40>)
   80994:	4798      	blx	r3
   80996:	bd10      	pop	{r4, pc}
   80998:	0501bd00 	.word	0x0501bd00
   8099c:	200700a5 	.word	0x200700a5
   809a0:	00080d41 	.word	0x00080d41
   809a4:	00080d95 	.word	0x00080d95
   809a8:	00080da5 	.word	0x00080da5
   809ac:	200d3f01 	.word	0x200d3f01
   809b0:	400e0600 	.word	0x400e0600
   809b4:	00080db5 	.word	0x00080db5
   809b8:	00080cdd 	.word	0x00080cdd
   809bc:	00080eb5 	.word	0x00080eb5

000809c0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   809c0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   809c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   809c6:	4b12      	ldr	r3, [pc, #72]	; (80a10 <board_init+0x50>)
   809c8:	605a      	str	r2, [r3, #4]
   809ca:	200b      	movs	r0, #11
   809cc:	4c11      	ldr	r4, [pc, #68]	; (80a14 <board_init+0x54>)
   809ce:	47a0      	blx	r4
   809d0:	200c      	movs	r0, #12
   809d2:	47a0      	blx	r4
   809d4:	200d      	movs	r0, #13
   809d6:	47a0      	blx	r4
   809d8:	200e      	movs	r0, #14
   809da:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   809dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809e0:	203b      	movs	r0, #59	; 0x3b
   809e2:	4c0d      	ldr	r4, [pc, #52]	; (80a18 <board_init+0x58>)
   809e4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   809e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809ea:	2055      	movs	r0, #85	; 0x55
   809ec:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   809ee:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809f2:	2056      	movs	r0, #86	; 0x56
   809f4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   809f6:	4909      	ldr	r1, [pc, #36]	; (80a1c <board_init+0x5c>)
   809f8:	2068      	movs	r0, #104	; 0x68
   809fa:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   809fc:	4908      	ldr	r1, [pc, #32]	; (80a20 <board_init+0x60>)
   809fe:	205c      	movs	r0, #92	; 0x5c
   80a00:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80a02:	4a08      	ldr	r2, [pc, #32]	; (80a24 <board_init+0x64>)
   80a04:	f44f 7140 	mov.w	r1, #768	; 0x300
   80a08:	4807      	ldr	r0, [pc, #28]	; (80a28 <board_init+0x68>)
   80a0a:	4b08      	ldr	r3, [pc, #32]	; (80a2c <board_init+0x6c>)
   80a0c:	4798      	blx	r3
   80a0e:	bd10      	pop	{r4, pc}
   80a10:	400e1a50 	.word	0x400e1a50
   80a14:	00080dc5 	.word	0x00080dc5
   80a18:	00080ad1 	.word	0x00080ad1
   80a1c:	28000079 	.word	0x28000079
   80a20:	28000001 	.word	0x28000001
   80a24:	08000001 	.word	0x08000001
   80a28:	400e0e00 	.word	0x400e0e00
   80a2c:	00080ba1 	.word	0x00080ba1

00080a30 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80a30:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80a32:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80a36:	d016      	beq.n	80a66 <pio_set_peripheral+0x36>
   80a38:	d80b      	bhi.n	80a52 <pio_set_peripheral+0x22>
   80a3a:	b149      	cbz	r1, 80a50 <pio_set_peripheral+0x20>
   80a3c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80a40:	d105      	bne.n	80a4e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80a42:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80a44:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80a46:	400b      	ands	r3, r1
   80a48:	ea23 0302 	bic.w	r3, r3, r2
   80a4c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80a4e:	6042      	str	r2, [r0, #4]
   80a50:	4770      	bx	lr
	switch (ul_type) {
   80a52:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80a56:	d0fb      	beq.n	80a50 <pio_set_peripheral+0x20>
   80a58:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80a5c:	d0f8      	beq.n	80a50 <pio_set_peripheral+0x20>
   80a5e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80a62:	d1f4      	bne.n	80a4e <pio_set_peripheral+0x1e>
   80a64:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80a66:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80a68:	4313      	orrs	r3, r2
   80a6a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80a6c:	e7ef      	b.n	80a4e <pio_set_peripheral+0x1e>

00080a6e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a6e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a70:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80a74:	bf14      	ite	ne
   80a76:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a78:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80a7a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80a7e:	bf14      	ite	ne
   80a80:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80a82:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80a84:	f012 0f02 	tst.w	r2, #2
   80a88:	d107      	bne.n	80a9a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80a8a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80a8e:	bf18      	it	ne
   80a90:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80a94:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80a96:	6001      	str	r1, [r0, #0]
   80a98:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80a9a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80a9e:	e7f9      	b.n	80a94 <pio_set_input+0x26>

00080aa0 <pio_set_output>:
{
   80aa0:	b410      	push	{r4}
   80aa2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80aa4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80aa6:	b944      	cbnz	r4, 80aba <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80aa8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80aaa:	b143      	cbz	r3, 80abe <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80aac:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80aae:	b942      	cbnz	r2, 80ac2 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80ab0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80ab2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80ab4:	6001      	str	r1, [r0, #0]
}
   80ab6:	bc10      	pop	{r4}
   80ab8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80aba:	6641      	str	r1, [r0, #100]	; 0x64
   80abc:	e7f5      	b.n	80aaa <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80abe:	6541      	str	r1, [r0, #84]	; 0x54
   80ac0:	e7f5      	b.n	80aae <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80ac2:	6301      	str	r1, [r0, #48]	; 0x30
   80ac4:	e7f5      	b.n	80ab2 <pio_set_output+0x12>

00080ac6 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80ac6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80ac8:	4770      	bx	lr

00080aca <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80aca:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80acc:	4770      	bx	lr
	...

00080ad0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80ad0:	b570      	push	{r4, r5, r6, lr}
   80ad2:	b082      	sub	sp, #8
   80ad4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80ad6:	0943      	lsrs	r3, r0, #5
   80ad8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80adc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80ae0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80ae2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80ae6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80aea:	d031      	beq.n	80b50 <pio_configure_pin+0x80>
   80aec:	d816      	bhi.n	80b1c <pio_configure_pin+0x4c>
   80aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80af2:	d01b      	beq.n	80b2c <pio_configure_pin+0x5c>
   80af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80af8:	d116      	bne.n	80b28 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80afa:	f000 001f 	and.w	r0, r0, #31
   80afe:	2601      	movs	r6, #1
   80b00:	4086      	lsls	r6, r0
   80b02:	4632      	mov	r2, r6
   80b04:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b08:	4620      	mov	r0, r4
   80b0a:	4b22      	ldr	r3, [pc, #136]	; (80b94 <pio_configure_pin+0xc4>)
   80b0c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b0e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b12:	bf14      	ite	ne
   80b14:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b16:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80b18:	2001      	movs	r0, #1
   80b1a:	e017      	b.n	80b4c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80b1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80b20:	d021      	beq.n	80b66 <pio_configure_pin+0x96>
   80b22:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80b26:	d01e      	beq.n	80b66 <pio_configure_pin+0x96>
		return 0;
   80b28:	2000      	movs	r0, #0
   80b2a:	e00f      	b.n	80b4c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80b2c:	f000 001f 	and.w	r0, r0, #31
   80b30:	2601      	movs	r6, #1
   80b32:	4086      	lsls	r6, r0
   80b34:	4632      	mov	r2, r6
   80b36:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b3a:	4620      	mov	r0, r4
   80b3c:	4b15      	ldr	r3, [pc, #84]	; (80b94 <pio_configure_pin+0xc4>)
   80b3e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b40:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b44:	bf14      	ite	ne
   80b46:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b48:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80b4a:	2001      	movs	r0, #1
}
   80b4c:	b002      	add	sp, #8
   80b4e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80b50:	f000 011f 	and.w	r1, r0, #31
   80b54:	2601      	movs	r6, #1
   80b56:	462a      	mov	r2, r5
   80b58:	fa06 f101 	lsl.w	r1, r6, r1
   80b5c:	4620      	mov	r0, r4
   80b5e:	4b0e      	ldr	r3, [pc, #56]	; (80b98 <pio_configure_pin+0xc8>)
   80b60:	4798      	blx	r3
	return 1;
   80b62:	4630      	mov	r0, r6
		break;
   80b64:	e7f2      	b.n	80b4c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b66:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b6a:	f000 011f 	and.w	r1, r0, #31
   80b6e:	2601      	movs	r6, #1
   80b70:	ea05 0306 	and.w	r3, r5, r6
   80b74:	9300      	str	r3, [sp, #0]
   80b76:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b7a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b7e:	bf14      	ite	ne
   80b80:	2200      	movne	r2, #0
   80b82:	2201      	moveq	r2, #1
   80b84:	fa06 f101 	lsl.w	r1, r6, r1
   80b88:	4620      	mov	r0, r4
   80b8a:	4c04      	ldr	r4, [pc, #16]	; (80b9c <pio_configure_pin+0xcc>)
   80b8c:	47a0      	blx	r4
	return 1;
   80b8e:	4630      	mov	r0, r6
		break;
   80b90:	e7dc      	b.n	80b4c <pio_configure_pin+0x7c>
   80b92:	bf00      	nop
   80b94:	00080a31 	.word	0x00080a31
   80b98:	00080a6f 	.word	0x00080a6f
   80b9c:	00080aa1 	.word	0x00080aa1

00080ba0 <pio_configure_pin_group>:
{
   80ba0:	b570      	push	{r4, r5, r6, lr}
   80ba2:	b082      	sub	sp, #8
   80ba4:	4605      	mov	r5, r0
   80ba6:	460e      	mov	r6, r1
   80ba8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80baa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80bae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80bb2:	d027      	beq.n	80c04 <pio_configure_pin_group+0x64>
   80bb4:	d811      	bhi.n	80bda <pio_configure_pin_group+0x3a>
   80bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80bba:	d016      	beq.n	80bea <pio_configure_pin_group+0x4a>
   80bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80bc0:	d111      	bne.n	80be6 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80bc2:	460a      	mov	r2, r1
   80bc4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80bc8:	4b19      	ldr	r3, [pc, #100]	; (80c30 <pio_configure_pin_group+0x90>)
   80bca:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80bcc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80bd0:	bf14      	ite	ne
   80bd2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80bd4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80bd6:	2001      	movs	r0, #1
   80bd8:	e012      	b.n	80c00 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80bda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80bde:	d015      	beq.n	80c0c <pio_configure_pin_group+0x6c>
   80be0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80be4:	d012      	beq.n	80c0c <pio_configure_pin_group+0x6c>
		return 0;
   80be6:	2000      	movs	r0, #0
   80be8:	e00a      	b.n	80c00 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80bea:	460a      	mov	r2, r1
   80bec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bf0:	4b0f      	ldr	r3, [pc, #60]	; (80c30 <pio_configure_pin_group+0x90>)
   80bf2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80bf4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80bf8:	bf14      	ite	ne
   80bfa:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80bfc:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80bfe:	2001      	movs	r0, #1
}
   80c00:	b002      	add	sp, #8
   80c02:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80c04:	4b0b      	ldr	r3, [pc, #44]	; (80c34 <pio_configure_pin_group+0x94>)
   80c06:	4798      	blx	r3
	return 1;
   80c08:	2001      	movs	r0, #1
		break;
   80c0a:	e7f9      	b.n	80c00 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80c0c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80c10:	f004 0301 	and.w	r3, r4, #1
   80c14:	9300      	str	r3, [sp, #0]
   80c16:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80c1a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80c1e:	bf14      	ite	ne
   80c20:	2200      	movne	r2, #0
   80c22:	2201      	moveq	r2, #1
   80c24:	4631      	mov	r1, r6
   80c26:	4628      	mov	r0, r5
   80c28:	4c03      	ldr	r4, [pc, #12]	; (80c38 <pio_configure_pin_group+0x98>)
   80c2a:	47a0      	blx	r4
	return 1;
   80c2c:	2001      	movs	r0, #1
		break;
   80c2e:	e7e7      	b.n	80c00 <pio_configure_pin_group+0x60>
   80c30:	00080a31 	.word	0x00080a31
   80c34:	00080a6f 	.word	0x00080a6f
   80c38:	00080aa1 	.word	0x00080aa1

00080c3c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c40:	4604      	mov	r4, r0
   80c42:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80c44:	4b0e      	ldr	r3, [pc, #56]	; (80c80 <pio_handler_process+0x44>)
   80c46:	4798      	blx	r3
   80c48:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80c4a:	4620      	mov	r0, r4
   80c4c:	4b0d      	ldr	r3, [pc, #52]	; (80c84 <pio_handler_process+0x48>)
   80c4e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80c50:	4005      	ands	r5, r0
   80c52:	d013      	beq.n	80c7c <pio_handler_process+0x40>
   80c54:	4c0c      	ldr	r4, [pc, #48]	; (80c88 <pio_handler_process+0x4c>)
   80c56:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80c5a:	e003      	b.n	80c64 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80c5c:	42b4      	cmp	r4, r6
   80c5e:	d00d      	beq.n	80c7c <pio_handler_process+0x40>
   80c60:	3410      	adds	r4, #16
		while (status != 0) {
   80c62:	b15d      	cbz	r5, 80c7c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80c64:	6820      	ldr	r0, [r4, #0]
   80c66:	4540      	cmp	r0, r8
   80c68:	d1f8      	bne.n	80c5c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c6a:	6861      	ldr	r1, [r4, #4]
   80c6c:	4229      	tst	r1, r5
   80c6e:	d0f5      	beq.n	80c5c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c70:	68e3      	ldr	r3, [r4, #12]
   80c72:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80c74:	6863      	ldr	r3, [r4, #4]
   80c76:	ea25 0503 	bic.w	r5, r5, r3
   80c7a:	e7ef      	b.n	80c5c <pio_handler_process+0x20>
   80c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c80:	00080ac7 	.word	0x00080ac7
   80c84:	00080acb 	.word	0x00080acb
   80c88:	20070b9c 	.word	0x20070b9c

00080c8c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80c8c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80c8e:	210b      	movs	r1, #11
   80c90:	4801      	ldr	r0, [pc, #4]	; (80c98 <PIOA_Handler+0xc>)
   80c92:	4b02      	ldr	r3, [pc, #8]	; (80c9c <PIOA_Handler+0x10>)
   80c94:	4798      	blx	r3
   80c96:	bd08      	pop	{r3, pc}
   80c98:	400e0e00 	.word	0x400e0e00
   80c9c:	00080c3d 	.word	0x00080c3d

00080ca0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80ca0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80ca2:	210c      	movs	r1, #12
   80ca4:	4801      	ldr	r0, [pc, #4]	; (80cac <PIOB_Handler+0xc>)
   80ca6:	4b02      	ldr	r3, [pc, #8]	; (80cb0 <PIOB_Handler+0x10>)
   80ca8:	4798      	blx	r3
   80caa:	bd08      	pop	{r3, pc}
   80cac:	400e1000 	.word	0x400e1000
   80cb0:	00080c3d 	.word	0x00080c3d

00080cb4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80cb4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80cb6:	210d      	movs	r1, #13
   80cb8:	4801      	ldr	r0, [pc, #4]	; (80cc0 <PIOC_Handler+0xc>)
   80cba:	4b02      	ldr	r3, [pc, #8]	; (80cc4 <PIOC_Handler+0x10>)
   80cbc:	4798      	blx	r3
   80cbe:	bd08      	pop	{r3, pc}
   80cc0:	400e1200 	.word	0x400e1200
   80cc4:	00080c3d 	.word	0x00080c3d

00080cc8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80cc8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80cca:	210e      	movs	r1, #14
   80ccc:	4801      	ldr	r0, [pc, #4]	; (80cd4 <PIOD_Handler+0xc>)
   80cce:	4b02      	ldr	r3, [pc, #8]	; (80cd8 <PIOD_Handler+0x10>)
   80cd0:	4798      	blx	r3
   80cd2:	bd08      	pop	{r3, pc}
   80cd4:	400e1400 	.word	0x400e1400
   80cd8:	00080c3d 	.word	0x00080c3d

00080cdc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80cdc:	4a17      	ldr	r2, [pc, #92]	; (80d3c <pmc_switch_mck_to_pllack+0x60>)
   80cde:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80ce4:	4318      	orrs	r0, r3
   80ce6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ce8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80cea:	f013 0f08 	tst.w	r3, #8
   80cee:	d10a      	bne.n	80d06 <pmc_switch_mck_to_pllack+0x2a>
   80cf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cf4:	4911      	ldr	r1, [pc, #68]	; (80d3c <pmc_switch_mck_to_pllack+0x60>)
   80cf6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80cf8:	f012 0f08 	tst.w	r2, #8
   80cfc:	d103      	bne.n	80d06 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80cfe:	3b01      	subs	r3, #1
   80d00:	d1f9      	bne.n	80cf6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80d02:	2001      	movs	r0, #1
   80d04:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80d06:	4a0d      	ldr	r2, [pc, #52]	; (80d3c <pmc_switch_mck_to_pllack+0x60>)
   80d08:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d0a:	f023 0303 	bic.w	r3, r3, #3
   80d0e:	f043 0302 	orr.w	r3, r3, #2
   80d12:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d14:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d16:	f013 0f08 	tst.w	r3, #8
   80d1a:	d10a      	bne.n	80d32 <pmc_switch_mck_to_pllack+0x56>
   80d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d20:	4906      	ldr	r1, [pc, #24]	; (80d3c <pmc_switch_mck_to_pllack+0x60>)
   80d22:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d24:	f012 0f08 	tst.w	r2, #8
   80d28:	d105      	bne.n	80d36 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d2a:	3b01      	subs	r3, #1
   80d2c:	d1f9      	bne.n	80d22 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80d2e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80d30:	4770      	bx	lr
	return 0;
   80d32:	2000      	movs	r0, #0
   80d34:	4770      	bx	lr
   80d36:	2000      	movs	r0, #0
   80d38:	4770      	bx	lr
   80d3a:	bf00      	nop
   80d3c:	400e0600 	.word	0x400e0600

00080d40 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80d40:	b9c8      	cbnz	r0, 80d76 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d42:	4a11      	ldr	r2, [pc, #68]	; (80d88 <pmc_switch_mainck_to_xtal+0x48>)
   80d44:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80d46:	0209      	lsls	r1, r1, #8
   80d48:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d4a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80d4e:	f023 0303 	bic.w	r3, r3, #3
   80d52:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d56:	f043 0301 	orr.w	r3, r3, #1
   80d5a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d5c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d5e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d60:	f013 0f01 	tst.w	r3, #1
   80d64:	d0fb      	beq.n	80d5e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80d66:	4a08      	ldr	r2, [pc, #32]	; (80d88 <pmc_switch_mainck_to_xtal+0x48>)
   80d68:	6a13      	ldr	r3, [r2, #32]
   80d6a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80d72:	6213      	str	r3, [r2, #32]
   80d74:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d76:	4904      	ldr	r1, [pc, #16]	; (80d88 <pmc_switch_mainck_to_xtal+0x48>)
   80d78:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80d7a:	4a04      	ldr	r2, [pc, #16]	; (80d8c <pmc_switch_mainck_to_xtal+0x4c>)
   80d7c:	401a      	ands	r2, r3
   80d7e:	4b04      	ldr	r3, [pc, #16]	; (80d90 <pmc_switch_mainck_to_xtal+0x50>)
   80d80:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d82:	620b      	str	r3, [r1, #32]
   80d84:	4770      	bx	lr
   80d86:	bf00      	nop
   80d88:	400e0600 	.word	0x400e0600
   80d8c:	fec8fffc 	.word	0xfec8fffc
   80d90:	01370002 	.word	0x01370002

00080d94 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80d94:	4b02      	ldr	r3, [pc, #8]	; (80da0 <pmc_osc_is_ready_mainck+0xc>)
   80d96:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d98:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80d9c:	4770      	bx	lr
   80d9e:	bf00      	nop
   80da0:	400e0600 	.word	0x400e0600

00080da4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80da4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80da8:	4b01      	ldr	r3, [pc, #4]	; (80db0 <pmc_disable_pllack+0xc>)
   80daa:	629a      	str	r2, [r3, #40]	; 0x28
   80dac:	4770      	bx	lr
   80dae:	bf00      	nop
   80db0:	400e0600 	.word	0x400e0600

00080db4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80db4:	4b02      	ldr	r3, [pc, #8]	; (80dc0 <pmc_is_locked_pllack+0xc>)
   80db6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80db8:	f000 0002 	and.w	r0, r0, #2
   80dbc:	4770      	bx	lr
   80dbe:	bf00      	nop
   80dc0:	400e0600 	.word	0x400e0600

00080dc4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80dc4:	282c      	cmp	r0, #44	; 0x2c
   80dc6:	d81e      	bhi.n	80e06 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80dc8:	281f      	cmp	r0, #31
   80dca:	d80c      	bhi.n	80de6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80dcc:	4b11      	ldr	r3, [pc, #68]	; (80e14 <pmc_enable_periph_clk+0x50>)
   80dce:	699a      	ldr	r2, [r3, #24]
   80dd0:	2301      	movs	r3, #1
   80dd2:	4083      	lsls	r3, r0
   80dd4:	4393      	bics	r3, r2
   80dd6:	d018      	beq.n	80e0a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80dd8:	2301      	movs	r3, #1
   80dda:	fa03 f000 	lsl.w	r0, r3, r0
   80dde:	4b0d      	ldr	r3, [pc, #52]	; (80e14 <pmc_enable_periph_clk+0x50>)
   80de0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80de2:	2000      	movs	r0, #0
   80de4:	4770      	bx	lr
		ul_id -= 32;
   80de6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80de8:	4b0a      	ldr	r3, [pc, #40]	; (80e14 <pmc_enable_periph_clk+0x50>)
   80dea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80dee:	2301      	movs	r3, #1
   80df0:	4083      	lsls	r3, r0
   80df2:	4393      	bics	r3, r2
   80df4:	d00b      	beq.n	80e0e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80df6:	2301      	movs	r3, #1
   80df8:	fa03 f000 	lsl.w	r0, r3, r0
   80dfc:	4b05      	ldr	r3, [pc, #20]	; (80e14 <pmc_enable_periph_clk+0x50>)
   80dfe:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80e02:	2000      	movs	r0, #0
   80e04:	4770      	bx	lr
		return 1;
   80e06:	2001      	movs	r0, #1
   80e08:	4770      	bx	lr
	return 0;
   80e0a:	2000      	movs	r0, #0
   80e0c:	4770      	bx	lr
   80e0e:	2000      	movs	r0, #0
}
   80e10:	4770      	bx	lr
   80e12:	bf00      	nop
   80e14:	400e0600 	.word	0x400e0600

00080e18 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80e18:	e7fe      	b.n	80e18 <Dummy_Handler>
	...

00080e1c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80e1c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80e1e:	4b1c      	ldr	r3, [pc, #112]	; (80e90 <Reset_Handler+0x74>)
   80e20:	4a1c      	ldr	r2, [pc, #112]	; (80e94 <Reset_Handler+0x78>)
   80e22:	429a      	cmp	r2, r3
   80e24:	d010      	beq.n	80e48 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80e26:	4b1c      	ldr	r3, [pc, #112]	; (80e98 <Reset_Handler+0x7c>)
   80e28:	4a19      	ldr	r2, [pc, #100]	; (80e90 <Reset_Handler+0x74>)
   80e2a:	429a      	cmp	r2, r3
   80e2c:	d20c      	bcs.n	80e48 <Reset_Handler+0x2c>
   80e2e:	3b01      	subs	r3, #1
   80e30:	1a9b      	subs	r3, r3, r2
   80e32:	f023 0303 	bic.w	r3, r3, #3
   80e36:	3304      	adds	r3, #4
   80e38:	4413      	add	r3, r2
   80e3a:	4916      	ldr	r1, [pc, #88]	; (80e94 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80e3c:	f851 0b04 	ldr.w	r0, [r1], #4
   80e40:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80e44:	429a      	cmp	r2, r3
   80e46:	d1f9      	bne.n	80e3c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e48:	4b14      	ldr	r3, [pc, #80]	; (80e9c <Reset_Handler+0x80>)
   80e4a:	4a15      	ldr	r2, [pc, #84]	; (80ea0 <Reset_Handler+0x84>)
   80e4c:	429a      	cmp	r2, r3
   80e4e:	d20a      	bcs.n	80e66 <Reset_Handler+0x4a>
   80e50:	3b01      	subs	r3, #1
   80e52:	1a9b      	subs	r3, r3, r2
   80e54:	f023 0303 	bic.w	r3, r3, #3
   80e58:	3304      	adds	r3, #4
   80e5a:	4413      	add	r3, r2
		*pDest++ = 0;
   80e5c:	2100      	movs	r1, #0
   80e5e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80e62:	4293      	cmp	r3, r2
   80e64:	d1fb      	bne.n	80e5e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e66:	4b0f      	ldr	r3, [pc, #60]	; (80ea4 <Reset_Handler+0x88>)
   80e68:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80e6c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80e70:	490d      	ldr	r1, [pc, #52]	; (80ea8 <Reset_Handler+0x8c>)
   80e72:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e74:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80e7c:	d203      	bcs.n	80e86 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e7e:	688b      	ldr	r3, [r1, #8]
   80e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80e84:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e86:	4b09      	ldr	r3, [pc, #36]	; (80eac <Reset_Handler+0x90>)
   80e88:	4798      	blx	r3

	/* Branch to main function */
	main();
   80e8a:	4b09      	ldr	r3, [pc, #36]	; (80eb0 <Reset_Handler+0x94>)
   80e8c:	4798      	blx	r3
   80e8e:	e7fe      	b.n	80e8e <Reset_Handler+0x72>
   80e90:	20070000 	.word	0x20070000
   80e94:	00084168 	.word	0x00084168
   80e98:	20070ae0 	.word	0x20070ae0
   80e9c:	20073f70 	.word	0x20073f70
   80ea0:	20070ae0 	.word	0x20070ae0
   80ea4:	00080000 	.word	0x00080000
   80ea8:	e000ed00 	.word	0xe000ed00
   80eac:	000810f1 	.word	0x000810f1
   80eb0:	0008101d 	.word	0x0008101d

00080eb4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80eb4:	4b3d      	ldr	r3, [pc, #244]	; (80fac <SystemCoreClockUpdate+0xf8>)
   80eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80eb8:	f003 0303 	and.w	r3, r3, #3
   80ebc:	2b03      	cmp	r3, #3
   80ebe:	d80e      	bhi.n	80ede <SystemCoreClockUpdate+0x2a>
   80ec0:	e8df f003 	tbb	[pc, r3]
   80ec4:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80ec8:	4b39      	ldr	r3, [pc, #228]	; (80fb0 <SystemCoreClockUpdate+0xfc>)
   80eca:	695b      	ldr	r3, [r3, #20]
   80ecc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ed0:	bf14      	ite	ne
   80ed2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80ed6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80eda:	4b36      	ldr	r3, [pc, #216]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80edc:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80ede:	4b33      	ldr	r3, [pc, #204]	; (80fac <SystemCoreClockUpdate+0xf8>)
   80ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ee6:	2b70      	cmp	r3, #112	; 0x70
   80ee8:	d057      	beq.n	80f9a <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80eea:	4b30      	ldr	r3, [pc, #192]	; (80fac <SystemCoreClockUpdate+0xf8>)
   80eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80eee:	4931      	ldr	r1, [pc, #196]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80ef0:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80ef4:	680b      	ldr	r3, [r1, #0]
   80ef6:	40d3      	lsrs	r3, r2
   80ef8:	600b      	str	r3, [r1, #0]
   80efa:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80efc:	4b2b      	ldr	r3, [pc, #172]	; (80fac <SystemCoreClockUpdate+0xf8>)
   80efe:	6a1b      	ldr	r3, [r3, #32]
   80f00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f04:	d003      	beq.n	80f0e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f06:	4a2c      	ldr	r2, [pc, #176]	; (80fb8 <SystemCoreClockUpdate+0x104>)
   80f08:	4b2a      	ldr	r3, [pc, #168]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f0a:	601a      	str	r2, [r3, #0]
   80f0c:	e7e7      	b.n	80ede <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f0e:	4a2b      	ldr	r2, [pc, #172]	; (80fbc <SystemCoreClockUpdate+0x108>)
   80f10:	4b28      	ldr	r3, [pc, #160]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f12:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f14:	4b25      	ldr	r3, [pc, #148]	; (80fac <SystemCoreClockUpdate+0xf8>)
   80f16:	6a1b      	ldr	r3, [r3, #32]
   80f18:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f1c:	2b10      	cmp	r3, #16
   80f1e:	d005      	beq.n	80f2c <SystemCoreClockUpdate+0x78>
   80f20:	2b20      	cmp	r3, #32
   80f22:	d1dc      	bne.n	80ede <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80f24:	4a24      	ldr	r2, [pc, #144]	; (80fb8 <SystemCoreClockUpdate+0x104>)
   80f26:	4b23      	ldr	r3, [pc, #140]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f28:	601a      	str	r2, [r3, #0]
				break;
   80f2a:	e7d8      	b.n	80ede <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80f2c:	4a24      	ldr	r2, [pc, #144]	; (80fc0 <SystemCoreClockUpdate+0x10c>)
   80f2e:	4b21      	ldr	r3, [pc, #132]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f30:	601a      	str	r2, [r3, #0]
				break;
   80f32:	e7d4      	b.n	80ede <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f34:	4b1d      	ldr	r3, [pc, #116]	; (80fac <SystemCoreClockUpdate+0xf8>)
   80f36:	6a1b      	ldr	r3, [r3, #32]
   80f38:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f3c:	d00c      	beq.n	80f58 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f3e:	4a1e      	ldr	r2, [pc, #120]	; (80fb8 <SystemCoreClockUpdate+0x104>)
   80f40:	4b1c      	ldr	r3, [pc, #112]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f42:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f44:	4b19      	ldr	r3, [pc, #100]	; (80fac <SystemCoreClockUpdate+0xf8>)
   80f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f48:	f003 0303 	and.w	r3, r3, #3
   80f4c:	2b02      	cmp	r3, #2
   80f4e:	d016      	beq.n	80f7e <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f50:	4a1c      	ldr	r2, [pc, #112]	; (80fc4 <SystemCoreClockUpdate+0x110>)
   80f52:	4b18      	ldr	r3, [pc, #96]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f54:	601a      	str	r2, [r3, #0]
   80f56:	e7c2      	b.n	80ede <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f58:	4a18      	ldr	r2, [pc, #96]	; (80fbc <SystemCoreClockUpdate+0x108>)
   80f5a:	4b16      	ldr	r3, [pc, #88]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f5c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f5e:	4b13      	ldr	r3, [pc, #76]	; (80fac <SystemCoreClockUpdate+0xf8>)
   80f60:	6a1b      	ldr	r3, [r3, #32]
   80f62:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f66:	2b10      	cmp	r3, #16
   80f68:	d005      	beq.n	80f76 <SystemCoreClockUpdate+0xc2>
   80f6a:	2b20      	cmp	r3, #32
   80f6c:	d1ea      	bne.n	80f44 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80f6e:	4a12      	ldr	r2, [pc, #72]	; (80fb8 <SystemCoreClockUpdate+0x104>)
   80f70:	4b10      	ldr	r3, [pc, #64]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f72:	601a      	str	r2, [r3, #0]
				break;
   80f74:	e7e6      	b.n	80f44 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80f76:	4a12      	ldr	r2, [pc, #72]	; (80fc0 <SystemCoreClockUpdate+0x10c>)
   80f78:	4b0e      	ldr	r3, [pc, #56]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f7a:	601a      	str	r2, [r3, #0]
				break;
   80f7c:	e7e2      	b.n	80f44 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f7e:	4a0b      	ldr	r2, [pc, #44]	; (80fac <SystemCoreClockUpdate+0xf8>)
   80f80:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f82:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80f84:	480b      	ldr	r0, [pc, #44]	; (80fb4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f86:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80f8a:	6803      	ldr	r3, [r0, #0]
   80f8c:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f90:	b2d2      	uxtb	r2, r2
   80f92:	fbb3 f3f2 	udiv	r3, r3, r2
   80f96:	6003      	str	r3, [r0, #0]
   80f98:	e7a1      	b.n	80ede <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80f9a:	4a06      	ldr	r2, [pc, #24]	; (80fb4 <SystemCoreClockUpdate+0x100>)
   80f9c:	6813      	ldr	r3, [r2, #0]
   80f9e:	490a      	ldr	r1, [pc, #40]	; (80fc8 <SystemCoreClockUpdate+0x114>)
   80fa0:	fba1 1303 	umull	r1, r3, r1, r3
   80fa4:	085b      	lsrs	r3, r3, #1
   80fa6:	6013      	str	r3, [r2, #0]
   80fa8:	4770      	bx	lr
   80faa:	bf00      	nop
   80fac:	400e0600 	.word	0x400e0600
   80fb0:	400e1a10 	.word	0x400e1a10
   80fb4:	20070130 	.word	0x20070130
   80fb8:	00b71b00 	.word	0x00b71b00
   80fbc:	003d0900 	.word	0x003d0900
   80fc0:	007a1200 	.word	0x007a1200
   80fc4:	0e4e1c00 	.word	0x0e4e1c00
   80fc8:	aaaaaaab 	.word	0xaaaaaaab

00080fcc <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80fcc:	4b0a      	ldr	r3, [pc, #40]	; (80ff8 <_sbrk+0x2c>)
   80fce:	681b      	ldr	r3, [r3, #0]
   80fd0:	b153      	cbz	r3, 80fe8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80fd2:	4b09      	ldr	r3, [pc, #36]	; (80ff8 <_sbrk+0x2c>)
   80fd4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80fd6:	181a      	adds	r2, r3, r0
   80fd8:	4908      	ldr	r1, [pc, #32]	; (80ffc <_sbrk+0x30>)
   80fda:	4291      	cmp	r1, r2
   80fdc:	db08      	blt.n	80ff0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80fde:	4610      	mov	r0, r2
   80fe0:	4a05      	ldr	r2, [pc, #20]	; (80ff8 <_sbrk+0x2c>)
   80fe2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80fe4:	4618      	mov	r0, r3
   80fe6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80fe8:	4a05      	ldr	r2, [pc, #20]	; (81000 <_sbrk+0x34>)
   80fea:	4b03      	ldr	r3, [pc, #12]	; (80ff8 <_sbrk+0x2c>)
   80fec:	601a      	str	r2, [r3, #0]
   80fee:	e7f0      	b.n	80fd2 <_sbrk+0x6>
		return (caddr_t) -1;	
   80ff0:	f04f 30ff 	mov.w	r0, #4294967295
}
   80ff4:	4770      	bx	lr
   80ff6:	bf00      	nop
   80ff8:	20070c0c 	.word	0x20070c0c
   80ffc:	20087ffc 	.word	0x20087ffc
   81000:	20075f70 	.word	0x20075f70

00081004 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81004:	f04f 30ff 	mov.w	r0, #4294967295
   81008:	4770      	bx	lr

0008100a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8100a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8100e:	604b      	str	r3, [r1, #4]

	return 0;
}
   81010:	2000      	movs	r0, #0
   81012:	4770      	bx	lr

00081014 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81014:	2001      	movs	r0, #1
   81016:	4770      	bx	lr

00081018 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81018:	2000      	movs	r0, #0
   8101a:	4770      	bx	lr

0008101c <main>:
#include "adc_functions.h"
#include "dacc_functions.h"
#include "tc_functions.h"

int main (void)
{
   8101c:	b508      	push	{r3, lr}
	/* Board initialization here */
	sysclk_init();
   8101e:	4b22      	ldr	r3, [pc, #136]	; (810a8 <main+0x8c>)
   81020:	4798      	blx	r3
	board_init();
   81022:	4b22      	ldr	r3, [pc, #136]	; (810ac <main+0x90>)
   81024:	4798      	blx	r3
   81026:	200b      	movs	r0, #11
   81028:	4c21      	ldr	r4, [pc, #132]	; (810b0 <main+0x94>)
   8102a:	47a0      	blx	r4
   8102c:	200c      	movs	r0, #12
   8102e:	47a0      	blx	r4
   81030:	200d      	movs	r0, #13
   81032:	47a0      	blx	r4
   81034:	200e      	movs	r0, #14
   81036:	47a0      	blx	r4
	ioport_init();
	configure_console();
   81038:	4b1e      	ldr	r3, [pc, #120]	; (810b4 <main+0x98>)
   8103a:	4798      	blx	r3
	
	configure_adc();
   8103c:	4b1e      	ldr	r3, [pc, #120]	; (810b8 <main+0x9c>)
   8103e:	4798      	blx	r3
	configure_dacc();
   81040:	4b1e      	ldr	r3, [pc, #120]	; (810bc <main+0xa0>)
   81042:	4798      	blx	r3
	configure_tc();
   81044:	4b1e      	ldr	r3, [pc, #120]	; (810c0 <main+0xa4>)
   81046:	4798      	blx	r3

	/* Application code here */
	tc_start(TC0, 0);
   81048:	2100      	movs	r1, #0
   8104a:	481e      	ldr	r0, [pc, #120]	; (810c4 <main+0xa8>)
   8104c:	4b1e      	ldr	r3, [pc, #120]	; (810c8 <main+0xac>)
   8104e:	4798      	blx	r3

	while (adc_finished != 1) {
   81050:	4b1e      	ldr	r3, [pc, #120]	; (810cc <main+0xb0>)
   81052:	f9b3 3000 	ldrsh.w	r3, [r3]
   81056:	2b01      	cmp	r3, #1
   81058:	d008      	beq.n	8106c <main+0x50>
		printf(".");
   8105a:	4e1d      	ldr	r6, [pc, #116]	; (810d0 <main+0xb4>)
   8105c:	4d1d      	ldr	r5, [pc, #116]	; (810d4 <main+0xb8>)
	while (adc_finished != 1) {
   8105e:	4c1b      	ldr	r4, [pc, #108]	; (810cc <main+0xb0>)
		printf(".");
   81060:	4630      	mov	r0, r6
   81062:	47a8      	blx	r5
	while (adc_finished != 1) {
   81064:	f9b4 3000 	ldrsh.w	r3, [r4]
   81068:	2b01      	cmp	r3, #1
   8106a:	d1f9      	bne.n	81060 <main+0x44>
	}

	printf("\nFinished adc conversion...\n");
   8106c:	481a      	ldr	r0, [pc, #104]	; (810d8 <main+0xbc>)
   8106e:	4c19      	ldr	r4, [pc, #100]	; (810d4 <main+0xb8>)
   81070:	47a0      	blx	r4
	printf("%d\n", dacc_values[0]);
   81072:	4b1a      	ldr	r3, [pc, #104]	; (810dc <main+0xc0>)
   81074:	f9b3 1000 	ldrsh.w	r1, [r3]
   81078:	4819      	ldr	r0, [pc, #100]	; (810e0 <main+0xc4>)
   8107a:	47a0      	blx	r4

	tc_start(TC1, 1);
   8107c:	2101      	movs	r1, #1
   8107e:	4819      	ldr	r0, [pc, #100]	; (810e4 <main+0xc8>)
   81080:	4b11      	ldr	r3, [pc, #68]	; (810c8 <main+0xac>)
   81082:	4798      	blx	r3
	while (dacc_finished != 1) {
   81084:	4b18      	ldr	r3, [pc, #96]	; (810e8 <main+0xcc>)
   81086:	f9b3 3000 	ldrsh.w	r3, [r3]
   8108a:	2b01      	cmp	r3, #1
   8108c:	d008      	beq.n	810a0 <main+0x84>
		printf(".");
   8108e:	4e10      	ldr	r6, [pc, #64]	; (810d0 <main+0xb4>)
   81090:	4625      	mov	r5, r4
	while (dacc_finished != 1) {
   81092:	4c15      	ldr	r4, [pc, #84]	; (810e8 <main+0xcc>)
		printf(".");
   81094:	4630      	mov	r0, r6
   81096:	47a8      	blx	r5
	while (dacc_finished != 1) {
   81098:	f9b4 3000 	ldrsh.w	r3, [r4]
   8109c:	2b01      	cmp	r3, #1
   8109e:	d1f9      	bne.n	81094 <main+0x78>
	}
	printf("\nFinished dac conversion...\n");
   810a0:	4812      	ldr	r0, [pc, #72]	; (810ec <main+0xd0>)
   810a2:	4b0c      	ldr	r3, [pc, #48]	; (810d4 <main+0xb8>)
   810a4:	4798      	blx	r3
   810a6:	e7fe      	b.n	810a6 <main+0x8a>
   810a8:	0008095d 	.word	0x0008095d
   810ac:	000809c1 	.word	0x000809c1
   810b0:	00080dc5 	.word	0x00080dc5
   810b4:	00080581 	.word	0x00080581
   810b8:	000801a9 	.word	0x000801a9
   810bc:	00080615 	.word	0x00080615
   810c0:	00080669 	.word	0x00080669
   810c4:	40080000 	.word	0x40080000
   810c8:	00080383 	.word	0x00080383
   810cc:	20070c44 	.word	0x20070c44
   810d0:	00083f90 	.word	0x00083f90
   810d4:	00081141 	.word	0x00081141
   810d8:	00083f94 	.word	0x00083f94
   810dc:	20070c48 	.word	0x20070c48
   810e0:	00083fb4 	.word	0x00083fb4
   810e4:	40084000 	.word	0x40084000
   810e8:	20073f3c 	.word	0x20073f3c
   810ec:	00083fb8 	.word	0x00083fb8

000810f0 <__libc_init_array>:
   810f0:	b570      	push	{r4, r5, r6, lr}
   810f2:	4e0f      	ldr	r6, [pc, #60]	; (81130 <__libc_init_array+0x40>)
   810f4:	4d0f      	ldr	r5, [pc, #60]	; (81134 <__libc_init_array+0x44>)
   810f6:	1b76      	subs	r6, r6, r5
   810f8:	10b6      	asrs	r6, r6, #2
   810fa:	bf18      	it	ne
   810fc:	2400      	movne	r4, #0
   810fe:	d005      	beq.n	8110c <__libc_init_array+0x1c>
   81100:	3401      	adds	r4, #1
   81102:	f855 3b04 	ldr.w	r3, [r5], #4
   81106:	4798      	blx	r3
   81108:	42a6      	cmp	r6, r4
   8110a:	d1f9      	bne.n	81100 <__libc_init_array+0x10>
   8110c:	4e0a      	ldr	r6, [pc, #40]	; (81138 <__libc_init_array+0x48>)
   8110e:	4d0b      	ldr	r5, [pc, #44]	; (8113c <__libc_init_array+0x4c>)
   81110:	f003 f814 	bl	8413c <_init>
   81114:	1b76      	subs	r6, r6, r5
   81116:	10b6      	asrs	r6, r6, #2
   81118:	bf18      	it	ne
   8111a:	2400      	movne	r4, #0
   8111c:	d006      	beq.n	8112c <__libc_init_array+0x3c>
   8111e:	3401      	adds	r4, #1
   81120:	f855 3b04 	ldr.w	r3, [r5], #4
   81124:	4798      	blx	r3
   81126:	42a6      	cmp	r6, r4
   81128:	d1f9      	bne.n	8111e <__libc_init_array+0x2e>
   8112a:	bd70      	pop	{r4, r5, r6, pc}
   8112c:	bd70      	pop	{r4, r5, r6, pc}
   8112e:	bf00      	nop
   81130:	00084148 	.word	0x00084148
   81134:	00084148 	.word	0x00084148
   81138:	00084150 	.word	0x00084150
   8113c:	00084148 	.word	0x00084148

00081140 <iprintf>:
   81140:	b40f      	push	{r0, r1, r2, r3}
   81142:	b510      	push	{r4, lr}
   81144:	4b07      	ldr	r3, [pc, #28]	; (81164 <iprintf+0x24>)
   81146:	b082      	sub	sp, #8
   81148:	ac04      	add	r4, sp, #16
   8114a:	f854 2b04 	ldr.w	r2, [r4], #4
   8114e:	6818      	ldr	r0, [r3, #0]
   81150:	4623      	mov	r3, r4
   81152:	6881      	ldr	r1, [r0, #8]
   81154:	9401      	str	r4, [sp, #4]
   81156:	f000 f993 	bl	81480 <_vfiprintf_r>
   8115a:	b002      	add	sp, #8
   8115c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81160:	b004      	add	sp, #16
   81162:	4770      	bx	lr
   81164:	20070134 	.word	0x20070134

00081168 <memset>:
   81168:	b470      	push	{r4, r5, r6}
   8116a:	0786      	lsls	r6, r0, #30
   8116c:	d046      	beq.n	811fc <memset+0x94>
   8116e:	1e54      	subs	r4, r2, #1
   81170:	2a00      	cmp	r2, #0
   81172:	d041      	beq.n	811f8 <memset+0x90>
   81174:	b2ca      	uxtb	r2, r1
   81176:	4603      	mov	r3, r0
   81178:	e002      	b.n	81180 <memset+0x18>
   8117a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8117e:	d33b      	bcc.n	811f8 <memset+0x90>
   81180:	f803 2b01 	strb.w	r2, [r3], #1
   81184:	079d      	lsls	r5, r3, #30
   81186:	d1f8      	bne.n	8117a <memset+0x12>
   81188:	2c03      	cmp	r4, #3
   8118a:	d92e      	bls.n	811ea <memset+0x82>
   8118c:	b2cd      	uxtb	r5, r1
   8118e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81192:	2c0f      	cmp	r4, #15
   81194:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81198:	d919      	bls.n	811ce <memset+0x66>
   8119a:	4626      	mov	r6, r4
   8119c:	f103 0210 	add.w	r2, r3, #16
   811a0:	3e10      	subs	r6, #16
   811a2:	2e0f      	cmp	r6, #15
   811a4:	f842 5c10 	str.w	r5, [r2, #-16]
   811a8:	f842 5c0c 	str.w	r5, [r2, #-12]
   811ac:	f842 5c08 	str.w	r5, [r2, #-8]
   811b0:	f842 5c04 	str.w	r5, [r2, #-4]
   811b4:	f102 0210 	add.w	r2, r2, #16
   811b8:	d8f2      	bhi.n	811a0 <memset+0x38>
   811ba:	f1a4 0210 	sub.w	r2, r4, #16
   811be:	f022 020f 	bic.w	r2, r2, #15
   811c2:	f004 040f 	and.w	r4, r4, #15
   811c6:	3210      	adds	r2, #16
   811c8:	2c03      	cmp	r4, #3
   811ca:	4413      	add	r3, r2
   811cc:	d90d      	bls.n	811ea <memset+0x82>
   811ce:	461e      	mov	r6, r3
   811d0:	4622      	mov	r2, r4
   811d2:	3a04      	subs	r2, #4
   811d4:	2a03      	cmp	r2, #3
   811d6:	f846 5b04 	str.w	r5, [r6], #4
   811da:	d8fa      	bhi.n	811d2 <memset+0x6a>
   811dc:	1f22      	subs	r2, r4, #4
   811de:	f022 0203 	bic.w	r2, r2, #3
   811e2:	3204      	adds	r2, #4
   811e4:	4413      	add	r3, r2
   811e6:	f004 0403 	and.w	r4, r4, #3
   811ea:	b12c      	cbz	r4, 811f8 <memset+0x90>
   811ec:	b2c9      	uxtb	r1, r1
   811ee:	441c      	add	r4, r3
   811f0:	f803 1b01 	strb.w	r1, [r3], #1
   811f4:	429c      	cmp	r4, r3
   811f6:	d1fb      	bne.n	811f0 <memset+0x88>
   811f8:	bc70      	pop	{r4, r5, r6}
   811fa:	4770      	bx	lr
   811fc:	4614      	mov	r4, r2
   811fe:	4603      	mov	r3, r0
   81200:	e7c2      	b.n	81188 <memset+0x20>
   81202:	bf00      	nop

00081204 <setbuf>:
   81204:	2900      	cmp	r1, #0
   81206:	bf0c      	ite	eq
   81208:	2202      	moveq	r2, #2
   8120a:	2200      	movne	r2, #0
   8120c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81210:	f000 b800 	b.w	81214 <setvbuf>

00081214 <setvbuf>:
   81214:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81218:	4d61      	ldr	r5, [pc, #388]	; (813a0 <setvbuf+0x18c>)
   8121a:	b083      	sub	sp, #12
   8121c:	682d      	ldr	r5, [r5, #0]
   8121e:	4604      	mov	r4, r0
   81220:	460f      	mov	r7, r1
   81222:	4690      	mov	r8, r2
   81224:	461e      	mov	r6, r3
   81226:	b115      	cbz	r5, 8122e <setvbuf+0x1a>
   81228:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8122a:	2b00      	cmp	r3, #0
   8122c:	d064      	beq.n	812f8 <setvbuf+0xe4>
   8122e:	f1b8 0f02 	cmp.w	r8, #2
   81232:	d006      	beq.n	81242 <setvbuf+0x2e>
   81234:	f1b8 0f01 	cmp.w	r8, #1
   81238:	f200 809f 	bhi.w	8137a <setvbuf+0x166>
   8123c:	2e00      	cmp	r6, #0
   8123e:	f2c0 809c 	blt.w	8137a <setvbuf+0x166>
   81242:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81244:	07d8      	lsls	r0, r3, #31
   81246:	d534      	bpl.n	812b2 <setvbuf+0x9e>
   81248:	4621      	mov	r1, r4
   8124a:	4628      	mov	r0, r5
   8124c:	f001 f8b0 	bl	823b0 <_fflush_r>
   81250:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81252:	b141      	cbz	r1, 81266 <setvbuf+0x52>
   81254:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81258:	4299      	cmp	r1, r3
   8125a:	d002      	beq.n	81262 <setvbuf+0x4e>
   8125c:	4628      	mov	r0, r5
   8125e:	f001 fa25 	bl	826ac <_free_r>
   81262:	2300      	movs	r3, #0
   81264:	6323      	str	r3, [r4, #48]	; 0x30
   81266:	2200      	movs	r2, #0
   81268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8126c:	61a2      	str	r2, [r4, #24]
   8126e:	6062      	str	r2, [r4, #4]
   81270:	061a      	lsls	r2, r3, #24
   81272:	d43a      	bmi.n	812ea <setvbuf+0xd6>
   81274:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81278:	f023 0303 	bic.w	r3, r3, #3
   8127c:	f1b8 0f02 	cmp.w	r8, #2
   81280:	81a3      	strh	r3, [r4, #12]
   81282:	d01d      	beq.n	812c0 <setvbuf+0xac>
   81284:	ab01      	add	r3, sp, #4
   81286:	466a      	mov	r2, sp
   81288:	4621      	mov	r1, r4
   8128a:	4628      	mov	r0, r5
   8128c:	f001 fcac 	bl	82be8 <__swhatbuf_r>
   81290:	89a3      	ldrh	r3, [r4, #12]
   81292:	4318      	orrs	r0, r3
   81294:	81a0      	strh	r0, [r4, #12]
   81296:	2e00      	cmp	r6, #0
   81298:	d132      	bne.n	81300 <setvbuf+0xec>
   8129a:	9e00      	ldr	r6, [sp, #0]
   8129c:	4630      	mov	r0, r6
   8129e:	f001 fd1b 	bl	82cd8 <malloc>
   812a2:	4607      	mov	r7, r0
   812a4:	2800      	cmp	r0, #0
   812a6:	d06b      	beq.n	81380 <setvbuf+0x16c>
   812a8:	89a3      	ldrh	r3, [r4, #12]
   812aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   812ae:	81a3      	strh	r3, [r4, #12]
   812b0:	e028      	b.n	81304 <setvbuf+0xf0>
   812b2:	89a3      	ldrh	r3, [r4, #12]
   812b4:	0599      	lsls	r1, r3, #22
   812b6:	d4c7      	bmi.n	81248 <setvbuf+0x34>
   812b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   812ba:	f001 fc91 	bl	82be0 <__retarget_lock_acquire_recursive>
   812be:	e7c3      	b.n	81248 <setvbuf+0x34>
   812c0:	2500      	movs	r5, #0
   812c2:	2600      	movs	r6, #0
   812c4:	2001      	movs	r0, #1
   812c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   812c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   812cc:	f043 0302 	orr.w	r3, r3, #2
   812d0:	60a6      	str	r6, [r4, #8]
   812d2:	07ce      	lsls	r6, r1, #31
   812d4:	81a3      	strh	r3, [r4, #12]
   812d6:	6160      	str	r0, [r4, #20]
   812d8:	6022      	str	r2, [r4, #0]
   812da:	6122      	str	r2, [r4, #16]
   812dc:	d401      	bmi.n	812e2 <setvbuf+0xce>
   812de:	0598      	lsls	r0, r3, #22
   812e0:	d53e      	bpl.n	81360 <setvbuf+0x14c>
   812e2:	4628      	mov	r0, r5
   812e4:	b003      	add	sp, #12
   812e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   812ea:	6921      	ldr	r1, [r4, #16]
   812ec:	4628      	mov	r0, r5
   812ee:	f001 f9dd 	bl	826ac <_free_r>
   812f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   812f6:	e7bd      	b.n	81274 <setvbuf+0x60>
   812f8:	4628      	mov	r0, r5
   812fa:	f001 f8b1 	bl	82460 <__sinit>
   812fe:	e796      	b.n	8122e <setvbuf+0x1a>
   81300:	2f00      	cmp	r7, #0
   81302:	d0cb      	beq.n	8129c <setvbuf+0x88>
   81304:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81306:	2b00      	cmp	r3, #0
   81308:	d033      	beq.n	81372 <setvbuf+0x15e>
   8130a:	9b00      	ldr	r3, [sp, #0]
   8130c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81310:	429e      	cmp	r6, r3
   81312:	bf1c      	itt	ne
   81314:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81318:	81a2      	strhne	r2, [r4, #12]
   8131a:	f1b8 0f01 	cmp.w	r8, #1
   8131e:	bf04      	itt	eq
   81320:	f042 0201 	orreq.w	r2, r2, #1
   81324:	81a2      	strheq	r2, [r4, #12]
   81326:	b292      	uxth	r2, r2
   81328:	f012 0308 	ands.w	r3, r2, #8
   8132c:	6027      	str	r7, [r4, #0]
   8132e:	6127      	str	r7, [r4, #16]
   81330:	6166      	str	r6, [r4, #20]
   81332:	d00e      	beq.n	81352 <setvbuf+0x13e>
   81334:	07d1      	lsls	r1, r2, #31
   81336:	d51a      	bpl.n	8136e <setvbuf+0x15a>
   81338:	2300      	movs	r3, #0
   8133a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8133c:	4276      	negs	r6, r6
   8133e:	f015 0501 	ands.w	r5, r5, #1
   81342:	61a6      	str	r6, [r4, #24]
   81344:	60a3      	str	r3, [r4, #8]
   81346:	d009      	beq.n	8135c <setvbuf+0x148>
   81348:	2500      	movs	r5, #0
   8134a:	4628      	mov	r0, r5
   8134c:	b003      	add	sp, #12
   8134e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81352:	60a3      	str	r3, [r4, #8]
   81354:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81356:	f015 0501 	ands.w	r5, r5, #1
   8135a:	d1f5      	bne.n	81348 <setvbuf+0x134>
   8135c:	0593      	lsls	r3, r2, #22
   8135e:	d4c0      	bmi.n	812e2 <setvbuf+0xce>
   81360:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81362:	f001 fc3f 	bl	82be4 <__retarget_lock_release_recursive>
   81366:	4628      	mov	r0, r5
   81368:	b003      	add	sp, #12
   8136a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8136e:	60a6      	str	r6, [r4, #8]
   81370:	e7f0      	b.n	81354 <setvbuf+0x140>
   81372:	4628      	mov	r0, r5
   81374:	f001 f874 	bl	82460 <__sinit>
   81378:	e7c7      	b.n	8130a <setvbuf+0xf6>
   8137a:	f04f 35ff 	mov.w	r5, #4294967295
   8137e:	e7b0      	b.n	812e2 <setvbuf+0xce>
   81380:	f8dd 9000 	ldr.w	r9, [sp]
   81384:	45b1      	cmp	r9, r6
   81386:	d004      	beq.n	81392 <setvbuf+0x17e>
   81388:	4648      	mov	r0, r9
   8138a:	f001 fca5 	bl	82cd8 <malloc>
   8138e:	4607      	mov	r7, r0
   81390:	b920      	cbnz	r0, 8139c <setvbuf+0x188>
   81392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81396:	f04f 35ff 	mov.w	r5, #4294967295
   8139a:	e792      	b.n	812c2 <setvbuf+0xae>
   8139c:	464e      	mov	r6, r9
   8139e:	e783      	b.n	812a8 <setvbuf+0x94>
   813a0:	20070134 	.word	0x20070134

000813a4 <strlen>:
   813a4:	f020 0103 	bic.w	r1, r0, #3
   813a8:	f010 0003 	ands.w	r0, r0, #3
   813ac:	f1c0 0000 	rsb	r0, r0, #0
   813b0:	f851 3b04 	ldr.w	r3, [r1], #4
   813b4:	f100 0c04 	add.w	ip, r0, #4
   813b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   813bc:	f06f 0200 	mvn.w	r2, #0
   813c0:	bf1c      	itt	ne
   813c2:	fa22 f20c 	lsrne.w	r2, r2, ip
   813c6:	4313      	orrne	r3, r2
   813c8:	f04f 0c01 	mov.w	ip, #1
   813cc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   813d0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   813d4:	eba3 020c 	sub.w	r2, r3, ip
   813d8:	ea22 0203 	bic.w	r2, r2, r3
   813dc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   813e0:	bf04      	itt	eq
   813e2:	f851 3b04 	ldreq.w	r3, [r1], #4
   813e6:	3004      	addeq	r0, #4
   813e8:	d0f4      	beq.n	813d4 <strlen+0x30>
   813ea:	f1c2 0100 	rsb	r1, r2, #0
   813ee:	ea02 0201 	and.w	r2, r2, r1
   813f2:	fab2 f282 	clz	r2, r2
   813f6:	f1c2 021f 	rsb	r2, r2, #31
   813fa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   813fe:	4770      	bx	lr

00081400 <__sprint_r.part.0>:
   81400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81404:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81406:	4693      	mov	fp, r2
   81408:	049c      	lsls	r4, r3, #18
   8140a:	d52f      	bpl.n	8146c <__sprint_r.part.0+0x6c>
   8140c:	6893      	ldr	r3, [r2, #8]
   8140e:	6812      	ldr	r2, [r2, #0]
   81410:	b353      	cbz	r3, 81468 <__sprint_r.part.0+0x68>
   81412:	460e      	mov	r6, r1
   81414:	4607      	mov	r7, r0
   81416:	f102 0908 	add.w	r9, r2, #8
   8141a:	e919 0420 	ldmdb	r9, {r5, sl}
   8141e:	ea5f 089a 	movs.w	r8, sl, lsr #2
   81422:	d017      	beq.n	81454 <__sprint_r.part.0+0x54>
   81424:	2400      	movs	r4, #0
   81426:	3d04      	subs	r5, #4
   81428:	e001      	b.n	8142e <__sprint_r.part.0+0x2e>
   8142a:	45a0      	cmp	r8, r4
   8142c:	d010      	beq.n	81450 <__sprint_r.part.0+0x50>
   8142e:	4632      	mov	r2, r6
   81430:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81434:	4638      	mov	r0, r7
   81436:	f001 f8b5 	bl	825a4 <_fputwc_r>
   8143a:	1c43      	adds	r3, r0, #1
   8143c:	f104 0401 	add.w	r4, r4, #1
   81440:	d1f3      	bne.n	8142a <__sprint_r.part.0+0x2a>
   81442:	2300      	movs	r3, #0
   81444:	f8cb 3008 	str.w	r3, [fp, #8]
   81448:	f8cb 3004 	str.w	r3, [fp, #4]
   8144c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81450:	f8db 3008 	ldr.w	r3, [fp, #8]
   81454:	f02a 0a03 	bic.w	sl, sl, #3
   81458:	eba3 030a 	sub.w	r3, r3, sl
   8145c:	f8cb 3008 	str.w	r3, [fp, #8]
   81460:	f109 0908 	add.w	r9, r9, #8
   81464:	2b00      	cmp	r3, #0
   81466:	d1d8      	bne.n	8141a <__sprint_r.part.0+0x1a>
   81468:	2000      	movs	r0, #0
   8146a:	e7ea      	b.n	81442 <__sprint_r.part.0+0x42>
   8146c:	f001 fa04 	bl	82878 <__sfvwrite_r>
   81470:	2300      	movs	r3, #0
   81472:	f8cb 3008 	str.w	r3, [fp, #8]
   81476:	f8cb 3004 	str.w	r3, [fp, #4]
   8147a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8147e:	bf00      	nop

00081480 <_vfiprintf_r>:
   81480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81484:	b0ad      	sub	sp, #180	; 0xb4
   81486:	461d      	mov	r5, r3
   81488:	468b      	mov	fp, r1
   8148a:	4690      	mov	r8, r2
   8148c:	9307      	str	r3, [sp, #28]
   8148e:	9006      	str	r0, [sp, #24]
   81490:	b118      	cbz	r0, 8149a <_vfiprintf_r+0x1a>
   81492:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81494:	2b00      	cmp	r3, #0
   81496:	f000 80f3 	beq.w	81680 <_vfiprintf_r+0x200>
   8149a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8149e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   814a2:	07df      	lsls	r7, r3, #31
   814a4:	b281      	uxth	r1, r0
   814a6:	d402      	bmi.n	814ae <_vfiprintf_r+0x2e>
   814a8:	058e      	lsls	r6, r1, #22
   814aa:	f140 80fc 	bpl.w	816a6 <_vfiprintf_r+0x226>
   814ae:	048c      	lsls	r4, r1, #18
   814b0:	d40a      	bmi.n	814c8 <_vfiprintf_r+0x48>
   814b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   814b6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   814ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   814be:	f8ab 100c 	strh.w	r1, [fp, #12]
   814c2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   814c6:	b289      	uxth	r1, r1
   814c8:	0708      	lsls	r0, r1, #28
   814ca:	f140 80b3 	bpl.w	81634 <_vfiprintf_r+0x1b4>
   814ce:	f8db 3010 	ldr.w	r3, [fp, #16]
   814d2:	2b00      	cmp	r3, #0
   814d4:	f000 80ae 	beq.w	81634 <_vfiprintf_r+0x1b4>
   814d8:	f001 031a 	and.w	r3, r1, #26
   814dc:	2b0a      	cmp	r3, #10
   814de:	f000 80b5 	beq.w	8164c <_vfiprintf_r+0x1cc>
   814e2:	2300      	movs	r3, #0
   814e4:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   814e8:	46d1      	mov	r9, sl
   814ea:	930b      	str	r3, [sp, #44]	; 0x2c
   814ec:	9303      	str	r3, [sp, #12]
   814ee:	9311      	str	r3, [sp, #68]	; 0x44
   814f0:	9310      	str	r3, [sp, #64]	; 0x40
   814f2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   814f6:	f8cd b010 	str.w	fp, [sp, #16]
   814fa:	f898 3000 	ldrb.w	r3, [r8]
   814fe:	4644      	mov	r4, r8
   81500:	b1fb      	cbz	r3, 81542 <_vfiprintf_r+0xc2>
   81502:	2b25      	cmp	r3, #37	; 0x25
   81504:	d102      	bne.n	8150c <_vfiprintf_r+0x8c>
   81506:	e01c      	b.n	81542 <_vfiprintf_r+0xc2>
   81508:	2b25      	cmp	r3, #37	; 0x25
   8150a:	d003      	beq.n	81514 <_vfiprintf_r+0x94>
   8150c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81510:	2b00      	cmp	r3, #0
   81512:	d1f9      	bne.n	81508 <_vfiprintf_r+0x88>
   81514:	eba4 0508 	sub.w	r5, r4, r8
   81518:	b19d      	cbz	r5, 81542 <_vfiprintf_r+0xc2>
   8151a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8151c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8151e:	3301      	adds	r3, #1
   81520:	442a      	add	r2, r5
   81522:	2b07      	cmp	r3, #7
   81524:	f8c9 8000 	str.w	r8, [r9]
   81528:	f8c9 5004 	str.w	r5, [r9, #4]
   8152c:	9211      	str	r2, [sp, #68]	; 0x44
   8152e:	9310      	str	r3, [sp, #64]	; 0x40
   81530:	dd7a      	ble.n	81628 <_vfiprintf_r+0x1a8>
   81532:	2a00      	cmp	r2, #0
   81534:	f040 84b5 	bne.w	81ea2 <_vfiprintf_r+0xa22>
   81538:	46d1      	mov	r9, sl
   8153a:	9b03      	ldr	r3, [sp, #12]
   8153c:	9210      	str	r2, [sp, #64]	; 0x40
   8153e:	442b      	add	r3, r5
   81540:	9303      	str	r3, [sp, #12]
   81542:	7823      	ldrb	r3, [r4, #0]
   81544:	2b00      	cmp	r3, #0
   81546:	f000 83e5 	beq.w	81d14 <_vfiprintf_r+0x894>
   8154a:	2000      	movs	r0, #0
   8154c:	f04f 0300 	mov.w	r3, #0
   81550:	f104 0801 	add.w	r8, r4, #1
   81554:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81558:	7862      	ldrb	r2, [r4, #1]
   8155a:	4606      	mov	r6, r0
   8155c:	4605      	mov	r5, r0
   8155e:	4603      	mov	r3, r0
   81560:	f04f 34ff 	mov.w	r4, #4294967295
   81564:	f108 0801 	add.w	r8, r8, #1
   81568:	f1a2 0120 	sub.w	r1, r2, #32
   8156c:	2958      	cmp	r1, #88	; 0x58
   8156e:	f200 82d9 	bhi.w	81b24 <_vfiprintf_r+0x6a4>
   81572:	e8df f011 	tbh	[pc, r1, lsl #1]
   81576:	0228      	.short	0x0228
   81578:	02d702d7 	.word	0x02d702d7
   8157c:	02d70230 	.word	0x02d70230
   81580:	02d702d7 	.word	0x02d702d7
   81584:	02d702d7 	.word	0x02d702d7
   81588:	00a002d7 	.word	0x00a002d7
   8158c:	02d70288 	.word	0x02d70288
   81590:	02b800a8 	.word	0x02b800a8
   81594:	01a602d7 	.word	0x01a602d7
   81598:	01ab01ab 	.word	0x01ab01ab
   8159c:	01ab01ab 	.word	0x01ab01ab
   815a0:	01ab01ab 	.word	0x01ab01ab
   815a4:	01ab01ab 	.word	0x01ab01ab
   815a8:	02d701ab 	.word	0x02d701ab
   815ac:	02d702d7 	.word	0x02d702d7
   815b0:	02d702d7 	.word	0x02d702d7
   815b4:	02d702d7 	.word	0x02d702d7
   815b8:	02d702d7 	.word	0x02d702d7
   815bc:	01b902d7 	.word	0x01b902d7
   815c0:	02d702d7 	.word	0x02d702d7
   815c4:	02d702d7 	.word	0x02d702d7
   815c8:	02d702d7 	.word	0x02d702d7
   815cc:	02d702d7 	.word	0x02d702d7
   815d0:	02d702d7 	.word	0x02d702d7
   815d4:	02d7019e 	.word	0x02d7019e
   815d8:	02d702d7 	.word	0x02d702d7
   815dc:	02d702d7 	.word	0x02d702d7
   815e0:	02d701a2 	.word	0x02d701a2
   815e4:	025a02d7 	.word	0x025a02d7
   815e8:	02d702d7 	.word	0x02d702d7
   815ec:	02d702d7 	.word	0x02d702d7
   815f0:	02d702d7 	.word	0x02d702d7
   815f4:	02d702d7 	.word	0x02d702d7
   815f8:	02d702d7 	.word	0x02d702d7
   815fc:	02220261 	.word	0x02220261
   81600:	02d702d7 	.word	0x02d702d7
   81604:	027602d7 	.word	0x027602d7
   81608:	02d70222 	.word	0x02d70222
   8160c:	027b02d7 	.word	0x027b02d7
   81610:	01fc02d7 	.word	0x01fc02d7
   81614:	02100189 	.word	0x02100189
   81618:	02d702d2 	.word	0x02d702d2
   8161c:	02d70295 	.word	0x02d70295
   81620:	02d700ad 	.word	0x02d700ad
   81624:	023502d7 	.word	0x023502d7
   81628:	f109 0908 	add.w	r9, r9, #8
   8162c:	9b03      	ldr	r3, [sp, #12]
   8162e:	442b      	add	r3, r5
   81630:	9303      	str	r3, [sp, #12]
   81632:	e786      	b.n	81542 <_vfiprintf_r+0xc2>
   81634:	4659      	mov	r1, fp
   81636:	9806      	ldr	r0, [sp, #24]
   81638:	f000 fdaa 	bl	82190 <__swsetup_r>
   8163c:	bb18      	cbnz	r0, 81686 <_vfiprintf_r+0x206>
   8163e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   81642:	f001 031a 	and.w	r3, r1, #26
   81646:	2b0a      	cmp	r3, #10
   81648:	f47f af4b 	bne.w	814e2 <_vfiprintf_r+0x62>
   8164c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81650:	2b00      	cmp	r3, #0
   81652:	f6ff af46 	blt.w	814e2 <_vfiprintf_r+0x62>
   81656:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8165a:	07db      	lsls	r3, r3, #31
   8165c:	d405      	bmi.n	8166a <_vfiprintf_r+0x1ea>
   8165e:	058f      	lsls	r7, r1, #22
   81660:	d403      	bmi.n	8166a <_vfiprintf_r+0x1ea>
   81662:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81666:	f001 fabd 	bl	82be4 <__retarget_lock_release_recursive>
   8166a:	462b      	mov	r3, r5
   8166c:	4642      	mov	r2, r8
   8166e:	4659      	mov	r1, fp
   81670:	9806      	ldr	r0, [sp, #24]
   81672:	f000 fd49 	bl	82108 <__sbprintf>
   81676:	9003      	str	r0, [sp, #12]
   81678:	9803      	ldr	r0, [sp, #12]
   8167a:	b02d      	add	sp, #180	; 0xb4
   8167c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81680:	f000 feee 	bl	82460 <__sinit>
   81684:	e709      	b.n	8149a <_vfiprintf_r+0x1a>
   81686:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8168a:	07d9      	lsls	r1, r3, #31
   8168c:	d404      	bmi.n	81698 <_vfiprintf_r+0x218>
   8168e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81692:	059a      	lsls	r2, r3, #22
   81694:	f140 84ae 	bpl.w	81ff4 <_vfiprintf_r+0xb74>
   81698:	f04f 33ff 	mov.w	r3, #4294967295
   8169c:	9303      	str	r3, [sp, #12]
   8169e:	9803      	ldr	r0, [sp, #12]
   816a0:	b02d      	add	sp, #180	; 0xb4
   816a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816a6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   816aa:	f001 fa99 	bl	82be0 <__retarget_lock_acquire_recursive>
   816ae:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   816b2:	b281      	uxth	r1, r0
   816b4:	e6fb      	b.n	814ae <_vfiprintf_r+0x2e>
   816b6:	9907      	ldr	r1, [sp, #28]
   816b8:	460a      	mov	r2, r1
   816ba:	680d      	ldr	r5, [r1, #0]
   816bc:	3204      	adds	r2, #4
   816be:	2d00      	cmp	r5, #0
   816c0:	9207      	str	r2, [sp, #28]
   816c2:	da02      	bge.n	816ca <_vfiprintf_r+0x24a>
   816c4:	426d      	negs	r5, r5
   816c6:	f043 0304 	orr.w	r3, r3, #4
   816ca:	f898 2000 	ldrb.w	r2, [r8]
   816ce:	e749      	b.n	81564 <_vfiprintf_r+0xe4>
   816d0:	9508      	str	r5, [sp, #32]
   816d2:	069e      	lsls	r6, r3, #26
   816d4:	f100 845a 	bmi.w	81f8c <_vfiprintf_r+0xb0c>
   816d8:	9907      	ldr	r1, [sp, #28]
   816da:	06dd      	lsls	r5, r3, #27
   816dc:	460a      	mov	r2, r1
   816de:	f100 83ef 	bmi.w	81ec0 <_vfiprintf_r+0xa40>
   816e2:	0658      	lsls	r0, r3, #25
   816e4:	f140 83ec 	bpl.w	81ec0 <_vfiprintf_r+0xa40>
   816e8:	2700      	movs	r7, #0
   816ea:	2201      	movs	r2, #1
   816ec:	880e      	ldrh	r6, [r1, #0]
   816ee:	3104      	adds	r1, #4
   816f0:	9107      	str	r1, [sp, #28]
   816f2:	f04f 0100 	mov.w	r1, #0
   816f6:	2500      	movs	r5, #0
   816f8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   816fc:	1c61      	adds	r1, r4, #1
   816fe:	f000 8117 	beq.w	81930 <_vfiprintf_r+0x4b0>
   81702:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81706:	9102      	str	r1, [sp, #8]
   81708:	ea56 0107 	orrs.w	r1, r6, r7
   8170c:	f040 8115 	bne.w	8193a <_vfiprintf_r+0x4ba>
   81710:	2c00      	cmp	r4, #0
   81712:	f040 835b 	bne.w	81dcc <_vfiprintf_r+0x94c>
   81716:	2a00      	cmp	r2, #0
   81718:	f040 83b6 	bne.w	81e88 <_vfiprintf_r+0xa08>
   8171c:	f013 0301 	ands.w	r3, r3, #1
   81720:	9305      	str	r3, [sp, #20]
   81722:	f000 8455 	beq.w	81fd0 <_vfiprintf_r+0xb50>
   81726:	2330      	movs	r3, #48	; 0x30
   81728:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8172c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81730:	9b05      	ldr	r3, [sp, #20]
   81732:	42a3      	cmp	r3, r4
   81734:	bfb8      	it	lt
   81736:	4623      	movlt	r3, r4
   81738:	9301      	str	r3, [sp, #4]
   8173a:	b10d      	cbz	r5, 81740 <_vfiprintf_r+0x2c0>
   8173c:	3301      	adds	r3, #1
   8173e:	9301      	str	r3, [sp, #4]
   81740:	9b02      	ldr	r3, [sp, #8]
   81742:	f013 0302 	ands.w	r3, r3, #2
   81746:	9309      	str	r3, [sp, #36]	; 0x24
   81748:	d002      	beq.n	81750 <_vfiprintf_r+0x2d0>
   8174a:	9b01      	ldr	r3, [sp, #4]
   8174c:	3302      	adds	r3, #2
   8174e:	9301      	str	r3, [sp, #4]
   81750:	9b02      	ldr	r3, [sp, #8]
   81752:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81756:	930a      	str	r3, [sp, #40]	; 0x28
   81758:	f040 8215 	bne.w	81b86 <_vfiprintf_r+0x706>
   8175c:	9b08      	ldr	r3, [sp, #32]
   8175e:	9a01      	ldr	r2, [sp, #4]
   81760:	1a9d      	subs	r5, r3, r2
   81762:	2d00      	cmp	r5, #0
   81764:	f340 820f 	ble.w	81b86 <_vfiprintf_r+0x706>
   81768:	2d10      	cmp	r5, #16
   8176a:	f340 8484 	ble.w	82076 <_vfiprintf_r+0xbf6>
   8176e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81770:	46ce      	mov	lr, r9
   81772:	2710      	movs	r7, #16
   81774:	46a1      	mov	r9, r4
   81776:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81778:	4ec5      	ldr	r6, [pc, #788]	; (81a90 <_vfiprintf_r+0x610>)
   8177a:	4619      	mov	r1, r3
   8177c:	9c06      	ldr	r4, [sp, #24]
   8177e:	e007      	b.n	81790 <_vfiprintf_r+0x310>
   81780:	f101 0c02 	add.w	ip, r1, #2
   81784:	4601      	mov	r1, r0
   81786:	f10e 0e08 	add.w	lr, lr, #8
   8178a:	3d10      	subs	r5, #16
   8178c:	2d10      	cmp	r5, #16
   8178e:	dd11      	ble.n	817b4 <_vfiprintf_r+0x334>
   81790:	1c48      	adds	r0, r1, #1
   81792:	3210      	adds	r2, #16
   81794:	2807      	cmp	r0, #7
   81796:	9211      	str	r2, [sp, #68]	; 0x44
   81798:	e88e 00c0 	stmia.w	lr, {r6, r7}
   8179c:	9010      	str	r0, [sp, #64]	; 0x40
   8179e:	ddef      	ble.n	81780 <_vfiprintf_r+0x300>
   817a0:	2a00      	cmp	r2, #0
   817a2:	f040 81d9 	bne.w	81b58 <_vfiprintf_r+0x6d8>
   817a6:	3d10      	subs	r5, #16
   817a8:	2d10      	cmp	r5, #16
   817aa:	4611      	mov	r1, r2
   817ac:	f04f 0c01 	mov.w	ip, #1
   817b0:	46d6      	mov	lr, sl
   817b2:	dced      	bgt.n	81790 <_vfiprintf_r+0x310>
   817b4:	464c      	mov	r4, r9
   817b6:	4661      	mov	r1, ip
   817b8:	46f1      	mov	r9, lr
   817ba:	442a      	add	r2, r5
   817bc:	2907      	cmp	r1, #7
   817be:	9211      	str	r2, [sp, #68]	; 0x44
   817c0:	f8c9 6000 	str.w	r6, [r9]
   817c4:	f8c9 5004 	str.w	r5, [r9, #4]
   817c8:	9110      	str	r1, [sp, #64]	; 0x40
   817ca:	f300 82eb 	bgt.w	81da4 <_vfiprintf_r+0x924>
   817ce:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   817d2:	f109 0908 	add.w	r9, r9, #8
   817d6:	1c48      	adds	r0, r1, #1
   817d8:	2d00      	cmp	r5, #0
   817da:	f040 81dc 	bne.w	81b96 <_vfiprintf_r+0x716>
   817de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   817e0:	2b00      	cmp	r3, #0
   817e2:	f000 81f6 	beq.w	81bd2 <_vfiprintf_r+0x752>
   817e6:	2102      	movs	r1, #2
   817e8:	ab0e      	add	r3, sp, #56	; 0x38
   817ea:	440a      	add	r2, r1
   817ec:	2807      	cmp	r0, #7
   817ee:	9211      	str	r2, [sp, #68]	; 0x44
   817f0:	9010      	str	r0, [sp, #64]	; 0x40
   817f2:	f8c9 1004 	str.w	r1, [r9, #4]
   817f6:	f8c9 3000 	str.w	r3, [r9]
   817fa:	f340 81e6 	ble.w	81bca <_vfiprintf_r+0x74a>
   817fe:	2a00      	cmp	r2, #0
   81800:	f040 8395 	bne.w	81f2e <_vfiprintf_r+0xaae>
   81804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81806:	2001      	movs	r0, #1
   81808:	2b80      	cmp	r3, #128	; 0x80
   8180a:	4611      	mov	r1, r2
   8180c:	46d1      	mov	r9, sl
   8180e:	f040 81e4 	bne.w	81bda <_vfiprintf_r+0x75a>
   81812:	9b08      	ldr	r3, [sp, #32]
   81814:	9d01      	ldr	r5, [sp, #4]
   81816:	1b5e      	subs	r6, r3, r5
   81818:	2e00      	cmp	r6, #0
   8181a:	f340 81de 	ble.w	81bda <_vfiprintf_r+0x75a>
   8181e:	2e10      	cmp	r6, #16
   81820:	f340 843c 	ble.w	8209c <_vfiprintf_r+0xc1c>
   81824:	46cc      	mov	ip, r9
   81826:	2710      	movs	r7, #16
   81828:	46a1      	mov	r9, r4
   8182a:	4d9a      	ldr	r5, [pc, #616]	; (81a94 <_vfiprintf_r+0x614>)
   8182c:	9c06      	ldr	r4, [sp, #24]
   8182e:	e007      	b.n	81840 <_vfiprintf_r+0x3c0>
   81830:	f101 0e02 	add.w	lr, r1, #2
   81834:	4601      	mov	r1, r0
   81836:	f10c 0c08 	add.w	ip, ip, #8
   8183a:	3e10      	subs	r6, #16
   8183c:	2e10      	cmp	r6, #16
   8183e:	dd11      	ble.n	81864 <_vfiprintf_r+0x3e4>
   81840:	1c48      	adds	r0, r1, #1
   81842:	3210      	adds	r2, #16
   81844:	2807      	cmp	r0, #7
   81846:	9211      	str	r2, [sp, #68]	; 0x44
   81848:	e88c 00a0 	stmia.w	ip, {r5, r7}
   8184c:	9010      	str	r0, [sp, #64]	; 0x40
   8184e:	ddef      	ble.n	81830 <_vfiprintf_r+0x3b0>
   81850:	2a00      	cmp	r2, #0
   81852:	f040 829b 	bne.w	81d8c <_vfiprintf_r+0x90c>
   81856:	3e10      	subs	r6, #16
   81858:	2e10      	cmp	r6, #16
   8185a:	f04f 0e01 	mov.w	lr, #1
   8185e:	4611      	mov	r1, r2
   81860:	46d4      	mov	ip, sl
   81862:	dced      	bgt.n	81840 <_vfiprintf_r+0x3c0>
   81864:	464c      	mov	r4, r9
   81866:	46e1      	mov	r9, ip
   81868:	4432      	add	r2, r6
   8186a:	f1be 0f07 	cmp.w	lr, #7
   8186e:	9211      	str	r2, [sp, #68]	; 0x44
   81870:	e889 0060 	stmia.w	r9, {r5, r6}
   81874:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81878:	f300 8366 	bgt.w	81f48 <_vfiprintf_r+0xac8>
   8187c:	f109 0908 	add.w	r9, r9, #8
   81880:	f10e 0001 	add.w	r0, lr, #1
   81884:	4671      	mov	r1, lr
   81886:	e1a8      	b.n	81bda <_vfiprintf_r+0x75a>
   81888:	9508      	str	r5, [sp, #32]
   8188a:	f013 0220 	ands.w	r2, r3, #32
   8188e:	f040 8389 	bne.w	81fa4 <_vfiprintf_r+0xb24>
   81892:	f013 0110 	ands.w	r1, r3, #16
   81896:	f040 8319 	bne.w	81ecc <_vfiprintf_r+0xa4c>
   8189a:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   8189e:	f000 8315 	beq.w	81ecc <_vfiprintf_r+0xa4c>
   818a2:	9807      	ldr	r0, [sp, #28]
   818a4:	460a      	mov	r2, r1
   818a6:	4601      	mov	r1, r0
   818a8:	3104      	adds	r1, #4
   818aa:	8806      	ldrh	r6, [r0, #0]
   818ac:	2700      	movs	r7, #0
   818ae:	9107      	str	r1, [sp, #28]
   818b0:	e71f      	b.n	816f2 <_vfiprintf_r+0x272>
   818b2:	9508      	str	r5, [sp, #32]
   818b4:	f043 0310 	orr.w	r3, r3, #16
   818b8:	e7e7      	b.n	8188a <_vfiprintf_r+0x40a>
   818ba:	9508      	str	r5, [sp, #32]
   818bc:	f043 0310 	orr.w	r3, r3, #16
   818c0:	e707      	b.n	816d2 <_vfiprintf_r+0x252>
   818c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   818c6:	f898 2000 	ldrb.w	r2, [r8]
   818ca:	e64b      	b.n	81564 <_vfiprintf_r+0xe4>
   818cc:	2500      	movs	r5, #0
   818ce:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   818d2:	f818 2b01 	ldrb.w	r2, [r8], #1
   818d6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   818da:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   818de:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   818e2:	2909      	cmp	r1, #9
   818e4:	d9f5      	bls.n	818d2 <_vfiprintf_r+0x452>
   818e6:	e63f      	b.n	81568 <_vfiprintf_r+0xe8>
   818e8:	9508      	str	r5, [sp, #32]
   818ea:	2800      	cmp	r0, #0
   818ec:	f040 8402 	bne.w	820f4 <_vfiprintf_r+0xc74>
   818f0:	f043 0310 	orr.w	r3, r3, #16
   818f4:	069e      	lsls	r6, r3, #26
   818f6:	f100 833d 	bmi.w	81f74 <_vfiprintf_r+0xaf4>
   818fa:	9907      	ldr	r1, [sp, #28]
   818fc:	06dd      	lsls	r5, r3, #27
   818fe:	460a      	mov	r2, r1
   81900:	f100 82f0 	bmi.w	81ee4 <_vfiprintf_r+0xa64>
   81904:	0658      	lsls	r0, r3, #25
   81906:	f140 82ed 	bpl.w	81ee4 <_vfiprintf_r+0xa64>
   8190a:	f9b1 6000 	ldrsh.w	r6, [r1]
   8190e:	3204      	adds	r2, #4
   81910:	17f7      	asrs	r7, r6, #31
   81912:	4630      	mov	r0, r6
   81914:	4639      	mov	r1, r7
   81916:	9207      	str	r2, [sp, #28]
   81918:	2800      	cmp	r0, #0
   8191a:	f171 0200 	sbcs.w	r2, r1, #0
   8191e:	f2c0 835a 	blt.w	81fd6 <_vfiprintf_r+0xb56>
   81922:	1c61      	adds	r1, r4, #1
   81924:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81928:	f04f 0201 	mov.w	r2, #1
   8192c:	f47f aee9 	bne.w	81702 <_vfiprintf_r+0x282>
   81930:	ea56 0107 	orrs.w	r1, r6, r7
   81934:	f000 824b 	beq.w	81dce <_vfiprintf_r+0x94e>
   81938:	9302      	str	r3, [sp, #8]
   8193a:	2a01      	cmp	r2, #1
   8193c:	f000 828a 	beq.w	81e54 <_vfiprintf_r+0x9d4>
   81940:	2a02      	cmp	r2, #2
   81942:	f040 825a 	bne.w	81dfa <_vfiprintf_r+0x97a>
   81946:	46d3      	mov	fp, sl
   81948:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8194a:	0933      	lsrs	r3, r6, #4
   8194c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81950:	0939      	lsrs	r1, r7, #4
   81952:	f006 020f 	and.w	r2, r6, #15
   81956:	460f      	mov	r7, r1
   81958:	461e      	mov	r6, r3
   8195a:	5c83      	ldrb	r3, [r0, r2]
   8195c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81960:	ea56 0307 	orrs.w	r3, r6, r7
   81964:	d1f1      	bne.n	8194a <_vfiprintf_r+0x4ca>
   81966:	ebaa 030b 	sub.w	r3, sl, fp
   8196a:	9305      	str	r3, [sp, #20]
   8196c:	e6e0      	b.n	81730 <_vfiprintf_r+0x2b0>
   8196e:	2800      	cmp	r0, #0
   81970:	f040 83bd 	bne.w	820ee <_vfiprintf_r+0xc6e>
   81974:	0699      	lsls	r1, r3, #26
   81976:	f100 8359 	bmi.w	8202c <_vfiprintf_r+0xbac>
   8197a:	06da      	lsls	r2, r3, #27
   8197c:	f100 80e5 	bmi.w	81b4a <_vfiprintf_r+0x6ca>
   81980:	065b      	lsls	r3, r3, #25
   81982:	f140 80e2 	bpl.w	81b4a <_vfiprintf_r+0x6ca>
   81986:	9a07      	ldr	r2, [sp, #28]
   81988:	6813      	ldr	r3, [r2, #0]
   8198a:	3204      	adds	r2, #4
   8198c:	9207      	str	r2, [sp, #28]
   8198e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   81992:	801a      	strh	r2, [r3, #0]
   81994:	e5b1      	b.n	814fa <_vfiprintf_r+0x7a>
   81996:	2278      	movs	r2, #120	; 0x78
   81998:	2130      	movs	r1, #48	; 0x30
   8199a:	9508      	str	r5, [sp, #32]
   8199c:	9d07      	ldr	r5, [sp, #28]
   8199e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   819a2:	1d2a      	adds	r2, r5, #4
   819a4:	9207      	str	r2, [sp, #28]
   819a6:	4a3c      	ldr	r2, [pc, #240]	; (81a98 <_vfiprintf_r+0x618>)
   819a8:	682e      	ldr	r6, [r5, #0]
   819aa:	920b      	str	r2, [sp, #44]	; 0x2c
   819ac:	f043 0302 	orr.w	r3, r3, #2
   819b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   819b4:	2700      	movs	r7, #0
   819b6:	2202      	movs	r2, #2
   819b8:	e69b      	b.n	816f2 <_vfiprintf_r+0x272>
   819ba:	9508      	str	r5, [sp, #32]
   819bc:	2800      	cmp	r0, #0
   819be:	d099      	beq.n	818f4 <_vfiprintf_r+0x474>
   819c0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   819c4:	e796      	b.n	818f4 <_vfiprintf_r+0x474>
   819c6:	f898 2000 	ldrb.w	r2, [r8]
   819ca:	2e00      	cmp	r6, #0
   819cc:	f47f adca 	bne.w	81564 <_vfiprintf_r+0xe4>
   819d0:	2001      	movs	r0, #1
   819d2:	2620      	movs	r6, #32
   819d4:	e5c6      	b.n	81564 <_vfiprintf_r+0xe4>
   819d6:	f043 0301 	orr.w	r3, r3, #1
   819da:	f898 2000 	ldrb.w	r2, [r8]
   819de:	e5c1      	b.n	81564 <_vfiprintf_r+0xe4>
   819e0:	9508      	str	r5, [sp, #32]
   819e2:	2800      	cmp	r0, #0
   819e4:	f040 8380 	bne.w	820e8 <_vfiprintf_r+0xc68>
   819e8:	492b      	ldr	r1, [pc, #172]	; (81a98 <_vfiprintf_r+0x618>)
   819ea:	910b      	str	r1, [sp, #44]	; 0x2c
   819ec:	069f      	lsls	r7, r3, #26
   819ee:	f100 82e5 	bmi.w	81fbc <_vfiprintf_r+0xb3c>
   819f2:	9807      	ldr	r0, [sp, #28]
   819f4:	06de      	lsls	r6, r3, #27
   819f6:	4601      	mov	r1, r0
   819f8:	f100 826f 	bmi.w	81eda <_vfiprintf_r+0xa5a>
   819fc:	065d      	lsls	r5, r3, #25
   819fe:	f140 826c 	bpl.w	81eda <_vfiprintf_r+0xa5a>
   81a02:	2700      	movs	r7, #0
   81a04:	3104      	adds	r1, #4
   81a06:	8806      	ldrh	r6, [r0, #0]
   81a08:	9107      	str	r1, [sp, #28]
   81a0a:	07d8      	lsls	r0, r3, #31
   81a0c:	f140 8220 	bpl.w	81e50 <_vfiprintf_r+0x9d0>
   81a10:	ea56 0107 	orrs.w	r1, r6, r7
   81a14:	f000 821c 	beq.w	81e50 <_vfiprintf_r+0x9d0>
   81a18:	2130      	movs	r1, #48	; 0x30
   81a1a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81a1e:	f043 0302 	orr.w	r3, r3, #2
   81a22:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81a26:	2202      	movs	r2, #2
   81a28:	e663      	b.n	816f2 <_vfiprintf_r+0x272>
   81a2a:	9508      	str	r5, [sp, #32]
   81a2c:	2800      	cmp	r0, #0
   81a2e:	f040 8355 	bne.w	820dc <_vfiprintf_r+0xc5c>
   81a32:	491a      	ldr	r1, [pc, #104]	; (81a9c <_vfiprintf_r+0x61c>)
   81a34:	910b      	str	r1, [sp, #44]	; 0x2c
   81a36:	e7d9      	b.n	819ec <_vfiprintf_r+0x56c>
   81a38:	2201      	movs	r2, #1
   81a3a:	9807      	ldr	r0, [sp, #28]
   81a3c:	4611      	mov	r1, r2
   81a3e:	9201      	str	r2, [sp, #4]
   81a40:	6802      	ldr	r2, [r0, #0]
   81a42:	f04f 0400 	mov.w	r4, #0
   81a46:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81a4a:	4602      	mov	r2, r0
   81a4c:	3204      	adds	r2, #4
   81a4e:	9508      	str	r5, [sp, #32]
   81a50:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81a54:	9105      	str	r1, [sp, #20]
   81a56:	9207      	str	r2, [sp, #28]
   81a58:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81a5c:	9302      	str	r3, [sp, #8]
   81a5e:	2400      	movs	r4, #0
   81a60:	e66e      	b.n	81740 <_vfiprintf_r+0x2c0>
   81a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81a66:	f898 2000 	ldrb.w	r2, [r8]
   81a6a:	e57b      	b.n	81564 <_vfiprintf_r+0xe4>
   81a6c:	f898 2000 	ldrb.w	r2, [r8]
   81a70:	2a6c      	cmp	r2, #108	; 0x6c
   81a72:	bf03      	ittte	eq
   81a74:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81a78:	f043 0320 	orreq.w	r3, r3, #32
   81a7c:	f108 0801 	addeq.w	r8, r8, #1
   81a80:	f043 0310 	orrne.w	r3, r3, #16
   81a84:	e56e      	b.n	81564 <_vfiprintf_r+0xe4>
   81a86:	f898 2000 	ldrb.w	r2, [r8]
   81a8a:	2001      	movs	r0, #1
   81a8c:	262b      	movs	r6, #43	; 0x2b
   81a8e:	e569      	b.n	81564 <_vfiprintf_r+0xe4>
   81a90:	0008400c 	.word	0x0008400c
   81a94:	0008401c 	.word	0x0008401c
   81a98:	00083ff0 	.word	0x00083ff0
   81a9c:	00083fdc 	.word	0x00083fdc
   81aa0:	f04f 0200 	mov.w	r2, #0
   81aa4:	9907      	ldr	r1, [sp, #28]
   81aa6:	9508      	str	r5, [sp, #32]
   81aa8:	f8d1 b000 	ldr.w	fp, [r1]
   81aac:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81ab0:	1d0d      	adds	r5, r1, #4
   81ab2:	f1bb 0f00 	cmp.w	fp, #0
   81ab6:	f000 82e4 	beq.w	82082 <_vfiprintf_r+0xc02>
   81aba:	1c67      	adds	r7, r4, #1
   81abc:	f000 82c3 	beq.w	82046 <_vfiprintf_r+0xbc6>
   81ac0:	4622      	mov	r2, r4
   81ac2:	2100      	movs	r1, #0
   81ac4:	4658      	mov	r0, fp
   81ac6:	9301      	str	r3, [sp, #4]
   81ac8:	f001 fbc6 	bl	83258 <memchr>
   81acc:	9b01      	ldr	r3, [sp, #4]
   81ace:	2800      	cmp	r0, #0
   81ad0:	f000 82e8 	beq.w	820a4 <_vfiprintf_r+0xc24>
   81ad4:	eba0 020b 	sub.w	r2, r0, fp
   81ad8:	9507      	str	r5, [sp, #28]
   81ada:	9205      	str	r2, [sp, #20]
   81adc:	9302      	str	r3, [sp, #8]
   81ade:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81ae2:	2400      	movs	r4, #0
   81ae4:	e624      	b.n	81730 <_vfiprintf_r+0x2b0>
   81ae6:	f898 2000 	ldrb.w	r2, [r8]
   81aea:	f108 0701 	add.w	r7, r8, #1
   81aee:	2a2a      	cmp	r2, #42	; 0x2a
   81af0:	f000 82e9 	beq.w	820c6 <_vfiprintf_r+0xc46>
   81af4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81af8:	2909      	cmp	r1, #9
   81afa:	46b8      	mov	r8, r7
   81afc:	f04f 0400 	mov.w	r4, #0
   81b00:	f63f ad32 	bhi.w	81568 <_vfiprintf_r+0xe8>
   81b04:	f818 2b01 	ldrb.w	r2, [r8], #1
   81b08:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81b0c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81b10:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81b14:	2909      	cmp	r1, #9
   81b16:	d9f5      	bls.n	81b04 <_vfiprintf_r+0x684>
   81b18:	e526      	b.n	81568 <_vfiprintf_r+0xe8>
   81b1a:	f043 0320 	orr.w	r3, r3, #32
   81b1e:	f898 2000 	ldrb.w	r2, [r8]
   81b22:	e51f      	b.n	81564 <_vfiprintf_r+0xe4>
   81b24:	9508      	str	r5, [sp, #32]
   81b26:	2800      	cmp	r0, #0
   81b28:	f040 82db 	bne.w	820e2 <_vfiprintf_r+0xc62>
   81b2c:	2a00      	cmp	r2, #0
   81b2e:	f000 80f1 	beq.w	81d14 <_vfiprintf_r+0x894>
   81b32:	2101      	movs	r1, #1
   81b34:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81b38:	f04f 0200 	mov.w	r2, #0
   81b3c:	9101      	str	r1, [sp, #4]
   81b3e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81b42:	9105      	str	r1, [sp, #20]
   81b44:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81b48:	e788      	b.n	81a5c <_vfiprintf_r+0x5dc>
   81b4a:	9a07      	ldr	r2, [sp, #28]
   81b4c:	6813      	ldr	r3, [r2, #0]
   81b4e:	3204      	adds	r2, #4
   81b50:	9207      	str	r2, [sp, #28]
   81b52:	9a03      	ldr	r2, [sp, #12]
   81b54:	601a      	str	r2, [r3, #0]
   81b56:	e4d0      	b.n	814fa <_vfiprintf_r+0x7a>
   81b58:	aa0f      	add	r2, sp, #60	; 0x3c
   81b5a:	9904      	ldr	r1, [sp, #16]
   81b5c:	4620      	mov	r0, r4
   81b5e:	f7ff fc4f 	bl	81400 <__sprint_r.part.0>
   81b62:	2800      	cmp	r0, #0
   81b64:	f040 8143 	bne.w	81dee <_vfiprintf_r+0x96e>
   81b68:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b6a:	46d6      	mov	lr, sl
   81b6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b6e:	f101 0c01 	add.w	ip, r1, #1
   81b72:	e60a      	b.n	8178a <_vfiprintf_r+0x30a>
   81b74:	aa0f      	add	r2, sp, #60	; 0x3c
   81b76:	9904      	ldr	r1, [sp, #16]
   81b78:	9806      	ldr	r0, [sp, #24]
   81b7a:	f7ff fc41 	bl	81400 <__sprint_r.part.0>
   81b7e:	2800      	cmp	r0, #0
   81b80:	f040 8135 	bne.w	81dee <_vfiprintf_r+0x96e>
   81b84:	46d1      	mov	r9, sl
   81b86:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b88:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81b8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b8e:	1c48      	adds	r0, r1, #1
   81b90:	2d00      	cmp	r5, #0
   81b92:	f43f ae24 	beq.w	817de <_vfiprintf_r+0x35e>
   81b96:	2101      	movs	r1, #1
   81b98:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81b9c:	440a      	add	r2, r1
   81b9e:	2807      	cmp	r0, #7
   81ba0:	9211      	str	r2, [sp, #68]	; 0x44
   81ba2:	9010      	str	r0, [sp, #64]	; 0x40
   81ba4:	f8c9 1004 	str.w	r1, [r9, #4]
   81ba8:	f8c9 5000 	str.w	r5, [r9]
   81bac:	f340 8109 	ble.w	81dc2 <_vfiprintf_r+0x942>
   81bb0:	2a00      	cmp	r2, #0
   81bb2:	f040 81af 	bne.w	81f14 <_vfiprintf_r+0xa94>
   81bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81bb8:	2b00      	cmp	r3, #0
   81bba:	f43f ae23 	beq.w	81804 <_vfiprintf_r+0x384>
   81bbe:	2202      	movs	r2, #2
   81bc0:	4608      	mov	r0, r1
   81bc2:	46d1      	mov	r9, sl
   81bc4:	ab0e      	add	r3, sp, #56	; 0x38
   81bc6:	921d      	str	r2, [sp, #116]	; 0x74
   81bc8:	931c      	str	r3, [sp, #112]	; 0x70
   81bca:	4601      	mov	r1, r0
   81bcc:	f109 0908 	add.w	r9, r9, #8
   81bd0:	3001      	adds	r0, #1
   81bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81bd4:	2b80      	cmp	r3, #128	; 0x80
   81bd6:	f43f ae1c 	beq.w	81812 <_vfiprintf_r+0x392>
   81bda:	9b05      	ldr	r3, [sp, #20]
   81bdc:	1ae4      	subs	r4, r4, r3
   81bde:	2c00      	cmp	r4, #0
   81be0:	dd2f      	ble.n	81c42 <_vfiprintf_r+0x7c2>
   81be2:	2c10      	cmp	r4, #16
   81be4:	f340 8220 	ble.w	82028 <_vfiprintf_r+0xba8>
   81be8:	46ce      	mov	lr, r9
   81bea:	2610      	movs	r6, #16
   81bec:	4db2      	ldr	r5, [pc, #712]	; (81eb8 <_vfiprintf_r+0xa38>)
   81bee:	9f06      	ldr	r7, [sp, #24]
   81bf0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81bf4:	e006      	b.n	81c04 <_vfiprintf_r+0x784>
   81bf6:	1c88      	adds	r0, r1, #2
   81bf8:	4619      	mov	r1, r3
   81bfa:	f10e 0e08 	add.w	lr, lr, #8
   81bfe:	3c10      	subs	r4, #16
   81c00:	2c10      	cmp	r4, #16
   81c02:	dd10      	ble.n	81c26 <_vfiprintf_r+0x7a6>
   81c04:	1c4b      	adds	r3, r1, #1
   81c06:	3210      	adds	r2, #16
   81c08:	2b07      	cmp	r3, #7
   81c0a:	9211      	str	r2, [sp, #68]	; 0x44
   81c0c:	e88e 0060 	stmia.w	lr, {r5, r6}
   81c10:	9310      	str	r3, [sp, #64]	; 0x40
   81c12:	ddf0      	ble.n	81bf6 <_vfiprintf_r+0x776>
   81c14:	2a00      	cmp	r2, #0
   81c16:	d165      	bne.n	81ce4 <_vfiprintf_r+0x864>
   81c18:	3c10      	subs	r4, #16
   81c1a:	2c10      	cmp	r4, #16
   81c1c:	f04f 0001 	mov.w	r0, #1
   81c20:	4611      	mov	r1, r2
   81c22:	46d6      	mov	lr, sl
   81c24:	dcee      	bgt.n	81c04 <_vfiprintf_r+0x784>
   81c26:	46f1      	mov	r9, lr
   81c28:	4422      	add	r2, r4
   81c2a:	2807      	cmp	r0, #7
   81c2c:	9211      	str	r2, [sp, #68]	; 0x44
   81c2e:	f8c9 5000 	str.w	r5, [r9]
   81c32:	f8c9 4004 	str.w	r4, [r9, #4]
   81c36:	9010      	str	r0, [sp, #64]	; 0x40
   81c38:	f300 8085 	bgt.w	81d46 <_vfiprintf_r+0x8c6>
   81c3c:	f109 0908 	add.w	r9, r9, #8
   81c40:	3001      	adds	r0, #1
   81c42:	9905      	ldr	r1, [sp, #20]
   81c44:	2807      	cmp	r0, #7
   81c46:	440a      	add	r2, r1
   81c48:	9211      	str	r2, [sp, #68]	; 0x44
   81c4a:	f8c9 b000 	str.w	fp, [r9]
   81c4e:	f8c9 1004 	str.w	r1, [r9, #4]
   81c52:	9010      	str	r0, [sp, #64]	; 0x40
   81c54:	f340 8082 	ble.w	81d5c <_vfiprintf_r+0x8dc>
   81c58:	2a00      	cmp	r2, #0
   81c5a:	f040 8118 	bne.w	81e8e <_vfiprintf_r+0xa0e>
   81c5e:	9b02      	ldr	r3, [sp, #8]
   81c60:	9210      	str	r2, [sp, #64]	; 0x40
   81c62:	0758      	lsls	r0, r3, #29
   81c64:	d535      	bpl.n	81cd2 <_vfiprintf_r+0x852>
   81c66:	9b08      	ldr	r3, [sp, #32]
   81c68:	9901      	ldr	r1, [sp, #4]
   81c6a:	1a5c      	subs	r4, r3, r1
   81c6c:	2c00      	cmp	r4, #0
   81c6e:	f340 80e7 	ble.w	81e40 <_vfiprintf_r+0x9c0>
   81c72:	46d1      	mov	r9, sl
   81c74:	2c10      	cmp	r4, #16
   81c76:	f340 820d 	ble.w	82094 <_vfiprintf_r+0xc14>
   81c7a:	2510      	movs	r5, #16
   81c7c:	9910      	ldr	r1, [sp, #64]	; 0x40
   81c7e:	4e8f      	ldr	r6, [pc, #572]	; (81ebc <_vfiprintf_r+0xa3c>)
   81c80:	9f06      	ldr	r7, [sp, #24]
   81c82:	f8dd b010 	ldr.w	fp, [sp, #16]
   81c86:	e006      	b.n	81c96 <_vfiprintf_r+0x816>
   81c88:	1c88      	adds	r0, r1, #2
   81c8a:	4619      	mov	r1, r3
   81c8c:	f109 0908 	add.w	r9, r9, #8
   81c90:	3c10      	subs	r4, #16
   81c92:	2c10      	cmp	r4, #16
   81c94:	dd11      	ble.n	81cba <_vfiprintf_r+0x83a>
   81c96:	1c4b      	adds	r3, r1, #1
   81c98:	3210      	adds	r2, #16
   81c9a:	2b07      	cmp	r3, #7
   81c9c:	9211      	str	r2, [sp, #68]	; 0x44
   81c9e:	f8c9 6000 	str.w	r6, [r9]
   81ca2:	f8c9 5004 	str.w	r5, [r9, #4]
   81ca6:	9310      	str	r3, [sp, #64]	; 0x40
   81ca8:	ddee      	ble.n	81c88 <_vfiprintf_r+0x808>
   81caa:	bb42      	cbnz	r2, 81cfe <_vfiprintf_r+0x87e>
   81cac:	3c10      	subs	r4, #16
   81cae:	2c10      	cmp	r4, #16
   81cb0:	f04f 0001 	mov.w	r0, #1
   81cb4:	4611      	mov	r1, r2
   81cb6:	46d1      	mov	r9, sl
   81cb8:	dced      	bgt.n	81c96 <_vfiprintf_r+0x816>
   81cba:	4422      	add	r2, r4
   81cbc:	2807      	cmp	r0, #7
   81cbe:	9211      	str	r2, [sp, #68]	; 0x44
   81cc0:	f8c9 6000 	str.w	r6, [r9]
   81cc4:	f8c9 4004 	str.w	r4, [r9, #4]
   81cc8:	9010      	str	r0, [sp, #64]	; 0x40
   81cca:	dd51      	ble.n	81d70 <_vfiprintf_r+0x8f0>
   81ccc:	2a00      	cmp	r2, #0
   81cce:	f040 819a 	bne.w	82006 <_vfiprintf_r+0xb86>
   81cd2:	9b03      	ldr	r3, [sp, #12]
   81cd4:	9a08      	ldr	r2, [sp, #32]
   81cd6:	9901      	ldr	r1, [sp, #4]
   81cd8:	428a      	cmp	r2, r1
   81cda:	bfac      	ite	ge
   81cdc:	189b      	addge	r3, r3, r2
   81cde:	185b      	addlt	r3, r3, r1
   81ce0:	9303      	str	r3, [sp, #12]
   81ce2:	e04e      	b.n	81d82 <_vfiprintf_r+0x902>
   81ce4:	aa0f      	add	r2, sp, #60	; 0x3c
   81ce6:	4649      	mov	r1, r9
   81ce8:	4638      	mov	r0, r7
   81cea:	f7ff fb89 	bl	81400 <__sprint_r.part.0>
   81cee:	2800      	cmp	r0, #0
   81cf0:	f040 813e 	bne.w	81f70 <_vfiprintf_r+0xaf0>
   81cf4:	9910      	ldr	r1, [sp, #64]	; 0x40
   81cf6:	46d6      	mov	lr, sl
   81cf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81cfa:	1c48      	adds	r0, r1, #1
   81cfc:	e77f      	b.n	81bfe <_vfiprintf_r+0x77e>
   81cfe:	aa0f      	add	r2, sp, #60	; 0x3c
   81d00:	4659      	mov	r1, fp
   81d02:	4638      	mov	r0, r7
   81d04:	f7ff fb7c 	bl	81400 <__sprint_r.part.0>
   81d08:	b960      	cbnz	r0, 81d24 <_vfiprintf_r+0x8a4>
   81d0a:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d0c:	46d1      	mov	r9, sl
   81d0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d10:	1c48      	adds	r0, r1, #1
   81d12:	e7bd      	b.n	81c90 <_vfiprintf_r+0x810>
   81d14:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81d16:	f8dd b010 	ldr.w	fp, [sp, #16]
   81d1a:	2b00      	cmp	r3, #0
   81d1c:	f040 81ca 	bne.w	820b4 <_vfiprintf_r+0xc34>
   81d20:	2300      	movs	r3, #0
   81d22:	9310      	str	r3, [sp, #64]	; 0x40
   81d24:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81d28:	f013 0f01 	tst.w	r3, #1
   81d2c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81d30:	d102      	bne.n	81d38 <_vfiprintf_r+0x8b8>
   81d32:	059a      	lsls	r2, r3, #22
   81d34:	f140 80dd 	bpl.w	81ef2 <_vfiprintf_r+0xa72>
   81d38:	065b      	lsls	r3, r3, #25
   81d3a:	f53f acad 	bmi.w	81698 <_vfiprintf_r+0x218>
   81d3e:	9803      	ldr	r0, [sp, #12]
   81d40:	b02d      	add	sp, #180	; 0xb4
   81d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d46:	2a00      	cmp	r2, #0
   81d48:	f040 8105 	bne.w	81f56 <_vfiprintf_r+0xad6>
   81d4c:	2301      	movs	r3, #1
   81d4e:	46d1      	mov	r9, sl
   81d50:	9a05      	ldr	r2, [sp, #20]
   81d52:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81d56:	921d      	str	r2, [sp, #116]	; 0x74
   81d58:	9211      	str	r2, [sp, #68]	; 0x44
   81d5a:	9310      	str	r3, [sp, #64]	; 0x40
   81d5c:	f109 0908 	add.w	r9, r9, #8
   81d60:	9b02      	ldr	r3, [sp, #8]
   81d62:	0759      	lsls	r1, r3, #29
   81d64:	d504      	bpl.n	81d70 <_vfiprintf_r+0x8f0>
   81d66:	9b08      	ldr	r3, [sp, #32]
   81d68:	9901      	ldr	r1, [sp, #4]
   81d6a:	1a5c      	subs	r4, r3, r1
   81d6c:	2c00      	cmp	r4, #0
   81d6e:	dc81      	bgt.n	81c74 <_vfiprintf_r+0x7f4>
   81d70:	9b03      	ldr	r3, [sp, #12]
   81d72:	9908      	ldr	r1, [sp, #32]
   81d74:	9801      	ldr	r0, [sp, #4]
   81d76:	4281      	cmp	r1, r0
   81d78:	bfac      	ite	ge
   81d7a:	185b      	addge	r3, r3, r1
   81d7c:	181b      	addlt	r3, r3, r0
   81d7e:	9303      	str	r3, [sp, #12]
   81d80:	bb72      	cbnz	r2, 81de0 <_vfiprintf_r+0x960>
   81d82:	2300      	movs	r3, #0
   81d84:	46d1      	mov	r9, sl
   81d86:	9310      	str	r3, [sp, #64]	; 0x40
   81d88:	f7ff bbb7 	b.w	814fa <_vfiprintf_r+0x7a>
   81d8c:	aa0f      	add	r2, sp, #60	; 0x3c
   81d8e:	9904      	ldr	r1, [sp, #16]
   81d90:	4620      	mov	r0, r4
   81d92:	f7ff fb35 	bl	81400 <__sprint_r.part.0>
   81d96:	bb50      	cbnz	r0, 81dee <_vfiprintf_r+0x96e>
   81d98:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d9a:	46d4      	mov	ip, sl
   81d9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d9e:	f101 0e01 	add.w	lr, r1, #1
   81da2:	e54a      	b.n	8183a <_vfiprintf_r+0x3ba>
   81da4:	2a00      	cmp	r2, #0
   81da6:	f47f aee5 	bne.w	81b74 <_vfiprintf_r+0x6f4>
   81daa:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81dae:	2900      	cmp	r1, #0
   81db0:	f000 811a 	beq.w	81fe8 <_vfiprintf_r+0xb68>
   81db4:	2201      	movs	r2, #1
   81db6:	46d1      	mov	r9, sl
   81db8:	4610      	mov	r0, r2
   81dba:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81dbe:	921d      	str	r2, [sp, #116]	; 0x74
   81dc0:	911c      	str	r1, [sp, #112]	; 0x70
   81dc2:	4601      	mov	r1, r0
   81dc4:	f109 0908 	add.w	r9, r9, #8
   81dc8:	3001      	adds	r0, #1
   81dca:	e508      	b.n	817de <_vfiprintf_r+0x35e>
   81dcc:	9b02      	ldr	r3, [sp, #8]
   81dce:	2a01      	cmp	r2, #1
   81dd0:	f000 8097 	beq.w	81f02 <_vfiprintf_r+0xa82>
   81dd4:	2a02      	cmp	r2, #2
   81dd6:	d10d      	bne.n	81df4 <_vfiprintf_r+0x974>
   81dd8:	9302      	str	r3, [sp, #8]
   81dda:	2600      	movs	r6, #0
   81ddc:	2700      	movs	r7, #0
   81dde:	e5b2      	b.n	81946 <_vfiprintf_r+0x4c6>
   81de0:	aa0f      	add	r2, sp, #60	; 0x3c
   81de2:	9904      	ldr	r1, [sp, #16]
   81de4:	9806      	ldr	r0, [sp, #24]
   81de6:	f7ff fb0b 	bl	81400 <__sprint_r.part.0>
   81dea:	2800      	cmp	r0, #0
   81dec:	d0c9      	beq.n	81d82 <_vfiprintf_r+0x902>
   81dee:	f8dd b010 	ldr.w	fp, [sp, #16]
   81df2:	e797      	b.n	81d24 <_vfiprintf_r+0x8a4>
   81df4:	2600      	movs	r6, #0
   81df6:	2700      	movs	r7, #0
   81df8:	9302      	str	r3, [sp, #8]
   81dfa:	4651      	mov	r1, sl
   81dfc:	e000      	b.n	81e00 <_vfiprintf_r+0x980>
   81dfe:	4659      	mov	r1, fp
   81e00:	08f2      	lsrs	r2, r6, #3
   81e02:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81e06:	08f8      	lsrs	r0, r7, #3
   81e08:	f006 0307 	and.w	r3, r6, #7
   81e0c:	4607      	mov	r7, r0
   81e0e:	4616      	mov	r6, r2
   81e10:	3330      	adds	r3, #48	; 0x30
   81e12:	ea56 0207 	orrs.w	r2, r6, r7
   81e16:	f801 3c01 	strb.w	r3, [r1, #-1]
   81e1a:	f101 3bff 	add.w	fp, r1, #4294967295
   81e1e:	d1ee      	bne.n	81dfe <_vfiprintf_r+0x97e>
   81e20:	9a02      	ldr	r2, [sp, #8]
   81e22:	07d6      	lsls	r6, r2, #31
   81e24:	f57f ad9f 	bpl.w	81966 <_vfiprintf_r+0x4e6>
   81e28:	2b30      	cmp	r3, #48	; 0x30
   81e2a:	f43f ad9c 	beq.w	81966 <_vfiprintf_r+0x4e6>
   81e2e:	2330      	movs	r3, #48	; 0x30
   81e30:	3902      	subs	r1, #2
   81e32:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81e36:	ebaa 0301 	sub.w	r3, sl, r1
   81e3a:	9305      	str	r3, [sp, #20]
   81e3c:	468b      	mov	fp, r1
   81e3e:	e477      	b.n	81730 <_vfiprintf_r+0x2b0>
   81e40:	9b03      	ldr	r3, [sp, #12]
   81e42:	9a08      	ldr	r2, [sp, #32]
   81e44:	428a      	cmp	r2, r1
   81e46:	bfac      	ite	ge
   81e48:	189b      	addge	r3, r3, r2
   81e4a:	185b      	addlt	r3, r3, r1
   81e4c:	9303      	str	r3, [sp, #12]
   81e4e:	e798      	b.n	81d82 <_vfiprintf_r+0x902>
   81e50:	2202      	movs	r2, #2
   81e52:	e44e      	b.n	816f2 <_vfiprintf_r+0x272>
   81e54:	2f00      	cmp	r7, #0
   81e56:	bf08      	it	eq
   81e58:	2e0a      	cmpeq	r6, #10
   81e5a:	d351      	bcc.n	81f00 <_vfiprintf_r+0xa80>
   81e5c:	46d3      	mov	fp, sl
   81e5e:	4630      	mov	r0, r6
   81e60:	4639      	mov	r1, r7
   81e62:	220a      	movs	r2, #10
   81e64:	2300      	movs	r3, #0
   81e66:	f001 fefb 	bl	83c60 <__aeabi_uldivmod>
   81e6a:	3230      	adds	r2, #48	; 0x30
   81e6c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81e70:	4630      	mov	r0, r6
   81e72:	4639      	mov	r1, r7
   81e74:	2300      	movs	r3, #0
   81e76:	220a      	movs	r2, #10
   81e78:	f001 fef2 	bl	83c60 <__aeabi_uldivmod>
   81e7c:	4606      	mov	r6, r0
   81e7e:	460f      	mov	r7, r1
   81e80:	ea56 0307 	orrs.w	r3, r6, r7
   81e84:	d1eb      	bne.n	81e5e <_vfiprintf_r+0x9de>
   81e86:	e56e      	b.n	81966 <_vfiprintf_r+0x4e6>
   81e88:	9405      	str	r4, [sp, #20]
   81e8a:	46d3      	mov	fp, sl
   81e8c:	e450      	b.n	81730 <_vfiprintf_r+0x2b0>
   81e8e:	aa0f      	add	r2, sp, #60	; 0x3c
   81e90:	9904      	ldr	r1, [sp, #16]
   81e92:	9806      	ldr	r0, [sp, #24]
   81e94:	f7ff fab4 	bl	81400 <__sprint_r.part.0>
   81e98:	2800      	cmp	r0, #0
   81e9a:	d1a8      	bne.n	81dee <_vfiprintf_r+0x96e>
   81e9c:	46d1      	mov	r9, sl
   81e9e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ea0:	e75e      	b.n	81d60 <_vfiprintf_r+0x8e0>
   81ea2:	aa0f      	add	r2, sp, #60	; 0x3c
   81ea4:	9904      	ldr	r1, [sp, #16]
   81ea6:	9806      	ldr	r0, [sp, #24]
   81ea8:	f7ff faaa 	bl	81400 <__sprint_r.part.0>
   81eac:	2800      	cmp	r0, #0
   81eae:	d19e      	bne.n	81dee <_vfiprintf_r+0x96e>
   81eb0:	46d1      	mov	r9, sl
   81eb2:	f7ff bbbb 	b.w	8162c <_vfiprintf_r+0x1ac>
   81eb6:	bf00      	nop
   81eb8:	0008401c 	.word	0x0008401c
   81ebc:	0008400c 	.word	0x0008400c
   81ec0:	3104      	adds	r1, #4
   81ec2:	6816      	ldr	r6, [r2, #0]
   81ec4:	2700      	movs	r7, #0
   81ec6:	2201      	movs	r2, #1
   81ec8:	9107      	str	r1, [sp, #28]
   81eca:	e412      	b.n	816f2 <_vfiprintf_r+0x272>
   81ecc:	9807      	ldr	r0, [sp, #28]
   81ece:	2700      	movs	r7, #0
   81ed0:	4601      	mov	r1, r0
   81ed2:	3104      	adds	r1, #4
   81ed4:	6806      	ldr	r6, [r0, #0]
   81ed6:	9107      	str	r1, [sp, #28]
   81ed8:	e40b      	b.n	816f2 <_vfiprintf_r+0x272>
   81eda:	680e      	ldr	r6, [r1, #0]
   81edc:	3104      	adds	r1, #4
   81ede:	9107      	str	r1, [sp, #28]
   81ee0:	2700      	movs	r7, #0
   81ee2:	e592      	b.n	81a0a <_vfiprintf_r+0x58a>
   81ee4:	6816      	ldr	r6, [r2, #0]
   81ee6:	3204      	adds	r2, #4
   81ee8:	17f7      	asrs	r7, r6, #31
   81eea:	9207      	str	r2, [sp, #28]
   81eec:	4630      	mov	r0, r6
   81eee:	4639      	mov	r1, r7
   81ef0:	e512      	b.n	81918 <_vfiprintf_r+0x498>
   81ef2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81ef6:	f000 fe75 	bl	82be4 <__retarget_lock_release_recursive>
   81efa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81efe:	e71b      	b.n	81d38 <_vfiprintf_r+0x8b8>
   81f00:	9b02      	ldr	r3, [sp, #8]
   81f02:	9302      	str	r3, [sp, #8]
   81f04:	2301      	movs	r3, #1
   81f06:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81f0a:	3630      	adds	r6, #48	; 0x30
   81f0c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   81f10:	9305      	str	r3, [sp, #20]
   81f12:	e40d      	b.n	81730 <_vfiprintf_r+0x2b0>
   81f14:	aa0f      	add	r2, sp, #60	; 0x3c
   81f16:	9904      	ldr	r1, [sp, #16]
   81f18:	9806      	ldr	r0, [sp, #24]
   81f1a:	f7ff fa71 	bl	81400 <__sprint_r.part.0>
   81f1e:	2800      	cmp	r0, #0
   81f20:	f47f af65 	bne.w	81dee <_vfiprintf_r+0x96e>
   81f24:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f26:	46d1      	mov	r9, sl
   81f28:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f2a:	1c48      	adds	r0, r1, #1
   81f2c:	e457      	b.n	817de <_vfiprintf_r+0x35e>
   81f2e:	aa0f      	add	r2, sp, #60	; 0x3c
   81f30:	9904      	ldr	r1, [sp, #16]
   81f32:	9806      	ldr	r0, [sp, #24]
   81f34:	f7ff fa64 	bl	81400 <__sprint_r.part.0>
   81f38:	2800      	cmp	r0, #0
   81f3a:	f47f af58 	bne.w	81dee <_vfiprintf_r+0x96e>
   81f3e:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f40:	46d1      	mov	r9, sl
   81f42:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f44:	1c48      	adds	r0, r1, #1
   81f46:	e644      	b.n	81bd2 <_vfiprintf_r+0x752>
   81f48:	2a00      	cmp	r2, #0
   81f4a:	f040 8087 	bne.w	8205c <_vfiprintf_r+0xbdc>
   81f4e:	2001      	movs	r0, #1
   81f50:	4611      	mov	r1, r2
   81f52:	46d1      	mov	r9, sl
   81f54:	e641      	b.n	81bda <_vfiprintf_r+0x75a>
   81f56:	aa0f      	add	r2, sp, #60	; 0x3c
   81f58:	9904      	ldr	r1, [sp, #16]
   81f5a:	9806      	ldr	r0, [sp, #24]
   81f5c:	f7ff fa50 	bl	81400 <__sprint_r.part.0>
   81f60:	2800      	cmp	r0, #0
   81f62:	f47f af44 	bne.w	81dee <_vfiprintf_r+0x96e>
   81f66:	9810      	ldr	r0, [sp, #64]	; 0x40
   81f68:	46d1      	mov	r9, sl
   81f6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f6c:	3001      	adds	r0, #1
   81f6e:	e668      	b.n	81c42 <_vfiprintf_r+0x7c2>
   81f70:	46cb      	mov	fp, r9
   81f72:	e6d7      	b.n	81d24 <_vfiprintf_r+0x8a4>
   81f74:	9d07      	ldr	r5, [sp, #28]
   81f76:	3507      	adds	r5, #7
   81f78:	f025 0507 	bic.w	r5, r5, #7
   81f7c:	f105 0208 	add.w	r2, r5, #8
   81f80:	e9d5 0100 	ldrd	r0, r1, [r5]
   81f84:	9207      	str	r2, [sp, #28]
   81f86:	4606      	mov	r6, r0
   81f88:	460f      	mov	r7, r1
   81f8a:	e4c5      	b.n	81918 <_vfiprintf_r+0x498>
   81f8c:	9d07      	ldr	r5, [sp, #28]
   81f8e:	3507      	adds	r5, #7
   81f90:	f025 0207 	bic.w	r2, r5, #7
   81f94:	f102 0108 	add.w	r1, r2, #8
   81f98:	e9d2 6700 	ldrd	r6, r7, [r2]
   81f9c:	9107      	str	r1, [sp, #28]
   81f9e:	2201      	movs	r2, #1
   81fa0:	f7ff bba7 	b.w	816f2 <_vfiprintf_r+0x272>
   81fa4:	9d07      	ldr	r5, [sp, #28]
   81fa6:	3507      	adds	r5, #7
   81fa8:	f025 0207 	bic.w	r2, r5, #7
   81fac:	f102 0108 	add.w	r1, r2, #8
   81fb0:	e9d2 6700 	ldrd	r6, r7, [r2]
   81fb4:	9107      	str	r1, [sp, #28]
   81fb6:	2200      	movs	r2, #0
   81fb8:	f7ff bb9b 	b.w	816f2 <_vfiprintf_r+0x272>
   81fbc:	9d07      	ldr	r5, [sp, #28]
   81fbe:	3507      	adds	r5, #7
   81fc0:	f025 0107 	bic.w	r1, r5, #7
   81fc4:	f101 0008 	add.w	r0, r1, #8
   81fc8:	9007      	str	r0, [sp, #28]
   81fca:	e9d1 6700 	ldrd	r6, r7, [r1]
   81fce:	e51c      	b.n	81a0a <_vfiprintf_r+0x58a>
   81fd0:	46d3      	mov	fp, sl
   81fd2:	f7ff bbad 	b.w	81730 <_vfiprintf_r+0x2b0>
   81fd6:	252d      	movs	r5, #45	; 0x2d
   81fd8:	4276      	negs	r6, r6
   81fda:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81fde:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   81fe2:	2201      	movs	r2, #1
   81fe4:	f7ff bb8a 	b.w	816fc <_vfiprintf_r+0x27c>
   81fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81fea:	b9b3      	cbnz	r3, 8201a <_vfiprintf_r+0xb9a>
   81fec:	4611      	mov	r1, r2
   81fee:	2001      	movs	r0, #1
   81ff0:	46d1      	mov	r9, sl
   81ff2:	e5f2      	b.n	81bda <_vfiprintf_r+0x75a>
   81ff4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81ff8:	f000 fdf4 	bl	82be4 <__retarget_lock_release_recursive>
   81ffc:	f04f 33ff 	mov.w	r3, #4294967295
   82000:	9303      	str	r3, [sp, #12]
   82002:	f7ff bb4c 	b.w	8169e <_vfiprintf_r+0x21e>
   82006:	aa0f      	add	r2, sp, #60	; 0x3c
   82008:	9904      	ldr	r1, [sp, #16]
   8200a:	9806      	ldr	r0, [sp, #24]
   8200c:	f7ff f9f8 	bl	81400 <__sprint_r.part.0>
   82010:	2800      	cmp	r0, #0
   82012:	f47f aeec 	bne.w	81dee <_vfiprintf_r+0x96e>
   82016:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82018:	e6aa      	b.n	81d70 <_vfiprintf_r+0x8f0>
   8201a:	2202      	movs	r2, #2
   8201c:	ab0e      	add	r3, sp, #56	; 0x38
   8201e:	921d      	str	r2, [sp, #116]	; 0x74
   82020:	931c      	str	r3, [sp, #112]	; 0x70
   82022:	2001      	movs	r0, #1
   82024:	46d1      	mov	r9, sl
   82026:	e5d0      	b.n	81bca <_vfiprintf_r+0x74a>
   82028:	4d34      	ldr	r5, [pc, #208]	; (820fc <_vfiprintf_r+0xc7c>)
   8202a:	e5fd      	b.n	81c28 <_vfiprintf_r+0x7a8>
   8202c:	9a07      	ldr	r2, [sp, #28]
   8202e:	4613      	mov	r3, r2
   82030:	3304      	adds	r3, #4
   82032:	9307      	str	r3, [sp, #28]
   82034:	9b03      	ldr	r3, [sp, #12]
   82036:	6811      	ldr	r1, [r2, #0]
   82038:	17dd      	asrs	r5, r3, #31
   8203a:	461a      	mov	r2, r3
   8203c:	462b      	mov	r3, r5
   8203e:	e9c1 2300 	strd	r2, r3, [r1]
   82042:	f7ff ba5a 	b.w	814fa <_vfiprintf_r+0x7a>
   82046:	4658      	mov	r0, fp
   82048:	9507      	str	r5, [sp, #28]
   8204a:	9302      	str	r3, [sp, #8]
   8204c:	f7ff f9aa 	bl	813a4 <strlen>
   82050:	2400      	movs	r4, #0
   82052:	9005      	str	r0, [sp, #20]
   82054:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82058:	f7ff bb6a 	b.w	81730 <_vfiprintf_r+0x2b0>
   8205c:	aa0f      	add	r2, sp, #60	; 0x3c
   8205e:	9904      	ldr	r1, [sp, #16]
   82060:	9806      	ldr	r0, [sp, #24]
   82062:	f7ff f9cd 	bl	81400 <__sprint_r.part.0>
   82066:	2800      	cmp	r0, #0
   82068:	f47f aec1 	bne.w	81dee <_vfiprintf_r+0x96e>
   8206c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8206e:	46d1      	mov	r9, sl
   82070:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82072:	1c48      	adds	r0, r1, #1
   82074:	e5b1      	b.n	81bda <_vfiprintf_r+0x75a>
   82076:	9910      	ldr	r1, [sp, #64]	; 0x40
   82078:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8207a:	3101      	adds	r1, #1
   8207c:	4e20      	ldr	r6, [pc, #128]	; (82100 <_vfiprintf_r+0xc80>)
   8207e:	f7ff bb9c 	b.w	817ba <_vfiprintf_r+0x33a>
   82082:	2c06      	cmp	r4, #6
   82084:	bf28      	it	cs
   82086:	2406      	movcs	r4, #6
   82088:	9507      	str	r5, [sp, #28]
   8208a:	9405      	str	r4, [sp, #20]
   8208c:	9401      	str	r4, [sp, #4]
   8208e:	f8df b074 	ldr.w	fp, [pc, #116]	; 82104 <_vfiprintf_r+0xc84>
   82092:	e4e3      	b.n	81a5c <_vfiprintf_r+0x5dc>
   82094:	9810      	ldr	r0, [sp, #64]	; 0x40
   82096:	4e1a      	ldr	r6, [pc, #104]	; (82100 <_vfiprintf_r+0xc80>)
   82098:	3001      	adds	r0, #1
   8209a:	e60e      	b.n	81cba <_vfiprintf_r+0x83a>
   8209c:	4686      	mov	lr, r0
   8209e:	4d17      	ldr	r5, [pc, #92]	; (820fc <_vfiprintf_r+0xc7c>)
   820a0:	f7ff bbe2 	b.w	81868 <_vfiprintf_r+0x3e8>
   820a4:	9405      	str	r4, [sp, #20]
   820a6:	9507      	str	r5, [sp, #28]
   820a8:	9302      	str	r3, [sp, #8]
   820aa:	4604      	mov	r4, r0
   820ac:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   820b0:	f7ff bb3e 	b.w	81730 <_vfiprintf_r+0x2b0>
   820b4:	9806      	ldr	r0, [sp, #24]
   820b6:	aa0f      	add	r2, sp, #60	; 0x3c
   820b8:	4659      	mov	r1, fp
   820ba:	f7ff f9a1 	bl	81400 <__sprint_r.part.0>
   820be:	2800      	cmp	r0, #0
   820c0:	f43f ae2e 	beq.w	81d20 <_vfiprintf_r+0x8a0>
   820c4:	e62e      	b.n	81d24 <_vfiprintf_r+0x8a4>
   820c6:	9907      	ldr	r1, [sp, #28]
   820c8:	f898 2001 	ldrb.w	r2, [r8, #1]
   820cc:	680c      	ldr	r4, [r1, #0]
   820ce:	3104      	adds	r1, #4
   820d0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   820d4:	46b8      	mov	r8, r7
   820d6:	9107      	str	r1, [sp, #28]
   820d8:	f7ff ba44 	b.w	81564 <_vfiprintf_r+0xe4>
   820dc:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   820e0:	e4a7      	b.n	81a32 <_vfiprintf_r+0x5b2>
   820e2:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   820e6:	e521      	b.n	81b2c <_vfiprintf_r+0x6ac>
   820e8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   820ec:	e47c      	b.n	819e8 <_vfiprintf_r+0x568>
   820ee:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   820f2:	e43f      	b.n	81974 <_vfiprintf_r+0x4f4>
   820f4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   820f8:	f7ff bbfa 	b.w	818f0 <_vfiprintf_r+0x470>
   820fc:	0008401c 	.word	0x0008401c
   82100:	0008400c 	.word	0x0008400c
   82104:	00084004 	.word	0x00084004

00082108 <__sbprintf>:
   82108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8210c:	460c      	mov	r4, r1
   8210e:	f04f 0e00 	mov.w	lr, #0
   82112:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82116:	4606      	mov	r6, r0
   82118:	4617      	mov	r7, r2
   8211a:	4698      	mov	r8, r3
   8211c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8211e:	89e3      	ldrh	r3, [r4, #14]
   82120:	8989      	ldrh	r1, [r1, #12]
   82122:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82126:	f021 0102 	bic.w	r1, r1, #2
   8212a:	9219      	str	r2, [sp, #100]	; 0x64
   8212c:	f8ad 300e 	strh.w	r3, [sp, #14]
   82130:	69e2      	ldr	r2, [r4, #28]
   82132:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82134:	f8ad 100c 	strh.w	r1, [sp, #12]
   82138:	a816      	add	r0, sp, #88	; 0x58
   8213a:	a91a      	add	r1, sp, #104	; 0x68
   8213c:	f8cd e018 	str.w	lr, [sp, #24]
   82140:	9207      	str	r2, [sp, #28]
   82142:	9309      	str	r3, [sp, #36]	; 0x24
   82144:	9100      	str	r1, [sp, #0]
   82146:	9104      	str	r1, [sp, #16]
   82148:	9502      	str	r5, [sp, #8]
   8214a:	9505      	str	r5, [sp, #20]
   8214c:	f000 fd44 	bl	82bd8 <__retarget_lock_init_recursive>
   82150:	4643      	mov	r3, r8
   82152:	463a      	mov	r2, r7
   82154:	4669      	mov	r1, sp
   82156:	4630      	mov	r0, r6
   82158:	f7ff f992 	bl	81480 <_vfiprintf_r>
   8215c:	1e05      	subs	r5, r0, #0
   8215e:	db07      	blt.n	82170 <__sbprintf+0x68>
   82160:	4630      	mov	r0, r6
   82162:	4669      	mov	r1, sp
   82164:	f000 f924 	bl	823b0 <_fflush_r>
   82168:	2800      	cmp	r0, #0
   8216a:	bf18      	it	ne
   8216c:	f04f 35ff 	movne.w	r5, #4294967295
   82170:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82174:	065b      	lsls	r3, r3, #25
   82176:	d503      	bpl.n	82180 <__sbprintf+0x78>
   82178:	89a3      	ldrh	r3, [r4, #12]
   8217a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8217e:	81a3      	strh	r3, [r4, #12]
   82180:	9816      	ldr	r0, [sp, #88]	; 0x58
   82182:	f000 fd2b 	bl	82bdc <__retarget_lock_close_recursive>
   82186:	4628      	mov	r0, r5
   82188:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8218c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082190 <__swsetup_r>:
   82190:	b538      	push	{r3, r4, r5, lr}
   82192:	4b30      	ldr	r3, [pc, #192]	; (82254 <__swsetup_r+0xc4>)
   82194:	4605      	mov	r5, r0
   82196:	6818      	ldr	r0, [r3, #0]
   82198:	460c      	mov	r4, r1
   8219a:	b110      	cbz	r0, 821a2 <__swsetup_r+0x12>
   8219c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8219e:	2b00      	cmp	r3, #0
   821a0:	d038      	beq.n	82214 <__swsetup_r+0x84>
   821a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   821a6:	b293      	uxth	r3, r2
   821a8:	0718      	lsls	r0, r3, #28
   821aa:	d50c      	bpl.n	821c6 <__swsetup_r+0x36>
   821ac:	6920      	ldr	r0, [r4, #16]
   821ae:	b1a8      	cbz	r0, 821dc <__swsetup_r+0x4c>
   821b0:	f013 0201 	ands.w	r2, r3, #1
   821b4:	d01e      	beq.n	821f4 <__swsetup_r+0x64>
   821b6:	2200      	movs	r2, #0
   821b8:	6963      	ldr	r3, [r4, #20]
   821ba:	60a2      	str	r2, [r4, #8]
   821bc:	425b      	negs	r3, r3
   821be:	61a3      	str	r3, [r4, #24]
   821c0:	b1f0      	cbz	r0, 82200 <__swsetup_r+0x70>
   821c2:	2000      	movs	r0, #0
   821c4:	bd38      	pop	{r3, r4, r5, pc}
   821c6:	06d9      	lsls	r1, r3, #27
   821c8:	d53b      	bpl.n	82242 <__swsetup_r+0xb2>
   821ca:	0758      	lsls	r0, r3, #29
   821cc:	d425      	bmi.n	8221a <__swsetup_r+0x8a>
   821ce:	6920      	ldr	r0, [r4, #16]
   821d0:	f042 0308 	orr.w	r3, r2, #8
   821d4:	81a3      	strh	r3, [r4, #12]
   821d6:	b29b      	uxth	r3, r3
   821d8:	2800      	cmp	r0, #0
   821da:	d1e9      	bne.n	821b0 <__swsetup_r+0x20>
   821dc:	f403 7220 	and.w	r2, r3, #640	; 0x280
   821e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   821e4:	d0e4      	beq.n	821b0 <__swsetup_r+0x20>
   821e6:	4628      	mov	r0, r5
   821e8:	4621      	mov	r1, r4
   821ea:	f000 fd2b 	bl	82c44 <__smakebuf_r>
   821ee:	89a3      	ldrh	r3, [r4, #12]
   821f0:	6920      	ldr	r0, [r4, #16]
   821f2:	e7dd      	b.n	821b0 <__swsetup_r+0x20>
   821f4:	0799      	lsls	r1, r3, #30
   821f6:	bf58      	it	pl
   821f8:	6962      	ldrpl	r2, [r4, #20]
   821fa:	60a2      	str	r2, [r4, #8]
   821fc:	2800      	cmp	r0, #0
   821fe:	d1e0      	bne.n	821c2 <__swsetup_r+0x32>
   82200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82204:	061a      	lsls	r2, r3, #24
   82206:	d5dd      	bpl.n	821c4 <__swsetup_r+0x34>
   82208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8220c:	81a3      	strh	r3, [r4, #12]
   8220e:	f04f 30ff 	mov.w	r0, #4294967295
   82212:	bd38      	pop	{r3, r4, r5, pc}
   82214:	f000 f924 	bl	82460 <__sinit>
   82218:	e7c3      	b.n	821a2 <__swsetup_r+0x12>
   8221a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8221c:	b151      	cbz	r1, 82234 <__swsetup_r+0xa4>
   8221e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82222:	4299      	cmp	r1, r3
   82224:	d004      	beq.n	82230 <__swsetup_r+0xa0>
   82226:	4628      	mov	r0, r5
   82228:	f000 fa40 	bl	826ac <_free_r>
   8222c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82230:	2300      	movs	r3, #0
   82232:	6323      	str	r3, [r4, #48]	; 0x30
   82234:	2300      	movs	r3, #0
   82236:	6920      	ldr	r0, [r4, #16]
   82238:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8223c:	e884 0009 	stmia.w	r4, {r0, r3}
   82240:	e7c6      	b.n	821d0 <__swsetup_r+0x40>
   82242:	2309      	movs	r3, #9
   82244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82248:	602b      	str	r3, [r5, #0]
   8224a:	f04f 30ff 	mov.w	r0, #4294967295
   8224e:	81a2      	strh	r2, [r4, #12]
   82250:	bd38      	pop	{r3, r4, r5, pc}
   82252:	bf00      	nop
   82254:	20070134 	.word	0x20070134

00082258 <register_fini>:
   82258:	4b02      	ldr	r3, [pc, #8]	; (82264 <register_fini+0xc>)
   8225a:	b113      	cbz	r3, 82262 <register_fini+0xa>
   8225c:	4802      	ldr	r0, [pc, #8]	; (82268 <register_fini+0x10>)
   8225e:	f000 b805 	b.w	8226c <atexit>
   82262:	4770      	bx	lr
   82264:	00000000 	.word	0x00000000
   82268:	000824d9 	.word	0x000824d9

0008226c <atexit>:
   8226c:	2300      	movs	r3, #0
   8226e:	4601      	mov	r1, r0
   82270:	461a      	mov	r2, r3
   82272:	4618      	mov	r0, r3
   82274:	f001 bbcc 	b.w	83a10 <__register_exitproc>

00082278 <__sflush_r>:
   82278:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8227c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82280:	b29a      	uxth	r2, r3
   82282:	460d      	mov	r5, r1
   82284:	0711      	lsls	r1, r2, #28
   82286:	4680      	mov	r8, r0
   82288:	d43a      	bmi.n	82300 <__sflush_r+0x88>
   8228a:	686a      	ldr	r2, [r5, #4]
   8228c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82290:	2a00      	cmp	r2, #0
   82292:	81ab      	strh	r3, [r5, #12]
   82294:	dd70      	ble.n	82378 <__sflush_r+0x100>
   82296:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82298:	2c00      	cmp	r4, #0
   8229a:	d04a      	beq.n	82332 <__sflush_r+0xba>
   8229c:	2200      	movs	r2, #0
   8229e:	b29b      	uxth	r3, r3
   822a0:	f8d8 6000 	ldr.w	r6, [r8]
   822a4:	f8c8 2000 	str.w	r2, [r8]
   822a8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   822ac:	d068      	beq.n	82380 <__sflush_r+0x108>
   822ae:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   822b0:	075f      	lsls	r7, r3, #29
   822b2:	d505      	bpl.n	822c0 <__sflush_r+0x48>
   822b4:	6869      	ldr	r1, [r5, #4]
   822b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   822b8:	1a52      	subs	r2, r2, r1
   822ba:	b10b      	cbz	r3, 822c0 <__sflush_r+0x48>
   822bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   822be:	1ad2      	subs	r2, r2, r3
   822c0:	2300      	movs	r3, #0
   822c2:	69e9      	ldr	r1, [r5, #28]
   822c4:	4640      	mov	r0, r8
   822c6:	47a0      	blx	r4
   822c8:	1c44      	adds	r4, r0, #1
   822ca:	d03d      	beq.n	82348 <__sflush_r+0xd0>
   822cc:	2100      	movs	r1, #0
   822ce:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   822d2:	692a      	ldr	r2, [r5, #16]
   822d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   822d8:	81ab      	strh	r3, [r5, #12]
   822da:	04db      	lsls	r3, r3, #19
   822dc:	6069      	str	r1, [r5, #4]
   822de:	602a      	str	r2, [r5, #0]
   822e0:	d448      	bmi.n	82374 <__sflush_r+0xfc>
   822e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   822e4:	f8c8 6000 	str.w	r6, [r8]
   822e8:	b319      	cbz	r1, 82332 <__sflush_r+0xba>
   822ea:	f105 0340 	add.w	r3, r5, #64	; 0x40
   822ee:	4299      	cmp	r1, r3
   822f0:	d002      	beq.n	822f8 <__sflush_r+0x80>
   822f2:	4640      	mov	r0, r8
   822f4:	f000 f9da 	bl	826ac <_free_r>
   822f8:	2000      	movs	r0, #0
   822fa:	6328      	str	r0, [r5, #48]	; 0x30
   822fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82300:	692e      	ldr	r6, [r5, #16]
   82302:	b1b6      	cbz	r6, 82332 <__sflush_r+0xba>
   82304:	0791      	lsls	r1, r2, #30
   82306:	bf18      	it	ne
   82308:	2300      	movne	r3, #0
   8230a:	682c      	ldr	r4, [r5, #0]
   8230c:	bf08      	it	eq
   8230e:	696b      	ldreq	r3, [r5, #20]
   82310:	602e      	str	r6, [r5, #0]
   82312:	1ba4      	subs	r4, r4, r6
   82314:	60ab      	str	r3, [r5, #8]
   82316:	e00a      	b.n	8232e <__sflush_r+0xb6>
   82318:	4623      	mov	r3, r4
   8231a:	4632      	mov	r2, r6
   8231c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8231e:	69e9      	ldr	r1, [r5, #28]
   82320:	4640      	mov	r0, r8
   82322:	47b8      	blx	r7
   82324:	2800      	cmp	r0, #0
   82326:	eba4 0400 	sub.w	r4, r4, r0
   8232a:	4406      	add	r6, r0
   8232c:	dd04      	ble.n	82338 <__sflush_r+0xc0>
   8232e:	2c00      	cmp	r4, #0
   82330:	dcf2      	bgt.n	82318 <__sflush_r+0xa0>
   82332:	2000      	movs	r0, #0
   82334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82338:	89ab      	ldrh	r3, [r5, #12]
   8233a:	f04f 30ff 	mov.w	r0, #4294967295
   8233e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82342:	81ab      	strh	r3, [r5, #12]
   82344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82348:	f8d8 4000 	ldr.w	r4, [r8]
   8234c:	2c1d      	cmp	r4, #29
   8234e:	d8f3      	bhi.n	82338 <__sflush_r+0xc0>
   82350:	4b16      	ldr	r3, [pc, #88]	; (823ac <__sflush_r+0x134>)
   82352:	40e3      	lsrs	r3, r4
   82354:	43db      	mvns	r3, r3
   82356:	f013 0301 	ands.w	r3, r3, #1
   8235a:	d1ed      	bne.n	82338 <__sflush_r+0xc0>
   8235c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82360:	6929      	ldr	r1, [r5, #16]
   82362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82366:	81aa      	strh	r2, [r5, #12]
   82368:	04d2      	lsls	r2, r2, #19
   8236a:	606b      	str	r3, [r5, #4]
   8236c:	6029      	str	r1, [r5, #0]
   8236e:	d5b8      	bpl.n	822e2 <__sflush_r+0x6a>
   82370:	2c00      	cmp	r4, #0
   82372:	d1b6      	bne.n	822e2 <__sflush_r+0x6a>
   82374:	6528      	str	r0, [r5, #80]	; 0x50
   82376:	e7b4      	b.n	822e2 <__sflush_r+0x6a>
   82378:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8237a:	2a00      	cmp	r2, #0
   8237c:	dc8b      	bgt.n	82296 <__sflush_r+0x1e>
   8237e:	e7d8      	b.n	82332 <__sflush_r+0xba>
   82380:	2301      	movs	r3, #1
   82382:	69e9      	ldr	r1, [r5, #28]
   82384:	4640      	mov	r0, r8
   82386:	47a0      	blx	r4
   82388:	1c43      	adds	r3, r0, #1
   8238a:	4602      	mov	r2, r0
   8238c:	d002      	beq.n	82394 <__sflush_r+0x11c>
   8238e:	89ab      	ldrh	r3, [r5, #12]
   82390:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82392:	e78d      	b.n	822b0 <__sflush_r+0x38>
   82394:	f8d8 3000 	ldr.w	r3, [r8]
   82398:	2b00      	cmp	r3, #0
   8239a:	d0f8      	beq.n	8238e <__sflush_r+0x116>
   8239c:	2b1d      	cmp	r3, #29
   8239e:	d001      	beq.n	823a4 <__sflush_r+0x12c>
   823a0:	2b16      	cmp	r3, #22
   823a2:	d1c9      	bne.n	82338 <__sflush_r+0xc0>
   823a4:	f8c8 6000 	str.w	r6, [r8]
   823a8:	e7c3      	b.n	82332 <__sflush_r+0xba>
   823aa:	bf00      	nop
   823ac:	20400001 	.word	0x20400001

000823b0 <_fflush_r>:
   823b0:	b538      	push	{r3, r4, r5, lr}
   823b2:	460d      	mov	r5, r1
   823b4:	4604      	mov	r4, r0
   823b6:	b108      	cbz	r0, 823bc <_fflush_r+0xc>
   823b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   823ba:	b1bb      	cbz	r3, 823ec <_fflush_r+0x3c>
   823bc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   823c0:	b188      	cbz	r0, 823e6 <_fflush_r+0x36>
   823c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   823c4:	07db      	lsls	r3, r3, #31
   823c6:	d401      	bmi.n	823cc <_fflush_r+0x1c>
   823c8:	0581      	lsls	r1, r0, #22
   823ca:	d517      	bpl.n	823fc <_fflush_r+0x4c>
   823cc:	4620      	mov	r0, r4
   823ce:	4629      	mov	r1, r5
   823d0:	f7ff ff52 	bl	82278 <__sflush_r>
   823d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   823d6:	4604      	mov	r4, r0
   823d8:	07da      	lsls	r2, r3, #31
   823da:	d402      	bmi.n	823e2 <_fflush_r+0x32>
   823dc:	89ab      	ldrh	r3, [r5, #12]
   823de:	059b      	lsls	r3, r3, #22
   823e0:	d507      	bpl.n	823f2 <_fflush_r+0x42>
   823e2:	4620      	mov	r0, r4
   823e4:	bd38      	pop	{r3, r4, r5, pc}
   823e6:	4604      	mov	r4, r0
   823e8:	4620      	mov	r0, r4
   823ea:	bd38      	pop	{r3, r4, r5, pc}
   823ec:	f000 f838 	bl	82460 <__sinit>
   823f0:	e7e4      	b.n	823bc <_fflush_r+0xc>
   823f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   823f4:	f000 fbf6 	bl	82be4 <__retarget_lock_release_recursive>
   823f8:	4620      	mov	r0, r4
   823fa:	bd38      	pop	{r3, r4, r5, pc}
   823fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   823fe:	f000 fbef 	bl	82be0 <__retarget_lock_acquire_recursive>
   82402:	e7e3      	b.n	823cc <_fflush_r+0x1c>

00082404 <_cleanup_r>:
   82404:	4901      	ldr	r1, [pc, #4]	; (8240c <_cleanup_r+0x8>)
   82406:	f000 bbb1 	b.w	82b6c <_fwalk_reent>
   8240a:	bf00      	nop
   8240c:	00083af9 	.word	0x00083af9

00082410 <std.isra.0>:
   82410:	2300      	movs	r3, #0
   82412:	b510      	push	{r4, lr}
   82414:	4604      	mov	r4, r0
   82416:	8181      	strh	r1, [r0, #12]
   82418:	81c2      	strh	r2, [r0, #14]
   8241a:	6003      	str	r3, [r0, #0]
   8241c:	6043      	str	r3, [r0, #4]
   8241e:	6083      	str	r3, [r0, #8]
   82420:	6643      	str	r3, [r0, #100]	; 0x64
   82422:	6103      	str	r3, [r0, #16]
   82424:	6143      	str	r3, [r0, #20]
   82426:	6183      	str	r3, [r0, #24]
   82428:	4619      	mov	r1, r3
   8242a:	2208      	movs	r2, #8
   8242c:	305c      	adds	r0, #92	; 0x5c
   8242e:	f7fe fe9b 	bl	81168 <memset>
   82432:	4807      	ldr	r0, [pc, #28]	; (82450 <std.isra.0+0x40>)
   82434:	4907      	ldr	r1, [pc, #28]	; (82454 <std.isra.0+0x44>)
   82436:	4a08      	ldr	r2, [pc, #32]	; (82458 <std.isra.0+0x48>)
   82438:	4b08      	ldr	r3, [pc, #32]	; (8245c <std.isra.0+0x4c>)
   8243a:	6220      	str	r0, [r4, #32]
   8243c:	61e4      	str	r4, [r4, #28]
   8243e:	6261      	str	r1, [r4, #36]	; 0x24
   82440:	62a2      	str	r2, [r4, #40]	; 0x28
   82442:	62e3      	str	r3, [r4, #44]	; 0x2c
   82444:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8244c:	f000 bbc4 	b.w	82bd8 <__retarget_lock_init_recursive>
   82450:	00083841 	.word	0x00083841
   82454:	00083865 	.word	0x00083865
   82458:	000838a1 	.word	0x000838a1
   8245c:	000838c1 	.word	0x000838c1

00082460 <__sinit>:
   82460:	b510      	push	{r4, lr}
   82462:	4604      	mov	r4, r0
   82464:	4814      	ldr	r0, [pc, #80]	; (824b8 <__sinit+0x58>)
   82466:	f000 fbbb 	bl	82be0 <__retarget_lock_acquire_recursive>
   8246a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8246c:	b9fa      	cbnz	r2, 824ae <__sinit+0x4e>
   8246e:	2003      	movs	r0, #3
   82470:	4912      	ldr	r1, [pc, #72]	; (824bc <__sinit+0x5c>)
   82472:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   82476:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8247a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8247e:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82482:	63e1      	str	r1, [r4, #60]	; 0x3c
   82484:	6860      	ldr	r0, [r4, #4]
   82486:	2104      	movs	r1, #4
   82488:	f7ff ffc2 	bl	82410 <std.isra.0>
   8248c:	68a0      	ldr	r0, [r4, #8]
   8248e:	2201      	movs	r2, #1
   82490:	2109      	movs	r1, #9
   82492:	f7ff ffbd 	bl	82410 <std.isra.0>
   82496:	68e0      	ldr	r0, [r4, #12]
   82498:	2202      	movs	r2, #2
   8249a:	2112      	movs	r1, #18
   8249c:	f7ff ffb8 	bl	82410 <std.isra.0>
   824a0:	2301      	movs	r3, #1
   824a2:	4805      	ldr	r0, [pc, #20]	; (824b8 <__sinit+0x58>)
   824a4:	63a3      	str	r3, [r4, #56]	; 0x38
   824a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   824aa:	f000 bb9b 	b.w	82be4 <__retarget_lock_release_recursive>
   824ae:	4802      	ldr	r0, [pc, #8]	; (824b8 <__sinit+0x58>)
   824b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   824b4:	f000 bb96 	b.w	82be4 <__retarget_lock_release_recursive>
   824b8:	20073f54 	.word	0x20073f54
   824bc:	00082405 	.word	0x00082405

000824c0 <__sfp_lock_acquire>:
   824c0:	4801      	ldr	r0, [pc, #4]	; (824c8 <__sfp_lock_acquire+0x8>)
   824c2:	f000 bb8d 	b.w	82be0 <__retarget_lock_acquire_recursive>
   824c6:	bf00      	nop
   824c8:	20073f68 	.word	0x20073f68

000824cc <__sfp_lock_release>:
   824cc:	4801      	ldr	r0, [pc, #4]	; (824d4 <__sfp_lock_release+0x8>)
   824ce:	f000 bb89 	b.w	82be4 <__retarget_lock_release_recursive>
   824d2:	bf00      	nop
   824d4:	20073f68 	.word	0x20073f68

000824d8 <__libc_fini_array>:
   824d8:	b538      	push	{r3, r4, r5, lr}
   824da:	4c0a      	ldr	r4, [pc, #40]	; (82504 <__libc_fini_array+0x2c>)
   824dc:	4d0a      	ldr	r5, [pc, #40]	; (82508 <__libc_fini_array+0x30>)
   824de:	1b64      	subs	r4, r4, r5
   824e0:	10a4      	asrs	r4, r4, #2
   824e2:	d00a      	beq.n	824fa <__libc_fini_array+0x22>
   824e4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   824e8:	3b01      	subs	r3, #1
   824ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   824ee:	3c01      	subs	r4, #1
   824f0:	f855 3904 	ldr.w	r3, [r5], #-4
   824f4:	4798      	blx	r3
   824f6:	2c00      	cmp	r4, #0
   824f8:	d1f9      	bne.n	824ee <__libc_fini_array+0x16>
   824fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   824fe:	f001 be27 	b.w	84150 <_fini>
   82502:	bf00      	nop
   82504:	00084160 	.word	0x00084160
   82508:	0008415c 	.word	0x0008415c

0008250c <__fputwc>:
   8250c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82510:	b083      	sub	sp, #12
   82512:	4607      	mov	r7, r0
   82514:	4688      	mov	r8, r1
   82516:	4614      	mov	r4, r2
   82518:	f000 fb50 	bl	82bbc <__locale_mb_cur_max>
   8251c:	2801      	cmp	r0, #1
   8251e:	d033      	beq.n	82588 <__fputwc+0x7c>
   82520:	4642      	mov	r2, r8
   82522:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82526:	a901      	add	r1, sp, #4
   82528:	4638      	mov	r0, r7
   8252a:	f001 fa25 	bl	83978 <_wcrtomb_r>
   8252e:	1c42      	adds	r2, r0, #1
   82530:	4606      	mov	r6, r0
   82532:	d022      	beq.n	8257a <__fputwc+0x6e>
   82534:	b390      	cbz	r0, 8259c <__fputwc+0x90>
   82536:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8253a:	2500      	movs	r5, #0
   8253c:	f10d 0904 	add.w	r9, sp, #4
   82540:	e008      	b.n	82554 <__fputwc+0x48>
   82542:	6823      	ldr	r3, [r4, #0]
   82544:	1c5a      	adds	r2, r3, #1
   82546:	6022      	str	r2, [r4, #0]
   82548:	7019      	strb	r1, [r3, #0]
   8254a:	3501      	adds	r5, #1
   8254c:	42b5      	cmp	r5, r6
   8254e:	d225      	bcs.n	8259c <__fputwc+0x90>
   82550:	f815 1009 	ldrb.w	r1, [r5, r9]
   82554:	68a3      	ldr	r3, [r4, #8]
   82556:	3b01      	subs	r3, #1
   82558:	2b00      	cmp	r3, #0
   8255a:	60a3      	str	r3, [r4, #8]
   8255c:	daf1      	bge.n	82542 <__fputwc+0x36>
   8255e:	69a2      	ldr	r2, [r4, #24]
   82560:	4293      	cmp	r3, r2
   82562:	db01      	blt.n	82568 <__fputwc+0x5c>
   82564:	290a      	cmp	r1, #10
   82566:	d1ec      	bne.n	82542 <__fputwc+0x36>
   82568:	4622      	mov	r2, r4
   8256a:	4638      	mov	r0, r7
   8256c:	f001 f9ac 	bl	838c8 <__swbuf_r>
   82570:	1c43      	adds	r3, r0, #1
   82572:	d1ea      	bne.n	8254a <__fputwc+0x3e>
   82574:	b003      	add	sp, #12
   82576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8257a:	89a3      	ldrh	r3, [r4, #12]
   8257c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82580:	81a3      	strh	r3, [r4, #12]
   82582:	b003      	add	sp, #12
   82584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82588:	f108 33ff 	add.w	r3, r8, #4294967295
   8258c:	2bfe      	cmp	r3, #254	; 0xfe
   8258e:	d8c7      	bhi.n	82520 <__fputwc+0x14>
   82590:	fa5f f188 	uxtb.w	r1, r8
   82594:	4606      	mov	r6, r0
   82596:	f88d 1004 	strb.w	r1, [sp, #4]
   8259a:	e7ce      	b.n	8253a <__fputwc+0x2e>
   8259c:	4640      	mov	r0, r8
   8259e:	b003      	add	sp, #12
   825a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000825a4 <_fputwc_r>:
   825a4:	b530      	push	{r4, r5, lr}
   825a6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   825a8:	4614      	mov	r4, r2
   825aa:	f013 0f01 	tst.w	r3, #1
   825ae:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   825b2:	b083      	sub	sp, #12
   825b4:	4605      	mov	r5, r0
   825b6:	b29a      	uxth	r2, r3
   825b8:	d101      	bne.n	825be <_fputwc_r+0x1a>
   825ba:	0590      	lsls	r0, r2, #22
   825bc:	d51c      	bpl.n	825f8 <_fputwc_r+0x54>
   825be:	0490      	lsls	r0, r2, #18
   825c0:	d406      	bmi.n	825d0 <_fputwc_r+0x2c>
   825c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   825c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   825c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   825cc:	81a3      	strh	r3, [r4, #12]
   825ce:	6662      	str	r2, [r4, #100]	; 0x64
   825d0:	4628      	mov	r0, r5
   825d2:	4622      	mov	r2, r4
   825d4:	f7ff ff9a 	bl	8250c <__fputwc>
   825d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   825da:	4605      	mov	r5, r0
   825dc:	07da      	lsls	r2, r3, #31
   825de:	d402      	bmi.n	825e6 <_fputwc_r+0x42>
   825e0:	89a3      	ldrh	r3, [r4, #12]
   825e2:	059b      	lsls	r3, r3, #22
   825e4:	d502      	bpl.n	825ec <_fputwc_r+0x48>
   825e6:	4628      	mov	r0, r5
   825e8:	b003      	add	sp, #12
   825ea:	bd30      	pop	{r4, r5, pc}
   825ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   825ee:	f000 faf9 	bl	82be4 <__retarget_lock_release_recursive>
   825f2:	4628      	mov	r0, r5
   825f4:	b003      	add	sp, #12
   825f6:	bd30      	pop	{r4, r5, pc}
   825f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   825fa:	9101      	str	r1, [sp, #4]
   825fc:	f000 faf0 	bl	82be0 <__retarget_lock_acquire_recursive>
   82600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82604:	9901      	ldr	r1, [sp, #4]
   82606:	b29a      	uxth	r2, r3
   82608:	e7d9      	b.n	825be <_fputwc_r+0x1a>
   8260a:	bf00      	nop

0008260c <_malloc_trim_r>:
   8260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8260e:	460c      	mov	r4, r1
   82610:	4f23      	ldr	r7, [pc, #140]	; (826a0 <_malloc_trim_r+0x94>)
   82612:	4606      	mov	r6, r0
   82614:	f000 ff40 	bl	83498 <__malloc_lock>
   82618:	68bb      	ldr	r3, [r7, #8]
   8261a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8261e:	685d      	ldr	r5, [r3, #4]
   82620:	310f      	adds	r1, #15
   82622:	f025 0503 	bic.w	r5, r5, #3
   82626:	4429      	add	r1, r5
   82628:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8262c:	f021 010f 	bic.w	r1, r1, #15
   82630:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82634:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82638:	db07      	blt.n	8264a <_malloc_trim_r+0x3e>
   8263a:	2100      	movs	r1, #0
   8263c:	4630      	mov	r0, r6
   8263e:	f001 f8ed 	bl	8381c <_sbrk_r>
   82642:	68bb      	ldr	r3, [r7, #8]
   82644:	442b      	add	r3, r5
   82646:	4298      	cmp	r0, r3
   82648:	d004      	beq.n	82654 <_malloc_trim_r+0x48>
   8264a:	4630      	mov	r0, r6
   8264c:	f000 ff2a 	bl	834a4 <__malloc_unlock>
   82650:	2000      	movs	r0, #0
   82652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82654:	4261      	negs	r1, r4
   82656:	4630      	mov	r0, r6
   82658:	f001 f8e0 	bl	8381c <_sbrk_r>
   8265c:	3001      	adds	r0, #1
   8265e:	d00d      	beq.n	8267c <_malloc_trim_r+0x70>
   82660:	4b10      	ldr	r3, [pc, #64]	; (826a4 <_malloc_trim_r+0x98>)
   82662:	68ba      	ldr	r2, [r7, #8]
   82664:	6819      	ldr	r1, [r3, #0]
   82666:	1b2d      	subs	r5, r5, r4
   82668:	f045 0501 	orr.w	r5, r5, #1
   8266c:	4630      	mov	r0, r6
   8266e:	1b09      	subs	r1, r1, r4
   82670:	6055      	str	r5, [r2, #4]
   82672:	6019      	str	r1, [r3, #0]
   82674:	f000 ff16 	bl	834a4 <__malloc_unlock>
   82678:	2001      	movs	r0, #1
   8267a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8267c:	2100      	movs	r1, #0
   8267e:	4630      	mov	r0, r6
   82680:	f001 f8cc 	bl	8381c <_sbrk_r>
   82684:	68ba      	ldr	r2, [r7, #8]
   82686:	1a83      	subs	r3, r0, r2
   82688:	2b0f      	cmp	r3, #15
   8268a:	ddde      	ble.n	8264a <_malloc_trim_r+0x3e>
   8268c:	4c06      	ldr	r4, [pc, #24]	; (826a8 <_malloc_trim_r+0x9c>)
   8268e:	4905      	ldr	r1, [pc, #20]	; (826a4 <_malloc_trim_r+0x98>)
   82690:	6824      	ldr	r4, [r4, #0]
   82692:	f043 0301 	orr.w	r3, r3, #1
   82696:	1b00      	subs	r0, r0, r4
   82698:	6053      	str	r3, [r2, #4]
   8269a:	6008      	str	r0, [r1, #0]
   8269c:	e7d5      	b.n	8264a <_malloc_trim_r+0x3e>
   8269e:	bf00      	nop
   826a0:	200706d0 	.word	0x200706d0
   826a4:	20070c10 	.word	0x20070c10
   826a8:	20070ad8 	.word	0x20070ad8

000826ac <_free_r>:
   826ac:	2900      	cmp	r1, #0
   826ae:	d044      	beq.n	8273a <_free_r+0x8e>
   826b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   826b4:	460d      	mov	r5, r1
   826b6:	4680      	mov	r8, r0
   826b8:	f000 feee 	bl	83498 <__malloc_lock>
   826bc:	f855 7c04 	ldr.w	r7, [r5, #-4]
   826c0:	4969      	ldr	r1, [pc, #420]	; (82868 <_free_r+0x1bc>)
   826c2:	f1a5 0408 	sub.w	r4, r5, #8
   826c6:	f027 0301 	bic.w	r3, r7, #1
   826ca:	18e2      	adds	r2, r4, r3
   826cc:	688e      	ldr	r6, [r1, #8]
   826ce:	6850      	ldr	r0, [r2, #4]
   826d0:	42b2      	cmp	r2, r6
   826d2:	f020 0003 	bic.w	r0, r0, #3
   826d6:	d05e      	beq.n	82796 <_free_r+0xea>
   826d8:	07fe      	lsls	r6, r7, #31
   826da:	6050      	str	r0, [r2, #4]
   826dc:	d40b      	bmi.n	826f6 <_free_r+0x4a>
   826de:	f855 7c08 	ldr.w	r7, [r5, #-8]
   826e2:	f101 0e08 	add.w	lr, r1, #8
   826e6:	1be4      	subs	r4, r4, r7
   826e8:	68a5      	ldr	r5, [r4, #8]
   826ea:	443b      	add	r3, r7
   826ec:	4575      	cmp	r5, lr
   826ee:	d06d      	beq.n	827cc <_free_r+0x120>
   826f0:	68e7      	ldr	r7, [r4, #12]
   826f2:	60ef      	str	r7, [r5, #12]
   826f4:	60bd      	str	r5, [r7, #8]
   826f6:	1815      	adds	r5, r2, r0
   826f8:	686d      	ldr	r5, [r5, #4]
   826fa:	07ed      	lsls	r5, r5, #31
   826fc:	d53e      	bpl.n	8277c <_free_r+0xd0>
   826fe:	f043 0201 	orr.w	r2, r3, #1
   82702:	6062      	str	r2, [r4, #4]
   82704:	50e3      	str	r3, [r4, r3]
   82706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8270a:	d217      	bcs.n	8273c <_free_r+0x90>
   8270c:	2201      	movs	r2, #1
   8270e:	08db      	lsrs	r3, r3, #3
   82710:	1098      	asrs	r0, r3, #2
   82712:	684d      	ldr	r5, [r1, #4]
   82714:	4413      	add	r3, r2
   82716:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8271a:	4082      	lsls	r2, r0
   8271c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82720:	432a      	orrs	r2, r5
   82722:	3808      	subs	r0, #8
   82724:	60e0      	str	r0, [r4, #12]
   82726:	60a7      	str	r7, [r4, #8]
   82728:	604a      	str	r2, [r1, #4]
   8272a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8272e:	60fc      	str	r4, [r7, #12]
   82730:	4640      	mov	r0, r8
   82732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82736:	f000 beb5 	b.w	834a4 <__malloc_unlock>
   8273a:	4770      	bx	lr
   8273c:	0a5a      	lsrs	r2, r3, #9
   8273e:	2a04      	cmp	r2, #4
   82740:	d852      	bhi.n	827e8 <_free_r+0x13c>
   82742:	099a      	lsrs	r2, r3, #6
   82744:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82748:	00ff      	lsls	r7, r7, #3
   8274a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8274e:	19c8      	adds	r0, r1, r7
   82750:	59ca      	ldr	r2, [r1, r7]
   82752:	3808      	subs	r0, #8
   82754:	4290      	cmp	r0, r2
   82756:	d04f      	beq.n	827f8 <_free_r+0x14c>
   82758:	6851      	ldr	r1, [r2, #4]
   8275a:	f021 0103 	bic.w	r1, r1, #3
   8275e:	428b      	cmp	r3, r1
   82760:	d232      	bcs.n	827c8 <_free_r+0x11c>
   82762:	6892      	ldr	r2, [r2, #8]
   82764:	4290      	cmp	r0, r2
   82766:	d1f7      	bne.n	82758 <_free_r+0xac>
   82768:	68c3      	ldr	r3, [r0, #12]
   8276a:	60a0      	str	r0, [r4, #8]
   8276c:	60e3      	str	r3, [r4, #12]
   8276e:	609c      	str	r4, [r3, #8]
   82770:	60c4      	str	r4, [r0, #12]
   82772:	4640      	mov	r0, r8
   82774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82778:	f000 be94 	b.w	834a4 <__malloc_unlock>
   8277c:	6895      	ldr	r5, [r2, #8]
   8277e:	4f3b      	ldr	r7, [pc, #236]	; (8286c <_free_r+0x1c0>)
   82780:	4403      	add	r3, r0
   82782:	42bd      	cmp	r5, r7
   82784:	d040      	beq.n	82808 <_free_r+0x15c>
   82786:	68d0      	ldr	r0, [r2, #12]
   82788:	f043 0201 	orr.w	r2, r3, #1
   8278c:	60e8      	str	r0, [r5, #12]
   8278e:	6085      	str	r5, [r0, #8]
   82790:	6062      	str	r2, [r4, #4]
   82792:	50e3      	str	r3, [r4, r3]
   82794:	e7b7      	b.n	82706 <_free_r+0x5a>
   82796:	07ff      	lsls	r7, r7, #31
   82798:	4403      	add	r3, r0
   8279a:	d407      	bmi.n	827ac <_free_r+0x100>
   8279c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   827a0:	1b64      	subs	r4, r4, r5
   827a2:	68e2      	ldr	r2, [r4, #12]
   827a4:	68a0      	ldr	r0, [r4, #8]
   827a6:	442b      	add	r3, r5
   827a8:	60c2      	str	r2, [r0, #12]
   827aa:	6090      	str	r0, [r2, #8]
   827ac:	4a30      	ldr	r2, [pc, #192]	; (82870 <_free_r+0x1c4>)
   827ae:	f043 0001 	orr.w	r0, r3, #1
   827b2:	6812      	ldr	r2, [r2, #0]
   827b4:	6060      	str	r0, [r4, #4]
   827b6:	4293      	cmp	r3, r2
   827b8:	608c      	str	r4, [r1, #8]
   827ba:	d3b9      	bcc.n	82730 <_free_r+0x84>
   827bc:	4b2d      	ldr	r3, [pc, #180]	; (82874 <_free_r+0x1c8>)
   827be:	4640      	mov	r0, r8
   827c0:	6819      	ldr	r1, [r3, #0]
   827c2:	f7ff ff23 	bl	8260c <_malloc_trim_r>
   827c6:	e7b3      	b.n	82730 <_free_r+0x84>
   827c8:	4610      	mov	r0, r2
   827ca:	e7cd      	b.n	82768 <_free_r+0xbc>
   827cc:	1811      	adds	r1, r2, r0
   827ce:	6849      	ldr	r1, [r1, #4]
   827d0:	07c9      	lsls	r1, r1, #31
   827d2:	d444      	bmi.n	8285e <_free_r+0x1b2>
   827d4:	6891      	ldr	r1, [r2, #8]
   827d6:	4403      	add	r3, r0
   827d8:	68d2      	ldr	r2, [r2, #12]
   827da:	f043 0001 	orr.w	r0, r3, #1
   827de:	60ca      	str	r2, [r1, #12]
   827e0:	6091      	str	r1, [r2, #8]
   827e2:	6060      	str	r0, [r4, #4]
   827e4:	50e3      	str	r3, [r4, r3]
   827e6:	e7a3      	b.n	82730 <_free_r+0x84>
   827e8:	2a14      	cmp	r2, #20
   827ea:	d816      	bhi.n	8281a <_free_r+0x16e>
   827ec:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   827f0:	00ff      	lsls	r7, r7, #3
   827f2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   827f6:	e7aa      	b.n	8274e <_free_r+0xa2>
   827f8:	2301      	movs	r3, #1
   827fa:	10aa      	asrs	r2, r5, #2
   827fc:	684d      	ldr	r5, [r1, #4]
   827fe:	4093      	lsls	r3, r2
   82800:	432b      	orrs	r3, r5
   82802:	604b      	str	r3, [r1, #4]
   82804:	4603      	mov	r3, r0
   82806:	e7b0      	b.n	8276a <_free_r+0xbe>
   82808:	f043 0201 	orr.w	r2, r3, #1
   8280c:	614c      	str	r4, [r1, #20]
   8280e:	610c      	str	r4, [r1, #16]
   82810:	60e5      	str	r5, [r4, #12]
   82812:	60a5      	str	r5, [r4, #8]
   82814:	6062      	str	r2, [r4, #4]
   82816:	50e3      	str	r3, [r4, r3]
   82818:	e78a      	b.n	82730 <_free_r+0x84>
   8281a:	2a54      	cmp	r2, #84	; 0x54
   8281c:	d806      	bhi.n	8282c <_free_r+0x180>
   8281e:	0b1a      	lsrs	r2, r3, #12
   82820:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82824:	00ff      	lsls	r7, r7, #3
   82826:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8282a:	e790      	b.n	8274e <_free_r+0xa2>
   8282c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82830:	d806      	bhi.n	82840 <_free_r+0x194>
   82832:	0bda      	lsrs	r2, r3, #15
   82834:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82838:	00ff      	lsls	r7, r7, #3
   8283a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8283e:	e786      	b.n	8274e <_free_r+0xa2>
   82840:	f240 5054 	movw	r0, #1364	; 0x554
   82844:	4282      	cmp	r2, r0
   82846:	d806      	bhi.n	82856 <_free_r+0x1aa>
   82848:	0c9a      	lsrs	r2, r3, #18
   8284a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8284e:	00ff      	lsls	r7, r7, #3
   82850:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82854:	e77b      	b.n	8274e <_free_r+0xa2>
   82856:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8285a:	257e      	movs	r5, #126	; 0x7e
   8285c:	e777      	b.n	8274e <_free_r+0xa2>
   8285e:	f043 0101 	orr.w	r1, r3, #1
   82862:	6061      	str	r1, [r4, #4]
   82864:	6013      	str	r3, [r2, #0]
   82866:	e763      	b.n	82730 <_free_r+0x84>
   82868:	200706d0 	.word	0x200706d0
   8286c:	200706d8 	.word	0x200706d8
   82870:	20070adc 	.word	0x20070adc
   82874:	20070c40 	.word	0x20070c40

00082878 <__sfvwrite_r>:
   82878:	6893      	ldr	r3, [r2, #8]
   8287a:	2b00      	cmp	r3, #0
   8287c:	d071      	beq.n	82962 <__sfvwrite_r+0xea>
   8287e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82882:	898b      	ldrh	r3, [r1, #12]
   82884:	b083      	sub	sp, #12
   82886:	460c      	mov	r4, r1
   82888:	0719      	lsls	r1, r3, #28
   8288a:	9000      	str	r0, [sp, #0]
   8288c:	4616      	mov	r6, r2
   8288e:	d525      	bpl.n	828dc <__sfvwrite_r+0x64>
   82890:	6922      	ldr	r2, [r4, #16]
   82892:	b31a      	cbz	r2, 828dc <__sfvwrite_r+0x64>
   82894:	f013 0002 	ands.w	r0, r3, #2
   82898:	6835      	ldr	r5, [r6, #0]
   8289a:	d02b      	beq.n	828f4 <__sfvwrite_r+0x7c>
   8289c:	f04f 0900 	mov.w	r9, #0
   828a0:	46b0      	mov	r8, r6
   828a2:	464f      	mov	r7, r9
   828a4:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82b68 <__sfvwrite_r+0x2f0>
   828a8:	2f00      	cmp	r7, #0
   828aa:	d055      	beq.n	82958 <__sfvwrite_r+0xe0>
   828ac:	4557      	cmp	r7, sl
   828ae:	463b      	mov	r3, r7
   828b0:	464a      	mov	r2, r9
   828b2:	bf28      	it	cs
   828b4:	4653      	movcs	r3, sl
   828b6:	69e1      	ldr	r1, [r4, #28]
   828b8:	9800      	ldr	r0, [sp, #0]
   828ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
   828bc:	47b0      	blx	r6
   828be:	2800      	cmp	r0, #0
   828c0:	dd56      	ble.n	82970 <__sfvwrite_r+0xf8>
   828c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   828c6:	4481      	add	r9, r0
   828c8:	1a1b      	subs	r3, r3, r0
   828ca:	1a3f      	subs	r7, r7, r0
   828cc:	f8c8 3008 	str.w	r3, [r8, #8]
   828d0:	2b00      	cmp	r3, #0
   828d2:	d1e9      	bne.n	828a8 <__sfvwrite_r+0x30>
   828d4:	2000      	movs	r0, #0
   828d6:	b003      	add	sp, #12
   828d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828dc:	4621      	mov	r1, r4
   828de:	9800      	ldr	r0, [sp, #0]
   828e0:	f7ff fc56 	bl	82190 <__swsetup_r>
   828e4:	2800      	cmp	r0, #0
   828e6:	f040 8135 	bne.w	82b54 <__sfvwrite_r+0x2dc>
   828ea:	89a3      	ldrh	r3, [r4, #12]
   828ec:	6835      	ldr	r5, [r6, #0]
   828ee:	f013 0002 	ands.w	r0, r3, #2
   828f2:	d1d3      	bne.n	8289c <__sfvwrite_r+0x24>
   828f4:	f013 0901 	ands.w	r9, r3, #1
   828f8:	d144      	bne.n	82984 <__sfvwrite_r+0x10c>
   828fa:	464f      	mov	r7, r9
   828fc:	9601      	str	r6, [sp, #4]
   828fe:	b337      	cbz	r7, 8294e <__sfvwrite_r+0xd6>
   82900:	059a      	lsls	r2, r3, #22
   82902:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82906:	f140 8085 	bpl.w	82a14 <__sfvwrite_r+0x19c>
   8290a:	4547      	cmp	r7, r8
   8290c:	46c3      	mov	fp, r8
   8290e:	f0c0 80ad 	bcc.w	82a6c <__sfvwrite_r+0x1f4>
   82912:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82916:	f040 80ae 	bne.w	82a76 <__sfvwrite_r+0x1fe>
   8291a:	46ba      	mov	sl, r7
   8291c:	6820      	ldr	r0, [r4, #0]
   8291e:	465a      	mov	r2, fp
   82920:	4649      	mov	r1, r9
   82922:	f000 fd55 	bl	833d0 <memmove>
   82926:	68a2      	ldr	r2, [r4, #8]
   82928:	6823      	ldr	r3, [r4, #0]
   8292a:	eba2 0208 	sub.w	r2, r2, r8
   8292e:	445b      	add	r3, fp
   82930:	60a2      	str	r2, [r4, #8]
   82932:	6023      	str	r3, [r4, #0]
   82934:	9a01      	ldr	r2, [sp, #4]
   82936:	44d1      	add	r9, sl
   82938:	6893      	ldr	r3, [r2, #8]
   8293a:	eba7 070a 	sub.w	r7, r7, sl
   8293e:	eba3 030a 	sub.w	r3, r3, sl
   82942:	6093      	str	r3, [r2, #8]
   82944:	2b00      	cmp	r3, #0
   82946:	d0c5      	beq.n	828d4 <__sfvwrite_r+0x5c>
   82948:	89a3      	ldrh	r3, [r4, #12]
   8294a:	2f00      	cmp	r7, #0
   8294c:	d1d8      	bne.n	82900 <__sfvwrite_r+0x88>
   8294e:	f8d5 9000 	ldr.w	r9, [r5]
   82952:	686f      	ldr	r7, [r5, #4]
   82954:	3508      	adds	r5, #8
   82956:	e7d2      	b.n	828fe <__sfvwrite_r+0x86>
   82958:	f8d5 9000 	ldr.w	r9, [r5]
   8295c:	686f      	ldr	r7, [r5, #4]
   8295e:	3508      	adds	r5, #8
   82960:	e7a2      	b.n	828a8 <__sfvwrite_r+0x30>
   82962:	2000      	movs	r0, #0
   82964:	4770      	bx	lr
   82966:	4621      	mov	r1, r4
   82968:	9800      	ldr	r0, [sp, #0]
   8296a:	f7ff fd21 	bl	823b0 <_fflush_r>
   8296e:	b378      	cbz	r0, 829d0 <__sfvwrite_r+0x158>
   82970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82974:	f04f 30ff 	mov.w	r0, #4294967295
   82978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8297c:	81a3      	strh	r3, [r4, #12]
   8297e:	b003      	add	sp, #12
   82980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82984:	4681      	mov	r9, r0
   82986:	4633      	mov	r3, r6
   82988:	464e      	mov	r6, r9
   8298a:	46a8      	mov	r8, r5
   8298c:	469a      	mov	sl, r3
   8298e:	464d      	mov	r5, r9
   82990:	b356      	cbz	r6, 829e8 <__sfvwrite_r+0x170>
   82992:	2800      	cmp	r0, #0
   82994:	d032      	beq.n	829fc <__sfvwrite_r+0x184>
   82996:	45b1      	cmp	r9, r6
   82998:	46cb      	mov	fp, r9
   8299a:	bf28      	it	cs
   8299c:	46b3      	movcs	fp, r6
   8299e:	6820      	ldr	r0, [r4, #0]
   829a0:	6923      	ldr	r3, [r4, #16]
   829a2:	465f      	mov	r7, fp
   829a4:	4298      	cmp	r0, r3
   829a6:	6962      	ldr	r2, [r4, #20]
   829a8:	d904      	bls.n	829b4 <__sfvwrite_r+0x13c>
   829aa:	68a3      	ldr	r3, [r4, #8]
   829ac:	4413      	add	r3, r2
   829ae:	459b      	cmp	fp, r3
   829b0:	f300 80a8 	bgt.w	82b04 <__sfvwrite_r+0x28c>
   829b4:	4593      	cmp	fp, r2
   829b6:	db4d      	blt.n	82a54 <__sfvwrite_r+0x1dc>
   829b8:	4613      	mov	r3, r2
   829ba:	6a67      	ldr	r7, [r4, #36]	; 0x24
   829bc:	462a      	mov	r2, r5
   829be:	69e1      	ldr	r1, [r4, #28]
   829c0:	9800      	ldr	r0, [sp, #0]
   829c2:	47b8      	blx	r7
   829c4:	1e07      	subs	r7, r0, #0
   829c6:	ddd3      	ble.n	82970 <__sfvwrite_r+0xf8>
   829c8:	ebb9 0907 	subs.w	r9, r9, r7
   829cc:	d0cb      	beq.n	82966 <__sfvwrite_r+0xee>
   829ce:	2001      	movs	r0, #1
   829d0:	f8da 3008 	ldr.w	r3, [sl, #8]
   829d4:	443d      	add	r5, r7
   829d6:	1bdb      	subs	r3, r3, r7
   829d8:	1bf6      	subs	r6, r6, r7
   829da:	f8ca 3008 	str.w	r3, [sl, #8]
   829de:	2b00      	cmp	r3, #0
   829e0:	f43f af78 	beq.w	828d4 <__sfvwrite_r+0x5c>
   829e4:	2e00      	cmp	r6, #0
   829e6:	d1d4      	bne.n	82992 <__sfvwrite_r+0x11a>
   829e8:	f108 0308 	add.w	r3, r8, #8
   829ec:	f853 6c04 	ldr.w	r6, [r3, #-4]
   829f0:	4698      	mov	r8, r3
   829f2:	f853 5c08 	ldr.w	r5, [r3, #-8]
   829f6:	3308      	adds	r3, #8
   829f8:	2e00      	cmp	r6, #0
   829fa:	d0f7      	beq.n	829ec <__sfvwrite_r+0x174>
   829fc:	4632      	mov	r2, r6
   829fe:	210a      	movs	r1, #10
   82a00:	4628      	mov	r0, r5
   82a02:	f000 fc29 	bl	83258 <memchr>
   82a06:	2800      	cmp	r0, #0
   82a08:	f000 80a1 	beq.w	82b4e <__sfvwrite_r+0x2d6>
   82a0c:	3001      	adds	r0, #1
   82a0e:	eba0 0905 	sub.w	r9, r0, r5
   82a12:	e7c0      	b.n	82996 <__sfvwrite_r+0x11e>
   82a14:	6820      	ldr	r0, [r4, #0]
   82a16:	6923      	ldr	r3, [r4, #16]
   82a18:	4298      	cmp	r0, r3
   82a1a:	d802      	bhi.n	82a22 <__sfvwrite_r+0x1aa>
   82a1c:	6963      	ldr	r3, [r4, #20]
   82a1e:	429f      	cmp	r7, r3
   82a20:	d25d      	bcs.n	82ade <__sfvwrite_r+0x266>
   82a22:	45b8      	cmp	r8, r7
   82a24:	bf28      	it	cs
   82a26:	46b8      	movcs	r8, r7
   82a28:	4649      	mov	r1, r9
   82a2a:	4642      	mov	r2, r8
   82a2c:	f000 fcd0 	bl	833d0 <memmove>
   82a30:	68a3      	ldr	r3, [r4, #8]
   82a32:	6822      	ldr	r2, [r4, #0]
   82a34:	eba3 0308 	sub.w	r3, r3, r8
   82a38:	4442      	add	r2, r8
   82a3a:	60a3      	str	r3, [r4, #8]
   82a3c:	6022      	str	r2, [r4, #0]
   82a3e:	b10b      	cbz	r3, 82a44 <__sfvwrite_r+0x1cc>
   82a40:	46c2      	mov	sl, r8
   82a42:	e777      	b.n	82934 <__sfvwrite_r+0xbc>
   82a44:	4621      	mov	r1, r4
   82a46:	9800      	ldr	r0, [sp, #0]
   82a48:	f7ff fcb2 	bl	823b0 <_fflush_r>
   82a4c:	2800      	cmp	r0, #0
   82a4e:	d18f      	bne.n	82970 <__sfvwrite_r+0xf8>
   82a50:	46c2      	mov	sl, r8
   82a52:	e76f      	b.n	82934 <__sfvwrite_r+0xbc>
   82a54:	465a      	mov	r2, fp
   82a56:	4629      	mov	r1, r5
   82a58:	f000 fcba 	bl	833d0 <memmove>
   82a5c:	68a2      	ldr	r2, [r4, #8]
   82a5e:	6823      	ldr	r3, [r4, #0]
   82a60:	eba2 020b 	sub.w	r2, r2, fp
   82a64:	445b      	add	r3, fp
   82a66:	60a2      	str	r2, [r4, #8]
   82a68:	6023      	str	r3, [r4, #0]
   82a6a:	e7ad      	b.n	829c8 <__sfvwrite_r+0x150>
   82a6c:	46b8      	mov	r8, r7
   82a6e:	46ba      	mov	sl, r7
   82a70:	46bb      	mov	fp, r7
   82a72:	6820      	ldr	r0, [r4, #0]
   82a74:	e753      	b.n	8291e <__sfvwrite_r+0xa6>
   82a76:	6962      	ldr	r2, [r4, #20]
   82a78:	6820      	ldr	r0, [r4, #0]
   82a7a:	6921      	ldr	r1, [r4, #16]
   82a7c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82a80:	eba0 0a01 	sub.w	sl, r0, r1
   82a84:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82a88:	f10a 0001 	add.w	r0, sl, #1
   82a8c:	ea4f 0868 	mov.w	r8, r8, asr #1
   82a90:	4438      	add	r0, r7
   82a92:	4540      	cmp	r0, r8
   82a94:	4642      	mov	r2, r8
   82a96:	bf84      	itt	hi
   82a98:	4680      	movhi	r8, r0
   82a9a:	4642      	movhi	r2, r8
   82a9c:	055b      	lsls	r3, r3, #21
   82a9e:	d544      	bpl.n	82b2a <__sfvwrite_r+0x2b2>
   82aa0:	4611      	mov	r1, r2
   82aa2:	9800      	ldr	r0, [sp, #0]
   82aa4:	f000 f920 	bl	82ce8 <_malloc_r>
   82aa8:	4683      	mov	fp, r0
   82aaa:	2800      	cmp	r0, #0
   82aac:	d055      	beq.n	82b5a <__sfvwrite_r+0x2e2>
   82aae:	4652      	mov	r2, sl
   82ab0:	6921      	ldr	r1, [r4, #16]
   82ab2:	f000 fc17 	bl	832e4 <memcpy>
   82ab6:	89a3      	ldrh	r3, [r4, #12]
   82ab8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82ac0:	81a3      	strh	r3, [r4, #12]
   82ac2:	eb0b 000a 	add.w	r0, fp, sl
   82ac6:	eba8 030a 	sub.w	r3, r8, sl
   82aca:	f8c4 b010 	str.w	fp, [r4, #16]
   82ace:	f8c4 8014 	str.w	r8, [r4, #20]
   82ad2:	6020      	str	r0, [r4, #0]
   82ad4:	60a3      	str	r3, [r4, #8]
   82ad6:	46b8      	mov	r8, r7
   82ad8:	46ba      	mov	sl, r7
   82ada:	46bb      	mov	fp, r7
   82adc:	e71f      	b.n	8291e <__sfvwrite_r+0xa6>
   82ade:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82ae2:	42ba      	cmp	r2, r7
   82ae4:	bf28      	it	cs
   82ae6:	463a      	movcs	r2, r7
   82ae8:	fb92 f2f3 	sdiv	r2, r2, r3
   82aec:	69e1      	ldr	r1, [r4, #28]
   82aee:	fb03 f302 	mul.w	r3, r3, r2
   82af2:	9800      	ldr	r0, [sp, #0]
   82af4:	464a      	mov	r2, r9
   82af6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82af8:	47b0      	blx	r6
   82afa:	f1b0 0a00 	subs.w	sl, r0, #0
   82afe:	f73f af19 	bgt.w	82934 <__sfvwrite_r+0xbc>
   82b02:	e735      	b.n	82970 <__sfvwrite_r+0xf8>
   82b04:	461a      	mov	r2, r3
   82b06:	4629      	mov	r1, r5
   82b08:	9301      	str	r3, [sp, #4]
   82b0a:	f000 fc61 	bl	833d0 <memmove>
   82b0e:	6822      	ldr	r2, [r4, #0]
   82b10:	9b01      	ldr	r3, [sp, #4]
   82b12:	4621      	mov	r1, r4
   82b14:	441a      	add	r2, r3
   82b16:	6022      	str	r2, [r4, #0]
   82b18:	9800      	ldr	r0, [sp, #0]
   82b1a:	f7ff fc49 	bl	823b0 <_fflush_r>
   82b1e:	9b01      	ldr	r3, [sp, #4]
   82b20:	2800      	cmp	r0, #0
   82b22:	f47f af25 	bne.w	82970 <__sfvwrite_r+0xf8>
   82b26:	461f      	mov	r7, r3
   82b28:	e74e      	b.n	829c8 <__sfvwrite_r+0x150>
   82b2a:	9800      	ldr	r0, [sp, #0]
   82b2c:	f000 fcc0 	bl	834b0 <_realloc_r>
   82b30:	4683      	mov	fp, r0
   82b32:	2800      	cmp	r0, #0
   82b34:	d1c5      	bne.n	82ac2 <__sfvwrite_r+0x24a>
   82b36:	9d00      	ldr	r5, [sp, #0]
   82b38:	6921      	ldr	r1, [r4, #16]
   82b3a:	4628      	mov	r0, r5
   82b3c:	f7ff fdb6 	bl	826ac <_free_r>
   82b40:	220c      	movs	r2, #12
   82b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b46:	602a      	str	r2, [r5, #0]
   82b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82b4c:	e712      	b.n	82974 <__sfvwrite_r+0xfc>
   82b4e:	f106 0901 	add.w	r9, r6, #1
   82b52:	e720      	b.n	82996 <__sfvwrite_r+0x11e>
   82b54:	f04f 30ff 	mov.w	r0, #4294967295
   82b58:	e6bd      	b.n	828d6 <__sfvwrite_r+0x5e>
   82b5a:	220c      	movs	r2, #12
   82b5c:	9900      	ldr	r1, [sp, #0]
   82b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b62:	600a      	str	r2, [r1, #0]
   82b64:	e706      	b.n	82974 <__sfvwrite_r+0xfc>
   82b66:	bf00      	nop
   82b68:	7ffffc00 	.word	0x7ffffc00

00082b6c <_fwalk_reent>:
   82b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82b70:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82b74:	d01e      	beq.n	82bb4 <_fwalk_reent+0x48>
   82b76:	4688      	mov	r8, r1
   82b78:	4607      	mov	r7, r0
   82b7a:	f04f 0900 	mov.w	r9, #0
   82b7e:	6875      	ldr	r5, [r6, #4]
   82b80:	68b4      	ldr	r4, [r6, #8]
   82b82:	3d01      	subs	r5, #1
   82b84:	d410      	bmi.n	82ba8 <_fwalk_reent+0x3c>
   82b86:	89a3      	ldrh	r3, [r4, #12]
   82b88:	3d01      	subs	r5, #1
   82b8a:	2b01      	cmp	r3, #1
   82b8c:	d908      	bls.n	82ba0 <_fwalk_reent+0x34>
   82b8e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82b92:	3301      	adds	r3, #1
   82b94:	d004      	beq.n	82ba0 <_fwalk_reent+0x34>
   82b96:	4621      	mov	r1, r4
   82b98:	4638      	mov	r0, r7
   82b9a:	47c0      	blx	r8
   82b9c:	ea49 0900 	orr.w	r9, r9, r0
   82ba0:	1c6b      	adds	r3, r5, #1
   82ba2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82ba6:	d1ee      	bne.n	82b86 <_fwalk_reent+0x1a>
   82ba8:	6836      	ldr	r6, [r6, #0]
   82baa:	2e00      	cmp	r6, #0
   82bac:	d1e7      	bne.n	82b7e <_fwalk_reent+0x12>
   82bae:	4648      	mov	r0, r9
   82bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82bb4:	46b1      	mov	r9, r6
   82bb6:	4648      	mov	r0, r9
   82bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082bbc <__locale_mb_cur_max>:
   82bbc:	4b04      	ldr	r3, [pc, #16]	; (82bd0 <__locale_mb_cur_max+0x14>)
   82bbe:	4a05      	ldr	r2, [pc, #20]	; (82bd4 <__locale_mb_cur_max+0x18>)
   82bc0:	681b      	ldr	r3, [r3, #0]
   82bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82bc4:	2b00      	cmp	r3, #0
   82bc6:	bf08      	it	eq
   82bc8:	4613      	moveq	r3, r2
   82bca:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82bce:	4770      	bx	lr
   82bd0:	20070134 	.word	0x20070134
   82bd4:	20070564 	.word	0x20070564

00082bd8 <__retarget_lock_init_recursive>:
   82bd8:	4770      	bx	lr
   82bda:	bf00      	nop

00082bdc <__retarget_lock_close_recursive>:
   82bdc:	4770      	bx	lr
   82bde:	bf00      	nop

00082be0 <__retarget_lock_acquire_recursive>:
   82be0:	4770      	bx	lr
   82be2:	bf00      	nop

00082be4 <__retarget_lock_release_recursive>:
   82be4:	4770      	bx	lr
   82be6:	bf00      	nop

00082be8 <__swhatbuf_r>:
   82be8:	b570      	push	{r4, r5, r6, lr}
   82bea:	460c      	mov	r4, r1
   82bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82bf0:	b090      	sub	sp, #64	; 0x40
   82bf2:	2900      	cmp	r1, #0
   82bf4:	4615      	mov	r5, r2
   82bf6:	461e      	mov	r6, r3
   82bf8:	db14      	blt.n	82c24 <__swhatbuf_r+0x3c>
   82bfa:	aa01      	add	r2, sp, #4
   82bfc:	f000 ffde 	bl	83bbc <_fstat_r>
   82c00:	2800      	cmp	r0, #0
   82c02:	db0f      	blt.n	82c24 <__swhatbuf_r+0x3c>
   82c04:	9a02      	ldr	r2, [sp, #8]
   82c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82c0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82c0e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82c12:	fab2 f282 	clz	r2, r2
   82c16:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82c1a:	0952      	lsrs	r2, r2, #5
   82c1c:	6032      	str	r2, [r6, #0]
   82c1e:	602b      	str	r3, [r5, #0]
   82c20:	b010      	add	sp, #64	; 0x40
   82c22:	bd70      	pop	{r4, r5, r6, pc}
   82c24:	2300      	movs	r3, #0
   82c26:	89a2      	ldrh	r2, [r4, #12]
   82c28:	6033      	str	r3, [r6, #0]
   82c2a:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82c2e:	d004      	beq.n	82c3a <__swhatbuf_r+0x52>
   82c30:	2240      	movs	r2, #64	; 0x40
   82c32:	4618      	mov	r0, r3
   82c34:	602a      	str	r2, [r5, #0]
   82c36:	b010      	add	sp, #64	; 0x40
   82c38:	bd70      	pop	{r4, r5, r6, pc}
   82c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82c3e:	602b      	str	r3, [r5, #0]
   82c40:	b010      	add	sp, #64	; 0x40
   82c42:	bd70      	pop	{r4, r5, r6, pc}

00082c44 <__smakebuf_r>:
   82c44:	898a      	ldrh	r2, [r1, #12]
   82c46:	460b      	mov	r3, r1
   82c48:	0792      	lsls	r2, r2, #30
   82c4a:	d506      	bpl.n	82c5a <__smakebuf_r+0x16>
   82c4c:	2101      	movs	r1, #1
   82c4e:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82c52:	6159      	str	r1, [r3, #20]
   82c54:	601a      	str	r2, [r3, #0]
   82c56:	611a      	str	r2, [r3, #16]
   82c58:	4770      	bx	lr
   82c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   82c5c:	b083      	sub	sp, #12
   82c5e:	ab01      	add	r3, sp, #4
   82c60:	466a      	mov	r2, sp
   82c62:	460c      	mov	r4, r1
   82c64:	4606      	mov	r6, r0
   82c66:	f7ff ffbf 	bl	82be8 <__swhatbuf_r>
   82c6a:	9900      	ldr	r1, [sp, #0]
   82c6c:	4605      	mov	r5, r0
   82c6e:	4630      	mov	r0, r6
   82c70:	f000 f83a 	bl	82ce8 <_malloc_r>
   82c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c78:	b1d8      	cbz	r0, 82cb2 <__smakebuf_r+0x6e>
   82c7a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82c7e:	4f15      	ldr	r7, [pc, #84]	; (82cd4 <__smakebuf_r+0x90>)
   82c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82c84:	63f7      	str	r7, [r6, #60]	; 0x3c
   82c86:	81a3      	strh	r3, [r4, #12]
   82c88:	6020      	str	r0, [r4, #0]
   82c8a:	6120      	str	r0, [r4, #16]
   82c8c:	6161      	str	r1, [r4, #20]
   82c8e:	b91a      	cbnz	r2, 82c98 <__smakebuf_r+0x54>
   82c90:	432b      	orrs	r3, r5
   82c92:	81a3      	strh	r3, [r4, #12]
   82c94:	b003      	add	sp, #12
   82c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82c98:	4630      	mov	r0, r6
   82c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82c9e:	f000 ffa1 	bl	83be4 <_isatty_r>
   82ca2:	b1a0      	cbz	r0, 82cce <__smakebuf_r+0x8a>
   82ca4:	89a3      	ldrh	r3, [r4, #12]
   82ca6:	f023 0303 	bic.w	r3, r3, #3
   82caa:	f043 0301 	orr.w	r3, r3, #1
   82cae:	b21b      	sxth	r3, r3
   82cb0:	e7ee      	b.n	82c90 <__smakebuf_r+0x4c>
   82cb2:	059a      	lsls	r2, r3, #22
   82cb4:	d4ee      	bmi.n	82c94 <__smakebuf_r+0x50>
   82cb6:	2101      	movs	r1, #1
   82cb8:	f023 0303 	bic.w	r3, r3, #3
   82cbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82cc0:	f043 0302 	orr.w	r3, r3, #2
   82cc4:	81a3      	strh	r3, [r4, #12]
   82cc6:	6161      	str	r1, [r4, #20]
   82cc8:	6022      	str	r2, [r4, #0]
   82cca:	6122      	str	r2, [r4, #16]
   82ccc:	e7e2      	b.n	82c94 <__smakebuf_r+0x50>
   82cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82cd2:	e7dd      	b.n	82c90 <__smakebuf_r+0x4c>
   82cd4:	00082405 	.word	0x00082405

00082cd8 <malloc>:
   82cd8:	4b02      	ldr	r3, [pc, #8]	; (82ce4 <malloc+0xc>)
   82cda:	4601      	mov	r1, r0
   82cdc:	6818      	ldr	r0, [r3, #0]
   82cde:	f000 b803 	b.w	82ce8 <_malloc_r>
   82ce2:	bf00      	nop
   82ce4:	20070134 	.word	0x20070134

00082ce8 <_malloc_r>:
   82ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82cec:	f101 060b 	add.w	r6, r1, #11
   82cf0:	2e16      	cmp	r6, #22
   82cf2:	b083      	sub	sp, #12
   82cf4:	4605      	mov	r5, r0
   82cf6:	f240 809e 	bls.w	82e36 <_malloc_r+0x14e>
   82cfa:	f036 0607 	bics.w	r6, r6, #7
   82cfe:	f100 80bd 	bmi.w	82e7c <_malloc_r+0x194>
   82d02:	42b1      	cmp	r1, r6
   82d04:	f200 80ba 	bhi.w	82e7c <_malloc_r+0x194>
   82d08:	f000 fbc6 	bl	83498 <__malloc_lock>
   82d0c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82d10:	f0c0 8285 	bcc.w	8321e <_malloc_r+0x536>
   82d14:	0a73      	lsrs	r3, r6, #9
   82d16:	f000 80b8 	beq.w	82e8a <_malloc_r+0x1a2>
   82d1a:	2b04      	cmp	r3, #4
   82d1c:	f200 816c 	bhi.w	82ff8 <_malloc_r+0x310>
   82d20:	09b3      	lsrs	r3, r6, #6
   82d22:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82d26:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82d2a:	00c1      	lsls	r1, r0, #3
   82d2c:	4fb8      	ldr	r7, [pc, #736]	; (83010 <_malloc_r+0x328>)
   82d2e:	4439      	add	r1, r7
   82d30:	684c      	ldr	r4, [r1, #4]
   82d32:	3908      	subs	r1, #8
   82d34:	42a1      	cmp	r1, r4
   82d36:	d106      	bne.n	82d46 <_malloc_r+0x5e>
   82d38:	e00c      	b.n	82d54 <_malloc_r+0x6c>
   82d3a:	2a00      	cmp	r2, #0
   82d3c:	f280 80ab 	bge.w	82e96 <_malloc_r+0x1ae>
   82d40:	68e4      	ldr	r4, [r4, #12]
   82d42:	42a1      	cmp	r1, r4
   82d44:	d006      	beq.n	82d54 <_malloc_r+0x6c>
   82d46:	6863      	ldr	r3, [r4, #4]
   82d48:	f023 0303 	bic.w	r3, r3, #3
   82d4c:	1b9a      	subs	r2, r3, r6
   82d4e:	2a0f      	cmp	r2, #15
   82d50:	ddf3      	ble.n	82d3a <_malloc_r+0x52>
   82d52:	4670      	mov	r0, lr
   82d54:	693c      	ldr	r4, [r7, #16]
   82d56:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83024 <_malloc_r+0x33c>
   82d5a:	4574      	cmp	r4, lr
   82d5c:	f000 819e 	beq.w	8309c <_malloc_r+0x3b4>
   82d60:	6863      	ldr	r3, [r4, #4]
   82d62:	f023 0303 	bic.w	r3, r3, #3
   82d66:	1b9a      	subs	r2, r3, r6
   82d68:	2a0f      	cmp	r2, #15
   82d6a:	f300 8183 	bgt.w	83074 <_malloc_r+0x38c>
   82d6e:	2a00      	cmp	r2, #0
   82d70:	f8c7 e014 	str.w	lr, [r7, #20]
   82d74:	f8c7 e010 	str.w	lr, [r7, #16]
   82d78:	f280 8091 	bge.w	82e9e <_malloc_r+0x1b6>
   82d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82d80:	f080 8154 	bcs.w	8302c <_malloc_r+0x344>
   82d84:	2201      	movs	r2, #1
   82d86:	08db      	lsrs	r3, r3, #3
   82d88:	6879      	ldr	r1, [r7, #4]
   82d8a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82d8e:	4413      	add	r3, r2
   82d90:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82d94:	fa02 f20c 	lsl.w	r2, r2, ip
   82d98:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82d9c:	430a      	orrs	r2, r1
   82d9e:	f1ac 0108 	sub.w	r1, ip, #8
   82da2:	60e1      	str	r1, [r4, #12]
   82da4:	f8c4 8008 	str.w	r8, [r4, #8]
   82da8:	607a      	str	r2, [r7, #4]
   82daa:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82dae:	f8c8 400c 	str.w	r4, [r8, #12]
   82db2:	2401      	movs	r4, #1
   82db4:	1083      	asrs	r3, r0, #2
   82db6:	409c      	lsls	r4, r3
   82db8:	4294      	cmp	r4, r2
   82dba:	d87d      	bhi.n	82eb8 <_malloc_r+0x1d0>
   82dbc:	4214      	tst	r4, r2
   82dbe:	d106      	bne.n	82dce <_malloc_r+0xe6>
   82dc0:	f020 0003 	bic.w	r0, r0, #3
   82dc4:	0064      	lsls	r4, r4, #1
   82dc6:	4214      	tst	r4, r2
   82dc8:	f100 0004 	add.w	r0, r0, #4
   82dcc:	d0fa      	beq.n	82dc4 <_malloc_r+0xdc>
   82dce:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82dd2:	46cc      	mov	ip, r9
   82dd4:	4680      	mov	r8, r0
   82dd6:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82dda:	459c      	cmp	ip, r3
   82ddc:	d107      	bne.n	82dee <_malloc_r+0x106>
   82dde:	e15f      	b.n	830a0 <_malloc_r+0x3b8>
   82de0:	2a00      	cmp	r2, #0
   82de2:	f280 816d 	bge.w	830c0 <_malloc_r+0x3d8>
   82de6:	68db      	ldr	r3, [r3, #12]
   82de8:	459c      	cmp	ip, r3
   82dea:	f000 8159 	beq.w	830a0 <_malloc_r+0x3b8>
   82dee:	6859      	ldr	r1, [r3, #4]
   82df0:	f021 0103 	bic.w	r1, r1, #3
   82df4:	1b8a      	subs	r2, r1, r6
   82df6:	2a0f      	cmp	r2, #15
   82df8:	ddf2      	ble.n	82de0 <_malloc_r+0xf8>
   82dfa:	68dc      	ldr	r4, [r3, #12]
   82dfc:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82e00:	f046 0801 	orr.w	r8, r6, #1
   82e04:	4628      	mov	r0, r5
   82e06:	441e      	add	r6, r3
   82e08:	f042 0501 	orr.w	r5, r2, #1
   82e0c:	f8c3 8004 	str.w	r8, [r3, #4]
   82e10:	f8cc 400c 	str.w	r4, [ip, #12]
   82e14:	f8c4 c008 	str.w	ip, [r4, #8]
   82e18:	617e      	str	r6, [r7, #20]
   82e1a:	613e      	str	r6, [r7, #16]
   82e1c:	f8c6 e00c 	str.w	lr, [r6, #12]
   82e20:	f8c6 e008 	str.w	lr, [r6, #8]
   82e24:	6075      	str	r5, [r6, #4]
   82e26:	505a      	str	r2, [r3, r1]
   82e28:	9300      	str	r3, [sp, #0]
   82e2a:	f000 fb3b 	bl	834a4 <__malloc_unlock>
   82e2e:	9b00      	ldr	r3, [sp, #0]
   82e30:	f103 0408 	add.w	r4, r3, #8
   82e34:	e01e      	b.n	82e74 <_malloc_r+0x18c>
   82e36:	2910      	cmp	r1, #16
   82e38:	d820      	bhi.n	82e7c <_malloc_r+0x194>
   82e3a:	f000 fb2d 	bl	83498 <__malloc_lock>
   82e3e:	2610      	movs	r6, #16
   82e40:	2318      	movs	r3, #24
   82e42:	2002      	movs	r0, #2
   82e44:	4f72      	ldr	r7, [pc, #456]	; (83010 <_malloc_r+0x328>)
   82e46:	443b      	add	r3, r7
   82e48:	685c      	ldr	r4, [r3, #4]
   82e4a:	f1a3 0208 	sub.w	r2, r3, #8
   82e4e:	4294      	cmp	r4, r2
   82e50:	f000 812f 	beq.w	830b2 <_malloc_r+0x3ca>
   82e54:	6863      	ldr	r3, [r4, #4]
   82e56:	68e1      	ldr	r1, [r4, #12]
   82e58:	f023 0303 	bic.w	r3, r3, #3
   82e5c:	4423      	add	r3, r4
   82e5e:	685a      	ldr	r2, [r3, #4]
   82e60:	68a6      	ldr	r6, [r4, #8]
   82e62:	f042 0201 	orr.w	r2, r2, #1
   82e66:	60f1      	str	r1, [r6, #12]
   82e68:	4628      	mov	r0, r5
   82e6a:	608e      	str	r6, [r1, #8]
   82e6c:	605a      	str	r2, [r3, #4]
   82e6e:	f000 fb19 	bl	834a4 <__malloc_unlock>
   82e72:	3408      	adds	r4, #8
   82e74:	4620      	mov	r0, r4
   82e76:	b003      	add	sp, #12
   82e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e7c:	2400      	movs	r4, #0
   82e7e:	230c      	movs	r3, #12
   82e80:	4620      	mov	r0, r4
   82e82:	602b      	str	r3, [r5, #0]
   82e84:	b003      	add	sp, #12
   82e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e8a:	2040      	movs	r0, #64	; 0x40
   82e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
   82e90:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82e94:	e74a      	b.n	82d2c <_malloc_r+0x44>
   82e96:	4423      	add	r3, r4
   82e98:	685a      	ldr	r2, [r3, #4]
   82e9a:	68e1      	ldr	r1, [r4, #12]
   82e9c:	e7e0      	b.n	82e60 <_malloc_r+0x178>
   82e9e:	4423      	add	r3, r4
   82ea0:	685a      	ldr	r2, [r3, #4]
   82ea2:	4628      	mov	r0, r5
   82ea4:	f042 0201 	orr.w	r2, r2, #1
   82ea8:	605a      	str	r2, [r3, #4]
   82eaa:	3408      	adds	r4, #8
   82eac:	f000 fafa 	bl	834a4 <__malloc_unlock>
   82eb0:	4620      	mov	r0, r4
   82eb2:	b003      	add	sp, #12
   82eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82eb8:	68bc      	ldr	r4, [r7, #8]
   82eba:	6863      	ldr	r3, [r4, #4]
   82ebc:	f023 0803 	bic.w	r8, r3, #3
   82ec0:	45b0      	cmp	r8, r6
   82ec2:	d304      	bcc.n	82ece <_malloc_r+0x1e6>
   82ec4:	eba8 0306 	sub.w	r3, r8, r6
   82ec8:	2b0f      	cmp	r3, #15
   82eca:	f300 8085 	bgt.w	82fd8 <_malloc_r+0x2f0>
   82ece:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83028 <_malloc_r+0x340>
   82ed2:	4b50      	ldr	r3, [pc, #320]	; (83014 <_malloc_r+0x32c>)
   82ed4:	f8d9 2000 	ldr.w	r2, [r9]
   82ed8:	681b      	ldr	r3, [r3, #0]
   82eda:	3201      	adds	r2, #1
   82edc:	4433      	add	r3, r6
   82ede:	eb04 0a08 	add.w	sl, r4, r8
   82ee2:	f000 8154 	beq.w	8318e <_malloc_r+0x4a6>
   82ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82eea:	330f      	adds	r3, #15
   82eec:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82ef0:	f02b 0b0f 	bic.w	fp, fp, #15
   82ef4:	4659      	mov	r1, fp
   82ef6:	4628      	mov	r0, r5
   82ef8:	f000 fc90 	bl	8381c <_sbrk_r>
   82efc:	1c41      	adds	r1, r0, #1
   82efe:	4602      	mov	r2, r0
   82f00:	f000 80fb 	beq.w	830fa <_malloc_r+0x412>
   82f04:	4582      	cmp	sl, r0
   82f06:	f200 80f6 	bhi.w	830f6 <_malloc_r+0x40e>
   82f0a:	4b43      	ldr	r3, [pc, #268]	; (83018 <_malloc_r+0x330>)
   82f0c:	6819      	ldr	r1, [r3, #0]
   82f0e:	4459      	add	r1, fp
   82f10:	6019      	str	r1, [r3, #0]
   82f12:	f000 814c 	beq.w	831ae <_malloc_r+0x4c6>
   82f16:	f8d9 0000 	ldr.w	r0, [r9]
   82f1a:	3001      	adds	r0, #1
   82f1c:	bf1b      	ittet	ne
   82f1e:	eba2 0a0a 	subne.w	sl, r2, sl
   82f22:	4451      	addne	r1, sl
   82f24:	f8c9 2000 	streq.w	r2, [r9]
   82f28:	6019      	strne	r1, [r3, #0]
   82f2a:	f012 0107 	ands.w	r1, r2, #7
   82f2e:	f000 8114 	beq.w	8315a <_malloc_r+0x472>
   82f32:	f1c1 0008 	rsb	r0, r1, #8
   82f36:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82f3a:	4402      	add	r2, r0
   82f3c:	3108      	adds	r1, #8
   82f3e:	eb02 090b 	add.w	r9, r2, fp
   82f42:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82f46:	eba1 0909 	sub.w	r9, r1, r9
   82f4a:	4649      	mov	r1, r9
   82f4c:	4628      	mov	r0, r5
   82f4e:	9301      	str	r3, [sp, #4]
   82f50:	9200      	str	r2, [sp, #0]
   82f52:	f000 fc63 	bl	8381c <_sbrk_r>
   82f56:	1c43      	adds	r3, r0, #1
   82f58:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82f5c:	f000 8142 	beq.w	831e4 <_malloc_r+0x4fc>
   82f60:	1a80      	subs	r0, r0, r2
   82f62:	4448      	add	r0, r9
   82f64:	f040 0001 	orr.w	r0, r0, #1
   82f68:	6819      	ldr	r1, [r3, #0]
   82f6a:	42bc      	cmp	r4, r7
   82f6c:	4449      	add	r1, r9
   82f6e:	60ba      	str	r2, [r7, #8]
   82f70:	6019      	str	r1, [r3, #0]
   82f72:	6050      	str	r0, [r2, #4]
   82f74:	d017      	beq.n	82fa6 <_malloc_r+0x2be>
   82f76:	f1b8 0f0f 	cmp.w	r8, #15
   82f7a:	f240 80fa 	bls.w	83172 <_malloc_r+0x48a>
   82f7e:	f04f 0c05 	mov.w	ip, #5
   82f82:	6862      	ldr	r2, [r4, #4]
   82f84:	f1a8 000c 	sub.w	r0, r8, #12
   82f88:	f020 0007 	bic.w	r0, r0, #7
   82f8c:	f002 0201 	and.w	r2, r2, #1
   82f90:	eb04 0e00 	add.w	lr, r4, r0
   82f94:	4302      	orrs	r2, r0
   82f96:	280f      	cmp	r0, #15
   82f98:	6062      	str	r2, [r4, #4]
   82f9a:	f8ce c004 	str.w	ip, [lr, #4]
   82f9e:	f8ce c008 	str.w	ip, [lr, #8]
   82fa2:	f200 8116 	bhi.w	831d2 <_malloc_r+0x4ea>
   82fa6:	4b1d      	ldr	r3, [pc, #116]	; (8301c <_malloc_r+0x334>)
   82fa8:	68bc      	ldr	r4, [r7, #8]
   82faa:	681a      	ldr	r2, [r3, #0]
   82fac:	4291      	cmp	r1, r2
   82fae:	bf88      	it	hi
   82fb0:	6019      	strhi	r1, [r3, #0]
   82fb2:	4b1b      	ldr	r3, [pc, #108]	; (83020 <_malloc_r+0x338>)
   82fb4:	681a      	ldr	r2, [r3, #0]
   82fb6:	4291      	cmp	r1, r2
   82fb8:	6862      	ldr	r2, [r4, #4]
   82fba:	bf88      	it	hi
   82fbc:	6019      	strhi	r1, [r3, #0]
   82fbe:	f022 0203 	bic.w	r2, r2, #3
   82fc2:	4296      	cmp	r6, r2
   82fc4:	eba2 0306 	sub.w	r3, r2, r6
   82fc8:	d801      	bhi.n	82fce <_malloc_r+0x2e6>
   82fca:	2b0f      	cmp	r3, #15
   82fcc:	dc04      	bgt.n	82fd8 <_malloc_r+0x2f0>
   82fce:	4628      	mov	r0, r5
   82fd0:	f000 fa68 	bl	834a4 <__malloc_unlock>
   82fd4:	2400      	movs	r4, #0
   82fd6:	e74d      	b.n	82e74 <_malloc_r+0x18c>
   82fd8:	f046 0201 	orr.w	r2, r6, #1
   82fdc:	f043 0301 	orr.w	r3, r3, #1
   82fe0:	4426      	add	r6, r4
   82fe2:	6062      	str	r2, [r4, #4]
   82fe4:	4628      	mov	r0, r5
   82fe6:	60be      	str	r6, [r7, #8]
   82fe8:	3408      	adds	r4, #8
   82fea:	6073      	str	r3, [r6, #4]
   82fec:	f000 fa5a 	bl	834a4 <__malloc_unlock>
   82ff0:	4620      	mov	r0, r4
   82ff2:	b003      	add	sp, #12
   82ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ff8:	2b14      	cmp	r3, #20
   82ffa:	d970      	bls.n	830de <_malloc_r+0x3f6>
   82ffc:	2b54      	cmp	r3, #84	; 0x54
   82ffe:	f200 80a2 	bhi.w	83146 <_malloc_r+0x45e>
   83002:	0b33      	lsrs	r3, r6, #12
   83004:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83008:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8300c:	00c1      	lsls	r1, r0, #3
   8300e:	e68d      	b.n	82d2c <_malloc_r+0x44>
   83010:	200706d0 	.word	0x200706d0
   83014:	20070c40 	.word	0x20070c40
   83018:	20070c10 	.word	0x20070c10
   8301c:	20070c38 	.word	0x20070c38
   83020:	20070c3c 	.word	0x20070c3c
   83024:	200706d8 	.word	0x200706d8
   83028:	20070ad8 	.word	0x20070ad8
   8302c:	0a5a      	lsrs	r2, r3, #9
   8302e:	2a04      	cmp	r2, #4
   83030:	d95b      	bls.n	830ea <_malloc_r+0x402>
   83032:	2a14      	cmp	r2, #20
   83034:	f200 80ae 	bhi.w	83194 <_malloc_r+0x4ac>
   83038:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8303c:	00c9      	lsls	r1, r1, #3
   8303e:	325b      	adds	r2, #91	; 0x5b
   83040:	eb07 0c01 	add.w	ip, r7, r1
   83044:	5879      	ldr	r1, [r7, r1]
   83046:	f1ac 0c08 	sub.w	ip, ip, #8
   8304a:	458c      	cmp	ip, r1
   8304c:	f000 8088 	beq.w	83160 <_malloc_r+0x478>
   83050:	684a      	ldr	r2, [r1, #4]
   83052:	f022 0203 	bic.w	r2, r2, #3
   83056:	4293      	cmp	r3, r2
   83058:	d273      	bcs.n	83142 <_malloc_r+0x45a>
   8305a:	6889      	ldr	r1, [r1, #8]
   8305c:	458c      	cmp	ip, r1
   8305e:	d1f7      	bne.n	83050 <_malloc_r+0x368>
   83060:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83064:	687a      	ldr	r2, [r7, #4]
   83066:	60e3      	str	r3, [r4, #12]
   83068:	f8c4 c008 	str.w	ip, [r4, #8]
   8306c:	609c      	str	r4, [r3, #8]
   8306e:	f8cc 400c 	str.w	r4, [ip, #12]
   83072:	e69e      	b.n	82db2 <_malloc_r+0xca>
   83074:	f046 0c01 	orr.w	ip, r6, #1
   83078:	f042 0101 	orr.w	r1, r2, #1
   8307c:	4426      	add	r6, r4
   8307e:	f8c4 c004 	str.w	ip, [r4, #4]
   83082:	4628      	mov	r0, r5
   83084:	617e      	str	r6, [r7, #20]
   83086:	613e      	str	r6, [r7, #16]
   83088:	f8c6 e00c 	str.w	lr, [r6, #12]
   8308c:	f8c6 e008 	str.w	lr, [r6, #8]
   83090:	6071      	str	r1, [r6, #4]
   83092:	50e2      	str	r2, [r4, r3]
   83094:	f000 fa06 	bl	834a4 <__malloc_unlock>
   83098:	3408      	adds	r4, #8
   8309a:	e6eb      	b.n	82e74 <_malloc_r+0x18c>
   8309c:	687a      	ldr	r2, [r7, #4]
   8309e:	e688      	b.n	82db2 <_malloc_r+0xca>
   830a0:	f108 0801 	add.w	r8, r8, #1
   830a4:	f018 0f03 	tst.w	r8, #3
   830a8:	f10c 0c08 	add.w	ip, ip, #8
   830ac:	f47f ae93 	bne.w	82dd6 <_malloc_r+0xee>
   830b0:	e02d      	b.n	8310e <_malloc_r+0x426>
   830b2:	68dc      	ldr	r4, [r3, #12]
   830b4:	42a3      	cmp	r3, r4
   830b6:	bf08      	it	eq
   830b8:	3002      	addeq	r0, #2
   830ba:	f43f ae4b 	beq.w	82d54 <_malloc_r+0x6c>
   830be:	e6c9      	b.n	82e54 <_malloc_r+0x16c>
   830c0:	461c      	mov	r4, r3
   830c2:	4419      	add	r1, r3
   830c4:	684a      	ldr	r2, [r1, #4]
   830c6:	68db      	ldr	r3, [r3, #12]
   830c8:	f854 6f08 	ldr.w	r6, [r4, #8]!
   830cc:	f042 0201 	orr.w	r2, r2, #1
   830d0:	604a      	str	r2, [r1, #4]
   830d2:	4628      	mov	r0, r5
   830d4:	60f3      	str	r3, [r6, #12]
   830d6:	609e      	str	r6, [r3, #8]
   830d8:	f000 f9e4 	bl	834a4 <__malloc_unlock>
   830dc:	e6ca      	b.n	82e74 <_malloc_r+0x18c>
   830de:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   830e2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   830e6:	00c1      	lsls	r1, r0, #3
   830e8:	e620      	b.n	82d2c <_malloc_r+0x44>
   830ea:	099a      	lsrs	r2, r3, #6
   830ec:	f102 0139 	add.w	r1, r2, #57	; 0x39
   830f0:	00c9      	lsls	r1, r1, #3
   830f2:	3238      	adds	r2, #56	; 0x38
   830f4:	e7a4      	b.n	83040 <_malloc_r+0x358>
   830f6:	42bc      	cmp	r4, r7
   830f8:	d054      	beq.n	831a4 <_malloc_r+0x4bc>
   830fa:	68bc      	ldr	r4, [r7, #8]
   830fc:	6862      	ldr	r2, [r4, #4]
   830fe:	f022 0203 	bic.w	r2, r2, #3
   83102:	e75e      	b.n	82fc2 <_malloc_r+0x2da>
   83104:	f859 3908 	ldr.w	r3, [r9], #-8
   83108:	4599      	cmp	r9, r3
   8310a:	f040 8086 	bne.w	8321a <_malloc_r+0x532>
   8310e:	f010 0f03 	tst.w	r0, #3
   83112:	f100 30ff 	add.w	r0, r0, #4294967295
   83116:	d1f5      	bne.n	83104 <_malloc_r+0x41c>
   83118:	687b      	ldr	r3, [r7, #4]
   8311a:	ea23 0304 	bic.w	r3, r3, r4
   8311e:	607b      	str	r3, [r7, #4]
   83120:	0064      	lsls	r4, r4, #1
   83122:	429c      	cmp	r4, r3
   83124:	f63f aec8 	bhi.w	82eb8 <_malloc_r+0x1d0>
   83128:	2c00      	cmp	r4, #0
   8312a:	f43f aec5 	beq.w	82eb8 <_malloc_r+0x1d0>
   8312e:	421c      	tst	r4, r3
   83130:	4640      	mov	r0, r8
   83132:	f47f ae4c 	bne.w	82dce <_malloc_r+0xe6>
   83136:	0064      	lsls	r4, r4, #1
   83138:	421c      	tst	r4, r3
   8313a:	f100 0004 	add.w	r0, r0, #4
   8313e:	d0fa      	beq.n	83136 <_malloc_r+0x44e>
   83140:	e645      	b.n	82dce <_malloc_r+0xe6>
   83142:	468c      	mov	ip, r1
   83144:	e78c      	b.n	83060 <_malloc_r+0x378>
   83146:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8314a:	d815      	bhi.n	83178 <_malloc_r+0x490>
   8314c:	0bf3      	lsrs	r3, r6, #15
   8314e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   83152:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   83156:	00c1      	lsls	r1, r0, #3
   83158:	e5e8      	b.n	82d2c <_malloc_r+0x44>
   8315a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8315e:	e6ee      	b.n	82f3e <_malloc_r+0x256>
   83160:	2101      	movs	r1, #1
   83162:	687b      	ldr	r3, [r7, #4]
   83164:	1092      	asrs	r2, r2, #2
   83166:	fa01 f202 	lsl.w	r2, r1, r2
   8316a:	431a      	orrs	r2, r3
   8316c:	607a      	str	r2, [r7, #4]
   8316e:	4663      	mov	r3, ip
   83170:	e779      	b.n	83066 <_malloc_r+0x37e>
   83172:	2301      	movs	r3, #1
   83174:	6053      	str	r3, [r2, #4]
   83176:	e72a      	b.n	82fce <_malloc_r+0x2e6>
   83178:	f240 5254 	movw	r2, #1364	; 0x554
   8317c:	4293      	cmp	r3, r2
   8317e:	d822      	bhi.n	831c6 <_malloc_r+0x4de>
   83180:	0cb3      	lsrs	r3, r6, #18
   83182:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   83186:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8318a:	00c1      	lsls	r1, r0, #3
   8318c:	e5ce      	b.n	82d2c <_malloc_r+0x44>
   8318e:	f103 0b10 	add.w	fp, r3, #16
   83192:	e6af      	b.n	82ef4 <_malloc_r+0x20c>
   83194:	2a54      	cmp	r2, #84	; 0x54
   83196:	d829      	bhi.n	831ec <_malloc_r+0x504>
   83198:	0b1a      	lsrs	r2, r3, #12
   8319a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8319e:	00c9      	lsls	r1, r1, #3
   831a0:	326e      	adds	r2, #110	; 0x6e
   831a2:	e74d      	b.n	83040 <_malloc_r+0x358>
   831a4:	4b20      	ldr	r3, [pc, #128]	; (83228 <_malloc_r+0x540>)
   831a6:	6819      	ldr	r1, [r3, #0]
   831a8:	4459      	add	r1, fp
   831aa:	6019      	str	r1, [r3, #0]
   831ac:	e6b3      	b.n	82f16 <_malloc_r+0x22e>
   831ae:	f3ca 000b 	ubfx	r0, sl, #0, #12
   831b2:	2800      	cmp	r0, #0
   831b4:	f47f aeaf 	bne.w	82f16 <_malloc_r+0x22e>
   831b8:	eb08 030b 	add.w	r3, r8, fp
   831bc:	68ba      	ldr	r2, [r7, #8]
   831be:	f043 0301 	orr.w	r3, r3, #1
   831c2:	6053      	str	r3, [r2, #4]
   831c4:	e6ef      	b.n	82fa6 <_malloc_r+0x2be>
   831c6:	207f      	movs	r0, #127	; 0x7f
   831c8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   831cc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   831d0:	e5ac      	b.n	82d2c <_malloc_r+0x44>
   831d2:	f104 0108 	add.w	r1, r4, #8
   831d6:	4628      	mov	r0, r5
   831d8:	9300      	str	r3, [sp, #0]
   831da:	f7ff fa67 	bl	826ac <_free_r>
   831de:	9b00      	ldr	r3, [sp, #0]
   831e0:	6819      	ldr	r1, [r3, #0]
   831e2:	e6e0      	b.n	82fa6 <_malloc_r+0x2be>
   831e4:	2001      	movs	r0, #1
   831e6:	f04f 0900 	mov.w	r9, #0
   831ea:	e6bd      	b.n	82f68 <_malloc_r+0x280>
   831ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   831f0:	d805      	bhi.n	831fe <_malloc_r+0x516>
   831f2:	0bda      	lsrs	r2, r3, #15
   831f4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   831f8:	00c9      	lsls	r1, r1, #3
   831fa:	3277      	adds	r2, #119	; 0x77
   831fc:	e720      	b.n	83040 <_malloc_r+0x358>
   831fe:	f240 5154 	movw	r1, #1364	; 0x554
   83202:	428a      	cmp	r2, r1
   83204:	d805      	bhi.n	83212 <_malloc_r+0x52a>
   83206:	0c9a      	lsrs	r2, r3, #18
   83208:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8320c:	00c9      	lsls	r1, r1, #3
   8320e:	327c      	adds	r2, #124	; 0x7c
   83210:	e716      	b.n	83040 <_malloc_r+0x358>
   83212:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83216:	227e      	movs	r2, #126	; 0x7e
   83218:	e712      	b.n	83040 <_malloc_r+0x358>
   8321a:	687b      	ldr	r3, [r7, #4]
   8321c:	e780      	b.n	83120 <_malloc_r+0x438>
   8321e:	08f0      	lsrs	r0, r6, #3
   83220:	f106 0308 	add.w	r3, r6, #8
   83224:	e60e      	b.n	82e44 <_malloc_r+0x15c>
   83226:	bf00      	nop
   83228:	20070c10 	.word	0x20070c10

0008322c <__ascii_mbtowc>:
   8322c:	b082      	sub	sp, #8
   8322e:	b149      	cbz	r1, 83244 <__ascii_mbtowc+0x18>
   83230:	b15a      	cbz	r2, 8324a <__ascii_mbtowc+0x1e>
   83232:	b16b      	cbz	r3, 83250 <__ascii_mbtowc+0x24>
   83234:	7813      	ldrb	r3, [r2, #0]
   83236:	600b      	str	r3, [r1, #0]
   83238:	7812      	ldrb	r2, [r2, #0]
   8323a:	1c10      	adds	r0, r2, #0
   8323c:	bf18      	it	ne
   8323e:	2001      	movne	r0, #1
   83240:	b002      	add	sp, #8
   83242:	4770      	bx	lr
   83244:	a901      	add	r1, sp, #4
   83246:	2a00      	cmp	r2, #0
   83248:	d1f3      	bne.n	83232 <__ascii_mbtowc+0x6>
   8324a:	4610      	mov	r0, r2
   8324c:	b002      	add	sp, #8
   8324e:	4770      	bx	lr
   83250:	f06f 0001 	mvn.w	r0, #1
   83254:	e7f4      	b.n	83240 <__ascii_mbtowc+0x14>
   83256:	bf00      	nop

00083258 <memchr>:
   83258:	0783      	lsls	r3, r0, #30
   8325a:	b470      	push	{r4, r5, r6}
   8325c:	b2cd      	uxtb	r5, r1
   8325e:	d03d      	beq.n	832dc <memchr+0x84>
   83260:	1e54      	subs	r4, r2, #1
   83262:	b30a      	cbz	r2, 832a8 <memchr+0x50>
   83264:	7803      	ldrb	r3, [r0, #0]
   83266:	42ab      	cmp	r3, r5
   83268:	d01f      	beq.n	832aa <memchr+0x52>
   8326a:	1c43      	adds	r3, r0, #1
   8326c:	e005      	b.n	8327a <memchr+0x22>
   8326e:	f114 34ff 	adds.w	r4, r4, #4294967295
   83272:	d319      	bcc.n	832a8 <memchr+0x50>
   83274:	7802      	ldrb	r2, [r0, #0]
   83276:	42aa      	cmp	r2, r5
   83278:	d017      	beq.n	832aa <memchr+0x52>
   8327a:	f013 0f03 	tst.w	r3, #3
   8327e:	4618      	mov	r0, r3
   83280:	f103 0301 	add.w	r3, r3, #1
   83284:	d1f3      	bne.n	8326e <memchr+0x16>
   83286:	2c03      	cmp	r4, #3
   83288:	d811      	bhi.n	832ae <memchr+0x56>
   8328a:	b34c      	cbz	r4, 832e0 <memchr+0x88>
   8328c:	7803      	ldrb	r3, [r0, #0]
   8328e:	42ab      	cmp	r3, r5
   83290:	d00b      	beq.n	832aa <memchr+0x52>
   83292:	4404      	add	r4, r0
   83294:	1c43      	adds	r3, r0, #1
   83296:	e002      	b.n	8329e <memchr+0x46>
   83298:	7802      	ldrb	r2, [r0, #0]
   8329a:	42aa      	cmp	r2, r5
   8329c:	d005      	beq.n	832aa <memchr+0x52>
   8329e:	429c      	cmp	r4, r3
   832a0:	4618      	mov	r0, r3
   832a2:	f103 0301 	add.w	r3, r3, #1
   832a6:	d1f7      	bne.n	83298 <memchr+0x40>
   832a8:	2000      	movs	r0, #0
   832aa:	bc70      	pop	{r4, r5, r6}
   832ac:	4770      	bx	lr
   832ae:	0209      	lsls	r1, r1, #8
   832b0:	b289      	uxth	r1, r1
   832b2:	4329      	orrs	r1, r5
   832b4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   832b8:	6803      	ldr	r3, [r0, #0]
   832ba:	4606      	mov	r6, r0
   832bc:	404b      	eors	r3, r1
   832be:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   832c2:	ea22 0303 	bic.w	r3, r2, r3
   832c6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   832ca:	f100 0004 	add.w	r0, r0, #4
   832ce:	d103      	bne.n	832d8 <memchr+0x80>
   832d0:	3c04      	subs	r4, #4
   832d2:	2c03      	cmp	r4, #3
   832d4:	d8f0      	bhi.n	832b8 <memchr+0x60>
   832d6:	e7d8      	b.n	8328a <memchr+0x32>
   832d8:	4630      	mov	r0, r6
   832da:	e7d7      	b.n	8328c <memchr+0x34>
   832dc:	4614      	mov	r4, r2
   832de:	e7d2      	b.n	83286 <memchr+0x2e>
   832e0:	4620      	mov	r0, r4
   832e2:	e7e2      	b.n	832aa <memchr+0x52>

000832e4 <memcpy>:
   832e4:	4684      	mov	ip, r0
   832e6:	ea41 0300 	orr.w	r3, r1, r0
   832ea:	f013 0303 	ands.w	r3, r3, #3
   832ee:	d149      	bne.n	83384 <memcpy+0xa0>
   832f0:	3a40      	subs	r2, #64	; 0x40
   832f2:	d323      	bcc.n	8333c <memcpy+0x58>
   832f4:	680b      	ldr	r3, [r1, #0]
   832f6:	6003      	str	r3, [r0, #0]
   832f8:	684b      	ldr	r3, [r1, #4]
   832fa:	6043      	str	r3, [r0, #4]
   832fc:	688b      	ldr	r3, [r1, #8]
   832fe:	6083      	str	r3, [r0, #8]
   83300:	68cb      	ldr	r3, [r1, #12]
   83302:	60c3      	str	r3, [r0, #12]
   83304:	690b      	ldr	r3, [r1, #16]
   83306:	6103      	str	r3, [r0, #16]
   83308:	694b      	ldr	r3, [r1, #20]
   8330a:	6143      	str	r3, [r0, #20]
   8330c:	698b      	ldr	r3, [r1, #24]
   8330e:	6183      	str	r3, [r0, #24]
   83310:	69cb      	ldr	r3, [r1, #28]
   83312:	61c3      	str	r3, [r0, #28]
   83314:	6a0b      	ldr	r3, [r1, #32]
   83316:	6203      	str	r3, [r0, #32]
   83318:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8331a:	6243      	str	r3, [r0, #36]	; 0x24
   8331c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8331e:	6283      	str	r3, [r0, #40]	; 0x28
   83320:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83322:	62c3      	str	r3, [r0, #44]	; 0x2c
   83324:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83326:	6303      	str	r3, [r0, #48]	; 0x30
   83328:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8332a:	6343      	str	r3, [r0, #52]	; 0x34
   8332c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8332e:	6383      	str	r3, [r0, #56]	; 0x38
   83330:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83332:	63c3      	str	r3, [r0, #60]	; 0x3c
   83334:	3040      	adds	r0, #64	; 0x40
   83336:	3140      	adds	r1, #64	; 0x40
   83338:	3a40      	subs	r2, #64	; 0x40
   8333a:	d2db      	bcs.n	832f4 <memcpy+0x10>
   8333c:	3230      	adds	r2, #48	; 0x30
   8333e:	d30b      	bcc.n	83358 <memcpy+0x74>
   83340:	680b      	ldr	r3, [r1, #0]
   83342:	6003      	str	r3, [r0, #0]
   83344:	684b      	ldr	r3, [r1, #4]
   83346:	6043      	str	r3, [r0, #4]
   83348:	688b      	ldr	r3, [r1, #8]
   8334a:	6083      	str	r3, [r0, #8]
   8334c:	68cb      	ldr	r3, [r1, #12]
   8334e:	60c3      	str	r3, [r0, #12]
   83350:	3010      	adds	r0, #16
   83352:	3110      	adds	r1, #16
   83354:	3a10      	subs	r2, #16
   83356:	d2f3      	bcs.n	83340 <memcpy+0x5c>
   83358:	320c      	adds	r2, #12
   8335a:	d305      	bcc.n	83368 <memcpy+0x84>
   8335c:	f851 3b04 	ldr.w	r3, [r1], #4
   83360:	f840 3b04 	str.w	r3, [r0], #4
   83364:	3a04      	subs	r2, #4
   83366:	d2f9      	bcs.n	8335c <memcpy+0x78>
   83368:	3204      	adds	r2, #4
   8336a:	d008      	beq.n	8337e <memcpy+0x9a>
   8336c:	07d2      	lsls	r2, r2, #31
   8336e:	bf1c      	itt	ne
   83370:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83374:	f800 3b01 	strbne.w	r3, [r0], #1
   83378:	d301      	bcc.n	8337e <memcpy+0x9a>
   8337a:	880b      	ldrh	r3, [r1, #0]
   8337c:	8003      	strh	r3, [r0, #0]
   8337e:	4660      	mov	r0, ip
   83380:	4770      	bx	lr
   83382:	bf00      	nop
   83384:	2a08      	cmp	r2, #8
   83386:	d313      	bcc.n	833b0 <memcpy+0xcc>
   83388:	078b      	lsls	r3, r1, #30
   8338a:	d0b1      	beq.n	832f0 <memcpy+0xc>
   8338c:	f010 0303 	ands.w	r3, r0, #3
   83390:	d0ae      	beq.n	832f0 <memcpy+0xc>
   83392:	f1c3 0304 	rsb	r3, r3, #4
   83396:	1ad2      	subs	r2, r2, r3
   83398:	07db      	lsls	r3, r3, #31
   8339a:	bf1c      	itt	ne
   8339c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   833a0:	f800 3b01 	strbne.w	r3, [r0], #1
   833a4:	d3a4      	bcc.n	832f0 <memcpy+0xc>
   833a6:	f831 3b02 	ldrh.w	r3, [r1], #2
   833aa:	f820 3b02 	strh.w	r3, [r0], #2
   833ae:	e79f      	b.n	832f0 <memcpy+0xc>
   833b0:	3a04      	subs	r2, #4
   833b2:	d3d9      	bcc.n	83368 <memcpy+0x84>
   833b4:	3a01      	subs	r2, #1
   833b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   833ba:	f800 3b01 	strb.w	r3, [r0], #1
   833be:	d2f9      	bcs.n	833b4 <memcpy+0xd0>
   833c0:	780b      	ldrb	r3, [r1, #0]
   833c2:	7003      	strb	r3, [r0, #0]
   833c4:	784b      	ldrb	r3, [r1, #1]
   833c6:	7043      	strb	r3, [r0, #1]
   833c8:	788b      	ldrb	r3, [r1, #2]
   833ca:	7083      	strb	r3, [r0, #2]
   833cc:	4660      	mov	r0, ip
   833ce:	4770      	bx	lr

000833d0 <memmove>:
   833d0:	4288      	cmp	r0, r1
   833d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   833d4:	d90d      	bls.n	833f2 <memmove+0x22>
   833d6:	188b      	adds	r3, r1, r2
   833d8:	4298      	cmp	r0, r3
   833da:	d20a      	bcs.n	833f2 <memmove+0x22>
   833dc:	1884      	adds	r4, r0, r2
   833de:	2a00      	cmp	r2, #0
   833e0:	d051      	beq.n	83486 <memmove+0xb6>
   833e2:	4622      	mov	r2, r4
   833e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   833e8:	4299      	cmp	r1, r3
   833ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
   833ee:	d1f9      	bne.n	833e4 <memmove+0x14>
   833f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   833f2:	2a0f      	cmp	r2, #15
   833f4:	d948      	bls.n	83488 <memmove+0xb8>
   833f6:	ea41 0300 	orr.w	r3, r1, r0
   833fa:	079b      	lsls	r3, r3, #30
   833fc:	d146      	bne.n	8348c <memmove+0xbc>
   833fe:	4615      	mov	r5, r2
   83400:	f100 0410 	add.w	r4, r0, #16
   83404:	f101 0310 	add.w	r3, r1, #16
   83408:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8340c:	3d10      	subs	r5, #16
   8340e:	f844 6c10 	str.w	r6, [r4, #-16]
   83412:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83416:	2d0f      	cmp	r5, #15
   83418:	f844 6c0c 	str.w	r6, [r4, #-12]
   8341c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83420:	f104 0410 	add.w	r4, r4, #16
   83424:	f844 6c18 	str.w	r6, [r4, #-24]
   83428:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8342c:	f103 0310 	add.w	r3, r3, #16
   83430:	f844 6c14 	str.w	r6, [r4, #-20]
   83434:	d8e8      	bhi.n	83408 <memmove+0x38>
   83436:	f1a2 0310 	sub.w	r3, r2, #16
   8343a:	f023 030f 	bic.w	r3, r3, #15
   8343e:	f002 0e0f 	and.w	lr, r2, #15
   83442:	3310      	adds	r3, #16
   83444:	f1be 0f03 	cmp.w	lr, #3
   83448:	4419      	add	r1, r3
   8344a:	4403      	add	r3, r0
   8344c:	d921      	bls.n	83492 <memmove+0xc2>
   8344e:	460e      	mov	r6, r1
   83450:	4674      	mov	r4, lr
   83452:	1f1d      	subs	r5, r3, #4
   83454:	f856 7b04 	ldr.w	r7, [r6], #4
   83458:	3c04      	subs	r4, #4
   8345a:	2c03      	cmp	r4, #3
   8345c:	f845 7f04 	str.w	r7, [r5, #4]!
   83460:	d8f8      	bhi.n	83454 <memmove+0x84>
   83462:	f1ae 0404 	sub.w	r4, lr, #4
   83466:	f024 0403 	bic.w	r4, r4, #3
   8346a:	3404      	adds	r4, #4
   8346c:	4421      	add	r1, r4
   8346e:	4423      	add	r3, r4
   83470:	f002 0203 	and.w	r2, r2, #3
   83474:	b162      	cbz	r2, 83490 <memmove+0xc0>
   83476:	3b01      	subs	r3, #1
   83478:	440a      	add	r2, r1
   8347a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8347e:	428a      	cmp	r2, r1
   83480:	f803 4f01 	strb.w	r4, [r3, #1]!
   83484:	d1f9      	bne.n	8347a <memmove+0xaa>
   83486:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83488:	4603      	mov	r3, r0
   8348a:	e7f3      	b.n	83474 <memmove+0xa4>
   8348c:	4603      	mov	r3, r0
   8348e:	e7f2      	b.n	83476 <memmove+0xa6>
   83490:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83492:	4672      	mov	r2, lr
   83494:	e7ee      	b.n	83474 <memmove+0xa4>
   83496:	bf00      	nop

00083498 <__malloc_lock>:
   83498:	4801      	ldr	r0, [pc, #4]	; (834a0 <__malloc_lock+0x8>)
   8349a:	f7ff bba1 	b.w	82be0 <__retarget_lock_acquire_recursive>
   8349e:	bf00      	nop
   834a0:	20073f58 	.word	0x20073f58

000834a4 <__malloc_unlock>:
   834a4:	4801      	ldr	r0, [pc, #4]	; (834ac <__malloc_unlock+0x8>)
   834a6:	f7ff bb9d 	b.w	82be4 <__retarget_lock_release_recursive>
   834aa:	bf00      	nop
   834ac:	20073f58 	.word	0x20073f58

000834b0 <_realloc_r>:
   834b0:	2900      	cmp	r1, #0
   834b2:	f000 8094 	beq.w	835de <_realloc_r+0x12e>
   834b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   834ba:	460c      	mov	r4, r1
   834bc:	4615      	mov	r5, r2
   834be:	b083      	sub	sp, #12
   834c0:	4680      	mov	r8, r0
   834c2:	f105 060b 	add.w	r6, r5, #11
   834c6:	f7ff ffe7 	bl	83498 <__malloc_lock>
   834ca:	f854 ec04 	ldr.w	lr, [r4, #-4]
   834ce:	2e16      	cmp	r6, #22
   834d0:	f02e 0703 	bic.w	r7, lr, #3
   834d4:	f1a4 0908 	sub.w	r9, r4, #8
   834d8:	d83c      	bhi.n	83554 <_realloc_r+0xa4>
   834da:	2210      	movs	r2, #16
   834dc:	4616      	mov	r6, r2
   834de:	42b5      	cmp	r5, r6
   834e0:	d83d      	bhi.n	8355e <_realloc_r+0xae>
   834e2:	4297      	cmp	r7, r2
   834e4:	da43      	bge.n	8356e <_realloc_r+0xbe>
   834e6:	4bc6      	ldr	r3, [pc, #792]	; (83800 <_realloc_r+0x350>)
   834e8:	eb09 0007 	add.w	r0, r9, r7
   834ec:	6899      	ldr	r1, [r3, #8]
   834ee:	4288      	cmp	r0, r1
   834f0:	f000 80c3 	beq.w	8367a <_realloc_r+0x1ca>
   834f4:	6843      	ldr	r3, [r0, #4]
   834f6:	f023 0101 	bic.w	r1, r3, #1
   834fa:	4401      	add	r1, r0
   834fc:	6849      	ldr	r1, [r1, #4]
   834fe:	07c9      	lsls	r1, r1, #31
   83500:	d54d      	bpl.n	8359e <_realloc_r+0xee>
   83502:	f01e 0f01 	tst.w	lr, #1
   83506:	f000 809b 	beq.w	83640 <_realloc_r+0x190>
   8350a:	4629      	mov	r1, r5
   8350c:	4640      	mov	r0, r8
   8350e:	f7ff fbeb 	bl	82ce8 <_malloc_r>
   83512:	4605      	mov	r5, r0
   83514:	2800      	cmp	r0, #0
   83516:	d03b      	beq.n	83590 <_realloc_r+0xe0>
   83518:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8351c:	f1a0 0208 	sub.w	r2, r0, #8
   83520:	f023 0301 	bic.w	r3, r3, #1
   83524:	444b      	add	r3, r9
   83526:	429a      	cmp	r2, r3
   83528:	f000 812b 	beq.w	83782 <_realloc_r+0x2d2>
   8352c:	1f3a      	subs	r2, r7, #4
   8352e:	2a24      	cmp	r2, #36	; 0x24
   83530:	f200 8118 	bhi.w	83764 <_realloc_r+0x2b4>
   83534:	2a13      	cmp	r2, #19
   83536:	f200 80eb 	bhi.w	83710 <_realloc_r+0x260>
   8353a:	4603      	mov	r3, r0
   8353c:	4622      	mov	r2, r4
   8353e:	6811      	ldr	r1, [r2, #0]
   83540:	6019      	str	r1, [r3, #0]
   83542:	6851      	ldr	r1, [r2, #4]
   83544:	6059      	str	r1, [r3, #4]
   83546:	6892      	ldr	r2, [r2, #8]
   83548:	609a      	str	r2, [r3, #8]
   8354a:	4621      	mov	r1, r4
   8354c:	4640      	mov	r0, r8
   8354e:	f7ff f8ad 	bl	826ac <_free_r>
   83552:	e01d      	b.n	83590 <_realloc_r+0xe0>
   83554:	f026 0607 	bic.w	r6, r6, #7
   83558:	2e00      	cmp	r6, #0
   8355a:	4632      	mov	r2, r6
   8355c:	dabf      	bge.n	834de <_realloc_r+0x2e>
   8355e:	2500      	movs	r5, #0
   83560:	230c      	movs	r3, #12
   83562:	4628      	mov	r0, r5
   83564:	f8c8 3000 	str.w	r3, [r8]
   83568:	b003      	add	sp, #12
   8356a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8356e:	4625      	mov	r5, r4
   83570:	1bbb      	subs	r3, r7, r6
   83572:	2b0f      	cmp	r3, #15
   83574:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83578:	d81d      	bhi.n	835b6 <_realloc_r+0x106>
   8357a:	f002 0201 	and.w	r2, r2, #1
   8357e:	433a      	orrs	r2, r7
   83580:	eb09 0107 	add.w	r1, r9, r7
   83584:	f8c9 2004 	str.w	r2, [r9, #4]
   83588:	684b      	ldr	r3, [r1, #4]
   8358a:	f043 0301 	orr.w	r3, r3, #1
   8358e:	604b      	str	r3, [r1, #4]
   83590:	4640      	mov	r0, r8
   83592:	f7ff ff87 	bl	834a4 <__malloc_unlock>
   83596:	4628      	mov	r0, r5
   83598:	b003      	add	sp, #12
   8359a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8359e:	f023 0303 	bic.w	r3, r3, #3
   835a2:	18f9      	adds	r1, r7, r3
   835a4:	4291      	cmp	r1, r2
   835a6:	db1d      	blt.n	835e4 <_realloc_r+0x134>
   835a8:	68c3      	ldr	r3, [r0, #12]
   835aa:	6882      	ldr	r2, [r0, #8]
   835ac:	4625      	mov	r5, r4
   835ae:	60d3      	str	r3, [r2, #12]
   835b0:	460f      	mov	r7, r1
   835b2:	609a      	str	r2, [r3, #8]
   835b4:	e7dc      	b.n	83570 <_realloc_r+0xc0>
   835b6:	f002 0201 	and.w	r2, r2, #1
   835ba:	eb09 0106 	add.w	r1, r9, r6
   835be:	f043 0301 	orr.w	r3, r3, #1
   835c2:	4332      	orrs	r2, r6
   835c4:	f8c9 2004 	str.w	r2, [r9, #4]
   835c8:	444f      	add	r7, r9
   835ca:	604b      	str	r3, [r1, #4]
   835cc:	687b      	ldr	r3, [r7, #4]
   835ce:	3108      	adds	r1, #8
   835d0:	f043 0301 	orr.w	r3, r3, #1
   835d4:	607b      	str	r3, [r7, #4]
   835d6:	4640      	mov	r0, r8
   835d8:	f7ff f868 	bl	826ac <_free_r>
   835dc:	e7d8      	b.n	83590 <_realloc_r+0xe0>
   835de:	4611      	mov	r1, r2
   835e0:	f7ff bb82 	b.w	82ce8 <_malloc_r>
   835e4:	f01e 0f01 	tst.w	lr, #1
   835e8:	d18f      	bne.n	8350a <_realloc_r+0x5a>
   835ea:	f854 1c08 	ldr.w	r1, [r4, #-8]
   835ee:	eba9 0a01 	sub.w	sl, r9, r1
   835f2:	f8da 1004 	ldr.w	r1, [sl, #4]
   835f6:	f021 0103 	bic.w	r1, r1, #3
   835fa:	440b      	add	r3, r1
   835fc:	443b      	add	r3, r7
   835fe:	4293      	cmp	r3, r2
   83600:	db26      	blt.n	83650 <_realloc_r+0x1a0>
   83602:	4655      	mov	r5, sl
   83604:	68c1      	ldr	r1, [r0, #12]
   83606:	6880      	ldr	r0, [r0, #8]
   83608:	1f3a      	subs	r2, r7, #4
   8360a:	60c1      	str	r1, [r0, #12]
   8360c:	6088      	str	r0, [r1, #8]
   8360e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83612:	f8da 100c 	ldr.w	r1, [sl, #12]
   83616:	2a24      	cmp	r2, #36	; 0x24
   83618:	60c1      	str	r1, [r0, #12]
   8361a:	6088      	str	r0, [r1, #8]
   8361c:	d826      	bhi.n	8366c <_realloc_r+0x1bc>
   8361e:	2a13      	cmp	r2, #19
   83620:	f240 8081 	bls.w	83726 <_realloc_r+0x276>
   83624:	6821      	ldr	r1, [r4, #0]
   83626:	2a1b      	cmp	r2, #27
   83628:	f8ca 1008 	str.w	r1, [sl, #8]
   8362c:	6861      	ldr	r1, [r4, #4]
   8362e:	f8ca 100c 	str.w	r1, [sl, #12]
   83632:	f200 80ad 	bhi.w	83790 <_realloc_r+0x2e0>
   83636:	f104 0008 	add.w	r0, r4, #8
   8363a:	f10a 0210 	add.w	r2, sl, #16
   8363e:	e074      	b.n	8372a <_realloc_r+0x27a>
   83640:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83644:	eba9 0a03 	sub.w	sl, r9, r3
   83648:	f8da 1004 	ldr.w	r1, [sl, #4]
   8364c:	f021 0103 	bic.w	r1, r1, #3
   83650:	187b      	adds	r3, r7, r1
   83652:	4293      	cmp	r3, r2
   83654:	f6ff af59 	blt.w	8350a <_realloc_r+0x5a>
   83658:	4655      	mov	r5, sl
   8365a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8365e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83662:	1f3a      	subs	r2, r7, #4
   83664:	2a24      	cmp	r2, #36	; 0x24
   83666:	60c1      	str	r1, [r0, #12]
   83668:	6088      	str	r0, [r1, #8]
   8366a:	d9d8      	bls.n	8361e <_realloc_r+0x16e>
   8366c:	4621      	mov	r1, r4
   8366e:	4628      	mov	r0, r5
   83670:	461f      	mov	r7, r3
   83672:	46d1      	mov	r9, sl
   83674:	f7ff feac 	bl	833d0 <memmove>
   83678:	e77a      	b.n	83570 <_realloc_r+0xc0>
   8367a:	6841      	ldr	r1, [r0, #4]
   8367c:	f106 0010 	add.w	r0, r6, #16
   83680:	f021 0b03 	bic.w	fp, r1, #3
   83684:	44bb      	add	fp, r7
   83686:	4583      	cmp	fp, r0
   83688:	da58      	bge.n	8373c <_realloc_r+0x28c>
   8368a:	f01e 0f01 	tst.w	lr, #1
   8368e:	f47f af3c 	bne.w	8350a <_realloc_r+0x5a>
   83692:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83696:	eba9 0a01 	sub.w	sl, r9, r1
   8369a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8369e:	f021 0103 	bic.w	r1, r1, #3
   836a2:	448b      	add	fp, r1
   836a4:	4558      	cmp	r0, fp
   836a6:	dcd3      	bgt.n	83650 <_realloc_r+0x1a0>
   836a8:	4655      	mov	r5, sl
   836aa:	f8da 100c 	ldr.w	r1, [sl, #12]
   836ae:	f855 0f08 	ldr.w	r0, [r5, #8]!
   836b2:	1f3a      	subs	r2, r7, #4
   836b4:	2a24      	cmp	r2, #36	; 0x24
   836b6:	60c1      	str	r1, [r0, #12]
   836b8:	6088      	str	r0, [r1, #8]
   836ba:	f200 808d 	bhi.w	837d8 <_realloc_r+0x328>
   836be:	2a13      	cmp	r2, #19
   836c0:	f240 8087 	bls.w	837d2 <_realloc_r+0x322>
   836c4:	6821      	ldr	r1, [r4, #0]
   836c6:	2a1b      	cmp	r2, #27
   836c8:	f8ca 1008 	str.w	r1, [sl, #8]
   836cc:	6861      	ldr	r1, [r4, #4]
   836ce:	f8ca 100c 	str.w	r1, [sl, #12]
   836d2:	f200 8088 	bhi.w	837e6 <_realloc_r+0x336>
   836d6:	f104 0108 	add.w	r1, r4, #8
   836da:	f10a 0210 	add.w	r2, sl, #16
   836de:	6808      	ldr	r0, [r1, #0]
   836e0:	6010      	str	r0, [r2, #0]
   836e2:	6848      	ldr	r0, [r1, #4]
   836e4:	6050      	str	r0, [r2, #4]
   836e6:	6889      	ldr	r1, [r1, #8]
   836e8:	6091      	str	r1, [r2, #8]
   836ea:	ebab 0206 	sub.w	r2, fp, r6
   836ee:	eb0a 0106 	add.w	r1, sl, r6
   836f2:	f042 0201 	orr.w	r2, r2, #1
   836f6:	6099      	str	r1, [r3, #8]
   836f8:	604a      	str	r2, [r1, #4]
   836fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   836fe:	4640      	mov	r0, r8
   83700:	f003 0301 	and.w	r3, r3, #1
   83704:	431e      	orrs	r6, r3
   83706:	f8ca 6004 	str.w	r6, [sl, #4]
   8370a:	f7ff fecb 	bl	834a4 <__malloc_unlock>
   8370e:	e742      	b.n	83596 <_realloc_r+0xe6>
   83710:	6823      	ldr	r3, [r4, #0]
   83712:	2a1b      	cmp	r2, #27
   83714:	6003      	str	r3, [r0, #0]
   83716:	6863      	ldr	r3, [r4, #4]
   83718:	6043      	str	r3, [r0, #4]
   8371a:	d827      	bhi.n	8376c <_realloc_r+0x2bc>
   8371c:	f100 0308 	add.w	r3, r0, #8
   83720:	f104 0208 	add.w	r2, r4, #8
   83724:	e70b      	b.n	8353e <_realloc_r+0x8e>
   83726:	4620      	mov	r0, r4
   83728:	462a      	mov	r2, r5
   8372a:	6801      	ldr	r1, [r0, #0]
   8372c:	461f      	mov	r7, r3
   8372e:	6011      	str	r1, [r2, #0]
   83730:	6841      	ldr	r1, [r0, #4]
   83732:	46d1      	mov	r9, sl
   83734:	6051      	str	r1, [r2, #4]
   83736:	6883      	ldr	r3, [r0, #8]
   83738:	6093      	str	r3, [r2, #8]
   8373a:	e719      	b.n	83570 <_realloc_r+0xc0>
   8373c:	ebab 0b06 	sub.w	fp, fp, r6
   83740:	eb09 0106 	add.w	r1, r9, r6
   83744:	f04b 0201 	orr.w	r2, fp, #1
   83748:	6099      	str	r1, [r3, #8]
   8374a:	604a      	str	r2, [r1, #4]
   8374c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83750:	4640      	mov	r0, r8
   83752:	f003 0301 	and.w	r3, r3, #1
   83756:	431e      	orrs	r6, r3
   83758:	f844 6c04 	str.w	r6, [r4, #-4]
   8375c:	f7ff fea2 	bl	834a4 <__malloc_unlock>
   83760:	4625      	mov	r5, r4
   83762:	e718      	b.n	83596 <_realloc_r+0xe6>
   83764:	4621      	mov	r1, r4
   83766:	f7ff fe33 	bl	833d0 <memmove>
   8376a:	e6ee      	b.n	8354a <_realloc_r+0x9a>
   8376c:	68a3      	ldr	r3, [r4, #8]
   8376e:	2a24      	cmp	r2, #36	; 0x24
   83770:	6083      	str	r3, [r0, #8]
   83772:	68e3      	ldr	r3, [r4, #12]
   83774:	60c3      	str	r3, [r0, #12]
   83776:	d018      	beq.n	837aa <_realloc_r+0x2fa>
   83778:	f100 0310 	add.w	r3, r0, #16
   8377c:	f104 0210 	add.w	r2, r4, #16
   83780:	e6dd      	b.n	8353e <_realloc_r+0x8e>
   83782:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83786:	4625      	mov	r5, r4
   83788:	f023 0303 	bic.w	r3, r3, #3
   8378c:	441f      	add	r7, r3
   8378e:	e6ef      	b.n	83570 <_realloc_r+0xc0>
   83790:	68a1      	ldr	r1, [r4, #8]
   83792:	2a24      	cmp	r2, #36	; 0x24
   83794:	f8ca 1010 	str.w	r1, [sl, #16]
   83798:	68e1      	ldr	r1, [r4, #12]
   8379a:	f8ca 1014 	str.w	r1, [sl, #20]
   8379e:	d00d      	beq.n	837bc <_realloc_r+0x30c>
   837a0:	f104 0010 	add.w	r0, r4, #16
   837a4:	f10a 0218 	add.w	r2, sl, #24
   837a8:	e7bf      	b.n	8372a <_realloc_r+0x27a>
   837aa:	6922      	ldr	r2, [r4, #16]
   837ac:	f100 0318 	add.w	r3, r0, #24
   837b0:	6102      	str	r2, [r0, #16]
   837b2:	6961      	ldr	r1, [r4, #20]
   837b4:	f104 0218 	add.w	r2, r4, #24
   837b8:	6141      	str	r1, [r0, #20]
   837ba:	e6c0      	b.n	8353e <_realloc_r+0x8e>
   837bc:	6922      	ldr	r2, [r4, #16]
   837be:	f104 0018 	add.w	r0, r4, #24
   837c2:	f8ca 2018 	str.w	r2, [sl, #24]
   837c6:	6961      	ldr	r1, [r4, #20]
   837c8:	f10a 0220 	add.w	r2, sl, #32
   837cc:	f8ca 101c 	str.w	r1, [sl, #28]
   837d0:	e7ab      	b.n	8372a <_realloc_r+0x27a>
   837d2:	4621      	mov	r1, r4
   837d4:	462a      	mov	r2, r5
   837d6:	e782      	b.n	836de <_realloc_r+0x22e>
   837d8:	4621      	mov	r1, r4
   837da:	4628      	mov	r0, r5
   837dc:	9301      	str	r3, [sp, #4]
   837de:	f7ff fdf7 	bl	833d0 <memmove>
   837e2:	9b01      	ldr	r3, [sp, #4]
   837e4:	e781      	b.n	836ea <_realloc_r+0x23a>
   837e6:	68a1      	ldr	r1, [r4, #8]
   837e8:	2a24      	cmp	r2, #36	; 0x24
   837ea:	f8ca 1010 	str.w	r1, [sl, #16]
   837ee:	68e1      	ldr	r1, [r4, #12]
   837f0:	f8ca 1014 	str.w	r1, [sl, #20]
   837f4:	d006      	beq.n	83804 <_realloc_r+0x354>
   837f6:	f104 0110 	add.w	r1, r4, #16
   837fa:	f10a 0218 	add.w	r2, sl, #24
   837fe:	e76e      	b.n	836de <_realloc_r+0x22e>
   83800:	200706d0 	.word	0x200706d0
   83804:	6922      	ldr	r2, [r4, #16]
   83806:	f104 0118 	add.w	r1, r4, #24
   8380a:	f8ca 2018 	str.w	r2, [sl, #24]
   8380e:	6960      	ldr	r0, [r4, #20]
   83810:	f10a 0220 	add.w	r2, sl, #32
   83814:	f8ca 001c 	str.w	r0, [sl, #28]
   83818:	e761      	b.n	836de <_realloc_r+0x22e>
   8381a:	bf00      	nop

0008381c <_sbrk_r>:
   8381c:	b538      	push	{r3, r4, r5, lr}
   8381e:	2300      	movs	r3, #0
   83820:	4c06      	ldr	r4, [pc, #24]	; (8383c <_sbrk_r+0x20>)
   83822:	4605      	mov	r5, r0
   83824:	4608      	mov	r0, r1
   83826:	6023      	str	r3, [r4, #0]
   83828:	f7fd fbd0 	bl	80fcc <_sbrk>
   8382c:	1c43      	adds	r3, r0, #1
   8382e:	d000      	beq.n	83832 <_sbrk_r+0x16>
   83830:	bd38      	pop	{r3, r4, r5, pc}
   83832:	6823      	ldr	r3, [r4, #0]
   83834:	2b00      	cmp	r3, #0
   83836:	d0fb      	beq.n	83830 <_sbrk_r+0x14>
   83838:	602b      	str	r3, [r5, #0]
   8383a:	bd38      	pop	{r3, r4, r5, pc}
   8383c:	20073f6c 	.word	0x20073f6c

00083840 <__sread>:
   83840:	b510      	push	{r4, lr}
   83842:	460c      	mov	r4, r1
   83844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83848:	f000 f9f4 	bl	83c34 <_read_r>
   8384c:	2800      	cmp	r0, #0
   8384e:	db03      	blt.n	83858 <__sread+0x18>
   83850:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83852:	4403      	add	r3, r0
   83854:	6523      	str	r3, [r4, #80]	; 0x50
   83856:	bd10      	pop	{r4, pc}
   83858:	89a3      	ldrh	r3, [r4, #12]
   8385a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8385e:	81a3      	strh	r3, [r4, #12]
   83860:	bd10      	pop	{r4, pc}
   83862:	bf00      	nop

00083864 <__swrite>:
   83864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83868:	460c      	mov	r4, r1
   8386a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8386e:	461f      	mov	r7, r3
   83870:	05cb      	lsls	r3, r1, #23
   83872:	4616      	mov	r6, r2
   83874:	4605      	mov	r5, r0
   83876:	d507      	bpl.n	83888 <__swrite+0x24>
   83878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8387c:	2302      	movs	r3, #2
   8387e:	2200      	movs	r2, #0
   83880:	f000 f9c2 	bl	83c08 <_lseek_r>
   83884:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83888:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8388c:	81a1      	strh	r1, [r4, #12]
   8388e:	463b      	mov	r3, r7
   83890:	4632      	mov	r2, r6
   83892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83896:	4628      	mov	r0, r5
   83898:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8389c:	f000 b8a2 	b.w	839e4 <_write_r>

000838a0 <__sseek>:
   838a0:	b510      	push	{r4, lr}
   838a2:	460c      	mov	r4, r1
   838a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   838a8:	f000 f9ae 	bl	83c08 <_lseek_r>
   838ac:	89a3      	ldrh	r3, [r4, #12]
   838ae:	1c42      	adds	r2, r0, #1
   838b0:	bf0e      	itee	eq
   838b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   838b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   838ba:	6520      	strne	r0, [r4, #80]	; 0x50
   838bc:	81a3      	strh	r3, [r4, #12]
   838be:	bd10      	pop	{r4, pc}

000838c0 <__sclose>:
   838c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   838c4:	f000 b906 	b.w	83ad4 <_close_r>

000838c8 <__swbuf_r>:
   838c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   838ca:	460d      	mov	r5, r1
   838cc:	4614      	mov	r4, r2
   838ce:	4606      	mov	r6, r0
   838d0:	b110      	cbz	r0, 838d8 <__swbuf_r+0x10>
   838d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   838d4:	2b00      	cmp	r3, #0
   838d6:	d04b      	beq.n	83970 <__swbuf_r+0xa8>
   838d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   838dc:	69a3      	ldr	r3, [r4, #24]
   838de:	b291      	uxth	r1, r2
   838e0:	0708      	lsls	r0, r1, #28
   838e2:	60a3      	str	r3, [r4, #8]
   838e4:	d539      	bpl.n	8395a <__swbuf_r+0x92>
   838e6:	6923      	ldr	r3, [r4, #16]
   838e8:	2b00      	cmp	r3, #0
   838ea:	d036      	beq.n	8395a <__swbuf_r+0x92>
   838ec:	b2ed      	uxtb	r5, r5
   838ee:	0489      	lsls	r1, r1, #18
   838f0:	462f      	mov	r7, r5
   838f2:	d515      	bpl.n	83920 <__swbuf_r+0x58>
   838f4:	6822      	ldr	r2, [r4, #0]
   838f6:	6961      	ldr	r1, [r4, #20]
   838f8:	1ad3      	subs	r3, r2, r3
   838fa:	428b      	cmp	r3, r1
   838fc:	da1c      	bge.n	83938 <__swbuf_r+0x70>
   838fe:	3301      	adds	r3, #1
   83900:	68a1      	ldr	r1, [r4, #8]
   83902:	1c50      	adds	r0, r2, #1
   83904:	3901      	subs	r1, #1
   83906:	60a1      	str	r1, [r4, #8]
   83908:	6020      	str	r0, [r4, #0]
   8390a:	7015      	strb	r5, [r2, #0]
   8390c:	6962      	ldr	r2, [r4, #20]
   8390e:	429a      	cmp	r2, r3
   83910:	d01a      	beq.n	83948 <__swbuf_r+0x80>
   83912:	89a3      	ldrh	r3, [r4, #12]
   83914:	07db      	lsls	r3, r3, #31
   83916:	d501      	bpl.n	8391c <__swbuf_r+0x54>
   83918:	2d0a      	cmp	r5, #10
   8391a:	d015      	beq.n	83948 <__swbuf_r+0x80>
   8391c:	4638      	mov	r0, r7
   8391e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83920:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83922:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83926:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8392a:	81a2      	strh	r2, [r4, #12]
   8392c:	6822      	ldr	r2, [r4, #0]
   8392e:	6661      	str	r1, [r4, #100]	; 0x64
   83930:	6961      	ldr	r1, [r4, #20]
   83932:	1ad3      	subs	r3, r2, r3
   83934:	428b      	cmp	r3, r1
   83936:	dbe2      	blt.n	838fe <__swbuf_r+0x36>
   83938:	4621      	mov	r1, r4
   8393a:	4630      	mov	r0, r6
   8393c:	f7fe fd38 	bl	823b0 <_fflush_r>
   83940:	b940      	cbnz	r0, 83954 <__swbuf_r+0x8c>
   83942:	2301      	movs	r3, #1
   83944:	6822      	ldr	r2, [r4, #0]
   83946:	e7db      	b.n	83900 <__swbuf_r+0x38>
   83948:	4621      	mov	r1, r4
   8394a:	4630      	mov	r0, r6
   8394c:	f7fe fd30 	bl	823b0 <_fflush_r>
   83950:	2800      	cmp	r0, #0
   83952:	d0e3      	beq.n	8391c <__swbuf_r+0x54>
   83954:	f04f 37ff 	mov.w	r7, #4294967295
   83958:	e7e0      	b.n	8391c <__swbuf_r+0x54>
   8395a:	4621      	mov	r1, r4
   8395c:	4630      	mov	r0, r6
   8395e:	f7fe fc17 	bl	82190 <__swsetup_r>
   83962:	2800      	cmp	r0, #0
   83964:	d1f6      	bne.n	83954 <__swbuf_r+0x8c>
   83966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8396a:	6923      	ldr	r3, [r4, #16]
   8396c:	b291      	uxth	r1, r2
   8396e:	e7bd      	b.n	838ec <__swbuf_r+0x24>
   83970:	f7fe fd76 	bl	82460 <__sinit>
   83974:	e7b0      	b.n	838d8 <__swbuf_r+0x10>
   83976:	bf00      	nop

00083978 <_wcrtomb_r>:
   83978:	b5f0      	push	{r4, r5, r6, r7, lr}
   8397a:	4606      	mov	r6, r0
   8397c:	b085      	sub	sp, #20
   8397e:	461f      	mov	r7, r3
   83980:	b189      	cbz	r1, 839a6 <_wcrtomb_r+0x2e>
   83982:	4c10      	ldr	r4, [pc, #64]	; (839c4 <_wcrtomb_r+0x4c>)
   83984:	4d10      	ldr	r5, [pc, #64]	; (839c8 <_wcrtomb_r+0x50>)
   83986:	6824      	ldr	r4, [r4, #0]
   83988:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8398a:	2c00      	cmp	r4, #0
   8398c:	bf08      	it	eq
   8398e:	462c      	moveq	r4, r5
   83990:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83994:	47a0      	blx	r4
   83996:	1c43      	adds	r3, r0, #1
   83998:	d103      	bne.n	839a2 <_wcrtomb_r+0x2a>
   8399a:	2200      	movs	r2, #0
   8399c:	238a      	movs	r3, #138	; 0x8a
   8399e:	603a      	str	r2, [r7, #0]
   839a0:	6033      	str	r3, [r6, #0]
   839a2:	b005      	add	sp, #20
   839a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   839a6:	460c      	mov	r4, r1
   839a8:	4a06      	ldr	r2, [pc, #24]	; (839c4 <_wcrtomb_r+0x4c>)
   839aa:	4d07      	ldr	r5, [pc, #28]	; (839c8 <_wcrtomb_r+0x50>)
   839ac:	6811      	ldr	r1, [r2, #0]
   839ae:	4622      	mov	r2, r4
   839b0:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   839b2:	a901      	add	r1, sp, #4
   839b4:	2c00      	cmp	r4, #0
   839b6:	bf08      	it	eq
   839b8:	462c      	moveq	r4, r5
   839ba:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   839be:	47a0      	blx	r4
   839c0:	e7e9      	b.n	83996 <_wcrtomb_r+0x1e>
   839c2:	bf00      	nop
   839c4:	20070134 	.word	0x20070134
   839c8:	20070564 	.word	0x20070564

000839cc <__ascii_wctomb>:
   839cc:	b119      	cbz	r1, 839d6 <__ascii_wctomb+0xa>
   839ce:	2aff      	cmp	r2, #255	; 0xff
   839d0:	d803      	bhi.n	839da <__ascii_wctomb+0xe>
   839d2:	700a      	strb	r2, [r1, #0]
   839d4:	2101      	movs	r1, #1
   839d6:	4608      	mov	r0, r1
   839d8:	4770      	bx	lr
   839da:	238a      	movs	r3, #138	; 0x8a
   839dc:	f04f 31ff 	mov.w	r1, #4294967295
   839e0:	6003      	str	r3, [r0, #0]
   839e2:	e7f8      	b.n	839d6 <__ascii_wctomb+0xa>

000839e4 <_write_r>:
   839e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   839e6:	460e      	mov	r6, r1
   839e8:	2500      	movs	r5, #0
   839ea:	4c08      	ldr	r4, [pc, #32]	; (83a0c <_write_r+0x28>)
   839ec:	4611      	mov	r1, r2
   839ee:	4607      	mov	r7, r0
   839f0:	461a      	mov	r2, r3
   839f2:	4630      	mov	r0, r6
   839f4:	6025      	str	r5, [r4, #0]
   839f6:	f7fc febb 	bl	80770 <_write>
   839fa:	1c43      	adds	r3, r0, #1
   839fc:	d000      	beq.n	83a00 <_write_r+0x1c>
   839fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a00:	6823      	ldr	r3, [r4, #0]
   83a02:	2b00      	cmp	r3, #0
   83a04:	d0fb      	beq.n	839fe <_write_r+0x1a>
   83a06:	603b      	str	r3, [r7, #0]
   83a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a0a:	bf00      	nop
   83a0c:	20073f6c 	.word	0x20073f6c

00083a10 <__register_exitproc>:
   83a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83a14:	4d2c      	ldr	r5, [pc, #176]	; (83ac8 <__register_exitproc+0xb8>)
   83a16:	4606      	mov	r6, r0
   83a18:	6828      	ldr	r0, [r5, #0]
   83a1a:	4698      	mov	r8, r3
   83a1c:	460f      	mov	r7, r1
   83a1e:	4691      	mov	r9, r2
   83a20:	f7ff f8de 	bl	82be0 <__retarget_lock_acquire_recursive>
   83a24:	4b29      	ldr	r3, [pc, #164]	; (83acc <__register_exitproc+0xbc>)
   83a26:	681c      	ldr	r4, [r3, #0]
   83a28:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83a2c:	2b00      	cmp	r3, #0
   83a2e:	d03e      	beq.n	83aae <__register_exitproc+0x9e>
   83a30:	685a      	ldr	r2, [r3, #4]
   83a32:	2a1f      	cmp	r2, #31
   83a34:	dc1c      	bgt.n	83a70 <__register_exitproc+0x60>
   83a36:	f102 0e01 	add.w	lr, r2, #1
   83a3a:	b176      	cbz	r6, 83a5a <__register_exitproc+0x4a>
   83a3c:	2101      	movs	r1, #1
   83a3e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83a42:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83a46:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83a4a:	4091      	lsls	r1, r2
   83a4c:	4308      	orrs	r0, r1
   83a4e:	2e02      	cmp	r6, #2
   83a50:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83a54:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83a58:	d023      	beq.n	83aa2 <__register_exitproc+0x92>
   83a5a:	3202      	adds	r2, #2
   83a5c:	f8c3 e004 	str.w	lr, [r3, #4]
   83a60:	6828      	ldr	r0, [r5, #0]
   83a62:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83a66:	f7ff f8bd 	bl	82be4 <__retarget_lock_release_recursive>
   83a6a:	2000      	movs	r0, #0
   83a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83a70:	4b17      	ldr	r3, [pc, #92]	; (83ad0 <__register_exitproc+0xc0>)
   83a72:	b30b      	cbz	r3, 83ab8 <__register_exitproc+0xa8>
   83a74:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83a78:	f7ff f92e 	bl	82cd8 <malloc>
   83a7c:	4603      	mov	r3, r0
   83a7e:	b1d8      	cbz	r0, 83ab8 <__register_exitproc+0xa8>
   83a80:	2000      	movs	r0, #0
   83a82:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83a86:	f04f 0e01 	mov.w	lr, #1
   83a8a:	6058      	str	r0, [r3, #4]
   83a8c:	6019      	str	r1, [r3, #0]
   83a8e:	4602      	mov	r2, r0
   83a90:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83a94:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83a98:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83a9c:	2e00      	cmp	r6, #0
   83a9e:	d0dc      	beq.n	83a5a <__register_exitproc+0x4a>
   83aa0:	e7cc      	b.n	83a3c <__register_exitproc+0x2c>
   83aa2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83aa6:	4301      	orrs	r1, r0
   83aa8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83aac:	e7d5      	b.n	83a5a <__register_exitproc+0x4a>
   83aae:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83ab2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83ab6:	e7bb      	b.n	83a30 <__register_exitproc+0x20>
   83ab8:	6828      	ldr	r0, [r5, #0]
   83aba:	f7ff f893 	bl	82be4 <__retarget_lock_release_recursive>
   83abe:	f04f 30ff 	mov.w	r0, #4294967295
   83ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83ac6:	bf00      	nop
   83ac8:	20070560 	.word	0x20070560
   83acc:	00083fd8 	.word	0x00083fd8
   83ad0:	00082cd9 	.word	0x00082cd9

00083ad4 <_close_r>:
   83ad4:	b538      	push	{r3, r4, r5, lr}
   83ad6:	2300      	movs	r3, #0
   83ad8:	4c06      	ldr	r4, [pc, #24]	; (83af4 <_close_r+0x20>)
   83ada:	4605      	mov	r5, r0
   83adc:	4608      	mov	r0, r1
   83ade:	6023      	str	r3, [r4, #0]
   83ae0:	f7fd fa90 	bl	81004 <_close>
   83ae4:	1c43      	adds	r3, r0, #1
   83ae6:	d000      	beq.n	83aea <_close_r+0x16>
   83ae8:	bd38      	pop	{r3, r4, r5, pc}
   83aea:	6823      	ldr	r3, [r4, #0]
   83aec:	2b00      	cmp	r3, #0
   83aee:	d0fb      	beq.n	83ae8 <_close_r+0x14>
   83af0:	602b      	str	r3, [r5, #0]
   83af2:	bd38      	pop	{r3, r4, r5, pc}
   83af4:	20073f6c 	.word	0x20073f6c

00083af8 <_fclose_r>:
   83af8:	b570      	push	{r4, r5, r6, lr}
   83afa:	b159      	cbz	r1, 83b14 <_fclose_r+0x1c>
   83afc:	4605      	mov	r5, r0
   83afe:	460c      	mov	r4, r1
   83b00:	b110      	cbz	r0, 83b08 <_fclose_r+0x10>
   83b02:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b04:	2b00      	cmp	r3, #0
   83b06:	d03c      	beq.n	83b82 <_fclose_r+0x8a>
   83b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83b0a:	07d8      	lsls	r0, r3, #31
   83b0c:	d505      	bpl.n	83b1a <_fclose_r+0x22>
   83b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b12:	b92b      	cbnz	r3, 83b20 <_fclose_r+0x28>
   83b14:	2600      	movs	r6, #0
   83b16:	4630      	mov	r0, r6
   83b18:	bd70      	pop	{r4, r5, r6, pc}
   83b1a:	89a3      	ldrh	r3, [r4, #12]
   83b1c:	0599      	lsls	r1, r3, #22
   83b1e:	d53c      	bpl.n	83b9a <_fclose_r+0xa2>
   83b20:	4621      	mov	r1, r4
   83b22:	4628      	mov	r0, r5
   83b24:	f7fe fba8 	bl	82278 <__sflush_r>
   83b28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83b2a:	4606      	mov	r6, r0
   83b2c:	b133      	cbz	r3, 83b3c <_fclose_r+0x44>
   83b2e:	69e1      	ldr	r1, [r4, #28]
   83b30:	4628      	mov	r0, r5
   83b32:	4798      	blx	r3
   83b34:	2800      	cmp	r0, #0
   83b36:	bfb8      	it	lt
   83b38:	f04f 36ff 	movlt.w	r6, #4294967295
   83b3c:	89a3      	ldrh	r3, [r4, #12]
   83b3e:	061a      	lsls	r2, r3, #24
   83b40:	d422      	bmi.n	83b88 <_fclose_r+0x90>
   83b42:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83b44:	b141      	cbz	r1, 83b58 <_fclose_r+0x60>
   83b46:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83b4a:	4299      	cmp	r1, r3
   83b4c:	d002      	beq.n	83b54 <_fclose_r+0x5c>
   83b4e:	4628      	mov	r0, r5
   83b50:	f7fe fdac 	bl	826ac <_free_r>
   83b54:	2300      	movs	r3, #0
   83b56:	6323      	str	r3, [r4, #48]	; 0x30
   83b58:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83b5a:	b121      	cbz	r1, 83b66 <_fclose_r+0x6e>
   83b5c:	4628      	mov	r0, r5
   83b5e:	f7fe fda5 	bl	826ac <_free_r>
   83b62:	2300      	movs	r3, #0
   83b64:	6463      	str	r3, [r4, #68]	; 0x44
   83b66:	f7fe fcab 	bl	824c0 <__sfp_lock_acquire>
   83b6a:	2200      	movs	r2, #0
   83b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83b6e:	81a2      	strh	r2, [r4, #12]
   83b70:	07db      	lsls	r3, r3, #31
   83b72:	d50e      	bpl.n	83b92 <_fclose_r+0x9a>
   83b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b76:	f7ff f831 	bl	82bdc <__retarget_lock_close_recursive>
   83b7a:	f7fe fca7 	bl	824cc <__sfp_lock_release>
   83b7e:	4630      	mov	r0, r6
   83b80:	bd70      	pop	{r4, r5, r6, pc}
   83b82:	f7fe fc6d 	bl	82460 <__sinit>
   83b86:	e7bf      	b.n	83b08 <_fclose_r+0x10>
   83b88:	6921      	ldr	r1, [r4, #16]
   83b8a:	4628      	mov	r0, r5
   83b8c:	f7fe fd8e 	bl	826ac <_free_r>
   83b90:	e7d7      	b.n	83b42 <_fclose_r+0x4a>
   83b92:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b94:	f7ff f826 	bl	82be4 <__retarget_lock_release_recursive>
   83b98:	e7ec      	b.n	83b74 <_fclose_r+0x7c>
   83b9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b9c:	f7ff f820 	bl	82be0 <__retarget_lock_acquire_recursive>
   83ba0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ba4:	2b00      	cmp	r3, #0
   83ba6:	d1bb      	bne.n	83b20 <_fclose_r+0x28>
   83ba8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83baa:	f016 0601 	ands.w	r6, r6, #1
   83bae:	d1b1      	bne.n	83b14 <_fclose_r+0x1c>
   83bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83bb2:	f7ff f817 	bl	82be4 <__retarget_lock_release_recursive>
   83bb6:	4630      	mov	r0, r6
   83bb8:	bd70      	pop	{r4, r5, r6, pc}
   83bba:	bf00      	nop

00083bbc <_fstat_r>:
   83bbc:	b570      	push	{r4, r5, r6, lr}
   83bbe:	460d      	mov	r5, r1
   83bc0:	2300      	movs	r3, #0
   83bc2:	4c07      	ldr	r4, [pc, #28]	; (83be0 <_fstat_r+0x24>)
   83bc4:	4606      	mov	r6, r0
   83bc6:	4611      	mov	r1, r2
   83bc8:	4628      	mov	r0, r5
   83bca:	6023      	str	r3, [r4, #0]
   83bcc:	f7fd fa1d 	bl	8100a <_fstat>
   83bd0:	1c43      	adds	r3, r0, #1
   83bd2:	d000      	beq.n	83bd6 <_fstat_r+0x1a>
   83bd4:	bd70      	pop	{r4, r5, r6, pc}
   83bd6:	6823      	ldr	r3, [r4, #0]
   83bd8:	2b00      	cmp	r3, #0
   83bda:	d0fb      	beq.n	83bd4 <_fstat_r+0x18>
   83bdc:	6033      	str	r3, [r6, #0]
   83bde:	bd70      	pop	{r4, r5, r6, pc}
   83be0:	20073f6c 	.word	0x20073f6c

00083be4 <_isatty_r>:
   83be4:	b538      	push	{r3, r4, r5, lr}
   83be6:	2300      	movs	r3, #0
   83be8:	4c06      	ldr	r4, [pc, #24]	; (83c04 <_isatty_r+0x20>)
   83bea:	4605      	mov	r5, r0
   83bec:	4608      	mov	r0, r1
   83bee:	6023      	str	r3, [r4, #0]
   83bf0:	f7fd fa10 	bl	81014 <_isatty>
   83bf4:	1c43      	adds	r3, r0, #1
   83bf6:	d000      	beq.n	83bfa <_isatty_r+0x16>
   83bf8:	bd38      	pop	{r3, r4, r5, pc}
   83bfa:	6823      	ldr	r3, [r4, #0]
   83bfc:	2b00      	cmp	r3, #0
   83bfe:	d0fb      	beq.n	83bf8 <_isatty_r+0x14>
   83c00:	602b      	str	r3, [r5, #0]
   83c02:	bd38      	pop	{r3, r4, r5, pc}
   83c04:	20073f6c 	.word	0x20073f6c

00083c08 <_lseek_r>:
   83c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c0a:	460e      	mov	r6, r1
   83c0c:	2500      	movs	r5, #0
   83c0e:	4c08      	ldr	r4, [pc, #32]	; (83c30 <_lseek_r+0x28>)
   83c10:	4611      	mov	r1, r2
   83c12:	4607      	mov	r7, r0
   83c14:	461a      	mov	r2, r3
   83c16:	4630      	mov	r0, r6
   83c18:	6025      	str	r5, [r4, #0]
   83c1a:	f7fd f9fd 	bl	81018 <_lseek>
   83c1e:	1c43      	adds	r3, r0, #1
   83c20:	d000      	beq.n	83c24 <_lseek_r+0x1c>
   83c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c24:	6823      	ldr	r3, [r4, #0]
   83c26:	2b00      	cmp	r3, #0
   83c28:	d0fb      	beq.n	83c22 <_lseek_r+0x1a>
   83c2a:	603b      	str	r3, [r7, #0]
   83c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c2e:	bf00      	nop
   83c30:	20073f6c 	.word	0x20073f6c

00083c34 <_read_r>:
   83c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c36:	460e      	mov	r6, r1
   83c38:	2500      	movs	r5, #0
   83c3a:	4c08      	ldr	r4, [pc, #32]	; (83c5c <_read_r+0x28>)
   83c3c:	4611      	mov	r1, r2
   83c3e:	4607      	mov	r7, r0
   83c40:	461a      	mov	r2, r3
   83c42:	4630      	mov	r0, r6
   83c44:	6025      	str	r5, [r4, #0]
   83c46:	f7fc fb2f 	bl	802a8 <_read>
   83c4a:	1c43      	adds	r3, r0, #1
   83c4c:	d000      	beq.n	83c50 <_read_r+0x1c>
   83c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c50:	6823      	ldr	r3, [r4, #0]
   83c52:	2b00      	cmp	r3, #0
   83c54:	d0fb      	beq.n	83c4e <_read_r+0x1a>
   83c56:	603b      	str	r3, [r7, #0]
   83c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c5a:	bf00      	nop
   83c5c:	20073f6c 	.word	0x20073f6c

00083c60 <__aeabi_uldivmod>:
   83c60:	b953      	cbnz	r3, 83c78 <__aeabi_uldivmod+0x18>
   83c62:	b94a      	cbnz	r2, 83c78 <__aeabi_uldivmod+0x18>
   83c64:	2900      	cmp	r1, #0
   83c66:	bf08      	it	eq
   83c68:	2800      	cmpeq	r0, #0
   83c6a:	bf1c      	itt	ne
   83c6c:	f04f 31ff 	movne.w	r1, #4294967295
   83c70:	f04f 30ff 	movne.w	r0, #4294967295
   83c74:	f000 b97a 	b.w	83f6c <__aeabi_idiv0>
   83c78:	f1ad 0c08 	sub.w	ip, sp, #8
   83c7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83c80:	f000 f806 	bl	83c90 <__udivmoddi4>
   83c84:	f8dd e004 	ldr.w	lr, [sp, #4]
   83c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83c8c:	b004      	add	sp, #16
   83c8e:	4770      	bx	lr

00083c90 <__udivmoddi4>:
   83c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83c94:	468c      	mov	ip, r1
   83c96:	460e      	mov	r6, r1
   83c98:	4604      	mov	r4, r0
   83c9a:	9d08      	ldr	r5, [sp, #32]
   83c9c:	2b00      	cmp	r3, #0
   83c9e:	d150      	bne.n	83d42 <__udivmoddi4+0xb2>
   83ca0:	428a      	cmp	r2, r1
   83ca2:	4617      	mov	r7, r2
   83ca4:	d96c      	bls.n	83d80 <__udivmoddi4+0xf0>
   83ca6:	fab2 fe82 	clz	lr, r2
   83caa:	f1be 0f00 	cmp.w	lr, #0
   83cae:	d00b      	beq.n	83cc8 <__udivmoddi4+0x38>
   83cb0:	f1ce 0c20 	rsb	ip, lr, #32
   83cb4:	fa01 f60e 	lsl.w	r6, r1, lr
   83cb8:	fa20 fc0c 	lsr.w	ip, r0, ip
   83cbc:	fa02 f70e 	lsl.w	r7, r2, lr
   83cc0:	ea4c 0c06 	orr.w	ip, ip, r6
   83cc4:	fa00 f40e 	lsl.w	r4, r0, lr
   83cc8:	0c3a      	lsrs	r2, r7, #16
   83cca:	fbbc f9f2 	udiv	r9, ip, r2
   83cce:	b2bb      	uxth	r3, r7
   83cd0:	fb02 cc19 	mls	ip, r2, r9, ip
   83cd4:	fb09 fa03 	mul.w	sl, r9, r3
   83cd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83cdc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83ce0:	45b2      	cmp	sl, r6
   83ce2:	d90a      	bls.n	83cfa <__udivmoddi4+0x6a>
   83ce4:	19f6      	adds	r6, r6, r7
   83ce6:	f109 31ff 	add.w	r1, r9, #4294967295
   83cea:	f080 8125 	bcs.w	83f38 <__udivmoddi4+0x2a8>
   83cee:	45b2      	cmp	sl, r6
   83cf0:	f240 8122 	bls.w	83f38 <__udivmoddi4+0x2a8>
   83cf4:	f1a9 0902 	sub.w	r9, r9, #2
   83cf8:	443e      	add	r6, r7
   83cfa:	eba6 060a 	sub.w	r6, r6, sl
   83cfe:	fbb6 f0f2 	udiv	r0, r6, r2
   83d02:	fb02 6610 	mls	r6, r2, r0, r6
   83d06:	fb00 f303 	mul.w	r3, r0, r3
   83d0a:	b2a4      	uxth	r4, r4
   83d0c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83d10:	42a3      	cmp	r3, r4
   83d12:	d909      	bls.n	83d28 <__udivmoddi4+0x98>
   83d14:	19e4      	adds	r4, r4, r7
   83d16:	f100 32ff 	add.w	r2, r0, #4294967295
   83d1a:	f080 810b 	bcs.w	83f34 <__udivmoddi4+0x2a4>
   83d1e:	42a3      	cmp	r3, r4
   83d20:	f240 8108 	bls.w	83f34 <__udivmoddi4+0x2a4>
   83d24:	3802      	subs	r0, #2
   83d26:	443c      	add	r4, r7
   83d28:	2100      	movs	r1, #0
   83d2a:	1ae4      	subs	r4, r4, r3
   83d2c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83d30:	2d00      	cmp	r5, #0
   83d32:	d062      	beq.n	83dfa <__udivmoddi4+0x16a>
   83d34:	2300      	movs	r3, #0
   83d36:	fa24 f40e 	lsr.w	r4, r4, lr
   83d3a:	602c      	str	r4, [r5, #0]
   83d3c:	606b      	str	r3, [r5, #4]
   83d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d42:	428b      	cmp	r3, r1
   83d44:	d907      	bls.n	83d56 <__udivmoddi4+0xc6>
   83d46:	2d00      	cmp	r5, #0
   83d48:	d055      	beq.n	83df6 <__udivmoddi4+0x166>
   83d4a:	2100      	movs	r1, #0
   83d4c:	e885 0041 	stmia.w	r5, {r0, r6}
   83d50:	4608      	mov	r0, r1
   83d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d56:	fab3 f183 	clz	r1, r3
   83d5a:	2900      	cmp	r1, #0
   83d5c:	f040 808f 	bne.w	83e7e <__udivmoddi4+0x1ee>
   83d60:	42b3      	cmp	r3, r6
   83d62:	d302      	bcc.n	83d6a <__udivmoddi4+0xda>
   83d64:	4282      	cmp	r2, r0
   83d66:	f200 80fc 	bhi.w	83f62 <__udivmoddi4+0x2d2>
   83d6a:	1a84      	subs	r4, r0, r2
   83d6c:	eb66 0603 	sbc.w	r6, r6, r3
   83d70:	2001      	movs	r0, #1
   83d72:	46b4      	mov	ip, r6
   83d74:	2d00      	cmp	r5, #0
   83d76:	d040      	beq.n	83dfa <__udivmoddi4+0x16a>
   83d78:	e885 1010 	stmia.w	r5, {r4, ip}
   83d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d80:	b912      	cbnz	r2, 83d88 <__udivmoddi4+0xf8>
   83d82:	2701      	movs	r7, #1
   83d84:	fbb7 f7f2 	udiv	r7, r7, r2
   83d88:	fab7 fe87 	clz	lr, r7
   83d8c:	f1be 0f00 	cmp.w	lr, #0
   83d90:	d135      	bne.n	83dfe <__udivmoddi4+0x16e>
   83d92:	2101      	movs	r1, #1
   83d94:	1bf6      	subs	r6, r6, r7
   83d96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83d9a:	fa1f f887 	uxth.w	r8, r7
   83d9e:	fbb6 f2fc 	udiv	r2, r6, ip
   83da2:	fb0c 6612 	mls	r6, ip, r2, r6
   83da6:	fb08 f002 	mul.w	r0, r8, r2
   83daa:	0c23      	lsrs	r3, r4, #16
   83dac:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83db0:	42b0      	cmp	r0, r6
   83db2:	d907      	bls.n	83dc4 <__udivmoddi4+0x134>
   83db4:	19f6      	adds	r6, r6, r7
   83db6:	f102 33ff 	add.w	r3, r2, #4294967295
   83dba:	d202      	bcs.n	83dc2 <__udivmoddi4+0x132>
   83dbc:	42b0      	cmp	r0, r6
   83dbe:	f200 80d2 	bhi.w	83f66 <__udivmoddi4+0x2d6>
   83dc2:	461a      	mov	r2, r3
   83dc4:	1a36      	subs	r6, r6, r0
   83dc6:	fbb6 f0fc 	udiv	r0, r6, ip
   83dca:	fb0c 6610 	mls	r6, ip, r0, r6
   83dce:	fb08 f800 	mul.w	r8, r8, r0
   83dd2:	b2a3      	uxth	r3, r4
   83dd4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83dd8:	45a0      	cmp	r8, r4
   83dda:	d907      	bls.n	83dec <__udivmoddi4+0x15c>
   83ddc:	19e4      	adds	r4, r4, r7
   83dde:	f100 33ff 	add.w	r3, r0, #4294967295
   83de2:	d202      	bcs.n	83dea <__udivmoddi4+0x15a>
   83de4:	45a0      	cmp	r8, r4
   83de6:	f200 80b9 	bhi.w	83f5c <__udivmoddi4+0x2cc>
   83dea:	4618      	mov	r0, r3
   83dec:	eba4 0408 	sub.w	r4, r4, r8
   83df0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83df4:	e79c      	b.n	83d30 <__udivmoddi4+0xa0>
   83df6:	4629      	mov	r1, r5
   83df8:	4628      	mov	r0, r5
   83dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83dfe:	fa07 f70e 	lsl.w	r7, r7, lr
   83e02:	f1ce 0320 	rsb	r3, lr, #32
   83e06:	fa26 f203 	lsr.w	r2, r6, r3
   83e0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83e0e:	fbb2 f1fc 	udiv	r1, r2, ip
   83e12:	fa1f f887 	uxth.w	r8, r7
   83e16:	fb0c 2211 	mls	r2, ip, r1, r2
   83e1a:	fa06 f60e 	lsl.w	r6, r6, lr
   83e1e:	fa20 f303 	lsr.w	r3, r0, r3
   83e22:	fb01 f908 	mul.w	r9, r1, r8
   83e26:	4333      	orrs	r3, r6
   83e28:	0c1e      	lsrs	r6, r3, #16
   83e2a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83e2e:	45b1      	cmp	r9, r6
   83e30:	fa00 f40e 	lsl.w	r4, r0, lr
   83e34:	d909      	bls.n	83e4a <__udivmoddi4+0x1ba>
   83e36:	19f6      	adds	r6, r6, r7
   83e38:	f101 32ff 	add.w	r2, r1, #4294967295
   83e3c:	f080 808c 	bcs.w	83f58 <__udivmoddi4+0x2c8>
   83e40:	45b1      	cmp	r9, r6
   83e42:	f240 8089 	bls.w	83f58 <__udivmoddi4+0x2c8>
   83e46:	3902      	subs	r1, #2
   83e48:	443e      	add	r6, r7
   83e4a:	eba6 0609 	sub.w	r6, r6, r9
   83e4e:	fbb6 f0fc 	udiv	r0, r6, ip
   83e52:	fb0c 6210 	mls	r2, ip, r0, r6
   83e56:	fb00 f908 	mul.w	r9, r0, r8
   83e5a:	b29e      	uxth	r6, r3
   83e5c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83e60:	45b1      	cmp	r9, r6
   83e62:	d907      	bls.n	83e74 <__udivmoddi4+0x1e4>
   83e64:	19f6      	adds	r6, r6, r7
   83e66:	f100 33ff 	add.w	r3, r0, #4294967295
   83e6a:	d271      	bcs.n	83f50 <__udivmoddi4+0x2c0>
   83e6c:	45b1      	cmp	r9, r6
   83e6e:	d96f      	bls.n	83f50 <__udivmoddi4+0x2c0>
   83e70:	3802      	subs	r0, #2
   83e72:	443e      	add	r6, r7
   83e74:	eba6 0609 	sub.w	r6, r6, r9
   83e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83e7c:	e78f      	b.n	83d9e <__udivmoddi4+0x10e>
   83e7e:	f1c1 0720 	rsb	r7, r1, #32
   83e82:	fa22 f807 	lsr.w	r8, r2, r7
   83e86:	408b      	lsls	r3, r1
   83e88:	ea48 0303 	orr.w	r3, r8, r3
   83e8c:	fa26 f407 	lsr.w	r4, r6, r7
   83e90:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83e94:	fbb4 f9fe 	udiv	r9, r4, lr
   83e98:	fa1f fc83 	uxth.w	ip, r3
   83e9c:	fb0e 4419 	mls	r4, lr, r9, r4
   83ea0:	408e      	lsls	r6, r1
   83ea2:	fa20 f807 	lsr.w	r8, r0, r7
   83ea6:	fb09 fa0c 	mul.w	sl, r9, ip
   83eaa:	ea48 0806 	orr.w	r8, r8, r6
   83eae:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83eb2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83eb6:	45a2      	cmp	sl, r4
   83eb8:	fa02 f201 	lsl.w	r2, r2, r1
   83ebc:	fa00 f601 	lsl.w	r6, r0, r1
   83ec0:	d908      	bls.n	83ed4 <__udivmoddi4+0x244>
   83ec2:	18e4      	adds	r4, r4, r3
   83ec4:	f109 30ff 	add.w	r0, r9, #4294967295
   83ec8:	d244      	bcs.n	83f54 <__udivmoddi4+0x2c4>
   83eca:	45a2      	cmp	sl, r4
   83ecc:	d942      	bls.n	83f54 <__udivmoddi4+0x2c4>
   83ece:	f1a9 0902 	sub.w	r9, r9, #2
   83ed2:	441c      	add	r4, r3
   83ed4:	eba4 040a 	sub.w	r4, r4, sl
   83ed8:	fbb4 f0fe 	udiv	r0, r4, lr
   83edc:	fb0e 4410 	mls	r4, lr, r0, r4
   83ee0:	fb00 fc0c 	mul.w	ip, r0, ip
   83ee4:	fa1f f888 	uxth.w	r8, r8
   83ee8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83eec:	45a4      	cmp	ip, r4
   83eee:	d907      	bls.n	83f00 <__udivmoddi4+0x270>
   83ef0:	18e4      	adds	r4, r4, r3
   83ef2:	f100 3eff 	add.w	lr, r0, #4294967295
   83ef6:	d229      	bcs.n	83f4c <__udivmoddi4+0x2bc>
   83ef8:	45a4      	cmp	ip, r4
   83efa:	d927      	bls.n	83f4c <__udivmoddi4+0x2bc>
   83efc:	3802      	subs	r0, #2
   83efe:	441c      	add	r4, r3
   83f00:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83f04:	fba0 8902 	umull	r8, r9, r0, r2
   83f08:	eba4 0c0c 	sub.w	ip, r4, ip
   83f0c:	45cc      	cmp	ip, r9
   83f0e:	46c2      	mov	sl, r8
   83f10:	46ce      	mov	lr, r9
   83f12:	d315      	bcc.n	83f40 <__udivmoddi4+0x2b0>
   83f14:	d012      	beq.n	83f3c <__udivmoddi4+0x2ac>
   83f16:	b155      	cbz	r5, 83f2e <__udivmoddi4+0x29e>
   83f18:	ebb6 030a 	subs.w	r3, r6, sl
   83f1c:	eb6c 060e 	sbc.w	r6, ip, lr
   83f20:	fa06 f707 	lsl.w	r7, r6, r7
   83f24:	40cb      	lsrs	r3, r1
   83f26:	431f      	orrs	r7, r3
   83f28:	40ce      	lsrs	r6, r1
   83f2a:	602f      	str	r7, [r5, #0]
   83f2c:	606e      	str	r6, [r5, #4]
   83f2e:	2100      	movs	r1, #0
   83f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83f34:	4610      	mov	r0, r2
   83f36:	e6f7      	b.n	83d28 <__udivmoddi4+0x98>
   83f38:	4689      	mov	r9, r1
   83f3a:	e6de      	b.n	83cfa <__udivmoddi4+0x6a>
   83f3c:	4546      	cmp	r6, r8
   83f3e:	d2ea      	bcs.n	83f16 <__udivmoddi4+0x286>
   83f40:	ebb8 0a02 	subs.w	sl, r8, r2
   83f44:	eb69 0e03 	sbc.w	lr, r9, r3
   83f48:	3801      	subs	r0, #1
   83f4a:	e7e4      	b.n	83f16 <__udivmoddi4+0x286>
   83f4c:	4670      	mov	r0, lr
   83f4e:	e7d7      	b.n	83f00 <__udivmoddi4+0x270>
   83f50:	4618      	mov	r0, r3
   83f52:	e78f      	b.n	83e74 <__udivmoddi4+0x1e4>
   83f54:	4681      	mov	r9, r0
   83f56:	e7bd      	b.n	83ed4 <__udivmoddi4+0x244>
   83f58:	4611      	mov	r1, r2
   83f5a:	e776      	b.n	83e4a <__udivmoddi4+0x1ba>
   83f5c:	3802      	subs	r0, #2
   83f5e:	443c      	add	r4, r7
   83f60:	e744      	b.n	83dec <__udivmoddi4+0x15c>
   83f62:	4608      	mov	r0, r1
   83f64:	e706      	b.n	83d74 <__udivmoddi4+0xe4>
   83f66:	3a02      	subs	r2, #2
   83f68:	443e      	add	r6, r7
   83f6a:	e72b      	b.n	83dc4 <__udivmoddi4+0x134>

00083f6c <__aeabi_idiv0>:
   83f6c:	4770      	bx	lr
   83f6e:	bf00      	nop
   83f70:	736e6f43 	.word	0x736e6f43
   83f74:	20656c6f 	.word	0x20656c6f
   83f78:	64616572 	.word	0x64616572
   83f7c:	00000a79 	.word	0x00000a79
   83f80:	3d3d3d3d 	.word	0x3d3d3d3d
   83f84:	3d3d3d3d 	.word	0x3d3d3d3d
   83f88:	3d3d3d3d 	.word	0x3d3d3d3d
   83f8c:	00000a3d 	.word	0x00000a3d
   83f90:	0000002e 	.word	0x0000002e
   83f94:	6e69460a 	.word	0x6e69460a
   83f98:	65687369 	.word	0x65687369
   83f9c:	64612064 	.word	0x64612064
   83fa0:	6f632063 	.word	0x6f632063
   83fa4:	7265766e 	.word	0x7265766e
   83fa8:	6e6f6973 	.word	0x6e6f6973
   83fac:	0a2e2e2e 	.word	0x0a2e2e2e
   83fb0:	00000000 	.word	0x00000000
   83fb4:	000a6425 	.word	0x000a6425
   83fb8:	6e69460a 	.word	0x6e69460a
   83fbc:	65687369 	.word	0x65687369
   83fc0:	61642064 	.word	0x61642064
   83fc4:	6f632063 	.word	0x6f632063
   83fc8:	7265766e 	.word	0x7265766e
   83fcc:	6e6f6973 	.word	0x6e6f6973
   83fd0:	0a2e2e2e 	.word	0x0a2e2e2e
   83fd4:	00000000 	.word	0x00000000

00083fd8 <_global_impure_ptr>:
   83fd8:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   83fe8:	46454443 00000000 33323130 37363534     CDEF....01234567
   83ff8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84008:	0000296c                                l)..

0008400c <blanks.7217>:
   8400c:	20202020 20202020 20202020 20202020                     

0008401c <zeroes.7218>:
   8401c:	30303030 30303030 30303030 30303030     0000000000000000
   8402c:	00000043 49534f50 00000058              C...POSIX...

00084038 <_ctype_>:
   84038:	20202000 20202020 28282020 20282828     .         ((((( 
   84048:	20202020 20202020 20202020 20202020                     
   84058:	10108820 10101010 10101010 10101010      ...............
   84068:	04040410 04040404 10040404 10101010     ................
   84078:	41411010 41414141 01010101 01010101     ..AAAAAA........
   84088:	01010101 01010101 01010101 10101010     ................
   84098:	42421010 42424242 02020202 02020202     ..BBBBBB........
   840a8:	02020202 02020202 02020202 10101010     ................
   840b8:	00000020 00000000 00000000 00000000      ...............
	...

0008413c <_init>:
   8413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8413e:	bf00      	nop
   84140:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84142:	bc08      	pop	{r3}
   84144:	469e      	mov	lr, r3
   84146:	4770      	bx	lr

00084148 <__init_array_start>:
   84148:	00082259 	.word	0x00082259

0008414c <__frame_dummy_init_array_entry>:
   8414c:	00080119                                ....

00084150 <_fini>:
   84150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84152:	bf00      	nop
   84154:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84156:	bc08      	pop	{r3}
   84158:	469e      	mov	lr, r3
   8415a:	4770      	bx	lr

0008415c <__fini_array_start>:
   8415c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20073f48                                H?. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	000839cd 0008322d 00000000 00084038     .9..-2......8@..
20070654:	00083f90 00083fd4 00083fd4 00083fd4     .?...?...?...?..
20070664:	00083fd4 00083fd4 00083fd4 00083fd4     .?...?...?...?..
20070674:	00083fd4 00083fd4 ffffffff ffffffff     .?...?..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
