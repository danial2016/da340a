
DueProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004828  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084828  00084828  00014828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  00084830  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000011ac  20070ae0  00085310  00020ae0  2**2
                  ALLOC
  4 .stack        00002004  20071c8c  000864bc  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b7bf  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003ec2  00000000  00000000  0003c321  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005234  00000000  00000000  000401e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c60  00000000  00000000  00045417  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b98  00000000  00000000  00046077  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a2a0  00000000  00000000  00046c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013680  00000000  00000000  00050eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00066135  00000000  00000000  0006452f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002834  00000000  00000000  000ca664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	90 3c 07 20 49 0d 08 00 45 0d 08 00 45 0d 08 00     .<. I...E...E...
   80010:	45 0d 08 00 45 0d 08 00 45 0d 08 00 00 00 00 00     E...E...E.......
	...
   8002c:	45 0d 08 00 45 0d 08 00 00 00 00 00 45 0d 08 00     E...E.......E...
   8003c:	45 0d 08 00 45 0d 08 00 45 0d 08 00 45 0d 08 00     E...E...E...E...
   8004c:	45 0d 08 00 45 0d 08 00 45 0d 08 00 45 0d 08 00     E...E...E...E...
   8005c:	45 0d 08 00 45 0d 08 00 45 0d 08 00 00 00 00 00     E...E...E.......
   8006c:	b9 0b 08 00 cd 0b 08 00 e1 0b 08 00 f5 0b 08 00     ................
	...
   80084:	e1 05 08 00 45 0d 08 00 45 0d 08 00 45 0d 08 00     ....E...E...E...
   80094:	45 0d 08 00 45 0d 08 00 45 0d 08 00 45 0d 08 00     E...E...E...E...
   800a4:	00 00 00 00 45 0d 08 00 61 01 08 00 45 0d 08 00     ....E...a...E...
   800b4:	45 0d 08 00 45 0d 08 00 45 0d 08 00 45 0d 08 00     E...E...E...E...
   800c4:	45 0d 08 00 45 0d 08 00 45 0d 08 00 45 0d 08 00     E...E...E...E...
   800d4:	ed 03 08 00 45 0d 08 00 45 0d 08 00 45 0d 08 00     ....E...E...E...
   800e4:	45 0d 08 00 45 0d 08 00 45 0d 08 00 45 0d 08 00     E...E...E...E...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	00084830 	.word	0x00084830

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00084830 	.word	0x00084830
   80154:	20070ae4 	.word	0x20070ae4
   80158:	00084830 	.word	0x00084830
   8015c:	00000000 	.word	0x00000000

00080160 <TC0_Handler>:

/**
 *  Interrupt handler for TC0 interrupt.
 */
void TC0_Handler(void)
{
   80160:	b500      	push	{lr}
   80162:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);			//The compare bit is cleared by reading the register, manual p. 915
   80164:	2100      	movs	r1, #0
   80166:	4805      	ldr	r0, [pc, #20]	; (8017c <TC0_Handler+0x1c>)
   80168:	4b05      	ldr	r3, [pc, #20]	; (80180 <TC0_Handler+0x20>)
   8016a:	4798      	blx	r3
   8016c:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   8016e:	9b01      	ldr	r3, [sp, #4]
	
	/* Start sampling (i.e. take convert one sample value) */
	adc_start(ADC);
   80170:	4804      	ldr	r0, [pc, #16]	; (80184 <TC0_Handler+0x24>)
   80172:	4b05      	ldr	r3, [pc, #20]	; (80188 <TC0_Handler+0x28>)
   80174:	4798      	blx	r3
	
}
   80176:	b003      	add	sp, #12
   80178:	f85d fb04 	ldr.w	pc, [sp], #4
   8017c:	40080000 	.word	0x40080000
   80180:	000805ab 	.word	0x000805ab
   80184:	400c0000 	.word	0x400c0000
   80188:	0008055b 	.word	0x0008055b

0008018c <pin_edge_handler>:
#include <pio.h>


void pin_edge_handler(const uint32_t id, const uint32_t index)
{
	if ((id == ID_PIOB) && (index == PIO_PB26)){
   8018c:	280c      	cmp	r0, #12
   8018e:	d000      	beq.n	80192 <pin_edge_handler+0x6>
   80190:	4770      	bx	lr
   80192:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
   80196:	d1fb      	bne.n	80190 <pin_edge_handler+0x4>
{
   80198:	b508      	push	{r3, lr}
		if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB26)){
   8019a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8019e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   801a2:	4810      	ldr	r0, [pc, #64]	; (801e4 <pin_edge_handler+0x58>)
   801a4:	4b10      	ldr	r3, [pc, #64]	; (801e8 <pin_edge_handler+0x5c>)
   801a6:	4798      	blx	r3
   801a8:	b1b8      	cbz	r0, 801da <pin_edge_handler+0x4e>
			puts("Amplitude level detected");
   801aa:	4810      	ldr	r0, [pc, #64]	; (801ec <pin_edge_handler+0x60>)
   801ac:	4b10      	ldr	r3, [pc, #64]	; (801f0 <pin_edge_handler+0x64>)
   801ae:	4798      	blx	r3
			if(configureDone == 1){ //access external variable, declaration has been done in the included header-file,
   801b0:	4b10      	ldr	r3, [pc, #64]	; (801f4 <pin_edge_handler+0x68>)
   801b2:	681b      	ldr	r3, [r3, #0]
   801b4:	2b01      	cmp	r3, #1
   801b6:	d003      	beq.n	801c0 <pin_edge_handler+0x34>
				tc_start(TC0, 0); 
				pio_disable_interrupt(PIOB, PIO_PB26); //disable interrupt for now
				puts("Sampling has been started");
			}
			else{
				puts("Timer has not been configured!");
   801b8:	480f      	ldr	r0, [pc, #60]	; (801f8 <pin_edge_handler+0x6c>)
   801ba:	4b0d      	ldr	r3, [pc, #52]	; (801f0 <pin_edge_handler+0x64>)
   801bc:	4798      	blx	r3
   801be:	bd08      	pop	{r3, pc}
				tc_start(TC0, 0); 
   801c0:	2100      	movs	r1, #0
   801c2:	480e      	ldr	r0, [pc, #56]	; (801fc <pin_edge_handler+0x70>)
   801c4:	4b0e      	ldr	r3, [pc, #56]	; (80200 <pin_edge_handler+0x74>)
   801c6:	4798      	blx	r3
				pio_disable_interrupt(PIOB, PIO_PB26); //disable interrupt for now
   801c8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   801cc:	4805      	ldr	r0, [pc, #20]	; (801e4 <pin_edge_handler+0x58>)
   801ce:	4b0d      	ldr	r3, [pc, #52]	; (80204 <pin_edge_handler+0x78>)
   801d0:	4798      	blx	r3
				puts("Sampling has been started");
   801d2:	480d      	ldr	r0, [pc, #52]	; (80208 <pin_edge_handler+0x7c>)
   801d4:	4b06      	ldr	r3, [pc, #24]	; (801f0 <pin_edge_handler+0x64>)
   801d6:	4798      	blx	r3
   801d8:	bd08      	pop	{r3, pc}
			}
		}else{
			puts("------------No edge detected------------");
   801da:	480c      	ldr	r0, [pc, #48]	; (8020c <pin_edge_handler+0x80>)
   801dc:	4b04      	ldr	r3, [pc, #16]	; (801f0 <pin_edge_handler+0x64>)
   801de:	4798      	blx	r3
   801e0:	bd08      	pop	{r3, pc}
   801e2:	bf00      	nop
   801e4:	400e1000 	.word	0x400e1000
   801e8:	0008089f 	.word	0x0008089f
   801ec:	000845d8 	.word	0x000845d8
   801f0:	0008185d 	.word	0x0008185d
   801f4:	20070c20 	.word	0x20070c20
   801f8:	00084610 	.word	0x00084610
   801fc:	40080000 	.word	0x40080000
   80200:	0008058b 	.word	0x0008058b
   80204:	0008097f 	.word	0x0008097f
   80208:	000845f4 	.word	0x000845f4
   8020c:	00084630 	.word	0x00084630

00080210 <init_amplitude_trigger>:
	}
	
}


void init_amplitude_trigger(void){
   80210:	b530      	push	{r4, r5, lr}
   80212:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PIOB);
   80214:	200c      	movs	r0, #12
   80216:	4b11      	ldr	r3, [pc, #68]	; (8025c <init_amplitude_trigger+0x4c>)
   80218:	4798      	blx	r3
	pio_set_input(PIOB, PIO_PB26, PIO_PULLUP); 
   8021a:	4c11      	ldr	r4, [pc, #68]	; (80260 <init_amplitude_trigger+0x50>)
   8021c:	2201      	movs	r2, #1
   8021e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80222:	4620      	mov	r0, r4
   80224:	4b0f      	ldr	r3, [pc, #60]	; (80264 <init_amplitude_trigger+0x54>)
   80226:	4798      	blx	r3
	pio_pull_up(PIOB, PIO_PB26, 0); //enable pull-down, when no input then input state is low
   80228:	2200      	movs	r2, #0
   8022a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8022e:	4620      	mov	r0, r4
   80230:	4b0d      	ldr	r3, [pc, #52]	; (80268 <init_amplitude_trigger+0x58>)
   80232:	4798      	blx	r3
	pio_handler_set(PIOB, ID_PIOB, PIO_PB26, PIO_IT_EDGE, pin_edge_handler);
   80234:	4b0d      	ldr	r3, [pc, #52]	; (8026c <init_amplitude_trigger+0x5c>)
   80236:	9300      	str	r3, [sp, #0]
   80238:	2340      	movs	r3, #64	; 0x40
   8023a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8023e:	210c      	movs	r1, #12
   80240:	4620      	mov	r0, r4
   80242:	4d0b      	ldr	r5, [pc, #44]	; (80270 <init_amplitude_trigger+0x60>)
   80244:	47a8      	blx	r5
	pio_enable_interrupt(PIOB, PIO_PB26);
   80246:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8024a:	4620      	mov	r0, r4
   8024c:	4b09      	ldr	r3, [pc, #36]	; (80274 <init_amplitude_trigger+0x64>)
   8024e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80250:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80254:	4b08      	ldr	r3, [pc, #32]	; (80278 <init_amplitude_trigger+0x68>)
   80256:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOB_IRQn);
}
   80258:	b003      	add	sp, #12
   8025a:	bd30      	pop	{r4, r5, pc}
   8025c:	00080cf1 	.word	0x00080cf1
   80260:	400e1000 	.word	0x400e1000
   80264:	000808f5 	.word	0x000808f5
   80268:	00080895 	.word	0x00080895
   8026c:	0008018d 	.word	0x0008018d
   80270:	00080b49 	.word	0x00080b49
   80274:	0008097b 	.word	0x0008097b
   80278:	e000e100 	.word	0xe000e100

0008027c <smooth_values>:
	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
}

static void smooth_values(uint16_t *buffer)
{
   8027c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80280:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
   80284:	b085      	sub	sp, #20
   80286:	f1a0 0802 	sub.w	r8, r0, #2
   8028a:	f10d 050e 	add.w	r5, sp, #14
   8028e:	f50d 5b80 	add.w	fp, sp, #4096	; 0x1000
   80292:	f10b 0b0e 	add.w	fp, fp, #14
   80296:	4b20      	ldr	r3, [pc, #128]	; (80318 <smooth_values+0x9c>)
   80298:	685a      	ldr	r2, [r3, #4]
   8029a:	9200      	str	r2, [sp, #0]
   8029c:	681b      	ldr	r3, [r3, #0]
		for(int k = M-1; k >= 0; k--)
		{
			xbuff[k+1] = xbuff[k];
		}
		invalue = buffer[i];
		xbuff[0] =(float)invalue;
   8029e:	462c      	mov	r4, r5
   802a0:	46c1      	mov	r9, r8
		float sum = 0;
		// Construct sum 
		for(int j = 0; j <= M; j++){
			sum += (xbuff[j]*b[j]);
   802a2:	4f1e      	ldr	r7, [pc, #120]	; (8031c <smooth_values+0xa0>)
   802a4:	4e1e      	ldr	r6, [pc, #120]	; (80320 <smooth_values+0xa4>)
		}
		outvalue = (uint16_t)sum;
   802a6:	f8df a084 	ldr.w	sl, [pc, #132]	; 8032c <smooth_values+0xb0>
   802aa:	9502      	str	r5, [sp, #8]
   802ac:	461d      	mov	r5, r3
   802ae:	f8cd 800c 	str.w	r8, [sp, #12]
   802b2:	e001      	b.n	802b8 <smooth_values+0x3c>
			xbuff[k+1] = xbuff[k];
   802b4:	9500      	str	r5, [sp, #0]
		xbuff[0] =(float)invalue;
   802b6:	9d01      	ldr	r5, [sp, #4]
   802b8:	f839 0f02 	ldrh.w	r0, [r9, #2]!
   802bc:	4b19      	ldr	r3, [pc, #100]	; (80324 <smooth_values+0xa8>)
   802be:	4798      	blx	r3
   802c0:	9001      	str	r0, [sp, #4]
			sum += (xbuff[j]*b[j]);
   802c2:	4919      	ldr	r1, [pc, #100]	; (80328 <smooth_values+0xac>)
   802c4:	47b8      	blx	r7
   802c6:	2100      	movs	r1, #0
   802c8:	47b0      	blx	r6
   802ca:	4680      	mov	r8, r0
   802cc:	4916      	ldr	r1, [pc, #88]	; (80328 <smooth_values+0xac>)
   802ce:	4628      	mov	r0, r5
   802d0:	47b8      	blx	r7
   802d2:	4641      	mov	r1, r8
   802d4:	47b0      	blx	r6
   802d6:	4680      	mov	r8, r0
   802d8:	4913      	ldr	r1, [pc, #76]	; (80328 <smooth_values+0xac>)
   802da:	9800      	ldr	r0, [sp, #0]
   802dc:	47b8      	blx	r7
   802de:	4641      	mov	r1, r8
   802e0:	47b0      	blx	r6
		outvalue = (uint16_t)sum;
   802e2:	47d0      	blx	sl
   802e4:	f824 0f02 	strh.w	r0, [r4, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   802e8:	455c      	cmp	r4, fp
   802ea:	d1e3      	bne.n	802b4 <smooth_values+0x38>
   802ec:	462a      	mov	r2, r5
   802ee:	9d02      	ldr	r5, [sp, #8]
   802f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
   802f4:	4b08      	ldr	r3, [pc, #32]	; (80318 <smooth_values+0x9c>)
   802f6:	605a      	str	r2, [r3, #4]
   802f8:	9a00      	ldr	r2, [sp, #0]
   802fa:	609a      	str	r2, [r3, #8]
   802fc:	9a01      	ldr	r2, [sp, #4]
   802fe:	601a      	str	r2, [r3, #0]
	//Copy values of temp_buff into old buffer
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
	{
		uint16_t *ip;       /* ip is a pointer to uint16_t */
		ip = &buffer[i];    /* sets ip to point to element i of buffer (contains address of buffer[i]) */
		*ip = temp_buff[i]; /* *ip points to content of buffer[i], this will change content of buffer[i] */
   80300:	f835 3f02 	ldrh.w	r3, [r5, #2]!
   80304:	f828 3f02 	strh.w	r3, [r8, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80308:	42ac      	cmp	r4, r5
   8030a:	d1f9      	bne.n	80300 <smooth_values+0x84>
	}
}
   8030c:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
   80310:	b005      	add	sp, #20
   80312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80316:	bf00      	nop
   80318:	20070afc 	.word	0x20070afc
   8031c:	000813cd 	.word	0x000813cd
   80320:	000811bd 	.word	0x000811bd
   80324:	0008131d 	.word	0x0008131d
   80328:	3eaaa64c 	.word	0x3eaaa64c
   8032c:	0008166d 	.word	0x0008166d

00080330 <adc_setup>:
{
   80330:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   80332:	2025      	movs	r0, #37	; 0x25
   80334:	4b21      	ldr	r3, [pc, #132]	; (803bc <adc_setup+0x8c>)
   80336:	4798      	blx	r3
	adc_init(ADC, sysclk_get_cpu_hz(), ADC_CLOCK, ADC_STARTUP_TIME_4);
   80338:	4c21      	ldr	r4, [pc, #132]	; (803c0 <adc_setup+0x90>)
   8033a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   8033e:	4a21      	ldr	r2, [pc, #132]	; (803c4 <adc_setup+0x94>)
   80340:	4921      	ldr	r1, [pc, #132]	; (803c8 <adc_setup+0x98>)
   80342:	4620      	mov	r0, r4
   80344:	4d21      	ldr	r5, [pc, #132]	; (803cc <adc_setup+0x9c>)
   80346:	47a8      	blx	r5
	adc_configure_timing(ADC, TRACKING_TIME, SETTLING_TIME, TRANSFER_TIME);
   80348:	2300      	movs	r3, #0
   8034a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   8034e:	4619      	mov	r1, r3
   80350:	4620      	mov	r0, r4
   80352:	4d1f      	ldr	r5, [pc, #124]	; (803d0 <adc_setup+0xa0>)
   80354:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   80356:	2100      	movs	r1, #0
   80358:	4620      	mov	r0, r4
   8035a:	4b1e      	ldr	r3, [pc, #120]	; (803d4 <adc_setup+0xa4>)
   8035c:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);			//PB17 - AD8 for Arduino Due
   8035e:	210a      	movs	r1, #10
   80360:	4620      	mov	r0, r4
   80362:	4b1d      	ldr	r3, [pc, #116]	; (803d8 <adc_setup+0xa8>)
   80364:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   80366:	2200      	movs	r2, #0
   80368:	4611      	mov	r1, r2
   8036a:	4620      	mov	r0, r4
   8036c:	4b1b      	ldr	r3, [pc, #108]	; (803dc <adc_setup+0xac>)
   8036e:	4798      	blx	r3
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
   80370:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   80374:	b913      	cbnz	r3, 8037c <adc_setup+0x4c>
   80376:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   8037a:	b1a3      	cbz	r3, 803a6 <adc_setup+0x76>
		if (p_adc->ADC_RNCR == 0)
   8037c:	4b10      	ldr	r3, [pc, #64]	; (803c0 <adc_setup+0x90>)
   8037e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   80382:	b93b      	cbnz	r3, 80394 <adc_setup+0x64>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer; /* Receive Next Pointer Register */
   80384:	4b0e      	ldr	r3, [pc, #56]	; (803c0 <adc_setup+0x90>)
   80386:	4a16      	ldr	r2, [pc, #88]	; (803e0 <adc_setup+0xb0>)
   80388:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;               /* Receive Next Counter Register */
   8038c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80390:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	adc_enable_interrupt(ADC, ADC_IER_RXBUFF);
   80394:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80398:	4809      	ldr	r0, [pc, #36]	; (803c0 <adc_setup+0x90>)
   8039a:	4b12      	ldr	r3, [pc, #72]	; (803e4 <adc_setup+0xb4>)
   8039c:	4798      	blx	r3
   8039e:	2220      	movs	r2, #32
   803a0:	4b11      	ldr	r3, [pc, #68]	; (803e8 <adc_setup+0xb8>)
   803a2:	605a      	str	r2, [r3, #4]
   803a4:	bd38      	pop	{r3, r4, r5, pc}
		p_adc->ADC_RPR = (uint32_t) p_s_buffer; /* Receive Pointer Register */
   803a6:	4a0e      	ldr	r2, [pc, #56]	; (803e0 <adc_setup+0xb0>)
   803a8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;               /* Receive Counter Register */
   803ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   803b0:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN; /*ADC_PTCR = Transfer Control Register, RXTEN: Receiver Transfer Enable */
   803b4:	2201      	movs	r2, #1
   803b6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   803ba:	e7eb      	b.n	80394 <adc_setup+0x64>
   803bc:	00080cf1 	.word	0x00080cf1
   803c0:	400c0000 	.word	0x400c0000
   803c4:	0061a800 	.word	0x0061a800
   803c8:	0501bd00 	.word	0x0501bd00
   803cc:	000804ed 	.word	0x000804ed
   803d0:	0008053f 	.word	0x0008053f
   803d4:	00080521 	.word	0x00080521
   803d8:	00080561 	.word	0x00080561
   803dc:	00080531 	.word	0x00080531
   803e0:	20070c58 	.word	0x20070c58
   803e4:	0008056b 	.word	0x0008056b
   803e8:	e000e100 	.word	0xe000e100

000803ec <ADC_Handler>:

void ADC_Handler(void){
   803ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Data transfer has been stopped (is complete) and RXBUFF status flag is set because ADC_RCR
	* and the ADC_RNCR have reached zero. Buffer of sample values is full.
	*/
	if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF) {
   803ee:	4824      	ldr	r0, [pc, #144]	; (80480 <ADC_Handler+0x94>)
   803f0:	4b24      	ldr	r3, [pc, #144]	; (80484 <ADC_Handler+0x98>)
   803f2:	4798      	blx	r3
   803f4:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   803f8:	d100      	bne.n	803fc <ADC_Handler+0x10>
   803fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tc_stop(TC0, 0);  
   803fc:	2100      	movs	r1, #0
   803fe:	4822      	ldr	r0, [pc, #136]	; (80488 <ADC_Handler+0x9c>)
   80400:	4b22      	ldr	r3, [pc, #136]	; (8048c <ADC_Handler+0xa0>)
   80402:	4798      	blx	r3
   80404:	4d22      	ldr	r5, [pc, #136]	; (80490 <ADC_Handler+0xa4>)
		
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80406:	2400      	movs	r4, #0
		{
			printf("Buffer values: %u, index: %u\n", adc_buffer_sample_values[i], i);
   80408:	4f22      	ldr	r7, [pc, #136]	; (80494 <ADC_Handler+0xa8>)
   8040a:	4e23      	ldr	r6, [pc, #140]	; (80498 <ADC_Handler+0xac>)
   8040c:	4622      	mov	r2, r4
   8040e:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   80412:	4638      	mov	r0, r7
   80414:	47b0      	blx	r6
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80416:	3401      	adds	r4, #1
   80418:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   8041c:	d1f6      	bne.n	8040c <ADC_Handler+0x20>
		}
		smooth_values(adc_buffer_sample_values);
   8041e:	4c1f      	ldr	r4, [pc, #124]	; (8049c <ADC_Handler+0xb0>)
   80420:	4620      	mov	r0, r4
   80422:	4b1f      	ldr	r3, [pc, #124]	; (804a0 <ADC_Handler+0xb4>)
   80424:	4798      	blx	r3
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
		{
			printf("Temp buffer: %u, index: %u\n", adc_buffer_sample_values[i], i);
		}
		*/
	    pio_enable_interrupt(PIOB, PIO_PB26); //re-enable edge-level detection 
   80426:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8042a:	481e      	ldr	r0, [pc, #120]	; (804a4 <ADC_Handler+0xb8>)
   8042c:	4b1e      	ldr	r3, [pc, #120]	; (804a8 <ADC_Handler+0xbc>)
   8042e:	4798      	blx	r3
		/* Clear sample buffer */
		memset((void *)&adc_buffer_sample_values, 0, sizeof(adc_buffer_sample_values));
   80430:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80434:	2100      	movs	r1, #0
   80436:	4620      	mov	r0, r4
   80438:	4b1c      	ldr	r3, [pc, #112]	; (804ac <ADC_Handler+0xc0>)
   8043a:	4798      	blx	r3
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
   8043c:	4b10      	ldr	r3, [pc, #64]	; (80480 <ADC_Handler+0x94>)
   8043e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   80442:	b91b      	cbnz	r3, 8044c <ADC_Handler+0x60>
   80444:	4b0e      	ldr	r3, [pc, #56]	; (80480 <ADC_Handler+0x94>)
   80446:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   8044a:	b16b      	cbz	r3, 80468 <ADC_Handler+0x7c>
		if (p_adc->ADC_RNCR == 0)
   8044c:	4b0c      	ldr	r3, [pc, #48]	; (80480 <ADC_Handler+0x94>)
   8044e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   80452:	2b00      	cmp	r3, #0
   80454:	d1d1      	bne.n	803fa <ADC_Handler+0xe>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer; /* Receive Next Pointer Register */
   80456:	4b0a      	ldr	r3, [pc, #40]	; (80480 <ADC_Handler+0x94>)
   80458:	4a10      	ldr	r2, [pc, #64]	; (8049c <ADC_Handler+0xb0>)
   8045a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;               /* Receive Next Counter Register */
   8045e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80462:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		/* Read new buffer data. Necessary, otherwise buffer values are null/zero */
		adc_read_buffer(ADC, adc_buffer_sample_values, ADC_BUFFER_SIZE);
	}
}
   80466:	e7c8      	b.n	803fa <ADC_Handler+0xe>
		p_adc->ADC_RPR = (uint32_t) p_s_buffer; /* Receive Pointer Register */
   80468:	4b05      	ldr	r3, [pc, #20]	; (80480 <ADC_Handler+0x94>)
   8046a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;               /* Receive Counter Register */
   8046e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80472:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN; /*ADC_PTCR = Transfer Control Register, RXTEN: Receiver Transfer Enable */
   80476:	2201      	movs	r2, #1
   80478:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   8047c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8047e:	bf00      	nop
   80480:	400c0000 	.word	0x400c0000
   80484:	0008056f 	.word	0x0008056f
   80488:	40080000 	.word	0x40080000
   8048c:	00080593 	.word	0x00080593
   80490:	20070c56 	.word	0x20070c56
   80494:	0008465c 	.word	0x0008465c
   80498:	000816fd 	.word	0x000816fd
   8049c:	20070c58 	.word	0x20070c58
   804a0:	0008027d 	.word	0x0008027d
   804a4:	400e1000 	.word	0x400e1000
   804a8:	0008097b 	.word	0x0008097b
   804ac:	00081725 	.word	0x00081725

000804b0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   804b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   804b4:	b980      	cbnz	r0, 804d8 <_read+0x28>
   804b6:	460c      	mov	r4, r1
   804b8:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   804ba:	2a00      	cmp	r2, #0
   804bc:	dd0f      	ble.n	804de <_read+0x2e>
   804be:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   804c0:	4e08      	ldr	r6, [pc, #32]	; (804e4 <_read+0x34>)
   804c2:	4d09      	ldr	r5, [pc, #36]	; (804e8 <_read+0x38>)
   804c4:	6830      	ldr	r0, [r6, #0]
   804c6:	4621      	mov	r1, r4
   804c8:	682b      	ldr	r3, [r5, #0]
   804ca:	4798      	blx	r3
		ptr++;
   804cc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   804ce:	42bc      	cmp	r4, r7
   804d0:	d1f8      	bne.n	804c4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   804d2:	4640      	mov	r0, r8
   804d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   804d8:	f04f 38ff 	mov.w	r8, #4294967295
   804dc:	e7f9      	b.n	804d2 <_read+0x22>
	for (; len > 0; --len) {
   804de:	4680      	mov	r8, r0
   804e0:	e7f7      	b.n	804d2 <_read+0x22>
   804e2:	bf00      	nop
   804e4:	20071c60 	.word	0x20071c60
   804e8:	20071c58 	.word	0x20071c58

000804ec <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   804ec:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   804ee:	2401      	movs	r4, #1
   804f0:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   804f2:	2400      	movs	r4, #0
   804f4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   804f6:	f240 2502 	movw	r5, #514	; 0x202
   804fa:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   804fe:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80502:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80506:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   80508:	0052      	lsls	r2, r2, #1
   8050a:	fbb1 f2f2 	udiv	r2, r1, r2
   8050e:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80510:	0212      	lsls	r2, r2, #8
   80512:	b292      	uxth	r2, r2
   80514:	432b      	orrs	r3, r5
   80516:	431a      	orrs	r2, r3
   80518:	6042      	str	r2, [r0, #4]
	return 0;
}
   8051a:	4620      	mov	r0, r4
   8051c:	bc30      	pop	{r4, r5}
   8051e:	4770      	bx	lr

00080520 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80520:	6843      	ldr	r3, [r0, #4]
   80522:	f023 0310 	bic.w	r3, r3, #16
   80526:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80528:	6843      	ldr	r3, [r0, #4]
   8052a:	4319      	orrs	r1, r3
   8052c:	6041      	str	r1, [r0, #4]
   8052e:	4770      	bx	lr

00080530 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80530:	6843      	ldr	r3, [r0, #4]
   80532:	01d2      	lsls	r2, r2, #7
   80534:	b2d2      	uxtb	r2, r2
   80536:	4319      	orrs	r1, r3
   80538:	430a      	orrs	r2, r1
   8053a:	6042      	str	r2, [r0, #4]
   8053c:	4770      	bx	lr

0008053e <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   8053e:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80540:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80542:	0609      	lsls	r1, r1, #24
   80544:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80548:	4321      	orrs	r1, r4
   8054a:	430a      	orrs	r2, r1
   8054c:	0719      	lsls	r1, r3, #28
   8054e:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   80552:	4311      	orrs	r1, r2
   80554:	6041      	str	r1, [r0, #4]
}
   80556:	bc10      	pop	{r4}
   80558:	4770      	bx	lr

0008055a <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   8055a:	2302      	movs	r3, #2
   8055c:	6003      	str	r3, [r0, #0]
   8055e:	4770      	bx	lr

00080560 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80560:	2301      	movs	r3, #1
   80562:	fa03 f101 	lsl.w	r1, r3, r1
   80566:	6101      	str	r1, [r0, #16]
   80568:	4770      	bx	lr

0008056a <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   8056a:	6241      	str	r1, [r0, #36]	; 0x24
   8056c:	4770      	bx	lr

0008056e <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   8056e:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80570:	4770      	bx	lr

00080572 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80572:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80574:	0189      	lsls	r1, r1, #6
   80576:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80578:	2402      	movs	r4, #2
   8057a:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8057c:	f04f 31ff 	mov.w	r1, #4294967295
   80580:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80582:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80584:	605a      	str	r2, [r3, #4]
}
   80586:	bc10      	pop	{r4}
   80588:	4770      	bx	lr

0008058a <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8058a:	0189      	lsls	r1, r1, #6
   8058c:	2305      	movs	r3, #5
   8058e:	5043      	str	r3, [r0, r1]
   80590:	4770      	bx	lr

00080592 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80592:	0189      	lsls	r1, r1, #6
   80594:	2302      	movs	r3, #2
   80596:	5043      	str	r3, [r0, r1]
   80598:	4770      	bx	lr

0008059a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   8059a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8059e:	61ca      	str	r2, [r1, #28]
   805a0:	4770      	bx	lr

000805a2 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   805a2:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   805a6:	624a      	str	r2, [r1, #36]	; 0x24
   805a8:	4770      	bx	lr

000805aa <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   805aa:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   805ae:	6a08      	ldr	r0, [r1, #32]
}
   805b0:	4770      	bx	lr

000805b2 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   805b2:	6943      	ldr	r3, [r0, #20]
   805b4:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   805b8:	bf1d      	ittte	ne
   805ba:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   805be:	61c1      	strne	r1, [r0, #28]
	return 0;
   805c0:	2000      	movne	r0, #0
		return 1;
   805c2:	2001      	moveq	r0, #1
}
   805c4:	4770      	bx	lr

000805c6 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   805c6:	6943      	ldr	r3, [r0, #20]
   805c8:	f013 0f01 	tst.w	r3, #1
   805cc:	d005      	beq.n	805da <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   805ce:	6983      	ldr	r3, [r0, #24]
   805d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   805d4:	600b      	str	r3, [r1, #0]

	return 0;
   805d6:	2000      	movs	r0, #0
   805d8:	4770      	bx	lr
		return 1;
   805da:	2001      	movs	r0, #1
}
   805dc:	4770      	bx	lr
	...

000805e0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   805e0:	b500      	push	{lr}
   805e2:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   805e4:	2201      	movs	r2, #1
   805e6:	f10d 0107 	add.w	r1, sp, #7
   805ea:	4810      	ldr	r0, [pc, #64]	; (8062c <USART0_Handler+0x4c>)
   805ec:	4b10      	ldr	r3, [pc, #64]	; (80630 <USART0_Handler+0x50>)
   805ee:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   805f0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   805f2:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   805f6:	2200      	movs	r2, #0
   805f8:	4b0e      	ldr	r3, [pc, #56]	; (80634 <USART0_Handler+0x54>)
   805fa:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   805fc:	4b0e      	ldr	r3, [pc, #56]	; (80638 <USART0_Handler+0x58>)
   805fe:	781b      	ldrb	r3, [r3, #0]
   80600:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80604:	4a0d      	ldr	r2, [pc, #52]	; (8063c <USART0_Handler+0x5c>)
   80606:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80608:	2b9b      	cmp	r3, #155	; 0x9b
   8060a:	d00b      	beq.n	80624 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   8060c:	3301      	adds	r3, #1
   8060e:	4a0a      	ldr	r2, [pc, #40]	; (80638 <USART0_Handler+0x58>)
   80610:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80612:	2201      	movs	r2, #1
   80614:	4b07      	ldr	r3, [pc, #28]	; (80634 <USART0_Handler+0x54>)
   80616:	701a      	strb	r2, [r3, #0]
   80618:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8061c:	b662      	cpsie	i
}
   8061e:	b003      	add	sp, #12
   80620:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   80624:	2200      	movs	r2, #0
   80626:	4b04      	ldr	r3, [pc, #16]	; (80638 <USART0_Handler+0x58>)
   80628:	701a      	strb	r2, [r3, #0]
   8062a:	e7f2      	b.n	80612 <USART0_Handler+0x32>
   8062c:	40098000 	.word	0x40098000
   80630:	00080691 	.word	0x00080691
   80634:	2007012c 	.word	0x2007012c
   80638:	20070ba4 	.word	0x20070ba4
   8063c:	20070b08 	.word	0x20070b08

00080640 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80640:	3801      	subs	r0, #1
   80642:	2802      	cmp	r0, #2
   80644:	d815      	bhi.n	80672 <_write+0x32>
{
   80646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8064a:	460e      	mov	r6, r1
   8064c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8064e:	b19a      	cbz	r2, 80678 <_write+0x38>
   80650:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80652:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8068c <_write+0x4c>
   80656:	4f0c      	ldr	r7, [pc, #48]	; (80688 <_write+0x48>)
   80658:	f8d8 0000 	ldr.w	r0, [r8]
   8065c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80660:	683b      	ldr	r3, [r7, #0]
   80662:	4798      	blx	r3
   80664:	2800      	cmp	r0, #0
   80666:	db0a      	blt.n	8067e <_write+0x3e>
   80668:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8066a:	3c01      	subs	r4, #1
   8066c:	d1f4      	bne.n	80658 <_write+0x18>
   8066e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80672:	f04f 30ff 	mov.w	r0, #4294967295
   80676:	4770      	bx	lr
	for (; len != 0; --len) {
   80678:	4610      	mov	r0, r2
   8067a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8067e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80686:	bf00      	nop
   80688:	20071c5c 	.word	0x20071c5c
   8068c:	20071c60 	.word	0x20071c60

00080690 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80690:	2a00      	cmp	r2, #0
   80692:	d051      	beq.n	80738 <usart_serial_read_packet+0xa8>
{
   80694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80698:	b083      	sub	sp, #12
   8069a:	4605      	mov	r5, r0
   8069c:	460c      	mov	r4, r1
   8069e:	4692      	mov	sl, r2
   806a0:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   806a2:	4f26      	ldr	r7, [pc, #152]	; (8073c <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   806a4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80750 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   806a8:	4e25      	ldr	r6, [pc, #148]	; (80740 <usart_serial_read_packet+0xb0>)
   806aa:	e01d      	b.n	806e8 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   806ac:	4621      	mov	r1, r4
   806ae:	4638      	mov	r0, r7
   806b0:	47c8      	blx	r9
   806b2:	2800      	cmp	r0, #0
   806b4:	d1fa      	bne.n	806ac <usart_serial_read_packet+0x1c>
   806b6:	e021      	b.n	806fc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   806b8:	469b      	mov	fp, r3
   806ba:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80754 <usart_serial_read_packet+0xc4>
   806be:	a901      	add	r1, sp, #4
   806c0:	4658      	mov	r0, fp
   806c2:	47c0      	blx	r8
   806c4:	2800      	cmp	r0, #0
   806c6:	d1fa      	bne.n	806be <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   806c8:	9b01      	ldr	r3, [sp, #4]
   806ca:	7023      	strb	r3, [r4, #0]
   806cc:	e019      	b.n	80702 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   806ce:	469b      	mov	fp, r3
   806d0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80754 <usart_serial_read_packet+0xc4>
   806d4:	a901      	add	r1, sp, #4
   806d6:	4658      	mov	r0, fp
   806d8:	47c0      	blx	r8
   806da:	2800      	cmp	r0, #0
   806dc:	d1fa      	bne.n	806d4 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   806de:	9b01      	ldr	r3, [sp, #4]
   806e0:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   806e2:	3401      	adds	r4, #1
	while (len) {
   806e4:	4554      	cmp	r4, sl
   806e6:	d023      	beq.n	80730 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   806e8:	2300      	movs	r3, #0
   806ea:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   806ec:	42bd      	cmp	r5, r7
   806ee:	d0dd      	beq.n	806ac <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   806f0:	4b14      	ldr	r3, [pc, #80]	; (80744 <usart_serial_read_packet+0xb4>)
   806f2:	429d      	cmp	r5, r3
   806f4:	d0e0      	beq.n	806b8 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   806f6:	4b14      	ldr	r3, [pc, #80]	; (80748 <usart_serial_read_packet+0xb8>)
   806f8:	429d      	cmp	r5, r3
   806fa:	d0e8      	beq.n	806ce <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   806fc:	4b13      	ldr	r3, [pc, #76]	; (8074c <usart_serial_read_packet+0xbc>)
   806fe:	429d      	cmp	r5, r3
   80700:	d00b      	beq.n	8071a <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   80702:	42b5      	cmp	r5, r6
   80704:	d1ed      	bne.n	806e2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80706:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80754 <usart_serial_read_packet+0xc4>
   8070a:	a901      	add	r1, sp, #4
   8070c:	4630      	mov	r0, r6
   8070e:	47c0      	blx	r8
   80710:	2800      	cmp	r0, #0
   80712:	d1fa      	bne.n	8070a <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80714:	9b01      	ldr	r3, [sp, #4]
   80716:	7023      	strb	r3, [r4, #0]
   80718:	e7e3      	b.n	806e2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8071a:	469b      	mov	fp, r3
   8071c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80754 <usart_serial_read_packet+0xc4>
   80720:	a901      	add	r1, sp, #4
   80722:	4658      	mov	r0, fp
   80724:	47c0      	blx	r8
   80726:	2800      	cmp	r0, #0
   80728:	d1fa      	bne.n	80720 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   8072a:	9b01      	ldr	r3, [sp, #4]
   8072c:	7023      	strb	r3, [r4, #0]
   8072e:	e7d8      	b.n	806e2 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80730:	2000      	movs	r0, #0
   80732:	b003      	add	sp, #12
   80734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80738:	2000      	movs	r0, #0
   8073a:	4770      	bx	lr
   8073c:	400e0800 	.word	0x400e0800
   80740:	400a4000 	.word	0x400a4000
   80744:	40098000 	.word	0x40098000
   80748:	4009c000 	.word	0x4009c000
   8074c:	400a0000 	.word	0x400a0000
   80750:	0008079f 	.word	0x0008079f
   80754:	000805c7 	.word	0x000805c7

00080758 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80758:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8075a:	23ac      	movs	r3, #172	; 0xac
   8075c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8075e:	680b      	ldr	r3, [r1, #0]
   80760:	684a      	ldr	r2, [r1, #4]
   80762:	fbb3 f3f2 	udiv	r3, r3, r2
   80766:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80768:	1e5c      	subs	r4, r3, #1
   8076a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8076e:	4294      	cmp	r4, r2
   80770:	d80b      	bhi.n	8078a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80772:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80774:	688b      	ldr	r3, [r1, #8]
   80776:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80778:	f240 2302 	movw	r3, #514	; 0x202
   8077c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80780:	2350      	movs	r3, #80	; 0x50
   80782:	6003      	str	r3, [r0, #0]

	return 0;
   80784:	2000      	movs	r0, #0
}
   80786:	bc10      	pop	{r4}
   80788:	4770      	bx	lr
		return 1;
   8078a:	2001      	movs	r0, #1
   8078c:	e7fb      	b.n	80786 <uart_init+0x2e>

0008078e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8078e:	6943      	ldr	r3, [r0, #20]
   80790:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80794:	bf1a      	itte	ne
   80796:	61c1      	strne	r1, [r0, #28]
	return 0;
   80798:	2000      	movne	r0, #0
		return 1;
   8079a:	2001      	moveq	r0, #1
}
   8079c:	4770      	bx	lr

0008079e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8079e:	6943      	ldr	r3, [r0, #20]
   807a0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   807a4:	bf1d      	ittte	ne
   807a6:	6983      	ldrne	r3, [r0, #24]
   807a8:	700b      	strbne	r3, [r1, #0]
	return 0;
   807aa:	2000      	movne	r0, #0
		return 1;
   807ac:	2001      	moveq	r0, #1
}
   807ae:	4770      	bx	lr

000807b0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   807b0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   807b2:	480e      	ldr	r0, [pc, #56]	; (807ec <sysclk_init+0x3c>)
   807b4:	4b0e      	ldr	r3, [pc, #56]	; (807f0 <sysclk_init+0x40>)
   807b6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   807b8:	213e      	movs	r1, #62	; 0x3e
   807ba:	2000      	movs	r0, #0
   807bc:	4b0d      	ldr	r3, [pc, #52]	; (807f4 <sysclk_init+0x44>)
   807be:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   807c0:	4c0d      	ldr	r4, [pc, #52]	; (807f8 <sysclk_init+0x48>)
   807c2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   807c4:	2800      	cmp	r0, #0
   807c6:	d0fc      	beq.n	807c2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   807c8:	4b0c      	ldr	r3, [pc, #48]	; (807fc <sysclk_init+0x4c>)
   807ca:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   807cc:	4a0c      	ldr	r2, [pc, #48]	; (80800 <sysclk_init+0x50>)
   807ce:	4b0d      	ldr	r3, [pc, #52]	; (80804 <sysclk_init+0x54>)
   807d0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   807d2:	4c0d      	ldr	r4, [pc, #52]	; (80808 <sysclk_init+0x58>)
   807d4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   807d6:	2800      	cmp	r0, #0
   807d8:	d0fc      	beq.n	807d4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   807da:	2010      	movs	r0, #16
   807dc:	4b0b      	ldr	r3, [pc, #44]	; (8080c <sysclk_init+0x5c>)
   807de:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   807e0:	4b0b      	ldr	r3, [pc, #44]	; (80810 <sysclk_init+0x60>)
   807e2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   807e4:	4801      	ldr	r0, [pc, #4]	; (807ec <sysclk_init+0x3c>)
   807e6:	4b02      	ldr	r3, [pc, #8]	; (807f0 <sysclk_init+0x40>)
   807e8:	4798      	blx	r3
   807ea:	bd10      	pop	{r4, pc}
   807ec:	0501bd00 	.word	0x0501bd00
   807f0:	200700a5 	.word	0x200700a5
   807f4:	00080c6d 	.word	0x00080c6d
   807f8:	00080cc1 	.word	0x00080cc1
   807fc:	00080cd1 	.word	0x00080cd1
   80800:	200d3f01 	.word	0x200d3f01
   80804:	400e0600 	.word	0x400e0600
   80808:	00080ce1 	.word	0x00080ce1
   8080c:	00080c09 	.word	0x00080c09
   80810:	00080de1 	.word	0x00080de1

00080814 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80814:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80816:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8081a:	4b16      	ldr	r3, [pc, #88]	; (80874 <board_init+0x60>)
   8081c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8081e:	200b      	movs	r0, #11
   80820:	4c15      	ldr	r4, [pc, #84]	; (80878 <board_init+0x64>)
   80822:	47a0      	blx	r4
   80824:	200c      	movs	r0, #12
   80826:	47a0      	blx	r4
   80828:	200d      	movs	r0, #13
   8082a:	47a0      	blx	r4
   8082c:	200e      	movs	r0, #14
   8082e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80830:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80834:	203b      	movs	r0, #59	; 0x3b
   80836:	4c11      	ldr	r4, [pc, #68]	; (8087c <board_init+0x68>)
   80838:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8083a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8083e:	2055      	movs	r0, #85	; 0x55
   80840:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80842:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80846:	2056      	movs	r0, #86	; 0x56
   80848:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8084a:	490d      	ldr	r1, [pc, #52]	; (80880 <board_init+0x6c>)
   8084c:	2068      	movs	r0, #104	; 0x68
   8084e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80850:	490c      	ldr	r1, [pc, #48]	; (80884 <board_init+0x70>)
   80852:	205c      	movs	r0, #92	; 0x5c
   80854:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80856:	4a0c      	ldr	r2, [pc, #48]	; (80888 <board_init+0x74>)
   80858:	f44f 7140 	mov.w	r1, #768	; 0x300
   8085c:	480b      	ldr	r0, [pc, #44]	; (8088c <board_init+0x78>)
   8085e:	4b0c      	ldr	r3, [pc, #48]	; (80890 <board_init+0x7c>)
   80860:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80862:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80866:	202b      	movs	r0, #43	; 0x2b
   80868:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8086a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8086e:	202a      	movs	r0, #42	; 0x2a
   80870:	47a0      	blx	r4
   80872:	bd10      	pop	{r4, pc}
   80874:	400e1a50 	.word	0x400e1a50
   80878:	00080cf1 	.word	0x00080cf1
   8087c:	0008098d 	.word	0x0008098d
   80880:	28000079 	.word	0x28000079
   80884:	28000001 	.word	0x28000001
   80888:	08000001 	.word	0x08000001
   8088c:	400e0e00 	.word	0x400e0e00
   80890:	00080a5d 	.word	0x00080a5d

00080894 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80894:	b90a      	cbnz	r2, 8089a <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80896:	6601      	str	r1, [r0, #96]	; 0x60
   80898:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8089a:	6641      	str	r1, [r0, #100]	; 0x64
   8089c:	4770      	bx	lr

0008089e <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   8089e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   808a2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   808a6:	bf0c      	ite	eq
   808a8:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   808aa:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   808ac:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   808ae:	bf14      	ite	ne
   808b0:	2001      	movne	r0, #1
   808b2:	2000      	moveq	r0, #0
   808b4:	4770      	bx	lr

000808b6 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   808b6:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   808b8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   808bc:	d016      	beq.n	808ec <pio_set_peripheral+0x36>
   808be:	d80b      	bhi.n	808d8 <pio_set_peripheral+0x22>
   808c0:	b149      	cbz	r1, 808d6 <pio_set_peripheral+0x20>
   808c2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   808c6:	d105      	bne.n	808d4 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   808c8:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   808ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
   808cc:	400b      	ands	r3, r1
   808ce:	ea23 0302 	bic.w	r3, r3, r2
   808d2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   808d4:	6042      	str	r2, [r0, #4]
   808d6:	4770      	bx	lr
	switch (ul_type) {
   808d8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   808dc:	d0fb      	beq.n	808d6 <pio_set_peripheral+0x20>
   808de:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   808e2:	d0f8      	beq.n	808d6 <pio_set_peripheral+0x20>
   808e4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   808e8:	d1f4      	bne.n	808d4 <pio_set_peripheral+0x1e>
   808ea:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   808ec:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   808ee:	4313      	orrs	r3, r2
   808f0:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   808f2:	e7ef      	b.n	808d4 <pio_set_peripheral+0x1e>

000808f4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   808f4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   808f6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   808fa:	bf14      	ite	ne
   808fc:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   808fe:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80900:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80904:	bf14      	ite	ne
   80906:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80908:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   8090a:	f012 0f02 	tst.w	r2, #2
   8090e:	d107      	bne.n	80920 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80910:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80914:	bf18      	it	ne
   80916:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   8091a:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8091c:	6001      	str	r1, [r0, #0]
   8091e:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80920:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80924:	e7f9      	b.n	8091a <pio_set_input+0x26>

00080926 <pio_set_output>:
{
   80926:	b410      	push	{r4}
   80928:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   8092a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8092c:	b944      	cbnz	r4, 80940 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8092e:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80930:	b143      	cbz	r3, 80944 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80932:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80934:	b942      	cbnz	r2, 80948 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80936:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80938:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8093a:	6001      	str	r1, [r0, #0]
}
   8093c:	bc10      	pop	{r4}
   8093e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80940:	6641      	str	r1, [r0, #100]	; 0x64
   80942:	e7f5      	b.n	80930 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80944:	6541      	str	r1, [r0, #84]	; 0x54
   80946:	e7f5      	b.n	80934 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80948:	6301      	str	r1, [r0, #48]	; 0x30
   8094a:	e7f5      	b.n	80938 <pio_set_output+0x12>

0008094c <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   8094c:	f012 0f10 	tst.w	r2, #16
   80950:	d010      	beq.n	80974 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   80952:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80956:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   8095a:	bf14      	ite	ne
   8095c:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   80960:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   80964:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   80968:	bf14      	ite	ne
   8096a:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   8096e:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80972:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   80974:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80978:	4770      	bx	lr

0008097a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   8097a:	6401      	str	r1, [r0, #64]	; 0x40
   8097c:	4770      	bx	lr

0008097e <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
   8097e:	6441      	str	r1, [r0, #68]	; 0x44
   80980:	4770      	bx	lr

00080982 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80982:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80984:	4770      	bx	lr

00080986 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80986:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80988:	4770      	bx	lr
	...

0008098c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8098c:	b570      	push	{r4, r5, r6, lr}
   8098e:	b082      	sub	sp, #8
   80990:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80992:	0943      	lsrs	r3, r0, #5
   80994:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80998:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8099c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8099e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   809a2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   809a6:	d031      	beq.n	80a0c <pio_configure_pin+0x80>
   809a8:	d816      	bhi.n	809d8 <pio_configure_pin+0x4c>
   809aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   809ae:	d01b      	beq.n	809e8 <pio_configure_pin+0x5c>
   809b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   809b4:	d116      	bne.n	809e4 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   809b6:	f000 001f 	and.w	r0, r0, #31
   809ba:	2601      	movs	r6, #1
   809bc:	4086      	lsls	r6, r0
   809be:	4632      	mov	r2, r6
   809c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809c4:	4620      	mov	r0, r4
   809c6:	4b22      	ldr	r3, [pc, #136]	; (80a50 <pio_configure_pin+0xc4>)
   809c8:	4798      	blx	r3
	if (ul_pull_up_enable) {
   809ca:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   809ce:	bf14      	ite	ne
   809d0:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   809d2:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   809d4:	2001      	movs	r0, #1
   809d6:	e017      	b.n	80a08 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   809d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   809dc:	d021      	beq.n	80a22 <pio_configure_pin+0x96>
   809de:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   809e2:	d01e      	beq.n	80a22 <pio_configure_pin+0x96>
		return 0;
   809e4:	2000      	movs	r0, #0
   809e6:	e00f      	b.n	80a08 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   809e8:	f000 001f 	and.w	r0, r0, #31
   809ec:	2601      	movs	r6, #1
   809ee:	4086      	lsls	r6, r0
   809f0:	4632      	mov	r2, r6
   809f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809f6:	4620      	mov	r0, r4
   809f8:	4b15      	ldr	r3, [pc, #84]	; (80a50 <pio_configure_pin+0xc4>)
   809fa:	4798      	blx	r3
	if (ul_pull_up_enable) {
   809fc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a00:	bf14      	ite	ne
   80a02:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a04:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80a06:	2001      	movs	r0, #1
}
   80a08:	b002      	add	sp, #8
   80a0a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80a0c:	f000 011f 	and.w	r1, r0, #31
   80a10:	2601      	movs	r6, #1
   80a12:	462a      	mov	r2, r5
   80a14:	fa06 f101 	lsl.w	r1, r6, r1
   80a18:	4620      	mov	r0, r4
   80a1a:	4b0e      	ldr	r3, [pc, #56]	; (80a54 <pio_configure_pin+0xc8>)
   80a1c:	4798      	blx	r3
	return 1;
   80a1e:	4630      	mov	r0, r6
		break;
   80a20:	e7f2      	b.n	80a08 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a22:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a26:	f000 011f 	and.w	r1, r0, #31
   80a2a:	2601      	movs	r6, #1
   80a2c:	ea05 0306 	and.w	r3, r5, r6
   80a30:	9300      	str	r3, [sp, #0]
   80a32:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80a36:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80a3a:	bf14      	ite	ne
   80a3c:	2200      	movne	r2, #0
   80a3e:	2201      	moveq	r2, #1
   80a40:	fa06 f101 	lsl.w	r1, r6, r1
   80a44:	4620      	mov	r0, r4
   80a46:	4c04      	ldr	r4, [pc, #16]	; (80a58 <pio_configure_pin+0xcc>)
   80a48:	47a0      	blx	r4
	return 1;
   80a4a:	4630      	mov	r0, r6
		break;
   80a4c:	e7dc      	b.n	80a08 <pio_configure_pin+0x7c>
   80a4e:	bf00      	nop
   80a50:	000808b7 	.word	0x000808b7
   80a54:	000808f5 	.word	0x000808f5
   80a58:	00080927 	.word	0x00080927

00080a5c <pio_configure_pin_group>:
{
   80a5c:	b570      	push	{r4, r5, r6, lr}
   80a5e:	b082      	sub	sp, #8
   80a60:	4605      	mov	r5, r0
   80a62:	460e      	mov	r6, r1
   80a64:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80a66:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80a6a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80a6e:	d027      	beq.n	80ac0 <pio_configure_pin_group+0x64>
   80a70:	d811      	bhi.n	80a96 <pio_configure_pin_group+0x3a>
   80a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80a76:	d016      	beq.n	80aa6 <pio_configure_pin_group+0x4a>
   80a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80a7c:	d111      	bne.n	80aa2 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80a7e:	460a      	mov	r2, r1
   80a80:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a84:	4b19      	ldr	r3, [pc, #100]	; (80aec <pio_configure_pin_group+0x90>)
   80a86:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80a88:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80a8c:	bf14      	ite	ne
   80a8e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a90:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80a92:	2001      	movs	r0, #1
   80a94:	e012      	b.n	80abc <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80a96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80a9a:	d015      	beq.n	80ac8 <pio_configure_pin_group+0x6c>
   80a9c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80aa0:	d012      	beq.n	80ac8 <pio_configure_pin_group+0x6c>
		return 0;
   80aa2:	2000      	movs	r0, #0
   80aa4:	e00a      	b.n	80abc <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80aa6:	460a      	mov	r2, r1
   80aa8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80aac:	4b0f      	ldr	r3, [pc, #60]	; (80aec <pio_configure_pin_group+0x90>)
   80aae:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ab0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80ab4:	bf14      	ite	ne
   80ab6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ab8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80aba:	2001      	movs	r0, #1
}
   80abc:	b002      	add	sp, #8
   80abe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80ac0:	4b0b      	ldr	r3, [pc, #44]	; (80af0 <pio_configure_pin_group+0x94>)
   80ac2:	4798      	blx	r3
	return 1;
   80ac4:	2001      	movs	r0, #1
		break;
   80ac6:	e7f9      	b.n	80abc <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80ac8:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80acc:	f004 0301 	and.w	r3, r4, #1
   80ad0:	9300      	str	r3, [sp, #0]
   80ad2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80ad6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80ada:	bf14      	ite	ne
   80adc:	2200      	movne	r2, #0
   80ade:	2201      	moveq	r2, #1
   80ae0:	4631      	mov	r1, r6
   80ae2:	4628      	mov	r0, r5
   80ae4:	4c03      	ldr	r4, [pc, #12]	; (80af4 <pio_configure_pin_group+0x98>)
   80ae6:	47a0      	blx	r4
	return 1;
   80ae8:	2001      	movs	r0, #1
		break;
   80aea:	e7e7      	b.n	80abc <pio_configure_pin_group+0x60>
   80aec:	000808b7 	.word	0x000808b7
   80af0:	000808f5 	.word	0x000808f5
   80af4:	00080927 	.word	0x00080927

00080af8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80afc:	4604      	mov	r4, r0
   80afe:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80b00:	4b0e      	ldr	r3, [pc, #56]	; (80b3c <pio_handler_process+0x44>)
   80b02:	4798      	blx	r3
   80b04:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80b06:	4620      	mov	r0, r4
   80b08:	4b0d      	ldr	r3, [pc, #52]	; (80b40 <pio_handler_process+0x48>)
   80b0a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80b0c:	4005      	ands	r5, r0
   80b0e:	d013      	beq.n	80b38 <pio_handler_process+0x40>
   80b10:	4c0c      	ldr	r4, [pc, #48]	; (80b44 <pio_handler_process+0x4c>)
   80b12:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80b16:	e003      	b.n	80b20 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80b18:	42b4      	cmp	r4, r6
   80b1a:	d00d      	beq.n	80b38 <pio_handler_process+0x40>
   80b1c:	3410      	adds	r4, #16
		while (status != 0) {
   80b1e:	b15d      	cbz	r5, 80b38 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80b20:	6820      	ldr	r0, [r4, #0]
   80b22:	4540      	cmp	r0, r8
   80b24:	d1f8      	bne.n	80b18 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80b26:	6861      	ldr	r1, [r4, #4]
   80b28:	4229      	tst	r1, r5
   80b2a:	d0f5      	beq.n	80b18 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80b2c:	68e3      	ldr	r3, [r4, #12]
   80b2e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80b30:	6863      	ldr	r3, [r4, #4]
   80b32:	ea25 0503 	bic.w	r5, r5, r3
   80b36:	e7ef      	b.n	80b18 <pio_handler_process+0x20>
   80b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b3c:	00080983 	.word	0x00080983
   80b40:	00080987 	.word	0x00080987
   80b44:	20070ba8 	.word	0x20070ba8

00080b48 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80b4a:	4c18      	ldr	r4, [pc, #96]	; (80bac <pio_handler_set+0x64>)
   80b4c:	6826      	ldr	r6, [r4, #0]
   80b4e:	2e06      	cmp	r6, #6
   80b50:	d829      	bhi.n	80ba6 <pio_handler_set+0x5e>
   80b52:	f04f 0c00 	mov.w	ip, #0
   80b56:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80b58:	4f15      	ldr	r7, [pc, #84]	; (80bb0 <pio_handler_set+0x68>)
   80b5a:	e004      	b.n	80b66 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   80b5c:	3401      	adds	r4, #1
   80b5e:	b2e4      	uxtb	r4, r4
   80b60:	46a4      	mov	ip, r4
   80b62:	42a6      	cmp	r6, r4
   80b64:	d309      	bcc.n	80b7a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80b66:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80b68:	0125      	lsls	r5, r4, #4
   80b6a:	597d      	ldr	r5, [r7, r5]
   80b6c:	428d      	cmp	r5, r1
   80b6e:	d1f5      	bne.n	80b5c <pio_handler_set+0x14>
   80b70:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   80b74:	686d      	ldr	r5, [r5, #4]
   80b76:	4295      	cmp	r5, r2
   80b78:	d1f0      	bne.n	80b5c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   80b7a:	4d0d      	ldr	r5, [pc, #52]	; (80bb0 <pio_handler_set+0x68>)
   80b7c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   80b80:	eb05 040e 	add.w	r4, r5, lr
   80b84:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   80b88:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   80b8a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   80b8c:	9906      	ldr	r1, [sp, #24]
   80b8e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   80b90:	3601      	adds	r6, #1
   80b92:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   80b94:	bf04      	itt	eq
   80b96:	4905      	ldreq	r1, [pc, #20]	; (80bac <pio_handler_set+0x64>)
   80b98:	600e      	streq	r6, [r1, #0]
   80b9a:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80b9c:	461a      	mov	r2, r3
   80b9e:	4b05      	ldr	r3, [pc, #20]	; (80bb4 <pio_handler_set+0x6c>)
   80ba0:	4798      	blx	r3

	return 0;
   80ba2:	2000      	movs	r0, #0
   80ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   80ba6:	2001      	movs	r0, #1
}
   80ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80baa:	bf00      	nop
   80bac:	20070c18 	.word	0x20070c18
   80bb0:	20070ba8 	.word	0x20070ba8
   80bb4:	0008094d 	.word	0x0008094d

00080bb8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80bb8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80bba:	210b      	movs	r1, #11
   80bbc:	4801      	ldr	r0, [pc, #4]	; (80bc4 <PIOA_Handler+0xc>)
   80bbe:	4b02      	ldr	r3, [pc, #8]	; (80bc8 <PIOA_Handler+0x10>)
   80bc0:	4798      	blx	r3
   80bc2:	bd08      	pop	{r3, pc}
   80bc4:	400e0e00 	.word	0x400e0e00
   80bc8:	00080af9 	.word	0x00080af9

00080bcc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80bcc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80bce:	210c      	movs	r1, #12
   80bd0:	4801      	ldr	r0, [pc, #4]	; (80bd8 <PIOB_Handler+0xc>)
   80bd2:	4b02      	ldr	r3, [pc, #8]	; (80bdc <PIOB_Handler+0x10>)
   80bd4:	4798      	blx	r3
   80bd6:	bd08      	pop	{r3, pc}
   80bd8:	400e1000 	.word	0x400e1000
   80bdc:	00080af9 	.word	0x00080af9

00080be0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80be0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80be2:	210d      	movs	r1, #13
   80be4:	4801      	ldr	r0, [pc, #4]	; (80bec <PIOC_Handler+0xc>)
   80be6:	4b02      	ldr	r3, [pc, #8]	; (80bf0 <PIOC_Handler+0x10>)
   80be8:	4798      	blx	r3
   80bea:	bd08      	pop	{r3, pc}
   80bec:	400e1200 	.word	0x400e1200
   80bf0:	00080af9 	.word	0x00080af9

00080bf4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80bf4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80bf6:	210e      	movs	r1, #14
   80bf8:	4801      	ldr	r0, [pc, #4]	; (80c00 <PIOD_Handler+0xc>)
   80bfa:	4b02      	ldr	r3, [pc, #8]	; (80c04 <PIOD_Handler+0x10>)
   80bfc:	4798      	blx	r3
   80bfe:	bd08      	pop	{r3, pc}
   80c00:	400e1400 	.word	0x400e1400
   80c04:	00080af9 	.word	0x00080af9

00080c08 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80c08:	4a17      	ldr	r2, [pc, #92]	; (80c68 <pmc_switch_mck_to_pllack+0x60>)
   80c0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80c10:	4318      	orrs	r0, r3
   80c12:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80c14:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c16:	f013 0f08 	tst.w	r3, #8
   80c1a:	d10a      	bne.n	80c32 <pmc_switch_mck_to_pllack+0x2a>
   80c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80c20:	4911      	ldr	r1, [pc, #68]	; (80c68 <pmc_switch_mck_to_pllack+0x60>)
   80c22:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80c24:	f012 0f08 	tst.w	r2, #8
   80c28:	d103      	bne.n	80c32 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80c2a:	3b01      	subs	r3, #1
   80c2c:	d1f9      	bne.n	80c22 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80c2e:	2001      	movs	r0, #1
   80c30:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80c32:	4a0d      	ldr	r2, [pc, #52]	; (80c68 <pmc_switch_mck_to_pllack+0x60>)
   80c34:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80c36:	f023 0303 	bic.w	r3, r3, #3
   80c3a:	f043 0302 	orr.w	r3, r3, #2
   80c3e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80c40:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c42:	f013 0f08 	tst.w	r3, #8
   80c46:	d10a      	bne.n	80c5e <pmc_switch_mck_to_pllack+0x56>
   80c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80c4c:	4906      	ldr	r1, [pc, #24]	; (80c68 <pmc_switch_mck_to_pllack+0x60>)
   80c4e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80c50:	f012 0f08 	tst.w	r2, #8
   80c54:	d105      	bne.n	80c62 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80c56:	3b01      	subs	r3, #1
   80c58:	d1f9      	bne.n	80c4e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80c5a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80c5c:	4770      	bx	lr
	return 0;
   80c5e:	2000      	movs	r0, #0
   80c60:	4770      	bx	lr
   80c62:	2000      	movs	r0, #0
   80c64:	4770      	bx	lr
   80c66:	bf00      	nop
   80c68:	400e0600 	.word	0x400e0600

00080c6c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80c6c:	b9c8      	cbnz	r0, 80ca2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c6e:	4a11      	ldr	r2, [pc, #68]	; (80cb4 <pmc_switch_mainck_to_xtal+0x48>)
   80c70:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80c72:	0209      	lsls	r1, r1, #8
   80c74:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80c76:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80c7a:	f023 0303 	bic.w	r3, r3, #3
   80c7e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80c82:	f043 0301 	orr.w	r3, r3, #1
   80c86:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c88:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80c8a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c8c:	f013 0f01 	tst.w	r3, #1
   80c90:	d0fb      	beq.n	80c8a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80c92:	4a08      	ldr	r2, [pc, #32]	; (80cb4 <pmc_switch_mainck_to_xtal+0x48>)
   80c94:	6a13      	ldr	r3, [r2, #32]
   80c96:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80c9e:	6213      	str	r3, [r2, #32]
   80ca0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80ca2:	4904      	ldr	r1, [pc, #16]	; (80cb4 <pmc_switch_mainck_to_xtal+0x48>)
   80ca4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80ca6:	4a04      	ldr	r2, [pc, #16]	; (80cb8 <pmc_switch_mainck_to_xtal+0x4c>)
   80ca8:	401a      	ands	r2, r3
   80caa:	4b04      	ldr	r3, [pc, #16]	; (80cbc <pmc_switch_mainck_to_xtal+0x50>)
   80cac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80cae:	620b      	str	r3, [r1, #32]
   80cb0:	4770      	bx	lr
   80cb2:	bf00      	nop
   80cb4:	400e0600 	.word	0x400e0600
   80cb8:	fec8fffc 	.word	0xfec8fffc
   80cbc:	01370002 	.word	0x01370002

00080cc0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80cc0:	4b02      	ldr	r3, [pc, #8]	; (80ccc <pmc_osc_is_ready_mainck+0xc>)
   80cc2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80cc4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80cc8:	4770      	bx	lr
   80cca:	bf00      	nop
   80ccc:	400e0600 	.word	0x400e0600

00080cd0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80cd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80cd4:	4b01      	ldr	r3, [pc, #4]	; (80cdc <pmc_disable_pllack+0xc>)
   80cd6:	629a      	str	r2, [r3, #40]	; 0x28
   80cd8:	4770      	bx	lr
   80cda:	bf00      	nop
   80cdc:	400e0600 	.word	0x400e0600

00080ce0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80ce0:	4b02      	ldr	r3, [pc, #8]	; (80cec <pmc_is_locked_pllack+0xc>)
   80ce2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80ce4:	f000 0002 	and.w	r0, r0, #2
   80ce8:	4770      	bx	lr
   80cea:	bf00      	nop
   80cec:	400e0600 	.word	0x400e0600

00080cf0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80cf0:	282c      	cmp	r0, #44	; 0x2c
   80cf2:	d81e      	bhi.n	80d32 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80cf4:	281f      	cmp	r0, #31
   80cf6:	d80c      	bhi.n	80d12 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80cf8:	4b11      	ldr	r3, [pc, #68]	; (80d40 <pmc_enable_periph_clk+0x50>)
   80cfa:	699a      	ldr	r2, [r3, #24]
   80cfc:	2301      	movs	r3, #1
   80cfe:	4083      	lsls	r3, r0
   80d00:	4393      	bics	r3, r2
   80d02:	d018      	beq.n	80d36 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80d04:	2301      	movs	r3, #1
   80d06:	fa03 f000 	lsl.w	r0, r3, r0
   80d0a:	4b0d      	ldr	r3, [pc, #52]	; (80d40 <pmc_enable_periph_clk+0x50>)
   80d0c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d0e:	2000      	movs	r0, #0
   80d10:	4770      	bx	lr
		ul_id -= 32;
   80d12:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80d14:	4b0a      	ldr	r3, [pc, #40]	; (80d40 <pmc_enable_periph_clk+0x50>)
   80d16:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80d1a:	2301      	movs	r3, #1
   80d1c:	4083      	lsls	r3, r0
   80d1e:	4393      	bics	r3, r2
   80d20:	d00b      	beq.n	80d3a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80d22:	2301      	movs	r3, #1
   80d24:	fa03 f000 	lsl.w	r0, r3, r0
   80d28:	4b05      	ldr	r3, [pc, #20]	; (80d40 <pmc_enable_periph_clk+0x50>)
   80d2a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80d2e:	2000      	movs	r0, #0
   80d30:	4770      	bx	lr
		return 1;
   80d32:	2001      	movs	r0, #1
   80d34:	4770      	bx	lr
	return 0;
   80d36:	2000      	movs	r0, #0
   80d38:	4770      	bx	lr
   80d3a:	2000      	movs	r0, #0
}
   80d3c:	4770      	bx	lr
   80d3e:	bf00      	nop
   80d40:	400e0600 	.word	0x400e0600

00080d44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80d44:	e7fe      	b.n	80d44 <Dummy_Handler>
	...

00080d48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80d48:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80d4a:	4b1c      	ldr	r3, [pc, #112]	; (80dbc <Reset_Handler+0x74>)
   80d4c:	4a1c      	ldr	r2, [pc, #112]	; (80dc0 <Reset_Handler+0x78>)
   80d4e:	429a      	cmp	r2, r3
   80d50:	d010      	beq.n	80d74 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80d52:	4b1c      	ldr	r3, [pc, #112]	; (80dc4 <Reset_Handler+0x7c>)
   80d54:	4a19      	ldr	r2, [pc, #100]	; (80dbc <Reset_Handler+0x74>)
   80d56:	429a      	cmp	r2, r3
   80d58:	d20c      	bcs.n	80d74 <Reset_Handler+0x2c>
   80d5a:	3b01      	subs	r3, #1
   80d5c:	1a9b      	subs	r3, r3, r2
   80d5e:	f023 0303 	bic.w	r3, r3, #3
   80d62:	3304      	adds	r3, #4
   80d64:	4413      	add	r3, r2
   80d66:	4916      	ldr	r1, [pc, #88]	; (80dc0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80d68:	f851 0b04 	ldr.w	r0, [r1], #4
   80d6c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80d70:	429a      	cmp	r2, r3
   80d72:	d1f9      	bne.n	80d68 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d74:	4b14      	ldr	r3, [pc, #80]	; (80dc8 <Reset_Handler+0x80>)
   80d76:	4a15      	ldr	r2, [pc, #84]	; (80dcc <Reset_Handler+0x84>)
   80d78:	429a      	cmp	r2, r3
   80d7a:	d20a      	bcs.n	80d92 <Reset_Handler+0x4a>
   80d7c:	3b01      	subs	r3, #1
   80d7e:	1a9b      	subs	r3, r3, r2
   80d80:	f023 0303 	bic.w	r3, r3, #3
   80d84:	3304      	adds	r3, #4
   80d86:	4413      	add	r3, r2
		*pDest++ = 0;
   80d88:	2100      	movs	r1, #0
   80d8a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80d8e:	4293      	cmp	r3, r2
   80d90:	d1fb      	bne.n	80d8a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80d92:	4b0f      	ldr	r3, [pc, #60]	; (80dd0 <Reset_Handler+0x88>)
   80d94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80d98:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80d9c:	490d      	ldr	r1, [pc, #52]	; (80dd4 <Reset_Handler+0x8c>)
   80d9e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80da0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80da8:	d203      	bcs.n	80db2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80daa:	688b      	ldr	r3, [r1, #8]
   80dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80db0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80db2:	4b09      	ldr	r3, [pc, #36]	; (80dd8 <Reset_Handler+0x90>)
   80db4:	4798      	blx	r3

	/* Branch to main function */
	main();
   80db6:	4b09      	ldr	r3, [pc, #36]	; (80ddc <Reset_Handler+0x94>)
   80db8:	4798      	blx	r3
   80dba:	e7fe      	b.n	80dba <Reset_Handler+0x72>
   80dbc:	20070000 	.word	0x20070000
   80dc0:	00084830 	.word	0x00084830
   80dc4:	20070ae0 	.word	0x20070ae0
   80dc8:	20071c8c 	.word	0x20071c8c
   80dcc:	20070ae0 	.word	0x20070ae0
   80dd0:	00080000 	.word	0x00080000
   80dd4:	e000ed00 	.word	0xe000ed00
   80dd8:	000816ad 	.word	0x000816ad
   80ddc:	000810e9 	.word	0x000810e9

00080de0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80de0:	4b3d      	ldr	r3, [pc, #244]	; (80ed8 <SystemCoreClockUpdate+0xf8>)
   80de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80de4:	f003 0303 	and.w	r3, r3, #3
   80de8:	2b03      	cmp	r3, #3
   80dea:	d80e      	bhi.n	80e0a <SystemCoreClockUpdate+0x2a>
   80dec:	e8df f003 	tbb	[pc, r3]
   80df0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80df4:	4b39      	ldr	r3, [pc, #228]	; (80edc <SystemCoreClockUpdate+0xfc>)
   80df6:	695b      	ldr	r3, [r3, #20]
   80df8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80dfc:	bf14      	ite	ne
   80dfe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80e02:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80e06:	4b36      	ldr	r3, [pc, #216]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e08:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e0a:	4b33      	ldr	r3, [pc, #204]	; (80ed8 <SystemCoreClockUpdate+0xf8>)
   80e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e12:	2b70      	cmp	r3, #112	; 0x70
   80e14:	d057      	beq.n	80ec6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80e16:	4b30      	ldr	r3, [pc, #192]	; (80ed8 <SystemCoreClockUpdate+0xf8>)
   80e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80e1a:	4931      	ldr	r1, [pc, #196]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e1c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80e20:	680b      	ldr	r3, [r1, #0]
   80e22:	40d3      	lsrs	r3, r2
   80e24:	600b      	str	r3, [r1, #0]
   80e26:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e28:	4b2b      	ldr	r3, [pc, #172]	; (80ed8 <SystemCoreClockUpdate+0xf8>)
   80e2a:	6a1b      	ldr	r3, [r3, #32]
   80e2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80e30:	d003      	beq.n	80e3a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e32:	4a2c      	ldr	r2, [pc, #176]	; (80ee4 <SystemCoreClockUpdate+0x104>)
   80e34:	4b2a      	ldr	r3, [pc, #168]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e36:	601a      	str	r2, [r3, #0]
   80e38:	e7e7      	b.n	80e0a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e3a:	4a2b      	ldr	r2, [pc, #172]	; (80ee8 <SystemCoreClockUpdate+0x108>)
   80e3c:	4b28      	ldr	r3, [pc, #160]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e3e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e40:	4b25      	ldr	r3, [pc, #148]	; (80ed8 <SystemCoreClockUpdate+0xf8>)
   80e42:	6a1b      	ldr	r3, [r3, #32]
   80e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e48:	2b10      	cmp	r3, #16
   80e4a:	d005      	beq.n	80e58 <SystemCoreClockUpdate+0x78>
   80e4c:	2b20      	cmp	r3, #32
   80e4e:	d1dc      	bne.n	80e0a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80e50:	4a24      	ldr	r2, [pc, #144]	; (80ee4 <SystemCoreClockUpdate+0x104>)
   80e52:	4b23      	ldr	r3, [pc, #140]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e54:	601a      	str	r2, [r3, #0]
				break;
   80e56:	e7d8      	b.n	80e0a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80e58:	4a24      	ldr	r2, [pc, #144]	; (80eec <SystemCoreClockUpdate+0x10c>)
   80e5a:	4b21      	ldr	r3, [pc, #132]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e5c:	601a      	str	r2, [r3, #0]
				break;
   80e5e:	e7d4      	b.n	80e0a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e60:	4b1d      	ldr	r3, [pc, #116]	; (80ed8 <SystemCoreClockUpdate+0xf8>)
   80e62:	6a1b      	ldr	r3, [r3, #32]
   80e64:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80e68:	d00c      	beq.n	80e84 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e6a:	4a1e      	ldr	r2, [pc, #120]	; (80ee4 <SystemCoreClockUpdate+0x104>)
   80e6c:	4b1c      	ldr	r3, [pc, #112]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e6e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80e70:	4b19      	ldr	r3, [pc, #100]	; (80ed8 <SystemCoreClockUpdate+0xf8>)
   80e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e74:	f003 0303 	and.w	r3, r3, #3
   80e78:	2b02      	cmp	r3, #2
   80e7a:	d016      	beq.n	80eaa <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80e7c:	4a1c      	ldr	r2, [pc, #112]	; (80ef0 <SystemCoreClockUpdate+0x110>)
   80e7e:	4b18      	ldr	r3, [pc, #96]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e80:	601a      	str	r2, [r3, #0]
   80e82:	e7c2      	b.n	80e0a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e84:	4a18      	ldr	r2, [pc, #96]	; (80ee8 <SystemCoreClockUpdate+0x108>)
   80e86:	4b16      	ldr	r3, [pc, #88]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e88:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e8a:	4b13      	ldr	r3, [pc, #76]	; (80ed8 <SystemCoreClockUpdate+0xf8>)
   80e8c:	6a1b      	ldr	r3, [r3, #32]
   80e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e92:	2b10      	cmp	r3, #16
   80e94:	d005      	beq.n	80ea2 <SystemCoreClockUpdate+0xc2>
   80e96:	2b20      	cmp	r3, #32
   80e98:	d1ea      	bne.n	80e70 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80e9a:	4a12      	ldr	r2, [pc, #72]	; (80ee4 <SystemCoreClockUpdate+0x104>)
   80e9c:	4b10      	ldr	r3, [pc, #64]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80e9e:	601a      	str	r2, [r3, #0]
				break;
   80ea0:	e7e6      	b.n	80e70 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80ea2:	4a12      	ldr	r2, [pc, #72]	; (80eec <SystemCoreClockUpdate+0x10c>)
   80ea4:	4b0e      	ldr	r3, [pc, #56]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80ea6:	601a      	str	r2, [r3, #0]
				break;
   80ea8:	e7e2      	b.n	80e70 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80eaa:	4a0b      	ldr	r2, [pc, #44]	; (80ed8 <SystemCoreClockUpdate+0xf8>)
   80eac:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80eae:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80eb0:	480b      	ldr	r0, [pc, #44]	; (80ee0 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80eb2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80eb6:	6803      	ldr	r3, [r0, #0]
   80eb8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80ebc:	b2d2      	uxtb	r2, r2
   80ebe:	fbb3 f3f2 	udiv	r3, r3, r2
   80ec2:	6003      	str	r3, [r0, #0]
   80ec4:	e7a1      	b.n	80e0a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80ec6:	4a06      	ldr	r2, [pc, #24]	; (80ee0 <SystemCoreClockUpdate+0x100>)
   80ec8:	6813      	ldr	r3, [r2, #0]
   80eca:	490a      	ldr	r1, [pc, #40]	; (80ef4 <SystemCoreClockUpdate+0x114>)
   80ecc:	fba1 1303 	umull	r1, r3, r1, r3
   80ed0:	085b      	lsrs	r3, r3, #1
   80ed2:	6013      	str	r3, [r2, #0]
   80ed4:	4770      	bx	lr
   80ed6:	bf00      	nop
   80ed8:	400e0600 	.word	0x400e0600
   80edc:	400e1a10 	.word	0x400e1a10
   80ee0:	20070130 	.word	0x20070130
   80ee4:	00b71b00 	.word	0x00b71b00
   80ee8:	003d0900 	.word	0x003d0900
   80eec:	007a1200 	.word	0x007a1200
   80ef0:	0e4e1c00 	.word	0x0e4e1c00
   80ef4:	aaaaaaab 	.word	0xaaaaaaab

00080ef8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ef8:	4b0a      	ldr	r3, [pc, #40]	; (80f24 <_sbrk+0x2c>)
   80efa:	681b      	ldr	r3, [r3, #0]
   80efc:	b153      	cbz	r3, 80f14 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80efe:	4b09      	ldr	r3, [pc, #36]	; (80f24 <_sbrk+0x2c>)
   80f00:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80f02:	181a      	adds	r2, r3, r0
   80f04:	4908      	ldr	r1, [pc, #32]	; (80f28 <_sbrk+0x30>)
   80f06:	4291      	cmp	r1, r2
   80f08:	db08      	blt.n	80f1c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f0a:	4610      	mov	r0, r2
   80f0c:	4a05      	ldr	r2, [pc, #20]	; (80f24 <_sbrk+0x2c>)
   80f0e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f10:	4618      	mov	r0, r3
   80f12:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80f14:	4a05      	ldr	r2, [pc, #20]	; (80f2c <_sbrk+0x34>)
   80f16:	4b03      	ldr	r3, [pc, #12]	; (80f24 <_sbrk+0x2c>)
   80f18:	601a      	str	r2, [r3, #0]
   80f1a:	e7f0      	b.n	80efe <_sbrk+0x6>
		return (caddr_t) -1;	
   80f1c:	f04f 30ff 	mov.w	r0, #4294967295
}
   80f20:	4770      	bx	lr
   80f22:	bf00      	nop
   80f24:	20070c1c 	.word	0x20070c1c
   80f28:	20087ffc 	.word	0x20087ffc
   80f2c:	20073c90 	.word	0x20073c90

00080f30 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80f30:	f04f 30ff 	mov.w	r0, #4294967295
   80f34:	4770      	bx	lr

00080f36 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80f3a:	604b      	str	r3, [r1, #4]

	return 0;
}
   80f3c:	2000      	movs	r0, #0
   80f3e:	4770      	bx	lr

00080f40 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80f40:	2001      	movs	r0, #1
   80f42:	4770      	bx	lr

00080f44 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80f44:	2000      	movs	r0, #0
   80f46:	4770      	bx	lr

00080f48 <configure_tc>:
int configureDone = 0; // define and initialize external variable
                       // initialization goes only with definition
					   // Only one source file may define the external variable, and definition is done only ONCE

void configure_tc(void)
{
   80f48:	b510      	push	{r4, lr}
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   80f4a:	201b      	movs	r0, #27
   80f4c:	4b0d      	ldr	r3, [pc, #52]	; (80f84 <configure_tc+0x3c>)
   80f4e:	4798      	blx	r3
	/* Configure TC for a 500 kHz frequency and trigger on RC compare. */
	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz (internal clock signal)
   80f50:	4c0d      	ldr	r4, [pc, #52]	; (80f88 <configure_tc+0x40>)
   80f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80f56:	2100      	movs	r1, #0
   80f58:	4620      	mov	r0, r4
   80f5a:	4b0c      	ldr	r3, [pc, #48]	; (80f8c <configure_tc+0x44>)
   80f5c:	4798      	blx	r3
	tc_write_rc(TC0, 0, 84);					//84 corresponds to fs = 500 kHz (42 MHz/84 = 500 kHz)
   80f5e:	2254      	movs	r2, #84	; 0x54
   80f60:	2100      	movs	r1, #0
   80f62:	4620      	mov	r0, r4
   80f64:	4b0a      	ldr	r3, [pc, #40]	; (80f90 <configure_tc+0x48>)
   80f66:	4798      	blx	r3
   80f68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80f6c:	4b09      	ldr	r3, [pc, #36]	; (80f94 <configure_tc+0x4c>)
   80f6e:	601a      	str	r2, [r3, #0]
	/* Configure and enable interrupt on RC compare:
	 * A trigger resets the counter and starts the counter clock. RC Compare Trigger is implemented 
	 * in each channel and can provide a trigger when the counter value matches the RC value.
	 */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS); //CPCS is 5th bit (nr 4) in  TC Interrupt Enable Register (TC_IER0, ch 0: 0x40080024)
   80f70:	2210      	movs	r2, #16
   80f72:	2100      	movs	r1, #0
   80f74:	4620      	mov	r0, r4
   80f76:	4b08      	ldr	r3, [pc, #32]	; (80f98 <configure_tc+0x50>)
   80f78:	4798      	blx	r3

	configureDone = 1;
   80f7a:	2201      	movs	r2, #1
   80f7c:	4b07      	ldr	r3, [pc, #28]	; (80f9c <configure_tc+0x54>)
   80f7e:	601a      	str	r2, [r3, #0]
   80f80:	bd10      	pop	{r4, pc}
   80f82:	bf00      	nop
   80f84:	00080cf1 	.word	0x00080cf1
   80f88:	40080000 	.word	0x40080000
   80f8c:	00080573 	.word	0x00080573
   80f90:	0008059b 	.word	0x0008059b
   80f94:	e000e100 	.word	0xe000e100
   80f98:	000805a3 	.word	0x000805a3
   80f9c:	20070c20 	.word	0x20070c20

00080fa0 <usart_serial_getchar>:
{
   80fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   80fa2:	b083      	sub	sp, #12
   80fa4:	4604      	mov	r4, r0
   80fa6:	460d      	mov	r5, r1
	uint32_t val = 0;
   80fa8:	2300      	movs	r3, #0
   80faa:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80fac:	4b20      	ldr	r3, [pc, #128]	; (81030 <usart_serial_getchar+0x90>)
   80fae:	4298      	cmp	r0, r3
   80fb0:	d00d      	beq.n	80fce <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   80fb2:	4b20      	ldr	r3, [pc, #128]	; (81034 <usart_serial_getchar+0x94>)
   80fb4:	4298      	cmp	r0, r3
   80fb6:	d012      	beq.n	80fde <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   80fb8:	4b1f      	ldr	r3, [pc, #124]	; (81038 <usart_serial_getchar+0x98>)
   80fba:	4298      	cmp	r0, r3
   80fbc:	d019      	beq.n	80ff2 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   80fbe:	4b1f      	ldr	r3, [pc, #124]	; (8103c <usart_serial_getchar+0x9c>)
   80fc0:	429c      	cmp	r4, r3
   80fc2:	d020      	beq.n	81006 <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   80fc4:	4b1e      	ldr	r3, [pc, #120]	; (81040 <usart_serial_getchar+0xa0>)
   80fc6:	429c      	cmp	r4, r3
   80fc8:	d027      	beq.n	8101a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80fca:	b003      	add	sp, #12
   80fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80fce:	461f      	mov	r7, r3
   80fd0:	4e1c      	ldr	r6, [pc, #112]	; (81044 <usart_serial_getchar+0xa4>)
   80fd2:	4629      	mov	r1, r5
   80fd4:	4638      	mov	r0, r7
   80fd6:	47b0      	blx	r6
   80fd8:	2800      	cmp	r0, #0
   80fda:	d1fa      	bne.n	80fd2 <usart_serial_getchar+0x32>
   80fdc:	e7ef      	b.n	80fbe <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80fde:	461f      	mov	r7, r3
   80fe0:	4e19      	ldr	r6, [pc, #100]	; (81048 <usart_serial_getchar+0xa8>)
   80fe2:	a901      	add	r1, sp, #4
   80fe4:	4638      	mov	r0, r7
   80fe6:	47b0      	blx	r6
   80fe8:	2800      	cmp	r0, #0
   80fea:	d1fa      	bne.n	80fe2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80fec:	9b01      	ldr	r3, [sp, #4]
   80fee:	702b      	strb	r3, [r5, #0]
   80ff0:	e7e8      	b.n	80fc4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80ff2:	461e      	mov	r6, r3
   80ff4:	4c14      	ldr	r4, [pc, #80]	; (81048 <usart_serial_getchar+0xa8>)
   80ff6:	a901      	add	r1, sp, #4
   80ff8:	4630      	mov	r0, r6
   80ffa:	47a0      	blx	r4
   80ffc:	2800      	cmp	r0, #0
   80ffe:	d1fa      	bne.n	80ff6 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   81000:	9b01      	ldr	r3, [sp, #4]
   81002:	702b      	strb	r3, [r5, #0]
   81004:	e7e1      	b.n	80fca <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   81006:	461e      	mov	r6, r3
   81008:	4c0f      	ldr	r4, [pc, #60]	; (81048 <usart_serial_getchar+0xa8>)
   8100a:	a901      	add	r1, sp, #4
   8100c:	4630      	mov	r0, r6
   8100e:	47a0      	blx	r4
   81010:	2800      	cmp	r0, #0
   81012:	d1fa      	bne.n	8100a <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   81014:	9b01      	ldr	r3, [sp, #4]
   81016:	702b      	strb	r3, [r5, #0]
   81018:	e7d7      	b.n	80fca <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8101a:	461e      	mov	r6, r3
   8101c:	4c0a      	ldr	r4, [pc, #40]	; (81048 <usart_serial_getchar+0xa8>)
   8101e:	a901      	add	r1, sp, #4
   81020:	4630      	mov	r0, r6
   81022:	47a0      	blx	r4
   81024:	2800      	cmp	r0, #0
   81026:	d1fa      	bne.n	8101e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   81028:	9b01      	ldr	r3, [sp, #4]
   8102a:	702b      	strb	r3, [r5, #0]
}
   8102c:	e7cd      	b.n	80fca <usart_serial_getchar+0x2a>
   8102e:	bf00      	nop
   81030:	400e0800 	.word	0x400e0800
   81034:	40098000 	.word	0x40098000
   81038:	4009c000 	.word	0x4009c000
   8103c:	400a0000 	.word	0x400a0000
   81040:	400a4000 	.word	0x400a4000
   81044:	0008079f 	.word	0x0008079f
   81048:	000805c7 	.word	0x000805c7

0008104c <usart_serial_putchar>:
{
   8104c:	b570      	push	{r4, r5, r6, lr}
   8104e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   81050:	4b1e      	ldr	r3, [pc, #120]	; (810cc <usart_serial_putchar+0x80>)
   81052:	4298      	cmp	r0, r3
   81054:	d00d      	beq.n	81072 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   81056:	4b1e      	ldr	r3, [pc, #120]	; (810d0 <usart_serial_putchar+0x84>)
   81058:	4298      	cmp	r0, r3
   8105a:	d013      	beq.n	81084 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   8105c:	4b1d      	ldr	r3, [pc, #116]	; (810d4 <usart_serial_putchar+0x88>)
   8105e:	4298      	cmp	r0, r3
   81060:	d019      	beq.n	81096 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   81062:	4b1d      	ldr	r3, [pc, #116]	; (810d8 <usart_serial_putchar+0x8c>)
   81064:	4298      	cmp	r0, r3
   81066:	d01f      	beq.n	810a8 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   81068:	4b1c      	ldr	r3, [pc, #112]	; (810dc <usart_serial_putchar+0x90>)
   8106a:	4298      	cmp	r0, r3
   8106c:	d025      	beq.n	810ba <usart_serial_putchar+0x6e>
	return 0;
   8106e:	2000      	movs	r0, #0
}
   81070:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   81072:	461e      	mov	r6, r3
   81074:	4d1a      	ldr	r5, [pc, #104]	; (810e0 <usart_serial_putchar+0x94>)
   81076:	4621      	mov	r1, r4
   81078:	4630      	mov	r0, r6
   8107a:	47a8      	blx	r5
   8107c:	2800      	cmp	r0, #0
   8107e:	d1fa      	bne.n	81076 <usart_serial_putchar+0x2a>
		return 1;
   81080:	2001      	movs	r0, #1
   81082:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81084:	461e      	mov	r6, r3
   81086:	4d17      	ldr	r5, [pc, #92]	; (810e4 <usart_serial_putchar+0x98>)
   81088:	4621      	mov	r1, r4
   8108a:	4630      	mov	r0, r6
   8108c:	47a8      	blx	r5
   8108e:	2800      	cmp	r0, #0
   81090:	d1fa      	bne.n	81088 <usart_serial_putchar+0x3c>
		return 1;
   81092:	2001      	movs	r0, #1
   81094:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81096:	461e      	mov	r6, r3
   81098:	4d12      	ldr	r5, [pc, #72]	; (810e4 <usart_serial_putchar+0x98>)
   8109a:	4621      	mov	r1, r4
   8109c:	4630      	mov	r0, r6
   8109e:	47a8      	blx	r5
   810a0:	2800      	cmp	r0, #0
   810a2:	d1fa      	bne.n	8109a <usart_serial_putchar+0x4e>
		return 1;
   810a4:	2001      	movs	r0, #1
   810a6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   810a8:	461e      	mov	r6, r3
   810aa:	4d0e      	ldr	r5, [pc, #56]	; (810e4 <usart_serial_putchar+0x98>)
   810ac:	4621      	mov	r1, r4
   810ae:	4630      	mov	r0, r6
   810b0:	47a8      	blx	r5
   810b2:	2800      	cmp	r0, #0
   810b4:	d1fa      	bne.n	810ac <usart_serial_putchar+0x60>
		return 1;
   810b6:	2001      	movs	r0, #1
   810b8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   810ba:	461e      	mov	r6, r3
   810bc:	4d09      	ldr	r5, [pc, #36]	; (810e4 <usart_serial_putchar+0x98>)
   810be:	4621      	mov	r1, r4
   810c0:	4630      	mov	r0, r6
   810c2:	47a8      	blx	r5
   810c4:	2800      	cmp	r0, #0
   810c6:	d1fa      	bne.n	810be <usart_serial_putchar+0x72>
		return 1;
   810c8:	2001      	movs	r0, #1
   810ca:	bd70      	pop	{r4, r5, r6, pc}
   810cc:	400e0800 	.word	0x400e0800
   810d0:	40098000 	.word	0x40098000
   810d4:	4009c000 	.word	0x4009c000
   810d8:	400a0000 	.word	0x400a0000
   810dc:	400a4000 	.word	0x400a4000
   810e0:	0008078f 	.word	0x0008078f
   810e4:	000805b3 	.word	0x000805b3

000810e8 <main>:
	printf("=============\n");
}


int main (void)
{
   810e8:	b500      	push	{lr}
   810ea:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   810ec:	4b1d      	ldr	r3, [pc, #116]	; (81164 <main+0x7c>)
   810ee:	4798      	blx	r3
	board_init();
   810f0:	4b1d      	ldr	r3, [pc, #116]	; (81168 <main+0x80>)
   810f2:	4798      	blx	r3
   810f4:	200b      	movs	r0, #11
   810f6:	4c1d      	ldr	r4, [pc, #116]	; (8116c <main+0x84>)
   810f8:	47a0      	blx	r4
   810fa:	200c      	movs	r0, #12
   810fc:	47a0      	blx	r4
   810fe:	200d      	movs	r0, #13
   81100:	47a0      	blx	r4
   81102:	200e      	movs	r0, #14
   81104:	47a0      	blx	r4
   81106:	2008      	movs	r0, #8
   81108:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8110a:	4d19      	ldr	r5, [pc, #100]	; (81170 <main+0x88>)
   8110c:	4b19      	ldr	r3, [pc, #100]	; (81174 <main+0x8c>)
   8110e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81110:	4a19      	ldr	r2, [pc, #100]	; (81178 <main+0x90>)
   81112:	4b1a      	ldr	r3, [pc, #104]	; (8117c <main+0x94>)
   81114:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81116:	4a1a      	ldr	r2, [pc, #104]	; (81180 <main+0x98>)
   81118:	4b1a      	ldr	r3, [pc, #104]	; (81184 <main+0x9c>)
   8111a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8111c:	4b1a      	ldr	r3, [pc, #104]	; (81188 <main+0xa0>)
   8111e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81120:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81124:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81126:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8112a:	9303      	str	r3, [sp, #12]
   8112c:	2008      	movs	r0, #8
   8112e:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
   81130:	a901      	add	r1, sp, #4
   81132:	4628      	mov	r0, r5
   81134:	4b15      	ldr	r3, [pc, #84]	; (8118c <main+0xa4>)
   81136:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81138:	4d15      	ldr	r5, [pc, #84]	; (81190 <main+0xa8>)
   8113a:	682b      	ldr	r3, [r5, #0]
   8113c:	2100      	movs	r1, #0
   8113e:	6898      	ldr	r0, [r3, #8]
   81140:	4c14      	ldr	r4, [pc, #80]	; (81194 <main+0xac>)
   81142:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81144:	682b      	ldr	r3, [r5, #0]
   81146:	2100      	movs	r1, #0
   81148:	6858      	ldr	r0, [r3, #4]
   8114a:	47a0      	blx	r4
	printf("Console ready\n");
   8114c:	4812      	ldr	r0, [pc, #72]	; (81198 <main+0xb0>)
   8114e:	4c13      	ldr	r4, [pc, #76]	; (8119c <main+0xb4>)
   81150:	47a0      	blx	r4
	printf("=============\n");
   81152:	4813      	ldr	r0, [pc, #76]	; (811a0 <main+0xb8>)
   81154:	47a0      	blx	r4
	ioport_init();
	configureConsole();
	adc_setup();
   81156:	4b13      	ldr	r3, [pc, #76]	; (811a4 <main+0xbc>)
   81158:	4798      	blx	r3
	configure_tc();
   8115a:	4b13      	ldr	r3, [pc, #76]	; (811a8 <main+0xc0>)
   8115c:	4798      	blx	r3
	init_amplitude_trigger();
   8115e:	4b13      	ldr	r3, [pc, #76]	; (811ac <main+0xc4>)
   81160:	4798      	blx	r3
   81162:	e7fe      	b.n	81162 <main+0x7a>
   81164:	000807b1 	.word	0x000807b1
   81168:	00080815 	.word	0x00080815
   8116c:	00080cf1 	.word	0x00080cf1
   81170:	400e0800 	.word	0x400e0800
   81174:	20071c60 	.word	0x20071c60
   81178:	0008104d 	.word	0x0008104d
   8117c:	20071c5c 	.word	0x20071c5c
   81180:	00080fa1 	.word	0x00080fa1
   81184:	20071c58 	.word	0x20071c58
   81188:	0501bd00 	.word	0x0501bd00
   8118c:	00080759 	.word	0x00080759
   81190:	20070134 	.word	0x20070134
   81194:	0008186d 	.word	0x0008186d
   81198:	0008467c 	.word	0x0008467c
   8119c:	000816fd 	.word	0x000816fd
   811a0:	0008468c 	.word	0x0008468c
   811a4:	00080331 	.word	0x00080331
   811a8:	00080f49 	.word	0x00080f49
   811ac:	00080211 	.word	0x00080211

000811b0 <__aeabi_frsub>:
   811b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   811b4:	e002      	b.n	811bc <__addsf3>
   811b6:	bf00      	nop

000811b8 <__aeabi_fsub>:
   811b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000811bc <__addsf3>:
   811bc:	0042      	lsls	r2, r0, #1
   811be:	bf1f      	itttt	ne
   811c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   811c4:	ea92 0f03 	teqne	r2, r3
   811c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   811cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   811d0:	d06a      	beq.n	812a8 <__addsf3+0xec>
   811d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   811d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   811da:	bfc1      	itttt	gt
   811dc:	18d2      	addgt	r2, r2, r3
   811de:	4041      	eorgt	r1, r0
   811e0:	4048      	eorgt	r0, r1
   811e2:	4041      	eorgt	r1, r0
   811e4:	bfb8      	it	lt
   811e6:	425b      	neglt	r3, r3
   811e8:	2b19      	cmp	r3, #25
   811ea:	bf88      	it	hi
   811ec:	4770      	bxhi	lr
   811ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   811f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   811f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   811fa:	bf18      	it	ne
   811fc:	4240      	negne	r0, r0
   811fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81202:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   81206:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8120a:	bf18      	it	ne
   8120c:	4249      	negne	r1, r1
   8120e:	ea92 0f03 	teq	r2, r3
   81212:	d03f      	beq.n	81294 <__addsf3+0xd8>
   81214:	f1a2 0201 	sub.w	r2, r2, #1
   81218:	fa41 fc03 	asr.w	ip, r1, r3
   8121c:	eb10 000c 	adds.w	r0, r0, ip
   81220:	f1c3 0320 	rsb	r3, r3, #32
   81224:	fa01 f103 	lsl.w	r1, r1, r3
   81228:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8122c:	d502      	bpl.n	81234 <__addsf3+0x78>
   8122e:	4249      	negs	r1, r1
   81230:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81234:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81238:	d313      	bcc.n	81262 <__addsf3+0xa6>
   8123a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8123e:	d306      	bcc.n	8124e <__addsf3+0x92>
   81240:	0840      	lsrs	r0, r0, #1
   81242:	ea4f 0131 	mov.w	r1, r1, rrx
   81246:	f102 0201 	add.w	r2, r2, #1
   8124a:	2afe      	cmp	r2, #254	; 0xfe
   8124c:	d251      	bcs.n	812f2 <__addsf3+0x136>
   8124e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   81252:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81256:	bf08      	it	eq
   81258:	f020 0001 	biceq.w	r0, r0, #1
   8125c:	ea40 0003 	orr.w	r0, r0, r3
   81260:	4770      	bx	lr
   81262:	0049      	lsls	r1, r1, #1
   81264:	eb40 0000 	adc.w	r0, r0, r0
   81268:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   8126c:	f1a2 0201 	sub.w	r2, r2, #1
   81270:	d1ed      	bne.n	8124e <__addsf3+0x92>
   81272:	fab0 fc80 	clz	ip, r0
   81276:	f1ac 0c08 	sub.w	ip, ip, #8
   8127a:	ebb2 020c 	subs.w	r2, r2, ip
   8127e:	fa00 f00c 	lsl.w	r0, r0, ip
   81282:	bfaa      	itet	ge
   81284:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81288:	4252      	neglt	r2, r2
   8128a:	4318      	orrge	r0, r3
   8128c:	bfbc      	itt	lt
   8128e:	40d0      	lsrlt	r0, r2
   81290:	4318      	orrlt	r0, r3
   81292:	4770      	bx	lr
   81294:	f092 0f00 	teq	r2, #0
   81298:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   8129c:	bf06      	itte	eq
   8129e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   812a2:	3201      	addeq	r2, #1
   812a4:	3b01      	subne	r3, #1
   812a6:	e7b5      	b.n	81214 <__addsf3+0x58>
   812a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   812ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   812b0:	bf18      	it	ne
   812b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   812b6:	d021      	beq.n	812fc <__addsf3+0x140>
   812b8:	ea92 0f03 	teq	r2, r3
   812bc:	d004      	beq.n	812c8 <__addsf3+0x10c>
   812be:	f092 0f00 	teq	r2, #0
   812c2:	bf08      	it	eq
   812c4:	4608      	moveq	r0, r1
   812c6:	4770      	bx	lr
   812c8:	ea90 0f01 	teq	r0, r1
   812cc:	bf1c      	itt	ne
   812ce:	2000      	movne	r0, #0
   812d0:	4770      	bxne	lr
   812d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   812d6:	d104      	bne.n	812e2 <__addsf3+0x126>
   812d8:	0040      	lsls	r0, r0, #1
   812da:	bf28      	it	cs
   812dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   812e0:	4770      	bx	lr
   812e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   812e6:	bf3c      	itt	cc
   812e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   812ec:	4770      	bxcc	lr
   812ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   812f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   812f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   812fa:	4770      	bx	lr
   812fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
   81300:	bf16      	itet	ne
   81302:	4608      	movne	r0, r1
   81304:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81308:	4601      	movne	r1, r0
   8130a:	0242      	lsls	r2, r0, #9
   8130c:	bf06      	itte	eq
   8130e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   81312:	ea90 0f01 	teqeq	r0, r1
   81316:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8131a:	4770      	bx	lr

0008131c <__aeabi_ui2f>:
   8131c:	f04f 0300 	mov.w	r3, #0
   81320:	e004      	b.n	8132c <__aeabi_i2f+0x8>
   81322:	bf00      	nop

00081324 <__aeabi_i2f>:
   81324:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81328:	bf48      	it	mi
   8132a:	4240      	negmi	r0, r0
   8132c:	ea5f 0c00 	movs.w	ip, r0
   81330:	bf08      	it	eq
   81332:	4770      	bxeq	lr
   81334:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81338:	4601      	mov	r1, r0
   8133a:	f04f 0000 	mov.w	r0, #0
   8133e:	e01c      	b.n	8137a <__aeabi_l2f+0x2a>

00081340 <__aeabi_ul2f>:
   81340:	ea50 0201 	orrs.w	r2, r0, r1
   81344:	bf08      	it	eq
   81346:	4770      	bxeq	lr
   81348:	f04f 0300 	mov.w	r3, #0
   8134c:	e00a      	b.n	81364 <__aeabi_l2f+0x14>
   8134e:	bf00      	nop

00081350 <__aeabi_l2f>:
   81350:	ea50 0201 	orrs.w	r2, r0, r1
   81354:	bf08      	it	eq
   81356:	4770      	bxeq	lr
   81358:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   8135c:	d502      	bpl.n	81364 <__aeabi_l2f+0x14>
   8135e:	4240      	negs	r0, r0
   81360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81364:	ea5f 0c01 	movs.w	ip, r1
   81368:	bf02      	ittt	eq
   8136a:	4684      	moveq	ip, r0
   8136c:	4601      	moveq	r1, r0
   8136e:	2000      	moveq	r0, #0
   81370:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81374:	bf08      	it	eq
   81376:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8137a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8137e:	fabc f28c 	clz	r2, ip
   81382:	3a08      	subs	r2, #8
   81384:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81388:	db10      	blt.n	813ac <__aeabi_l2f+0x5c>
   8138a:	fa01 fc02 	lsl.w	ip, r1, r2
   8138e:	4463      	add	r3, ip
   81390:	fa00 fc02 	lsl.w	ip, r0, r2
   81394:	f1c2 0220 	rsb	r2, r2, #32
   81398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8139c:	fa20 f202 	lsr.w	r2, r0, r2
   813a0:	eb43 0002 	adc.w	r0, r3, r2
   813a4:	bf08      	it	eq
   813a6:	f020 0001 	biceq.w	r0, r0, #1
   813aa:	4770      	bx	lr
   813ac:	f102 0220 	add.w	r2, r2, #32
   813b0:	fa01 fc02 	lsl.w	ip, r1, r2
   813b4:	f1c2 0220 	rsb	r2, r2, #32
   813b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   813bc:	fa21 f202 	lsr.w	r2, r1, r2
   813c0:	eb43 0002 	adc.w	r0, r3, r2
   813c4:	bf08      	it	eq
   813c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   813ca:	4770      	bx	lr

000813cc <__aeabi_fmul>:
   813cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   813d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   813d4:	bf1e      	ittt	ne
   813d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   813da:	ea92 0f0c 	teqne	r2, ip
   813de:	ea93 0f0c 	teqne	r3, ip
   813e2:	d06f      	beq.n	814c4 <__aeabi_fmul+0xf8>
   813e4:	441a      	add	r2, r3
   813e6:	ea80 0c01 	eor.w	ip, r0, r1
   813ea:	0240      	lsls	r0, r0, #9
   813ec:	bf18      	it	ne
   813ee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   813f2:	d01e      	beq.n	81432 <__aeabi_fmul+0x66>
   813f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   813f8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   813fc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   81400:	fba0 3101 	umull	r3, r1, r0, r1
   81404:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81408:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   8140c:	bf3e      	ittt	cc
   8140e:	0049      	lslcc	r1, r1, #1
   81410:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81414:	005b      	lslcc	r3, r3, #1
   81416:	ea40 0001 	orr.w	r0, r0, r1
   8141a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8141e:	2afd      	cmp	r2, #253	; 0xfd
   81420:	d81d      	bhi.n	8145e <__aeabi_fmul+0x92>
   81422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81426:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8142a:	bf08      	it	eq
   8142c:	f020 0001 	biceq.w	r0, r0, #1
   81430:	4770      	bx	lr
   81432:	f090 0f00 	teq	r0, #0
   81436:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8143a:	bf08      	it	eq
   8143c:	0249      	lsleq	r1, r1, #9
   8143e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81442:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81446:	3a7f      	subs	r2, #127	; 0x7f
   81448:	bfc2      	ittt	gt
   8144a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8144e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81452:	4770      	bxgt	lr
   81454:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81458:	f04f 0300 	mov.w	r3, #0
   8145c:	3a01      	subs	r2, #1
   8145e:	dc5d      	bgt.n	8151c <__aeabi_fmul+0x150>
   81460:	f112 0f19 	cmn.w	r2, #25
   81464:	bfdc      	itt	le
   81466:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8146a:	4770      	bxle	lr
   8146c:	f1c2 0200 	rsb	r2, r2, #0
   81470:	0041      	lsls	r1, r0, #1
   81472:	fa21 f102 	lsr.w	r1, r1, r2
   81476:	f1c2 0220 	rsb	r2, r2, #32
   8147a:	fa00 fc02 	lsl.w	ip, r0, r2
   8147e:	ea5f 0031 	movs.w	r0, r1, rrx
   81482:	f140 0000 	adc.w	r0, r0, #0
   81486:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8148a:	bf08      	it	eq
   8148c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81490:	4770      	bx	lr
   81492:	f092 0f00 	teq	r2, #0
   81496:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8149a:	bf02      	ittt	eq
   8149c:	0040      	lsleq	r0, r0, #1
   8149e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   814a2:	3a01      	subeq	r2, #1
   814a4:	d0f9      	beq.n	8149a <__aeabi_fmul+0xce>
   814a6:	ea40 000c 	orr.w	r0, r0, ip
   814aa:	f093 0f00 	teq	r3, #0
   814ae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   814b2:	bf02      	ittt	eq
   814b4:	0049      	lsleq	r1, r1, #1
   814b6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   814ba:	3b01      	subeq	r3, #1
   814bc:	d0f9      	beq.n	814b2 <__aeabi_fmul+0xe6>
   814be:	ea41 010c 	orr.w	r1, r1, ip
   814c2:	e78f      	b.n	813e4 <__aeabi_fmul+0x18>
   814c4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   814c8:	ea92 0f0c 	teq	r2, ip
   814cc:	bf18      	it	ne
   814ce:	ea93 0f0c 	teqne	r3, ip
   814d2:	d00a      	beq.n	814ea <__aeabi_fmul+0x11e>
   814d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   814d8:	bf18      	it	ne
   814da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   814de:	d1d8      	bne.n	81492 <__aeabi_fmul+0xc6>
   814e0:	ea80 0001 	eor.w	r0, r0, r1
   814e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   814e8:	4770      	bx	lr
   814ea:	f090 0f00 	teq	r0, #0
   814ee:	bf17      	itett	ne
   814f0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   814f4:	4608      	moveq	r0, r1
   814f6:	f091 0f00 	teqne	r1, #0
   814fa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   814fe:	d014      	beq.n	8152a <__aeabi_fmul+0x15e>
   81500:	ea92 0f0c 	teq	r2, ip
   81504:	d101      	bne.n	8150a <__aeabi_fmul+0x13e>
   81506:	0242      	lsls	r2, r0, #9
   81508:	d10f      	bne.n	8152a <__aeabi_fmul+0x15e>
   8150a:	ea93 0f0c 	teq	r3, ip
   8150e:	d103      	bne.n	81518 <__aeabi_fmul+0x14c>
   81510:	024b      	lsls	r3, r1, #9
   81512:	bf18      	it	ne
   81514:	4608      	movne	r0, r1
   81516:	d108      	bne.n	8152a <__aeabi_fmul+0x15e>
   81518:	ea80 0001 	eor.w	r0, r0, r1
   8151c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81520:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81524:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81528:	4770      	bx	lr
   8152a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8152e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81532:	4770      	bx	lr

00081534 <__aeabi_fdiv>:
   81534:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81538:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8153c:	bf1e      	ittt	ne
   8153e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81542:	ea92 0f0c 	teqne	r2, ip
   81546:	ea93 0f0c 	teqne	r3, ip
   8154a:	d069      	beq.n	81620 <__aeabi_fdiv+0xec>
   8154c:	eba2 0203 	sub.w	r2, r2, r3
   81550:	ea80 0c01 	eor.w	ip, r0, r1
   81554:	0249      	lsls	r1, r1, #9
   81556:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8155a:	d037      	beq.n	815cc <__aeabi_fdiv+0x98>
   8155c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81560:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81564:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81568:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8156c:	428b      	cmp	r3, r1
   8156e:	bf38      	it	cc
   81570:	005b      	lslcc	r3, r3, #1
   81572:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81576:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8157a:	428b      	cmp	r3, r1
   8157c:	bf24      	itt	cs
   8157e:	1a5b      	subcs	r3, r3, r1
   81580:	ea40 000c 	orrcs.w	r0, r0, ip
   81584:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81588:	bf24      	itt	cs
   8158a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8158e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81592:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81596:	bf24      	itt	cs
   81598:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   8159c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   815a0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   815a4:	bf24      	itt	cs
   815a6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   815aa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   815ae:	011b      	lsls	r3, r3, #4
   815b0:	bf18      	it	ne
   815b2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   815b6:	d1e0      	bne.n	8157a <__aeabi_fdiv+0x46>
   815b8:	2afd      	cmp	r2, #253	; 0xfd
   815ba:	f63f af50 	bhi.w	8145e <__aeabi_fmul+0x92>
   815be:	428b      	cmp	r3, r1
   815c0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   815c4:	bf08      	it	eq
   815c6:	f020 0001 	biceq.w	r0, r0, #1
   815ca:	4770      	bx	lr
   815cc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   815d0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   815d4:	327f      	adds	r2, #127	; 0x7f
   815d6:	bfc2      	ittt	gt
   815d8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   815dc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   815e0:	4770      	bxgt	lr
   815e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   815e6:	f04f 0300 	mov.w	r3, #0
   815ea:	3a01      	subs	r2, #1
   815ec:	e737      	b.n	8145e <__aeabi_fmul+0x92>
   815ee:	f092 0f00 	teq	r2, #0
   815f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   815f6:	bf02      	ittt	eq
   815f8:	0040      	lsleq	r0, r0, #1
   815fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   815fe:	3a01      	subeq	r2, #1
   81600:	d0f9      	beq.n	815f6 <__aeabi_fdiv+0xc2>
   81602:	ea40 000c 	orr.w	r0, r0, ip
   81606:	f093 0f00 	teq	r3, #0
   8160a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8160e:	bf02      	ittt	eq
   81610:	0049      	lsleq	r1, r1, #1
   81612:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81616:	3b01      	subeq	r3, #1
   81618:	d0f9      	beq.n	8160e <__aeabi_fdiv+0xda>
   8161a:	ea41 010c 	orr.w	r1, r1, ip
   8161e:	e795      	b.n	8154c <__aeabi_fdiv+0x18>
   81620:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81624:	ea92 0f0c 	teq	r2, ip
   81628:	d108      	bne.n	8163c <__aeabi_fdiv+0x108>
   8162a:	0242      	lsls	r2, r0, #9
   8162c:	f47f af7d 	bne.w	8152a <__aeabi_fmul+0x15e>
   81630:	ea93 0f0c 	teq	r3, ip
   81634:	f47f af70 	bne.w	81518 <__aeabi_fmul+0x14c>
   81638:	4608      	mov	r0, r1
   8163a:	e776      	b.n	8152a <__aeabi_fmul+0x15e>
   8163c:	ea93 0f0c 	teq	r3, ip
   81640:	d104      	bne.n	8164c <__aeabi_fdiv+0x118>
   81642:	024b      	lsls	r3, r1, #9
   81644:	f43f af4c 	beq.w	814e0 <__aeabi_fmul+0x114>
   81648:	4608      	mov	r0, r1
   8164a:	e76e      	b.n	8152a <__aeabi_fmul+0x15e>
   8164c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81650:	bf18      	it	ne
   81652:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81656:	d1ca      	bne.n	815ee <__aeabi_fdiv+0xba>
   81658:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   8165c:	f47f af5c 	bne.w	81518 <__aeabi_fmul+0x14c>
   81660:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81664:	f47f af3c 	bne.w	814e0 <__aeabi_fmul+0x114>
   81668:	e75f      	b.n	8152a <__aeabi_fmul+0x15e>
   8166a:	bf00      	nop

0008166c <__aeabi_f2uiz>:
   8166c:	0042      	lsls	r2, r0, #1
   8166e:	d20e      	bcs.n	8168e <__aeabi_f2uiz+0x22>
   81670:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81674:	d30b      	bcc.n	8168e <__aeabi_f2uiz+0x22>
   81676:	f04f 039e 	mov.w	r3, #158	; 0x9e
   8167a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8167e:	d409      	bmi.n	81694 <__aeabi_f2uiz+0x28>
   81680:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81688:	fa23 f002 	lsr.w	r0, r3, r2
   8168c:	4770      	bx	lr
   8168e:	f04f 0000 	mov.w	r0, #0
   81692:	4770      	bx	lr
   81694:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81698:	d101      	bne.n	8169e <__aeabi_f2uiz+0x32>
   8169a:	0242      	lsls	r2, r0, #9
   8169c:	d102      	bne.n	816a4 <__aeabi_f2uiz+0x38>
   8169e:	f04f 30ff 	mov.w	r0, #4294967295
   816a2:	4770      	bx	lr
   816a4:	f04f 0000 	mov.w	r0, #0
   816a8:	4770      	bx	lr
   816aa:	bf00      	nop

000816ac <__libc_init_array>:
   816ac:	b570      	push	{r4, r5, r6, lr}
   816ae:	4e0f      	ldr	r6, [pc, #60]	; (816ec <__libc_init_array+0x40>)
   816b0:	4d0f      	ldr	r5, [pc, #60]	; (816f0 <__libc_init_array+0x44>)
   816b2:	1b76      	subs	r6, r6, r5
   816b4:	10b6      	asrs	r6, r6, #2
   816b6:	bf18      	it	ne
   816b8:	2400      	movne	r4, #0
   816ba:	d005      	beq.n	816c8 <__libc_init_array+0x1c>
   816bc:	3401      	adds	r4, #1
   816be:	f855 3b04 	ldr.w	r3, [r5], #4
   816c2:	4798      	blx	r3
   816c4:	42a6      	cmp	r6, r4
   816c6:	d1f9      	bne.n	816bc <__libc_init_array+0x10>
   816c8:	4e0a      	ldr	r6, [pc, #40]	; (816f4 <__libc_init_array+0x48>)
   816ca:	4d0b      	ldr	r5, [pc, #44]	; (816f8 <__libc_init_array+0x4c>)
   816cc:	f003 f89a 	bl	84804 <_init>
   816d0:	1b76      	subs	r6, r6, r5
   816d2:	10b6      	asrs	r6, r6, #2
   816d4:	bf18      	it	ne
   816d6:	2400      	movne	r4, #0
   816d8:	d006      	beq.n	816e8 <__libc_init_array+0x3c>
   816da:	3401      	adds	r4, #1
   816dc:	f855 3b04 	ldr.w	r3, [r5], #4
   816e0:	4798      	blx	r3
   816e2:	42a6      	cmp	r6, r4
   816e4:	d1f9      	bne.n	816da <__libc_init_array+0x2e>
   816e6:	bd70      	pop	{r4, r5, r6, pc}
   816e8:	bd70      	pop	{r4, r5, r6, pc}
   816ea:	bf00      	nop
   816ec:	00084810 	.word	0x00084810
   816f0:	00084810 	.word	0x00084810
   816f4:	00084818 	.word	0x00084818
   816f8:	00084810 	.word	0x00084810

000816fc <iprintf>:
   816fc:	b40f      	push	{r0, r1, r2, r3}
   816fe:	b510      	push	{r4, lr}
   81700:	4b07      	ldr	r3, [pc, #28]	; (81720 <iprintf+0x24>)
   81702:	b082      	sub	sp, #8
   81704:	ac04      	add	r4, sp, #16
   81706:	f854 2b04 	ldr.w	r2, [r4], #4
   8170a:	6818      	ldr	r0, [r3, #0]
   8170c:	4623      	mov	r3, r4
   8170e:	6881      	ldr	r1, [r0, #8]
   81710:	9401      	str	r4, [sp, #4]
   81712:	f000 f9e9 	bl	81ae8 <_vfiprintf_r>
   81716:	b002      	add	sp, #8
   81718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8171c:	b004      	add	sp, #16
   8171e:	4770      	bx	lr
   81720:	20070134 	.word	0x20070134

00081724 <memset>:
   81724:	b470      	push	{r4, r5, r6}
   81726:	0786      	lsls	r6, r0, #30
   81728:	d046      	beq.n	817b8 <memset+0x94>
   8172a:	1e54      	subs	r4, r2, #1
   8172c:	2a00      	cmp	r2, #0
   8172e:	d041      	beq.n	817b4 <memset+0x90>
   81730:	b2ca      	uxtb	r2, r1
   81732:	4603      	mov	r3, r0
   81734:	e002      	b.n	8173c <memset+0x18>
   81736:	f114 34ff 	adds.w	r4, r4, #4294967295
   8173a:	d33b      	bcc.n	817b4 <memset+0x90>
   8173c:	f803 2b01 	strb.w	r2, [r3], #1
   81740:	079d      	lsls	r5, r3, #30
   81742:	d1f8      	bne.n	81736 <memset+0x12>
   81744:	2c03      	cmp	r4, #3
   81746:	d92e      	bls.n	817a6 <memset+0x82>
   81748:	b2cd      	uxtb	r5, r1
   8174a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8174e:	2c0f      	cmp	r4, #15
   81750:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81754:	d919      	bls.n	8178a <memset+0x66>
   81756:	4626      	mov	r6, r4
   81758:	f103 0210 	add.w	r2, r3, #16
   8175c:	3e10      	subs	r6, #16
   8175e:	2e0f      	cmp	r6, #15
   81760:	f842 5c10 	str.w	r5, [r2, #-16]
   81764:	f842 5c0c 	str.w	r5, [r2, #-12]
   81768:	f842 5c08 	str.w	r5, [r2, #-8]
   8176c:	f842 5c04 	str.w	r5, [r2, #-4]
   81770:	f102 0210 	add.w	r2, r2, #16
   81774:	d8f2      	bhi.n	8175c <memset+0x38>
   81776:	f1a4 0210 	sub.w	r2, r4, #16
   8177a:	f022 020f 	bic.w	r2, r2, #15
   8177e:	f004 040f 	and.w	r4, r4, #15
   81782:	3210      	adds	r2, #16
   81784:	2c03      	cmp	r4, #3
   81786:	4413      	add	r3, r2
   81788:	d90d      	bls.n	817a6 <memset+0x82>
   8178a:	461e      	mov	r6, r3
   8178c:	4622      	mov	r2, r4
   8178e:	3a04      	subs	r2, #4
   81790:	2a03      	cmp	r2, #3
   81792:	f846 5b04 	str.w	r5, [r6], #4
   81796:	d8fa      	bhi.n	8178e <memset+0x6a>
   81798:	1f22      	subs	r2, r4, #4
   8179a:	f022 0203 	bic.w	r2, r2, #3
   8179e:	3204      	adds	r2, #4
   817a0:	4413      	add	r3, r2
   817a2:	f004 0403 	and.w	r4, r4, #3
   817a6:	b12c      	cbz	r4, 817b4 <memset+0x90>
   817a8:	b2c9      	uxtb	r1, r1
   817aa:	441c      	add	r4, r3
   817ac:	f803 1b01 	strb.w	r1, [r3], #1
   817b0:	429c      	cmp	r4, r3
   817b2:	d1fb      	bne.n	817ac <memset+0x88>
   817b4:	bc70      	pop	{r4, r5, r6}
   817b6:	4770      	bx	lr
   817b8:	4614      	mov	r4, r2
   817ba:	4603      	mov	r3, r0
   817bc:	e7c2      	b.n	81744 <memset+0x20>
   817be:	bf00      	nop

000817c0 <_puts_r>:
   817c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   817c2:	4605      	mov	r5, r0
   817c4:	b089      	sub	sp, #36	; 0x24
   817c6:	4608      	mov	r0, r1
   817c8:	460c      	mov	r4, r1
   817ca:	2701      	movs	r7, #1
   817cc:	f000 f91e 	bl	81a0c <strlen>
   817d0:	2602      	movs	r6, #2
   817d2:	19c3      	adds	r3, r0, r7
   817d4:	4920      	ldr	r1, [pc, #128]	; (81858 <_puts_r+0x98>)
   817d6:	9303      	str	r3, [sp, #12]
   817d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   817da:	aa04      	add	r2, sp, #16
   817dc:	9404      	str	r4, [sp, #16]
   817de:	9005      	str	r0, [sp, #20]
   817e0:	68ac      	ldr	r4, [r5, #8]
   817e2:	9707      	str	r7, [sp, #28]
   817e4:	9602      	str	r6, [sp, #8]
   817e6:	9106      	str	r1, [sp, #24]
   817e8:	9201      	str	r2, [sp, #4]
   817ea:	b353      	cbz	r3, 81842 <_puts_r+0x82>
   817ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   817ee:	f013 0f01 	tst.w	r3, #1
   817f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   817f6:	b29a      	uxth	r2, r3
   817f8:	d101      	bne.n	817fe <_puts_r+0x3e>
   817fa:	0590      	lsls	r0, r2, #22
   817fc:	d525      	bpl.n	8184a <_puts_r+0x8a>
   817fe:	0491      	lsls	r1, r2, #18
   81800:	d406      	bmi.n	81810 <_puts_r+0x50>
   81802:	6e62      	ldr	r2, [r4, #100]	; 0x64
   81804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8180c:	81a3      	strh	r3, [r4, #12]
   8180e:	6662      	str	r2, [r4, #100]	; 0x64
   81810:	4628      	mov	r0, r5
   81812:	aa01      	add	r2, sp, #4
   81814:	4621      	mov	r1, r4
   81816:	f001 fb63 	bl	82ee0 <__sfvwrite_r>
   8181a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8181c:	2800      	cmp	r0, #0
   8181e:	bf0c      	ite	eq
   81820:	250a      	moveq	r5, #10
   81822:	f04f 35ff 	movne.w	r5, #4294967295
   81826:	07da      	lsls	r2, r3, #31
   81828:	d402      	bmi.n	81830 <_puts_r+0x70>
   8182a:	89a3      	ldrh	r3, [r4, #12]
   8182c:	059b      	lsls	r3, r3, #22
   8182e:	d502      	bpl.n	81836 <_puts_r+0x76>
   81830:	4628      	mov	r0, r5
   81832:	b009      	add	sp, #36	; 0x24
   81834:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81836:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81838:	f001 fd08 	bl	8324c <__retarget_lock_release_recursive>
   8183c:	4628      	mov	r0, r5
   8183e:	b009      	add	sp, #36	; 0x24
   81840:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81842:	4628      	mov	r0, r5
   81844:	f001 f940 	bl	82ac8 <__sinit>
   81848:	e7d0      	b.n	817ec <_puts_r+0x2c>
   8184a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8184c:	f001 fcfc 	bl	83248 <__retarget_lock_acquire_recursive>
   81850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81854:	b29a      	uxth	r2, r3
   81856:	e7d2      	b.n	817fe <_puts_r+0x3e>
   81858:	00084678 	.word	0x00084678

0008185c <puts>:
   8185c:	4b02      	ldr	r3, [pc, #8]	; (81868 <puts+0xc>)
   8185e:	4601      	mov	r1, r0
   81860:	6818      	ldr	r0, [r3, #0]
   81862:	f7ff bfad 	b.w	817c0 <_puts_r>
   81866:	bf00      	nop
   81868:	20070134 	.word	0x20070134

0008186c <setbuf>:
   8186c:	2900      	cmp	r1, #0
   8186e:	bf0c      	ite	eq
   81870:	2202      	moveq	r2, #2
   81872:	2200      	movne	r2, #0
   81874:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81878:	f000 b800 	b.w	8187c <setvbuf>

0008187c <setvbuf>:
   8187c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81880:	4d61      	ldr	r5, [pc, #388]	; (81a08 <setvbuf+0x18c>)
   81882:	b083      	sub	sp, #12
   81884:	682d      	ldr	r5, [r5, #0]
   81886:	4604      	mov	r4, r0
   81888:	460f      	mov	r7, r1
   8188a:	4690      	mov	r8, r2
   8188c:	461e      	mov	r6, r3
   8188e:	b115      	cbz	r5, 81896 <setvbuf+0x1a>
   81890:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81892:	2b00      	cmp	r3, #0
   81894:	d064      	beq.n	81960 <setvbuf+0xe4>
   81896:	f1b8 0f02 	cmp.w	r8, #2
   8189a:	d006      	beq.n	818aa <setvbuf+0x2e>
   8189c:	f1b8 0f01 	cmp.w	r8, #1
   818a0:	f200 809f 	bhi.w	819e2 <setvbuf+0x166>
   818a4:	2e00      	cmp	r6, #0
   818a6:	f2c0 809c 	blt.w	819e2 <setvbuf+0x166>
   818aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   818ac:	07d8      	lsls	r0, r3, #31
   818ae:	d534      	bpl.n	8191a <setvbuf+0x9e>
   818b0:	4621      	mov	r1, r4
   818b2:	4628      	mov	r0, r5
   818b4:	f001 f8b0 	bl	82a18 <_fflush_r>
   818b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   818ba:	b141      	cbz	r1, 818ce <setvbuf+0x52>
   818bc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   818c0:	4299      	cmp	r1, r3
   818c2:	d002      	beq.n	818ca <setvbuf+0x4e>
   818c4:	4628      	mov	r0, r5
   818c6:	f001 fa25 	bl	82d14 <_free_r>
   818ca:	2300      	movs	r3, #0
   818cc:	6323      	str	r3, [r4, #48]	; 0x30
   818ce:	2200      	movs	r2, #0
   818d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   818d4:	61a2      	str	r2, [r4, #24]
   818d6:	6062      	str	r2, [r4, #4]
   818d8:	061a      	lsls	r2, r3, #24
   818da:	d43a      	bmi.n	81952 <setvbuf+0xd6>
   818dc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   818e0:	f023 0303 	bic.w	r3, r3, #3
   818e4:	f1b8 0f02 	cmp.w	r8, #2
   818e8:	81a3      	strh	r3, [r4, #12]
   818ea:	d01d      	beq.n	81928 <setvbuf+0xac>
   818ec:	ab01      	add	r3, sp, #4
   818ee:	466a      	mov	r2, sp
   818f0:	4621      	mov	r1, r4
   818f2:	4628      	mov	r0, r5
   818f4:	f001 fcac 	bl	83250 <__swhatbuf_r>
   818f8:	89a3      	ldrh	r3, [r4, #12]
   818fa:	4318      	orrs	r0, r3
   818fc:	81a0      	strh	r0, [r4, #12]
   818fe:	2e00      	cmp	r6, #0
   81900:	d132      	bne.n	81968 <setvbuf+0xec>
   81902:	9e00      	ldr	r6, [sp, #0]
   81904:	4630      	mov	r0, r6
   81906:	f001 fd1b 	bl	83340 <malloc>
   8190a:	4607      	mov	r7, r0
   8190c:	2800      	cmp	r0, #0
   8190e:	d06b      	beq.n	819e8 <setvbuf+0x16c>
   81910:	89a3      	ldrh	r3, [r4, #12]
   81912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81916:	81a3      	strh	r3, [r4, #12]
   81918:	e028      	b.n	8196c <setvbuf+0xf0>
   8191a:	89a3      	ldrh	r3, [r4, #12]
   8191c:	0599      	lsls	r1, r3, #22
   8191e:	d4c7      	bmi.n	818b0 <setvbuf+0x34>
   81920:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81922:	f001 fc91 	bl	83248 <__retarget_lock_acquire_recursive>
   81926:	e7c3      	b.n	818b0 <setvbuf+0x34>
   81928:	2500      	movs	r5, #0
   8192a:	2600      	movs	r6, #0
   8192c:	2001      	movs	r0, #1
   8192e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81930:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81934:	f043 0302 	orr.w	r3, r3, #2
   81938:	60a6      	str	r6, [r4, #8]
   8193a:	07ce      	lsls	r6, r1, #31
   8193c:	81a3      	strh	r3, [r4, #12]
   8193e:	6160      	str	r0, [r4, #20]
   81940:	6022      	str	r2, [r4, #0]
   81942:	6122      	str	r2, [r4, #16]
   81944:	d401      	bmi.n	8194a <setvbuf+0xce>
   81946:	0598      	lsls	r0, r3, #22
   81948:	d53e      	bpl.n	819c8 <setvbuf+0x14c>
   8194a:	4628      	mov	r0, r5
   8194c:	b003      	add	sp, #12
   8194e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81952:	6921      	ldr	r1, [r4, #16]
   81954:	4628      	mov	r0, r5
   81956:	f001 f9dd 	bl	82d14 <_free_r>
   8195a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8195e:	e7bd      	b.n	818dc <setvbuf+0x60>
   81960:	4628      	mov	r0, r5
   81962:	f001 f8b1 	bl	82ac8 <__sinit>
   81966:	e796      	b.n	81896 <setvbuf+0x1a>
   81968:	2f00      	cmp	r7, #0
   8196a:	d0cb      	beq.n	81904 <setvbuf+0x88>
   8196c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8196e:	2b00      	cmp	r3, #0
   81970:	d033      	beq.n	819da <setvbuf+0x15e>
   81972:	9b00      	ldr	r3, [sp, #0]
   81974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81978:	429e      	cmp	r6, r3
   8197a:	bf1c      	itt	ne
   8197c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81980:	81a2      	strhne	r2, [r4, #12]
   81982:	f1b8 0f01 	cmp.w	r8, #1
   81986:	bf04      	itt	eq
   81988:	f042 0201 	orreq.w	r2, r2, #1
   8198c:	81a2      	strheq	r2, [r4, #12]
   8198e:	b292      	uxth	r2, r2
   81990:	f012 0308 	ands.w	r3, r2, #8
   81994:	6027      	str	r7, [r4, #0]
   81996:	6127      	str	r7, [r4, #16]
   81998:	6166      	str	r6, [r4, #20]
   8199a:	d00e      	beq.n	819ba <setvbuf+0x13e>
   8199c:	07d1      	lsls	r1, r2, #31
   8199e:	d51a      	bpl.n	819d6 <setvbuf+0x15a>
   819a0:	2300      	movs	r3, #0
   819a2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   819a4:	4276      	negs	r6, r6
   819a6:	f015 0501 	ands.w	r5, r5, #1
   819aa:	61a6      	str	r6, [r4, #24]
   819ac:	60a3      	str	r3, [r4, #8]
   819ae:	d009      	beq.n	819c4 <setvbuf+0x148>
   819b0:	2500      	movs	r5, #0
   819b2:	4628      	mov	r0, r5
   819b4:	b003      	add	sp, #12
   819b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   819ba:	60a3      	str	r3, [r4, #8]
   819bc:	6e65      	ldr	r5, [r4, #100]	; 0x64
   819be:	f015 0501 	ands.w	r5, r5, #1
   819c2:	d1f5      	bne.n	819b0 <setvbuf+0x134>
   819c4:	0593      	lsls	r3, r2, #22
   819c6:	d4c0      	bmi.n	8194a <setvbuf+0xce>
   819c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   819ca:	f001 fc3f 	bl	8324c <__retarget_lock_release_recursive>
   819ce:	4628      	mov	r0, r5
   819d0:	b003      	add	sp, #12
   819d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   819d6:	60a6      	str	r6, [r4, #8]
   819d8:	e7f0      	b.n	819bc <setvbuf+0x140>
   819da:	4628      	mov	r0, r5
   819dc:	f001 f874 	bl	82ac8 <__sinit>
   819e0:	e7c7      	b.n	81972 <setvbuf+0xf6>
   819e2:	f04f 35ff 	mov.w	r5, #4294967295
   819e6:	e7b0      	b.n	8194a <setvbuf+0xce>
   819e8:	f8dd 9000 	ldr.w	r9, [sp]
   819ec:	45b1      	cmp	r9, r6
   819ee:	d004      	beq.n	819fa <setvbuf+0x17e>
   819f0:	4648      	mov	r0, r9
   819f2:	f001 fca5 	bl	83340 <malloc>
   819f6:	4607      	mov	r7, r0
   819f8:	b920      	cbnz	r0, 81a04 <setvbuf+0x188>
   819fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   819fe:	f04f 35ff 	mov.w	r5, #4294967295
   81a02:	e792      	b.n	8192a <setvbuf+0xae>
   81a04:	464e      	mov	r6, r9
   81a06:	e783      	b.n	81910 <setvbuf+0x94>
   81a08:	20070134 	.word	0x20070134

00081a0c <strlen>:
   81a0c:	f020 0103 	bic.w	r1, r0, #3
   81a10:	f010 0003 	ands.w	r0, r0, #3
   81a14:	f1c0 0000 	rsb	r0, r0, #0
   81a18:	f851 3b04 	ldr.w	r3, [r1], #4
   81a1c:	f100 0c04 	add.w	ip, r0, #4
   81a20:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81a24:	f06f 0200 	mvn.w	r2, #0
   81a28:	bf1c      	itt	ne
   81a2a:	fa22 f20c 	lsrne.w	r2, r2, ip
   81a2e:	4313      	orrne	r3, r2
   81a30:	f04f 0c01 	mov.w	ip, #1
   81a34:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81a38:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81a3c:	eba3 020c 	sub.w	r2, r3, ip
   81a40:	ea22 0203 	bic.w	r2, r2, r3
   81a44:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81a48:	bf04      	itt	eq
   81a4a:	f851 3b04 	ldreq.w	r3, [r1], #4
   81a4e:	3004      	addeq	r0, #4
   81a50:	d0f4      	beq.n	81a3c <strlen+0x30>
   81a52:	f1c2 0100 	rsb	r1, r2, #0
   81a56:	ea02 0201 	and.w	r2, r2, r1
   81a5a:	fab2 f282 	clz	r2, r2
   81a5e:	f1c2 021f 	rsb	r2, r2, #31
   81a62:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   81a66:	4770      	bx	lr

00081a68 <__sprint_r.part.0>:
   81a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81a6c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81a6e:	4693      	mov	fp, r2
   81a70:	049c      	lsls	r4, r3, #18
   81a72:	d52f      	bpl.n	81ad4 <__sprint_r.part.0+0x6c>
   81a74:	6893      	ldr	r3, [r2, #8]
   81a76:	6812      	ldr	r2, [r2, #0]
   81a78:	b353      	cbz	r3, 81ad0 <__sprint_r.part.0+0x68>
   81a7a:	460e      	mov	r6, r1
   81a7c:	4607      	mov	r7, r0
   81a7e:	f102 0908 	add.w	r9, r2, #8
   81a82:	e919 0420 	ldmdb	r9, {r5, sl}
   81a86:	ea5f 089a 	movs.w	r8, sl, lsr #2
   81a8a:	d017      	beq.n	81abc <__sprint_r.part.0+0x54>
   81a8c:	2400      	movs	r4, #0
   81a8e:	3d04      	subs	r5, #4
   81a90:	e001      	b.n	81a96 <__sprint_r.part.0+0x2e>
   81a92:	45a0      	cmp	r8, r4
   81a94:	d010      	beq.n	81ab8 <__sprint_r.part.0+0x50>
   81a96:	4632      	mov	r2, r6
   81a98:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81a9c:	4638      	mov	r0, r7
   81a9e:	f001 f8b5 	bl	82c0c <_fputwc_r>
   81aa2:	1c43      	adds	r3, r0, #1
   81aa4:	f104 0401 	add.w	r4, r4, #1
   81aa8:	d1f3      	bne.n	81a92 <__sprint_r.part.0+0x2a>
   81aaa:	2300      	movs	r3, #0
   81aac:	f8cb 3008 	str.w	r3, [fp, #8]
   81ab0:	f8cb 3004 	str.w	r3, [fp, #4]
   81ab4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ab8:	f8db 3008 	ldr.w	r3, [fp, #8]
   81abc:	f02a 0a03 	bic.w	sl, sl, #3
   81ac0:	eba3 030a 	sub.w	r3, r3, sl
   81ac4:	f8cb 3008 	str.w	r3, [fp, #8]
   81ac8:	f109 0908 	add.w	r9, r9, #8
   81acc:	2b00      	cmp	r3, #0
   81ace:	d1d8      	bne.n	81a82 <__sprint_r.part.0+0x1a>
   81ad0:	2000      	movs	r0, #0
   81ad2:	e7ea      	b.n	81aaa <__sprint_r.part.0+0x42>
   81ad4:	f001 fa04 	bl	82ee0 <__sfvwrite_r>
   81ad8:	2300      	movs	r3, #0
   81ada:	f8cb 3008 	str.w	r3, [fp, #8]
   81ade:	f8cb 3004 	str.w	r3, [fp, #4]
   81ae2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ae6:	bf00      	nop

00081ae8 <_vfiprintf_r>:
   81ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81aec:	b0ad      	sub	sp, #180	; 0xb4
   81aee:	461d      	mov	r5, r3
   81af0:	468b      	mov	fp, r1
   81af2:	4690      	mov	r8, r2
   81af4:	9307      	str	r3, [sp, #28]
   81af6:	9006      	str	r0, [sp, #24]
   81af8:	b118      	cbz	r0, 81b02 <_vfiprintf_r+0x1a>
   81afa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81afc:	2b00      	cmp	r3, #0
   81afe:	f000 80f3 	beq.w	81ce8 <_vfiprintf_r+0x200>
   81b02:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81b06:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81b0a:	07df      	lsls	r7, r3, #31
   81b0c:	b281      	uxth	r1, r0
   81b0e:	d402      	bmi.n	81b16 <_vfiprintf_r+0x2e>
   81b10:	058e      	lsls	r6, r1, #22
   81b12:	f140 80fc 	bpl.w	81d0e <_vfiprintf_r+0x226>
   81b16:	048c      	lsls	r4, r1, #18
   81b18:	d40a      	bmi.n	81b30 <_vfiprintf_r+0x48>
   81b1a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81b1e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81b26:	f8ab 100c 	strh.w	r1, [fp, #12]
   81b2a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   81b2e:	b289      	uxth	r1, r1
   81b30:	0708      	lsls	r0, r1, #28
   81b32:	f140 80b3 	bpl.w	81c9c <_vfiprintf_r+0x1b4>
   81b36:	f8db 3010 	ldr.w	r3, [fp, #16]
   81b3a:	2b00      	cmp	r3, #0
   81b3c:	f000 80ae 	beq.w	81c9c <_vfiprintf_r+0x1b4>
   81b40:	f001 031a 	and.w	r3, r1, #26
   81b44:	2b0a      	cmp	r3, #10
   81b46:	f000 80b5 	beq.w	81cb4 <_vfiprintf_r+0x1cc>
   81b4a:	2300      	movs	r3, #0
   81b4c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81b50:	46d1      	mov	r9, sl
   81b52:	930b      	str	r3, [sp, #44]	; 0x2c
   81b54:	9303      	str	r3, [sp, #12]
   81b56:	9311      	str	r3, [sp, #68]	; 0x44
   81b58:	9310      	str	r3, [sp, #64]	; 0x40
   81b5a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   81b5e:	f8cd b010 	str.w	fp, [sp, #16]
   81b62:	f898 3000 	ldrb.w	r3, [r8]
   81b66:	4644      	mov	r4, r8
   81b68:	b1fb      	cbz	r3, 81baa <_vfiprintf_r+0xc2>
   81b6a:	2b25      	cmp	r3, #37	; 0x25
   81b6c:	d102      	bne.n	81b74 <_vfiprintf_r+0x8c>
   81b6e:	e01c      	b.n	81baa <_vfiprintf_r+0xc2>
   81b70:	2b25      	cmp	r3, #37	; 0x25
   81b72:	d003      	beq.n	81b7c <_vfiprintf_r+0x94>
   81b74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81b78:	2b00      	cmp	r3, #0
   81b7a:	d1f9      	bne.n	81b70 <_vfiprintf_r+0x88>
   81b7c:	eba4 0508 	sub.w	r5, r4, r8
   81b80:	b19d      	cbz	r5, 81baa <_vfiprintf_r+0xc2>
   81b82:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81b84:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b86:	3301      	adds	r3, #1
   81b88:	442a      	add	r2, r5
   81b8a:	2b07      	cmp	r3, #7
   81b8c:	f8c9 8000 	str.w	r8, [r9]
   81b90:	f8c9 5004 	str.w	r5, [r9, #4]
   81b94:	9211      	str	r2, [sp, #68]	; 0x44
   81b96:	9310      	str	r3, [sp, #64]	; 0x40
   81b98:	dd7a      	ble.n	81c90 <_vfiprintf_r+0x1a8>
   81b9a:	2a00      	cmp	r2, #0
   81b9c:	f040 84b5 	bne.w	8250a <_vfiprintf_r+0xa22>
   81ba0:	46d1      	mov	r9, sl
   81ba2:	9b03      	ldr	r3, [sp, #12]
   81ba4:	9210      	str	r2, [sp, #64]	; 0x40
   81ba6:	442b      	add	r3, r5
   81ba8:	9303      	str	r3, [sp, #12]
   81baa:	7823      	ldrb	r3, [r4, #0]
   81bac:	2b00      	cmp	r3, #0
   81bae:	f000 83e5 	beq.w	8237c <_vfiprintf_r+0x894>
   81bb2:	2000      	movs	r0, #0
   81bb4:	f04f 0300 	mov.w	r3, #0
   81bb8:	f104 0801 	add.w	r8, r4, #1
   81bbc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81bc0:	7862      	ldrb	r2, [r4, #1]
   81bc2:	4606      	mov	r6, r0
   81bc4:	4605      	mov	r5, r0
   81bc6:	4603      	mov	r3, r0
   81bc8:	f04f 34ff 	mov.w	r4, #4294967295
   81bcc:	f108 0801 	add.w	r8, r8, #1
   81bd0:	f1a2 0120 	sub.w	r1, r2, #32
   81bd4:	2958      	cmp	r1, #88	; 0x58
   81bd6:	f200 82d9 	bhi.w	8218c <_vfiprintf_r+0x6a4>
   81bda:	e8df f011 	tbh	[pc, r1, lsl #1]
   81bde:	0228      	.short	0x0228
   81be0:	02d702d7 	.word	0x02d702d7
   81be4:	02d70230 	.word	0x02d70230
   81be8:	02d702d7 	.word	0x02d702d7
   81bec:	02d702d7 	.word	0x02d702d7
   81bf0:	00a002d7 	.word	0x00a002d7
   81bf4:	02d70288 	.word	0x02d70288
   81bf8:	02b800a8 	.word	0x02b800a8
   81bfc:	01a602d7 	.word	0x01a602d7
   81c00:	01ab01ab 	.word	0x01ab01ab
   81c04:	01ab01ab 	.word	0x01ab01ab
   81c08:	01ab01ab 	.word	0x01ab01ab
   81c0c:	01ab01ab 	.word	0x01ab01ab
   81c10:	02d701ab 	.word	0x02d701ab
   81c14:	02d702d7 	.word	0x02d702d7
   81c18:	02d702d7 	.word	0x02d702d7
   81c1c:	02d702d7 	.word	0x02d702d7
   81c20:	02d702d7 	.word	0x02d702d7
   81c24:	01b902d7 	.word	0x01b902d7
   81c28:	02d702d7 	.word	0x02d702d7
   81c2c:	02d702d7 	.word	0x02d702d7
   81c30:	02d702d7 	.word	0x02d702d7
   81c34:	02d702d7 	.word	0x02d702d7
   81c38:	02d702d7 	.word	0x02d702d7
   81c3c:	02d7019e 	.word	0x02d7019e
   81c40:	02d702d7 	.word	0x02d702d7
   81c44:	02d702d7 	.word	0x02d702d7
   81c48:	02d701a2 	.word	0x02d701a2
   81c4c:	025a02d7 	.word	0x025a02d7
   81c50:	02d702d7 	.word	0x02d702d7
   81c54:	02d702d7 	.word	0x02d702d7
   81c58:	02d702d7 	.word	0x02d702d7
   81c5c:	02d702d7 	.word	0x02d702d7
   81c60:	02d702d7 	.word	0x02d702d7
   81c64:	02220261 	.word	0x02220261
   81c68:	02d702d7 	.word	0x02d702d7
   81c6c:	027602d7 	.word	0x027602d7
   81c70:	02d70222 	.word	0x02d70222
   81c74:	027b02d7 	.word	0x027b02d7
   81c78:	01fc02d7 	.word	0x01fc02d7
   81c7c:	02100189 	.word	0x02100189
   81c80:	02d702d2 	.word	0x02d702d2
   81c84:	02d70295 	.word	0x02d70295
   81c88:	02d700ad 	.word	0x02d700ad
   81c8c:	023502d7 	.word	0x023502d7
   81c90:	f109 0908 	add.w	r9, r9, #8
   81c94:	9b03      	ldr	r3, [sp, #12]
   81c96:	442b      	add	r3, r5
   81c98:	9303      	str	r3, [sp, #12]
   81c9a:	e786      	b.n	81baa <_vfiprintf_r+0xc2>
   81c9c:	4659      	mov	r1, fp
   81c9e:	9806      	ldr	r0, [sp, #24]
   81ca0:	f000 fdaa 	bl	827f8 <__swsetup_r>
   81ca4:	bb18      	cbnz	r0, 81cee <_vfiprintf_r+0x206>
   81ca6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   81caa:	f001 031a 	and.w	r3, r1, #26
   81cae:	2b0a      	cmp	r3, #10
   81cb0:	f47f af4b 	bne.w	81b4a <_vfiprintf_r+0x62>
   81cb4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81cb8:	2b00      	cmp	r3, #0
   81cba:	f6ff af46 	blt.w	81b4a <_vfiprintf_r+0x62>
   81cbe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81cc2:	07db      	lsls	r3, r3, #31
   81cc4:	d405      	bmi.n	81cd2 <_vfiprintf_r+0x1ea>
   81cc6:	058f      	lsls	r7, r1, #22
   81cc8:	d403      	bmi.n	81cd2 <_vfiprintf_r+0x1ea>
   81cca:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81cce:	f001 fabd 	bl	8324c <__retarget_lock_release_recursive>
   81cd2:	462b      	mov	r3, r5
   81cd4:	4642      	mov	r2, r8
   81cd6:	4659      	mov	r1, fp
   81cd8:	9806      	ldr	r0, [sp, #24]
   81cda:	f000 fd49 	bl	82770 <__sbprintf>
   81cde:	9003      	str	r0, [sp, #12]
   81ce0:	9803      	ldr	r0, [sp, #12]
   81ce2:	b02d      	add	sp, #180	; 0xb4
   81ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ce8:	f000 feee 	bl	82ac8 <__sinit>
   81cec:	e709      	b.n	81b02 <_vfiprintf_r+0x1a>
   81cee:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81cf2:	07d9      	lsls	r1, r3, #31
   81cf4:	d404      	bmi.n	81d00 <_vfiprintf_r+0x218>
   81cf6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81cfa:	059a      	lsls	r2, r3, #22
   81cfc:	f140 84ae 	bpl.w	8265c <_vfiprintf_r+0xb74>
   81d00:	f04f 33ff 	mov.w	r3, #4294967295
   81d04:	9303      	str	r3, [sp, #12]
   81d06:	9803      	ldr	r0, [sp, #12]
   81d08:	b02d      	add	sp, #180	; 0xb4
   81d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d0e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81d12:	f001 fa99 	bl	83248 <__retarget_lock_acquire_recursive>
   81d16:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81d1a:	b281      	uxth	r1, r0
   81d1c:	e6fb      	b.n	81b16 <_vfiprintf_r+0x2e>
   81d1e:	9907      	ldr	r1, [sp, #28]
   81d20:	460a      	mov	r2, r1
   81d22:	680d      	ldr	r5, [r1, #0]
   81d24:	3204      	adds	r2, #4
   81d26:	2d00      	cmp	r5, #0
   81d28:	9207      	str	r2, [sp, #28]
   81d2a:	da02      	bge.n	81d32 <_vfiprintf_r+0x24a>
   81d2c:	426d      	negs	r5, r5
   81d2e:	f043 0304 	orr.w	r3, r3, #4
   81d32:	f898 2000 	ldrb.w	r2, [r8]
   81d36:	e749      	b.n	81bcc <_vfiprintf_r+0xe4>
   81d38:	9508      	str	r5, [sp, #32]
   81d3a:	069e      	lsls	r6, r3, #26
   81d3c:	f100 845a 	bmi.w	825f4 <_vfiprintf_r+0xb0c>
   81d40:	9907      	ldr	r1, [sp, #28]
   81d42:	06dd      	lsls	r5, r3, #27
   81d44:	460a      	mov	r2, r1
   81d46:	f100 83ef 	bmi.w	82528 <_vfiprintf_r+0xa40>
   81d4a:	0658      	lsls	r0, r3, #25
   81d4c:	f140 83ec 	bpl.w	82528 <_vfiprintf_r+0xa40>
   81d50:	2700      	movs	r7, #0
   81d52:	2201      	movs	r2, #1
   81d54:	880e      	ldrh	r6, [r1, #0]
   81d56:	3104      	adds	r1, #4
   81d58:	9107      	str	r1, [sp, #28]
   81d5a:	f04f 0100 	mov.w	r1, #0
   81d5e:	2500      	movs	r5, #0
   81d60:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81d64:	1c61      	adds	r1, r4, #1
   81d66:	f000 8117 	beq.w	81f98 <_vfiprintf_r+0x4b0>
   81d6a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81d6e:	9102      	str	r1, [sp, #8]
   81d70:	ea56 0107 	orrs.w	r1, r6, r7
   81d74:	f040 8115 	bne.w	81fa2 <_vfiprintf_r+0x4ba>
   81d78:	2c00      	cmp	r4, #0
   81d7a:	f040 835b 	bne.w	82434 <_vfiprintf_r+0x94c>
   81d7e:	2a00      	cmp	r2, #0
   81d80:	f040 83b6 	bne.w	824f0 <_vfiprintf_r+0xa08>
   81d84:	f013 0301 	ands.w	r3, r3, #1
   81d88:	9305      	str	r3, [sp, #20]
   81d8a:	f000 8455 	beq.w	82638 <_vfiprintf_r+0xb50>
   81d8e:	2330      	movs	r3, #48	; 0x30
   81d90:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81d94:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81d98:	9b05      	ldr	r3, [sp, #20]
   81d9a:	42a3      	cmp	r3, r4
   81d9c:	bfb8      	it	lt
   81d9e:	4623      	movlt	r3, r4
   81da0:	9301      	str	r3, [sp, #4]
   81da2:	b10d      	cbz	r5, 81da8 <_vfiprintf_r+0x2c0>
   81da4:	3301      	adds	r3, #1
   81da6:	9301      	str	r3, [sp, #4]
   81da8:	9b02      	ldr	r3, [sp, #8]
   81daa:	f013 0302 	ands.w	r3, r3, #2
   81dae:	9309      	str	r3, [sp, #36]	; 0x24
   81db0:	d002      	beq.n	81db8 <_vfiprintf_r+0x2d0>
   81db2:	9b01      	ldr	r3, [sp, #4]
   81db4:	3302      	adds	r3, #2
   81db6:	9301      	str	r3, [sp, #4]
   81db8:	9b02      	ldr	r3, [sp, #8]
   81dba:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81dbe:	930a      	str	r3, [sp, #40]	; 0x28
   81dc0:	f040 8215 	bne.w	821ee <_vfiprintf_r+0x706>
   81dc4:	9b08      	ldr	r3, [sp, #32]
   81dc6:	9a01      	ldr	r2, [sp, #4]
   81dc8:	1a9d      	subs	r5, r3, r2
   81dca:	2d00      	cmp	r5, #0
   81dcc:	f340 820f 	ble.w	821ee <_vfiprintf_r+0x706>
   81dd0:	2d10      	cmp	r5, #16
   81dd2:	f340 8484 	ble.w	826de <_vfiprintf_r+0xbf6>
   81dd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81dd8:	46ce      	mov	lr, r9
   81dda:	2710      	movs	r7, #16
   81ddc:	46a1      	mov	r9, r4
   81dde:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81de0:	4ec5      	ldr	r6, [pc, #788]	; (820f8 <_vfiprintf_r+0x610>)
   81de2:	4619      	mov	r1, r3
   81de4:	9c06      	ldr	r4, [sp, #24]
   81de6:	e007      	b.n	81df8 <_vfiprintf_r+0x310>
   81de8:	f101 0c02 	add.w	ip, r1, #2
   81dec:	4601      	mov	r1, r0
   81dee:	f10e 0e08 	add.w	lr, lr, #8
   81df2:	3d10      	subs	r5, #16
   81df4:	2d10      	cmp	r5, #16
   81df6:	dd11      	ble.n	81e1c <_vfiprintf_r+0x334>
   81df8:	1c48      	adds	r0, r1, #1
   81dfa:	3210      	adds	r2, #16
   81dfc:	2807      	cmp	r0, #7
   81dfe:	9211      	str	r2, [sp, #68]	; 0x44
   81e00:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81e04:	9010      	str	r0, [sp, #64]	; 0x40
   81e06:	ddef      	ble.n	81de8 <_vfiprintf_r+0x300>
   81e08:	2a00      	cmp	r2, #0
   81e0a:	f040 81d9 	bne.w	821c0 <_vfiprintf_r+0x6d8>
   81e0e:	3d10      	subs	r5, #16
   81e10:	2d10      	cmp	r5, #16
   81e12:	4611      	mov	r1, r2
   81e14:	f04f 0c01 	mov.w	ip, #1
   81e18:	46d6      	mov	lr, sl
   81e1a:	dced      	bgt.n	81df8 <_vfiprintf_r+0x310>
   81e1c:	464c      	mov	r4, r9
   81e1e:	4661      	mov	r1, ip
   81e20:	46f1      	mov	r9, lr
   81e22:	442a      	add	r2, r5
   81e24:	2907      	cmp	r1, #7
   81e26:	9211      	str	r2, [sp, #68]	; 0x44
   81e28:	f8c9 6000 	str.w	r6, [r9]
   81e2c:	f8c9 5004 	str.w	r5, [r9, #4]
   81e30:	9110      	str	r1, [sp, #64]	; 0x40
   81e32:	f300 82eb 	bgt.w	8240c <_vfiprintf_r+0x924>
   81e36:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e3a:	f109 0908 	add.w	r9, r9, #8
   81e3e:	1c48      	adds	r0, r1, #1
   81e40:	2d00      	cmp	r5, #0
   81e42:	f040 81dc 	bne.w	821fe <_vfiprintf_r+0x716>
   81e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81e48:	2b00      	cmp	r3, #0
   81e4a:	f000 81f6 	beq.w	8223a <_vfiprintf_r+0x752>
   81e4e:	2102      	movs	r1, #2
   81e50:	ab0e      	add	r3, sp, #56	; 0x38
   81e52:	440a      	add	r2, r1
   81e54:	2807      	cmp	r0, #7
   81e56:	9211      	str	r2, [sp, #68]	; 0x44
   81e58:	9010      	str	r0, [sp, #64]	; 0x40
   81e5a:	f8c9 1004 	str.w	r1, [r9, #4]
   81e5e:	f8c9 3000 	str.w	r3, [r9]
   81e62:	f340 81e6 	ble.w	82232 <_vfiprintf_r+0x74a>
   81e66:	2a00      	cmp	r2, #0
   81e68:	f040 8395 	bne.w	82596 <_vfiprintf_r+0xaae>
   81e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81e6e:	2001      	movs	r0, #1
   81e70:	2b80      	cmp	r3, #128	; 0x80
   81e72:	4611      	mov	r1, r2
   81e74:	46d1      	mov	r9, sl
   81e76:	f040 81e4 	bne.w	82242 <_vfiprintf_r+0x75a>
   81e7a:	9b08      	ldr	r3, [sp, #32]
   81e7c:	9d01      	ldr	r5, [sp, #4]
   81e7e:	1b5e      	subs	r6, r3, r5
   81e80:	2e00      	cmp	r6, #0
   81e82:	f340 81de 	ble.w	82242 <_vfiprintf_r+0x75a>
   81e86:	2e10      	cmp	r6, #16
   81e88:	f340 843c 	ble.w	82704 <_vfiprintf_r+0xc1c>
   81e8c:	46cc      	mov	ip, r9
   81e8e:	2710      	movs	r7, #16
   81e90:	46a1      	mov	r9, r4
   81e92:	4d9a      	ldr	r5, [pc, #616]	; (820fc <_vfiprintf_r+0x614>)
   81e94:	9c06      	ldr	r4, [sp, #24]
   81e96:	e007      	b.n	81ea8 <_vfiprintf_r+0x3c0>
   81e98:	f101 0e02 	add.w	lr, r1, #2
   81e9c:	4601      	mov	r1, r0
   81e9e:	f10c 0c08 	add.w	ip, ip, #8
   81ea2:	3e10      	subs	r6, #16
   81ea4:	2e10      	cmp	r6, #16
   81ea6:	dd11      	ble.n	81ecc <_vfiprintf_r+0x3e4>
   81ea8:	1c48      	adds	r0, r1, #1
   81eaa:	3210      	adds	r2, #16
   81eac:	2807      	cmp	r0, #7
   81eae:	9211      	str	r2, [sp, #68]	; 0x44
   81eb0:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81eb4:	9010      	str	r0, [sp, #64]	; 0x40
   81eb6:	ddef      	ble.n	81e98 <_vfiprintf_r+0x3b0>
   81eb8:	2a00      	cmp	r2, #0
   81eba:	f040 829b 	bne.w	823f4 <_vfiprintf_r+0x90c>
   81ebe:	3e10      	subs	r6, #16
   81ec0:	2e10      	cmp	r6, #16
   81ec2:	f04f 0e01 	mov.w	lr, #1
   81ec6:	4611      	mov	r1, r2
   81ec8:	46d4      	mov	ip, sl
   81eca:	dced      	bgt.n	81ea8 <_vfiprintf_r+0x3c0>
   81ecc:	464c      	mov	r4, r9
   81ece:	46e1      	mov	r9, ip
   81ed0:	4432      	add	r2, r6
   81ed2:	f1be 0f07 	cmp.w	lr, #7
   81ed6:	9211      	str	r2, [sp, #68]	; 0x44
   81ed8:	e889 0060 	stmia.w	r9, {r5, r6}
   81edc:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81ee0:	f300 8366 	bgt.w	825b0 <_vfiprintf_r+0xac8>
   81ee4:	f109 0908 	add.w	r9, r9, #8
   81ee8:	f10e 0001 	add.w	r0, lr, #1
   81eec:	4671      	mov	r1, lr
   81eee:	e1a8      	b.n	82242 <_vfiprintf_r+0x75a>
   81ef0:	9508      	str	r5, [sp, #32]
   81ef2:	f013 0220 	ands.w	r2, r3, #32
   81ef6:	f040 8389 	bne.w	8260c <_vfiprintf_r+0xb24>
   81efa:	f013 0110 	ands.w	r1, r3, #16
   81efe:	f040 8319 	bne.w	82534 <_vfiprintf_r+0xa4c>
   81f02:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   81f06:	f000 8315 	beq.w	82534 <_vfiprintf_r+0xa4c>
   81f0a:	9807      	ldr	r0, [sp, #28]
   81f0c:	460a      	mov	r2, r1
   81f0e:	4601      	mov	r1, r0
   81f10:	3104      	adds	r1, #4
   81f12:	8806      	ldrh	r6, [r0, #0]
   81f14:	2700      	movs	r7, #0
   81f16:	9107      	str	r1, [sp, #28]
   81f18:	e71f      	b.n	81d5a <_vfiprintf_r+0x272>
   81f1a:	9508      	str	r5, [sp, #32]
   81f1c:	f043 0310 	orr.w	r3, r3, #16
   81f20:	e7e7      	b.n	81ef2 <_vfiprintf_r+0x40a>
   81f22:	9508      	str	r5, [sp, #32]
   81f24:	f043 0310 	orr.w	r3, r3, #16
   81f28:	e707      	b.n	81d3a <_vfiprintf_r+0x252>
   81f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81f2e:	f898 2000 	ldrb.w	r2, [r8]
   81f32:	e64b      	b.n	81bcc <_vfiprintf_r+0xe4>
   81f34:	2500      	movs	r5, #0
   81f36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81f3a:	f818 2b01 	ldrb.w	r2, [r8], #1
   81f3e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81f42:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   81f46:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81f4a:	2909      	cmp	r1, #9
   81f4c:	d9f5      	bls.n	81f3a <_vfiprintf_r+0x452>
   81f4e:	e63f      	b.n	81bd0 <_vfiprintf_r+0xe8>
   81f50:	9508      	str	r5, [sp, #32]
   81f52:	2800      	cmp	r0, #0
   81f54:	f040 8402 	bne.w	8275c <_vfiprintf_r+0xc74>
   81f58:	f043 0310 	orr.w	r3, r3, #16
   81f5c:	069e      	lsls	r6, r3, #26
   81f5e:	f100 833d 	bmi.w	825dc <_vfiprintf_r+0xaf4>
   81f62:	9907      	ldr	r1, [sp, #28]
   81f64:	06dd      	lsls	r5, r3, #27
   81f66:	460a      	mov	r2, r1
   81f68:	f100 82f0 	bmi.w	8254c <_vfiprintf_r+0xa64>
   81f6c:	0658      	lsls	r0, r3, #25
   81f6e:	f140 82ed 	bpl.w	8254c <_vfiprintf_r+0xa64>
   81f72:	f9b1 6000 	ldrsh.w	r6, [r1]
   81f76:	3204      	adds	r2, #4
   81f78:	17f7      	asrs	r7, r6, #31
   81f7a:	4630      	mov	r0, r6
   81f7c:	4639      	mov	r1, r7
   81f7e:	9207      	str	r2, [sp, #28]
   81f80:	2800      	cmp	r0, #0
   81f82:	f171 0200 	sbcs.w	r2, r1, #0
   81f86:	f2c0 835a 	blt.w	8263e <_vfiprintf_r+0xb56>
   81f8a:	1c61      	adds	r1, r4, #1
   81f8c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81f90:	f04f 0201 	mov.w	r2, #1
   81f94:	f47f aee9 	bne.w	81d6a <_vfiprintf_r+0x282>
   81f98:	ea56 0107 	orrs.w	r1, r6, r7
   81f9c:	f000 824b 	beq.w	82436 <_vfiprintf_r+0x94e>
   81fa0:	9302      	str	r3, [sp, #8]
   81fa2:	2a01      	cmp	r2, #1
   81fa4:	f000 828a 	beq.w	824bc <_vfiprintf_r+0x9d4>
   81fa8:	2a02      	cmp	r2, #2
   81faa:	f040 825a 	bne.w	82462 <_vfiprintf_r+0x97a>
   81fae:	46d3      	mov	fp, sl
   81fb0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   81fb2:	0933      	lsrs	r3, r6, #4
   81fb4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81fb8:	0939      	lsrs	r1, r7, #4
   81fba:	f006 020f 	and.w	r2, r6, #15
   81fbe:	460f      	mov	r7, r1
   81fc0:	461e      	mov	r6, r3
   81fc2:	5c83      	ldrb	r3, [r0, r2]
   81fc4:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81fc8:	ea56 0307 	orrs.w	r3, r6, r7
   81fcc:	d1f1      	bne.n	81fb2 <_vfiprintf_r+0x4ca>
   81fce:	ebaa 030b 	sub.w	r3, sl, fp
   81fd2:	9305      	str	r3, [sp, #20]
   81fd4:	e6e0      	b.n	81d98 <_vfiprintf_r+0x2b0>
   81fd6:	2800      	cmp	r0, #0
   81fd8:	f040 83bd 	bne.w	82756 <_vfiprintf_r+0xc6e>
   81fdc:	0699      	lsls	r1, r3, #26
   81fde:	f100 8359 	bmi.w	82694 <_vfiprintf_r+0xbac>
   81fe2:	06da      	lsls	r2, r3, #27
   81fe4:	f100 80e5 	bmi.w	821b2 <_vfiprintf_r+0x6ca>
   81fe8:	065b      	lsls	r3, r3, #25
   81fea:	f140 80e2 	bpl.w	821b2 <_vfiprintf_r+0x6ca>
   81fee:	9a07      	ldr	r2, [sp, #28]
   81ff0:	6813      	ldr	r3, [r2, #0]
   81ff2:	3204      	adds	r2, #4
   81ff4:	9207      	str	r2, [sp, #28]
   81ff6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   81ffa:	801a      	strh	r2, [r3, #0]
   81ffc:	e5b1      	b.n	81b62 <_vfiprintf_r+0x7a>
   81ffe:	2278      	movs	r2, #120	; 0x78
   82000:	2130      	movs	r1, #48	; 0x30
   82002:	9508      	str	r5, [sp, #32]
   82004:	9d07      	ldr	r5, [sp, #28]
   82006:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8200a:	1d2a      	adds	r2, r5, #4
   8200c:	9207      	str	r2, [sp, #28]
   8200e:	4a3c      	ldr	r2, [pc, #240]	; (82100 <_vfiprintf_r+0x618>)
   82010:	682e      	ldr	r6, [r5, #0]
   82012:	920b      	str	r2, [sp, #44]	; 0x2c
   82014:	f043 0302 	orr.w	r3, r3, #2
   82018:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8201c:	2700      	movs	r7, #0
   8201e:	2202      	movs	r2, #2
   82020:	e69b      	b.n	81d5a <_vfiprintf_r+0x272>
   82022:	9508      	str	r5, [sp, #32]
   82024:	2800      	cmp	r0, #0
   82026:	d099      	beq.n	81f5c <_vfiprintf_r+0x474>
   82028:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8202c:	e796      	b.n	81f5c <_vfiprintf_r+0x474>
   8202e:	f898 2000 	ldrb.w	r2, [r8]
   82032:	2e00      	cmp	r6, #0
   82034:	f47f adca 	bne.w	81bcc <_vfiprintf_r+0xe4>
   82038:	2001      	movs	r0, #1
   8203a:	2620      	movs	r6, #32
   8203c:	e5c6      	b.n	81bcc <_vfiprintf_r+0xe4>
   8203e:	f043 0301 	orr.w	r3, r3, #1
   82042:	f898 2000 	ldrb.w	r2, [r8]
   82046:	e5c1      	b.n	81bcc <_vfiprintf_r+0xe4>
   82048:	9508      	str	r5, [sp, #32]
   8204a:	2800      	cmp	r0, #0
   8204c:	f040 8380 	bne.w	82750 <_vfiprintf_r+0xc68>
   82050:	492b      	ldr	r1, [pc, #172]	; (82100 <_vfiprintf_r+0x618>)
   82052:	910b      	str	r1, [sp, #44]	; 0x2c
   82054:	069f      	lsls	r7, r3, #26
   82056:	f100 82e5 	bmi.w	82624 <_vfiprintf_r+0xb3c>
   8205a:	9807      	ldr	r0, [sp, #28]
   8205c:	06de      	lsls	r6, r3, #27
   8205e:	4601      	mov	r1, r0
   82060:	f100 826f 	bmi.w	82542 <_vfiprintf_r+0xa5a>
   82064:	065d      	lsls	r5, r3, #25
   82066:	f140 826c 	bpl.w	82542 <_vfiprintf_r+0xa5a>
   8206a:	2700      	movs	r7, #0
   8206c:	3104      	adds	r1, #4
   8206e:	8806      	ldrh	r6, [r0, #0]
   82070:	9107      	str	r1, [sp, #28]
   82072:	07d8      	lsls	r0, r3, #31
   82074:	f140 8220 	bpl.w	824b8 <_vfiprintf_r+0x9d0>
   82078:	ea56 0107 	orrs.w	r1, r6, r7
   8207c:	f000 821c 	beq.w	824b8 <_vfiprintf_r+0x9d0>
   82080:	2130      	movs	r1, #48	; 0x30
   82082:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82086:	f043 0302 	orr.w	r3, r3, #2
   8208a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8208e:	2202      	movs	r2, #2
   82090:	e663      	b.n	81d5a <_vfiprintf_r+0x272>
   82092:	9508      	str	r5, [sp, #32]
   82094:	2800      	cmp	r0, #0
   82096:	f040 8355 	bne.w	82744 <_vfiprintf_r+0xc5c>
   8209a:	491a      	ldr	r1, [pc, #104]	; (82104 <_vfiprintf_r+0x61c>)
   8209c:	910b      	str	r1, [sp, #44]	; 0x2c
   8209e:	e7d9      	b.n	82054 <_vfiprintf_r+0x56c>
   820a0:	2201      	movs	r2, #1
   820a2:	9807      	ldr	r0, [sp, #28]
   820a4:	4611      	mov	r1, r2
   820a6:	9201      	str	r2, [sp, #4]
   820a8:	6802      	ldr	r2, [r0, #0]
   820aa:	f04f 0400 	mov.w	r4, #0
   820ae:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   820b2:	4602      	mov	r2, r0
   820b4:	3204      	adds	r2, #4
   820b6:	9508      	str	r5, [sp, #32]
   820b8:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   820bc:	9105      	str	r1, [sp, #20]
   820be:	9207      	str	r2, [sp, #28]
   820c0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   820c4:	9302      	str	r3, [sp, #8]
   820c6:	2400      	movs	r4, #0
   820c8:	e66e      	b.n	81da8 <_vfiprintf_r+0x2c0>
   820ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   820ce:	f898 2000 	ldrb.w	r2, [r8]
   820d2:	e57b      	b.n	81bcc <_vfiprintf_r+0xe4>
   820d4:	f898 2000 	ldrb.w	r2, [r8]
   820d8:	2a6c      	cmp	r2, #108	; 0x6c
   820da:	bf03      	ittte	eq
   820dc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   820e0:	f043 0320 	orreq.w	r3, r3, #32
   820e4:	f108 0801 	addeq.w	r8, r8, #1
   820e8:	f043 0310 	orrne.w	r3, r3, #16
   820ec:	e56e      	b.n	81bcc <_vfiprintf_r+0xe4>
   820ee:	f898 2000 	ldrb.w	r2, [r8]
   820f2:	2001      	movs	r0, #1
   820f4:	262b      	movs	r6, #43	; 0x2b
   820f6:	e569      	b.n	81bcc <_vfiprintf_r+0xe4>
   820f8:	000846d0 	.word	0x000846d0
   820fc:	000846e0 	.word	0x000846e0
   82100:	000846b4 	.word	0x000846b4
   82104:	000846a0 	.word	0x000846a0
   82108:	f04f 0200 	mov.w	r2, #0
   8210c:	9907      	ldr	r1, [sp, #28]
   8210e:	9508      	str	r5, [sp, #32]
   82110:	f8d1 b000 	ldr.w	fp, [r1]
   82114:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82118:	1d0d      	adds	r5, r1, #4
   8211a:	f1bb 0f00 	cmp.w	fp, #0
   8211e:	f000 82e4 	beq.w	826ea <_vfiprintf_r+0xc02>
   82122:	1c67      	adds	r7, r4, #1
   82124:	f000 82c3 	beq.w	826ae <_vfiprintf_r+0xbc6>
   82128:	4622      	mov	r2, r4
   8212a:	2100      	movs	r1, #0
   8212c:	4658      	mov	r0, fp
   8212e:	9301      	str	r3, [sp, #4]
   82130:	f001 fbc6 	bl	838c0 <memchr>
   82134:	9b01      	ldr	r3, [sp, #4]
   82136:	2800      	cmp	r0, #0
   82138:	f000 82e8 	beq.w	8270c <_vfiprintf_r+0xc24>
   8213c:	eba0 020b 	sub.w	r2, r0, fp
   82140:	9507      	str	r5, [sp, #28]
   82142:	9205      	str	r2, [sp, #20]
   82144:	9302      	str	r3, [sp, #8]
   82146:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8214a:	2400      	movs	r4, #0
   8214c:	e624      	b.n	81d98 <_vfiprintf_r+0x2b0>
   8214e:	f898 2000 	ldrb.w	r2, [r8]
   82152:	f108 0701 	add.w	r7, r8, #1
   82156:	2a2a      	cmp	r2, #42	; 0x2a
   82158:	f000 82e9 	beq.w	8272e <_vfiprintf_r+0xc46>
   8215c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82160:	2909      	cmp	r1, #9
   82162:	46b8      	mov	r8, r7
   82164:	f04f 0400 	mov.w	r4, #0
   82168:	f63f ad32 	bhi.w	81bd0 <_vfiprintf_r+0xe8>
   8216c:	f818 2b01 	ldrb.w	r2, [r8], #1
   82170:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82174:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   82178:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8217c:	2909      	cmp	r1, #9
   8217e:	d9f5      	bls.n	8216c <_vfiprintf_r+0x684>
   82180:	e526      	b.n	81bd0 <_vfiprintf_r+0xe8>
   82182:	f043 0320 	orr.w	r3, r3, #32
   82186:	f898 2000 	ldrb.w	r2, [r8]
   8218a:	e51f      	b.n	81bcc <_vfiprintf_r+0xe4>
   8218c:	9508      	str	r5, [sp, #32]
   8218e:	2800      	cmp	r0, #0
   82190:	f040 82db 	bne.w	8274a <_vfiprintf_r+0xc62>
   82194:	2a00      	cmp	r2, #0
   82196:	f000 80f1 	beq.w	8237c <_vfiprintf_r+0x894>
   8219a:	2101      	movs	r1, #1
   8219c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   821a0:	f04f 0200 	mov.w	r2, #0
   821a4:	9101      	str	r1, [sp, #4]
   821a6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   821aa:	9105      	str	r1, [sp, #20]
   821ac:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   821b0:	e788      	b.n	820c4 <_vfiprintf_r+0x5dc>
   821b2:	9a07      	ldr	r2, [sp, #28]
   821b4:	6813      	ldr	r3, [r2, #0]
   821b6:	3204      	adds	r2, #4
   821b8:	9207      	str	r2, [sp, #28]
   821ba:	9a03      	ldr	r2, [sp, #12]
   821bc:	601a      	str	r2, [r3, #0]
   821be:	e4d0      	b.n	81b62 <_vfiprintf_r+0x7a>
   821c0:	aa0f      	add	r2, sp, #60	; 0x3c
   821c2:	9904      	ldr	r1, [sp, #16]
   821c4:	4620      	mov	r0, r4
   821c6:	f7ff fc4f 	bl	81a68 <__sprint_r.part.0>
   821ca:	2800      	cmp	r0, #0
   821cc:	f040 8143 	bne.w	82456 <_vfiprintf_r+0x96e>
   821d0:	9910      	ldr	r1, [sp, #64]	; 0x40
   821d2:	46d6      	mov	lr, sl
   821d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821d6:	f101 0c01 	add.w	ip, r1, #1
   821da:	e60a      	b.n	81df2 <_vfiprintf_r+0x30a>
   821dc:	aa0f      	add	r2, sp, #60	; 0x3c
   821de:	9904      	ldr	r1, [sp, #16]
   821e0:	9806      	ldr	r0, [sp, #24]
   821e2:	f7ff fc41 	bl	81a68 <__sprint_r.part.0>
   821e6:	2800      	cmp	r0, #0
   821e8:	f040 8135 	bne.w	82456 <_vfiprintf_r+0x96e>
   821ec:	46d1      	mov	r9, sl
   821ee:	9910      	ldr	r1, [sp, #64]	; 0x40
   821f0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   821f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821f6:	1c48      	adds	r0, r1, #1
   821f8:	2d00      	cmp	r5, #0
   821fa:	f43f ae24 	beq.w	81e46 <_vfiprintf_r+0x35e>
   821fe:	2101      	movs	r1, #1
   82200:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   82204:	440a      	add	r2, r1
   82206:	2807      	cmp	r0, #7
   82208:	9211      	str	r2, [sp, #68]	; 0x44
   8220a:	9010      	str	r0, [sp, #64]	; 0x40
   8220c:	f8c9 1004 	str.w	r1, [r9, #4]
   82210:	f8c9 5000 	str.w	r5, [r9]
   82214:	f340 8109 	ble.w	8242a <_vfiprintf_r+0x942>
   82218:	2a00      	cmp	r2, #0
   8221a:	f040 81af 	bne.w	8257c <_vfiprintf_r+0xa94>
   8221e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82220:	2b00      	cmp	r3, #0
   82222:	f43f ae23 	beq.w	81e6c <_vfiprintf_r+0x384>
   82226:	2202      	movs	r2, #2
   82228:	4608      	mov	r0, r1
   8222a:	46d1      	mov	r9, sl
   8222c:	ab0e      	add	r3, sp, #56	; 0x38
   8222e:	921d      	str	r2, [sp, #116]	; 0x74
   82230:	931c      	str	r3, [sp, #112]	; 0x70
   82232:	4601      	mov	r1, r0
   82234:	f109 0908 	add.w	r9, r9, #8
   82238:	3001      	adds	r0, #1
   8223a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8223c:	2b80      	cmp	r3, #128	; 0x80
   8223e:	f43f ae1c 	beq.w	81e7a <_vfiprintf_r+0x392>
   82242:	9b05      	ldr	r3, [sp, #20]
   82244:	1ae4      	subs	r4, r4, r3
   82246:	2c00      	cmp	r4, #0
   82248:	dd2f      	ble.n	822aa <_vfiprintf_r+0x7c2>
   8224a:	2c10      	cmp	r4, #16
   8224c:	f340 8220 	ble.w	82690 <_vfiprintf_r+0xba8>
   82250:	46ce      	mov	lr, r9
   82252:	2610      	movs	r6, #16
   82254:	4db2      	ldr	r5, [pc, #712]	; (82520 <_vfiprintf_r+0xa38>)
   82256:	9f06      	ldr	r7, [sp, #24]
   82258:	f8dd 9010 	ldr.w	r9, [sp, #16]
   8225c:	e006      	b.n	8226c <_vfiprintf_r+0x784>
   8225e:	1c88      	adds	r0, r1, #2
   82260:	4619      	mov	r1, r3
   82262:	f10e 0e08 	add.w	lr, lr, #8
   82266:	3c10      	subs	r4, #16
   82268:	2c10      	cmp	r4, #16
   8226a:	dd10      	ble.n	8228e <_vfiprintf_r+0x7a6>
   8226c:	1c4b      	adds	r3, r1, #1
   8226e:	3210      	adds	r2, #16
   82270:	2b07      	cmp	r3, #7
   82272:	9211      	str	r2, [sp, #68]	; 0x44
   82274:	e88e 0060 	stmia.w	lr, {r5, r6}
   82278:	9310      	str	r3, [sp, #64]	; 0x40
   8227a:	ddf0      	ble.n	8225e <_vfiprintf_r+0x776>
   8227c:	2a00      	cmp	r2, #0
   8227e:	d165      	bne.n	8234c <_vfiprintf_r+0x864>
   82280:	3c10      	subs	r4, #16
   82282:	2c10      	cmp	r4, #16
   82284:	f04f 0001 	mov.w	r0, #1
   82288:	4611      	mov	r1, r2
   8228a:	46d6      	mov	lr, sl
   8228c:	dcee      	bgt.n	8226c <_vfiprintf_r+0x784>
   8228e:	46f1      	mov	r9, lr
   82290:	4422      	add	r2, r4
   82292:	2807      	cmp	r0, #7
   82294:	9211      	str	r2, [sp, #68]	; 0x44
   82296:	f8c9 5000 	str.w	r5, [r9]
   8229a:	f8c9 4004 	str.w	r4, [r9, #4]
   8229e:	9010      	str	r0, [sp, #64]	; 0x40
   822a0:	f300 8085 	bgt.w	823ae <_vfiprintf_r+0x8c6>
   822a4:	f109 0908 	add.w	r9, r9, #8
   822a8:	3001      	adds	r0, #1
   822aa:	9905      	ldr	r1, [sp, #20]
   822ac:	2807      	cmp	r0, #7
   822ae:	440a      	add	r2, r1
   822b0:	9211      	str	r2, [sp, #68]	; 0x44
   822b2:	f8c9 b000 	str.w	fp, [r9]
   822b6:	f8c9 1004 	str.w	r1, [r9, #4]
   822ba:	9010      	str	r0, [sp, #64]	; 0x40
   822bc:	f340 8082 	ble.w	823c4 <_vfiprintf_r+0x8dc>
   822c0:	2a00      	cmp	r2, #0
   822c2:	f040 8118 	bne.w	824f6 <_vfiprintf_r+0xa0e>
   822c6:	9b02      	ldr	r3, [sp, #8]
   822c8:	9210      	str	r2, [sp, #64]	; 0x40
   822ca:	0758      	lsls	r0, r3, #29
   822cc:	d535      	bpl.n	8233a <_vfiprintf_r+0x852>
   822ce:	9b08      	ldr	r3, [sp, #32]
   822d0:	9901      	ldr	r1, [sp, #4]
   822d2:	1a5c      	subs	r4, r3, r1
   822d4:	2c00      	cmp	r4, #0
   822d6:	f340 80e7 	ble.w	824a8 <_vfiprintf_r+0x9c0>
   822da:	46d1      	mov	r9, sl
   822dc:	2c10      	cmp	r4, #16
   822de:	f340 820d 	ble.w	826fc <_vfiprintf_r+0xc14>
   822e2:	2510      	movs	r5, #16
   822e4:	9910      	ldr	r1, [sp, #64]	; 0x40
   822e6:	4e8f      	ldr	r6, [pc, #572]	; (82524 <_vfiprintf_r+0xa3c>)
   822e8:	9f06      	ldr	r7, [sp, #24]
   822ea:	f8dd b010 	ldr.w	fp, [sp, #16]
   822ee:	e006      	b.n	822fe <_vfiprintf_r+0x816>
   822f0:	1c88      	adds	r0, r1, #2
   822f2:	4619      	mov	r1, r3
   822f4:	f109 0908 	add.w	r9, r9, #8
   822f8:	3c10      	subs	r4, #16
   822fa:	2c10      	cmp	r4, #16
   822fc:	dd11      	ble.n	82322 <_vfiprintf_r+0x83a>
   822fe:	1c4b      	adds	r3, r1, #1
   82300:	3210      	adds	r2, #16
   82302:	2b07      	cmp	r3, #7
   82304:	9211      	str	r2, [sp, #68]	; 0x44
   82306:	f8c9 6000 	str.w	r6, [r9]
   8230a:	f8c9 5004 	str.w	r5, [r9, #4]
   8230e:	9310      	str	r3, [sp, #64]	; 0x40
   82310:	ddee      	ble.n	822f0 <_vfiprintf_r+0x808>
   82312:	bb42      	cbnz	r2, 82366 <_vfiprintf_r+0x87e>
   82314:	3c10      	subs	r4, #16
   82316:	2c10      	cmp	r4, #16
   82318:	f04f 0001 	mov.w	r0, #1
   8231c:	4611      	mov	r1, r2
   8231e:	46d1      	mov	r9, sl
   82320:	dced      	bgt.n	822fe <_vfiprintf_r+0x816>
   82322:	4422      	add	r2, r4
   82324:	2807      	cmp	r0, #7
   82326:	9211      	str	r2, [sp, #68]	; 0x44
   82328:	f8c9 6000 	str.w	r6, [r9]
   8232c:	f8c9 4004 	str.w	r4, [r9, #4]
   82330:	9010      	str	r0, [sp, #64]	; 0x40
   82332:	dd51      	ble.n	823d8 <_vfiprintf_r+0x8f0>
   82334:	2a00      	cmp	r2, #0
   82336:	f040 819a 	bne.w	8266e <_vfiprintf_r+0xb86>
   8233a:	9b03      	ldr	r3, [sp, #12]
   8233c:	9a08      	ldr	r2, [sp, #32]
   8233e:	9901      	ldr	r1, [sp, #4]
   82340:	428a      	cmp	r2, r1
   82342:	bfac      	ite	ge
   82344:	189b      	addge	r3, r3, r2
   82346:	185b      	addlt	r3, r3, r1
   82348:	9303      	str	r3, [sp, #12]
   8234a:	e04e      	b.n	823ea <_vfiprintf_r+0x902>
   8234c:	aa0f      	add	r2, sp, #60	; 0x3c
   8234e:	4649      	mov	r1, r9
   82350:	4638      	mov	r0, r7
   82352:	f7ff fb89 	bl	81a68 <__sprint_r.part.0>
   82356:	2800      	cmp	r0, #0
   82358:	f040 813e 	bne.w	825d8 <_vfiprintf_r+0xaf0>
   8235c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8235e:	46d6      	mov	lr, sl
   82360:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82362:	1c48      	adds	r0, r1, #1
   82364:	e77f      	b.n	82266 <_vfiprintf_r+0x77e>
   82366:	aa0f      	add	r2, sp, #60	; 0x3c
   82368:	4659      	mov	r1, fp
   8236a:	4638      	mov	r0, r7
   8236c:	f7ff fb7c 	bl	81a68 <__sprint_r.part.0>
   82370:	b960      	cbnz	r0, 8238c <_vfiprintf_r+0x8a4>
   82372:	9910      	ldr	r1, [sp, #64]	; 0x40
   82374:	46d1      	mov	r9, sl
   82376:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82378:	1c48      	adds	r0, r1, #1
   8237a:	e7bd      	b.n	822f8 <_vfiprintf_r+0x810>
   8237c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8237e:	f8dd b010 	ldr.w	fp, [sp, #16]
   82382:	2b00      	cmp	r3, #0
   82384:	f040 81ca 	bne.w	8271c <_vfiprintf_r+0xc34>
   82388:	2300      	movs	r3, #0
   8238a:	9310      	str	r3, [sp, #64]	; 0x40
   8238c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82390:	f013 0f01 	tst.w	r3, #1
   82394:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82398:	d102      	bne.n	823a0 <_vfiprintf_r+0x8b8>
   8239a:	059a      	lsls	r2, r3, #22
   8239c:	f140 80dd 	bpl.w	8255a <_vfiprintf_r+0xa72>
   823a0:	065b      	lsls	r3, r3, #25
   823a2:	f53f acad 	bmi.w	81d00 <_vfiprintf_r+0x218>
   823a6:	9803      	ldr	r0, [sp, #12]
   823a8:	b02d      	add	sp, #180	; 0xb4
   823aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823ae:	2a00      	cmp	r2, #0
   823b0:	f040 8105 	bne.w	825be <_vfiprintf_r+0xad6>
   823b4:	2301      	movs	r3, #1
   823b6:	46d1      	mov	r9, sl
   823b8:	9a05      	ldr	r2, [sp, #20]
   823ba:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   823be:	921d      	str	r2, [sp, #116]	; 0x74
   823c0:	9211      	str	r2, [sp, #68]	; 0x44
   823c2:	9310      	str	r3, [sp, #64]	; 0x40
   823c4:	f109 0908 	add.w	r9, r9, #8
   823c8:	9b02      	ldr	r3, [sp, #8]
   823ca:	0759      	lsls	r1, r3, #29
   823cc:	d504      	bpl.n	823d8 <_vfiprintf_r+0x8f0>
   823ce:	9b08      	ldr	r3, [sp, #32]
   823d0:	9901      	ldr	r1, [sp, #4]
   823d2:	1a5c      	subs	r4, r3, r1
   823d4:	2c00      	cmp	r4, #0
   823d6:	dc81      	bgt.n	822dc <_vfiprintf_r+0x7f4>
   823d8:	9b03      	ldr	r3, [sp, #12]
   823da:	9908      	ldr	r1, [sp, #32]
   823dc:	9801      	ldr	r0, [sp, #4]
   823de:	4281      	cmp	r1, r0
   823e0:	bfac      	ite	ge
   823e2:	185b      	addge	r3, r3, r1
   823e4:	181b      	addlt	r3, r3, r0
   823e6:	9303      	str	r3, [sp, #12]
   823e8:	bb72      	cbnz	r2, 82448 <_vfiprintf_r+0x960>
   823ea:	2300      	movs	r3, #0
   823ec:	46d1      	mov	r9, sl
   823ee:	9310      	str	r3, [sp, #64]	; 0x40
   823f0:	f7ff bbb7 	b.w	81b62 <_vfiprintf_r+0x7a>
   823f4:	aa0f      	add	r2, sp, #60	; 0x3c
   823f6:	9904      	ldr	r1, [sp, #16]
   823f8:	4620      	mov	r0, r4
   823fa:	f7ff fb35 	bl	81a68 <__sprint_r.part.0>
   823fe:	bb50      	cbnz	r0, 82456 <_vfiprintf_r+0x96e>
   82400:	9910      	ldr	r1, [sp, #64]	; 0x40
   82402:	46d4      	mov	ip, sl
   82404:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82406:	f101 0e01 	add.w	lr, r1, #1
   8240a:	e54a      	b.n	81ea2 <_vfiprintf_r+0x3ba>
   8240c:	2a00      	cmp	r2, #0
   8240e:	f47f aee5 	bne.w	821dc <_vfiprintf_r+0x6f4>
   82412:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82416:	2900      	cmp	r1, #0
   82418:	f000 811a 	beq.w	82650 <_vfiprintf_r+0xb68>
   8241c:	2201      	movs	r2, #1
   8241e:	46d1      	mov	r9, sl
   82420:	4610      	mov	r0, r2
   82422:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82426:	921d      	str	r2, [sp, #116]	; 0x74
   82428:	911c      	str	r1, [sp, #112]	; 0x70
   8242a:	4601      	mov	r1, r0
   8242c:	f109 0908 	add.w	r9, r9, #8
   82430:	3001      	adds	r0, #1
   82432:	e508      	b.n	81e46 <_vfiprintf_r+0x35e>
   82434:	9b02      	ldr	r3, [sp, #8]
   82436:	2a01      	cmp	r2, #1
   82438:	f000 8097 	beq.w	8256a <_vfiprintf_r+0xa82>
   8243c:	2a02      	cmp	r2, #2
   8243e:	d10d      	bne.n	8245c <_vfiprintf_r+0x974>
   82440:	9302      	str	r3, [sp, #8]
   82442:	2600      	movs	r6, #0
   82444:	2700      	movs	r7, #0
   82446:	e5b2      	b.n	81fae <_vfiprintf_r+0x4c6>
   82448:	aa0f      	add	r2, sp, #60	; 0x3c
   8244a:	9904      	ldr	r1, [sp, #16]
   8244c:	9806      	ldr	r0, [sp, #24]
   8244e:	f7ff fb0b 	bl	81a68 <__sprint_r.part.0>
   82452:	2800      	cmp	r0, #0
   82454:	d0c9      	beq.n	823ea <_vfiprintf_r+0x902>
   82456:	f8dd b010 	ldr.w	fp, [sp, #16]
   8245a:	e797      	b.n	8238c <_vfiprintf_r+0x8a4>
   8245c:	2600      	movs	r6, #0
   8245e:	2700      	movs	r7, #0
   82460:	9302      	str	r3, [sp, #8]
   82462:	4651      	mov	r1, sl
   82464:	e000      	b.n	82468 <_vfiprintf_r+0x980>
   82466:	4659      	mov	r1, fp
   82468:	08f2      	lsrs	r2, r6, #3
   8246a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8246e:	08f8      	lsrs	r0, r7, #3
   82470:	f006 0307 	and.w	r3, r6, #7
   82474:	4607      	mov	r7, r0
   82476:	4616      	mov	r6, r2
   82478:	3330      	adds	r3, #48	; 0x30
   8247a:	ea56 0207 	orrs.w	r2, r6, r7
   8247e:	f801 3c01 	strb.w	r3, [r1, #-1]
   82482:	f101 3bff 	add.w	fp, r1, #4294967295
   82486:	d1ee      	bne.n	82466 <_vfiprintf_r+0x97e>
   82488:	9a02      	ldr	r2, [sp, #8]
   8248a:	07d6      	lsls	r6, r2, #31
   8248c:	f57f ad9f 	bpl.w	81fce <_vfiprintf_r+0x4e6>
   82490:	2b30      	cmp	r3, #48	; 0x30
   82492:	f43f ad9c 	beq.w	81fce <_vfiprintf_r+0x4e6>
   82496:	2330      	movs	r3, #48	; 0x30
   82498:	3902      	subs	r1, #2
   8249a:	f80b 3c01 	strb.w	r3, [fp, #-1]
   8249e:	ebaa 0301 	sub.w	r3, sl, r1
   824a2:	9305      	str	r3, [sp, #20]
   824a4:	468b      	mov	fp, r1
   824a6:	e477      	b.n	81d98 <_vfiprintf_r+0x2b0>
   824a8:	9b03      	ldr	r3, [sp, #12]
   824aa:	9a08      	ldr	r2, [sp, #32]
   824ac:	428a      	cmp	r2, r1
   824ae:	bfac      	ite	ge
   824b0:	189b      	addge	r3, r3, r2
   824b2:	185b      	addlt	r3, r3, r1
   824b4:	9303      	str	r3, [sp, #12]
   824b6:	e798      	b.n	823ea <_vfiprintf_r+0x902>
   824b8:	2202      	movs	r2, #2
   824ba:	e44e      	b.n	81d5a <_vfiprintf_r+0x272>
   824bc:	2f00      	cmp	r7, #0
   824be:	bf08      	it	eq
   824c0:	2e0a      	cmpeq	r6, #10
   824c2:	d351      	bcc.n	82568 <_vfiprintf_r+0xa80>
   824c4:	46d3      	mov	fp, sl
   824c6:	4630      	mov	r0, r6
   824c8:	4639      	mov	r1, r7
   824ca:	220a      	movs	r2, #10
   824cc:	2300      	movs	r3, #0
   824ce:	f001 fefb 	bl	842c8 <__aeabi_uldivmod>
   824d2:	3230      	adds	r2, #48	; 0x30
   824d4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   824d8:	4630      	mov	r0, r6
   824da:	4639      	mov	r1, r7
   824dc:	2300      	movs	r3, #0
   824de:	220a      	movs	r2, #10
   824e0:	f001 fef2 	bl	842c8 <__aeabi_uldivmod>
   824e4:	4606      	mov	r6, r0
   824e6:	460f      	mov	r7, r1
   824e8:	ea56 0307 	orrs.w	r3, r6, r7
   824ec:	d1eb      	bne.n	824c6 <_vfiprintf_r+0x9de>
   824ee:	e56e      	b.n	81fce <_vfiprintf_r+0x4e6>
   824f0:	9405      	str	r4, [sp, #20]
   824f2:	46d3      	mov	fp, sl
   824f4:	e450      	b.n	81d98 <_vfiprintf_r+0x2b0>
   824f6:	aa0f      	add	r2, sp, #60	; 0x3c
   824f8:	9904      	ldr	r1, [sp, #16]
   824fa:	9806      	ldr	r0, [sp, #24]
   824fc:	f7ff fab4 	bl	81a68 <__sprint_r.part.0>
   82500:	2800      	cmp	r0, #0
   82502:	d1a8      	bne.n	82456 <_vfiprintf_r+0x96e>
   82504:	46d1      	mov	r9, sl
   82506:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82508:	e75e      	b.n	823c8 <_vfiprintf_r+0x8e0>
   8250a:	aa0f      	add	r2, sp, #60	; 0x3c
   8250c:	9904      	ldr	r1, [sp, #16]
   8250e:	9806      	ldr	r0, [sp, #24]
   82510:	f7ff faaa 	bl	81a68 <__sprint_r.part.0>
   82514:	2800      	cmp	r0, #0
   82516:	d19e      	bne.n	82456 <_vfiprintf_r+0x96e>
   82518:	46d1      	mov	r9, sl
   8251a:	f7ff bbbb 	b.w	81c94 <_vfiprintf_r+0x1ac>
   8251e:	bf00      	nop
   82520:	000846e0 	.word	0x000846e0
   82524:	000846d0 	.word	0x000846d0
   82528:	3104      	adds	r1, #4
   8252a:	6816      	ldr	r6, [r2, #0]
   8252c:	2700      	movs	r7, #0
   8252e:	2201      	movs	r2, #1
   82530:	9107      	str	r1, [sp, #28]
   82532:	e412      	b.n	81d5a <_vfiprintf_r+0x272>
   82534:	9807      	ldr	r0, [sp, #28]
   82536:	2700      	movs	r7, #0
   82538:	4601      	mov	r1, r0
   8253a:	3104      	adds	r1, #4
   8253c:	6806      	ldr	r6, [r0, #0]
   8253e:	9107      	str	r1, [sp, #28]
   82540:	e40b      	b.n	81d5a <_vfiprintf_r+0x272>
   82542:	680e      	ldr	r6, [r1, #0]
   82544:	3104      	adds	r1, #4
   82546:	9107      	str	r1, [sp, #28]
   82548:	2700      	movs	r7, #0
   8254a:	e592      	b.n	82072 <_vfiprintf_r+0x58a>
   8254c:	6816      	ldr	r6, [r2, #0]
   8254e:	3204      	adds	r2, #4
   82550:	17f7      	asrs	r7, r6, #31
   82552:	9207      	str	r2, [sp, #28]
   82554:	4630      	mov	r0, r6
   82556:	4639      	mov	r1, r7
   82558:	e512      	b.n	81f80 <_vfiprintf_r+0x498>
   8255a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8255e:	f000 fe75 	bl	8324c <__retarget_lock_release_recursive>
   82562:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82566:	e71b      	b.n	823a0 <_vfiprintf_r+0x8b8>
   82568:	9b02      	ldr	r3, [sp, #8]
   8256a:	9302      	str	r3, [sp, #8]
   8256c:	2301      	movs	r3, #1
   8256e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82572:	3630      	adds	r6, #48	; 0x30
   82574:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   82578:	9305      	str	r3, [sp, #20]
   8257a:	e40d      	b.n	81d98 <_vfiprintf_r+0x2b0>
   8257c:	aa0f      	add	r2, sp, #60	; 0x3c
   8257e:	9904      	ldr	r1, [sp, #16]
   82580:	9806      	ldr	r0, [sp, #24]
   82582:	f7ff fa71 	bl	81a68 <__sprint_r.part.0>
   82586:	2800      	cmp	r0, #0
   82588:	f47f af65 	bne.w	82456 <_vfiprintf_r+0x96e>
   8258c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8258e:	46d1      	mov	r9, sl
   82590:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82592:	1c48      	adds	r0, r1, #1
   82594:	e457      	b.n	81e46 <_vfiprintf_r+0x35e>
   82596:	aa0f      	add	r2, sp, #60	; 0x3c
   82598:	9904      	ldr	r1, [sp, #16]
   8259a:	9806      	ldr	r0, [sp, #24]
   8259c:	f7ff fa64 	bl	81a68 <__sprint_r.part.0>
   825a0:	2800      	cmp	r0, #0
   825a2:	f47f af58 	bne.w	82456 <_vfiprintf_r+0x96e>
   825a6:	9910      	ldr	r1, [sp, #64]	; 0x40
   825a8:	46d1      	mov	r9, sl
   825aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   825ac:	1c48      	adds	r0, r1, #1
   825ae:	e644      	b.n	8223a <_vfiprintf_r+0x752>
   825b0:	2a00      	cmp	r2, #0
   825b2:	f040 8087 	bne.w	826c4 <_vfiprintf_r+0xbdc>
   825b6:	2001      	movs	r0, #1
   825b8:	4611      	mov	r1, r2
   825ba:	46d1      	mov	r9, sl
   825bc:	e641      	b.n	82242 <_vfiprintf_r+0x75a>
   825be:	aa0f      	add	r2, sp, #60	; 0x3c
   825c0:	9904      	ldr	r1, [sp, #16]
   825c2:	9806      	ldr	r0, [sp, #24]
   825c4:	f7ff fa50 	bl	81a68 <__sprint_r.part.0>
   825c8:	2800      	cmp	r0, #0
   825ca:	f47f af44 	bne.w	82456 <_vfiprintf_r+0x96e>
   825ce:	9810      	ldr	r0, [sp, #64]	; 0x40
   825d0:	46d1      	mov	r9, sl
   825d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   825d4:	3001      	adds	r0, #1
   825d6:	e668      	b.n	822aa <_vfiprintf_r+0x7c2>
   825d8:	46cb      	mov	fp, r9
   825da:	e6d7      	b.n	8238c <_vfiprintf_r+0x8a4>
   825dc:	9d07      	ldr	r5, [sp, #28]
   825de:	3507      	adds	r5, #7
   825e0:	f025 0507 	bic.w	r5, r5, #7
   825e4:	f105 0208 	add.w	r2, r5, #8
   825e8:	e9d5 0100 	ldrd	r0, r1, [r5]
   825ec:	9207      	str	r2, [sp, #28]
   825ee:	4606      	mov	r6, r0
   825f0:	460f      	mov	r7, r1
   825f2:	e4c5      	b.n	81f80 <_vfiprintf_r+0x498>
   825f4:	9d07      	ldr	r5, [sp, #28]
   825f6:	3507      	adds	r5, #7
   825f8:	f025 0207 	bic.w	r2, r5, #7
   825fc:	f102 0108 	add.w	r1, r2, #8
   82600:	e9d2 6700 	ldrd	r6, r7, [r2]
   82604:	9107      	str	r1, [sp, #28]
   82606:	2201      	movs	r2, #1
   82608:	f7ff bba7 	b.w	81d5a <_vfiprintf_r+0x272>
   8260c:	9d07      	ldr	r5, [sp, #28]
   8260e:	3507      	adds	r5, #7
   82610:	f025 0207 	bic.w	r2, r5, #7
   82614:	f102 0108 	add.w	r1, r2, #8
   82618:	e9d2 6700 	ldrd	r6, r7, [r2]
   8261c:	9107      	str	r1, [sp, #28]
   8261e:	2200      	movs	r2, #0
   82620:	f7ff bb9b 	b.w	81d5a <_vfiprintf_r+0x272>
   82624:	9d07      	ldr	r5, [sp, #28]
   82626:	3507      	adds	r5, #7
   82628:	f025 0107 	bic.w	r1, r5, #7
   8262c:	f101 0008 	add.w	r0, r1, #8
   82630:	9007      	str	r0, [sp, #28]
   82632:	e9d1 6700 	ldrd	r6, r7, [r1]
   82636:	e51c      	b.n	82072 <_vfiprintf_r+0x58a>
   82638:	46d3      	mov	fp, sl
   8263a:	f7ff bbad 	b.w	81d98 <_vfiprintf_r+0x2b0>
   8263e:	252d      	movs	r5, #45	; 0x2d
   82640:	4276      	negs	r6, r6
   82642:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82646:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8264a:	2201      	movs	r2, #1
   8264c:	f7ff bb8a 	b.w	81d64 <_vfiprintf_r+0x27c>
   82650:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82652:	b9b3      	cbnz	r3, 82682 <_vfiprintf_r+0xb9a>
   82654:	4611      	mov	r1, r2
   82656:	2001      	movs	r0, #1
   82658:	46d1      	mov	r9, sl
   8265a:	e5f2      	b.n	82242 <_vfiprintf_r+0x75a>
   8265c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82660:	f000 fdf4 	bl	8324c <__retarget_lock_release_recursive>
   82664:	f04f 33ff 	mov.w	r3, #4294967295
   82668:	9303      	str	r3, [sp, #12]
   8266a:	f7ff bb4c 	b.w	81d06 <_vfiprintf_r+0x21e>
   8266e:	aa0f      	add	r2, sp, #60	; 0x3c
   82670:	9904      	ldr	r1, [sp, #16]
   82672:	9806      	ldr	r0, [sp, #24]
   82674:	f7ff f9f8 	bl	81a68 <__sprint_r.part.0>
   82678:	2800      	cmp	r0, #0
   8267a:	f47f aeec 	bne.w	82456 <_vfiprintf_r+0x96e>
   8267e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82680:	e6aa      	b.n	823d8 <_vfiprintf_r+0x8f0>
   82682:	2202      	movs	r2, #2
   82684:	ab0e      	add	r3, sp, #56	; 0x38
   82686:	921d      	str	r2, [sp, #116]	; 0x74
   82688:	931c      	str	r3, [sp, #112]	; 0x70
   8268a:	2001      	movs	r0, #1
   8268c:	46d1      	mov	r9, sl
   8268e:	e5d0      	b.n	82232 <_vfiprintf_r+0x74a>
   82690:	4d34      	ldr	r5, [pc, #208]	; (82764 <_vfiprintf_r+0xc7c>)
   82692:	e5fd      	b.n	82290 <_vfiprintf_r+0x7a8>
   82694:	9a07      	ldr	r2, [sp, #28]
   82696:	4613      	mov	r3, r2
   82698:	3304      	adds	r3, #4
   8269a:	9307      	str	r3, [sp, #28]
   8269c:	9b03      	ldr	r3, [sp, #12]
   8269e:	6811      	ldr	r1, [r2, #0]
   826a0:	17dd      	asrs	r5, r3, #31
   826a2:	461a      	mov	r2, r3
   826a4:	462b      	mov	r3, r5
   826a6:	e9c1 2300 	strd	r2, r3, [r1]
   826aa:	f7ff ba5a 	b.w	81b62 <_vfiprintf_r+0x7a>
   826ae:	4658      	mov	r0, fp
   826b0:	9507      	str	r5, [sp, #28]
   826b2:	9302      	str	r3, [sp, #8]
   826b4:	f7ff f9aa 	bl	81a0c <strlen>
   826b8:	2400      	movs	r4, #0
   826ba:	9005      	str	r0, [sp, #20]
   826bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   826c0:	f7ff bb6a 	b.w	81d98 <_vfiprintf_r+0x2b0>
   826c4:	aa0f      	add	r2, sp, #60	; 0x3c
   826c6:	9904      	ldr	r1, [sp, #16]
   826c8:	9806      	ldr	r0, [sp, #24]
   826ca:	f7ff f9cd 	bl	81a68 <__sprint_r.part.0>
   826ce:	2800      	cmp	r0, #0
   826d0:	f47f aec1 	bne.w	82456 <_vfiprintf_r+0x96e>
   826d4:	9910      	ldr	r1, [sp, #64]	; 0x40
   826d6:	46d1      	mov	r9, sl
   826d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   826da:	1c48      	adds	r0, r1, #1
   826dc:	e5b1      	b.n	82242 <_vfiprintf_r+0x75a>
   826de:	9910      	ldr	r1, [sp, #64]	; 0x40
   826e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   826e2:	3101      	adds	r1, #1
   826e4:	4e20      	ldr	r6, [pc, #128]	; (82768 <_vfiprintf_r+0xc80>)
   826e6:	f7ff bb9c 	b.w	81e22 <_vfiprintf_r+0x33a>
   826ea:	2c06      	cmp	r4, #6
   826ec:	bf28      	it	cs
   826ee:	2406      	movcs	r4, #6
   826f0:	9507      	str	r5, [sp, #28]
   826f2:	9405      	str	r4, [sp, #20]
   826f4:	9401      	str	r4, [sp, #4]
   826f6:	f8df b074 	ldr.w	fp, [pc, #116]	; 8276c <_vfiprintf_r+0xc84>
   826fa:	e4e3      	b.n	820c4 <_vfiprintf_r+0x5dc>
   826fc:	9810      	ldr	r0, [sp, #64]	; 0x40
   826fe:	4e1a      	ldr	r6, [pc, #104]	; (82768 <_vfiprintf_r+0xc80>)
   82700:	3001      	adds	r0, #1
   82702:	e60e      	b.n	82322 <_vfiprintf_r+0x83a>
   82704:	4686      	mov	lr, r0
   82706:	4d17      	ldr	r5, [pc, #92]	; (82764 <_vfiprintf_r+0xc7c>)
   82708:	f7ff bbe2 	b.w	81ed0 <_vfiprintf_r+0x3e8>
   8270c:	9405      	str	r4, [sp, #20]
   8270e:	9507      	str	r5, [sp, #28]
   82710:	9302      	str	r3, [sp, #8]
   82712:	4604      	mov	r4, r0
   82714:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82718:	f7ff bb3e 	b.w	81d98 <_vfiprintf_r+0x2b0>
   8271c:	9806      	ldr	r0, [sp, #24]
   8271e:	aa0f      	add	r2, sp, #60	; 0x3c
   82720:	4659      	mov	r1, fp
   82722:	f7ff f9a1 	bl	81a68 <__sprint_r.part.0>
   82726:	2800      	cmp	r0, #0
   82728:	f43f ae2e 	beq.w	82388 <_vfiprintf_r+0x8a0>
   8272c:	e62e      	b.n	8238c <_vfiprintf_r+0x8a4>
   8272e:	9907      	ldr	r1, [sp, #28]
   82730:	f898 2001 	ldrb.w	r2, [r8, #1]
   82734:	680c      	ldr	r4, [r1, #0]
   82736:	3104      	adds	r1, #4
   82738:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   8273c:	46b8      	mov	r8, r7
   8273e:	9107      	str	r1, [sp, #28]
   82740:	f7ff ba44 	b.w	81bcc <_vfiprintf_r+0xe4>
   82744:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82748:	e4a7      	b.n	8209a <_vfiprintf_r+0x5b2>
   8274a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8274e:	e521      	b.n	82194 <_vfiprintf_r+0x6ac>
   82750:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82754:	e47c      	b.n	82050 <_vfiprintf_r+0x568>
   82756:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8275a:	e43f      	b.n	81fdc <_vfiprintf_r+0x4f4>
   8275c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82760:	f7ff bbfa 	b.w	81f58 <_vfiprintf_r+0x470>
   82764:	000846e0 	.word	0x000846e0
   82768:	000846d0 	.word	0x000846d0
   8276c:	000846c8 	.word	0x000846c8

00082770 <__sbprintf>:
   82770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82774:	460c      	mov	r4, r1
   82776:	f04f 0e00 	mov.w	lr, #0
   8277a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8277e:	4606      	mov	r6, r0
   82780:	4617      	mov	r7, r2
   82782:	4698      	mov	r8, r3
   82784:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82786:	89e3      	ldrh	r3, [r4, #14]
   82788:	8989      	ldrh	r1, [r1, #12]
   8278a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8278e:	f021 0102 	bic.w	r1, r1, #2
   82792:	9219      	str	r2, [sp, #100]	; 0x64
   82794:	f8ad 300e 	strh.w	r3, [sp, #14]
   82798:	69e2      	ldr	r2, [r4, #28]
   8279a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8279c:	f8ad 100c 	strh.w	r1, [sp, #12]
   827a0:	a816      	add	r0, sp, #88	; 0x58
   827a2:	a91a      	add	r1, sp, #104	; 0x68
   827a4:	f8cd e018 	str.w	lr, [sp, #24]
   827a8:	9207      	str	r2, [sp, #28]
   827aa:	9309      	str	r3, [sp, #36]	; 0x24
   827ac:	9100      	str	r1, [sp, #0]
   827ae:	9104      	str	r1, [sp, #16]
   827b0:	9502      	str	r5, [sp, #8]
   827b2:	9505      	str	r5, [sp, #20]
   827b4:	f000 fd44 	bl	83240 <__retarget_lock_init_recursive>
   827b8:	4643      	mov	r3, r8
   827ba:	463a      	mov	r2, r7
   827bc:	4669      	mov	r1, sp
   827be:	4630      	mov	r0, r6
   827c0:	f7ff f992 	bl	81ae8 <_vfiprintf_r>
   827c4:	1e05      	subs	r5, r0, #0
   827c6:	db07      	blt.n	827d8 <__sbprintf+0x68>
   827c8:	4630      	mov	r0, r6
   827ca:	4669      	mov	r1, sp
   827cc:	f000 f924 	bl	82a18 <_fflush_r>
   827d0:	2800      	cmp	r0, #0
   827d2:	bf18      	it	ne
   827d4:	f04f 35ff 	movne.w	r5, #4294967295
   827d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   827dc:	065b      	lsls	r3, r3, #25
   827de:	d503      	bpl.n	827e8 <__sbprintf+0x78>
   827e0:	89a3      	ldrh	r3, [r4, #12]
   827e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   827e6:	81a3      	strh	r3, [r4, #12]
   827e8:	9816      	ldr	r0, [sp, #88]	; 0x58
   827ea:	f000 fd2b 	bl	83244 <__retarget_lock_close_recursive>
   827ee:	4628      	mov	r0, r5
   827f0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   827f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000827f8 <__swsetup_r>:
   827f8:	b538      	push	{r3, r4, r5, lr}
   827fa:	4b30      	ldr	r3, [pc, #192]	; (828bc <__swsetup_r+0xc4>)
   827fc:	4605      	mov	r5, r0
   827fe:	6818      	ldr	r0, [r3, #0]
   82800:	460c      	mov	r4, r1
   82802:	b110      	cbz	r0, 8280a <__swsetup_r+0x12>
   82804:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82806:	2b00      	cmp	r3, #0
   82808:	d038      	beq.n	8287c <__swsetup_r+0x84>
   8280a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8280e:	b293      	uxth	r3, r2
   82810:	0718      	lsls	r0, r3, #28
   82812:	d50c      	bpl.n	8282e <__swsetup_r+0x36>
   82814:	6920      	ldr	r0, [r4, #16]
   82816:	b1a8      	cbz	r0, 82844 <__swsetup_r+0x4c>
   82818:	f013 0201 	ands.w	r2, r3, #1
   8281c:	d01e      	beq.n	8285c <__swsetup_r+0x64>
   8281e:	2200      	movs	r2, #0
   82820:	6963      	ldr	r3, [r4, #20]
   82822:	60a2      	str	r2, [r4, #8]
   82824:	425b      	negs	r3, r3
   82826:	61a3      	str	r3, [r4, #24]
   82828:	b1f0      	cbz	r0, 82868 <__swsetup_r+0x70>
   8282a:	2000      	movs	r0, #0
   8282c:	bd38      	pop	{r3, r4, r5, pc}
   8282e:	06d9      	lsls	r1, r3, #27
   82830:	d53b      	bpl.n	828aa <__swsetup_r+0xb2>
   82832:	0758      	lsls	r0, r3, #29
   82834:	d425      	bmi.n	82882 <__swsetup_r+0x8a>
   82836:	6920      	ldr	r0, [r4, #16]
   82838:	f042 0308 	orr.w	r3, r2, #8
   8283c:	81a3      	strh	r3, [r4, #12]
   8283e:	b29b      	uxth	r3, r3
   82840:	2800      	cmp	r0, #0
   82842:	d1e9      	bne.n	82818 <__swsetup_r+0x20>
   82844:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82848:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8284c:	d0e4      	beq.n	82818 <__swsetup_r+0x20>
   8284e:	4628      	mov	r0, r5
   82850:	4621      	mov	r1, r4
   82852:	f000 fd2b 	bl	832ac <__smakebuf_r>
   82856:	89a3      	ldrh	r3, [r4, #12]
   82858:	6920      	ldr	r0, [r4, #16]
   8285a:	e7dd      	b.n	82818 <__swsetup_r+0x20>
   8285c:	0799      	lsls	r1, r3, #30
   8285e:	bf58      	it	pl
   82860:	6962      	ldrpl	r2, [r4, #20]
   82862:	60a2      	str	r2, [r4, #8]
   82864:	2800      	cmp	r0, #0
   82866:	d1e0      	bne.n	8282a <__swsetup_r+0x32>
   82868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8286c:	061a      	lsls	r2, r3, #24
   8286e:	d5dd      	bpl.n	8282c <__swsetup_r+0x34>
   82870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82874:	81a3      	strh	r3, [r4, #12]
   82876:	f04f 30ff 	mov.w	r0, #4294967295
   8287a:	bd38      	pop	{r3, r4, r5, pc}
   8287c:	f000 f924 	bl	82ac8 <__sinit>
   82880:	e7c3      	b.n	8280a <__swsetup_r+0x12>
   82882:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82884:	b151      	cbz	r1, 8289c <__swsetup_r+0xa4>
   82886:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8288a:	4299      	cmp	r1, r3
   8288c:	d004      	beq.n	82898 <__swsetup_r+0xa0>
   8288e:	4628      	mov	r0, r5
   82890:	f000 fa40 	bl	82d14 <_free_r>
   82894:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82898:	2300      	movs	r3, #0
   8289a:	6323      	str	r3, [r4, #48]	; 0x30
   8289c:	2300      	movs	r3, #0
   8289e:	6920      	ldr	r0, [r4, #16]
   828a0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   828a4:	e884 0009 	stmia.w	r4, {r0, r3}
   828a8:	e7c6      	b.n	82838 <__swsetup_r+0x40>
   828aa:	2309      	movs	r3, #9
   828ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   828b0:	602b      	str	r3, [r5, #0]
   828b2:	f04f 30ff 	mov.w	r0, #4294967295
   828b6:	81a2      	strh	r2, [r4, #12]
   828b8:	bd38      	pop	{r3, r4, r5, pc}
   828ba:	bf00      	nop
   828bc:	20070134 	.word	0x20070134

000828c0 <register_fini>:
   828c0:	4b02      	ldr	r3, [pc, #8]	; (828cc <register_fini+0xc>)
   828c2:	b113      	cbz	r3, 828ca <register_fini+0xa>
   828c4:	4802      	ldr	r0, [pc, #8]	; (828d0 <register_fini+0x10>)
   828c6:	f000 b805 	b.w	828d4 <atexit>
   828ca:	4770      	bx	lr
   828cc:	00000000 	.word	0x00000000
   828d0:	00082b41 	.word	0x00082b41

000828d4 <atexit>:
   828d4:	2300      	movs	r3, #0
   828d6:	4601      	mov	r1, r0
   828d8:	461a      	mov	r2, r3
   828da:	4618      	mov	r0, r3
   828dc:	f001 bbcc 	b.w	84078 <__register_exitproc>

000828e0 <__sflush_r>:
   828e0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   828e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828e8:	b29a      	uxth	r2, r3
   828ea:	460d      	mov	r5, r1
   828ec:	0711      	lsls	r1, r2, #28
   828ee:	4680      	mov	r8, r0
   828f0:	d43a      	bmi.n	82968 <__sflush_r+0x88>
   828f2:	686a      	ldr	r2, [r5, #4]
   828f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   828f8:	2a00      	cmp	r2, #0
   828fa:	81ab      	strh	r3, [r5, #12]
   828fc:	dd70      	ble.n	829e0 <__sflush_r+0x100>
   828fe:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82900:	2c00      	cmp	r4, #0
   82902:	d04a      	beq.n	8299a <__sflush_r+0xba>
   82904:	2200      	movs	r2, #0
   82906:	b29b      	uxth	r3, r3
   82908:	f8d8 6000 	ldr.w	r6, [r8]
   8290c:	f8c8 2000 	str.w	r2, [r8]
   82910:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82914:	d068      	beq.n	829e8 <__sflush_r+0x108>
   82916:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82918:	075f      	lsls	r7, r3, #29
   8291a:	d505      	bpl.n	82928 <__sflush_r+0x48>
   8291c:	6869      	ldr	r1, [r5, #4]
   8291e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82920:	1a52      	subs	r2, r2, r1
   82922:	b10b      	cbz	r3, 82928 <__sflush_r+0x48>
   82924:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82926:	1ad2      	subs	r2, r2, r3
   82928:	2300      	movs	r3, #0
   8292a:	69e9      	ldr	r1, [r5, #28]
   8292c:	4640      	mov	r0, r8
   8292e:	47a0      	blx	r4
   82930:	1c44      	adds	r4, r0, #1
   82932:	d03d      	beq.n	829b0 <__sflush_r+0xd0>
   82934:	2100      	movs	r1, #0
   82936:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8293a:	692a      	ldr	r2, [r5, #16]
   8293c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82940:	81ab      	strh	r3, [r5, #12]
   82942:	04db      	lsls	r3, r3, #19
   82944:	6069      	str	r1, [r5, #4]
   82946:	602a      	str	r2, [r5, #0]
   82948:	d448      	bmi.n	829dc <__sflush_r+0xfc>
   8294a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8294c:	f8c8 6000 	str.w	r6, [r8]
   82950:	b319      	cbz	r1, 8299a <__sflush_r+0xba>
   82952:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82956:	4299      	cmp	r1, r3
   82958:	d002      	beq.n	82960 <__sflush_r+0x80>
   8295a:	4640      	mov	r0, r8
   8295c:	f000 f9da 	bl	82d14 <_free_r>
   82960:	2000      	movs	r0, #0
   82962:	6328      	str	r0, [r5, #48]	; 0x30
   82964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82968:	692e      	ldr	r6, [r5, #16]
   8296a:	b1b6      	cbz	r6, 8299a <__sflush_r+0xba>
   8296c:	0791      	lsls	r1, r2, #30
   8296e:	bf18      	it	ne
   82970:	2300      	movne	r3, #0
   82972:	682c      	ldr	r4, [r5, #0]
   82974:	bf08      	it	eq
   82976:	696b      	ldreq	r3, [r5, #20]
   82978:	602e      	str	r6, [r5, #0]
   8297a:	1ba4      	subs	r4, r4, r6
   8297c:	60ab      	str	r3, [r5, #8]
   8297e:	e00a      	b.n	82996 <__sflush_r+0xb6>
   82980:	4623      	mov	r3, r4
   82982:	4632      	mov	r2, r6
   82984:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82986:	69e9      	ldr	r1, [r5, #28]
   82988:	4640      	mov	r0, r8
   8298a:	47b8      	blx	r7
   8298c:	2800      	cmp	r0, #0
   8298e:	eba4 0400 	sub.w	r4, r4, r0
   82992:	4406      	add	r6, r0
   82994:	dd04      	ble.n	829a0 <__sflush_r+0xc0>
   82996:	2c00      	cmp	r4, #0
   82998:	dcf2      	bgt.n	82980 <__sflush_r+0xa0>
   8299a:	2000      	movs	r0, #0
   8299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   829a0:	89ab      	ldrh	r3, [r5, #12]
   829a2:	f04f 30ff 	mov.w	r0, #4294967295
   829a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   829aa:	81ab      	strh	r3, [r5, #12]
   829ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   829b0:	f8d8 4000 	ldr.w	r4, [r8]
   829b4:	2c1d      	cmp	r4, #29
   829b6:	d8f3      	bhi.n	829a0 <__sflush_r+0xc0>
   829b8:	4b16      	ldr	r3, [pc, #88]	; (82a14 <__sflush_r+0x134>)
   829ba:	40e3      	lsrs	r3, r4
   829bc:	43db      	mvns	r3, r3
   829be:	f013 0301 	ands.w	r3, r3, #1
   829c2:	d1ed      	bne.n	829a0 <__sflush_r+0xc0>
   829c4:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   829c8:	6929      	ldr	r1, [r5, #16]
   829ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   829ce:	81aa      	strh	r2, [r5, #12]
   829d0:	04d2      	lsls	r2, r2, #19
   829d2:	606b      	str	r3, [r5, #4]
   829d4:	6029      	str	r1, [r5, #0]
   829d6:	d5b8      	bpl.n	8294a <__sflush_r+0x6a>
   829d8:	2c00      	cmp	r4, #0
   829da:	d1b6      	bne.n	8294a <__sflush_r+0x6a>
   829dc:	6528      	str	r0, [r5, #80]	; 0x50
   829de:	e7b4      	b.n	8294a <__sflush_r+0x6a>
   829e0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   829e2:	2a00      	cmp	r2, #0
   829e4:	dc8b      	bgt.n	828fe <__sflush_r+0x1e>
   829e6:	e7d8      	b.n	8299a <__sflush_r+0xba>
   829e8:	2301      	movs	r3, #1
   829ea:	69e9      	ldr	r1, [r5, #28]
   829ec:	4640      	mov	r0, r8
   829ee:	47a0      	blx	r4
   829f0:	1c43      	adds	r3, r0, #1
   829f2:	4602      	mov	r2, r0
   829f4:	d002      	beq.n	829fc <__sflush_r+0x11c>
   829f6:	89ab      	ldrh	r3, [r5, #12]
   829f8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   829fa:	e78d      	b.n	82918 <__sflush_r+0x38>
   829fc:	f8d8 3000 	ldr.w	r3, [r8]
   82a00:	2b00      	cmp	r3, #0
   82a02:	d0f8      	beq.n	829f6 <__sflush_r+0x116>
   82a04:	2b1d      	cmp	r3, #29
   82a06:	d001      	beq.n	82a0c <__sflush_r+0x12c>
   82a08:	2b16      	cmp	r3, #22
   82a0a:	d1c9      	bne.n	829a0 <__sflush_r+0xc0>
   82a0c:	f8c8 6000 	str.w	r6, [r8]
   82a10:	e7c3      	b.n	8299a <__sflush_r+0xba>
   82a12:	bf00      	nop
   82a14:	20400001 	.word	0x20400001

00082a18 <_fflush_r>:
   82a18:	b538      	push	{r3, r4, r5, lr}
   82a1a:	460d      	mov	r5, r1
   82a1c:	4604      	mov	r4, r0
   82a1e:	b108      	cbz	r0, 82a24 <_fflush_r+0xc>
   82a20:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82a22:	b1bb      	cbz	r3, 82a54 <_fflush_r+0x3c>
   82a24:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82a28:	b188      	cbz	r0, 82a4e <_fflush_r+0x36>
   82a2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82a2c:	07db      	lsls	r3, r3, #31
   82a2e:	d401      	bmi.n	82a34 <_fflush_r+0x1c>
   82a30:	0581      	lsls	r1, r0, #22
   82a32:	d517      	bpl.n	82a64 <_fflush_r+0x4c>
   82a34:	4620      	mov	r0, r4
   82a36:	4629      	mov	r1, r5
   82a38:	f7ff ff52 	bl	828e0 <__sflush_r>
   82a3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82a3e:	4604      	mov	r4, r0
   82a40:	07da      	lsls	r2, r3, #31
   82a42:	d402      	bmi.n	82a4a <_fflush_r+0x32>
   82a44:	89ab      	ldrh	r3, [r5, #12]
   82a46:	059b      	lsls	r3, r3, #22
   82a48:	d507      	bpl.n	82a5a <_fflush_r+0x42>
   82a4a:	4620      	mov	r0, r4
   82a4c:	bd38      	pop	{r3, r4, r5, pc}
   82a4e:	4604      	mov	r4, r0
   82a50:	4620      	mov	r0, r4
   82a52:	bd38      	pop	{r3, r4, r5, pc}
   82a54:	f000 f838 	bl	82ac8 <__sinit>
   82a58:	e7e4      	b.n	82a24 <_fflush_r+0xc>
   82a5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82a5c:	f000 fbf6 	bl	8324c <__retarget_lock_release_recursive>
   82a60:	4620      	mov	r0, r4
   82a62:	bd38      	pop	{r3, r4, r5, pc}
   82a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82a66:	f000 fbef 	bl	83248 <__retarget_lock_acquire_recursive>
   82a6a:	e7e3      	b.n	82a34 <_fflush_r+0x1c>

00082a6c <_cleanup_r>:
   82a6c:	4901      	ldr	r1, [pc, #4]	; (82a74 <_cleanup_r+0x8>)
   82a6e:	f000 bbb1 	b.w	831d4 <_fwalk_reent>
   82a72:	bf00      	nop
   82a74:	00084161 	.word	0x00084161

00082a78 <std.isra.0>:
   82a78:	2300      	movs	r3, #0
   82a7a:	b510      	push	{r4, lr}
   82a7c:	4604      	mov	r4, r0
   82a7e:	8181      	strh	r1, [r0, #12]
   82a80:	81c2      	strh	r2, [r0, #14]
   82a82:	6003      	str	r3, [r0, #0]
   82a84:	6043      	str	r3, [r0, #4]
   82a86:	6083      	str	r3, [r0, #8]
   82a88:	6643      	str	r3, [r0, #100]	; 0x64
   82a8a:	6103      	str	r3, [r0, #16]
   82a8c:	6143      	str	r3, [r0, #20]
   82a8e:	6183      	str	r3, [r0, #24]
   82a90:	4619      	mov	r1, r3
   82a92:	2208      	movs	r2, #8
   82a94:	305c      	adds	r0, #92	; 0x5c
   82a96:	f7fe fe45 	bl	81724 <memset>
   82a9a:	4807      	ldr	r0, [pc, #28]	; (82ab8 <std.isra.0+0x40>)
   82a9c:	4907      	ldr	r1, [pc, #28]	; (82abc <std.isra.0+0x44>)
   82a9e:	4a08      	ldr	r2, [pc, #32]	; (82ac0 <std.isra.0+0x48>)
   82aa0:	4b08      	ldr	r3, [pc, #32]	; (82ac4 <std.isra.0+0x4c>)
   82aa2:	6220      	str	r0, [r4, #32]
   82aa4:	61e4      	str	r4, [r4, #28]
   82aa6:	6261      	str	r1, [r4, #36]	; 0x24
   82aa8:	62a2      	str	r2, [r4, #40]	; 0x28
   82aaa:	62e3      	str	r3, [r4, #44]	; 0x2c
   82aac:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82ab4:	f000 bbc4 	b.w	83240 <__retarget_lock_init_recursive>
   82ab8:	00083ea9 	.word	0x00083ea9
   82abc:	00083ecd 	.word	0x00083ecd
   82ac0:	00083f09 	.word	0x00083f09
   82ac4:	00083f29 	.word	0x00083f29

00082ac8 <__sinit>:
   82ac8:	b510      	push	{r4, lr}
   82aca:	4604      	mov	r4, r0
   82acc:	4814      	ldr	r0, [pc, #80]	; (82b20 <__sinit+0x58>)
   82ace:	f000 fbbb 	bl	83248 <__retarget_lock_acquire_recursive>
   82ad2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82ad4:	b9fa      	cbnz	r2, 82b16 <__sinit+0x4e>
   82ad6:	2003      	movs	r0, #3
   82ad8:	4912      	ldr	r1, [pc, #72]	; (82b24 <__sinit+0x5c>)
   82ada:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   82ade:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   82ae2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82ae6:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82aea:	63e1      	str	r1, [r4, #60]	; 0x3c
   82aec:	6860      	ldr	r0, [r4, #4]
   82aee:	2104      	movs	r1, #4
   82af0:	f7ff ffc2 	bl	82a78 <std.isra.0>
   82af4:	68a0      	ldr	r0, [r4, #8]
   82af6:	2201      	movs	r2, #1
   82af8:	2109      	movs	r1, #9
   82afa:	f7ff ffbd 	bl	82a78 <std.isra.0>
   82afe:	68e0      	ldr	r0, [r4, #12]
   82b00:	2202      	movs	r2, #2
   82b02:	2112      	movs	r1, #18
   82b04:	f7ff ffb8 	bl	82a78 <std.isra.0>
   82b08:	2301      	movs	r3, #1
   82b0a:	4805      	ldr	r0, [pc, #20]	; (82b20 <__sinit+0x58>)
   82b0c:	63a3      	str	r3, [r4, #56]	; 0x38
   82b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82b12:	f000 bb9b 	b.w	8324c <__retarget_lock_release_recursive>
   82b16:	4802      	ldr	r0, [pc, #8]	; (82b20 <__sinit+0x58>)
   82b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82b1c:	f000 bb96 	b.w	8324c <__retarget_lock_release_recursive>
   82b20:	20071c70 	.word	0x20071c70
   82b24:	00082a6d 	.word	0x00082a6d

00082b28 <__sfp_lock_acquire>:
   82b28:	4801      	ldr	r0, [pc, #4]	; (82b30 <__sfp_lock_acquire+0x8>)
   82b2a:	f000 bb8d 	b.w	83248 <__retarget_lock_acquire_recursive>
   82b2e:	bf00      	nop
   82b30:	20071c84 	.word	0x20071c84

00082b34 <__sfp_lock_release>:
   82b34:	4801      	ldr	r0, [pc, #4]	; (82b3c <__sfp_lock_release+0x8>)
   82b36:	f000 bb89 	b.w	8324c <__retarget_lock_release_recursive>
   82b3a:	bf00      	nop
   82b3c:	20071c84 	.word	0x20071c84

00082b40 <__libc_fini_array>:
   82b40:	b538      	push	{r3, r4, r5, lr}
   82b42:	4c0a      	ldr	r4, [pc, #40]	; (82b6c <__libc_fini_array+0x2c>)
   82b44:	4d0a      	ldr	r5, [pc, #40]	; (82b70 <__libc_fini_array+0x30>)
   82b46:	1b64      	subs	r4, r4, r5
   82b48:	10a4      	asrs	r4, r4, #2
   82b4a:	d00a      	beq.n	82b62 <__libc_fini_array+0x22>
   82b4c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82b50:	3b01      	subs	r3, #1
   82b52:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82b56:	3c01      	subs	r4, #1
   82b58:	f855 3904 	ldr.w	r3, [r5], #-4
   82b5c:	4798      	blx	r3
   82b5e:	2c00      	cmp	r4, #0
   82b60:	d1f9      	bne.n	82b56 <__libc_fini_array+0x16>
   82b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82b66:	f001 be57 	b.w	84818 <_fini>
   82b6a:	bf00      	nop
   82b6c:	00084828 	.word	0x00084828
   82b70:	00084824 	.word	0x00084824

00082b74 <__fputwc>:
   82b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82b78:	b083      	sub	sp, #12
   82b7a:	4607      	mov	r7, r0
   82b7c:	4688      	mov	r8, r1
   82b7e:	4614      	mov	r4, r2
   82b80:	f000 fb50 	bl	83224 <__locale_mb_cur_max>
   82b84:	2801      	cmp	r0, #1
   82b86:	d033      	beq.n	82bf0 <__fputwc+0x7c>
   82b88:	4642      	mov	r2, r8
   82b8a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82b8e:	a901      	add	r1, sp, #4
   82b90:	4638      	mov	r0, r7
   82b92:	f001 fa25 	bl	83fe0 <_wcrtomb_r>
   82b96:	1c42      	adds	r2, r0, #1
   82b98:	4606      	mov	r6, r0
   82b9a:	d022      	beq.n	82be2 <__fputwc+0x6e>
   82b9c:	b390      	cbz	r0, 82c04 <__fputwc+0x90>
   82b9e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82ba2:	2500      	movs	r5, #0
   82ba4:	f10d 0904 	add.w	r9, sp, #4
   82ba8:	e008      	b.n	82bbc <__fputwc+0x48>
   82baa:	6823      	ldr	r3, [r4, #0]
   82bac:	1c5a      	adds	r2, r3, #1
   82bae:	6022      	str	r2, [r4, #0]
   82bb0:	7019      	strb	r1, [r3, #0]
   82bb2:	3501      	adds	r5, #1
   82bb4:	42b5      	cmp	r5, r6
   82bb6:	d225      	bcs.n	82c04 <__fputwc+0x90>
   82bb8:	f815 1009 	ldrb.w	r1, [r5, r9]
   82bbc:	68a3      	ldr	r3, [r4, #8]
   82bbe:	3b01      	subs	r3, #1
   82bc0:	2b00      	cmp	r3, #0
   82bc2:	60a3      	str	r3, [r4, #8]
   82bc4:	daf1      	bge.n	82baa <__fputwc+0x36>
   82bc6:	69a2      	ldr	r2, [r4, #24]
   82bc8:	4293      	cmp	r3, r2
   82bca:	db01      	blt.n	82bd0 <__fputwc+0x5c>
   82bcc:	290a      	cmp	r1, #10
   82bce:	d1ec      	bne.n	82baa <__fputwc+0x36>
   82bd0:	4622      	mov	r2, r4
   82bd2:	4638      	mov	r0, r7
   82bd4:	f001 f9ac 	bl	83f30 <__swbuf_r>
   82bd8:	1c43      	adds	r3, r0, #1
   82bda:	d1ea      	bne.n	82bb2 <__fputwc+0x3e>
   82bdc:	b003      	add	sp, #12
   82bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82be2:	89a3      	ldrh	r3, [r4, #12]
   82be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82be8:	81a3      	strh	r3, [r4, #12]
   82bea:	b003      	add	sp, #12
   82bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82bf0:	f108 33ff 	add.w	r3, r8, #4294967295
   82bf4:	2bfe      	cmp	r3, #254	; 0xfe
   82bf6:	d8c7      	bhi.n	82b88 <__fputwc+0x14>
   82bf8:	fa5f f188 	uxtb.w	r1, r8
   82bfc:	4606      	mov	r6, r0
   82bfe:	f88d 1004 	strb.w	r1, [sp, #4]
   82c02:	e7ce      	b.n	82ba2 <__fputwc+0x2e>
   82c04:	4640      	mov	r0, r8
   82c06:	b003      	add	sp, #12
   82c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00082c0c <_fputwc_r>:
   82c0c:	b530      	push	{r4, r5, lr}
   82c0e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82c10:	4614      	mov	r4, r2
   82c12:	f013 0f01 	tst.w	r3, #1
   82c16:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   82c1a:	b083      	sub	sp, #12
   82c1c:	4605      	mov	r5, r0
   82c1e:	b29a      	uxth	r2, r3
   82c20:	d101      	bne.n	82c26 <_fputwc_r+0x1a>
   82c22:	0590      	lsls	r0, r2, #22
   82c24:	d51c      	bpl.n	82c60 <_fputwc_r+0x54>
   82c26:	0490      	lsls	r0, r2, #18
   82c28:	d406      	bmi.n	82c38 <_fputwc_r+0x2c>
   82c2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82c34:	81a3      	strh	r3, [r4, #12]
   82c36:	6662      	str	r2, [r4, #100]	; 0x64
   82c38:	4628      	mov	r0, r5
   82c3a:	4622      	mov	r2, r4
   82c3c:	f7ff ff9a 	bl	82b74 <__fputwc>
   82c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82c42:	4605      	mov	r5, r0
   82c44:	07da      	lsls	r2, r3, #31
   82c46:	d402      	bmi.n	82c4e <_fputwc_r+0x42>
   82c48:	89a3      	ldrh	r3, [r4, #12]
   82c4a:	059b      	lsls	r3, r3, #22
   82c4c:	d502      	bpl.n	82c54 <_fputwc_r+0x48>
   82c4e:	4628      	mov	r0, r5
   82c50:	b003      	add	sp, #12
   82c52:	bd30      	pop	{r4, r5, pc}
   82c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82c56:	f000 faf9 	bl	8324c <__retarget_lock_release_recursive>
   82c5a:	4628      	mov	r0, r5
   82c5c:	b003      	add	sp, #12
   82c5e:	bd30      	pop	{r4, r5, pc}
   82c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82c62:	9101      	str	r1, [sp, #4]
   82c64:	f000 faf0 	bl	83248 <__retarget_lock_acquire_recursive>
   82c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c6c:	9901      	ldr	r1, [sp, #4]
   82c6e:	b29a      	uxth	r2, r3
   82c70:	e7d9      	b.n	82c26 <_fputwc_r+0x1a>
   82c72:	bf00      	nop

00082c74 <_malloc_trim_r>:
   82c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82c76:	460c      	mov	r4, r1
   82c78:	4f23      	ldr	r7, [pc, #140]	; (82d08 <_malloc_trim_r+0x94>)
   82c7a:	4606      	mov	r6, r0
   82c7c:	f000 ff40 	bl	83b00 <__malloc_lock>
   82c80:	68bb      	ldr	r3, [r7, #8]
   82c82:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82c86:	685d      	ldr	r5, [r3, #4]
   82c88:	310f      	adds	r1, #15
   82c8a:	f025 0503 	bic.w	r5, r5, #3
   82c8e:	4429      	add	r1, r5
   82c90:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82c94:	f021 010f 	bic.w	r1, r1, #15
   82c98:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82c9c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82ca0:	db07      	blt.n	82cb2 <_malloc_trim_r+0x3e>
   82ca2:	2100      	movs	r1, #0
   82ca4:	4630      	mov	r0, r6
   82ca6:	f001 f8ed 	bl	83e84 <_sbrk_r>
   82caa:	68bb      	ldr	r3, [r7, #8]
   82cac:	442b      	add	r3, r5
   82cae:	4298      	cmp	r0, r3
   82cb0:	d004      	beq.n	82cbc <_malloc_trim_r+0x48>
   82cb2:	4630      	mov	r0, r6
   82cb4:	f000 ff2a 	bl	83b0c <__malloc_unlock>
   82cb8:	2000      	movs	r0, #0
   82cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82cbc:	4261      	negs	r1, r4
   82cbe:	4630      	mov	r0, r6
   82cc0:	f001 f8e0 	bl	83e84 <_sbrk_r>
   82cc4:	3001      	adds	r0, #1
   82cc6:	d00d      	beq.n	82ce4 <_malloc_trim_r+0x70>
   82cc8:	4b10      	ldr	r3, [pc, #64]	; (82d0c <_malloc_trim_r+0x98>)
   82cca:	68ba      	ldr	r2, [r7, #8]
   82ccc:	6819      	ldr	r1, [r3, #0]
   82cce:	1b2d      	subs	r5, r5, r4
   82cd0:	f045 0501 	orr.w	r5, r5, #1
   82cd4:	4630      	mov	r0, r6
   82cd6:	1b09      	subs	r1, r1, r4
   82cd8:	6055      	str	r5, [r2, #4]
   82cda:	6019      	str	r1, [r3, #0]
   82cdc:	f000 ff16 	bl	83b0c <__malloc_unlock>
   82ce0:	2001      	movs	r0, #1
   82ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ce4:	2100      	movs	r1, #0
   82ce6:	4630      	mov	r0, r6
   82ce8:	f001 f8cc 	bl	83e84 <_sbrk_r>
   82cec:	68ba      	ldr	r2, [r7, #8]
   82cee:	1a83      	subs	r3, r0, r2
   82cf0:	2b0f      	cmp	r3, #15
   82cf2:	ddde      	ble.n	82cb2 <_malloc_trim_r+0x3e>
   82cf4:	4c06      	ldr	r4, [pc, #24]	; (82d10 <_malloc_trim_r+0x9c>)
   82cf6:	4905      	ldr	r1, [pc, #20]	; (82d0c <_malloc_trim_r+0x98>)
   82cf8:	6824      	ldr	r4, [r4, #0]
   82cfa:	f043 0301 	orr.w	r3, r3, #1
   82cfe:	1b00      	subs	r0, r0, r4
   82d00:	6053      	str	r3, [r2, #4]
   82d02:	6008      	str	r0, [r1, #0]
   82d04:	e7d5      	b.n	82cb2 <_malloc_trim_r+0x3e>
   82d06:	bf00      	nop
   82d08:	200706d0 	.word	0x200706d0
   82d0c:	20070c24 	.word	0x20070c24
   82d10:	20070ad8 	.word	0x20070ad8

00082d14 <_free_r>:
   82d14:	2900      	cmp	r1, #0
   82d16:	d044      	beq.n	82da2 <_free_r+0x8e>
   82d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82d1c:	460d      	mov	r5, r1
   82d1e:	4680      	mov	r8, r0
   82d20:	f000 feee 	bl	83b00 <__malloc_lock>
   82d24:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82d28:	4969      	ldr	r1, [pc, #420]	; (82ed0 <_free_r+0x1bc>)
   82d2a:	f1a5 0408 	sub.w	r4, r5, #8
   82d2e:	f027 0301 	bic.w	r3, r7, #1
   82d32:	18e2      	adds	r2, r4, r3
   82d34:	688e      	ldr	r6, [r1, #8]
   82d36:	6850      	ldr	r0, [r2, #4]
   82d38:	42b2      	cmp	r2, r6
   82d3a:	f020 0003 	bic.w	r0, r0, #3
   82d3e:	d05e      	beq.n	82dfe <_free_r+0xea>
   82d40:	07fe      	lsls	r6, r7, #31
   82d42:	6050      	str	r0, [r2, #4]
   82d44:	d40b      	bmi.n	82d5e <_free_r+0x4a>
   82d46:	f855 7c08 	ldr.w	r7, [r5, #-8]
   82d4a:	f101 0e08 	add.w	lr, r1, #8
   82d4e:	1be4      	subs	r4, r4, r7
   82d50:	68a5      	ldr	r5, [r4, #8]
   82d52:	443b      	add	r3, r7
   82d54:	4575      	cmp	r5, lr
   82d56:	d06d      	beq.n	82e34 <_free_r+0x120>
   82d58:	68e7      	ldr	r7, [r4, #12]
   82d5a:	60ef      	str	r7, [r5, #12]
   82d5c:	60bd      	str	r5, [r7, #8]
   82d5e:	1815      	adds	r5, r2, r0
   82d60:	686d      	ldr	r5, [r5, #4]
   82d62:	07ed      	lsls	r5, r5, #31
   82d64:	d53e      	bpl.n	82de4 <_free_r+0xd0>
   82d66:	f043 0201 	orr.w	r2, r3, #1
   82d6a:	6062      	str	r2, [r4, #4]
   82d6c:	50e3      	str	r3, [r4, r3]
   82d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82d72:	d217      	bcs.n	82da4 <_free_r+0x90>
   82d74:	2201      	movs	r2, #1
   82d76:	08db      	lsrs	r3, r3, #3
   82d78:	1098      	asrs	r0, r3, #2
   82d7a:	684d      	ldr	r5, [r1, #4]
   82d7c:	4413      	add	r3, r2
   82d7e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82d82:	4082      	lsls	r2, r0
   82d84:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82d88:	432a      	orrs	r2, r5
   82d8a:	3808      	subs	r0, #8
   82d8c:	60e0      	str	r0, [r4, #12]
   82d8e:	60a7      	str	r7, [r4, #8]
   82d90:	604a      	str	r2, [r1, #4]
   82d92:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82d96:	60fc      	str	r4, [r7, #12]
   82d98:	4640      	mov	r0, r8
   82d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82d9e:	f000 beb5 	b.w	83b0c <__malloc_unlock>
   82da2:	4770      	bx	lr
   82da4:	0a5a      	lsrs	r2, r3, #9
   82da6:	2a04      	cmp	r2, #4
   82da8:	d852      	bhi.n	82e50 <_free_r+0x13c>
   82daa:	099a      	lsrs	r2, r3, #6
   82dac:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82db0:	00ff      	lsls	r7, r7, #3
   82db2:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82db6:	19c8      	adds	r0, r1, r7
   82db8:	59ca      	ldr	r2, [r1, r7]
   82dba:	3808      	subs	r0, #8
   82dbc:	4290      	cmp	r0, r2
   82dbe:	d04f      	beq.n	82e60 <_free_r+0x14c>
   82dc0:	6851      	ldr	r1, [r2, #4]
   82dc2:	f021 0103 	bic.w	r1, r1, #3
   82dc6:	428b      	cmp	r3, r1
   82dc8:	d232      	bcs.n	82e30 <_free_r+0x11c>
   82dca:	6892      	ldr	r2, [r2, #8]
   82dcc:	4290      	cmp	r0, r2
   82dce:	d1f7      	bne.n	82dc0 <_free_r+0xac>
   82dd0:	68c3      	ldr	r3, [r0, #12]
   82dd2:	60a0      	str	r0, [r4, #8]
   82dd4:	60e3      	str	r3, [r4, #12]
   82dd6:	609c      	str	r4, [r3, #8]
   82dd8:	60c4      	str	r4, [r0, #12]
   82dda:	4640      	mov	r0, r8
   82ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82de0:	f000 be94 	b.w	83b0c <__malloc_unlock>
   82de4:	6895      	ldr	r5, [r2, #8]
   82de6:	4f3b      	ldr	r7, [pc, #236]	; (82ed4 <_free_r+0x1c0>)
   82de8:	4403      	add	r3, r0
   82dea:	42bd      	cmp	r5, r7
   82dec:	d040      	beq.n	82e70 <_free_r+0x15c>
   82dee:	68d0      	ldr	r0, [r2, #12]
   82df0:	f043 0201 	orr.w	r2, r3, #1
   82df4:	60e8      	str	r0, [r5, #12]
   82df6:	6085      	str	r5, [r0, #8]
   82df8:	6062      	str	r2, [r4, #4]
   82dfa:	50e3      	str	r3, [r4, r3]
   82dfc:	e7b7      	b.n	82d6e <_free_r+0x5a>
   82dfe:	07ff      	lsls	r7, r7, #31
   82e00:	4403      	add	r3, r0
   82e02:	d407      	bmi.n	82e14 <_free_r+0x100>
   82e04:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82e08:	1b64      	subs	r4, r4, r5
   82e0a:	68e2      	ldr	r2, [r4, #12]
   82e0c:	68a0      	ldr	r0, [r4, #8]
   82e0e:	442b      	add	r3, r5
   82e10:	60c2      	str	r2, [r0, #12]
   82e12:	6090      	str	r0, [r2, #8]
   82e14:	4a30      	ldr	r2, [pc, #192]	; (82ed8 <_free_r+0x1c4>)
   82e16:	f043 0001 	orr.w	r0, r3, #1
   82e1a:	6812      	ldr	r2, [r2, #0]
   82e1c:	6060      	str	r0, [r4, #4]
   82e1e:	4293      	cmp	r3, r2
   82e20:	608c      	str	r4, [r1, #8]
   82e22:	d3b9      	bcc.n	82d98 <_free_r+0x84>
   82e24:	4b2d      	ldr	r3, [pc, #180]	; (82edc <_free_r+0x1c8>)
   82e26:	4640      	mov	r0, r8
   82e28:	6819      	ldr	r1, [r3, #0]
   82e2a:	f7ff ff23 	bl	82c74 <_malloc_trim_r>
   82e2e:	e7b3      	b.n	82d98 <_free_r+0x84>
   82e30:	4610      	mov	r0, r2
   82e32:	e7cd      	b.n	82dd0 <_free_r+0xbc>
   82e34:	1811      	adds	r1, r2, r0
   82e36:	6849      	ldr	r1, [r1, #4]
   82e38:	07c9      	lsls	r1, r1, #31
   82e3a:	d444      	bmi.n	82ec6 <_free_r+0x1b2>
   82e3c:	6891      	ldr	r1, [r2, #8]
   82e3e:	4403      	add	r3, r0
   82e40:	68d2      	ldr	r2, [r2, #12]
   82e42:	f043 0001 	orr.w	r0, r3, #1
   82e46:	60ca      	str	r2, [r1, #12]
   82e48:	6091      	str	r1, [r2, #8]
   82e4a:	6060      	str	r0, [r4, #4]
   82e4c:	50e3      	str	r3, [r4, r3]
   82e4e:	e7a3      	b.n	82d98 <_free_r+0x84>
   82e50:	2a14      	cmp	r2, #20
   82e52:	d816      	bhi.n	82e82 <_free_r+0x16e>
   82e54:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82e58:	00ff      	lsls	r7, r7, #3
   82e5a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82e5e:	e7aa      	b.n	82db6 <_free_r+0xa2>
   82e60:	2301      	movs	r3, #1
   82e62:	10aa      	asrs	r2, r5, #2
   82e64:	684d      	ldr	r5, [r1, #4]
   82e66:	4093      	lsls	r3, r2
   82e68:	432b      	orrs	r3, r5
   82e6a:	604b      	str	r3, [r1, #4]
   82e6c:	4603      	mov	r3, r0
   82e6e:	e7b0      	b.n	82dd2 <_free_r+0xbe>
   82e70:	f043 0201 	orr.w	r2, r3, #1
   82e74:	614c      	str	r4, [r1, #20]
   82e76:	610c      	str	r4, [r1, #16]
   82e78:	60e5      	str	r5, [r4, #12]
   82e7a:	60a5      	str	r5, [r4, #8]
   82e7c:	6062      	str	r2, [r4, #4]
   82e7e:	50e3      	str	r3, [r4, r3]
   82e80:	e78a      	b.n	82d98 <_free_r+0x84>
   82e82:	2a54      	cmp	r2, #84	; 0x54
   82e84:	d806      	bhi.n	82e94 <_free_r+0x180>
   82e86:	0b1a      	lsrs	r2, r3, #12
   82e88:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82e8c:	00ff      	lsls	r7, r7, #3
   82e8e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82e92:	e790      	b.n	82db6 <_free_r+0xa2>
   82e94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82e98:	d806      	bhi.n	82ea8 <_free_r+0x194>
   82e9a:	0bda      	lsrs	r2, r3, #15
   82e9c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82ea0:	00ff      	lsls	r7, r7, #3
   82ea2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82ea6:	e786      	b.n	82db6 <_free_r+0xa2>
   82ea8:	f240 5054 	movw	r0, #1364	; 0x554
   82eac:	4282      	cmp	r2, r0
   82eae:	d806      	bhi.n	82ebe <_free_r+0x1aa>
   82eb0:	0c9a      	lsrs	r2, r3, #18
   82eb2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82eb6:	00ff      	lsls	r7, r7, #3
   82eb8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82ebc:	e77b      	b.n	82db6 <_free_r+0xa2>
   82ebe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82ec2:	257e      	movs	r5, #126	; 0x7e
   82ec4:	e777      	b.n	82db6 <_free_r+0xa2>
   82ec6:	f043 0101 	orr.w	r1, r3, #1
   82eca:	6061      	str	r1, [r4, #4]
   82ecc:	6013      	str	r3, [r2, #0]
   82ece:	e763      	b.n	82d98 <_free_r+0x84>
   82ed0:	200706d0 	.word	0x200706d0
   82ed4:	200706d8 	.word	0x200706d8
   82ed8:	20070adc 	.word	0x20070adc
   82edc:	20070c54 	.word	0x20070c54

00082ee0 <__sfvwrite_r>:
   82ee0:	6893      	ldr	r3, [r2, #8]
   82ee2:	2b00      	cmp	r3, #0
   82ee4:	d071      	beq.n	82fca <__sfvwrite_r+0xea>
   82ee6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82eea:	898b      	ldrh	r3, [r1, #12]
   82eec:	b083      	sub	sp, #12
   82eee:	460c      	mov	r4, r1
   82ef0:	0719      	lsls	r1, r3, #28
   82ef2:	9000      	str	r0, [sp, #0]
   82ef4:	4616      	mov	r6, r2
   82ef6:	d525      	bpl.n	82f44 <__sfvwrite_r+0x64>
   82ef8:	6922      	ldr	r2, [r4, #16]
   82efa:	b31a      	cbz	r2, 82f44 <__sfvwrite_r+0x64>
   82efc:	f013 0002 	ands.w	r0, r3, #2
   82f00:	6835      	ldr	r5, [r6, #0]
   82f02:	d02b      	beq.n	82f5c <__sfvwrite_r+0x7c>
   82f04:	f04f 0900 	mov.w	r9, #0
   82f08:	46b0      	mov	r8, r6
   82f0a:	464f      	mov	r7, r9
   82f0c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 831d0 <__sfvwrite_r+0x2f0>
   82f10:	2f00      	cmp	r7, #0
   82f12:	d055      	beq.n	82fc0 <__sfvwrite_r+0xe0>
   82f14:	4557      	cmp	r7, sl
   82f16:	463b      	mov	r3, r7
   82f18:	464a      	mov	r2, r9
   82f1a:	bf28      	it	cs
   82f1c:	4653      	movcs	r3, sl
   82f1e:	69e1      	ldr	r1, [r4, #28]
   82f20:	9800      	ldr	r0, [sp, #0]
   82f22:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82f24:	47b0      	blx	r6
   82f26:	2800      	cmp	r0, #0
   82f28:	dd56      	ble.n	82fd8 <__sfvwrite_r+0xf8>
   82f2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   82f2e:	4481      	add	r9, r0
   82f30:	1a1b      	subs	r3, r3, r0
   82f32:	1a3f      	subs	r7, r7, r0
   82f34:	f8c8 3008 	str.w	r3, [r8, #8]
   82f38:	2b00      	cmp	r3, #0
   82f3a:	d1e9      	bne.n	82f10 <__sfvwrite_r+0x30>
   82f3c:	2000      	movs	r0, #0
   82f3e:	b003      	add	sp, #12
   82f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f44:	4621      	mov	r1, r4
   82f46:	9800      	ldr	r0, [sp, #0]
   82f48:	f7ff fc56 	bl	827f8 <__swsetup_r>
   82f4c:	2800      	cmp	r0, #0
   82f4e:	f040 8135 	bne.w	831bc <__sfvwrite_r+0x2dc>
   82f52:	89a3      	ldrh	r3, [r4, #12]
   82f54:	6835      	ldr	r5, [r6, #0]
   82f56:	f013 0002 	ands.w	r0, r3, #2
   82f5a:	d1d3      	bne.n	82f04 <__sfvwrite_r+0x24>
   82f5c:	f013 0901 	ands.w	r9, r3, #1
   82f60:	d144      	bne.n	82fec <__sfvwrite_r+0x10c>
   82f62:	464f      	mov	r7, r9
   82f64:	9601      	str	r6, [sp, #4]
   82f66:	b337      	cbz	r7, 82fb6 <__sfvwrite_r+0xd6>
   82f68:	059a      	lsls	r2, r3, #22
   82f6a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82f6e:	f140 8085 	bpl.w	8307c <__sfvwrite_r+0x19c>
   82f72:	4547      	cmp	r7, r8
   82f74:	46c3      	mov	fp, r8
   82f76:	f0c0 80ad 	bcc.w	830d4 <__sfvwrite_r+0x1f4>
   82f7a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82f7e:	f040 80ae 	bne.w	830de <__sfvwrite_r+0x1fe>
   82f82:	46ba      	mov	sl, r7
   82f84:	6820      	ldr	r0, [r4, #0]
   82f86:	465a      	mov	r2, fp
   82f88:	4649      	mov	r1, r9
   82f8a:	f000 fd55 	bl	83a38 <memmove>
   82f8e:	68a2      	ldr	r2, [r4, #8]
   82f90:	6823      	ldr	r3, [r4, #0]
   82f92:	eba2 0208 	sub.w	r2, r2, r8
   82f96:	445b      	add	r3, fp
   82f98:	60a2      	str	r2, [r4, #8]
   82f9a:	6023      	str	r3, [r4, #0]
   82f9c:	9a01      	ldr	r2, [sp, #4]
   82f9e:	44d1      	add	r9, sl
   82fa0:	6893      	ldr	r3, [r2, #8]
   82fa2:	eba7 070a 	sub.w	r7, r7, sl
   82fa6:	eba3 030a 	sub.w	r3, r3, sl
   82faa:	6093      	str	r3, [r2, #8]
   82fac:	2b00      	cmp	r3, #0
   82fae:	d0c5      	beq.n	82f3c <__sfvwrite_r+0x5c>
   82fb0:	89a3      	ldrh	r3, [r4, #12]
   82fb2:	2f00      	cmp	r7, #0
   82fb4:	d1d8      	bne.n	82f68 <__sfvwrite_r+0x88>
   82fb6:	f8d5 9000 	ldr.w	r9, [r5]
   82fba:	686f      	ldr	r7, [r5, #4]
   82fbc:	3508      	adds	r5, #8
   82fbe:	e7d2      	b.n	82f66 <__sfvwrite_r+0x86>
   82fc0:	f8d5 9000 	ldr.w	r9, [r5]
   82fc4:	686f      	ldr	r7, [r5, #4]
   82fc6:	3508      	adds	r5, #8
   82fc8:	e7a2      	b.n	82f10 <__sfvwrite_r+0x30>
   82fca:	2000      	movs	r0, #0
   82fcc:	4770      	bx	lr
   82fce:	4621      	mov	r1, r4
   82fd0:	9800      	ldr	r0, [sp, #0]
   82fd2:	f7ff fd21 	bl	82a18 <_fflush_r>
   82fd6:	b378      	cbz	r0, 83038 <__sfvwrite_r+0x158>
   82fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82fdc:	f04f 30ff 	mov.w	r0, #4294967295
   82fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82fe4:	81a3      	strh	r3, [r4, #12]
   82fe6:	b003      	add	sp, #12
   82fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fec:	4681      	mov	r9, r0
   82fee:	4633      	mov	r3, r6
   82ff0:	464e      	mov	r6, r9
   82ff2:	46a8      	mov	r8, r5
   82ff4:	469a      	mov	sl, r3
   82ff6:	464d      	mov	r5, r9
   82ff8:	b356      	cbz	r6, 83050 <__sfvwrite_r+0x170>
   82ffa:	2800      	cmp	r0, #0
   82ffc:	d032      	beq.n	83064 <__sfvwrite_r+0x184>
   82ffe:	45b1      	cmp	r9, r6
   83000:	46cb      	mov	fp, r9
   83002:	bf28      	it	cs
   83004:	46b3      	movcs	fp, r6
   83006:	6820      	ldr	r0, [r4, #0]
   83008:	6923      	ldr	r3, [r4, #16]
   8300a:	465f      	mov	r7, fp
   8300c:	4298      	cmp	r0, r3
   8300e:	6962      	ldr	r2, [r4, #20]
   83010:	d904      	bls.n	8301c <__sfvwrite_r+0x13c>
   83012:	68a3      	ldr	r3, [r4, #8]
   83014:	4413      	add	r3, r2
   83016:	459b      	cmp	fp, r3
   83018:	f300 80a8 	bgt.w	8316c <__sfvwrite_r+0x28c>
   8301c:	4593      	cmp	fp, r2
   8301e:	db4d      	blt.n	830bc <__sfvwrite_r+0x1dc>
   83020:	4613      	mov	r3, r2
   83022:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83024:	462a      	mov	r2, r5
   83026:	69e1      	ldr	r1, [r4, #28]
   83028:	9800      	ldr	r0, [sp, #0]
   8302a:	47b8      	blx	r7
   8302c:	1e07      	subs	r7, r0, #0
   8302e:	ddd3      	ble.n	82fd8 <__sfvwrite_r+0xf8>
   83030:	ebb9 0907 	subs.w	r9, r9, r7
   83034:	d0cb      	beq.n	82fce <__sfvwrite_r+0xee>
   83036:	2001      	movs	r0, #1
   83038:	f8da 3008 	ldr.w	r3, [sl, #8]
   8303c:	443d      	add	r5, r7
   8303e:	1bdb      	subs	r3, r3, r7
   83040:	1bf6      	subs	r6, r6, r7
   83042:	f8ca 3008 	str.w	r3, [sl, #8]
   83046:	2b00      	cmp	r3, #0
   83048:	f43f af78 	beq.w	82f3c <__sfvwrite_r+0x5c>
   8304c:	2e00      	cmp	r6, #0
   8304e:	d1d4      	bne.n	82ffa <__sfvwrite_r+0x11a>
   83050:	f108 0308 	add.w	r3, r8, #8
   83054:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83058:	4698      	mov	r8, r3
   8305a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8305e:	3308      	adds	r3, #8
   83060:	2e00      	cmp	r6, #0
   83062:	d0f7      	beq.n	83054 <__sfvwrite_r+0x174>
   83064:	4632      	mov	r2, r6
   83066:	210a      	movs	r1, #10
   83068:	4628      	mov	r0, r5
   8306a:	f000 fc29 	bl	838c0 <memchr>
   8306e:	2800      	cmp	r0, #0
   83070:	f000 80a1 	beq.w	831b6 <__sfvwrite_r+0x2d6>
   83074:	3001      	adds	r0, #1
   83076:	eba0 0905 	sub.w	r9, r0, r5
   8307a:	e7c0      	b.n	82ffe <__sfvwrite_r+0x11e>
   8307c:	6820      	ldr	r0, [r4, #0]
   8307e:	6923      	ldr	r3, [r4, #16]
   83080:	4298      	cmp	r0, r3
   83082:	d802      	bhi.n	8308a <__sfvwrite_r+0x1aa>
   83084:	6963      	ldr	r3, [r4, #20]
   83086:	429f      	cmp	r7, r3
   83088:	d25d      	bcs.n	83146 <__sfvwrite_r+0x266>
   8308a:	45b8      	cmp	r8, r7
   8308c:	bf28      	it	cs
   8308e:	46b8      	movcs	r8, r7
   83090:	4649      	mov	r1, r9
   83092:	4642      	mov	r2, r8
   83094:	f000 fcd0 	bl	83a38 <memmove>
   83098:	68a3      	ldr	r3, [r4, #8]
   8309a:	6822      	ldr	r2, [r4, #0]
   8309c:	eba3 0308 	sub.w	r3, r3, r8
   830a0:	4442      	add	r2, r8
   830a2:	60a3      	str	r3, [r4, #8]
   830a4:	6022      	str	r2, [r4, #0]
   830a6:	b10b      	cbz	r3, 830ac <__sfvwrite_r+0x1cc>
   830a8:	46c2      	mov	sl, r8
   830aa:	e777      	b.n	82f9c <__sfvwrite_r+0xbc>
   830ac:	4621      	mov	r1, r4
   830ae:	9800      	ldr	r0, [sp, #0]
   830b0:	f7ff fcb2 	bl	82a18 <_fflush_r>
   830b4:	2800      	cmp	r0, #0
   830b6:	d18f      	bne.n	82fd8 <__sfvwrite_r+0xf8>
   830b8:	46c2      	mov	sl, r8
   830ba:	e76f      	b.n	82f9c <__sfvwrite_r+0xbc>
   830bc:	465a      	mov	r2, fp
   830be:	4629      	mov	r1, r5
   830c0:	f000 fcba 	bl	83a38 <memmove>
   830c4:	68a2      	ldr	r2, [r4, #8]
   830c6:	6823      	ldr	r3, [r4, #0]
   830c8:	eba2 020b 	sub.w	r2, r2, fp
   830cc:	445b      	add	r3, fp
   830ce:	60a2      	str	r2, [r4, #8]
   830d0:	6023      	str	r3, [r4, #0]
   830d2:	e7ad      	b.n	83030 <__sfvwrite_r+0x150>
   830d4:	46b8      	mov	r8, r7
   830d6:	46ba      	mov	sl, r7
   830d8:	46bb      	mov	fp, r7
   830da:	6820      	ldr	r0, [r4, #0]
   830dc:	e753      	b.n	82f86 <__sfvwrite_r+0xa6>
   830de:	6962      	ldr	r2, [r4, #20]
   830e0:	6820      	ldr	r0, [r4, #0]
   830e2:	6921      	ldr	r1, [r4, #16]
   830e4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   830e8:	eba0 0a01 	sub.w	sl, r0, r1
   830ec:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   830f0:	f10a 0001 	add.w	r0, sl, #1
   830f4:	ea4f 0868 	mov.w	r8, r8, asr #1
   830f8:	4438      	add	r0, r7
   830fa:	4540      	cmp	r0, r8
   830fc:	4642      	mov	r2, r8
   830fe:	bf84      	itt	hi
   83100:	4680      	movhi	r8, r0
   83102:	4642      	movhi	r2, r8
   83104:	055b      	lsls	r3, r3, #21
   83106:	d544      	bpl.n	83192 <__sfvwrite_r+0x2b2>
   83108:	4611      	mov	r1, r2
   8310a:	9800      	ldr	r0, [sp, #0]
   8310c:	f000 f920 	bl	83350 <_malloc_r>
   83110:	4683      	mov	fp, r0
   83112:	2800      	cmp	r0, #0
   83114:	d055      	beq.n	831c2 <__sfvwrite_r+0x2e2>
   83116:	4652      	mov	r2, sl
   83118:	6921      	ldr	r1, [r4, #16]
   8311a:	f000 fc17 	bl	8394c <memcpy>
   8311e:	89a3      	ldrh	r3, [r4, #12]
   83120:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83128:	81a3      	strh	r3, [r4, #12]
   8312a:	eb0b 000a 	add.w	r0, fp, sl
   8312e:	eba8 030a 	sub.w	r3, r8, sl
   83132:	f8c4 b010 	str.w	fp, [r4, #16]
   83136:	f8c4 8014 	str.w	r8, [r4, #20]
   8313a:	6020      	str	r0, [r4, #0]
   8313c:	60a3      	str	r3, [r4, #8]
   8313e:	46b8      	mov	r8, r7
   83140:	46ba      	mov	sl, r7
   83142:	46bb      	mov	fp, r7
   83144:	e71f      	b.n	82f86 <__sfvwrite_r+0xa6>
   83146:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8314a:	42ba      	cmp	r2, r7
   8314c:	bf28      	it	cs
   8314e:	463a      	movcs	r2, r7
   83150:	fb92 f2f3 	sdiv	r2, r2, r3
   83154:	69e1      	ldr	r1, [r4, #28]
   83156:	fb03 f302 	mul.w	r3, r3, r2
   8315a:	9800      	ldr	r0, [sp, #0]
   8315c:	464a      	mov	r2, r9
   8315e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83160:	47b0      	blx	r6
   83162:	f1b0 0a00 	subs.w	sl, r0, #0
   83166:	f73f af19 	bgt.w	82f9c <__sfvwrite_r+0xbc>
   8316a:	e735      	b.n	82fd8 <__sfvwrite_r+0xf8>
   8316c:	461a      	mov	r2, r3
   8316e:	4629      	mov	r1, r5
   83170:	9301      	str	r3, [sp, #4]
   83172:	f000 fc61 	bl	83a38 <memmove>
   83176:	6822      	ldr	r2, [r4, #0]
   83178:	9b01      	ldr	r3, [sp, #4]
   8317a:	4621      	mov	r1, r4
   8317c:	441a      	add	r2, r3
   8317e:	6022      	str	r2, [r4, #0]
   83180:	9800      	ldr	r0, [sp, #0]
   83182:	f7ff fc49 	bl	82a18 <_fflush_r>
   83186:	9b01      	ldr	r3, [sp, #4]
   83188:	2800      	cmp	r0, #0
   8318a:	f47f af25 	bne.w	82fd8 <__sfvwrite_r+0xf8>
   8318e:	461f      	mov	r7, r3
   83190:	e74e      	b.n	83030 <__sfvwrite_r+0x150>
   83192:	9800      	ldr	r0, [sp, #0]
   83194:	f000 fcc0 	bl	83b18 <_realloc_r>
   83198:	4683      	mov	fp, r0
   8319a:	2800      	cmp	r0, #0
   8319c:	d1c5      	bne.n	8312a <__sfvwrite_r+0x24a>
   8319e:	9d00      	ldr	r5, [sp, #0]
   831a0:	6921      	ldr	r1, [r4, #16]
   831a2:	4628      	mov	r0, r5
   831a4:	f7ff fdb6 	bl	82d14 <_free_r>
   831a8:	220c      	movs	r2, #12
   831aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   831ae:	602a      	str	r2, [r5, #0]
   831b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   831b4:	e712      	b.n	82fdc <__sfvwrite_r+0xfc>
   831b6:	f106 0901 	add.w	r9, r6, #1
   831ba:	e720      	b.n	82ffe <__sfvwrite_r+0x11e>
   831bc:	f04f 30ff 	mov.w	r0, #4294967295
   831c0:	e6bd      	b.n	82f3e <__sfvwrite_r+0x5e>
   831c2:	220c      	movs	r2, #12
   831c4:	9900      	ldr	r1, [sp, #0]
   831c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   831ca:	600a      	str	r2, [r1, #0]
   831cc:	e706      	b.n	82fdc <__sfvwrite_r+0xfc>
   831ce:	bf00      	nop
   831d0:	7ffffc00 	.word	0x7ffffc00

000831d4 <_fwalk_reent>:
   831d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   831d8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   831dc:	d01e      	beq.n	8321c <_fwalk_reent+0x48>
   831de:	4688      	mov	r8, r1
   831e0:	4607      	mov	r7, r0
   831e2:	f04f 0900 	mov.w	r9, #0
   831e6:	6875      	ldr	r5, [r6, #4]
   831e8:	68b4      	ldr	r4, [r6, #8]
   831ea:	3d01      	subs	r5, #1
   831ec:	d410      	bmi.n	83210 <_fwalk_reent+0x3c>
   831ee:	89a3      	ldrh	r3, [r4, #12]
   831f0:	3d01      	subs	r5, #1
   831f2:	2b01      	cmp	r3, #1
   831f4:	d908      	bls.n	83208 <_fwalk_reent+0x34>
   831f6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   831fa:	3301      	adds	r3, #1
   831fc:	d004      	beq.n	83208 <_fwalk_reent+0x34>
   831fe:	4621      	mov	r1, r4
   83200:	4638      	mov	r0, r7
   83202:	47c0      	blx	r8
   83204:	ea49 0900 	orr.w	r9, r9, r0
   83208:	1c6b      	adds	r3, r5, #1
   8320a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8320e:	d1ee      	bne.n	831ee <_fwalk_reent+0x1a>
   83210:	6836      	ldr	r6, [r6, #0]
   83212:	2e00      	cmp	r6, #0
   83214:	d1e7      	bne.n	831e6 <_fwalk_reent+0x12>
   83216:	4648      	mov	r0, r9
   83218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8321c:	46b1      	mov	r9, r6
   8321e:	4648      	mov	r0, r9
   83220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083224 <__locale_mb_cur_max>:
   83224:	4b04      	ldr	r3, [pc, #16]	; (83238 <__locale_mb_cur_max+0x14>)
   83226:	4a05      	ldr	r2, [pc, #20]	; (8323c <__locale_mb_cur_max+0x18>)
   83228:	681b      	ldr	r3, [r3, #0]
   8322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8322c:	2b00      	cmp	r3, #0
   8322e:	bf08      	it	eq
   83230:	4613      	moveq	r3, r2
   83232:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   83236:	4770      	bx	lr
   83238:	20070134 	.word	0x20070134
   8323c:	20070564 	.word	0x20070564

00083240 <__retarget_lock_init_recursive>:
   83240:	4770      	bx	lr
   83242:	bf00      	nop

00083244 <__retarget_lock_close_recursive>:
   83244:	4770      	bx	lr
   83246:	bf00      	nop

00083248 <__retarget_lock_acquire_recursive>:
   83248:	4770      	bx	lr
   8324a:	bf00      	nop

0008324c <__retarget_lock_release_recursive>:
   8324c:	4770      	bx	lr
   8324e:	bf00      	nop

00083250 <__swhatbuf_r>:
   83250:	b570      	push	{r4, r5, r6, lr}
   83252:	460c      	mov	r4, r1
   83254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83258:	b090      	sub	sp, #64	; 0x40
   8325a:	2900      	cmp	r1, #0
   8325c:	4615      	mov	r5, r2
   8325e:	461e      	mov	r6, r3
   83260:	db14      	blt.n	8328c <__swhatbuf_r+0x3c>
   83262:	aa01      	add	r2, sp, #4
   83264:	f000 ffde 	bl	84224 <_fstat_r>
   83268:	2800      	cmp	r0, #0
   8326a:	db0f      	blt.n	8328c <__swhatbuf_r+0x3c>
   8326c:	9a02      	ldr	r2, [sp, #8]
   8326e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83272:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   83276:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8327a:	fab2 f282 	clz	r2, r2
   8327e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83282:	0952      	lsrs	r2, r2, #5
   83284:	6032      	str	r2, [r6, #0]
   83286:	602b      	str	r3, [r5, #0]
   83288:	b010      	add	sp, #64	; 0x40
   8328a:	bd70      	pop	{r4, r5, r6, pc}
   8328c:	2300      	movs	r3, #0
   8328e:	89a2      	ldrh	r2, [r4, #12]
   83290:	6033      	str	r3, [r6, #0]
   83292:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   83296:	d004      	beq.n	832a2 <__swhatbuf_r+0x52>
   83298:	2240      	movs	r2, #64	; 0x40
   8329a:	4618      	mov	r0, r3
   8329c:	602a      	str	r2, [r5, #0]
   8329e:	b010      	add	sp, #64	; 0x40
   832a0:	bd70      	pop	{r4, r5, r6, pc}
   832a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   832a6:	602b      	str	r3, [r5, #0]
   832a8:	b010      	add	sp, #64	; 0x40
   832aa:	bd70      	pop	{r4, r5, r6, pc}

000832ac <__smakebuf_r>:
   832ac:	898a      	ldrh	r2, [r1, #12]
   832ae:	460b      	mov	r3, r1
   832b0:	0792      	lsls	r2, r2, #30
   832b2:	d506      	bpl.n	832c2 <__smakebuf_r+0x16>
   832b4:	2101      	movs	r1, #1
   832b6:	f103 0243 	add.w	r2, r3, #67	; 0x43
   832ba:	6159      	str	r1, [r3, #20]
   832bc:	601a      	str	r2, [r3, #0]
   832be:	611a      	str	r2, [r3, #16]
   832c0:	4770      	bx	lr
   832c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   832c4:	b083      	sub	sp, #12
   832c6:	ab01      	add	r3, sp, #4
   832c8:	466a      	mov	r2, sp
   832ca:	460c      	mov	r4, r1
   832cc:	4606      	mov	r6, r0
   832ce:	f7ff ffbf 	bl	83250 <__swhatbuf_r>
   832d2:	9900      	ldr	r1, [sp, #0]
   832d4:	4605      	mov	r5, r0
   832d6:	4630      	mov	r0, r6
   832d8:	f000 f83a 	bl	83350 <_malloc_r>
   832dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   832e0:	b1d8      	cbz	r0, 8331a <__smakebuf_r+0x6e>
   832e2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   832e6:	4f15      	ldr	r7, [pc, #84]	; (8333c <__smakebuf_r+0x90>)
   832e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   832ec:	63f7      	str	r7, [r6, #60]	; 0x3c
   832ee:	81a3      	strh	r3, [r4, #12]
   832f0:	6020      	str	r0, [r4, #0]
   832f2:	6120      	str	r0, [r4, #16]
   832f4:	6161      	str	r1, [r4, #20]
   832f6:	b91a      	cbnz	r2, 83300 <__smakebuf_r+0x54>
   832f8:	432b      	orrs	r3, r5
   832fa:	81a3      	strh	r3, [r4, #12]
   832fc:	b003      	add	sp, #12
   832fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83300:	4630      	mov	r0, r6
   83302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83306:	f000 ffa1 	bl	8424c <_isatty_r>
   8330a:	b1a0      	cbz	r0, 83336 <__smakebuf_r+0x8a>
   8330c:	89a3      	ldrh	r3, [r4, #12]
   8330e:	f023 0303 	bic.w	r3, r3, #3
   83312:	f043 0301 	orr.w	r3, r3, #1
   83316:	b21b      	sxth	r3, r3
   83318:	e7ee      	b.n	832f8 <__smakebuf_r+0x4c>
   8331a:	059a      	lsls	r2, r3, #22
   8331c:	d4ee      	bmi.n	832fc <__smakebuf_r+0x50>
   8331e:	2101      	movs	r1, #1
   83320:	f023 0303 	bic.w	r3, r3, #3
   83324:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83328:	f043 0302 	orr.w	r3, r3, #2
   8332c:	81a3      	strh	r3, [r4, #12]
   8332e:	6161      	str	r1, [r4, #20]
   83330:	6022      	str	r2, [r4, #0]
   83332:	6122      	str	r2, [r4, #16]
   83334:	e7e2      	b.n	832fc <__smakebuf_r+0x50>
   83336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8333a:	e7dd      	b.n	832f8 <__smakebuf_r+0x4c>
   8333c:	00082a6d 	.word	0x00082a6d

00083340 <malloc>:
   83340:	4b02      	ldr	r3, [pc, #8]	; (8334c <malloc+0xc>)
   83342:	4601      	mov	r1, r0
   83344:	6818      	ldr	r0, [r3, #0]
   83346:	f000 b803 	b.w	83350 <_malloc_r>
   8334a:	bf00      	nop
   8334c:	20070134 	.word	0x20070134

00083350 <_malloc_r>:
   83350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83354:	f101 060b 	add.w	r6, r1, #11
   83358:	2e16      	cmp	r6, #22
   8335a:	b083      	sub	sp, #12
   8335c:	4605      	mov	r5, r0
   8335e:	f240 809e 	bls.w	8349e <_malloc_r+0x14e>
   83362:	f036 0607 	bics.w	r6, r6, #7
   83366:	f100 80bd 	bmi.w	834e4 <_malloc_r+0x194>
   8336a:	42b1      	cmp	r1, r6
   8336c:	f200 80ba 	bhi.w	834e4 <_malloc_r+0x194>
   83370:	f000 fbc6 	bl	83b00 <__malloc_lock>
   83374:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   83378:	f0c0 8285 	bcc.w	83886 <_malloc_r+0x536>
   8337c:	0a73      	lsrs	r3, r6, #9
   8337e:	f000 80b8 	beq.w	834f2 <_malloc_r+0x1a2>
   83382:	2b04      	cmp	r3, #4
   83384:	f200 816c 	bhi.w	83660 <_malloc_r+0x310>
   83388:	09b3      	lsrs	r3, r6, #6
   8338a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8338e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   83392:	00c1      	lsls	r1, r0, #3
   83394:	4fb8      	ldr	r7, [pc, #736]	; (83678 <_malloc_r+0x328>)
   83396:	4439      	add	r1, r7
   83398:	684c      	ldr	r4, [r1, #4]
   8339a:	3908      	subs	r1, #8
   8339c:	42a1      	cmp	r1, r4
   8339e:	d106      	bne.n	833ae <_malloc_r+0x5e>
   833a0:	e00c      	b.n	833bc <_malloc_r+0x6c>
   833a2:	2a00      	cmp	r2, #0
   833a4:	f280 80ab 	bge.w	834fe <_malloc_r+0x1ae>
   833a8:	68e4      	ldr	r4, [r4, #12]
   833aa:	42a1      	cmp	r1, r4
   833ac:	d006      	beq.n	833bc <_malloc_r+0x6c>
   833ae:	6863      	ldr	r3, [r4, #4]
   833b0:	f023 0303 	bic.w	r3, r3, #3
   833b4:	1b9a      	subs	r2, r3, r6
   833b6:	2a0f      	cmp	r2, #15
   833b8:	ddf3      	ble.n	833a2 <_malloc_r+0x52>
   833ba:	4670      	mov	r0, lr
   833bc:	693c      	ldr	r4, [r7, #16]
   833be:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8368c <_malloc_r+0x33c>
   833c2:	4574      	cmp	r4, lr
   833c4:	f000 819e 	beq.w	83704 <_malloc_r+0x3b4>
   833c8:	6863      	ldr	r3, [r4, #4]
   833ca:	f023 0303 	bic.w	r3, r3, #3
   833ce:	1b9a      	subs	r2, r3, r6
   833d0:	2a0f      	cmp	r2, #15
   833d2:	f300 8183 	bgt.w	836dc <_malloc_r+0x38c>
   833d6:	2a00      	cmp	r2, #0
   833d8:	f8c7 e014 	str.w	lr, [r7, #20]
   833dc:	f8c7 e010 	str.w	lr, [r7, #16]
   833e0:	f280 8091 	bge.w	83506 <_malloc_r+0x1b6>
   833e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   833e8:	f080 8154 	bcs.w	83694 <_malloc_r+0x344>
   833ec:	2201      	movs	r2, #1
   833ee:	08db      	lsrs	r3, r3, #3
   833f0:	6879      	ldr	r1, [r7, #4]
   833f2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   833f6:	4413      	add	r3, r2
   833f8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   833fc:	fa02 f20c 	lsl.w	r2, r2, ip
   83400:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83404:	430a      	orrs	r2, r1
   83406:	f1ac 0108 	sub.w	r1, ip, #8
   8340a:	60e1      	str	r1, [r4, #12]
   8340c:	f8c4 8008 	str.w	r8, [r4, #8]
   83410:	607a      	str	r2, [r7, #4]
   83412:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83416:	f8c8 400c 	str.w	r4, [r8, #12]
   8341a:	2401      	movs	r4, #1
   8341c:	1083      	asrs	r3, r0, #2
   8341e:	409c      	lsls	r4, r3
   83420:	4294      	cmp	r4, r2
   83422:	d87d      	bhi.n	83520 <_malloc_r+0x1d0>
   83424:	4214      	tst	r4, r2
   83426:	d106      	bne.n	83436 <_malloc_r+0xe6>
   83428:	f020 0003 	bic.w	r0, r0, #3
   8342c:	0064      	lsls	r4, r4, #1
   8342e:	4214      	tst	r4, r2
   83430:	f100 0004 	add.w	r0, r0, #4
   83434:	d0fa      	beq.n	8342c <_malloc_r+0xdc>
   83436:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8343a:	46cc      	mov	ip, r9
   8343c:	4680      	mov	r8, r0
   8343e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83442:	459c      	cmp	ip, r3
   83444:	d107      	bne.n	83456 <_malloc_r+0x106>
   83446:	e15f      	b.n	83708 <_malloc_r+0x3b8>
   83448:	2a00      	cmp	r2, #0
   8344a:	f280 816d 	bge.w	83728 <_malloc_r+0x3d8>
   8344e:	68db      	ldr	r3, [r3, #12]
   83450:	459c      	cmp	ip, r3
   83452:	f000 8159 	beq.w	83708 <_malloc_r+0x3b8>
   83456:	6859      	ldr	r1, [r3, #4]
   83458:	f021 0103 	bic.w	r1, r1, #3
   8345c:	1b8a      	subs	r2, r1, r6
   8345e:	2a0f      	cmp	r2, #15
   83460:	ddf2      	ble.n	83448 <_malloc_r+0xf8>
   83462:	68dc      	ldr	r4, [r3, #12]
   83464:	f8d3 c008 	ldr.w	ip, [r3, #8]
   83468:	f046 0801 	orr.w	r8, r6, #1
   8346c:	4628      	mov	r0, r5
   8346e:	441e      	add	r6, r3
   83470:	f042 0501 	orr.w	r5, r2, #1
   83474:	f8c3 8004 	str.w	r8, [r3, #4]
   83478:	f8cc 400c 	str.w	r4, [ip, #12]
   8347c:	f8c4 c008 	str.w	ip, [r4, #8]
   83480:	617e      	str	r6, [r7, #20]
   83482:	613e      	str	r6, [r7, #16]
   83484:	f8c6 e00c 	str.w	lr, [r6, #12]
   83488:	f8c6 e008 	str.w	lr, [r6, #8]
   8348c:	6075      	str	r5, [r6, #4]
   8348e:	505a      	str	r2, [r3, r1]
   83490:	9300      	str	r3, [sp, #0]
   83492:	f000 fb3b 	bl	83b0c <__malloc_unlock>
   83496:	9b00      	ldr	r3, [sp, #0]
   83498:	f103 0408 	add.w	r4, r3, #8
   8349c:	e01e      	b.n	834dc <_malloc_r+0x18c>
   8349e:	2910      	cmp	r1, #16
   834a0:	d820      	bhi.n	834e4 <_malloc_r+0x194>
   834a2:	f000 fb2d 	bl	83b00 <__malloc_lock>
   834a6:	2610      	movs	r6, #16
   834a8:	2318      	movs	r3, #24
   834aa:	2002      	movs	r0, #2
   834ac:	4f72      	ldr	r7, [pc, #456]	; (83678 <_malloc_r+0x328>)
   834ae:	443b      	add	r3, r7
   834b0:	685c      	ldr	r4, [r3, #4]
   834b2:	f1a3 0208 	sub.w	r2, r3, #8
   834b6:	4294      	cmp	r4, r2
   834b8:	f000 812f 	beq.w	8371a <_malloc_r+0x3ca>
   834bc:	6863      	ldr	r3, [r4, #4]
   834be:	68e1      	ldr	r1, [r4, #12]
   834c0:	f023 0303 	bic.w	r3, r3, #3
   834c4:	4423      	add	r3, r4
   834c6:	685a      	ldr	r2, [r3, #4]
   834c8:	68a6      	ldr	r6, [r4, #8]
   834ca:	f042 0201 	orr.w	r2, r2, #1
   834ce:	60f1      	str	r1, [r6, #12]
   834d0:	4628      	mov	r0, r5
   834d2:	608e      	str	r6, [r1, #8]
   834d4:	605a      	str	r2, [r3, #4]
   834d6:	f000 fb19 	bl	83b0c <__malloc_unlock>
   834da:	3408      	adds	r4, #8
   834dc:	4620      	mov	r0, r4
   834de:	b003      	add	sp, #12
   834e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   834e4:	2400      	movs	r4, #0
   834e6:	230c      	movs	r3, #12
   834e8:	4620      	mov	r0, r4
   834ea:	602b      	str	r3, [r5, #0]
   834ec:	b003      	add	sp, #12
   834ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   834f2:	2040      	movs	r0, #64	; 0x40
   834f4:	f44f 7100 	mov.w	r1, #512	; 0x200
   834f8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   834fc:	e74a      	b.n	83394 <_malloc_r+0x44>
   834fe:	4423      	add	r3, r4
   83500:	685a      	ldr	r2, [r3, #4]
   83502:	68e1      	ldr	r1, [r4, #12]
   83504:	e7e0      	b.n	834c8 <_malloc_r+0x178>
   83506:	4423      	add	r3, r4
   83508:	685a      	ldr	r2, [r3, #4]
   8350a:	4628      	mov	r0, r5
   8350c:	f042 0201 	orr.w	r2, r2, #1
   83510:	605a      	str	r2, [r3, #4]
   83512:	3408      	adds	r4, #8
   83514:	f000 fafa 	bl	83b0c <__malloc_unlock>
   83518:	4620      	mov	r0, r4
   8351a:	b003      	add	sp, #12
   8351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83520:	68bc      	ldr	r4, [r7, #8]
   83522:	6863      	ldr	r3, [r4, #4]
   83524:	f023 0803 	bic.w	r8, r3, #3
   83528:	45b0      	cmp	r8, r6
   8352a:	d304      	bcc.n	83536 <_malloc_r+0x1e6>
   8352c:	eba8 0306 	sub.w	r3, r8, r6
   83530:	2b0f      	cmp	r3, #15
   83532:	f300 8085 	bgt.w	83640 <_malloc_r+0x2f0>
   83536:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83690 <_malloc_r+0x340>
   8353a:	4b50      	ldr	r3, [pc, #320]	; (8367c <_malloc_r+0x32c>)
   8353c:	f8d9 2000 	ldr.w	r2, [r9]
   83540:	681b      	ldr	r3, [r3, #0]
   83542:	3201      	adds	r2, #1
   83544:	4433      	add	r3, r6
   83546:	eb04 0a08 	add.w	sl, r4, r8
   8354a:	f000 8154 	beq.w	837f6 <_malloc_r+0x4a6>
   8354e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83552:	330f      	adds	r3, #15
   83554:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83558:	f02b 0b0f 	bic.w	fp, fp, #15
   8355c:	4659      	mov	r1, fp
   8355e:	4628      	mov	r0, r5
   83560:	f000 fc90 	bl	83e84 <_sbrk_r>
   83564:	1c41      	adds	r1, r0, #1
   83566:	4602      	mov	r2, r0
   83568:	f000 80fb 	beq.w	83762 <_malloc_r+0x412>
   8356c:	4582      	cmp	sl, r0
   8356e:	f200 80f6 	bhi.w	8375e <_malloc_r+0x40e>
   83572:	4b43      	ldr	r3, [pc, #268]	; (83680 <_malloc_r+0x330>)
   83574:	6819      	ldr	r1, [r3, #0]
   83576:	4459      	add	r1, fp
   83578:	6019      	str	r1, [r3, #0]
   8357a:	f000 814c 	beq.w	83816 <_malloc_r+0x4c6>
   8357e:	f8d9 0000 	ldr.w	r0, [r9]
   83582:	3001      	adds	r0, #1
   83584:	bf1b      	ittet	ne
   83586:	eba2 0a0a 	subne.w	sl, r2, sl
   8358a:	4451      	addne	r1, sl
   8358c:	f8c9 2000 	streq.w	r2, [r9]
   83590:	6019      	strne	r1, [r3, #0]
   83592:	f012 0107 	ands.w	r1, r2, #7
   83596:	f000 8114 	beq.w	837c2 <_malloc_r+0x472>
   8359a:	f1c1 0008 	rsb	r0, r1, #8
   8359e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   835a2:	4402      	add	r2, r0
   835a4:	3108      	adds	r1, #8
   835a6:	eb02 090b 	add.w	r9, r2, fp
   835aa:	f3c9 090b 	ubfx	r9, r9, #0, #12
   835ae:	eba1 0909 	sub.w	r9, r1, r9
   835b2:	4649      	mov	r1, r9
   835b4:	4628      	mov	r0, r5
   835b6:	9301      	str	r3, [sp, #4]
   835b8:	9200      	str	r2, [sp, #0]
   835ba:	f000 fc63 	bl	83e84 <_sbrk_r>
   835be:	1c43      	adds	r3, r0, #1
   835c0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   835c4:	f000 8142 	beq.w	8384c <_malloc_r+0x4fc>
   835c8:	1a80      	subs	r0, r0, r2
   835ca:	4448      	add	r0, r9
   835cc:	f040 0001 	orr.w	r0, r0, #1
   835d0:	6819      	ldr	r1, [r3, #0]
   835d2:	42bc      	cmp	r4, r7
   835d4:	4449      	add	r1, r9
   835d6:	60ba      	str	r2, [r7, #8]
   835d8:	6019      	str	r1, [r3, #0]
   835da:	6050      	str	r0, [r2, #4]
   835dc:	d017      	beq.n	8360e <_malloc_r+0x2be>
   835de:	f1b8 0f0f 	cmp.w	r8, #15
   835e2:	f240 80fa 	bls.w	837da <_malloc_r+0x48a>
   835e6:	f04f 0c05 	mov.w	ip, #5
   835ea:	6862      	ldr	r2, [r4, #4]
   835ec:	f1a8 000c 	sub.w	r0, r8, #12
   835f0:	f020 0007 	bic.w	r0, r0, #7
   835f4:	f002 0201 	and.w	r2, r2, #1
   835f8:	eb04 0e00 	add.w	lr, r4, r0
   835fc:	4302      	orrs	r2, r0
   835fe:	280f      	cmp	r0, #15
   83600:	6062      	str	r2, [r4, #4]
   83602:	f8ce c004 	str.w	ip, [lr, #4]
   83606:	f8ce c008 	str.w	ip, [lr, #8]
   8360a:	f200 8116 	bhi.w	8383a <_malloc_r+0x4ea>
   8360e:	4b1d      	ldr	r3, [pc, #116]	; (83684 <_malloc_r+0x334>)
   83610:	68bc      	ldr	r4, [r7, #8]
   83612:	681a      	ldr	r2, [r3, #0]
   83614:	4291      	cmp	r1, r2
   83616:	bf88      	it	hi
   83618:	6019      	strhi	r1, [r3, #0]
   8361a:	4b1b      	ldr	r3, [pc, #108]	; (83688 <_malloc_r+0x338>)
   8361c:	681a      	ldr	r2, [r3, #0]
   8361e:	4291      	cmp	r1, r2
   83620:	6862      	ldr	r2, [r4, #4]
   83622:	bf88      	it	hi
   83624:	6019      	strhi	r1, [r3, #0]
   83626:	f022 0203 	bic.w	r2, r2, #3
   8362a:	4296      	cmp	r6, r2
   8362c:	eba2 0306 	sub.w	r3, r2, r6
   83630:	d801      	bhi.n	83636 <_malloc_r+0x2e6>
   83632:	2b0f      	cmp	r3, #15
   83634:	dc04      	bgt.n	83640 <_malloc_r+0x2f0>
   83636:	4628      	mov	r0, r5
   83638:	f000 fa68 	bl	83b0c <__malloc_unlock>
   8363c:	2400      	movs	r4, #0
   8363e:	e74d      	b.n	834dc <_malloc_r+0x18c>
   83640:	f046 0201 	orr.w	r2, r6, #1
   83644:	f043 0301 	orr.w	r3, r3, #1
   83648:	4426      	add	r6, r4
   8364a:	6062      	str	r2, [r4, #4]
   8364c:	4628      	mov	r0, r5
   8364e:	60be      	str	r6, [r7, #8]
   83650:	3408      	adds	r4, #8
   83652:	6073      	str	r3, [r6, #4]
   83654:	f000 fa5a 	bl	83b0c <__malloc_unlock>
   83658:	4620      	mov	r0, r4
   8365a:	b003      	add	sp, #12
   8365c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83660:	2b14      	cmp	r3, #20
   83662:	d970      	bls.n	83746 <_malloc_r+0x3f6>
   83664:	2b54      	cmp	r3, #84	; 0x54
   83666:	f200 80a2 	bhi.w	837ae <_malloc_r+0x45e>
   8366a:	0b33      	lsrs	r3, r6, #12
   8366c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83670:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83674:	00c1      	lsls	r1, r0, #3
   83676:	e68d      	b.n	83394 <_malloc_r+0x44>
   83678:	200706d0 	.word	0x200706d0
   8367c:	20070c54 	.word	0x20070c54
   83680:	20070c24 	.word	0x20070c24
   83684:	20070c4c 	.word	0x20070c4c
   83688:	20070c50 	.word	0x20070c50
   8368c:	200706d8 	.word	0x200706d8
   83690:	20070ad8 	.word	0x20070ad8
   83694:	0a5a      	lsrs	r2, r3, #9
   83696:	2a04      	cmp	r2, #4
   83698:	d95b      	bls.n	83752 <_malloc_r+0x402>
   8369a:	2a14      	cmp	r2, #20
   8369c:	f200 80ae 	bhi.w	837fc <_malloc_r+0x4ac>
   836a0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   836a4:	00c9      	lsls	r1, r1, #3
   836a6:	325b      	adds	r2, #91	; 0x5b
   836a8:	eb07 0c01 	add.w	ip, r7, r1
   836ac:	5879      	ldr	r1, [r7, r1]
   836ae:	f1ac 0c08 	sub.w	ip, ip, #8
   836b2:	458c      	cmp	ip, r1
   836b4:	f000 8088 	beq.w	837c8 <_malloc_r+0x478>
   836b8:	684a      	ldr	r2, [r1, #4]
   836ba:	f022 0203 	bic.w	r2, r2, #3
   836be:	4293      	cmp	r3, r2
   836c0:	d273      	bcs.n	837aa <_malloc_r+0x45a>
   836c2:	6889      	ldr	r1, [r1, #8]
   836c4:	458c      	cmp	ip, r1
   836c6:	d1f7      	bne.n	836b8 <_malloc_r+0x368>
   836c8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   836cc:	687a      	ldr	r2, [r7, #4]
   836ce:	60e3      	str	r3, [r4, #12]
   836d0:	f8c4 c008 	str.w	ip, [r4, #8]
   836d4:	609c      	str	r4, [r3, #8]
   836d6:	f8cc 400c 	str.w	r4, [ip, #12]
   836da:	e69e      	b.n	8341a <_malloc_r+0xca>
   836dc:	f046 0c01 	orr.w	ip, r6, #1
   836e0:	f042 0101 	orr.w	r1, r2, #1
   836e4:	4426      	add	r6, r4
   836e6:	f8c4 c004 	str.w	ip, [r4, #4]
   836ea:	4628      	mov	r0, r5
   836ec:	617e      	str	r6, [r7, #20]
   836ee:	613e      	str	r6, [r7, #16]
   836f0:	f8c6 e00c 	str.w	lr, [r6, #12]
   836f4:	f8c6 e008 	str.w	lr, [r6, #8]
   836f8:	6071      	str	r1, [r6, #4]
   836fa:	50e2      	str	r2, [r4, r3]
   836fc:	f000 fa06 	bl	83b0c <__malloc_unlock>
   83700:	3408      	adds	r4, #8
   83702:	e6eb      	b.n	834dc <_malloc_r+0x18c>
   83704:	687a      	ldr	r2, [r7, #4]
   83706:	e688      	b.n	8341a <_malloc_r+0xca>
   83708:	f108 0801 	add.w	r8, r8, #1
   8370c:	f018 0f03 	tst.w	r8, #3
   83710:	f10c 0c08 	add.w	ip, ip, #8
   83714:	f47f ae93 	bne.w	8343e <_malloc_r+0xee>
   83718:	e02d      	b.n	83776 <_malloc_r+0x426>
   8371a:	68dc      	ldr	r4, [r3, #12]
   8371c:	42a3      	cmp	r3, r4
   8371e:	bf08      	it	eq
   83720:	3002      	addeq	r0, #2
   83722:	f43f ae4b 	beq.w	833bc <_malloc_r+0x6c>
   83726:	e6c9      	b.n	834bc <_malloc_r+0x16c>
   83728:	461c      	mov	r4, r3
   8372a:	4419      	add	r1, r3
   8372c:	684a      	ldr	r2, [r1, #4]
   8372e:	68db      	ldr	r3, [r3, #12]
   83730:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83734:	f042 0201 	orr.w	r2, r2, #1
   83738:	604a      	str	r2, [r1, #4]
   8373a:	4628      	mov	r0, r5
   8373c:	60f3      	str	r3, [r6, #12]
   8373e:	609e      	str	r6, [r3, #8]
   83740:	f000 f9e4 	bl	83b0c <__malloc_unlock>
   83744:	e6ca      	b.n	834dc <_malloc_r+0x18c>
   83746:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8374a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8374e:	00c1      	lsls	r1, r0, #3
   83750:	e620      	b.n	83394 <_malloc_r+0x44>
   83752:	099a      	lsrs	r2, r3, #6
   83754:	f102 0139 	add.w	r1, r2, #57	; 0x39
   83758:	00c9      	lsls	r1, r1, #3
   8375a:	3238      	adds	r2, #56	; 0x38
   8375c:	e7a4      	b.n	836a8 <_malloc_r+0x358>
   8375e:	42bc      	cmp	r4, r7
   83760:	d054      	beq.n	8380c <_malloc_r+0x4bc>
   83762:	68bc      	ldr	r4, [r7, #8]
   83764:	6862      	ldr	r2, [r4, #4]
   83766:	f022 0203 	bic.w	r2, r2, #3
   8376a:	e75e      	b.n	8362a <_malloc_r+0x2da>
   8376c:	f859 3908 	ldr.w	r3, [r9], #-8
   83770:	4599      	cmp	r9, r3
   83772:	f040 8086 	bne.w	83882 <_malloc_r+0x532>
   83776:	f010 0f03 	tst.w	r0, #3
   8377a:	f100 30ff 	add.w	r0, r0, #4294967295
   8377e:	d1f5      	bne.n	8376c <_malloc_r+0x41c>
   83780:	687b      	ldr	r3, [r7, #4]
   83782:	ea23 0304 	bic.w	r3, r3, r4
   83786:	607b      	str	r3, [r7, #4]
   83788:	0064      	lsls	r4, r4, #1
   8378a:	429c      	cmp	r4, r3
   8378c:	f63f aec8 	bhi.w	83520 <_malloc_r+0x1d0>
   83790:	2c00      	cmp	r4, #0
   83792:	f43f aec5 	beq.w	83520 <_malloc_r+0x1d0>
   83796:	421c      	tst	r4, r3
   83798:	4640      	mov	r0, r8
   8379a:	f47f ae4c 	bne.w	83436 <_malloc_r+0xe6>
   8379e:	0064      	lsls	r4, r4, #1
   837a0:	421c      	tst	r4, r3
   837a2:	f100 0004 	add.w	r0, r0, #4
   837a6:	d0fa      	beq.n	8379e <_malloc_r+0x44e>
   837a8:	e645      	b.n	83436 <_malloc_r+0xe6>
   837aa:	468c      	mov	ip, r1
   837ac:	e78c      	b.n	836c8 <_malloc_r+0x378>
   837ae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   837b2:	d815      	bhi.n	837e0 <_malloc_r+0x490>
   837b4:	0bf3      	lsrs	r3, r6, #15
   837b6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   837ba:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   837be:	00c1      	lsls	r1, r0, #3
   837c0:	e5e8      	b.n	83394 <_malloc_r+0x44>
   837c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   837c6:	e6ee      	b.n	835a6 <_malloc_r+0x256>
   837c8:	2101      	movs	r1, #1
   837ca:	687b      	ldr	r3, [r7, #4]
   837cc:	1092      	asrs	r2, r2, #2
   837ce:	fa01 f202 	lsl.w	r2, r1, r2
   837d2:	431a      	orrs	r2, r3
   837d4:	607a      	str	r2, [r7, #4]
   837d6:	4663      	mov	r3, ip
   837d8:	e779      	b.n	836ce <_malloc_r+0x37e>
   837da:	2301      	movs	r3, #1
   837dc:	6053      	str	r3, [r2, #4]
   837de:	e72a      	b.n	83636 <_malloc_r+0x2e6>
   837e0:	f240 5254 	movw	r2, #1364	; 0x554
   837e4:	4293      	cmp	r3, r2
   837e6:	d822      	bhi.n	8382e <_malloc_r+0x4de>
   837e8:	0cb3      	lsrs	r3, r6, #18
   837ea:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   837ee:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   837f2:	00c1      	lsls	r1, r0, #3
   837f4:	e5ce      	b.n	83394 <_malloc_r+0x44>
   837f6:	f103 0b10 	add.w	fp, r3, #16
   837fa:	e6af      	b.n	8355c <_malloc_r+0x20c>
   837fc:	2a54      	cmp	r2, #84	; 0x54
   837fe:	d829      	bhi.n	83854 <_malloc_r+0x504>
   83800:	0b1a      	lsrs	r2, r3, #12
   83802:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   83806:	00c9      	lsls	r1, r1, #3
   83808:	326e      	adds	r2, #110	; 0x6e
   8380a:	e74d      	b.n	836a8 <_malloc_r+0x358>
   8380c:	4b20      	ldr	r3, [pc, #128]	; (83890 <_malloc_r+0x540>)
   8380e:	6819      	ldr	r1, [r3, #0]
   83810:	4459      	add	r1, fp
   83812:	6019      	str	r1, [r3, #0]
   83814:	e6b3      	b.n	8357e <_malloc_r+0x22e>
   83816:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8381a:	2800      	cmp	r0, #0
   8381c:	f47f aeaf 	bne.w	8357e <_malloc_r+0x22e>
   83820:	eb08 030b 	add.w	r3, r8, fp
   83824:	68ba      	ldr	r2, [r7, #8]
   83826:	f043 0301 	orr.w	r3, r3, #1
   8382a:	6053      	str	r3, [r2, #4]
   8382c:	e6ef      	b.n	8360e <_malloc_r+0x2be>
   8382e:	207f      	movs	r0, #127	; 0x7f
   83830:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83834:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83838:	e5ac      	b.n	83394 <_malloc_r+0x44>
   8383a:	f104 0108 	add.w	r1, r4, #8
   8383e:	4628      	mov	r0, r5
   83840:	9300      	str	r3, [sp, #0]
   83842:	f7ff fa67 	bl	82d14 <_free_r>
   83846:	9b00      	ldr	r3, [sp, #0]
   83848:	6819      	ldr	r1, [r3, #0]
   8384a:	e6e0      	b.n	8360e <_malloc_r+0x2be>
   8384c:	2001      	movs	r0, #1
   8384e:	f04f 0900 	mov.w	r9, #0
   83852:	e6bd      	b.n	835d0 <_malloc_r+0x280>
   83854:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83858:	d805      	bhi.n	83866 <_malloc_r+0x516>
   8385a:	0bda      	lsrs	r2, r3, #15
   8385c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83860:	00c9      	lsls	r1, r1, #3
   83862:	3277      	adds	r2, #119	; 0x77
   83864:	e720      	b.n	836a8 <_malloc_r+0x358>
   83866:	f240 5154 	movw	r1, #1364	; 0x554
   8386a:	428a      	cmp	r2, r1
   8386c:	d805      	bhi.n	8387a <_malloc_r+0x52a>
   8386e:	0c9a      	lsrs	r2, r3, #18
   83870:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83874:	00c9      	lsls	r1, r1, #3
   83876:	327c      	adds	r2, #124	; 0x7c
   83878:	e716      	b.n	836a8 <_malloc_r+0x358>
   8387a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8387e:	227e      	movs	r2, #126	; 0x7e
   83880:	e712      	b.n	836a8 <_malloc_r+0x358>
   83882:	687b      	ldr	r3, [r7, #4]
   83884:	e780      	b.n	83788 <_malloc_r+0x438>
   83886:	08f0      	lsrs	r0, r6, #3
   83888:	f106 0308 	add.w	r3, r6, #8
   8388c:	e60e      	b.n	834ac <_malloc_r+0x15c>
   8388e:	bf00      	nop
   83890:	20070c24 	.word	0x20070c24

00083894 <__ascii_mbtowc>:
   83894:	b082      	sub	sp, #8
   83896:	b149      	cbz	r1, 838ac <__ascii_mbtowc+0x18>
   83898:	b15a      	cbz	r2, 838b2 <__ascii_mbtowc+0x1e>
   8389a:	b16b      	cbz	r3, 838b8 <__ascii_mbtowc+0x24>
   8389c:	7813      	ldrb	r3, [r2, #0]
   8389e:	600b      	str	r3, [r1, #0]
   838a0:	7812      	ldrb	r2, [r2, #0]
   838a2:	1c10      	adds	r0, r2, #0
   838a4:	bf18      	it	ne
   838a6:	2001      	movne	r0, #1
   838a8:	b002      	add	sp, #8
   838aa:	4770      	bx	lr
   838ac:	a901      	add	r1, sp, #4
   838ae:	2a00      	cmp	r2, #0
   838b0:	d1f3      	bne.n	8389a <__ascii_mbtowc+0x6>
   838b2:	4610      	mov	r0, r2
   838b4:	b002      	add	sp, #8
   838b6:	4770      	bx	lr
   838b8:	f06f 0001 	mvn.w	r0, #1
   838bc:	e7f4      	b.n	838a8 <__ascii_mbtowc+0x14>
   838be:	bf00      	nop

000838c0 <memchr>:
   838c0:	0783      	lsls	r3, r0, #30
   838c2:	b470      	push	{r4, r5, r6}
   838c4:	b2cd      	uxtb	r5, r1
   838c6:	d03d      	beq.n	83944 <memchr+0x84>
   838c8:	1e54      	subs	r4, r2, #1
   838ca:	b30a      	cbz	r2, 83910 <memchr+0x50>
   838cc:	7803      	ldrb	r3, [r0, #0]
   838ce:	42ab      	cmp	r3, r5
   838d0:	d01f      	beq.n	83912 <memchr+0x52>
   838d2:	1c43      	adds	r3, r0, #1
   838d4:	e005      	b.n	838e2 <memchr+0x22>
   838d6:	f114 34ff 	adds.w	r4, r4, #4294967295
   838da:	d319      	bcc.n	83910 <memchr+0x50>
   838dc:	7802      	ldrb	r2, [r0, #0]
   838de:	42aa      	cmp	r2, r5
   838e0:	d017      	beq.n	83912 <memchr+0x52>
   838e2:	f013 0f03 	tst.w	r3, #3
   838e6:	4618      	mov	r0, r3
   838e8:	f103 0301 	add.w	r3, r3, #1
   838ec:	d1f3      	bne.n	838d6 <memchr+0x16>
   838ee:	2c03      	cmp	r4, #3
   838f0:	d811      	bhi.n	83916 <memchr+0x56>
   838f2:	b34c      	cbz	r4, 83948 <memchr+0x88>
   838f4:	7803      	ldrb	r3, [r0, #0]
   838f6:	42ab      	cmp	r3, r5
   838f8:	d00b      	beq.n	83912 <memchr+0x52>
   838fa:	4404      	add	r4, r0
   838fc:	1c43      	adds	r3, r0, #1
   838fe:	e002      	b.n	83906 <memchr+0x46>
   83900:	7802      	ldrb	r2, [r0, #0]
   83902:	42aa      	cmp	r2, r5
   83904:	d005      	beq.n	83912 <memchr+0x52>
   83906:	429c      	cmp	r4, r3
   83908:	4618      	mov	r0, r3
   8390a:	f103 0301 	add.w	r3, r3, #1
   8390e:	d1f7      	bne.n	83900 <memchr+0x40>
   83910:	2000      	movs	r0, #0
   83912:	bc70      	pop	{r4, r5, r6}
   83914:	4770      	bx	lr
   83916:	0209      	lsls	r1, r1, #8
   83918:	b289      	uxth	r1, r1
   8391a:	4329      	orrs	r1, r5
   8391c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83920:	6803      	ldr	r3, [r0, #0]
   83922:	4606      	mov	r6, r0
   83924:	404b      	eors	r3, r1
   83926:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8392a:	ea22 0303 	bic.w	r3, r2, r3
   8392e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83932:	f100 0004 	add.w	r0, r0, #4
   83936:	d103      	bne.n	83940 <memchr+0x80>
   83938:	3c04      	subs	r4, #4
   8393a:	2c03      	cmp	r4, #3
   8393c:	d8f0      	bhi.n	83920 <memchr+0x60>
   8393e:	e7d8      	b.n	838f2 <memchr+0x32>
   83940:	4630      	mov	r0, r6
   83942:	e7d7      	b.n	838f4 <memchr+0x34>
   83944:	4614      	mov	r4, r2
   83946:	e7d2      	b.n	838ee <memchr+0x2e>
   83948:	4620      	mov	r0, r4
   8394a:	e7e2      	b.n	83912 <memchr+0x52>

0008394c <memcpy>:
   8394c:	4684      	mov	ip, r0
   8394e:	ea41 0300 	orr.w	r3, r1, r0
   83952:	f013 0303 	ands.w	r3, r3, #3
   83956:	d149      	bne.n	839ec <memcpy+0xa0>
   83958:	3a40      	subs	r2, #64	; 0x40
   8395a:	d323      	bcc.n	839a4 <memcpy+0x58>
   8395c:	680b      	ldr	r3, [r1, #0]
   8395e:	6003      	str	r3, [r0, #0]
   83960:	684b      	ldr	r3, [r1, #4]
   83962:	6043      	str	r3, [r0, #4]
   83964:	688b      	ldr	r3, [r1, #8]
   83966:	6083      	str	r3, [r0, #8]
   83968:	68cb      	ldr	r3, [r1, #12]
   8396a:	60c3      	str	r3, [r0, #12]
   8396c:	690b      	ldr	r3, [r1, #16]
   8396e:	6103      	str	r3, [r0, #16]
   83970:	694b      	ldr	r3, [r1, #20]
   83972:	6143      	str	r3, [r0, #20]
   83974:	698b      	ldr	r3, [r1, #24]
   83976:	6183      	str	r3, [r0, #24]
   83978:	69cb      	ldr	r3, [r1, #28]
   8397a:	61c3      	str	r3, [r0, #28]
   8397c:	6a0b      	ldr	r3, [r1, #32]
   8397e:	6203      	str	r3, [r0, #32]
   83980:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83982:	6243      	str	r3, [r0, #36]	; 0x24
   83984:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83986:	6283      	str	r3, [r0, #40]	; 0x28
   83988:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8398a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8398c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8398e:	6303      	str	r3, [r0, #48]	; 0x30
   83990:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83992:	6343      	str	r3, [r0, #52]	; 0x34
   83994:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83996:	6383      	str	r3, [r0, #56]	; 0x38
   83998:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8399a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8399c:	3040      	adds	r0, #64	; 0x40
   8399e:	3140      	adds	r1, #64	; 0x40
   839a0:	3a40      	subs	r2, #64	; 0x40
   839a2:	d2db      	bcs.n	8395c <memcpy+0x10>
   839a4:	3230      	adds	r2, #48	; 0x30
   839a6:	d30b      	bcc.n	839c0 <memcpy+0x74>
   839a8:	680b      	ldr	r3, [r1, #0]
   839aa:	6003      	str	r3, [r0, #0]
   839ac:	684b      	ldr	r3, [r1, #4]
   839ae:	6043      	str	r3, [r0, #4]
   839b0:	688b      	ldr	r3, [r1, #8]
   839b2:	6083      	str	r3, [r0, #8]
   839b4:	68cb      	ldr	r3, [r1, #12]
   839b6:	60c3      	str	r3, [r0, #12]
   839b8:	3010      	adds	r0, #16
   839ba:	3110      	adds	r1, #16
   839bc:	3a10      	subs	r2, #16
   839be:	d2f3      	bcs.n	839a8 <memcpy+0x5c>
   839c0:	320c      	adds	r2, #12
   839c2:	d305      	bcc.n	839d0 <memcpy+0x84>
   839c4:	f851 3b04 	ldr.w	r3, [r1], #4
   839c8:	f840 3b04 	str.w	r3, [r0], #4
   839cc:	3a04      	subs	r2, #4
   839ce:	d2f9      	bcs.n	839c4 <memcpy+0x78>
   839d0:	3204      	adds	r2, #4
   839d2:	d008      	beq.n	839e6 <memcpy+0x9a>
   839d4:	07d2      	lsls	r2, r2, #31
   839d6:	bf1c      	itt	ne
   839d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   839dc:	f800 3b01 	strbne.w	r3, [r0], #1
   839e0:	d301      	bcc.n	839e6 <memcpy+0x9a>
   839e2:	880b      	ldrh	r3, [r1, #0]
   839e4:	8003      	strh	r3, [r0, #0]
   839e6:	4660      	mov	r0, ip
   839e8:	4770      	bx	lr
   839ea:	bf00      	nop
   839ec:	2a08      	cmp	r2, #8
   839ee:	d313      	bcc.n	83a18 <memcpy+0xcc>
   839f0:	078b      	lsls	r3, r1, #30
   839f2:	d0b1      	beq.n	83958 <memcpy+0xc>
   839f4:	f010 0303 	ands.w	r3, r0, #3
   839f8:	d0ae      	beq.n	83958 <memcpy+0xc>
   839fa:	f1c3 0304 	rsb	r3, r3, #4
   839fe:	1ad2      	subs	r2, r2, r3
   83a00:	07db      	lsls	r3, r3, #31
   83a02:	bf1c      	itt	ne
   83a04:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83a08:	f800 3b01 	strbne.w	r3, [r0], #1
   83a0c:	d3a4      	bcc.n	83958 <memcpy+0xc>
   83a0e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83a12:	f820 3b02 	strh.w	r3, [r0], #2
   83a16:	e79f      	b.n	83958 <memcpy+0xc>
   83a18:	3a04      	subs	r2, #4
   83a1a:	d3d9      	bcc.n	839d0 <memcpy+0x84>
   83a1c:	3a01      	subs	r2, #1
   83a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83a22:	f800 3b01 	strb.w	r3, [r0], #1
   83a26:	d2f9      	bcs.n	83a1c <memcpy+0xd0>
   83a28:	780b      	ldrb	r3, [r1, #0]
   83a2a:	7003      	strb	r3, [r0, #0]
   83a2c:	784b      	ldrb	r3, [r1, #1]
   83a2e:	7043      	strb	r3, [r0, #1]
   83a30:	788b      	ldrb	r3, [r1, #2]
   83a32:	7083      	strb	r3, [r0, #2]
   83a34:	4660      	mov	r0, ip
   83a36:	4770      	bx	lr

00083a38 <memmove>:
   83a38:	4288      	cmp	r0, r1
   83a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
   83a3c:	d90d      	bls.n	83a5a <memmove+0x22>
   83a3e:	188b      	adds	r3, r1, r2
   83a40:	4298      	cmp	r0, r3
   83a42:	d20a      	bcs.n	83a5a <memmove+0x22>
   83a44:	1884      	adds	r4, r0, r2
   83a46:	2a00      	cmp	r2, #0
   83a48:	d051      	beq.n	83aee <memmove+0xb6>
   83a4a:	4622      	mov	r2, r4
   83a4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83a50:	4299      	cmp	r1, r3
   83a52:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83a56:	d1f9      	bne.n	83a4c <memmove+0x14>
   83a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83a5a:	2a0f      	cmp	r2, #15
   83a5c:	d948      	bls.n	83af0 <memmove+0xb8>
   83a5e:	ea41 0300 	orr.w	r3, r1, r0
   83a62:	079b      	lsls	r3, r3, #30
   83a64:	d146      	bne.n	83af4 <memmove+0xbc>
   83a66:	4615      	mov	r5, r2
   83a68:	f100 0410 	add.w	r4, r0, #16
   83a6c:	f101 0310 	add.w	r3, r1, #16
   83a70:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83a74:	3d10      	subs	r5, #16
   83a76:	f844 6c10 	str.w	r6, [r4, #-16]
   83a7a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83a7e:	2d0f      	cmp	r5, #15
   83a80:	f844 6c0c 	str.w	r6, [r4, #-12]
   83a84:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83a88:	f104 0410 	add.w	r4, r4, #16
   83a8c:	f844 6c18 	str.w	r6, [r4, #-24]
   83a90:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83a94:	f103 0310 	add.w	r3, r3, #16
   83a98:	f844 6c14 	str.w	r6, [r4, #-20]
   83a9c:	d8e8      	bhi.n	83a70 <memmove+0x38>
   83a9e:	f1a2 0310 	sub.w	r3, r2, #16
   83aa2:	f023 030f 	bic.w	r3, r3, #15
   83aa6:	f002 0e0f 	and.w	lr, r2, #15
   83aaa:	3310      	adds	r3, #16
   83aac:	f1be 0f03 	cmp.w	lr, #3
   83ab0:	4419      	add	r1, r3
   83ab2:	4403      	add	r3, r0
   83ab4:	d921      	bls.n	83afa <memmove+0xc2>
   83ab6:	460e      	mov	r6, r1
   83ab8:	4674      	mov	r4, lr
   83aba:	1f1d      	subs	r5, r3, #4
   83abc:	f856 7b04 	ldr.w	r7, [r6], #4
   83ac0:	3c04      	subs	r4, #4
   83ac2:	2c03      	cmp	r4, #3
   83ac4:	f845 7f04 	str.w	r7, [r5, #4]!
   83ac8:	d8f8      	bhi.n	83abc <memmove+0x84>
   83aca:	f1ae 0404 	sub.w	r4, lr, #4
   83ace:	f024 0403 	bic.w	r4, r4, #3
   83ad2:	3404      	adds	r4, #4
   83ad4:	4421      	add	r1, r4
   83ad6:	4423      	add	r3, r4
   83ad8:	f002 0203 	and.w	r2, r2, #3
   83adc:	b162      	cbz	r2, 83af8 <memmove+0xc0>
   83ade:	3b01      	subs	r3, #1
   83ae0:	440a      	add	r2, r1
   83ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
   83ae6:	428a      	cmp	r2, r1
   83ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
   83aec:	d1f9      	bne.n	83ae2 <memmove+0xaa>
   83aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83af0:	4603      	mov	r3, r0
   83af2:	e7f3      	b.n	83adc <memmove+0xa4>
   83af4:	4603      	mov	r3, r0
   83af6:	e7f2      	b.n	83ade <memmove+0xa6>
   83af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83afa:	4672      	mov	r2, lr
   83afc:	e7ee      	b.n	83adc <memmove+0xa4>
   83afe:	bf00      	nop

00083b00 <__malloc_lock>:
   83b00:	4801      	ldr	r0, [pc, #4]	; (83b08 <__malloc_lock+0x8>)
   83b02:	f7ff bba1 	b.w	83248 <__retarget_lock_acquire_recursive>
   83b06:	bf00      	nop
   83b08:	20071c74 	.word	0x20071c74

00083b0c <__malloc_unlock>:
   83b0c:	4801      	ldr	r0, [pc, #4]	; (83b14 <__malloc_unlock+0x8>)
   83b0e:	f7ff bb9d 	b.w	8324c <__retarget_lock_release_recursive>
   83b12:	bf00      	nop
   83b14:	20071c74 	.word	0x20071c74

00083b18 <_realloc_r>:
   83b18:	2900      	cmp	r1, #0
   83b1a:	f000 8094 	beq.w	83c46 <_realloc_r+0x12e>
   83b1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83b22:	460c      	mov	r4, r1
   83b24:	4615      	mov	r5, r2
   83b26:	b083      	sub	sp, #12
   83b28:	4680      	mov	r8, r0
   83b2a:	f105 060b 	add.w	r6, r5, #11
   83b2e:	f7ff ffe7 	bl	83b00 <__malloc_lock>
   83b32:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83b36:	2e16      	cmp	r6, #22
   83b38:	f02e 0703 	bic.w	r7, lr, #3
   83b3c:	f1a4 0908 	sub.w	r9, r4, #8
   83b40:	d83c      	bhi.n	83bbc <_realloc_r+0xa4>
   83b42:	2210      	movs	r2, #16
   83b44:	4616      	mov	r6, r2
   83b46:	42b5      	cmp	r5, r6
   83b48:	d83d      	bhi.n	83bc6 <_realloc_r+0xae>
   83b4a:	4297      	cmp	r7, r2
   83b4c:	da43      	bge.n	83bd6 <_realloc_r+0xbe>
   83b4e:	4bc6      	ldr	r3, [pc, #792]	; (83e68 <_realloc_r+0x350>)
   83b50:	eb09 0007 	add.w	r0, r9, r7
   83b54:	6899      	ldr	r1, [r3, #8]
   83b56:	4288      	cmp	r0, r1
   83b58:	f000 80c3 	beq.w	83ce2 <_realloc_r+0x1ca>
   83b5c:	6843      	ldr	r3, [r0, #4]
   83b5e:	f023 0101 	bic.w	r1, r3, #1
   83b62:	4401      	add	r1, r0
   83b64:	6849      	ldr	r1, [r1, #4]
   83b66:	07c9      	lsls	r1, r1, #31
   83b68:	d54d      	bpl.n	83c06 <_realloc_r+0xee>
   83b6a:	f01e 0f01 	tst.w	lr, #1
   83b6e:	f000 809b 	beq.w	83ca8 <_realloc_r+0x190>
   83b72:	4629      	mov	r1, r5
   83b74:	4640      	mov	r0, r8
   83b76:	f7ff fbeb 	bl	83350 <_malloc_r>
   83b7a:	4605      	mov	r5, r0
   83b7c:	2800      	cmp	r0, #0
   83b7e:	d03b      	beq.n	83bf8 <_realloc_r+0xe0>
   83b80:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83b84:	f1a0 0208 	sub.w	r2, r0, #8
   83b88:	f023 0301 	bic.w	r3, r3, #1
   83b8c:	444b      	add	r3, r9
   83b8e:	429a      	cmp	r2, r3
   83b90:	f000 812b 	beq.w	83dea <_realloc_r+0x2d2>
   83b94:	1f3a      	subs	r2, r7, #4
   83b96:	2a24      	cmp	r2, #36	; 0x24
   83b98:	f200 8118 	bhi.w	83dcc <_realloc_r+0x2b4>
   83b9c:	2a13      	cmp	r2, #19
   83b9e:	f200 80eb 	bhi.w	83d78 <_realloc_r+0x260>
   83ba2:	4603      	mov	r3, r0
   83ba4:	4622      	mov	r2, r4
   83ba6:	6811      	ldr	r1, [r2, #0]
   83ba8:	6019      	str	r1, [r3, #0]
   83baa:	6851      	ldr	r1, [r2, #4]
   83bac:	6059      	str	r1, [r3, #4]
   83bae:	6892      	ldr	r2, [r2, #8]
   83bb0:	609a      	str	r2, [r3, #8]
   83bb2:	4621      	mov	r1, r4
   83bb4:	4640      	mov	r0, r8
   83bb6:	f7ff f8ad 	bl	82d14 <_free_r>
   83bba:	e01d      	b.n	83bf8 <_realloc_r+0xe0>
   83bbc:	f026 0607 	bic.w	r6, r6, #7
   83bc0:	2e00      	cmp	r6, #0
   83bc2:	4632      	mov	r2, r6
   83bc4:	dabf      	bge.n	83b46 <_realloc_r+0x2e>
   83bc6:	2500      	movs	r5, #0
   83bc8:	230c      	movs	r3, #12
   83bca:	4628      	mov	r0, r5
   83bcc:	f8c8 3000 	str.w	r3, [r8]
   83bd0:	b003      	add	sp, #12
   83bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83bd6:	4625      	mov	r5, r4
   83bd8:	1bbb      	subs	r3, r7, r6
   83bda:	2b0f      	cmp	r3, #15
   83bdc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83be0:	d81d      	bhi.n	83c1e <_realloc_r+0x106>
   83be2:	f002 0201 	and.w	r2, r2, #1
   83be6:	433a      	orrs	r2, r7
   83be8:	eb09 0107 	add.w	r1, r9, r7
   83bec:	f8c9 2004 	str.w	r2, [r9, #4]
   83bf0:	684b      	ldr	r3, [r1, #4]
   83bf2:	f043 0301 	orr.w	r3, r3, #1
   83bf6:	604b      	str	r3, [r1, #4]
   83bf8:	4640      	mov	r0, r8
   83bfa:	f7ff ff87 	bl	83b0c <__malloc_unlock>
   83bfe:	4628      	mov	r0, r5
   83c00:	b003      	add	sp, #12
   83c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c06:	f023 0303 	bic.w	r3, r3, #3
   83c0a:	18f9      	adds	r1, r7, r3
   83c0c:	4291      	cmp	r1, r2
   83c0e:	db1d      	blt.n	83c4c <_realloc_r+0x134>
   83c10:	68c3      	ldr	r3, [r0, #12]
   83c12:	6882      	ldr	r2, [r0, #8]
   83c14:	4625      	mov	r5, r4
   83c16:	60d3      	str	r3, [r2, #12]
   83c18:	460f      	mov	r7, r1
   83c1a:	609a      	str	r2, [r3, #8]
   83c1c:	e7dc      	b.n	83bd8 <_realloc_r+0xc0>
   83c1e:	f002 0201 	and.w	r2, r2, #1
   83c22:	eb09 0106 	add.w	r1, r9, r6
   83c26:	f043 0301 	orr.w	r3, r3, #1
   83c2a:	4332      	orrs	r2, r6
   83c2c:	f8c9 2004 	str.w	r2, [r9, #4]
   83c30:	444f      	add	r7, r9
   83c32:	604b      	str	r3, [r1, #4]
   83c34:	687b      	ldr	r3, [r7, #4]
   83c36:	3108      	adds	r1, #8
   83c38:	f043 0301 	orr.w	r3, r3, #1
   83c3c:	607b      	str	r3, [r7, #4]
   83c3e:	4640      	mov	r0, r8
   83c40:	f7ff f868 	bl	82d14 <_free_r>
   83c44:	e7d8      	b.n	83bf8 <_realloc_r+0xe0>
   83c46:	4611      	mov	r1, r2
   83c48:	f7ff bb82 	b.w	83350 <_malloc_r>
   83c4c:	f01e 0f01 	tst.w	lr, #1
   83c50:	d18f      	bne.n	83b72 <_realloc_r+0x5a>
   83c52:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83c56:	eba9 0a01 	sub.w	sl, r9, r1
   83c5a:	f8da 1004 	ldr.w	r1, [sl, #4]
   83c5e:	f021 0103 	bic.w	r1, r1, #3
   83c62:	440b      	add	r3, r1
   83c64:	443b      	add	r3, r7
   83c66:	4293      	cmp	r3, r2
   83c68:	db26      	blt.n	83cb8 <_realloc_r+0x1a0>
   83c6a:	4655      	mov	r5, sl
   83c6c:	68c1      	ldr	r1, [r0, #12]
   83c6e:	6880      	ldr	r0, [r0, #8]
   83c70:	1f3a      	subs	r2, r7, #4
   83c72:	60c1      	str	r1, [r0, #12]
   83c74:	6088      	str	r0, [r1, #8]
   83c76:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83c7a:	f8da 100c 	ldr.w	r1, [sl, #12]
   83c7e:	2a24      	cmp	r2, #36	; 0x24
   83c80:	60c1      	str	r1, [r0, #12]
   83c82:	6088      	str	r0, [r1, #8]
   83c84:	d826      	bhi.n	83cd4 <_realloc_r+0x1bc>
   83c86:	2a13      	cmp	r2, #19
   83c88:	f240 8081 	bls.w	83d8e <_realloc_r+0x276>
   83c8c:	6821      	ldr	r1, [r4, #0]
   83c8e:	2a1b      	cmp	r2, #27
   83c90:	f8ca 1008 	str.w	r1, [sl, #8]
   83c94:	6861      	ldr	r1, [r4, #4]
   83c96:	f8ca 100c 	str.w	r1, [sl, #12]
   83c9a:	f200 80ad 	bhi.w	83df8 <_realloc_r+0x2e0>
   83c9e:	f104 0008 	add.w	r0, r4, #8
   83ca2:	f10a 0210 	add.w	r2, sl, #16
   83ca6:	e074      	b.n	83d92 <_realloc_r+0x27a>
   83ca8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83cac:	eba9 0a03 	sub.w	sl, r9, r3
   83cb0:	f8da 1004 	ldr.w	r1, [sl, #4]
   83cb4:	f021 0103 	bic.w	r1, r1, #3
   83cb8:	187b      	adds	r3, r7, r1
   83cba:	4293      	cmp	r3, r2
   83cbc:	f6ff af59 	blt.w	83b72 <_realloc_r+0x5a>
   83cc0:	4655      	mov	r5, sl
   83cc2:	f8da 100c 	ldr.w	r1, [sl, #12]
   83cc6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83cca:	1f3a      	subs	r2, r7, #4
   83ccc:	2a24      	cmp	r2, #36	; 0x24
   83cce:	60c1      	str	r1, [r0, #12]
   83cd0:	6088      	str	r0, [r1, #8]
   83cd2:	d9d8      	bls.n	83c86 <_realloc_r+0x16e>
   83cd4:	4621      	mov	r1, r4
   83cd6:	4628      	mov	r0, r5
   83cd8:	461f      	mov	r7, r3
   83cda:	46d1      	mov	r9, sl
   83cdc:	f7ff feac 	bl	83a38 <memmove>
   83ce0:	e77a      	b.n	83bd8 <_realloc_r+0xc0>
   83ce2:	6841      	ldr	r1, [r0, #4]
   83ce4:	f106 0010 	add.w	r0, r6, #16
   83ce8:	f021 0b03 	bic.w	fp, r1, #3
   83cec:	44bb      	add	fp, r7
   83cee:	4583      	cmp	fp, r0
   83cf0:	da58      	bge.n	83da4 <_realloc_r+0x28c>
   83cf2:	f01e 0f01 	tst.w	lr, #1
   83cf6:	f47f af3c 	bne.w	83b72 <_realloc_r+0x5a>
   83cfa:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83cfe:	eba9 0a01 	sub.w	sl, r9, r1
   83d02:	f8da 1004 	ldr.w	r1, [sl, #4]
   83d06:	f021 0103 	bic.w	r1, r1, #3
   83d0a:	448b      	add	fp, r1
   83d0c:	4558      	cmp	r0, fp
   83d0e:	dcd3      	bgt.n	83cb8 <_realloc_r+0x1a0>
   83d10:	4655      	mov	r5, sl
   83d12:	f8da 100c 	ldr.w	r1, [sl, #12]
   83d16:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83d1a:	1f3a      	subs	r2, r7, #4
   83d1c:	2a24      	cmp	r2, #36	; 0x24
   83d1e:	60c1      	str	r1, [r0, #12]
   83d20:	6088      	str	r0, [r1, #8]
   83d22:	f200 808d 	bhi.w	83e40 <_realloc_r+0x328>
   83d26:	2a13      	cmp	r2, #19
   83d28:	f240 8087 	bls.w	83e3a <_realloc_r+0x322>
   83d2c:	6821      	ldr	r1, [r4, #0]
   83d2e:	2a1b      	cmp	r2, #27
   83d30:	f8ca 1008 	str.w	r1, [sl, #8]
   83d34:	6861      	ldr	r1, [r4, #4]
   83d36:	f8ca 100c 	str.w	r1, [sl, #12]
   83d3a:	f200 8088 	bhi.w	83e4e <_realloc_r+0x336>
   83d3e:	f104 0108 	add.w	r1, r4, #8
   83d42:	f10a 0210 	add.w	r2, sl, #16
   83d46:	6808      	ldr	r0, [r1, #0]
   83d48:	6010      	str	r0, [r2, #0]
   83d4a:	6848      	ldr	r0, [r1, #4]
   83d4c:	6050      	str	r0, [r2, #4]
   83d4e:	6889      	ldr	r1, [r1, #8]
   83d50:	6091      	str	r1, [r2, #8]
   83d52:	ebab 0206 	sub.w	r2, fp, r6
   83d56:	eb0a 0106 	add.w	r1, sl, r6
   83d5a:	f042 0201 	orr.w	r2, r2, #1
   83d5e:	6099      	str	r1, [r3, #8]
   83d60:	604a      	str	r2, [r1, #4]
   83d62:	f8da 3004 	ldr.w	r3, [sl, #4]
   83d66:	4640      	mov	r0, r8
   83d68:	f003 0301 	and.w	r3, r3, #1
   83d6c:	431e      	orrs	r6, r3
   83d6e:	f8ca 6004 	str.w	r6, [sl, #4]
   83d72:	f7ff fecb 	bl	83b0c <__malloc_unlock>
   83d76:	e742      	b.n	83bfe <_realloc_r+0xe6>
   83d78:	6823      	ldr	r3, [r4, #0]
   83d7a:	2a1b      	cmp	r2, #27
   83d7c:	6003      	str	r3, [r0, #0]
   83d7e:	6863      	ldr	r3, [r4, #4]
   83d80:	6043      	str	r3, [r0, #4]
   83d82:	d827      	bhi.n	83dd4 <_realloc_r+0x2bc>
   83d84:	f100 0308 	add.w	r3, r0, #8
   83d88:	f104 0208 	add.w	r2, r4, #8
   83d8c:	e70b      	b.n	83ba6 <_realloc_r+0x8e>
   83d8e:	4620      	mov	r0, r4
   83d90:	462a      	mov	r2, r5
   83d92:	6801      	ldr	r1, [r0, #0]
   83d94:	461f      	mov	r7, r3
   83d96:	6011      	str	r1, [r2, #0]
   83d98:	6841      	ldr	r1, [r0, #4]
   83d9a:	46d1      	mov	r9, sl
   83d9c:	6051      	str	r1, [r2, #4]
   83d9e:	6883      	ldr	r3, [r0, #8]
   83da0:	6093      	str	r3, [r2, #8]
   83da2:	e719      	b.n	83bd8 <_realloc_r+0xc0>
   83da4:	ebab 0b06 	sub.w	fp, fp, r6
   83da8:	eb09 0106 	add.w	r1, r9, r6
   83dac:	f04b 0201 	orr.w	r2, fp, #1
   83db0:	6099      	str	r1, [r3, #8]
   83db2:	604a      	str	r2, [r1, #4]
   83db4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83db8:	4640      	mov	r0, r8
   83dba:	f003 0301 	and.w	r3, r3, #1
   83dbe:	431e      	orrs	r6, r3
   83dc0:	f844 6c04 	str.w	r6, [r4, #-4]
   83dc4:	f7ff fea2 	bl	83b0c <__malloc_unlock>
   83dc8:	4625      	mov	r5, r4
   83dca:	e718      	b.n	83bfe <_realloc_r+0xe6>
   83dcc:	4621      	mov	r1, r4
   83dce:	f7ff fe33 	bl	83a38 <memmove>
   83dd2:	e6ee      	b.n	83bb2 <_realloc_r+0x9a>
   83dd4:	68a3      	ldr	r3, [r4, #8]
   83dd6:	2a24      	cmp	r2, #36	; 0x24
   83dd8:	6083      	str	r3, [r0, #8]
   83dda:	68e3      	ldr	r3, [r4, #12]
   83ddc:	60c3      	str	r3, [r0, #12]
   83dde:	d018      	beq.n	83e12 <_realloc_r+0x2fa>
   83de0:	f100 0310 	add.w	r3, r0, #16
   83de4:	f104 0210 	add.w	r2, r4, #16
   83de8:	e6dd      	b.n	83ba6 <_realloc_r+0x8e>
   83dea:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83dee:	4625      	mov	r5, r4
   83df0:	f023 0303 	bic.w	r3, r3, #3
   83df4:	441f      	add	r7, r3
   83df6:	e6ef      	b.n	83bd8 <_realloc_r+0xc0>
   83df8:	68a1      	ldr	r1, [r4, #8]
   83dfa:	2a24      	cmp	r2, #36	; 0x24
   83dfc:	f8ca 1010 	str.w	r1, [sl, #16]
   83e00:	68e1      	ldr	r1, [r4, #12]
   83e02:	f8ca 1014 	str.w	r1, [sl, #20]
   83e06:	d00d      	beq.n	83e24 <_realloc_r+0x30c>
   83e08:	f104 0010 	add.w	r0, r4, #16
   83e0c:	f10a 0218 	add.w	r2, sl, #24
   83e10:	e7bf      	b.n	83d92 <_realloc_r+0x27a>
   83e12:	6922      	ldr	r2, [r4, #16]
   83e14:	f100 0318 	add.w	r3, r0, #24
   83e18:	6102      	str	r2, [r0, #16]
   83e1a:	6961      	ldr	r1, [r4, #20]
   83e1c:	f104 0218 	add.w	r2, r4, #24
   83e20:	6141      	str	r1, [r0, #20]
   83e22:	e6c0      	b.n	83ba6 <_realloc_r+0x8e>
   83e24:	6922      	ldr	r2, [r4, #16]
   83e26:	f104 0018 	add.w	r0, r4, #24
   83e2a:	f8ca 2018 	str.w	r2, [sl, #24]
   83e2e:	6961      	ldr	r1, [r4, #20]
   83e30:	f10a 0220 	add.w	r2, sl, #32
   83e34:	f8ca 101c 	str.w	r1, [sl, #28]
   83e38:	e7ab      	b.n	83d92 <_realloc_r+0x27a>
   83e3a:	4621      	mov	r1, r4
   83e3c:	462a      	mov	r2, r5
   83e3e:	e782      	b.n	83d46 <_realloc_r+0x22e>
   83e40:	4621      	mov	r1, r4
   83e42:	4628      	mov	r0, r5
   83e44:	9301      	str	r3, [sp, #4]
   83e46:	f7ff fdf7 	bl	83a38 <memmove>
   83e4a:	9b01      	ldr	r3, [sp, #4]
   83e4c:	e781      	b.n	83d52 <_realloc_r+0x23a>
   83e4e:	68a1      	ldr	r1, [r4, #8]
   83e50:	2a24      	cmp	r2, #36	; 0x24
   83e52:	f8ca 1010 	str.w	r1, [sl, #16]
   83e56:	68e1      	ldr	r1, [r4, #12]
   83e58:	f8ca 1014 	str.w	r1, [sl, #20]
   83e5c:	d006      	beq.n	83e6c <_realloc_r+0x354>
   83e5e:	f104 0110 	add.w	r1, r4, #16
   83e62:	f10a 0218 	add.w	r2, sl, #24
   83e66:	e76e      	b.n	83d46 <_realloc_r+0x22e>
   83e68:	200706d0 	.word	0x200706d0
   83e6c:	6922      	ldr	r2, [r4, #16]
   83e6e:	f104 0118 	add.w	r1, r4, #24
   83e72:	f8ca 2018 	str.w	r2, [sl, #24]
   83e76:	6960      	ldr	r0, [r4, #20]
   83e78:	f10a 0220 	add.w	r2, sl, #32
   83e7c:	f8ca 001c 	str.w	r0, [sl, #28]
   83e80:	e761      	b.n	83d46 <_realloc_r+0x22e>
   83e82:	bf00      	nop

00083e84 <_sbrk_r>:
   83e84:	b538      	push	{r3, r4, r5, lr}
   83e86:	2300      	movs	r3, #0
   83e88:	4c06      	ldr	r4, [pc, #24]	; (83ea4 <_sbrk_r+0x20>)
   83e8a:	4605      	mov	r5, r0
   83e8c:	4608      	mov	r0, r1
   83e8e:	6023      	str	r3, [r4, #0]
   83e90:	f7fd f832 	bl	80ef8 <_sbrk>
   83e94:	1c43      	adds	r3, r0, #1
   83e96:	d000      	beq.n	83e9a <_sbrk_r+0x16>
   83e98:	bd38      	pop	{r3, r4, r5, pc}
   83e9a:	6823      	ldr	r3, [r4, #0]
   83e9c:	2b00      	cmp	r3, #0
   83e9e:	d0fb      	beq.n	83e98 <_sbrk_r+0x14>
   83ea0:	602b      	str	r3, [r5, #0]
   83ea2:	bd38      	pop	{r3, r4, r5, pc}
   83ea4:	20071c88 	.word	0x20071c88

00083ea8 <__sread>:
   83ea8:	b510      	push	{r4, lr}
   83eaa:	460c      	mov	r4, r1
   83eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83eb0:	f000 f9f4 	bl	8429c <_read_r>
   83eb4:	2800      	cmp	r0, #0
   83eb6:	db03      	blt.n	83ec0 <__sread+0x18>
   83eb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83eba:	4403      	add	r3, r0
   83ebc:	6523      	str	r3, [r4, #80]	; 0x50
   83ebe:	bd10      	pop	{r4, pc}
   83ec0:	89a3      	ldrh	r3, [r4, #12]
   83ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83ec6:	81a3      	strh	r3, [r4, #12]
   83ec8:	bd10      	pop	{r4, pc}
   83eca:	bf00      	nop

00083ecc <__swrite>:
   83ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ed0:	460c      	mov	r4, r1
   83ed2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83ed6:	461f      	mov	r7, r3
   83ed8:	05cb      	lsls	r3, r1, #23
   83eda:	4616      	mov	r6, r2
   83edc:	4605      	mov	r5, r0
   83ede:	d507      	bpl.n	83ef0 <__swrite+0x24>
   83ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83ee4:	2302      	movs	r3, #2
   83ee6:	2200      	movs	r2, #0
   83ee8:	f000 f9c2 	bl	84270 <_lseek_r>
   83eec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83ef0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83ef4:	81a1      	strh	r1, [r4, #12]
   83ef6:	463b      	mov	r3, r7
   83ef8:	4632      	mov	r2, r6
   83efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83efe:	4628      	mov	r0, r5
   83f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83f04:	f000 b8a2 	b.w	8404c <_write_r>

00083f08 <__sseek>:
   83f08:	b510      	push	{r4, lr}
   83f0a:	460c      	mov	r4, r1
   83f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83f10:	f000 f9ae 	bl	84270 <_lseek_r>
   83f14:	89a3      	ldrh	r3, [r4, #12]
   83f16:	1c42      	adds	r2, r0, #1
   83f18:	bf0e      	itee	eq
   83f1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83f1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83f22:	6520      	strne	r0, [r4, #80]	; 0x50
   83f24:	81a3      	strh	r3, [r4, #12]
   83f26:	bd10      	pop	{r4, pc}

00083f28 <__sclose>:
   83f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83f2c:	f000 b906 	b.w	8413c <_close_r>

00083f30 <__swbuf_r>:
   83f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f32:	460d      	mov	r5, r1
   83f34:	4614      	mov	r4, r2
   83f36:	4606      	mov	r6, r0
   83f38:	b110      	cbz	r0, 83f40 <__swbuf_r+0x10>
   83f3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83f3c:	2b00      	cmp	r3, #0
   83f3e:	d04b      	beq.n	83fd8 <__swbuf_r+0xa8>
   83f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83f44:	69a3      	ldr	r3, [r4, #24]
   83f46:	b291      	uxth	r1, r2
   83f48:	0708      	lsls	r0, r1, #28
   83f4a:	60a3      	str	r3, [r4, #8]
   83f4c:	d539      	bpl.n	83fc2 <__swbuf_r+0x92>
   83f4e:	6923      	ldr	r3, [r4, #16]
   83f50:	2b00      	cmp	r3, #0
   83f52:	d036      	beq.n	83fc2 <__swbuf_r+0x92>
   83f54:	b2ed      	uxtb	r5, r5
   83f56:	0489      	lsls	r1, r1, #18
   83f58:	462f      	mov	r7, r5
   83f5a:	d515      	bpl.n	83f88 <__swbuf_r+0x58>
   83f5c:	6822      	ldr	r2, [r4, #0]
   83f5e:	6961      	ldr	r1, [r4, #20]
   83f60:	1ad3      	subs	r3, r2, r3
   83f62:	428b      	cmp	r3, r1
   83f64:	da1c      	bge.n	83fa0 <__swbuf_r+0x70>
   83f66:	3301      	adds	r3, #1
   83f68:	68a1      	ldr	r1, [r4, #8]
   83f6a:	1c50      	adds	r0, r2, #1
   83f6c:	3901      	subs	r1, #1
   83f6e:	60a1      	str	r1, [r4, #8]
   83f70:	6020      	str	r0, [r4, #0]
   83f72:	7015      	strb	r5, [r2, #0]
   83f74:	6962      	ldr	r2, [r4, #20]
   83f76:	429a      	cmp	r2, r3
   83f78:	d01a      	beq.n	83fb0 <__swbuf_r+0x80>
   83f7a:	89a3      	ldrh	r3, [r4, #12]
   83f7c:	07db      	lsls	r3, r3, #31
   83f7e:	d501      	bpl.n	83f84 <__swbuf_r+0x54>
   83f80:	2d0a      	cmp	r5, #10
   83f82:	d015      	beq.n	83fb0 <__swbuf_r+0x80>
   83f84:	4638      	mov	r0, r7
   83f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f88:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83f8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83f8e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83f92:	81a2      	strh	r2, [r4, #12]
   83f94:	6822      	ldr	r2, [r4, #0]
   83f96:	6661      	str	r1, [r4, #100]	; 0x64
   83f98:	6961      	ldr	r1, [r4, #20]
   83f9a:	1ad3      	subs	r3, r2, r3
   83f9c:	428b      	cmp	r3, r1
   83f9e:	dbe2      	blt.n	83f66 <__swbuf_r+0x36>
   83fa0:	4621      	mov	r1, r4
   83fa2:	4630      	mov	r0, r6
   83fa4:	f7fe fd38 	bl	82a18 <_fflush_r>
   83fa8:	b940      	cbnz	r0, 83fbc <__swbuf_r+0x8c>
   83faa:	2301      	movs	r3, #1
   83fac:	6822      	ldr	r2, [r4, #0]
   83fae:	e7db      	b.n	83f68 <__swbuf_r+0x38>
   83fb0:	4621      	mov	r1, r4
   83fb2:	4630      	mov	r0, r6
   83fb4:	f7fe fd30 	bl	82a18 <_fflush_r>
   83fb8:	2800      	cmp	r0, #0
   83fba:	d0e3      	beq.n	83f84 <__swbuf_r+0x54>
   83fbc:	f04f 37ff 	mov.w	r7, #4294967295
   83fc0:	e7e0      	b.n	83f84 <__swbuf_r+0x54>
   83fc2:	4621      	mov	r1, r4
   83fc4:	4630      	mov	r0, r6
   83fc6:	f7fe fc17 	bl	827f8 <__swsetup_r>
   83fca:	2800      	cmp	r0, #0
   83fcc:	d1f6      	bne.n	83fbc <__swbuf_r+0x8c>
   83fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83fd2:	6923      	ldr	r3, [r4, #16]
   83fd4:	b291      	uxth	r1, r2
   83fd6:	e7bd      	b.n	83f54 <__swbuf_r+0x24>
   83fd8:	f7fe fd76 	bl	82ac8 <__sinit>
   83fdc:	e7b0      	b.n	83f40 <__swbuf_r+0x10>
   83fde:	bf00      	nop

00083fe0 <_wcrtomb_r>:
   83fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   83fe2:	4606      	mov	r6, r0
   83fe4:	b085      	sub	sp, #20
   83fe6:	461f      	mov	r7, r3
   83fe8:	b189      	cbz	r1, 8400e <_wcrtomb_r+0x2e>
   83fea:	4c10      	ldr	r4, [pc, #64]	; (8402c <_wcrtomb_r+0x4c>)
   83fec:	4d10      	ldr	r5, [pc, #64]	; (84030 <_wcrtomb_r+0x50>)
   83fee:	6824      	ldr	r4, [r4, #0]
   83ff0:	6b64      	ldr	r4, [r4, #52]	; 0x34
   83ff2:	2c00      	cmp	r4, #0
   83ff4:	bf08      	it	eq
   83ff6:	462c      	moveq	r4, r5
   83ff8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83ffc:	47a0      	blx	r4
   83ffe:	1c43      	adds	r3, r0, #1
   84000:	d103      	bne.n	8400a <_wcrtomb_r+0x2a>
   84002:	2200      	movs	r2, #0
   84004:	238a      	movs	r3, #138	; 0x8a
   84006:	603a      	str	r2, [r7, #0]
   84008:	6033      	str	r3, [r6, #0]
   8400a:	b005      	add	sp, #20
   8400c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8400e:	460c      	mov	r4, r1
   84010:	4a06      	ldr	r2, [pc, #24]	; (8402c <_wcrtomb_r+0x4c>)
   84012:	4d07      	ldr	r5, [pc, #28]	; (84030 <_wcrtomb_r+0x50>)
   84014:	6811      	ldr	r1, [r2, #0]
   84016:	4622      	mov	r2, r4
   84018:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8401a:	a901      	add	r1, sp, #4
   8401c:	2c00      	cmp	r4, #0
   8401e:	bf08      	it	eq
   84020:	462c      	moveq	r4, r5
   84022:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84026:	47a0      	blx	r4
   84028:	e7e9      	b.n	83ffe <_wcrtomb_r+0x1e>
   8402a:	bf00      	nop
   8402c:	20070134 	.word	0x20070134
   84030:	20070564 	.word	0x20070564

00084034 <__ascii_wctomb>:
   84034:	b119      	cbz	r1, 8403e <__ascii_wctomb+0xa>
   84036:	2aff      	cmp	r2, #255	; 0xff
   84038:	d803      	bhi.n	84042 <__ascii_wctomb+0xe>
   8403a:	700a      	strb	r2, [r1, #0]
   8403c:	2101      	movs	r1, #1
   8403e:	4608      	mov	r0, r1
   84040:	4770      	bx	lr
   84042:	238a      	movs	r3, #138	; 0x8a
   84044:	f04f 31ff 	mov.w	r1, #4294967295
   84048:	6003      	str	r3, [r0, #0]
   8404a:	e7f8      	b.n	8403e <__ascii_wctomb+0xa>

0008404c <_write_r>:
   8404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8404e:	460e      	mov	r6, r1
   84050:	2500      	movs	r5, #0
   84052:	4c08      	ldr	r4, [pc, #32]	; (84074 <_write_r+0x28>)
   84054:	4611      	mov	r1, r2
   84056:	4607      	mov	r7, r0
   84058:	461a      	mov	r2, r3
   8405a:	4630      	mov	r0, r6
   8405c:	6025      	str	r5, [r4, #0]
   8405e:	f7fc faef 	bl	80640 <_write>
   84062:	1c43      	adds	r3, r0, #1
   84064:	d000      	beq.n	84068 <_write_r+0x1c>
   84066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84068:	6823      	ldr	r3, [r4, #0]
   8406a:	2b00      	cmp	r3, #0
   8406c:	d0fb      	beq.n	84066 <_write_r+0x1a>
   8406e:	603b      	str	r3, [r7, #0]
   84070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84072:	bf00      	nop
   84074:	20071c88 	.word	0x20071c88

00084078 <__register_exitproc>:
   84078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8407c:	4d2c      	ldr	r5, [pc, #176]	; (84130 <__register_exitproc+0xb8>)
   8407e:	4606      	mov	r6, r0
   84080:	6828      	ldr	r0, [r5, #0]
   84082:	4698      	mov	r8, r3
   84084:	460f      	mov	r7, r1
   84086:	4691      	mov	r9, r2
   84088:	f7ff f8de 	bl	83248 <__retarget_lock_acquire_recursive>
   8408c:	4b29      	ldr	r3, [pc, #164]	; (84134 <__register_exitproc+0xbc>)
   8408e:	681c      	ldr	r4, [r3, #0]
   84090:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   84094:	2b00      	cmp	r3, #0
   84096:	d03e      	beq.n	84116 <__register_exitproc+0x9e>
   84098:	685a      	ldr	r2, [r3, #4]
   8409a:	2a1f      	cmp	r2, #31
   8409c:	dc1c      	bgt.n	840d8 <__register_exitproc+0x60>
   8409e:	f102 0e01 	add.w	lr, r2, #1
   840a2:	b176      	cbz	r6, 840c2 <__register_exitproc+0x4a>
   840a4:	2101      	movs	r1, #1
   840a6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   840aa:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   840ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   840b2:	4091      	lsls	r1, r2
   840b4:	4308      	orrs	r0, r1
   840b6:	2e02      	cmp	r6, #2
   840b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   840bc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   840c0:	d023      	beq.n	8410a <__register_exitproc+0x92>
   840c2:	3202      	adds	r2, #2
   840c4:	f8c3 e004 	str.w	lr, [r3, #4]
   840c8:	6828      	ldr	r0, [r5, #0]
   840ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   840ce:	f7ff f8bd 	bl	8324c <__retarget_lock_release_recursive>
   840d2:	2000      	movs	r0, #0
   840d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   840d8:	4b17      	ldr	r3, [pc, #92]	; (84138 <__register_exitproc+0xc0>)
   840da:	b30b      	cbz	r3, 84120 <__register_exitproc+0xa8>
   840dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   840e0:	f7ff f92e 	bl	83340 <malloc>
   840e4:	4603      	mov	r3, r0
   840e6:	b1d8      	cbz	r0, 84120 <__register_exitproc+0xa8>
   840e8:	2000      	movs	r0, #0
   840ea:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   840ee:	f04f 0e01 	mov.w	lr, #1
   840f2:	6058      	str	r0, [r3, #4]
   840f4:	6019      	str	r1, [r3, #0]
   840f6:	4602      	mov	r2, r0
   840f8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   840fc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84100:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84104:	2e00      	cmp	r6, #0
   84106:	d0dc      	beq.n	840c2 <__register_exitproc+0x4a>
   84108:	e7cc      	b.n	840a4 <__register_exitproc+0x2c>
   8410a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8410e:	4301      	orrs	r1, r0
   84110:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84114:	e7d5      	b.n	840c2 <__register_exitproc+0x4a>
   84116:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8411a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8411e:	e7bb      	b.n	84098 <__register_exitproc+0x20>
   84120:	6828      	ldr	r0, [r5, #0]
   84122:	f7ff f893 	bl	8324c <__retarget_lock_release_recursive>
   84126:	f04f 30ff 	mov.w	r0, #4294967295
   8412a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8412e:	bf00      	nop
   84130:	20070560 	.word	0x20070560
   84134:	0008469c 	.word	0x0008469c
   84138:	00083341 	.word	0x00083341

0008413c <_close_r>:
   8413c:	b538      	push	{r3, r4, r5, lr}
   8413e:	2300      	movs	r3, #0
   84140:	4c06      	ldr	r4, [pc, #24]	; (8415c <_close_r+0x20>)
   84142:	4605      	mov	r5, r0
   84144:	4608      	mov	r0, r1
   84146:	6023      	str	r3, [r4, #0]
   84148:	f7fc fef2 	bl	80f30 <_close>
   8414c:	1c43      	adds	r3, r0, #1
   8414e:	d000      	beq.n	84152 <_close_r+0x16>
   84150:	bd38      	pop	{r3, r4, r5, pc}
   84152:	6823      	ldr	r3, [r4, #0]
   84154:	2b00      	cmp	r3, #0
   84156:	d0fb      	beq.n	84150 <_close_r+0x14>
   84158:	602b      	str	r3, [r5, #0]
   8415a:	bd38      	pop	{r3, r4, r5, pc}
   8415c:	20071c88 	.word	0x20071c88

00084160 <_fclose_r>:
   84160:	b570      	push	{r4, r5, r6, lr}
   84162:	b159      	cbz	r1, 8417c <_fclose_r+0x1c>
   84164:	4605      	mov	r5, r0
   84166:	460c      	mov	r4, r1
   84168:	b110      	cbz	r0, 84170 <_fclose_r+0x10>
   8416a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8416c:	2b00      	cmp	r3, #0
   8416e:	d03c      	beq.n	841ea <_fclose_r+0x8a>
   84170:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84172:	07d8      	lsls	r0, r3, #31
   84174:	d505      	bpl.n	84182 <_fclose_r+0x22>
   84176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8417a:	b92b      	cbnz	r3, 84188 <_fclose_r+0x28>
   8417c:	2600      	movs	r6, #0
   8417e:	4630      	mov	r0, r6
   84180:	bd70      	pop	{r4, r5, r6, pc}
   84182:	89a3      	ldrh	r3, [r4, #12]
   84184:	0599      	lsls	r1, r3, #22
   84186:	d53c      	bpl.n	84202 <_fclose_r+0xa2>
   84188:	4621      	mov	r1, r4
   8418a:	4628      	mov	r0, r5
   8418c:	f7fe fba8 	bl	828e0 <__sflush_r>
   84190:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84192:	4606      	mov	r6, r0
   84194:	b133      	cbz	r3, 841a4 <_fclose_r+0x44>
   84196:	69e1      	ldr	r1, [r4, #28]
   84198:	4628      	mov	r0, r5
   8419a:	4798      	blx	r3
   8419c:	2800      	cmp	r0, #0
   8419e:	bfb8      	it	lt
   841a0:	f04f 36ff 	movlt.w	r6, #4294967295
   841a4:	89a3      	ldrh	r3, [r4, #12]
   841a6:	061a      	lsls	r2, r3, #24
   841a8:	d422      	bmi.n	841f0 <_fclose_r+0x90>
   841aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   841ac:	b141      	cbz	r1, 841c0 <_fclose_r+0x60>
   841ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
   841b2:	4299      	cmp	r1, r3
   841b4:	d002      	beq.n	841bc <_fclose_r+0x5c>
   841b6:	4628      	mov	r0, r5
   841b8:	f7fe fdac 	bl	82d14 <_free_r>
   841bc:	2300      	movs	r3, #0
   841be:	6323      	str	r3, [r4, #48]	; 0x30
   841c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   841c2:	b121      	cbz	r1, 841ce <_fclose_r+0x6e>
   841c4:	4628      	mov	r0, r5
   841c6:	f7fe fda5 	bl	82d14 <_free_r>
   841ca:	2300      	movs	r3, #0
   841cc:	6463      	str	r3, [r4, #68]	; 0x44
   841ce:	f7fe fcab 	bl	82b28 <__sfp_lock_acquire>
   841d2:	2200      	movs	r2, #0
   841d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   841d6:	81a2      	strh	r2, [r4, #12]
   841d8:	07db      	lsls	r3, r3, #31
   841da:	d50e      	bpl.n	841fa <_fclose_r+0x9a>
   841dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   841de:	f7ff f831 	bl	83244 <__retarget_lock_close_recursive>
   841e2:	f7fe fca7 	bl	82b34 <__sfp_lock_release>
   841e6:	4630      	mov	r0, r6
   841e8:	bd70      	pop	{r4, r5, r6, pc}
   841ea:	f7fe fc6d 	bl	82ac8 <__sinit>
   841ee:	e7bf      	b.n	84170 <_fclose_r+0x10>
   841f0:	6921      	ldr	r1, [r4, #16]
   841f2:	4628      	mov	r0, r5
   841f4:	f7fe fd8e 	bl	82d14 <_free_r>
   841f8:	e7d7      	b.n	841aa <_fclose_r+0x4a>
   841fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   841fc:	f7ff f826 	bl	8324c <__retarget_lock_release_recursive>
   84200:	e7ec      	b.n	841dc <_fclose_r+0x7c>
   84202:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84204:	f7ff f820 	bl	83248 <__retarget_lock_acquire_recursive>
   84208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8420c:	2b00      	cmp	r3, #0
   8420e:	d1bb      	bne.n	84188 <_fclose_r+0x28>
   84210:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84212:	f016 0601 	ands.w	r6, r6, #1
   84216:	d1b1      	bne.n	8417c <_fclose_r+0x1c>
   84218:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8421a:	f7ff f817 	bl	8324c <__retarget_lock_release_recursive>
   8421e:	4630      	mov	r0, r6
   84220:	bd70      	pop	{r4, r5, r6, pc}
   84222:	bf00      	nop

00084224 <_fstat_r>:
   84224:	b570      	push	{r4, r5, r6, lr}
   84226:	460d      	mov	r5, r1
   84228:	2300      	movs	r3, #0
   8422a:	4c07      	ldr	r4, [pc, #28]	; (84248 <_fstat_r+0x24>)
   8422c:	4606      	mov	r6, r0
   8422e:	4611      	mov	r1, r2
   84230:	4628      	mov	r0, r5
   84232:	6023      	str	r3, [r4, #0]
   84234:	f7fc fe7f 	bl	80f36 <_fstat>
   84238:	1c43      	adds	r3, r0, #1
   8423a:	d000      	beq.n	8423e <_fstat_r+0x1a>
   8423c:	bd70      	pop	{r4, r5, r6, pc}
   8423e:	6823      	ldr	r3, [r4, #0]
   84240:	2b00      	cmp	r3, #0
   84242:	d0fb      	beq.n	8423c <_fstat_r+0x18>
   84244:	6033      	str	r3, [r6, #0]
   84246:	bd70      	pop	{r4, r5, r6, pc}
   84248:	20071c88 	.word	0x20071c88

0008424c <_isatty_r>:
   8424c:	b538      	push	{r3, r4, r5, lr}
   8424e:	2300      	movs	r3, #0
   84250:	4c06      	ldr	r4, [pc, #24]	; (8426c <_isatty_r+0x20>)
   84252:	4605      	mov	r5, r0
   84254:	4608      	mov	r0, r1
   84256:	6023      	str	r3, [r4, #0]
   84258:	f7fc fe72 	bl	80f40 <_isatty>
   8425c:	1c43      	adds	r3, r0, #1
   8425e:	d000      	beq.n	84262 <_isatty_r+0x16>
   84260:	bd38      	pop	{r3, r4, r5, pc}
   84262:	6823      	ldr	r3, [r4, #0]
   84264:	2b00      	cmp	r3, #0
   84266:	d0fb      	beq.n	84260 <_isatty_r+0x14>
   84268:	602b      	str	r3, [r5, #0]
   8426a:	bd38      	pop	{r3, r4, r5, pc}
   8426c:	20071c88 	.word	0x20071c88

00084270 <_lseek_r>:
   84270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84272:	460e      	mov	r6, r1
   84274:	2500      	movs	r5, #0
   84276:	4c08      	ldr	r4, [pc, #32]	; (84298 <_lseek_r+0x28>)
   84278:	4611      	mov	r1, r2
   8427a:	4607      	mov	r7, r0
   8427c:	461a      	mov	r2, r3
   8427e:	4630      	mov	r0, r6
   84280:	6025      	str	r5, [r4, #0]
   84282:	f7fc fe5f 	bl	80f44 <_lseek>
   84286:	1c43      	adds	r3, r0, #1
   84288:	d000      	beq.n	8428c <_lseek_r+0x1c>
   8428a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8428c:	6823      	ldr	r3, [r4, #0]
   8428e:	2b00      	cmp	r3, #0
   84290:	d0fb      	beq.n	8428a <_lseek_r+0x1a>
   84292:	603b      	str	r3, [r7, #0]
   84294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84296:	bf00      	nop
   84298:	20071c88 	.word	0x20071c88

0008429c <_read_r>:
   8429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8429e:	460e      	mov	r6, r1
   842a0:	2500      	movs	r5, #0
   842a2:	4c08      	ldr	r4, [pc, #32]	; (842c4 <_read_r+0x28>)
   842a4:	4611      	mov	r1, r2
   842a6:	4607      	mov	r7, r0
   842a8:	461a      	mov	r2, r3
   842aa:	4630      	mov	r0, r6
   842ac:	6025      	str	r5, [r4, #0]
   842ae:	f7fc f8ff 	bl	804b0 <_read>
   842b2:	1c43      	adds	r3, r0, #1
   842b4:	d000      	beq.n	842b8 <_read_r+0x1c>
   842b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   842b8:	6823      	ldr	r3, [r4, #0]
   842ba:	2b00      	cmp	r3, #0
   842bc:	d0fb      	beq.n	842b6 <_read_r+0x1a>
   842be:	603b      	str	r3, [r7, #0]
   842c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   842c2:	bf00      	nop
   842c4:	20071c88 	.word	0x20071c88

000842c8 <__aeabi_uldivmod>:
   842c8:	b953      	cbnz	r3, 842e0 <__aeabi_uldivmod+0x18>
   842ca:	b94a      	cbnz	r2, 842e0 <__aeabi_uldivmod+0x18>
   842cc:	2900      	cmp	r1, #0
   842ce:	bf08      	it	eq
   842d0:	2800      	cmpeq	r0, #0
   842d2:	bf1c      	itt	ne
   842d4:	f04f 31ff 	movne.w	r1, #4294967295
   842d8:	f04f 30ff 	movne.w	r0, #4294967295
   842dc:	f000 b97a 	b.w	845d4 <__aeabi_idiv0>
   842e0:	f1ad 0c08 	sub.w	ip, sp, #8
   842e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   842e8:	f000 f806 	bl	842f8 <__udivmoddi4>
   842ec:	f8dd e004 	ldr.w	lr, [sp, #4]
   842f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   842f4:	b004      	add	sp, #16
   842f6:	4770      	bx	lr

000842f8 <__udivmoddi4>:
   842f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   842fc:	468c      	mov	ip, r1
   842fe:	460e      	mov	r6, r1
   84300:	4604      	mov	r4, r0
   84302:	9d08      	ldr	r5, [sp, #32]
   84304:	2b00      	cmp	r3, #0
   84306:	d150      	bne.n	843aa <__udivmoddi4+0xb2>
   84308:	428a      	cmp	r2, r1
   8430a:	4617      	mov	r7, r2
   8430c:	d96c      	bls.n	843e8 <__udivmoddi4+0xf0>
   8430e:	fab2 fe82 	clz	lr, r2
   84312:	f1be 0f00 	cmp.w	lr, #0
   84316:	d00b      	beq.n	84330 <__udivmoddi4+0x38>
   84318:	f1ce 0c20 	rsb	ip, lr, #32
   8431c:	fa01 f60e 	lsl.w	r6, r1, lr
   84320:	fa20 fc0c 	lsr.w	ip, r0, ip
   84324:	fa02 f70e 	lsl.w	r7, r2, lr
   84328:	ea4c 0c06 	orr.w	ip, ip, r6
   8432c:	fa00 f40e 	lsl.w	r4, r0, lr
   84330:	0c3a      	lsrs	r2, r7, #16
   84332:	fbbc f9f2 	udiv	r9, ip, r2
   84336:	b2bb      	uxth	r3, r7
   84338:	fb02 cc19 	mls	ip, r2, r9, ip
   8433c:	fb09 fa03 	mul.w	sl, r9, r3
   84340:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84344:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   84348:	45b2      	cmp	sl, r6
   8434a:	d90a      	bls.n	84362 <__udivmoddi4+0x6a>
   8434c:	19f6      	adds	r6, r6, r7
   8434e:	f109 31ff 	add.w	r1, r9, #4294967295
   84352:	f080 8125 	bcs.w	845a0 <__udivmoddi4+0x2a8>
   84356:	45b2      	cmp	sl, r6
   84358:	f240 8122 	bls.w	845a0 <__udivmoddi4+0x2a8>
   8435c:	f1a9 0902 	sub.w	r9, r9, #2
   84360:	443e      	add	r6, r7
   84362:	eba6 060a 	sub.w	r6, r6, sl
   84366:	fbb6 f0f2 	udiv	r0, r6, r2
   8436a:	fb02 6610 	mls	r6, r2, r0, r6
   8436e:	fb00 f303 	mul.w	r3, r0, r3
   84372:	b2a4      	uxth	r4, r4
   84374:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   84378:	42a3      	cmp	r3, r4
   8437a:	d909      	bls.n	84390 <__udivmoddi4+0x98>
   8437c:	19e4      	adds	r4, r4, r7
   8437e:	f100 32ff 	add.w	r2, r0, #4294967295
   84382:	f080 810b 	bcs.w	8459c <__udivmoddi4+0x2a4>
   84386:	42a3      	cmp	r3, r4
   84388:	f240 8108 	bls.w	8459c <__udivmoddi4+0x2a4>
   8438c:	3802      	subs	r0, #2
   8438e:	443c      	add	r4, r7
   84390:	2100      	movs	r1, #0
   84392:	1ae4      	subs	r4, r4, r3
   84394:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84398:	2d00      	cmp	r5, #0
   8439a:	d062      	beq.n	84462 <__udivmoddi4+0x16a>
   8439c:	2300      	movs	r3, #0
   8439e:	fa24 f40e 	lsr.w	r4, r4, lr
   843a2:	602c      	str	r4, [r5, #0]
   843a4:	606b      	str	r3, [r5, #4]
   843a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   843aa:	428b      	cmp	r3, r1
   843ac:	d907      	bls.n	843be <__udivmoddi4+0xc6>
   843ae:	2d00      	cmp	r5, #0
   843b0:	d055      	beq.n	8445e <__udivmoddi4+0x166>
   843b2:	2100      	movs	r1, #0
   843b4:	e885 0041 	stmia.w	r5, {r0, r6}
   843b8:	4608      	mov	r0, r1
   843ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   843be:	fab3 f183 	clz	r1, r3
   843c2:	2900      	cmp	r1, #0
   843c4:	f040 808f 	bne.w	844e6 <__udivmoddi4+0x1ee>
   843c8:	42b3      	cmp	r3, r6
   843ca:	d302      	bcc.n	843d2 <__udivmoddi4+0xda>
   843cc:	4282      	cmp	r2, r0
   843ce:	f200 80fc 	bhi.w	845ca <__udivmoddi4+0x2d2>
   843d2:	1a84      	subs	r4, r0, r2
   843d4:	eb66 0603 	sbc.w	r6, r6, r3
   843d8:	2001      	movs	r0, #1
   843da:	46b4      	mov	ip, r6
   843dc:	2d00      	cmp	r5, #0
   843de:	d040      	beq.n	84462 <__udivmoddi4+0x16a>
   843e0:	e885 1010 	stmia.w	r5, {r4, ip}
   843e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   843e8:	b912      	cbnz	r2, 843f0 <__udivmoddi4+0xf8>
   843ea:	2701      	movs	r7, #1
   843ec:	fbb7 f7f2 	udiv	r7, r7, r2
   843f0:	fab7 fe87 	clz	lr, r7
   843f4:	f1be 0f00 	cmp.w	lr, #0
   843f8:	d135      	bne.n	84466 <__udivmoddi4+0x16e>
   843fa:	2101      	movs	r1, #1
   843fc:	1bf6      	subs	r6, r6, r7
   843fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84402:	fa1f f887 	uxth.w	r8, r7
   84406:	fbb6 f2fc 	udiv	r2, r6, ip
   8440a:	fb0c 6612 	mls	r6, ip, r2, r6
   8440e:	fb08 f002 	mul.w	r0, r8, r2
   84412:	0c23      	lsrs	r3, r4, #16
   84414:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   84418:	42b0      	cmp	r0, r6
   8441a:	d907      	bls.n	8442c <__udivmoddi4+0x134>
   8441c:	19f6      	adds	r6, r6, r7
   8441e:	f102 33ff 	add.w	r3, r2, #4294967295
   84422:	d202      	bcs.n	8442a <__udivmoddi4+0x132>
   84424:	42b0      	cmp	r0, r6
   84426:	f200 80d2 	bhi.w	845ce <__udivmoddi4+0x2d6>
   8442a:	461a      	mov	r2, r3
   8442c:	1a36      	subs	r6, r6, r0
   8442e:	fbb6 f0fc 	udiv	r0, r6, ip
   84432:	fb0c 6610 	mls	r6, ip, r0, r6
   84436:	fb08 f800 	mul.w	r8, r8, r0
   8443a:	b2a3      	uxth	r3, r4
   8443c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   84440:	45a0      	cmp	r8, r4
   84442:	d907      	bls.n	84454 <__udivmoddi4+0x15c>
   84444:	19e4      	adds	r4, r4, r7
   84446:	f100 33ff 	add.w	r3, r0, #4294967295
   8444a:	d202      	bcs.n	84452 <__udivmoddi4+0x15a>
   8444c:	45a0      	cmp	r8, r4
   8444e:	f200 80b9 	bhi.w	845c4 <__udivmoddi4+0x2cc>
   84452:	4618      	mov	r0, r3
   84454:	eba4 0408 	sub.w	r4, r4, r8
   84458:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8445c:	e79c      	b.n	84398 <__udivmoddi4+0xa0>
   8445e:	4629      	mov	r1, r5
   84460:	4628      	mov	r0, r5
   84462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84466:	fa07 f70e 	lsl.w	r7, r7, lr
   8446a:	f1ce 0320 	rsb	r3, lr, #32
   8446e:	fa26 f203 	lsr.w	r2, r6, r3
   84472:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84476:	fbb2 f1fc 	udiv	r1, r2, ip
   8447a:	fa1f f887 	uxth.w	r8, r7
   8447e:	fb0c 2211 	mls	r2, ip, r1, r2
   84482:	fa06 f60e 	lsl.w	r6, r6, lr
   84486:	fa20 f303 	lsr.w	r3, r0, r3
   8448a:	fb01 f908 	mul.w	r9, r1, r8
   8448e:	4333      	orrs	r3, r6
   84490:	0c1e      	lsrs	r6, r3, #16
   84492:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   84496:	45b1      	cmp	r9, r6
   84498:	fa00 f40e 	lsl.w	r4, r0, lr
   8449c:	d909      	bls.n	844b2 <__udivmoddi4+0x1ba>
   8449e:	19f6      	adds	r6, r6, r7
   844a0:	f101 32ff 	add.w	r2, r1, #4294967295
   844a4:	f080 808c 	bcs.w	845c0 <__udivmoddi4+0x2c8>
   844a8:	45b1      	cmp	r9, r6
   844aa:	f240 8089 	bls.w	845c0 <__udivmoddi4+0x2c8>
   844ae:	3902      	subs	r1, #2
   844b0:	443e      	add	r6, r7
   844b2:	eba6 0609 	sub.w	r6, r6, r9
   844b6:	fbb6 f0fc 	udiv	r0, r6, ip
   844ba:	fb0c 6210 	mls	r2, ip, r0, r6
   844be:	fb00 f908 	mul.w	r9, r0, r8
   844c2:	b29e      	uxth	r6, r3
   844c4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   844c8:	45b1      	cmp	r9, r6
   844ca:	d907      	bls.n	844dc <__udivmoddi4+0x1e4>
   844cc:	19f6      	adds	r6, r6, r7
   844ce:	f100 33ff 	add.w	r3, r0, #4294967295
   844d2:	d271      	bcs.n	845b8 <__udivmoddi4+0x2c0>
   844d4:	45b1      	cmp	r9, r6
   844d6:	d96f      	bls.n	845b8 <__udivmoddi4+0x2c0>
   844d8:	3802      	subs	r0, #2
   844da:	443e      	add	r6, r7
   844dc:	eba6 0609 	sub.w	r6, r6, r9
   844e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   844e4:	e78f      	b.n	84406 <__udivmoddi4+0x10e>
   844e6:	f1c1 0720 	rsb	r7, r1, #32
   844ea:	fa22 f807 	lsr.w	r8, r2, r7
   844ee:	408b      	lsls	r3, r1
   844f0:	ea48 0303 	orr.w	r3, r8, r3
   844f4:	fa26 f407 	lsr.w	r4, r6, r7
   844f8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   844fc:	fbb4 f9fe 	udiv	r9, r4, lr
   84500:	fa1f fc83 	uxth.w	ip, r3
   84504:	fb0e 4419 	mls	r4, lr, r9, r4
   84508:	408e      	lsls	r6, r1
   8450a:	fa20 f807 	lsr.w	r8, r0, r7
   8450e:	fb09 fa0c 	mul.w	sl, r9, ip
   84512:	ea48 0806 	orr.w	r8, r8, r6
   84516:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8451a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8451e:	45a2      	cmp	sl, r4
   84520:	fa02 f201 	lsl.w	r2, r2, r1
   84524:	fa00 f601 	lsl.w	r6, r0, r1
   84528:	d908      	bls.n	8453c <__udivmoddi4+0x244>
   8452a:	18e4      	adds	r4, r4, r3
   8452c:	f109 30ff 	add.w	r0, r9, #4294967295
   84530:	d244      	bcs.n	845bc <__udivmoddi4+0x2c4>
   84532:	45a2      	cmp	sl, r4
   84534:	d942      	bls.n	845bc <__udivmoddi4+0x2c4>
   84536:	f1a9 0902 	sub.w	r9, r9, #2
   8453a:	441c      	add	r4, r3
   8453c:	eba4 040a 	sub.w	r4, r4, sl
   84540:	fbb4 f0fe 	udiv	r0, r4, lr
   84544:	fb0e 4410 	mls	r4, lr, r0, r4
   84548:	fb00 fc0c 	mul.w	ip, r0, ip
   8454c:	fa1f f888 	uxth.w	r8, r8
   84550:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   84554:	45a4      	cmp	ip, r4
   84556:	d907      	bls.n	84568 <__udivmoddi4+0x270>
   84558:	18e4      	adds	r4, r4, r3
   8455a:	f100 3eff 	add.w	lr, r0, #4294967295
   8455e:	d229      	bcs.n	845b4 <__udivmoddi4+0x2bc>
   84560:	45a4      	cmp	ip, r4
   84562:	d927      	bls.n	845b4 <__udivmoddi4+0x2bc>
   84564:	3802      	subs	r0, #2
   84566:	441c      	add	r4, r3
   84568:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8456c:	fba0 8902 	umull	r8, r9, r0, r2
   84570:	eba4 0c0c 	sub.w	ip, r4, ip
   84574:	45cc      	cmp	ip, r9
   84576:	46c2      	mov	sl, r8
   84578:	46ce      	mov	lr, r9
   8457a:	d315      	bcc.n	845a8 <__udivmoddi4+0x2b0>
   8457c:	d012      	beq.n	845a4 <__udivmoddi4+0x2ac>
   8457e:	b155      	cbz	r5, 84596 <__udivmoddi4+0x29e>
   84580:	ebb6 030a 	subs.w	r3, r6, sl
   84584:	eb6c 060e 	sbc.w	r6, ip, lr
   84588:	fa06 f707 	lsl.w	r7, r6, r7
   8458c:	40cb      	lsrs	r3, r1
   8458e:	431f      	orrs	r7, r3
   84590:	40ce      	lsrs	r6, r1
   84592:	602f      	str	r7, [r5, #0]
   84594:	606e      	str	r6, [r5, #4]
   84596:	2100      	movs	r1, #0
   84598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8459c:	4610      	mov	r0, r2
   8459e:	e6f7      	b.n	84390 <__udivmoddi4+0x98>
   845a0:	4689      	mov	r9, r1
   845a2:	e6de      	b.n	84362 <__udivmoddi4+0x6a>
   845a4:	4546      	cmp	r6, r8
   845a6:	d2ea      	bcs.n	8457e <__udivmoddi4+0x286>
   845a8:	ebb8 0a02 	subs.w	sl, r8, r2
   845ac:	eb69 0e03 	sbc.w	lr, r9, r3
   845b0:	3801      	subs	r0, #1
   845b2:	e7e4      	b.n	8457e <__udivmoddi4+0x286>
   845b4:	4670      	mov	r0, lr
   845b6:	e7d7      	b.n	84568 <__udivmoddi4+0x270>
   845b8:	4618      	mov	r0, r3
   845ba:	e78f      	b.n	844dc <__udivmoddi4+0x1e4>
   845bc:	4681      	mov	r9, r0
   845be:	e7bd      	b.n	8453c <__udivmoddi4+0x244>
   845c0:	4611      	mov	r1, r2
   845c2:	e776      	b.n	844b2 <__udivmoddi4+0x1ba>
   845c4:	3802      	subs	r0, #2
   845c6:	443c      	add	r4, r7
   845c8:	e744      	b.n	84454 <__udivmoddi4+0x15c>
   845ca:	4608      	mov	r0, r1
   845cc:	e706      	b.n	843dc <__udivmoddi4+0xe4>
   845ce:	3a02      	subs	r2, #2
   845d0:	443e      	add	r6, r7
   845d2:	e72b      	b.n	8442c <__udivmoddi4+0x134>

000845d4 <__aeabi_idiv0>:
   845d4:	4770      	bx	lr
   845d6:	bf00      	nop
   845d8:	6c706d41 	.word	0x6c706d41
   845dc:	64757469 	.word	0x64757469
   845e0:	656c2065 	.word	0x656c2065
   845e4:	206c6576 	.word	0x206c6576
   845e8:	65746564 	.word	0x65746564
   845ec:	64657463 	.word	0x64657463
   845f0:	00000000 	.word	0x00000000
   845f4:	706d6153 	.word	0x706d6153
   845f8:	676e696c 	.word	0x676e696c
   845fc:	73616820 	.word	0x73616820
   84600:	65656220 	.word	0x65656220
   84604:	7473206e 	.word	0x7473206e
   84608:	65747261 	.word	0x65747261
   8460c:	00000064 	.word	0x00000064
   84610:	656d6954 	.word	0x656d6954
   84614:	61682072 	.word	0x61682072
   84618:	6f6e2073 	.word	0x6f6e2073
   8461c:	65622074 	.word	0x65622074
   84620:	63206e65 	.word	0x63206e65
   84624:	69666e6f 	.word	0x69666e6f
   84628:	65727567 	.word	0x65727567
   8462c:	00002164 	.word	0x00002164
   84630:	2d2d2d2d 	.word	0x2d2d2d2d
   84634:	2d2d2d2d 	.word	0x2d2d2d2d
   84638:	2d2d2d2d 	.word	0x2d2d2d2d
   8463c:	65206f4e 	.word	0x65206f4e
   84640:	20656764 	.word	0x20656764
   84644:	65746564 	.word	0x65746564
   84648:	64657463 	.word	0x64657463
   8464c:	2d2d2d2d 	.word	0x2d2d2d2d
   84650:	2d2d2d2d 	.word	0x2d2d2d2d
   84654:	2d2d2d2d 	.word	0x2d2d2d2d
   84658:	00000000 	.word	0x00000000
   8465c:	66667542 	.word	0x66667542
   84660:	76207265 	.word	0x76207265
   84664:	65756c61 	.word	0x65756c61
   84668:	25203a73 	.word	0x25203a73
   8466c:	69202c75 	.word	0x69202c75
   84670:	7865646e 	.word	0x7865646e
   84674:	7525203a 	.word	0x7525203a
   84678:	0000000a 	.word	0x0000000a
   8467c:	736e6f43 	.word	0x736e6f43
   84680:	20656c6f 	.word	0x20656c6f
   84684:	64616572 	.word	0x64616572
   84688:	00000a79 	.word	0x00000a79
   8468c:	3d3d3d3d 	.word	0x3d3d3d3d
   84690:	3d3d3d3d 	.word	0x3d3d3d3d
   84694:	3d3d3d3d 	.word	0x3d3d3d3d
   84698:	00000a3d 	.word	0x00000a3d

0008469c <_global_impure_ptr>:
   8469c:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   846ac:	46454443 00000000 33323130 37363534     CDEF....01234567
   846bc:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   846cc:	0000296c                                l)..

000846d0 <blanks.7217>:
   846d0:	20202020 20202020 20202020 20202020                     

000846e0 <zeroes.7218>:
   846e0:	30303030 30303030 30303030 30303030     0000000000000000
   846f0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00084700 <_ctype_>:
   84700:	20202000 20202020 28282020 20282828     .         ((((( 
   84710:	20202020 20202020 20202020 20202020                     
   84720:	10108820 10101010 10101010 10101010      ...............
   84730:	04040410 04040404 10040404 10101010     ................
   84740:	41411010 41414141 01010101 01010101     ..AAAAAA........
   84750:	01010101 01010101 01010101 10101010     ................
   84760:	42421010 42424242 02020202 02020202     ..BBBBBB........
   84770:	02020202 02020202 02020202 10101010     ................
   84780:	00000020 00000000 00000000 00000000      ...............
	...

00084804 <_init>:
   84804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84806:	bf00      	nop
   84808:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8480a:	bc08      	pop	{r3}
   8480c:	469e      	mov	lr, r3
   8480e:	4770      	bx	lr

00084810 <__init_array_start>:
   84810:	000828c1 	.word	0x000828c1

00084814 <__frame_dummy_init_array_entry>:
   84814:	00080119                                ....

00084818 <_fini>:
   84818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8481a:	bf00      	nop
   8481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8481e:	bc08      	pop	{r3}
   84820:	469e      	mov	lr, r3
   84822:	4770      	bx	lr

00084824 <__fini_array_start>:
   84824:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20071c64                                d.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00084035 00083895 00000000 00084700     5@...8.......G..
20070654:	000846fc 00084658 00084658 00084658     .F..XF..XF..XF..
20070664:	00084658 00084658 00084658 00084658     XF..XF..XF..XF..
20070674:	00084658 00084658 ffffffff ffffffff     XF..XF..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
