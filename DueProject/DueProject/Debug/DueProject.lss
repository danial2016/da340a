
DueProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005114  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085114  00085114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  0008511c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000011b0  20070ae0  00085bfc  00020ae0  2**2
                  ALLOC
  4 .stack        00002000  20071c90  00086dac  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c05a  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003f7e  00000000  00000000  0003cbbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000532f  00000000  00000000  00040b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c80  00000000  00000000  00045e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb8  00000000  00000000  00046ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a29d  00000000  00000000  000476a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013707  00000000  00000000  0005193e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00066155  00000000  00000000  00065045  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000029bc  00000000  00000000  000cb19c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	90 3c 07 20 5d 0e 08 00 59 0e 08 00 59 0e 08 00     .<. ]...Y...Y...
   80010:	59 0e 08 00 59 0e 08 00 59 0e 08 00 00 00 00 00     Y...Y...Y.......
	...
   8002c:	59 0e 08 00 59 0e 08 00 00 00 00 00 59 0e 08 00     Y...Y.......Y...
   8003c:	59 0e 08 00 59 0e 08 00 59 0e 08 00 59 0e 08 00     Y...Y...Y...Y...
   8004c:	59 0e 08 00 59 0e 08 00 59 0e 08 00 59 0e 08 00     Y...Y...Y...Y...
   8005c:	59 0e 08 00 59 0e 08 00 59 0e 08 00 00 00 00 00     Y...Y...Y.......
   8006c:	cd 0c 08 00 e1 0c 08 00 f5 0c 08 00 09 0d 08 00     ................
	...
   80084:	f5 06 08 00 59 0e 08 00 59 0e 08 00 59 0e 08 00     ....Y...Y...Y...
   80094:	59 0e 08 00 59 0e 08 00 59 0e 08 00 59 0e 08 00     Y...Y...Y...Y...
   800a4:	00 00 00 00 59 0e 08 00 95 01 08 00 59 0e 08 00     ....Y.......Y...
   800b4:	59 0e 08 00 59 0e 08 00 c1 01 08 00 59 0e 08 00     Y...Y.......Y...
   800c4:	59 0e 08 00 59 0e 08 00 59 0e 08 00 59 0e 08 00     Y...Y...Y...Y...
   800d4:	29 05 08 00 59 0e 08 00 59 0e 08 00 59 0e 08 00     )...Y...Y...Y...
   800e4:	59 0e 08 00 59 0e 08 00 59 0e 08 00 59 0e 08 00     Y...Y...Y...Y...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	0008511c 	.word	0x0008511c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008511c 	.word	0x0008511c
   80154:	20070ae4 	.word	0x20070ae4
   80158:	0008511c 	.word	0x0008511c
   8015c:	00000000 	.word	0x00000000

00080160 <pin_pulse_handler>:
	
}

void pin_pulse_handler(const uint32_t id, const uint32_t index)
{
	if ((id == ID_PIOA) && (index == PIO_PA14)){
   80160:	280b      	cmp	r0, #11
   80162:	d000      	beq.n	80166 <pin_pulse_handler+0x6>
   80164:	4770      	bx	lr
   80166:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   8016a:	d1fb      	bne.n	80164 <pin_pulse_handler+0x4>
{
   8016c:	b508      	push	{r3, lr}
		/* Count each high edge */
		if(pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA14)){
   8016e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80172:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80176:	4804      	ldr	r0, [pc, #16]	; (80188 <pin_pulse_handler+0x28>)
   80178:	4b04      	ldr	r3, [pc, #16]	; (8018c <pin_pulse_handler+0x2c>)
   8017a:	4798      	blx	r3
   8017c:	b118      	cbz	r0, 80186 <pin_pulse_handler+0x26>
			edges++;
   8017e:	4a04      	ldr	r2, [pc, #16]	; (80190 <pin_pulse_handler+0x30>)
   80180:	6813      	ldr	r3, [r2, #0]
   80182:	3301      	adds	r3, #1
   80184:	6013      	str	r3, [r2, #0]
   80186:	bd08      	pop	{r3, pc}
   80188:	400e0e00 	.word	0x400e0e00
   8018c:	000809b3 	.word	0x000809b3
   80190:	20070afc 	.word	0x20070afc

00080194 <TC0_Handler>:
{
   80194:	b500      	push	{lr}
   80196:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 0);	//The compare bit is cleared by reading the register, manual p. 915
   80198:	2100      	movs	r1, #0
   8019a:	4805      	ldr	r0, [pc, #20]	; (801b0 <TC0_Handler+0x1c>)
   8019c:	4b05      	ldr	r3, [pc, #20]	; (801b4 <TC0_Handler+0x20>)
   8019e:	4798      	blx	r3
   801a0:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
   801a2:	9b01      	ldr	r3, [sp, #4]
	adc_start(ADC);
   801a4:	4804      	ldr	r0, [pc, #16]	; (801b8 <TC0_Handler+0x24>)
   801a6:	4b05      	ldr	r3, [pc, #20]	; (801bc <TC0_Handler+0x28>)
   801a8:	4798      	blx	r3
}
   801aa:	b003      	add	sp, #12
   801ac:	f85d fb04 	ldr.w	pc, [sp], #4
   801b0:	40080000 	.word	0x40080000
   801b4:	000806bf 	.word	0x000806bf
   801b8:	400c0000 	.word	0x400c0000
   801bc:	0008066f 	.word	0x0008066f

000801c0 <TC4_Handler>:
void TC4_Handler(void){
   801c0:	b530      	push	{r4, r5, lr}
   801c2:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC1, 1);	//The compare bit is cleared by reading the register, manual p. 915
   801c4:	2101      	movs	r1, #1
   801c6:	4810      	ldr	r0, [pc, #64]	; (80208 <TC4_Handler+0x48>)
   801c8:	4b10      	ldr	r3, [pc, #64]	; (8020c <TC4_Handler+0x4c>)
   801ca:	4798      	blx	r3
   801cc:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
   801ce:	9b01      	ldr	r3, [sp, #4]
	cycles = (float)edges*(2.47); //we count two edges on a single cycle (period), may require additional scaling due to 
   801d0:	4c0f      	ldr	r4, [pc, #60]	; (80210 <TC4_Handler+0x50>)
   801d2:	6820      	ldr	r0, [r4, #0]
   801d4:	4b0f      	ldr	r3, [pc, #60]	; (80214 <TC4_Handler+0x54>)
   801d6:	4798      	blx	r3
   801d8:	4b0f      	ldr	r3, [pc, #60]	; (80218 <TC4_Handler+0x58>)
   801da:	4798      	blx	r3
   801dc:	a308      	add	r3, pc, #32	; (adr r3, 80200 <TC4_Handler+0x40>)
   801de:	e9d3 2300 	ldrd	r2, r3, [r3]
   801e2:	4d0e      	ldr	r5, [pc, #56]	; (8021c <TC4_Handler+0x5c>)
   801e4:	47a8      	blx	r5
   801e6:	4b0e      	ldr	r3, [pc, #56]	; (80220 <TC4_Handler+0x60>)
   801e8:	4798      	blx	r3
	frequency = (uint32_t)cycles; //f = cycles per sec
   801ea:	4b0e      	ldr	r3, [pc, #56]	; (80224 <TC4_Handler+0x64>)
   801ec:	4798      	blx	r3
	printf("Frequency: %lu Hz\n", frequency);
   801ee:	4601      	mov	r1, r0
   801f0:	480d      	ldr	r0, [pc, #52]	; (80228 <TC4_Handler+0x68>)
   801f2:	4b0e      	ldr	r3, [pc, #56]	; (8022c <TC4_Handler+0x6c>)
   801f4:	4798      	blx	r3
	edges = 0;
   801f6:	2300      	movs	r3, #0
   801f8:	6023      	str	r3, [r4, #0]
}
   801fa:	b003      	add	sp, #12
   801fc:	bd30      	pop	{r4, r5, pc}
   801fe:	bf00      	nop
   80200:	5c28f5c3 	.word	0x5c28f5c3
   80204:	4003c28f 	.word	0x4003c28f
   80208:	40084000 	.word	0x40084000
   8020c:	000806bf 	.word	0x000806bf
   80210:	20070afc 	.word	0x20070afc
   80214:	00081c75 	.word	0x00081c75
   80218:	0008159d 	.word	0x0008159d
   8021c:	00081645 	.word	0x00081645
   80220:	00081a69 	.word	0x00081a69
   80224:	00081fc5 	.word	0x00081fc5
   80228:	00084f30 	.word	0x00084f30
   8022c:	00082055 	.word	0x00082055

00080230 <init_pulse_pin>:
	
}


void init_pulse_pin(void)
{
   80230:	b530      	push	{r4, r5, lr}
   80232:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PIOA);
   80234:	200b      	movs	r0, #11
   80236:	4b0e      	ldr	r3, [pc, #56]	; (80270 <init_pulse_pin+0x40>)
   80238:	4798      	blx	r3
	pio_set_input(PIOA, PIO_PA14, PIO_PULLUP); // PA14 = pin 23
   8023a:	4c0e      	ldr	r4, [pc, #56]	; (80274 <init_pulse_pin+0x44>)
   8023c:	2201      	movs	r2, #1
   8023e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80242:	4620      	mov	r0, r4
   80244:	4b0c      	ldr	r3, [pc, #48]	; (80278 <init_pulse_pin+0x48>)
   80246:	4798      	blx	r3
	//pio_pull_up(PIOA, PIO_PA14, 0); //enable pull-down, when no input then input state is low
	pio_handler_set(PIOA, ID_PIOA, PIO_PA14, PIO_IT_EDGE, pin_pulse_handler);
   80248:	4b0c      	ldr	r3, [pc, #48]	; (8027c <init_pulse_pin+0x4c>)
   8024a:	9300      	str	r3, [sp, #0]
   8024c:	2340      	movs	r3, #64	; 0x40
   8024e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80252:	210b      	movs	r1, #11
   80254:	4620      	mov	r0, r4
   80256:	4d0a      	ldr	r5, [pc, #40]	; (80280 <init_pulse_pin+0x50>)
   80258:	47a8      	blx	r5
	pio_enable_interrupt(PIOA, PIO_PA14);
   8025a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8025e:	4620      	mov	r0, r4
   80260:	4b08      	ldr	r3, [pc, #32]	; (80284 <init_pulse_pin+0x54>)
   80262:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80264:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80268:	4b07      	ldr	r3, [pc, #28]	; (80288 <init_pulse_pin+0x58>)
   8026a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOA_IRQn);
}
   8026c:	b003      	add	sp, #12
   8026e:	bd30      	pop	{r4, r5, pc}
   80270:	00080e05 	.word	0x00080e05
   80274:	400e0e00 	.word	0x400e0e00
   80278:	00080a09 	.word	0x00080a09
   8027c:	00080161 	.word	0x00080161
   80280:	00080c5d 	.word	0x00080c5d
   80284:	00080a8f 	.word	0x00080a8f
   80288:	e000e100 	.word	0xe000e100

0008028c <TC1_init>:

void TC1_init(void)
{
   8028c:	b510      	push	{r4, lr}
	/* Configure power management of timer clocks (ID_TC4 = channel 1 of TC1) */
	pmc_enable_periph_clk(ID_TC4);
   8028e:	201f      	movs	r0, #31
   80290:	4b0d      	ldr	r3, [pc, #52]	; (802c8 <TC1_init+0x3c>)
   80292:	4798      	blx	r3
	tc_init(TC1, 1, 0 | TC_CMR_CPCTRG);
   80294:	4c0d      	ldr	r4, [pc, #52]	; (802cc <TC1_init+0x40>)
   80296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8029a:	2101      	movs	r1, #1
   8029c:	4620      	mov	r0, r4
   8029e:	4b0c      	ldr	r3, [pc, #48]	; (802d0 <TC1_init+0x44>)
   802a0:	4798      	blx	r3
	tc_write_rc(TC1, 1, 42000000); // frequency = 42MHz/42000000 = 1 Hz = 1 sec
   802a2:	4a0c      	ldr	r2, [pc, #48]	; (802d4 <TC1_init+0x48>)
   802a4:	2101      	movs	r1, #1
   802a6:	4620      	mov	r0, r4
   802a8:	4b0b      	ldr	r3, [pc, #44]	; (802d8 <TC1_init+0x4c>)
   802aa:	4798      	blx	r3
   802ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   802b0:	4b0a      	ldr	r3, [pc, #40]	; (802dc <TC1_init+0x50>)
   802b2:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) ID_TC4);
	tc_enable_interrupt(TC1, 1, TC_IER_CPCS);
   802b4:	2210      	movs	r2, #16
   802b6:	2101      	movs	r1, #1
   802b8:	4620      	mov	r0, r4
   802ba:	4b09      	ldr	r3, [pc, #36]	; (802e0 <TC1_init+0x54>)
   802bc:	4798      	blx	r3
	tc_start(TC1, 1);
   802be:	2101      	movs	r1, #1
   802c0:	4620      	mov	r0, r4
   802c2:	4b08      	ldr	r3, [pc, #32]	; (802e4 <TC1_init+0x58>)
   802c4:	4798      	blx	r3
   802c6:	bd10      	pop	{r4, pc}
   802c8:	00080e05 	.word	0x00080e05
   802cc:	40084000 	.word	0x40084000
   802d0:	00080687 	.word	0x00080687
   802d4:	0280de80 	.word	0x0280de80
   802d8:	000806af 	.word	0x000806af
   802dc:	e000e100 	.word	0xe000e100
   802e0:	000806b7 	.word	0x000806b7
   802e4:	0008069f 	.word	0x0008069f

000802e8 <pin_edge_handler>:
#include "configure_tc.h"
#include "amplitude_trigger.h"

void pin_edge_handler(const uint32_t id, const uint32_t index)
{
	if ((id == ID_PIOB) && (index == PIO_PB26)){
   802e8:	280c      	cmp	r0, #12
   802ea:	d000      	beq.n	802ee <pin_edge_handler+0x6>
   802ec:	4770      	bx	lr
   802ee:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
   802f2:	d1fb      	bne.n	802ec <pin_edge_handler+0x4>
{
   802f4:	b508      	push	{r3, lr}
		if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB26)){
   802f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   802fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   802fe:	480b      	ldr	r0, [pc, #44]	; (8032c <pin_edge_handler+0x44>)
   80300:	4b0b      	ldr	r3, [pc, #44]	; (80330 <pin_edge_handler+0x48>)
   80302:	4798      	blx	r3
   80304:	b130      	cbz	r0, 80314 <pin_edge_handler+0x2c>
			//puts("Amplitude level detected");
			
			if(configureDone == 1){ //access external variable, declaration has been done in the included h-file
   80306:	4b0b      	ldr	r3, [pc, #44]	; (80334 <pin_edge_handler+0x4c>)
   80308:	681b      	ldr	r3, [r3, #0]
   8030a:	2b01      	cmp	r3, #1
   8030c:	d003      	beq.n	80316 <pin_edge_handler+0x2e>
				tc_start(TC0, 0);
				pio_disable_interrupt(PIOB, PIO_PB26); //disable interrupt for now
			}
			else{
				puts("Timer has not been configured!");
   8030e:	480a      	ldr	r0, [pc, #40]	; (80338 <pin_edge_handler+0x50>)
   80310:	4b0a      	ldr	r3, [pc, #40]	; (8033c <pin_edge_handler+0x54>)
   80312:	4798      	blx	r3
   80314:	bd08      	pop	{r3, pc}
				tc_start(TC0, 0);
   80316:	2100      	movs	r1, #0
   80318:	4809      	ldr	r0, [pc, #36]	; (80340 <pin_edge_handler+0x58>)
   8031a:	4b0a      	ldr	r3, [pc, #40]	; (80344 <pin_edge_handler+0x5c>)
   8031c:	4798      	blx	r3
				pio_disable_interrupt(PIOB, PIO_PB26); //disable interrupt for now
   8031e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80322:	4802      	ldr	r0, [pc, #8]	; (8032c <pin_edge_handler+0x44>)
   80324:	4b08      	ldr	r3, [pc, #32]	; (80348 <pin_edge_handler+0x60>)
   80326:	4798      	blx	r3
   80328:	bd08      	pop	{r3, pc}
   8032a:	bf00      	nop
   8032c:	400e1000 	.word	0x400e1000
   80330:	000809b3 	.word	0x000809b3
   80334:	20070c24 	.word	0x20070c24
   80338:	00084f44 	.word	0x00084f44
   8033c:	000821b5 	.word	0x000821b5
   80340:	40080000 	.word	0x40080000
   80344:	0008069f 	.word	0x0008069f
   80348:	00080a93 	.word	0x00080a93

0008034c <init_amplitude_trigger>:
	}
	
}


void init_amplitude_trigger(void){
   8034c:	b530      	push	{r4, r5, lr}
   8034e:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PIOB);
   80350:	200c      	movs	r0, #12
   80352:	4b11      	ldr	r3, [pc, #68]	; (80398 <init_amplitude_trigger+0x4c>)
   80354:	4798      	blx	r3
	pio_set_input(PIOB, PIO_PB26, PIO_PULLUP);
   80356:	4c11      	ldr	r4, [pc, #68]	; (8039c <init_amplitude_trigger+0x50>)
   80358:	2201      	movs	r2, #1
   8035a:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8035e:	4620      	mov	r0, r4
   80360:	4b0f      	ldr	r3, [pc, #60]	; (803a0 <init_amplitude_trigger+0x54>)
   80362:	4798      	blx	r3
	pio_pull_up(PIOB, PIO_PB26, 0); //enable pull-down, when no input then input state is low
   80364:	2200      	movs	r2, #0
   80366:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8036a:	4620      	mov	r0, r4
   8036c:	4b0d      	ldr	r3, [pc, #52]	; (803a4 <init_amplitude_trigger+0x58>)
   8036e:	4798      	blx	r3
	pio_handler_set(PIOB, ID_PIOB, PIO_PB26, PIO_IT_EDGE, pin_edge_handler);
   80370:	4b0d      	ldr	r3, [pc, #52]	; (803a8 <init_amplitude_trigger+0x5c>)
   80372:	9300      	str	r3, [sp, #0]
   80374:	2340      	movs	r3, #64	; 0x40
   80376:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8037a:	210c      	movs	r1, #12
   8037c:	4620      	mov	r0, r4
   8037e:	4d0b      	ldr	r5, [pc, #44]	; (803ac <init_amplitude_trigger+0x60>)
   80380:	47a8      	blx	r5
	pio_enable_interrupt(PIOB, PIO_PB26);
   80382:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80386:	4620      	mov	r0, r4
   80388:	4b09      	ldr	r3, [pc, #36]	; (803b0 <init_amplitude_trigger+0x64>)
   8038a:	4798      	blx	r3
   8038c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80390:	4b08      	ldr	r3, [pc, #32]	; (803b4 <init_amplitude_trigger+0x68>)
   80392:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOB_IRQn);
}
   80394:	b003      	add	sp, #12
   80396:	bd30      	pop	{r4, r5, pc}
   80398:	00080e05 	.word	0x00080e05
   8039c:	400e1000 	.word	0x400e1000
   803a0:	00080a09 	.word	0x00080a09
   803a4:	000809a9 	.word	0x000809a9
   803a8:	000802e9 	.word	0x000802e9
   803ac:	00080c5d 	.word	0x00080c5d
   803b0:	00080a8f 	.word	0x00080a8f
   803b4:	e000e100 	.word	0xe000e100

000803b8 <smooth_values>:
	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
}

static void smooth_values(uint16_t *buffer)
{
   803b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   803bc:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
   803c0:	b085      	sub	sp, #20
   803c2:	f1a0 0802 	sub.w	r8, r0, #2
   803c6:	f10d 050e 	add.w	r5, sp, #14
   803ca:	f50d 5b80 	add.w	fp, sp, #4096	; 0x1000
   803ce:	f10b 0b0e 	add.w	fp, fp, #14
   803d2:	4b20      	ldr	r3, [pc, #128]	; (80454 <smooth_values+0x9c>)
   803d4:	685a      	ldr	r2, [r3, #4]
   803d6:	9200      	str	r2, [sp, #0]
   803d8:	681b      	ldr	r3, [r3, #0]
		for(int k = M-1; k >= 0; k--)
		{
			xbuff[k+1] = xbuff[k];
		}
		invalue = buffer[i];
		xbuff[0] =(float)invalue;
   803da:	462c      	mov	r4, r5
   803dc:	46c1      	mov	r9, r8
		float sum = 0;
		// Construct sum 
		for(int j = 0; j <= M; j++){
			sum += (xbuff[j]*b[j]);
   803de:	4f1e      	ldr	r7, [pc, #120]	; (80458 <smooth_values+0xa0>)
   803e0:	4e1e      	ldr	r6, [pc, #120]	; (8045c <smooth_values+0xa4>)
		}
		outvalue = (uint16_t)sum;
   803e2:	f8df a084 	ldr.w	sl, [pc, #132]	; 80468 <smooth_values+0xb0>
   803e6:	9502      	str	r5, [sp, #8]
   803e8:	461d      	mov	r5, r3
   803ea:	f8cd 800c 	str.w	r8, [sp, #12]
   803ee:	e001      	b.n	803f4 <smooth_values+0x3c>
			xbuff[k+1] = xbuff[k];
   803f0:	9500      	str	r5, [sp, #0]
		xbuff[0] =(float)invalue;
   803f2:	9d01      	ldr	r5, [sp, #4]
   803f4:	f839 0f02 	ldrh.w	r0, [r9, #2]!
   803f8:	4b19      	ldr	r3, [pc, #100]	; (80460 <smooth_values+0xa8>)
   803fa:	4798      	blx	r3
   803fc:	9001      	str	r0, [sp, #4]
			sum += (xbuff[j]*b[j]);
   803fe:	4919      	ldr	r1, [pc, #100]	; (80464 <smooth_values+0xac>)
   80400:	47b8      	blx	r7
   80402:	2100      	movs	r1, #0
   80404:	47b0      	blx	r6
   80406:	4680      	mov	r8, r0
   80408:	4916      	ldr	r1, [pc, #88]	; (80464 <smooth_values+0xac>)
   8040a:	4628      	mov	r0, r5
   8040c:	47b8      	blx	r7
   8040e:	4641      	mov	r1, r8
   80410:	47b0      	blx	r6
   80412:	4680      	mov	r8, r0
   80414:	4913      	ldr	r1, [pc, #76]	; (80464 <smooth_values+0xac>)
   80416:	9800      	ldr	r0, [sp, #0]
   80418:	47b8      	blx	r7
   8041a:	4641      	mov	r1, r8
   8041c:	47b0      	blx	r6
		outvalue = (uint16_t)sum;
   8041e:	47d0      	blx	sl
   80420:	f824 0f02 	strh.w	r0, [r4, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80424:	455c      	cmp	r4, fp
   80426:	d1e3      	bne.n	803f0 <smooth_values+0x38>
   80428:	462a      	mov	r2, r5
   8042a:	9d02      	ldr	r5, [sp, #8]
   8042c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   80430:	4b08      	ldr	r3, [pc, #32]	; (80454 <smooth_values+0x9c>)
   80432:	605a      	str	r2, [r3, #4]
   80434:	9a00      	ldr	r2, [sp, #0]
   80436:	609a      	str	r2, [r3, #8]
   80438:	9a01      	ldr	r2, [sp, #4]
   8043a:	601a      	str	r2, [r3, #0]
	//Copy values of temp_buff into old buffer
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
	{
		uint16_t *ip;       /* ip is a pointer to uint16_t */
		ip = &buffer[i];    /* sets ip to point to element i of buffer (contains address of buffer[i]) */
		*ip = temp_buff[i]; /* *ip points to content of buffer[i], this will change content of buffer[i] */
   8043c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
   80440:	f828 3f02 	strh.w	r3, [r8, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80444:	42ac      	cmp	r4, r5
   80446:	d1f9      	bne.n	8043c <smooth_values+0x84>
	}
}
   80448:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
   8044c:	b005      	add	sp, #20
   8044e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80452:	bf00      	nop
   80454:	20070b00 	.word	0x20070b00
   80458:	00081d25 	.word	0x00081d25
   8045c:	00081b15 	.word	0x00081b15
   80460:	00081c75 	.word	0x00081c75
   80464:	3eaaa64c 	.word	0x3eaaa64c
   80468:	00081fc5 	.word	0x00081fc5

0008046c <adc_setup>:
{
   8046c:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   8046e:	2025      	movs	r0, #37	; 0x25
   80470:	4b21      	ldr	r3, [pc, #132]	; (804f8 <adc_setup+0x8c>)
   80472:	4798      	blx	r3
	adc_init(ADC, sysclk_get_cpu_hz(), ADC_CLOCK, ADC_STARTUP_TIME_4);
   80474:	4c21      	ldr	r4, [pc, #132]	; (804fc <adc_setup+0x90>)
   80476:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   8047a:	4a21      	ldr	r2, [pc, #132]	; (80500 <adc_setup+0x94>)
   8047c:	4921      	ldr	r1, [pc, #132]	; (80504 <adc_setup+0x98>)
   8047e:	4620      	mov	r0, r4
   80480:	4d21      	ldr	r5, [pc, #132]	; (80508 <adc_setup+0x9c>)
   80482:	47a8      	blx	r5
	adc_configure_timing(ADC, TRACKING_TIME, SETTLING_TIME, TRANSFER_TIME);
   80484:	2300      	movs	r3, #0
   80486:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   8048a:	4619      	mov	r1, r3
   8048c:	4620      	mov	r0, r4
   8048e:	4d1f      	ldr	r5, [pc, #124]	; (8050c <adc_setup+0xa0>)
   80490:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   80492:	2100      	movs	r1, #0
   80494:	4620      	mov	r0, r4
   80496:	4b1e      	ldr	r3, [pc, #120]	; (80510 <adc_setup+0xa4>)
   80498:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);			//PB17 - AD8 for Arduino Due
   8049a:	210a      	movs	r1, #10
   8049c:	4620      	mov	r0, r4
   8049e:	4b1d      	ldr	r3, [pc, #116]	; (80514 <adc_setup+0xa8>)
   804a0:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   804a2:	2200      	movs	r2, #0
   804a4:	4611      	mov	r1, r2
   804a6:	4620      	mov	r0, r4
   804a8:	4b1b      	ldr	r3, [pc, #108]	; (80518 <adc_setup+0xac>)
   804aa:	4798      	blx	r3
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
   804ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   804b0:	b913      	cbnz	r3, 804b8 <adc_setup+0x4c>
   804b2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   804b6:	b1a3      	cbz	r3, 804e2 <adc_setup+0x76>
		if (p_adc->ADC_RNCR == 0)
   804b8:	4b10      	ldr	r3, [pc, #64]	; (804fc <adc_setup+0x90>)
   804ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   804be:	b93b      	cbnz	r3, 804d0 <adc_setup+0x64>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer; /* Receive Next Pointer Register */
   804c0:	4b0e      	ldr	r3, [pc, #56]	; (804fc <adc_setup+0x90>)
   804c2:	4a16      	ldr	r2, [pc, #88]	; (8051c <adc_setup+0xb0>)
   804c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;               /* Receive Next Counter Register */
   804c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   804cc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	adc_enable_interrupt(ADC, ADC_IER_RXBUFF);
   804d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804d4:	4809      	ldr	r0, [pc, #36]	; (804fc <adc_setup+0x90>)
   804d6:	4b12      	ldr	r3, [pc, #72]	; (80520 <adc_setup+0xb4>)
   804d8:	4798      	blx	r3
   804da:	2220      	movs	r2, #32
   804dc:	4b11      	ldr	r3, [pc, #68]	; (80524 <adc_setup+0xb8>)
   804de:	605a      	str	r2, [r3, #4]
   804e0:	bd38      	pop	{r3, r4, r5, pc}
		p_adc->ADC_RPR = (uint32_t) p_s_buffer; /* Receive Pointer Register */
   804e2:	4a0e      	ldr	r2, [pc, #56]	; (8051c <adc_setup+0xb0>)
   804e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;               /* Receive Counter Register */
   804e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   804ec:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN; /*ADC_PTCR = Transfer Control Register, RXTEN: Receiver Transfer Enable */
   804f0:	2201      	movs	r2, #1
   804f2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   804f6:	e7eb      	b.n	804d0 <adc_setup+0x64>
   804f8:	00080e05 	.word	0x00080e05
   804fc:	400c0000 	.word	0x400c0000
   80500:	0061a800 	.word	0x0061a800
   80504:	0501bd00 	.word	0x0501bd00
   80508:	00080601 	.word	0x00080601
   8050c:	00080653 	.word	0x00080653
   80510:	00080635 	.word	0x00080635
   80514:	00080675 	.word	0x00080675
   80518:	00080645 	.word	0x00080645
   8051c:	20070c5c 	.word	0x20070c5c
   80520:	0008067f 	.word	0x0008067f
   80524:	e000e100 	.word	0xe000e100

00080528 <ADC_Handler>:

void ADC_Handler(void){
   80528:	b510      	push	{r4, lr}
	/* Data transfer has been stopped (is complete) and RXBUFF status flag is set because ADC_RCR
	* and the ADC_RNCR have reached zero. Buffer of sample values is full.
	*/
	if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF) {
   8052a:	481d      	ldr	r0, [pc, #116]	; (805a0 <ADC_Handler+0x78>)
   8052c:	4b1d      	ldr	r3, [pc, #116]	; (805a4 <ADC_Handler+0x7c>)
   8052e:	4798      	blx	r3
   80530:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   80534:	d100      	bne.n	80538 <ADC_Handler+0x10>
   80536:	bd10      	pop	{r4, pc}
		tc_stop(TC0, 0);  
   80538:	2100      	movs	r1, #0
   8053a:	481b      	ldr	r0, [pc, #108]	; (805a8 <ADC_Handler+0x80>)
   8053c:	4b1b      	ldr	r3, [pc, #108]	; (805ac <ADC_Handler+0x84>)
   8053e:	4798      	blx	r3
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
		{
			printf("Buffer values: %u, index: %u\n", adc_buffer_sample_values[i], i);
		}
		*/
		smooth_values(adc_buffer_sample_values);
   80540:	4c1b      	ldr	r4, [pc, #108]	; (805b0 <ADC_Handler+0x88>)
   80542:	4620      	mov	r0, r4
   80544:	4b1b      	ldr	r3, [pc, #108]	; (805b4 <ADC_Handler+0x8c>)
   80546:	4798      	blx	r3
	    pio_enable_interrupt(PIOB, PIO_PB26); //re-enable edge-level detection 
   80548:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8054c:	481a      	ldr	r0, [pc, #104]	; (805b8 <ADC_Handler+0x90>)
   8054e:	4b1b      	ldr	r3, [pc, #108]	; (805bc <ADC_Handler+0x94>)
   80550:	4798      	blx	r3
		/* Clear sample buffer */
		memset((void *)&adc_buffer_sample_values, 0, sizeof(adc_buffer_sample_values));
   80552:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80556:	2100      	movs	r1, #0
   80558:	4620      	mov	r0, r4
   8055a:	4b19      	ldr	r3, [pc, #100]	; (805c0 <ADC_Handler+0x98>)
   8055c:	4798      	blx	r3
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
   8055e:	4b10      	ldr	r3, [pc, #64]	; (805a0 <ADC_Handler+0x78>)
   80560:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   80564:	b91b      	cbnz	r3, 8056e <ADC_Handler+0x46>
   80566:	4b0e      	ldr	r3, [pc, #56]	; (805a0 <ADC_Handler+0x78>)
   80568:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   8056c:	b16b      	cbz	r3, 8058a <ADC_Handler+0x62>
		if (p_adc->ADC_RNCR == 0)
   8056e:	4b0c      	ldr	r3, [pc, #48]	; (805a0 <ADC_Handler+0x78>)
   80570:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   80574:	2b00      	cmp	r3, #0
   80576:	d1de      	bne.n	80536 <ADC_Handler+0xe>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer; /* Receive Next Pointer Register */
   80578:	4b09      	ldr	r3, [pc, #36]	; (805a0 <ADC_Handler+0x78>)
   8057a:	4a0d      	ldr	r2, [pc, #52]	; (805b0 <ADC_Handler+0x88>)
   8057c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;               /* Receive Next Counter Register */
   80580:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80584:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		/* Read new buffer data. Necessary, otherwise buffer values are null/zero */
		adc_read_buffer(ADC, adc_buffer_sample_values, ADC_BUFFER_SIZE);
	}
}
   80588:	e7d5      	b.n	80536 <ADC_Handler+0xe>
		p_adc->ADC_RPR = (uint32_t) p_s_buffer; /* Receive Pointer Register */
   8058a:	4b05      	ldr	r3, [pc, #20]	; (805a0 <ADC_Handler+0x78>)
   8058c:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;               /* Receive Counter Register */
   80590:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80594:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN; /*ADC_PTCR = Transfer Control Register, RXTEN: Receiver Transfer Enable */
   80598:	2201      	movs	r2, #1
   8059a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   8059e:	bd10      	pop	{r4, pc}
   805a0:	400c0000 	.word	0x400c0000
   805a4:	00080683 	.word	0x00080683
   805a8:	40080000 	.word	0x40080000
   805ac:	000806a7 	.word	0x000806a7
   805b0:	20070c5c 	.word	0x20070c5c
   805b4:	000803b9 	.word	0x000803b9
   805b8:	400e1000 	.word	0x400e1000
   805bc:	00080a8f 	.word	0x00080a8f
   805c0:	0008207d 	.word	0x0008207d

000805c4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   805c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   805c8:	b980      	cbnz	r0, 805ec <_read+0x28>
   805ca:	460c      	mov	r4, r1
   805cc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   805ce:	2a00      	cmp	r2, #0
   805d0:	dd0f      	ble.n	805f2 <_read+0x2e>
   805d2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   805d4:	4e08      	ldr	r6, [pc, #32]	; (805f8 <_read+0x34>)
   805d6:	4d09      	ldr	r5, [pc, #36]	; (805fc <_read+0x38>)
   805d8:	6830      	ldr	r0, [r6, #0]
   805da:	4621      	mov	r1, r4
   805dc:	682b      	ldr	r3, [r5, #0]
   805de:	4798      	blx	r3
		ptr++;
   805e0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   805e2:	42bc      	cmp	r4, r7
   805e4:	d1f8      	bne.n	805d8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   805e6:	4640      	mov	r0, r8
   805e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   805ec:	f04f 38ff 	mov.w	r8, #4294967295
   805f0:	e7f9      	b.n	805e6 <_read+0x22>
	for (; len > 0; --len) {
   805f2:	4680      	mov	r8, r0
   805f4:	e7f7      	b.n	805e6 <_read+0x22>
   805f6:	bf00      	nop
   805f8:	20071c64 	.word	0x20071c64
   805fc:	20071c5c 	.word	0x20071c5c

00080600 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   80600:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   80602:	2401      	movs	r4, #1
   80604:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   80606:	2400      	movs	r4, #0
   80608:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   8060a:	f240 2502 	movw	r5, #514	; 0x202
   8060e:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   80612:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   80616:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   8061a:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   8061c:	0052      	lsls	r2, r2, #1
   8061e:	fbb1 f2f2 	udiv	r2, r1, r2
   80622:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   80624:	0212      	lsls	r2, r2, #8
   80626:	b292      	uxth	r2, r2
   80628:	432b      	orrs	r3, r5
   8062a:	431a      	orrs	r2, r3
   8062c:	6042      	str	r2, [r0, #4]
	return 0;
}
   8062e:	4620      	mov	r0, r4
   80630:	bc30      	pop	{r4, r5}
   80632:	4770      	bx	lr

00080634 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80634:	6843      	ldr	r3, [r0, #4]
   80636:	f023 0310 	bic.w	r3, r3, #16
   8063a:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   8063c:	6843      	ldr	r3, [r0, #4]
   8063e:	4319      	orrs	r1, r3
   80640:	6041      	str	r1, [r0, #4]
   80642:	4770      	bx	lr

00080644 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80644:	6843      	ldr	r3, [r0, #4]
   80646:	01d2      	lsls	r2, r2, #7
   80648:	b2d2      	uxtb	r2, r2
   8064a:	4319      	orrs	r1, r3
   8064c:	430a      	orrs	r2, r1
   8064e:	6042      	str	r2, [r0, #4]
   80650:	4770      	bx	lr

00080652 <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   80652:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80654:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80656:	0609      	lsls	r1, r1, #24
   80658:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   8065c:	4321      	orrs	r1, r4
   8065e:	430a      	orrs	r2, r1
   80660:	0719      	lsls	r1, r3, #28
   80662:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   80666:	4311      	orrs	r1, r2
   80668:	6041      	str	r1, [r0, #4]
}
   8066a:	bc10      	pop	{r4}
   8066c:	4770      	bx	lr

0008066e <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   8066e:	2302      	movs	r3, #2
   80670:	6003      	str	r3, [r0, #0]
   80672:	4770      	bx	lr

00080674 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80674:	2301      	movs	r3, #1
   80676:	fa03 f101 	lsl.w	r1, r3, r1
   8067a:	6101      	str	r1, [r0, #16]
   8067c:	4770      	bx	lr

0008067e <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   8067e:	6241      	str	r1, [r0, #36]	; 0x24
   80680:	4770      	bx	lr

00080682 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80682:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80684:	4770      	bx	lr

00080686 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80686:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80688:	0189      	lsls	r1, r1, #6
   8068a:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8068c:	2402      	movs	r4, #2
   8068e:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80690:	f04f 31ff 	mov.w	r1, #4294967295
   80694:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80696:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80698:	605a      	str	r2, [r3, #4]
}
   8069a:	bc10      	pop	{r4}
   8069c:	4770      	bx	lr

0008069e <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8069e:	0189      	lsls	r1, r1, #6
   806a0:	2305      	movs	r3, #5
   806a2:	5043      	str	r3, [r0, r1]
   806a4:	4770      	bx	lr

000806a6 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   806a6:	0189      	lsls	r1, r1, #6
   806a8:	2302      	movs	r3, #2
   806aa:	5043      	str	r3, [r0, r1]
   806ac:	4770      	bx	lr

000806ae <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   806ae:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   806b2:	61ca      	str	r2, [r1, #28]
   806b4:	4770      	bx	lr

000806b6 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806b6:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   806ba:	624a      	str	r2, [r1, #36]	; 0x24
   806bc:	4770      	bx	lr

000806be <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   806be:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   806c2:	6a08      	ldr	r0, [r1, #32]
}
   806c4:	4770      	bx	lr

000806c6 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   806c6:	6943      	ldr	r3, [r0, #20]
   806c8:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   806cc:	bf1d      	ittte	ne
   806ce:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   806d2:	61c1      	strne	r1, [r0, #28]
	return 0;
   806d4:	2000      	movne	r0, #0
		return 1;
   806d6:	2001      	moveq	r0, #1
}
   806d8:	4770      	bx	lr

000806da <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   806da:	6943      	ldr	r3, [r0, #20]
   806dc:	f013 0f01 	tst.w	r3, #1
   806e0:	d005      	beq.n	806ee <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   806e2:	6983      	ldr	r3, [r0, #24]
   806e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   806e8:	600b      	str	r3, [r1, #0]

	return 0;
   806ea:	2000      	movs	r0, #0
   806ec:	4770      	bx	lr
		return 1;
   806ee:	2001      	movs	r0, #1
}
   806f0:	4770      	bx	lr
	...

000806f4 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   806f4:	b500      	push	{lr}
   806f6:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   806f8:	2201      	movs	r2, #1
   806fa:	f10d 0107 	add.w	r1, sp, #7
   806fe:	4810      	ldr	r0, [pc, #64]	; (80740 <USART0_Handler+0x4c>)
   80700:	4b10      	ldr	r3, [pc, #64]	; (80744 <USART0_Handler+0x50>)
   80702:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80704:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80706:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8070a:	2200      	movs	r2, #0
   8070c:	4b0e      	ldr	r3, [pc, #56]	; (80748 <USART0_Handler+0x54>)
   8070e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80710:	4b0e      	ldr	r3, [pc, #56]	; (8074c <USART0_Handler+0x58>)
   80712:	781b      	ldrb	r3, [r3, #0]
   80714:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80718:	4a0d      	ldr	r2, [pc, #52]	; (80750 <USART0_Handler+0x5c>)
   8071a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   8071c:	2b9b      	cmp	r3, #155	; 0x9b
   8071e:	d00b      	beq.n	80738 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   80720:	3301      	adds	r3, #1
   80722:	4a0a      	ldr	r2, [pc, #40]	; (8074c <USART0_Handler+0x58>)
   80724:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80726:	2201      	movs	r2, #1
   80728:	4b07      	ldr	r3, [pc, #28]	; (80748 <USART0_Handler+0x54>)
   8072a:	701a      	strb	r2, [r3, #0]
   8072c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80730:	b662      	cpsie	i
}
   80732:	b003      	add	sp, #12
   80734:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   80738:	2200      	movs	r2, #0
   8073a:	4b04      	ldr	r3, [pc, #16]	; (8074c <USART0_Handler+0x58>)
   8073c:	701a      	strb	r2, [r3, #0]
   8073e:	e7f2      	b.n	80726 <USART0_Handler+0x32>
   80740:	40098000 	.word	0x40098000
   80744:	000807a5 	.word	0x000807a5
   80748:	2007012c 	.word	0x2007012c
   8074c:	20070ba8 	.word	0x20070ba8
   80750:	20070b0c 	.word	0x20070b0c

00080754 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80754:	3801      	subs	r0, #1
   80756:	2802      	cmp	r0, #2
   80758:	d815      	bhi.n	80786 <_write+0x32>
{
   8075a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8075e:	460e      	mov	r6, r1
   80760:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80762:	b19a      	cbz	r2, 8078c <_write+0x38>
   80764:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80766:	f8df 8038 	ldr.w	r8, [pc, #56]	; 807a0 <_write+0x4c>
   8076a:	4f0c      	ldr	r7, [pc, #48]	; (8079c <_write+0x48>)
   8076c:	f8d8 0000 	ldr.w	r0, [r8]
   80770:	f815 1b01 	ldrb.w	r1, [r5], #1
   80774:	683b      	ldr	r3, [r7, #0]
   80776:	4798      	blx	r3
   80778:	2800      	cmp	r0, #0
   8077a:	db0a      	blt.n	80792 <_write+0x3e>
   8077c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8077e:	3c01      	subs	r4, #1
   80780:	d1f4      	bne.n	8076c <_write+0x18>
   80782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80786:	f04f 30ff 	mov.w	r0, #4294967295
   8078a:	4770      	bx	lr
	for (; len != 0; --len) {
   8078c:	4610      	mov	r0, r2
   8078e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80792:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8079a:	bf00      	nop
   8079c:	20071c60 	.word	0x20071c60
   807a0:	20071c64 	.word	0x20071c64

000807a4 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   807a4:	2a00      	cmp	r2, #0
   807a6:	d051      	beq.n	8084c <usart_serial_read_packet+0xa8>
{
   807a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   807ac:	b083      	sub	sp, #12
   807ae:	4605      	mov	r5, r0
   807b0:	460c      	mov	r4, r1
   807b2:	4692      	mov	sl, r2
   807b4:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   807b6:	4f26      	ldr	r7, [pc, #152]	; (80850 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   807b8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80864 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   807bc:	4e25      	ldr	r6, [pc, #148]	; (80854 <usart_serial_read_packet+0xb0>)
   807be:	e01d      	b.n	807fc <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   807c0:	4621      	mov	r1, r4
   807c2:	4638      	mov	r0, r7
   807c4:	47c8      	blx	r9
   807c6:	2800      	cmp	r0, #0
   807c8:	d1fa      	bne.n	807c0 <usart_serial_read_packet+0x1c>
   807ca:	e021      	b.n	80810 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   807cc:	469b      	mov	fp, r3
   807ce:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80868 <usart_serial_read_packet+0xc4>
   807d2:	a901      	add	r1, sp, #4
   807d4:	4658      	mov	r0, fp
   807d6:	47c0      	blx	r8
   807d8:	2800      	cmp	r0, #0
   807da:	d1fa      	bne.n	807d2 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   807dc:	9b01      	ldr	r3, [sp, #4]
   807de:	7023      	strb	r3, [r4, #0]
   807e0:	e019      	b.n	80816 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   807e2:	469b      	mov	fp, r3
   807e4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80868 <usart_serial_read_packet+0xc4>
   807e8:	a901      	add	r1, sp, #4
   807ea:	4658      	mov	r0, fp
   807ec:	47c0      	blx	r8
   807ee:	2800      	cmp	r0, #0
   807f0:	d1fa      	bne.n	807e8 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   807f2:	9b01      	ldr	r3, [sp, #4]
   807f4:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   807f6:	3401      	adds	r4, #1
	while (len) {
   807f8:	4554      	cmp	r4, sl
   807fa:	d023      	beq.n	80844 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   807fc:	2300      	movs	r3, #0
   807fe:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80800:	42bd      	cmp	r5, r7
   80802:	d0dd      	beq.n	807c0 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   80804:	4b14      	ldr	r3, [pc, #80]	; (80858 <usart_serial_read_packet+0xb4>)
   80806:	429d      	cmp	r5, r3
   80808:	d0e0      	beq.n	807cc <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   8080a:	4b14      	ldr	r3, [pc, #80]	; (8085c <usart_serial_read_packet+0xb8>)
   8080c:	429d      	cmp	r5, r3
   8080e:	d0e8      	beq.n	807e2 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   80810:	4b13      	ldr	r3, [pc, #76]	; (80860 <usart_serial_read_packet+0xbc>)
   80812:	429d      	cmp	r5, r3
   80814:	d00b      	beq.n	8082e <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   80816:	42b5      	cmp	r5, r6
   80818:	d1ed      	bne.n	807f6 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8081a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80868 <usart_serial_read_packet+0xc4>
   8081e:	a901      	add	r1, sp, #4
   80820:	4630      	mov	r0, r6
   80822:	47c0      	blx	r8
   80824:	2800      	cmp	r0, #0
   80826:	d1fa      	bne.n	8081e <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80828:	9b01      	ldr	r3, [sp, #4]
   8082a:	7023      	strb	r3, [r4, #0]
   8082c:	e7e3      	b.n	807f6 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8082e:	469b      	mov	fp, r3
   80830:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80868 <usart_serial_read_packet+0xc4>
   80834:	a901      	add	r1, sp, #4
   80836:	4658      	mov	r0, fp
   80838:	47c0      	blx	r8
   8083a:	2800      	cmp	r0, #0
   8083c:	d1fa      	bne.n	80834 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   8083e:	9b01      	ldr	r3, [sp, #4]
   80840:	7023      	strb	r3, [r4, #0]
   80842:	e7d8      	b.n	807f6 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80844:	2000      	movs	r0, #0
   80846:	b003      	add	sp, #12
   80848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8084c:	2000      	movs	r0, #0
   8084e:	4770      	bx	lr
   80850:	400e0800 	.word	0x400e0800
   80854:	400a4000 	.word	0x400a4000
   80858:	40098000 	.word	0x40098000
   8085c:	4009c000 	.word	0x4009c000
   80860:	400a0000 	.word	0x400a0000
   80864:	000808b3 	.word	0x000808b3
   80868:	000806db 	.word	0x000806db

0008086c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8086c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8086e:	23ac      	movs	r3, #172	; 0xac
   80870:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80872:	680b      	ldr	r3, [r1, #0]
   80874:	684a      	ldr	r2, [r1, #4]
   80876:	fbb3 f3f2 	udiv	r3, r3, r2
   8087a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8087c:	1e5c      	subs	r4, r3, #1
   8087e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80882:	4294      	cmp	r4, r2
   80884:	d80b      	bhi.n	8089e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80886:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80888:	688b      	ldr	r3, [r1, #8]
   8088a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8088c:	f240 2302 	movw	r3, #514	; 0x202
   80890:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80894:	2350      	movs	r3, #80	; 0x50
   80896:	6003      	str	r3, [r0, #0]

	return 0;
   80898:	2000      	movs	r0, #0
}
   8089a:	bc10      	pop	{r4}
   8089c:	4770      	bx	lr
		return 1;
   8089e:	2001      	movs	r0, #1
   808a0:	e7fb      	b.n	8089a <uart_init+0x2e>

000808a2 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   808a2:	6943      	ldr	r3, [r0, #20]
   808a4:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   808a8:	bf1a      	itte	ne
   808aa:	61c1      	strne	r1, [r0, #28]
	return 0;
   808ac:	2000      	movne	r0, #0
		return 1;
   808ae:	2001      	moveq	r0, #1
}
   808b0:	4770      	bx	lr

000808b2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   808b2:	6943      	ldr	r3, [r0, #20]
   808b4:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   808b8:	bf1d      	ittte	ne
   808ba:	6983      	ldrne	r3, [r0, #24]
   808bc:	700b      	strbne	r3, [r1, #0]
	return 0;
   808be:	2000      	movne	r0, #0
		return 1;
   808c0:	2001      	moveq	r0, #1
}
   808c2:	4770      	bx	lr

000808c4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   808c4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   808c6:	480e      	ldr	r0, [pc, #56]	; (80900 <sysclk_init+0x3c>)
   808c8:	4b0e      	ldr	r3, [pc, #56]	; (80904 <sysclk_init+0x40>)
   808ca:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   808cc:	213e      	movs	r1, #62	; 0x3e
   808ce:	2000      	movs	r0, #0
   808d0:	4b0d      	ldr	r3, [pc, #52]	; (80908 <sysclk_init+0x44>)
   808d2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   808d4:	4c0d      	ldr	r4, [pc, #52]	; (8090c <sysclk_init+0x48>)
   808d6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   808d8:	2800      	cmp	r0, #0
   808da:	d0fc      	beq.n	808d6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   808dc:	4b0c      	ldr	r3, [pc, #48]	; (80910 <sysclk_init+0x4c>)
   808de:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   808e0:	4a0c      	ldr	r2, [pc, #48]	; (80914 <sysclk_init+0x50>)
   808e2:	4b0d      	ldr	r3, [pc, #52]	; (80918 <sysclk_init+0x54>)
   808e4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   808e6:	4c0d      	ldr	r4, [pc, #52]	; (8091c <sysclk_init+0x58>)
   808e8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   808ea:	2800      	cmp	r0, #0
   808ec:	d0fc      	beq.n	808e8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   808ee:	2010      	movs	r0, #16
   808f0:	4b0b      	ldr	r3, [pc, #44]	; (80920 <sysclk_init+0x5c>)
   808f2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   808f4:	4b0b      	ldr	r3, [pc, #44]	; (80924 <sysclk_init+0x60>)
   808f6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   808f8:	4801      	ldr	r0, [pc, #4]	; (80900 <sysclk_init+0x3c>)
   808fa:	4b02      	ldr	r3, [pc, #8]	; (80904 <sysclk_init+0x40>)
   808fc:	4798      	blx	r3
   808fe:	bd10      	pop	{r4, pc}
   80900:	0501bd00 	.word	0x0501bd00
   80904:	200700a5 	.word	0x200700a5
   80908:	00080d81 	.word	0x00080d81
   8090c:	00080dd5 	.word	0x00080dd5
   80910:	00080de5 	.word	0x00080de5
   80914:	200d3f01 	.word	0x200d3f01
   80918:	400e0600 	.word	0x400e0600
   8091c:	00080df5 	.word	0x00080df5
   80920:	00080d1d 	.word	0x00080d1d
   80924:	00080ef5 	.word	0x00080ef5

00080928 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80928:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8092a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8092e:	4b16      	ldr	r3, [pc, #88]	; (80988 <board_init+0x60>)
   80930:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80932:	200b      	movs	r0, #11
   80934:	4c15      	ldr	r4, [pc, #84]	; (8098c <board_init+0x64>)
   80936:	47a0      	blx	r4
   80938:	200c      	movs	r0, #12
   8093a:	47a0      	blx	r4
   8093c:	200d      	movs	r0, #13
   8093e:	47a0      	blx	r4
   80940:	200e      	movs	r0, #14
   80942:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80944:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80948:	203b      	movs	r0, #59	; 0x3b
   8094a:	4c11      	ldr	r4, [pc, #68]	; (80990 <board_init+0x68>)
   8094c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8094e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80952:	2055      	movs	r0, #85	; 0x55
   80954:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80956:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8095a:	2056      	movs	r0, #86	; 0x56
   8095c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8095e:	490d      	ldr	r1, [pc, #52]	; (80994 <board_init+0x6c>)
   80960:	2068      	movs	r0, #104	; 0x68
   80962:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80964:	490c      	ldr	r1, [pc, #48]	; (80998 <board_init+0x70>)
   80966:	205c      	movs	r0, #92	; 0x5c
   80968:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8096a:	4a0c      	ldr	r2, [pc, #48]	; (8099c <board_init+0x74>)
   8096c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80970:	480b      	ldr	r0, [pc, #44]	; (809a0 <board_init+0x78>)
   80972:	4b0c      	ldr	r3, [pc, #48]	; (809a4 <board_init+0x7c>)
   80974:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80976:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8097a:	202b      	movs	r0, #43	; 0x2b
   8097c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8097e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80982:	202a      	movs	r0, #42	; 0x2a
   80984:	47a0      	blx	r4
   80986:	bd10      	pop	{r4, pc}
   80988:	400e1a50 	.word	0x400e1a50
   8098c:	00080e05 	.word	0x00080e05
   80990:	00080aa1 	.word	0x00080aa1
   80994:	28000079 	.word	0x28000079
   80998:	28000001 	.word	0x28000001
   8099c:	08000001 	.word	0x08000001
   809a0:	400e0e00 	.word	0x400e0e00
   809a4:	00080b71 	.word	0x00080b71

000809a8 <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   809a8:	b90a      	cbnz	r2, 809ae <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   809aa:	6601      	str	r1, [r0, #96]	; 0x60
   809ac:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   809ae:	6641      	str	r1, [r0, #100]	; 0x64
   809b0:	4770      	bx	lr

000809b2 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   809b2:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   809b6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   809ba:	bf0c      	ite	eq
   809bc:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   809be:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   809c0:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   809c2:	bf14      	ite	ne
   809c4:	2001      	movne	r0, #1
   809c6:	2000      	moveq	r0, #0
   809c8:	4770      	bx	lr

000809ca <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   809ca:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   809cc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   809d0:	d016      	beq.n	80a00 <pio_set_peripheral+0x36>
   809d2:	d80b      	bhi.n	809ec <pio_set_peripheral+0x22>
   809d4:	b149      	cbz	r1, 809ea <pio_set_peripheral+0x20>
   809d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   809da:	d105      	bne.n	809e8 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   809dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   809de:	6f01      	ldr	r1, [r0, #112]	; 0x70
   809e0:	400b      	ands	r3, r1
   809e2:	ea23 0302 	bic.w	r3, r3, r2
   809e6:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   809e8:	6042      	str	r2, [r0, #4]
   809ea:	4770      	bx	lr
	switch (ul_type) {
   809ec:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   809f0:	d0fb      	beq.n	809ea <pio_set_peripheral+0x20>
   809f2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   809f6:	d0f8      	beq.n	809ea <pio_set_peripheral+0x20>
   809f8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   809fc:	d1f4      	bne.n	809e8 <pio_set_peripheral+0x1e>
   809fe:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80a00:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80a02:	4313      	orrs	r3, r2
   80a04:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80a06:	e7ef      	b.n	809e8 <pio_set_peripheral+0x1e>

00080a08 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a08:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a0a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80a0e:	bf14      	ite	ne
   80a10:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a12:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80a14:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80a18:	bf14      	ite	ne
   80a1a:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80a1c:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80a1e:	f012 0f02 	tst.w	r2, #2
   80a22:	d107      	bne.n	80a34 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80a24:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80a28:	bf18      	it	ne
   80a2a:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80a2e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80a30:	6001      	str	r1, [r0, #0]
   80a32:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80a34:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80a38:	e7f9      	b.n	80a2e <pio_set_input+0x26>

00080a3a <pio_set_output>:
{
   80a3a:	b410      	push	{r4}
   80a3c:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80a3e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a40:	b944      	cbnz	r4, 80a54 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80a42:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80a44:	b143      	cbz	r3, 80a58 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80a46:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80a48:	b942      	cbnz	r2, 80a5c <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80a4a:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80a4c:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80a4e:	6001      	str	r1, [r0, #0]
}
   80a50:	bc10      	pop	{r4}
   80a52:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80a54:	6641      	str	r1, [r0, #100]	; 0x64
   80a56:	e7f5      	b.n	80a44 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80a58:	6541      	str	r1, [r0, #84]	; 0x54
   80a5a:	e7f5      	b.n	80a48 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80a5c:	6301      	str	r1, [r0, #48]	; 0x30
   80a5e:	e7f5      	b.n	80a4c <pio_set_output+0x12>

00080a60 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   80a60:	f012 0f10 	tst.w	r2, #16
   80a64:	d010      	beq.n	80a88 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   80a66:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80a6a:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   80a6e:	bf14      	ite	ne
   80a70:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   80a74:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   80a78:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   80a7c:	bf14      	ite	ne
   80a7e:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   80a82:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80a86:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   80a88:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80a8c:	4770      	bx	lr

00080a8e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   80a8e:	6401      	str	r1, [r0, #64]	; 0x40
   80a90:	4770      	bx	lr

00080a92 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
   80a92:	6441      	str	r1, [r0, #68]	; 0x44
   80a94:	4770      	bx	lr

00080a96 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80a96:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80a98:	4770      	bx	lr

00080a9a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80a9a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80a9c:	4770      	bx	lr
	...

00080aa0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80aa0:	b570      	push	{r4, r5, r6, lr}
   80aa2:	b082      	sub	sp, #8
   80aa4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80aa6:	0943      	lsrs	r3, r0, #5
   80aa8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80aac:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80ab0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80ab2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80ab6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80aba:	d031      	beq.n	80b20 <pio_configure_pin+0x80>
   80abc:	d816      	bhi.n	80aec <pio_configure_pin+0x4c>
   80abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80ac2:	d01b      	beq.n	80afc <pio_configure_pin+0x5c>
   80ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80ac8:	d116      	bne.n	80af8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80aca:	f000 001f 	and.w	r0, r0, #31
   80ace:	2601      	movs	r6, #1
   80ad0:	4086      	lsls	r6, r0
   80ad2:	4632      	mov	r2, r6
   80ad4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ad8:	4620      	mov	r0, r4
   80ada:	4b22      	ldr	r3, [pc, #136]	; (80b64 <pio_configure_pin+0xc4>)
   80adc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ade:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ae2:	bf14      	ite	ne
   80ae4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ae6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80ae8:	2001      	movs	r0, #1
   80aea:	e017      	b.n	80b1c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80aec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80af0:	d021      	beq.n	80b36 <pio_configure_pin+0x96>
   80af2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80af6:	d01e      	beq.n	80b36 <pio_configure_pin+0x96>
		return 0;
   80af8:	2000      	movs	r0, #0
   80afa:	e00f      	b.n	80b1c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80afc:	f000 001f 	and.w	r0, r0, #31
   80b00:	2601      	movs	r6, #1
   80b02:	4086      	lsls	r6, r0
   80b04:	4632      	mov	r2, r6
   80b06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b0a:	4620      	mov	r0, r4
   80b0c:	4b15      	ldr	r3, [pc, #84]	; (80b64 <pio_configure_pin+0xc4>)
   80b0e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b10:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b14:	bf14      	ite	ne
   80b16:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b18:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80b1a:	2001      	movs	r0, #1
}
   80b1c:	b002      	add	sp, #8
   80b1e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80b20:	f000 011f 	and.w	r1, r0, #31
   80b24:	2601      	movs	r6, #1
   80b26:	462a      	mov	r2, r5
   80b28:	fa06 f101 	lsl.w	r1, r6, r1
   80b2c:	4620      	mov	r0, r4
   80b2e:	4b0e      	ldr	r3, [pc, #56]	; (80b68 <pio_configure_pin+0xc8>)
   80b30:	4798      	blx	r3
	return 1;
   80b32:	4630      	mov	r0, r6
		break;
   80b34:	e7f2      	b.n	80b1c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b36:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b3a:	f000 011f 	and.w	r1, r0, #31
   80b3e:	2601      	movs	r6, #1
   80b40:	ea05 0306 	and.w	r3, r5, r6
   80b44:	9300      	str	r3, [sp, #0]
   80b46:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b4a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b4e:	bf14      	ite	ne
   80b50:	2200      	movne	r2, #0
   80b52:	2201      	moveq	r2, #1
   80b54:	fa06 f101 	lsl.w	r1, r6, r1
   80b58:	4620      	mov	r0, r4
   80b5a:	4c04      	ldr	r4, [pc, #16]	; (80b6c <pio_configure_pin+0xcc>)
   80b5c:	47a0      	blx	r4
	return 1;
   80b5e:	4630      	mov	r0, r6
		break;
   80b60:	e7dc      	b.n	80b1c <pio_configure_pin+0x7c>
   80b62:	bf00      	nop
   80b64:	000809cb 	.word	0x000809cb
   80b68:	00080a09 	.word	0x00080a09
   80b6c:	00080a3b 	.word	0x00080a3b

00080b70 <pio_configure_pin_group>:
{
   80b70:	b570      	push	{r4, r5, r6, lr}
   80b72:	b082      	sub	sp, #8
   80b74:	4605      	mov	r5, r0
   80b76:	460e      	mov	r6, r1
   80b78:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80b7a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80b7e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80b82:	d027      	beq.n	80bd4 <pio_configure_pin_group+0x64>
   80b84:	d811      	bhi.n	80baa <pio_configure_pin_group+0x3a>
   80b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80b8a:	d016      	beq.n	80bba <pio_configure_pin_group+0x4a>
   80b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80b90:	d111      	bne.n	80bb6 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b92:	460a      	mov	r2, r1
   80b94:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b98:	4b19      	ldr	r3, [pc, #100]	; (80c00 <pio_configure_pin_group+0x90>)
   80b9a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b9c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80ba0:	bf14      	ite	ne
   80ba2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ba4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80ba6:	2001      	movs	r0, #1
   80ba8:	e012      	b.n	80bd0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80baa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80bae:	d015      	beq.n	80bdc <pio_configure_pin_group+0x6c>
   80bb0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80bb4:	d012      	beq.n	80bdc <pio_configure_pin_group+0x6c>
		return 0;
   80bb6:	2000      	movs	r0, #0
   80bb8:	e00a      	b.n	80bd0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80bba:	460a      	mov	r2, r1
   80bbc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bc0:	4b0f      	ldr	r3, [pc, #60]	; (80c00 <pio_configure_pin_group+0x90>)
   80bc2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80bc4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80bc8:	bf14      	ite	ne
   80bca:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80bcc:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80bce:	2001      	movs	r0, #1
}
   80bd0:	b002      	add	sp, #8
   80bd2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80bd4:	4b0b      	ldr	r3, [pc, #44]	; (80c04 <pio_configure_pin_group+0x94>)
   80bd6:	4798      	blx	r3
	return 1;
   80bd8:	2001      	movs	r0, #1
		break;
   80bda:	e7f9      	b.n	80bd0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80bdc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80be0:	f004 0301 	and.w	r3, r4, #1
   80be4:	9300      	str	r3, [sp, #0]
   80be6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80bea:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80bee:	bf14      	ite	ne
   80bf0:	2200      	movne	r2, #0
   80bf2:	2201      	moveq	r2, #1
   80bf4:	4631      	mov	r1, r6
   80bf6:	4628      	mov	r0, r5
   80bf8:	4c03      	ldr	r4, [pc, #12]	; (80c08 <pio_configure_pin_group+0x98>)
   80bfa:	47a0      	blx	r4
	return 1;
   80bfc:	2001      	movs	r0, #1
		break;
   80bfe:	e7e7      	b.n	80bd0 <pio_configure_pin_group+0x60>
   80c00:	000809cb 	.word	0x000809cb
   80c04:	00080a09 	.word	0x00080a09
   80c08:	00080a3b 	.word	0x00080a3b

00080c0c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c10:	4604      	mov	r4, r0
   80c12:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80c14:	4b0e      	ldr	r3, [pc, #56]	; (80c50 <pio_handler_process+0x44>)
   80c16:	4798      	blx	r3
   80c18:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80c1a:	4620      	mov	r0, r4
   80c1c:	4b0d      	ldr	r3, [pc, #52]	; (80c54 <pio_handler_process+0x48>)
   80c1e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80c20:	4005      	ands	r5, r0
   80c22:	d013      	beq.n	80c4c <pio_handler_process+0x40>
   80c24:	4c0c      	ldr	r4, [pc, #48]	; (80c58 <pio_handler_process+0x4c>)
   80c26:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80c2a:	e003      	b.n	80c34 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80c2c:	42b4      	cmp	r4, r6
   80c2e:	d00d      	beq.n	80c4c <pio_handler_process+0x40>
   80c30:	3410      	adds	r4, #16
		while (status != 0) {
   80c32:	b15d      	cbz	r5, 80c4c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80c34:	6820      	ldr	r0, [r4, #0]
   80c36:	4540      	cmp	r0, r8
   80c38:	d1f8      	bne.n	80c2c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c3a:	6861      	ldr	r1, [r4, #4]
   80c3c:	4229      	tst	r1, r5
   80c3e:	d0f5      	beq.n	80c2c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c40:	68e3      	ldr	r3, [r4, #12]
   80c42:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80c44:	6863      	ldr	r3, [r4, #4]
   80c46:	ea25 0503 	bic.w	r5, r5, r3
   80c4a:	e7ef      	b.n	80c2c <pio_handler_process+0x20>
   80c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c50:	00080a97 	.word	0x00080a97
   80c54:	00080a9b 	.word	0x00080a9b
   80c58:	20070bac 	.word	0x20070bac

00080c5c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80c5e:	4c18      	ldr	r4, [pc, #96]	; (80cc0 <pio_handler_set+0x64>)
   80c60:	6826      	ldr	r6, [r4, #0]
   80c62:	2e06      	cmp	r6, #6
   80c64:	d829      	bhi.n	80cba <pio_handler_set+0x5e>
   80c66:	f04f 0c00 	mov.w	ip, #0
   80c6a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80c6c:	4f15      	ldr	r7, [pc, #84]	; (80cc4 <pio_handler_set+0x68>)
   80c6e:	e004      	b.n	80c7a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   80c70:	3401      	adds	r4, #1
   80c72:	b2e4      	uxtb	r4, r4
   80c74:	46a4      	mov	ip, r4
   80c76:	42a6      	cmp	r6, r4
   80c78:	d309      	bcc.n	80c8e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80c7a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80c7c:	0125      	lsls	r5, r4, #4
   80c7e:	597d      	ldr	r5, [r7, r5]
   80c80:	428d      	cmp	r5, r1
   80c82:	d1f5      	bne.n	80c70 <pio_handler_set+0x14>
   80c84:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   80c88:	686d      	ldr	r5, [r5, #4]
   80c8a:	4295      	cmp	r5, r2
   80c8c:	d1f0      	bne.n	80c70 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   80c8e:	4d0d      	ldr	r5, [pc, #52]	; (80cc4 <pio_handler_set+0x68>)
   80c90:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   80c94:	eb05 040e 	add.w	r4, r5, lr
   80c98:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   80c9c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   80c9e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   80ca0:	9906      	ldr	r1, [sp, #24]
   80ca2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   80ca4:	3601      	adds	r6, #1
   80ca6:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   80ca8:	bf04      	itt	eq
   80caa:	4905      	ldreq	r1, [pc, #20]	; (80cc0 <pio_handler_set+0x64>)
   80cac:	600e      	streq	r6, [r1, #0]
   80cae:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80cb0:	461a      	mov	r2, r3
   80cb2:	4b05      	ldr	r3, [pc, #20]	; (80cc8 <pio_handler_set+0x6c>)
   80cb4:	4798      	blx	r3

	return 0;
   80cb6:	2000      	movs	r0, #0
   80cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   80cba:	2001      	movs	r0, #1
}
   80cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80cbe:	bf00      	nop
   80cc0:	20070c1c 	.word	0x20070c1c
   80cc4:	20070bac 	.word	0x20070bac
   80cc8:	00080a61 	.word	0x00080a61

00080ccc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80ccc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80cce:	210b      	movs	r1, #11
   80cd0:	4801      	ldr	r0, [pc, #4]	; (80cd8 <PIOA_Handler+0xc>)
   80cd2:	4b02      	ldr	r3, [pc, #8]	; (80cdc <PIOA_Handler+0x10>)
   80cd4:	4798      	blx	r3
   80cd6:	bd08      	pop	{r3, pc}
   80cd8:	400e0e00 	.word	0x400e0e00
   80cdc:	00080c0d 	.word	0x00080c0d

00080ce0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80ce0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80ce2:	210c      	movs	r1, #12
   80ce4:	4801      	ldr	r0, [pc, #4]	; (80cec <PIOB_Handler+0xc>)
   80ce6:	4b02      	ldr	r3, [pc, #8]	; (80cf0 <PIOB_Handler+0x10>)
   80ce8:	4798      	blx	r3
   80cea:	bd08      	pop	{r3, pc}
   80cec:	400e1000 	.word	0x400e1000
   80cf0:	00080c0d 	.word	0x00080c0d

00080cf4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80cf4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80cf6:	210d      	movs	r1, #13
   80cf8:	4801      	ldr	r0, [pc, #4]	; (80d00 <PIOC_Handler+0xc>)
   80cfa:	4b02      	ldr	r3, [pc, #8]	; (80d04 <PIOC_Handler+0x10>)
   80cfc:	4798      	blx	r3
   80cfe:	bd08      	pop	{r3, pc}
   80d00:	400e1200 	.word	0x400e1200
   80d04:	00080c0d 	.word	0x00080c0d

00080d08 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80d08:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80d0a:	210e      	movs	r1, #14
   80d0c:	4801      	ldr	r0, [pc, #4]	; (80d14 <PIOD_Handler+0xc>)
   80d0e:	4b02      	ldr	r3, [pc, #8]	; (80d18 <PIOD_Handler+0x10>)
   80d10:	4798      	blx	r3
   80d12:	bd08      	pop	{r3, pc}
   80d14:	400e1400 	.word	0x400e1400
   80d18:	00080c0d 	.word	0x00080c0d

00080d1c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80d1c:	4a17      	ldr	r2, [pc, #92]	; (80d7c <pmc_switch_mck_to_pllack+0x60>)
   80d1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80d24:	4318      	orrs	r0, r3
   80d26:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d28:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d2a:	f013 0f08 	tst.w	r3, #8
   80d2e:	d10a      	bne.n	80d46 <pmc_switch_mck_to_pllack+0x2a>
   80d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d34:	4911      	ldr	r1, [pc, #68]	; (80d7c <pmc_switch_mck_to_pllack+0x60>)
   80d36:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d38:	f012 0f08 	tst.w	r2, #8
   80d3c:	d103      	bne.n	80d46 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d3e:	3b01      	subs	r3, #1
   80d40:	d1f9      	bne.n	80d36 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80d42:	2001      	movs	r0, #1
   80d44:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80d46:	4a0d      	ldr	r2, [pc, #52]	; (80d7c <pmc_switch_mck_to_pllack+0x60>)
   80d48:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d4a:	f023 0303 	bic.w	r3, r3, #3
   80d4e:	f043 0302 	orr.w	r3, r3, #2
   80d52:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d54:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d56:	f013 0f08 	tst.w	r3, #8
   80d5a:	d10a      	bne.n	80d72 <pmc_switch_mck_to_pllack+0x56>
   80d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d60:	4906      	ldr	r1, [pc, #24]	; (80d7c <pmc_switch_mck_to_pllack+0x60>)
   80d62:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d64:	f012 0f08 	tst.w	r2, #8
   80d68:	d105      	bne.n	80d76 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d6a:	3b01      	subs	r3, #1
   80d6c:	d1f9      	bne.n	80d62 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80d6e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80d70:	4770      	bx	lr
	return 0;
   80d72:	2000      	movs	r0, #0
   80d74:	4770      	bx	lr
   80d76:	2000      	movs	r0, #0
   80d78:	4770      	bx	lr
   80d7a:	bf00      	nop
   80d7c:	400e0600 	.word	0x400e0600

00080d80 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80d80:	b9c8      	cbnz	r0, 80db6 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d82:	4a11      	ldr	r2, [pc, #68]	; (80dc8 <pmc_switch_mainck_to_xtal+0x48>)
   80d84:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80d86:	0209      	lsls	r1, r1, #8
   80d88:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d8a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80d8e:	f023 0303 	bic.w	r3, r3, #3
   80d92:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d96:	f043 0301 	orr.w	r3, r3, #1
   80d9a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d9c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d9e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80da0:	f013 0f01 	tst.w	r3, #1
   80da4:	d0fb      	beq.n	80d9e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80da6:	4a08      	ldr	r2, [pc, #32]	; (80dc8 <pmc_switch_mainck_to_xtal+0x48>)
   80da8:	6a13      	ldr	r3, [r2, #32]
   80daa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80db2:	6213      	str	r3, [r2, #32]
   80db4:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80db6:	4904      	ldr	r1, [pc, #16]	; (80dc8 <pmc_switch_mainck_to_xtal+0x48>)
   80db8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80dba:	4a04      	ldr	r2, [pc, #16]	; (80dcc <pmc_switch_mainck_to_xtal+0x4c>)
   80dbc:	401a      	ands	r2, r3
   80dbe:	4b04      	ldr	r3, [pc, #16]	; (80dd0 <pmc_switch_mainck_to_xtal+0x50>)
   80dc0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80dc2:	620b      	str	r3, [r1, #32]
   80dc4:	4770      	bx	lr
   80dc6:	bf00      	nop
   80dc8:	400e0600 	.word	0x400e0600
   80dcc:	fec8fffc 	.word	0xfec8fffc
   80dd0:	01370002 	.word	0x01370002

00080dd4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80dd4:	4b02      	ldr	r3, [pc, #8]	; (80de0 <pmc_osc_is_ready_mainck+0xc>)
   80dd6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80dd8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80ddc:	4770      	bx	lr
   80dde:	bf00      	nop
   80de0:	400e0600 	.word	0x400e0600

00080de4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80de4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80de8:	4b01      	ldr	r3, [pc, #4]	; (80df0 <pmc_disable_pllack+0xc>)
   80dea:	629a      	str	r2, [r3, #40]	; 0x28
   80dec:	4770      	bx	lr
   80dee:	bf00      	nop
   80df0:	400e0600 	.word	0x400e0600

00080df4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80df4:	4b02      	ldr	r3, [pc, #8]	; (80e00 <pmc_is_locked_pllack+0xc>)
   80df6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80df8:	f000 0002 	and.w	r0, r0, #2
   80dfc:	4770      	bx	lr
   80dfe:	bf00      	nop
   80e00:	400e0600 	.word	0x400e0600

00080e04 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80e04:	282c      	cmp	r0, #44	; 0x2c
   80e06:	d81e      	bhi.n	80e46 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80e08:	281f      	cmp	r0, #31
   80e0a:	d80c      	bhi.n	80e26 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80e0c:	4b11      	ldr	r3, [pc, #68]	; (80e54 <pmc_enable_periph_clk+0x50>)
   80e0e:	699a      	ldr	r2, [r3, #24]
   80e10:	2301      	movs	r3, #1
   80e12:	4083      	lsls	r3, r0
   80e14:	4393      	bics	r3, r2
   80e16:	d018      	beq.n	80e4a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80e18:	2301      	movs	r3, #1
   80e1a:	fa03 f000 	lsl.w	r0, r3, r0
   80e1e:	4b0d      	ldr	r3, [pc, #52]	; (80e54 <pmc_enable_periph_clk+0x50>)
   80e20:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80e22:	2000      	movs	r0, #0
   80e24:	4770      	bx	lr
		ul_id -= 32;
   80e26:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80e28:	4b0a      	ldr	r3, [pc, #40]	; (80e54 <pmc_enable_periph_clk+0x50>)
   80e2a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80e2e:	2301      	movs	r3, #1
   80e30:	4083      	lsls	r3, r0
   80e32:	4393      	bics	r3, r2
   80e34:	d00b      	beq.n	80e4e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80e36:	2301      	movs	r3, #1
   80e38:	fa03 f000 	lsl.w	r0, r3, r0
   80e3c:	4b05      	ldr	r3, [pc, #20]	; (80e54 <pmc_enable_periph_clk+0x50>)
   80e3e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80e42:	2000      	movs	r0, #0
   80e44:	4770      	bx	lr
		return 1;
   80e46:	2001      	movs	r0, #1
   80e48:	4770      	bx	lr
	return 0;
   80e4a:	2000      	movs	r0, #0
   80e4c:	4770      	bx	lr
   80e4e:	2000      	movs	r0, #0
}
   80e50:	4770      	bx	lr
   80e52:	bf00      	nop
   80e54:	400e0600 	.word	0x400e0600

00080e58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80e58:	e7fe      	b.n	80e58 <Dummy_Handler>
	...

00080e5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80e5c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80e5e:	4b1c      	ldr	r3, [pc, #112]	; (80ed0 <Reset_Handler+0x74>)
   80e60:	4a1c      	ldr	r2, [pc, #112]	; (80ed4 <Reset_Handler+0x78>)
   80e62:	429a      	cmp	r2, r3
   80e64:	d010      	beq.n	80e88 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80e66:	4b1c      	ldr	r3, [pc, #112]	; (80ed8 <Reset_Handler+0x7c>)
   80e68:	4a19      	ldr	r2, [pc, #100]	; (80ed0 <Reset_Handler+0x74>)
   80e6a:	429a      	cmp	r2, r3
   80e6c:	d20c      	bcs.n	80e88 <Reset_Handler+0x2c>
   80e6e:	3b01      	subs	r3, #1
   80e70:	1a9b      	subs	r3, r3, r2
   80e72:	f023 0303 	bic.w	r3, r3, #3
   80e76:	3304      	adds	r3, #4
   80e78:	4413      	add	r3, r2
   80e7a:	4916      	ldr	r1, [pc, #88]	; (80ed4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80e7c:	f851 0b04 	ldr.w	r0, [r1], #4
   80e80:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80e84:	429a      	cmp	r2, r3
   80e86:	d1f9      	bne.n	80e7c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e88:	4b14      	ldr	r3, [pc, #80]	; (80edc <Reset_Handler+0x80>)
   80e8a:	4a15      	ldr	r2, [pc, #84]	; (80ee0 <Reset_Handler+0x84>)
   80e8c:	429a      	cmp	r2, r3
   80e8e:	d20a      	bcs.n	80ea6 <Reset_Handler+0x4a>
   80e90:	3b01      	subs	r3, #1
   80e92:	1a9b      	subs	r3, r3, r2
   80e94:	f023 0303 	bic.w	r3, r3, #3
   80e98:	3304      	adds	r3, #4
   80e9a:	4413      	add	r3, r2
		*pDest++ = 0;
   80e9c:	2100      	movs	r1, #0
   80e9e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80ea2:	4293      	cmp	r3, r2
   80ea4:	d1fb      	bne.n	80e9e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80ea6:	4b0f      	ldr	r3, [pc, #60]	; (80ee4 <Reset_Handler+0x88>)
   80ea8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80eac:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80eb0:	490d      	ldr	r1, [pc, #52]	; (80ee8 <Reset_Handler+0x8c>)
   80eb2:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80eb4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80ebc:	d203      	bcs.n	80ec6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80ebe:	688b      	ldr	r3, [r1, #8]
   80ec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80ec4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80ec6:	4b09      	ldr	r3, [pc, #36]	; (80eec <Reset_Handler+0x90>)
   80ec8:	4798      	blx	r3

	/* Branch to main function */
	main();
   80eca:	4b09      	ldr	r3, [pc, #36]	; (80ef0 <Reset_Handler+0x94>)
   80ecc:	4798      	blx	r3
   80ece:	e7fe      	b.n	80ece <Reset_Handler+0x72>
   80ed0:	20070000 	.word	0x20070000
   80ed4:	0008511c 	.word	0x0008511c
   80ed8:	20070ae0 	.word	0x20070ae0
   80edc:	20071c90 	.word	0x20071c90
   80ee0:	20070ae0 	.word	0x20070ae0
   80ee4:	00080000 	.word	0x00080000
   80ee8:	e000ed00 	.word	0xe000ed00
   80eec:	00082005 	.word	0x00082005
   80ef0:	000811fd 	.word	0x000811fd

00080ef4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80ef4:	4b3d      	ldr	r3, [pc, #244]	; (80fec <SystemCoreClockUpdate+0xf8>)
   80ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ef8:	f003 0303 	and.w	r3, r3, #3
   80efc:	2b03      	cmp	r3, #3
   80efe:	d80e      	bhi.n	80f1e <SystemCoreClockUpdate+0x2a>
   80f00:	e8df f003 	tbb	[pc, r3]
   80f04:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80f08:	4b39      	ldr	r3, [pc, #228]	; (80ff0 <SystemCoreClockUpdate+0xfc>)
   80f0a:	695b      	ldr	r3, [r3, #20]
   80f0c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80f10:	bf14      	ite	ne
   80f12:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80f16:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80f1a:	4b36      	ldr	r3, [pc, #216]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80f1c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80f1e:	4b33      	ldr	r3, [pc, #204]	; (80fec <SystemCoreClockUpdate+0xf8>)
   80f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f26:	2b70      	cmp	r3, #112	; 0x70
   80f28:	d057      	beq.n	80fda <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80f2a:	4b30      	ldr	r3, [pc, #192]	; (80fec <SystemCoreClockUpdate+0xf8>)
   80f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80f2e:	4931      	ldr	r1, [pc, #196]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80f30:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80f34:	680b      	ldr	r3, [r1, #0]
   80f36:	40d3      	lsrs	r3, r2
   80f38:	600b      	str	r3, [r1, #0]
   80f3a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f3c:	4b2b      	ldr	r3, [pc, #172]	; (80fec <SystemCoreClockUpdate+0xf8>)
   80f3e:	6a1b      	ldr	r3, [r3, #32]
   80f40:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f44:	d003      	beq.n	80f4e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f46:	4a2c      	ldr	r2, [pc, #176]	; (80ff8 <SystemCoreClockUpdate+0x104>)
   80f48:	4b2a      	ldr	r3, [pc, #168]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80f4a:	601a      	str	r2, [r3, #0]
   80f4c:	e7e7      	b.n	80f1e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f4e:	4a2b      	ldr	r2, [pc, #172]	; (80ffc <SystemCoreClockUpdate+0x108>)
   80f50:	4b28      	ldr	r3, [pc, #160]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80f52:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f54:	4b25      	ldr	r3, [pc, #148]	; (80fec <SystemCoreClockUpdate+0xf8>)
   80f56:	6a1b      	ldr	r3, [r3, #32]
   80f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f5c:	2b10      	cmp	r3, #16
   80f5e:	d005      	beq.n	80f6c <SystemCoreClockUpdate+0x78>
   80f60:	2b20      	cmp	r3, #32
   80f62:	d1dc      	bne.n	80f1e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80f64:	4a24      	ldr	r2, [pc, #144]	; (80ff8 <SystemCoreClockUpdate+0x104>)
   80f66:	4b23      	ldr	r3, [pc, #140]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80f68:	601a      	str	r2, [r3, #0]
				break;
   80f6a:	e7d8      	b.n	80f1e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80f6c:	4a24      	ldr	r2, [pc, #144]	; (81000 <SystemCoreClockUpdate+0x10c>)
   80f6e:	4b21      	ldr	r3, [pc, #132]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80f70:	601a      	str	r2, [r3, #0]
				break;
   80f72:	e7d4      	b.n	80f1e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f74:	4b1d      	ldr	r3, [pc, #116]	; (80fec <SystemCoreClockUpdate+0xf8>)
   80f76:	6a1b      	ldr	r3, [r3, #32]
   80f78:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f7c:	d00c      	beq.n	80f98 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f7e:	4a1e      	ldr	r2, [pc, #120]	; (80ff8 <SystemCoreClockUpdate+0x104>)
   80f80:	4b1c      	ldr	r3, [pc, #112]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80f82:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f84:	4b19      	ldr	r3, [pc, #100]	; (80fec <SystemCoreClockUpdate+0xf8>)
   80f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f88:	f003 0303 	and.w	r3, r3, #3
   80f8c:	2b02      	cmp	r3, #2
   80f8e:	d016      	beq.n	80fbe <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f90:	4a1c      	ldr	r2, [pc, #112]	; (81004 <SystemCoreClockUpdate+0x110>)
   80f92:	4b18      	ldr	r3, [pc, #96]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80f94:	601a      	str	r2, [r3, #0]
   80f96:	e7c2      	b.n	80f1e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f98:	4a18      	ldr	r2, [pc, #96]	; (80ffc <SystemCoreClockUpdate+0x108>)
   80f9a:	4b16      	ldr	r3, [pc, #88]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80f9c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f9e:	4b13      	ldr	r3, [pc, #76]	; (80fec <SystemCoreClockUpdate+0xf8>)
   80fa0:	6a1b      	ldr	r3, [r3, #32]
   80fa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80fa6:	2b10      	cmp	r3, #16
   80fa8:	d005      	beq.n	80fb6 <SystemCoreClockUpdate+0xc2>
   80faa:	2b20      	cmp	r3, #32
   80fac:	d1ea      	bne.n	80f84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80fae:	4a12      	ldr	r2, [pc, #72]	; (80ff8 <SystemCoreClockUpdate+0x104>)
   80fb0:	4b10      	ldr	r3, [pc, #64]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80fb2:	601a      	str	r2, [r3, #0]
				break;
   80fb4:	e7e6      	b.n	80f84 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80fb6:	4a12      	ldr	r2, [pc, #72]	; (81000 <SystemCoreClockUpdate+0x10c>)
   80fb8:	4b0e      	ldr	r3, [pc, #56]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80fba:	601a      	str	r2, [r3, #0]
				break;
   80fbc:	e7e2      	b.n	80f84 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80fbe:	4a0b      	ldr	r2, [pc, #44]	; (80fec <SystemCoreClockUpdate+0xf8>)
   80fc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80fc2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80fc4:	480b      	ldr	r0, [pc, #44]	; (80ff4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80fc6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80fca:	6803      	ldr	r3, [r0, #0]
   80fcc:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80fd0:	b2d2      	uxtb	r2, r2
   80fd2:	fbb3 f3f2 	udiv	r3, r3, r2
   80fd6:	6003      	str	r3, [r0, #0]
   80fd8:	e7a1      	b.n	80f1e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80fda:	4a06      	ldr	r2, [pc, #24]	; (80ff4 <SystemCoreClockUpdate+0x100>)
   80fdc:	6813      	ldr	r3, [r2, #0]
   80fde:	490a      	ldr	r1, [pc, #40]	; (81008 <SystemCoreClockUpdate+0x114>)
   80fe0:	fba1 1303 	umull	r1, r3, r1, r3
   80fe4:	085b      	lsrs	r3, r3, #1
   80fe6:	6013      	str	r3, [r2, #0]
   80fe8:	4770      	bx	lr
   80fea:	bf00      	nop
   80fec:	400e0600 	.word	0x400e0600
   80ff0:	400e1a10 	.word	0x400e1a10
   80ff4:	20070130 	.word	0x20070130
   80ff8:	00b71b00 	.word	0x00b71b00
   80ffc:	003d0900 	.word	0x003d0900
   81000:	007a1200 	.word	0x007a1200
   81004:	0e4e1c00 	.word	0x0e4e1c00
   81008:	aaaaaaab 	.word	0xaaaaaaab

0008100c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8100c:	4b0a      	ldr	r3, [pc, #40]	; (81038 <_sbrk+0x2c>)
   8100e:	681b      	ldr	r3, [r3, #0]
   81010:	b153      	cbz	r3, 81028 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   81012:	4b09      	ldr	r3, [pc, #36]	; (81038 <_sbrk+0x2c>)
   81014:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81016:	181a      	adds	r2, r3, r0
   81018:	4908      	ldr	r1, [pc, #32]	; (8103c <_sbrk+0x30>)
   8101a:	4291      	cmp	r1, r2
   8101c:	db08      	blt.n	81030 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8101e:	4610      	mov	r0, r2
   81020:	4a05      	ldr	r2, [pc, #20]	; (81038 <_sbrk+0x2c>)
   81022:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81024:	4618      	mov	r0, r3
   81026:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81028:	4a05      	ldr	r2, [pc, #20]	; (81040 <_sbrk+0x34>)
   8102a:	4b03      	ldr	r3, [pc, #12]	; (81038 <_sbrk+0x2c>)
   8102c:	601a      	str	r2, [r3, #0]
   8102e:	e7f0      	b.n	81012 <_sbrk+0x6>
		return (caddr_t) -1;	
   81030:	f04f 30ff 	mov.w	r0, #4294967295
}
   81034:	4770      	bx	lr
   81036:	bf00      	nop
   81038:	20070c20 	.word	0x20070c20
   8103c:	20087ffc 	.word	0x20087ffc
   81040:	20073c90 	.word	0x20073c90

00081044 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81044:	f04f 30ff 	mov.w	r0, #4294967295
   81048:	4770      	bx	lr

0008104a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8104a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8104e:	604b      	str	r3, [r1, #4]

	return 0;
}
   81050:	2000      	movs	r0, #0
   81052:	4770      	bx	lr

00081054 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81054:	2001      	movs	r0, #1
   81056:	4770      	bx	lr

00081058 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81058:	2000      	movs	r0, #0
   8105a:	4770      	bx	lr

0008105c <configure_tc>:
int configureDone = 0; // define and initialize external variable
                       // initialization goes only with definition
					   // Only one source file may define the external variable, and definition is done only ONCE

void configure_tc(void)
{
   8105c:	b510      	push	{r4, lr}
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   8105e:	201b      	movs	r0, #27
   81060:	4b0d      	ldr	r3, [pc, #52]	; (81098 <configure_tc+0x3c>)
   81062:	4798      	blx	r3
	/* Configure TC for a 500 kHz frequency and trigger on RC compare. */
	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz (internal clock signal)
   81064:	4c0d      	ldr	r4, [pc, #52]	; (8109c <configure_tc+0x40>)
   81066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8106a:	2100      	movs	r1, #0
   8106c:	4620      	mov	r0, r4
   8106e:	4b0c      	ldr	r3, [pc, #48]	; (810a0 <configure_tc+0x44>)
   81070:	4798      	blx	r3
	tc_write_rc(TC0, 0, 84);					//84 corresponds to fs = 500 kHz (42 MHz/84 = 500 kHz)
   81072:	2254      	movs	r2, #84	; 0x54
   81074:	2100      	movs	r1, #0
   81076:	4620      	mov	r0, r4
   81078:	4b0a      	ldr	r3, [pc, #40]	; (810a4 <configure_tc+0x48>)
   8107a:	4798      	blx	r3
   8107c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81080:	4b09      	ldr	r3, [pc, #36]	; (810a8 <configure_tc+0x4c>)
   81082:	601a      	str	r2, [r3, #0]
	/* Configure and enable interrupt on RC compare:
	 * A trigger resets the counter and starts the counter clock. RC Compare Trigger is implemented 
	 * in each channel and can provide a trigger when the counter value matches the RC value.
	 */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS); //CPCS is 5th bit (nr 4) in  TC Interrupt Enable Register (TC_IER0, ch 0: 0x40080024)
   81084:	2210      	movs	r2, #16
   81086:	2100      	movs	r1, #0
   81088:	4620      	mov	r0, r4
   8108a:	4b08      	ldr	r3, [pc, #32]	; (810ac <configure_tc+0x50>)
   8108c:	4798      	blx	r3

	configureDone = 1;
   8108e:	2201      	movs	r2, #1
   81090:	4b07      	ldr	r3, [pc, #28]	; (810b0 <configure_tc+0x54>)
   81092:	601a      	str	r2, [r3, #0]
   81094:	bd10      	pop	{r4, pc}
   81096:	bf00      	nop
   81098:	00080e05 	.word	0x00080e05
   8109c:	40080000 	.word	0x40080000
   810a0:	00080687 	.word	0x00080687
   810a4:	000806af 	.word	0x000806af
   810a8:	e000e100 	.word	0xe000e100
   810ac:	000806b7 	.word	0x000806b7
   810b0:	20070c24 	.word	0x20070c24

000810b4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   810b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   810b6:	b083      	sub	sp, #12
   810b8:	4604      	mov	r4, r0
   810ba:	460d      	mov	r5, r1
	uint32_t val = 0;
   810bc:	2300      	movs	r3, #0
   810be:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   810c0:	4b20      	ldr	r3, [pc, #128]	; (81144 <usart_serial_getchar+0x90>)
   810c2:	4298      	cmp	r0, r3
   810c4:	d00d      	beq.n	810e2 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   810c6:	4b20      	ldr	r3, [pc, #128]	; (81148 <usart_serial_getchar+0x94>)
   810c8:	4298      	cmp	r0, r3
   810ca:	d012      	beq.n	810f2 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   810cc:	4b1f      	ldr	r3, [pc, #124]	; (8114c <usart_serial_getchar+0x98>)
   810ce:	4298      	cmp	r0, r3
   810d0:	d019      	beq.n	81106 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   810d2:	4b1f      	ldr	r3, [pc, #124]	; (81150 <usart_serial_getchar+0x9c>)
   810d4:	429c      	cmp	r4, r3
   810d6:	d020      	beq.n	8111a <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   810d8:	4b1e      	ldr	r3, [pc, #120]	; (81154 <usart_serial_getchar+0xa0>)
   810da:	429c      	cmp	r4, r3
   810dc:	d027      	beq.n	8112e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   810de:	b003      	add	sp, #12
   810e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   810e2:	461f      	mov	r7, r3
   810e4:	4e1c      	ldr	r6, [pc, #112]	; (81158 <usart_serial_getchar+0xa4>)
   810e6:	4629      	mov	r1, r5
   810e8:	4638      	mov	r0, r7
   810ea:	47b0      	blx	r6
   810ec:	2800      	cmp	r0, #0
   810ee:	d1fa      	bne.n	810e6 <usart_serial_getchar+0x32>
   810f0:	e7ef      	b.n	810d2 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   810f2:	461f      	mov	r7, r3
   810f4:	4e19      	ldr	r6, [pc, #100]	; (8115c <usart_serial_getchar+0xa8>)
   810f6:	a901      	add	r1, sp, #4
   810f8:	4638      	mov	r0, r7
   810fa:	47b0      	blx	r6
   810fc:	2800      	cmp	r0, #0
   810fe:	d1fa      	bne.n	810f6 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   81100:	9b01      	ldr	r3, [sp, #4]
   81102:	702b      	strb	r3, [r5, #0]
   81104:	e7e8      	b.n	810d8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   81106:	461e      	mov	r6, r3
   81108:	4c14      	ldr	r4, [pc, #80]	; (8115c <usart_serial_getchar+0xa8>)
   8110a:	a901      	add	r1, sp, #4
   8110c:	4630      	mov	r0, r6
   8110e:	47a0      	blx	r4
   81110:	2800      	cmp	r0, #0
   81112:	d1fa      	bne.n	8110a <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   81114:	9b01      	ldr	r3, [sp, #4]
   81116:	702b      	strb	r3, [r5, #0]
   81118:	e7e1      	b.n	810de <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8111a:	461e      	mov	r6, r3
   8111c:	4c0f      	ldr	r4, [pc, #60]	; (8115c <usart_serial_getchar+0xa8>)
   8111e:	a901      	add	r1, sp, #4
   81120:	4630      	mov	r0, r6
   81122:	47a0      	blx	r4
   81124:	2800      	cmp	r0, #0
   81126:	d1fa      	bne.n	8111e <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   81128:	9b01      	ldr	r3, [sp, #4]
   8112a:	702b      	strb	r3, [r5, #0]
   8112c:	e7d7      	b.n	810de <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8112e:	461e      	mov	r6, r3
   81130:	4c0a      	ldr	r4, [pc, #40]	; (8115c <usart_serial_getchar+0xa8>)
   81132:	a901      	add	r1, sp, #4
   81134:	4630      	mov	r0, r6
   81136:	47a0      	blx	r4
   81138:	2800      	cmp	r0, #0
   8113a:	d1fa      	bne.n	81132 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   8113c:	9b01      	ldr	r3, [sp, #4]
   8113e:	702b      	strb	r3, [r5, #0]
}
   81140:	e7cd      	b.n	810de <usart_serial_getchar+0x2a>
   81142:	bf00      	nop
   81144:	400e0800 	.word	0x400e0800
   81148:	40098000 	.word	0x40098000
   8114c:	4009c000 	.word	0x4009c000
   81150:	400a0000 	.word	0x400a0000
   81154:	400a4000 	.word	0x400a4000
   81158:	000808b3 	.word	0x000808b3
   8115c:	000806db 	.word	0x000806db

00081160 <usart_serial_putchar>:
{
   81160:	b570      	push	{r4, r5, r6, lr}
   81162:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   81164:	4b1e      	ldr	r3, [pc, #120]	; (811e0 <usart_serial_putchar+0x80>)
   81166:	4298      	cmp	r0, r3
   81168:	d00d      	beq.n	81186 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   8116a:	4b1e      	ldr	r3, [pc, #120]	; (811e4 <usart_serial_putchar+0x84>)
   8116c:	4298      	cmp	r0, r3
   8116e:	d013      	beq.n	81198 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   81170:	4b1d      	ldr	r3, [pc, #116]	; (811e8 <usart_serial_putchar+0x88>)
   81172:	4298      	cmp	r0, r3
   81174:	d019      	beq.n	811aa <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   81176:	4b1d      	ldr	r3, [pc, #116]	; (811ec <usart_serial_putchar+0x8c>)
   81178:	4298      	cmp	r0, r3
   8117a:	d01f      	beq.n	811bc <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   8117c:	4b1c      	ldr	r3, [pc, #112]	; (811f0 <usart_serial_putchar+0x90>)
   8117e:	4298      	cmp	r0, r3
   81180:	d025      	beq.n	811ce <usart_serial_putchar+0x6e>
	return 0;
   81182:	2000      	movs	r0, #0
}
   81184:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   81186:	461e      	mov	r6, r3
   81188:	4d1a      	ldr	r5, [pc, #104]	; (811f4 <usart_serial_putchar+0x94>)
   8118a:	4621      	mov	r1, r4
   8118c:	4630      	mov	r0, r6
   8118e:	47a8      	blx	r5
   81190:	2800      	cmp	r0, #0
   81192:	d1fa      	bne.n	8118a <usart_serial_putchar+0x2a>
		return 1;
   81194:	2001      	movs	r0, #1
   81196:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81198:	461e      	mov	r6, r3
   8119a:	4d17      	ldr	r5, [pc, #92]	; (811f8 <usart_serial_putchar+0x98>)
   8119c:	4621      	mov	r1, r4
   8119e:	4630      	mov	r0, r6
   811a0:	47a8      	blx	r5
   811a2:	2800      	cmp	r0, #0
   811a4:	d1fa      	bne.n	8119c <usart_serial_putchar+0x3c>
		return 1;
   811a6:	2001      	movs	r0, #1
   811a8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   811aa:	461e      	mov	r6, r3
   811ac:	4d12      	ldr	r5, [pc, #72]	; (811f8 <usart_serial_putchar+0x98>)
   811ae:	4621      	mov	r1, r4
   811b0:	4630      	mov	r0, r6
   811b2:	47a8      	blx	r5
   811b4:	2800      	cmp	r0, #0
   811b6:	d1fa      	bne.n	811ae <usart_serial_putchar+0x4e>
		return 1;
   811b8:	2001      	movs	r0, #1
   811ba:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   811bc:	461e      	mov	r6, r3
   811be:	4d0e      	ldr	r5, [pc, #56]	; (811f8 <usart_serial_putchar+0x98>)
   811c0:	4621      	mov	r1, r4
   811c2:	4630      	mov	r0, r6
   811c4:	47a8      	blx	r5
   811c6:	2800      	cmp	r0, #0
   811c8:	d1fa      	bne.n	811c0 <usart_serial_putchar+0x60>
		return 1;
   811ca:	2001      	movs	r0, #1
   811cc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   811ce:	461e      	mov	r6, r3
   811d0:	4d09      	ldr	r5, [pc, #36]	; (811f8 <usart_serial_putchar+0x98>)
   811d2:	4621      	mov	r1, r4
   811d4:	4630      	mov	r0, r6
   811d6:	47a8      	blx	r5
   811d8:	2800      	cmp	r0, #0
   811da:	d1fa      	bne.n	811d2 <usart_serial_putchar+0x72>
		return 1;
   811dc:	2001      	movs	r0, #1
   811de:	bd70      	pop	{r4, r5, r6, pc}
   811e0:	400e0800 	.word	0x400e0800
   811e4:	40098000 	.word	0x40098000
   811e8:	4009c000 	.word	0x4009c000
   811ec:	400a0000 	.word	0x400a0000
   811f0:	400a4000 	.word	0x400a4000
   811f4:	000808a3 	.word	0x000808a3
   811f8:	000806c7 	.word	0x000806c7

000811fc <main>:
	printf("=============\n");
}


int main (void)
{
   811fc:	b500      	push	{lr}
   811fe:	b085      	sub	sp, #20
	sysclk_init();
   81200:	4b1f      	ldr	r3, [pc, #124]	; (81280 <main+0x84>)
   81202:	4798      	blx	r3
	board_init();
   81204:	4b1f      	ldr	r3, [pc, #124]	; (81284 <main+0x88>)
   81206:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81208:	2008      	movs	r0, #8
   8120a:	4c1f      	ldr	r4, [pc, #124]	; (81288 <main+0x8c>)
   8120c:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8120e:	4d1f      	ldr	r5, [pc, #124]	; (8128c <main+0x90>)
   81210:	4b1f      	ldr	r3, [pc, #124]	; (81290 <main+0x94>)
   81212:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81214:	4a1f      	ldr	r2, [pc, #124]	; (81294 <main+0x98>)
   81216:	4b20      	ldr	r3, [pc, #128]	; (81298 <main+0x9c>)
   81218:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8121a:	4a20      	ldr	r2, [pc, #128]	; (8129c <main+0xa0>)
   8121c:	4b20      	ldr	r3, [pc, #128]	; (812a0 <main+0xa4>)
   8121e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81220:	4b20      	ldr	r3, [pc, #128]	; (812a4 <main+0xa8>)
   81222:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81224:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81228:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8122a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8122e:	9303      	str	r3, [sp, #12]
   81230:	2008      	movs	r0, #8
   81232:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
   81234:	a901      	add	r1, sp, #4
   81236:	4628      	mov	r0, r5
   81238:	4b1b      	ldr	r3, [pc, #108]	; (812a8 <main+0xac>)
   8123a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8123c:	4e1b      	ldr	r6, [pc, #108]	; (812ac <main+0xb0>)
   8123e:	6833      	ldr	r3, [r6, #0]
   81240:	2100      	movs	r1, #0
   81242:	6898      	ldr	r0, [r3, #8]
   81244:	4d1a      	ldr	r5, [pc, #104]	; (812b0 <main+0xb4>)
   81246:	47a8      	blx	r5
	setbuf(stdin, NULL);
   81248:	6833      	ldr	r3, [r6, #0]
   8124a:	2100      	movs	r1, #0
   8124c:	6858      	ldr	r0, [r3, #4]
   8124e:	47a8      	blx	r5
	printf("Console ready\n");
   81250:	4818      	ldr	r0, [pc, #96]	; (812b4 <main+0xb8>)
   81252:	4d19      	ldr	r5, [pc, #100]	; (812b8 <main+0xbc>)
   81254:	47a8      	blx	r5
	printf("=============\n");
   81256:	4819      	ldr	r0, [pc, #100]	; (812bc <main+0xc0>)
   81258:	47a8      	blx	r5
   8125a:	200b      	movs	r0, #11
   8125c:	47a0      	blx	r4
   8125e:	200c      	movs	r0, #12
   81260:	47a0      	blx	r4
   81262:	200d      	movs	r0, #13
   81264:	47a0      	blx	r4
   81266:	200e      	movs	r0, #14
   81268:	47a0      	blx	r4
	configureConsole();
	
	ioport_init();
	adc_setup();
   8126a:	4b15      	ldr	r3, [pc, #84]	; (812c0 <main+0xc4>)
   8126c:	4798      	blx	r3
	configure_tc();
   8126e:	4b15      	ldr	r3, [pc, #84]	; (812c4 <main+0xc8>)
   81270:	4798      	blx	r3
	init_amplitude_trigger();
   81272:	4b15      	ldr	r3, [pc, #84]	; (812c8 <main+0xcc>)
   81274:	4798      	blx	r3
	init_pulse_pin();
   81276:	4b15      	ldr	r3, [pc, #84]	; (812cc <main+0xd0>)
   81278:	4798      	blx	r3
	TC1_init();
   8127a:	4b15      	ldr	r3, [pc, #84]	; (812d0 <main+0xd4>)
   8127c:	4798      	blx	r3
   8127e:	e7fe      	b.n	8127e <main+0x82>
   81280:	000808c5 	.word	0x000808c5
   81284:	00080929 	.word	0x00080929
   81288:	00080e05 	.word	0x00080e05
   8128c:	400e0800 	.word	0x400e0800
   81290:	20071c64 	.word	0x20071c64
   81294:	00081161 	.word	0x00081161
   81298:	20071c60 	.word	0x20071c60
   8129c:	000810b5 	.word	0x000810b5
   812a0:	20071c5c 	.word	0x20071c5c
   812a4:	0501bd00 	.word	0x0501bd00
   812a8:	0008086d 	.word	0x0008086d
   812ac:	20070134 	.word	0x20070134
   812b0:	000821c5 	.word	0x000821c5
   812b4:	00084f64 	.word	0x00084f64
   812b8:	00082055 	.word	0x00082055
   812bc:	00084f74 	.word	0x00084f74
   812c0:	0008046d 	.word	0x0008046d
   812c4:	0008105d 	.word	0x0008105d
   812c8:	0008034d 	.word	0x0008034d
   812cc:	00080231 	.word	0x00080231
   812d0:	0008028d 	.word	0x0008028d

000812d4 <__aeabi_drsub>:
   812d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   812d8:	e002      	b.n	812e0 <__adddf3>
   812da:	bf00      	nop

000812dc <__aeabi_dsub>:
   812dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000812e0 <__adddf3>:
   812e0:	b530      	push	{r4, r5, lr}
   812e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   812e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   812ea:	ea94 0f05 	teq	r4, r5
   812ee:	bf08      	it	eq
   812f0:	ea90 0f02 	teqeq	r0, r2
   812f4:	bf1f      	itttt	ne
   812f6:	ea54 0c00 	orrsne.w	ip, r4, r0
   812fa:	ea55 0c02 	orrsne.w	ip, r5, r2
   812fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81302:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81306:	f000 80e2 	beq.w	814ce <__adddf3+0x1ee>
   8130a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8130e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81312:	bfb8      	it	lt
   81314:	426d      	neglt	r5, r5
   81316:	dd0c      	ble.n	81332 <__adddf3+0x52>
   81318:	442c      	add	r4, r5
   8131a:	ea80 0202 	eor.w	r2, r0, r2
   8131e:	ea81 0303 	eor.w	r3, r1, r3
   81322:	ea82 0000 	eor.w	r0, r2, r0
   81326:	ea83 0101 	eor.w	r1, r3, r1
   8132a:	ea80 0202 	eor.w	r2, r0, r2
   8132e:	ea81 0303 	eor.w	r3, r1, r3
   81332:	2d36      	cmp	r5, #54	; 0x36
   81334:	bf88      	it	hi
   81336:	bd30      	pophi	{r4, r5, pc}
   81338:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8133c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81340:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   81344:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81348:	d002      	beq.n	81350 <__adddf3+0x70>
   8134a:	4240      	negs	r0, r0
   8134c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81350:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   81354:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81358:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8135c:	d002      	beq.n	81364 <__adddf3+0x84>
   8135e:	4252      	negs	r2, r2
   81360:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   81364:	ea94 0f05 	teq	r4, r5
   81368:	f000 80a7 	beq.w	814ba <__adddf3+0x1da>
   8136c:	f1a4 0401 	sub.w	r4, r4, #1
   81370:	f1d5 0e20 	rsbs	lr, r5, #32
   81374:	db0d      	blt.n	81392 <__adddf3+0xb2>
   81376:	fa02 fc0e 	lsl.w	ip, r2, lr
   8137a:	fa22 f205 	lsr.w	r2, r2, r5
   8137e:	1880      	adds	r0, r0, r2
   81380:	f141 0100 	adc.w	r1, r1, #0
   81384:	fa03 f20e 	lsl.w	r2, r3, lr
   81388:	1880      	adds	r0, r0, r2
   8138a:	fa43 f305 	asr.w	r3, r3, r5
   8138e:	4159      	adcs	r1, r3
   81390:	e00e      	b.n	813b0 <__adddf3+0xd0>
   81392:	f1a5 0520 	sub.w	r5, r5, #32
   81396:	f10e 0e20 	add.w	lr, lr, #32
   8139a:	2a01      	cmp	r2, #1
   8139c:	fa03 fc0e 	lsl.w	ip, r3, lr
   813a0:	bf28      	it	cs
   813a2:	f04c 0c02 	orrcs.w	ip, ip, #2
   813a6:	fa43 f305 	asr.w	r3, r3, r5
   813aa:	18c0      	adds	r0, r0, r3
   813ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   813b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   813b4:	d507      	bpl.n	813c6 <__adddf3+0xe6>
   813b6:	f04f 0e00 	mov.w	lr, #0
   813ba:	f1dc 0c00 	rsbs	ip, ip, #0
   813be:	eb7e 0000 	sbcs.w	r0, lr, r0
   813c2:	eb6e 0101 	sbc.w	r1, lr, r1
   813c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   813ca:	d31b      	bcc.n	81404 <__adddf3+0x124>
   813cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   813d0:	d30c      	bcc.n	813ec <__adddf3+0x10c>
   813d2:	0849      	lsrs	r1, r1, #1
   813d4:	ea5f 0030 	movs.w	r0, r0, rrx
   813d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   813dc:	f104 0401 	add.w	r4, r4, #1
   813e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   813e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   813e8:	f080 809a 	bcs.w	81520 <__adddf3+0x240>
   813ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   813f0:	bf08      	it	eq
   813f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   813f6:	f150 0000 	adcs.w	r0, r0, #0
   813fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   813fe:	ea41 0105 	orr.w	r1, r1, r5
   81402:	bd30      	pop	{r4, r5, pc}
   81404:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81408:	4140      	adcs	r0, r0
   8140a:	eb41 0101 	adc.w	r1, r1, r1
   8140e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81412:	f1a4 0401 	sub.w	r4, r4, #1
   81416:	d1e9      	bne.n	813ec <__adddf3+0x10c>
   81418:	f091 0f00 	teq	r1, #0
   8141c:	bf04      	itt	eq
   8141e:	4601      	moveq	r1, r0
   81420:	2000      	moveq	r0, #0
   81422:	fab1 f381 	clz	r3, r1
   81426:	bf08      	it	eq
   81428:	3320      	addeq	r3, #32
   8142a:	f1a3 030b 	sub.w	r3, r3, #11
   8142e:	f1b3 0220 	subs.w	r2, r3, #32
   81432:	da0c      	bge.n	8144e <__adddf3+0x16e>
   81434:	320c      	adds	r2, #12
   81436:	dd08      	ble.n	8144a <__adddf3+0x16a>
   81438:	f102 0c14 	add.w	ip, r2, #20
   8143c:	f1c2 020c 	rsb	r2, r2, #12
   81440:	fa01 f00c 	lsl.w	r0, r1, ip
   81444:	fa21 f102 	lsr.w	r1, r1, r2
   81448:	e00c      	b.n	81464 <__adddf3+0x184>
   8144a:	f102 0214 	add.w	r2, r2, #20
   8144e:	bfd8      	it	le
   81450:	f1c2 0c20 	rsble	ip, r2, #32
   81454:	fa01 f102 	lsl.w	r1, r1, r2
   81458:	fa20 fc0c 	lsr.w	ip, r0, ip
   8145c:	bfdc      	itt	le
   8145e:	ea41 010c 	orrle.w	r1, r1, ip
   81462:	4090      	lslle	r0, r2
   81464:	1ae4      	subs	r4, r4, r3
   81466:	bfa2      	ittt	ge
   81468:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8146c:	4329      	orrge	r1, r5
   8146e:	bd30      	popge	{r4, r5, pc}
   81470:	ea6f 0404 	mvn.w	r4, r4
   81474:	3c1f      	subs	r4, #31
   81476:	da1c      	bge.n	814b2 <__adddf3+0x1d2>
   81478:	340c      	adds	r4, #12
   8147a:	dc0e      	bgt.n	8149a <__adddf3+0x1ba>
   8147c:	f104 0414 	add.w	r4, r4, #20
   81480:	f1c4 0220 	rsb	r2, r4, #32
   81484:	fa20 f004 	lsr.w	r0, r0, r4
   81488:	fa01 f302 	lsl.w	r3, r1, r2
   8148c:	ea40 0003 	orr.w	r0, r0, r3
   81490:	fa21 f304 	lsr.w	r3, r1, r4
   81494:	ea45 0103 	orr.w	r1, r5, r3
   81498:	bd30      	pop	{r4, r5, pc}
   8149a:	f1c4 040c 	rsb	r4, r4, #12
   8149e:	f1c4 0220 	rsb	r2, r4, #32
   814a2:	fa20 f002 	lsr.w	r0, r0, r2
   814a6:	fa01 f304 	lsl.w	r3, r1, r4
   814aa:	ea40 0003 	orr.w	r0, r0, r3
   814ae:	4629      	mov	r1, r5
   814b0:	bd30      	pop	{r4, r5, pc}
   814b2:	fa21 f004 	lsr.w	r0, r1, r4
   814b6:	4629      	mov	r1, r5
   814b8:	bd30      	pop	{r4, r5, pc}
   814ba:	f094 0f00 	teq	r4, #0
   814be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   814c2:	bf06      	itte	eq
   814c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   814c8:	3401      	addeq	r4, #1
   814ca:	3d01      	subne	r5, #1
   814cc:	e74e      	b.n	8136c <__adddf3+0x8c>
   814ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   814d2:	bf18      	it	ne
   814d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   814d8:	d029      	beq.n	8152e <__adddf3+0x24e>
   814da:	ea94 0f05 	teq	r4, r5
   814de:	bf08      	it	eq
   814e0:	ea90 0f02 	teqeq	r0, r2
   814e4:	d005      	beq.n	814f2 <__adddf3+0x212>
   814e6:	ea54 0c00 	orrs.w	ip, r4, r0
   814ea:	bf04      	itt	eq
   814ec:	4619      	moveq	r1, r3
   814ee:	4610      	moveq	r0, r2
   814f0:	bd30      	pop	{r4, r5, pc}
   814f2:	ea91 0f03 	teq	r1, r3
   814f6:	bf1e      	ittt	ne
   814f8:	2100      	movne	r1, #0
   814fa:	2000      	movne	r0, #0
   814fc:	bd30      	popne	{r4, r5, pc}
   814fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81502:	d105      	bne.n	81510 <__adddf3+0x230>
   81504:	0040      	lsls	r0, r0, #1
   81506:	4149      	adcs	r1, r1
   81508:	bf28      	it	cs
   8150a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8150e:	bd30      	pop	{r4, r5, pc}
   81510:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81514:	bf3c      	itt	cc
   81516:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8151a:	bd30      	popcc	{r4, r5, pc}
   8151c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81520:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81524:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81528:	f04f 0000 	mov.w	r0, #0
   8152c:	bd30      	pop	{r4, r5, pc}
   8152e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81532:	bf1a      	itte	ne
   81534:	4619      	movne	r1, r3
   81536:	4610      	movne	r0, r2
   81538:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8153c:	bf1c      	itt	ne
   8153e:	460b      	movne	r3, r1
   81540:	4602      	movne	r2, r0
   81542:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81546:	bf06      	itte	eq
   81548:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8154c:	ea91 0f03 	teqeq	r1, r3
   81550:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   81554:	bd30      	pop	{r4, r5, pc}
   81556:	bf00      	nop

00081558 <__aeabi_ui2d>:
   81558:	f090 0f00 	teq	r0, #0
   8155c:	bf04      	itt	eq
   8155e:	2100      	moveq	r1, #0
   81560:	4770      	bxeq	lr
   81562:	b530      	push	{r4, r5, lr}
   81564:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81568:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8156c:	f04f 0500 	mov.w	r5, #0
   81570:	f04f 0100 	mov.w	r1, #0
   81574:	e750      	b.n	81418 <__adddf3+0x138>
   81576:	bf00      	nop

00081578 <__aeabi_i2d>:
   81578:	f090 0f00 	teq	r0, #0
   8157c:	bf04      	itt	eq
   8157e:	2100      	moveq	r1, #0
   81580:	4770      	bxeq	lr
   81582:	b530      	push	{r4, r5, lr}
   81584:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81588:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8158c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81590:	bf48      	it	mi
   81592:	4240      	negmi	r0, r0
   81594:	f04f 0100 	mov.w	r1, #0
   81598:	e73e      	b.n	81418 <__adddf3+0x138>
   8159a:	bf00      	nop

0008159c <__aeabi_f2d>:
   8159c:	0042      	lsls	r2, r0, #1
   8159e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   815a2:	ea4f 0131 	mov.w	r1, r1, rrx
   815a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   815aa:	bf1f      	itttt	ne
   815ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   815b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   815b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   815b8:	4770      	bxne	lr
   815ba:	f092 0f00 	teq	r2, #0
   815be:	bf14      	ite	ne
   815c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   815c4:	4770      	bxeq	lr
   815c6:	b530      	push	{r4, r5, lr}
   815c8:	f44f 7460 	mov.w	r4, #896	; 0x380
   815cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   815d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   815d4:	e720      	b.n	81418 <__adddf3+0x138>
   815d6:	bf00      	nop

000815d8 <__aeabi_ul2d>:
   815d8:	ea50 0201 	orrs.w	r2, r0, r1
   815dc:	bf08      	it	eq
   815de:	4770      	bxeq	lr
   815e0:	b530      	push	{r4, r5, lr}
   815e2:	f04f 0500 	mov.w	r5, #0
   815e6:	e00a      	b.n	815fe <__aeabi_l2d+0x16>

000815e8 <__aeabi_l2d>:
   815e8:	ea50 0201 	orrs.w	r2, r0, r1
   815ec:	bf08      	it	eq
   815ee:	4770      	bxeq	lr
   815f0:	b530      	push	{r4, r5, lr}
   815f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   815f6:	d502      	bpl.n	815fe <__aeabi_l2d+0x16>
   815f8:	4240      	negs	r0, r0
   815fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   815fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81602:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81606:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8160a:	f43f aedc 	beq.w	813c6 <__adddf3+0xe6>
   8160e:	f04f 0203 	mov.w	r2, #3
   81612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81616:	bf18      	it	ne
   81618:	3203      	addne	r2, #3
   8161a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8161e:	bf18      	it	ne
   81620:	3203      	addne	r2, #3
   81622:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81626:	f1c2 0320 	rsb	r3, r2, #32
   8162a:	fa00 fc03 	lsl.w	ip, r0, r3
   8162e:	fa20 f002 	lsr.w	r0, r0, r2
   81632:	fa01 fe03 	lsl.w	lr, r1, r3
   81636:	ea40 000e 	orr.w	r0, r0, lr
   8163a:	fa21 f102 	lsr.w	r1, r1, r2
   8163e:	4414      	add	r4, r2
   81640:	e6c1      	b.n	813c6 <__adddf3+0xe6>
   81642:	bf00      	nop

00081644 <__aeabi_dmul>:
   81644:	b570      	push	{r4, r5, r6, lr}
   81646:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8164a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8164e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81652:	bf1d      	ittte	ne
   81654:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81658:	ea94 0f0c 	teqne	r4, ip
   8165c:	ea95 0f0c 	teqne	r5, ip
   81660:	f000 f8de 	bleq	81820 <__aeabi_dmul+0x1dc>
   81664:	442c      	add	r4, r5
   81666:	ea81 0603 	eor.w	r6, r1, r3
   8166a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8166e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81672:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81676:	bf18      	it	ne
   81678:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8167c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81684:	d038      	beq.n	816f8 <__aeabi_dmul+0xb4>
   81686:	fba0 ce02 	umull	ip, lr, r0, r2
   8168a:	f04f 0500 	mov.w	r5, #0
   8168e:	fbe1 e502 	umlal	lr, r5, r1, r2
   81692:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81696:	fbe0 e503 	umlal	lr, r5, r0, r3
   8169a:	f04f 0600 	mov.w	r6, #0
   8169e:	fbe1 5603 	umlal	r5, r6, r1, r3
   816a2:	f09c 0f00 	teq	ip, #0
   816a6:	bf18      	it	ne
   816a8:	f04e 0e01 	orrne.w	lr, lr, #1
   816ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   816b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   816b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   816b8:	d204      	bcs.n	816c4 <__aeabi_dmul+0x80>
   816ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   816be:	416d      	adcs	r5, r5
   816c0:	eb46 0606 	adc.w	r6, r6, r6
   816c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   816c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   816cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   816d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   816d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   816d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   816dc:	bf88      	it	hi
   816de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   816e2:	d81e      	bhi.n	81722 <__aeabi_dmul+0xde>
   816e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   816e8:	bf08      	it	eq
   816ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   816ee:	f150 0000 	adcs.w	r0, r0, #0
   816f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   816f6:	bd70      	pop	{r4, r5, r6, pc}
   816f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   816fc:	ea46 0101 	orr.w	r1, r6, r1
   81700:	ea40 0002 	orr.w	r0, r0, r2
   81704:	ea81 0103 	eor.w	r1, r1, r3
   81708:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8170c:	bfc2      	ittt	gt
   8170e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81712:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81716:	bd70      	popgt	{r4, r5, r6, pc}
   81718:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8171c:	f04f 0e00 	mov.w	lr, #0
   81720:	3c01      	subs	r4, #1
   81722:	f300 80ab 	bgt.w	8187c <__aeabi_dmul+0x238>
   81726:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8172a:	bfde      	ittt	le
   8172c:	2000      	movle	r0, #0
   8172e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81732:	bd70      	pople	{r4, r5, r6, pc}
   81734:	f1c4 0400 	rsb	r4, r4, #0
   81738:	3c20      	subs	r4, #32
   8173a:	da35      	bge.n	817a8 <__aeabi_dmul+0x164>
   8173c:	340c      	adds	r4, #12
   8173e:	dc1b      	bgt.n	81778 <__aeabi_dmul+0x134>
   81740:	f104 0414 	add.w	r4, r4, #20
   81744:	f1c4 0520 	rsb	r5, r4, #32
   81748:	fa00 f305 	lsl.w	r3, r0, r5
   8174c:	fa20 f004 	lsr.w	r0, r0, r4
   81750:	fa01 f205 	lsl.w	r2, r1, r5
   81754:	ea40 0002 	orr.w	r0, r0, r2
   81758:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8175c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81764:	fa21 f604 	lsr.w	r6, r1, r4
   81768:	eb42 0106 	adc.w	r1, r2, r6
   8176c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81770:	bf08      	it	eq
   81772:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81776:	bd70      	pop	{r4, r5, r6, pc}
   81778:	f1c4 040c 	rsb	r4, r4, #12
   8177c:	f1c4 0520 	rsb	r5, r4, #32
   81780:	fa00 f304 	lsl.w	r3, r0, r4
   81784:	fa20 f005 	lsr.w	r0, r0, r5
   81788:	fa01 f204 	lsl.w	r2, r1, r4
   8178c:	ea40 0002 	orr.w	r0, r0, r2
   81790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81798:	f141 0100 	adc.w	r1, r1, #0
   8179c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   817a0:	bf08      	it	eq
   817a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   817a6:	bd70      	pop	{r4, r5, r6, pc}
   817a8:	f1c4 0520 	rsb	r5, r4, #32
   817ac:	fa00 f205 	lsl.w	r2, r0, r5
   817b0:	ea4e 0e02 	orr.w	lr, lr, r2
   817b4:	fa20 f304 	lsr.w	r3, r0, r4
   817b8:	fa01 f205 	lsl.w	r2, r1, r5
   817bc:	ea43 0302 	orr.w	r3, r3, r2
   817c0:	fa21 f004 	lsr.w	r0, r1, r4
   817c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   817c8:	fa21 f204 	lsr.w	r2, r1, r4
   817cc:	ea20 0002 	bic.w	r0, r0, r2
   817d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   817d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   817d8:	bf08      	it	eq
   817da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   817de:	bd70      	pop	{r4, r5, r6, pc}
   817e0:	f094 0f00 	teq	r4, #0
   817e4:	d10f      	bne.n	81806 <__aeabi_dmul+0x1c2>
   817e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   817ea:	0040      	lsls	r0, r0, #1
   817ec:	eb41 0101 	adc.w	r1, r1, r1
   817f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   817f4:	bf08      	it	eq
   817f6:	3c01      	subeq	r4, #1
   817f8:	d0f7      	beq.n	817ea <__aeabi_dmul+0x1a6>
   817fa:	ea41 0106 	orr.w	r1, r1, r6
   817fe:	f095 0f00 	teq	r5, #0
   81802:	bf18      	it	ne
   81804:	4770      	bxne	lr
   81806:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8180a:	0052      	lsls	r2, r2, #1
   8180c:	eb43 0303 	adc.w	r3, r3, r3
   81810:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81814:	bf08      	it	eq
   81816:	3d01      	subeq	r5, #1
   81818:	d0f7      	beq.n	8180a <__aeabi_dmul+0x1c6>
   8181a:	ea43 0306 	orr.w	r3, r3, r6
   8181e:	4770      	bx	lr
   81820:	ea94 0f0c 	teq	r4, ip
   81824:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81828:	bf18      	it	ne
   8182a:	ea95 0f0c 	teqne	r5, ip
   8182e:	d00c      	beq.n	8184a <__aeabi_dmul+0x206>
   81830:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81834:	bf18      	it	ne
   81836:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8183a:	d1d1      	bne.n	817e0 <__aeabi_dmul+0x19c>
   8183c:	ea81 0103 	eor.w	r1, r1, r3
   81840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81844:	f04f 0000 	mov.w	r0, #0
   81848:	bd70      	pop	{r4, r5, r6, pc}
   8184a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8184e:	bf06      	itte	eq
   81850:	4610      	moveq	r0, r2
   81852:	4619      	moveq	r1, r3
   81854:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81858:	d019      	beq.n	8188e <__aeabi_dmul+0x24a>
   8185a:	ea94 0f0c 	teq	r4, ip
   8185e:	d102      	bne.n	81866 <__aeabi_dmul+0x222>
   81860:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81864:	d113      	bne.n	8188e <__aeabi_dmul+0x24a>
   81866:	ea95 0f0c 	teq	r5, ip
   8186a:	d105      	bne.n	81878 <__aeabi_dmul+0x234>
   8186c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81870:	bf1c      	itt	ne
   81872:	4610      	movne	r0, r2
   81874:	4619      	movne	r1, r3
   81876:	d10a      	bne.n	8188e <__aeabi_dmul+0x24a>
   81878:	ea81 0103 	eor.w	r1, r1, r3
   8187c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81880:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81888:	f04f 0000 	mov.w	r0, #0
   8188c:	bd70      	pop	{r4, r5, r6, pc}
   8188e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81892:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81896:	bd70      	pop	{r4, r5, r6, pc}

00081898 <__aeabi_ddiv>:
   81898:	b570      	push	{r4, r5, r6, lr}
   8189a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8189e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   818a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   818a6:	bf1d      	ittte	ne
   818a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   818ac:	ea94 0f0c 	teqne	r4, ip
   818b0:	ea95 0f0c 	teqne	r5, ip
   818b4:	f000 f8a7 	bleq	81a06 <__aeabi_ddiv+0x16e>
   818b8:	eba4 0405 	sub.w	r4, r4, r5
   818bc:	ea81 0e03 	eor.w	lr, r1, r3
   818c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   818c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   818c8:	f000 8088 	beq.w	819dc <__aeabi_ddiv+0x144>
   818cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   818d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   818d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   818d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   818dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
   818e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   818e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   818e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   818ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   818f0:	429d      	cmp	r5, r3
   818f2:	bf08      	it	eq
   818f4:	4296      	cmpeq	r6, r2
   818f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   818fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
   818fe:	d202      	bcs.n	81906 <__aeabi_ddiv+0x6e>
   81900:	085b      	lsrs	r3, r3, #1
   81902:	ea4f 0232 	mov.w	r2, r2, rrx
   81906:	1ab6      	subs	r6, r6, r2
   81908:	eb65 0503 	sbc.w	r5, r5, r3
   8190c:	085b      	lsrs	r3, r3, #1
   8190e:	ea4f 0232 	mov.w	r2, r2, rrx
   81912:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81916:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8191a:	ebb6 0e02 	subs.w	lr, r6, r2
   8191e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81922:	bf22      	ittt	cs
   81924:	1ab6      	subcs	r6, r6, r2
   81926:	4675      	movcs	r5, lr
   81928:	ea40 000c 	orrcs.w	r0, r0, ip
   8192c:	085b      	lsrs	r3, r3, #1
   8192e:	ea4f 0232 	mov.w	r2, r2, rrx
   81932:	ebb6 0e02 	subs.w	lr, r6, r2
   81936:	eb75 0e03 	sbcs.w	lr, r5, r3
   8193a:	bf22      	ittt	cs
   8193c:	1ab6      	subcs	r6, r6, r2
   8193e:	4675      	movcs	r5, lr
   81940:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81944:	085b      	lsrs	r3, r3, #1
   81946:	ea4f 0232 	mov.w	r2, r2, rrx
   8194a:	ebb6 0e02 	subs.w	lr, r6, r2
   8194e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81952:	bf22      	ittt	cs
   81954:	1ab6      	subcs	r6, r6, r2
   81956:	4675      	movcs	r5, lr
   81958:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8195c:	085b      	lsrs	r3, r3, #1
   8195e:	ea4f 0232 	mov.w	r2, r2, rrx
   81962:	ebb6 0e02 	subs.w	lr, r6, r2
   81966:	eb75 0e03 	sbcs.w	lr, r5, r3
   8196a:	bf22      	ittt	cs
   8196c:	1ab6      	subcs	r6, r6, r2
   8196e:	4675      	movcs	r5, lr
   81970:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81974:	ea55 0e06 	orrs.w	lr, r5, r6
   81978:	d018      	beq.n	819ac <__aeabi_ddiv+0x114>
   8197a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8197e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81982:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81986:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8198a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8198e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81992:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81996:	d1c0      	bne.n	8191a <__aeabi_ddiv+0x82>
   81998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8199c:	d10b      	bne.n	819b6 <__aeabi_ddiv+0x11e>
   8199e:	ea41 0100 	orr.w	r1, r1, r0
   819a2:	f04f 0000 	mov.w	r0, #0
   819a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   819aa:	e7b6      	b.n	8191a <__aeabi_ddiv+0x82>
   819ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   819b0:	bf04      	itt	eq
   819b2:	4301      	orreq	r1, r0
   819b4:	2000      	moveq	r0, #0
   819b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   819ba:	bf88      	it	hi
   819bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   819c0:	f63f aeaf 	bhi.w	81722 <__aeabi_dmul+0xde>
   819c4:	ebb5 0c03 	subs.w	ip, r5, r3
   819c8:	bf04      	itt	eq
   819ca:	ebb6 0c02 	subseq.w	ip, r6, r2
   819ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   819d2:	f150 0000 	adcs.w	r0, r0, #0
   819d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   819da:	bd70      	pop	{r4, r5, r6, pc}
   819dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   819e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   819e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   819e8:	bfc2      	ittt	gt
   819ea:	ebd4 050c 	rsbsgt	r5, r4, ip
   819ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   819f2:	bd70      	popgt	{r4, r5, r6, pc}
   819f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   819f8:	f04f 0e00 	mov.w	lr, #0
   819fc:	3c01      	subs	r4, #1
   819fe:	e690      	b.n	81722 <__aeabi_dmul+0xde>
   81a00:	ea45 0e06 	orr.w	lr, r5, r6
   81a04:	e68d      	b.n	81722 <__aeabi_dmul+0xde>
   81a06:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81a0a:	ea94 0f0c 	teq	r4, ip
   81a0e:	bf08      	it	eq
   81a10:	ea95 0f0c 	teqeq	r5, ip
   81a14:	f43f af3b 	beq.w	8188e <__aeabi_dmul+0x24a>
   81a18:	ea94 0f0c 	teq	r4, ip
   81a1c:	d10a      	bne.n	81a34 <__aeabi_ddiv+0x19c>
   81a1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81a22:	f47f af34 	bne.w	8188e <__aeabi_dmul+0x24a>
   81a26:	ea95 0f0c 	teq	r5, ip
   81a2a:	f47f af25 	bne.w	81878 <__aeabi_dmul+0x234>
   81a2e:	4610      	mov	r0, r2
   81a30:	4619      	mov	r1, r3
   81a32:	e72c      	b.n	8188e <__aeabi_dmul+0x24a>
   81a34:	ea95 0f0c 	teq	r5, ip
   81a38:	d106      	bne.n	81a48 <__aeabi_ddiv+0x1b0>
   81a3a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81a3e:	f43f aefd 	beq.w	8183c <__aeabi_dmul+0x1f8>
   81a42:	4610      	mov	r0, r2
   81a44:	4619      	mov	r1, r3
   81a46:	e722      	b.n	8188e <__aeabi_dmul+0x24a>
   81a48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81a4c:	bf18      	it	ne
   81a4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81a52:	f47f aec5 	bne.w	817e0 <__aeabi_dmul+0x19c>
   81a56:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81a5a:	f47f af0d 	bne.w	81878 <__aeabi_dmul+0x234>
   81a5e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81a62:	f47f aeeb 	bne.w	8183c <__aeabi_dmul+0x1f8>
   81a66:	e712      	b.n	8188e <__aeabi_dmul+0x24a>

00081a68 <__aeabi_d2f>:
   81a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   81a70:	bf24      	itt	cs
   81a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   81a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   81a7a:	d90d      	bls.n	81a98 <__aeabi_d2f+0x30>
   81a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   81a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   81a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   81a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   81a90:	bf08      	it	eq
   81a92:	f020 0001 	biceq.w	r0, r0, #1
   81a96:	4770      	bx	lr
   81a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   81a9c:	d121      	bne.n	81ae2 <__aeabi_d2f+0x7a>
   81a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   81aa2:	bfbc      	itt	lt
   81aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   81aa8:	4770      	bxlt	lr
   81aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   81ab2:	f1c2 0218 	rsb	r2, r2, #24
   81ab6:	f1c2 0c20 	rsb	ip, r2, #32
   81aba:	fa10 f30c 	lsls.w	r3, r0, ip
   81abe:	fa20 f002 	lsr.w	r0, r0, r2
   81ac2:	bf18      	it	ne
   81ac4:	f040 0001 	orrne.w	r0, r0, #1
   81ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   81ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
   81ad4:	ea40 000c 	orr.w	r0, r0, ip
   81ad8:	fa23 f302 	lsr.w	r3, r3, r2
   81adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   81ae0:	e7cc      	b.n	81a7c <__aeabi_d2f+0x14>
   81ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   81ae6:	d107      	bne.n	81af8 <__aeabi_d2f+0x90>
   81ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   81aec:	bf1e      	ittt	ne
   81aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   81af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   81af6:	4770      	bxne	lr
   81af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   81afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81b04:	4770      	bx	lr
   81b06:	bf00      	nop

00081b08 <__aeabi_frsub>:
   81b08:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   81b0c:	e002      	b.n	81b14 <__addsf3>
   81b0e:	bf00      	nop

00081b10 <__aeabi_fsub>:
   81b10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00081b14 <__addsf3>:
   81b14:	0042      	lsls	r2, r0, #1
   81b16:	bf1f      	itttt	ne
   81b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   81b1c:	ea92 0f03 	teqne	r2, r3
   81b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   81b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81b28:	d06a      	beq.n	81c00 <__addsf3+0xec>
   81b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   81b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   81b32:	bfc1      	itttt	gt
   81b34:	18d2      	addgt	r2, r2, r3
   81b36:	4041      	eorgt	r1, r0
   81b38:	4048      	eorgt	r0, r1
   81b3a:	4041      	eorgt	r1, r0
   81b3c:	bfb8      	it	lt
   81b3e:	425b      	neglt	r3, r3
   81b40:	2b19      	cmp	r3, #25
   81b42:	bf88      	it	hi
   81b44:	4770      	bxhi	lr
   81b46:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   81b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81b4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   81b52:	bf18      	it	ne
   81b54:	4240      	negne	r0, r0
   81b56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81b5a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   81b5e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   81b62:	bf18      	it	ne
   81b64:	4249      	negne	r1, r1
   81b66:	ea92 0f03 	teq	r2, r3
   81b6a:	d03f      	beq.n	81bec <__addsf3+0xd8>
   81b6c:	f1a2 0201 	sub.w	r2, r2, #1
   81b70:	fa41 fc03 	asr.w	ip, r1, r3
   81b74:	eb10 000c 	adds.w	r0, r0, ip
   81b78:	f1c3 0320 	rsb	r3, r3, #32
   81b7c:	fa01 f103 	lsl.w	r1, r1, r3
   81b80:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81b84:	d502      	bpl.n	81b8c <__addsf3+0x78>
   81b86:	4249      	negs	r1, r1
   81b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   81b8c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81b90:	d313      	bcc.n	81bba <__addsf3+0xa6>
   81b92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   81b96:	d306      	bcc.n	81ba6 <__addsf3+0x92>
   81b98:	0840      	lsrs	r0, r0, #1
   81b9a:	ea4f 0131 	mov.w	r1, r1, rrx
   81b9e:	f102 0201 	add.w	r2, r2, #1
   81ba2:	2afe      	cmp	r2, #254	; 0xfe
   81ba4:	d251      	bcs.n	81c4a <__addsf3+0x136>
   81ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   81baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81bae:	bf08      	it	eq
   81bb0:	f020 0001 	biceq.w	r0, r0, #1
   81bb4:	ea40 0003 	orr.w	r0, r0, r3
   81bb8:	4770      	bx	lr
   81bba:	0049      	lsls	r1, r1, #1
   81bbc:	eb40 0000 	adc.w	r0, r0, r0
   81bc0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81bc4:	f1a2 0201 	sub.w	r2, r2, #1
   81bc8:	d1ed      	bne.n	81ba6 <__addsf3+0x92>
   81bca:	fab0 fc80 	clz	ip, r0
   81bce:	f1ac 0c08 	sub.w	ip, ip, #8
   81bd2:	ebb2 020c 	subs.w	r2, r2, ip
   81bd6:	fa00 f00c 	lsl.w	r0, r0, ip
   81bda:	bfaa      	itet	ge
   81bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81be0:	4252      	neglt	r2, r2
   81be2:	4318      	orrge	r0, r3
   81be4:	bfbc      	itt	lt
   81be6:	40d0      	lsrlt	r0, r2
   81be8:	4318      	orrlt	r0, r3
   81bea:	4770      	bx	lr
   81bec:	f092 0f00 	teq	r2, #0
   81bf0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81bf4:	bf06      	itte	eq
   81bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   81bfa:	3201      	addeq	r2, #1
   81bfc:	3b01      	subne	r3, #1
   81bfe:	e7b5      	b.n	81b6c <__addsf3+0x58>
   81c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
   81c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   81c08:	bf18      	it	ne
   81c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   81c0e:	d021      	beq.n	81c54 <__addsf3+0x140>
   81c10:	ea92 0f03 	teq	r2, r3
   81c14:	d004      	beq.n	81c20 <__addsf3+0x10c>
   81c16:	f092 0f00 	teq	r2, #0
   81c1a:	bf08      	it	eq
   81c1c:	4608      	moveq	r0, r1
   81c1e:	4770      	bx	lr
   81c20:	ea90 0f01 	teq	r0, r1
   81c24:	bf1c      	itt	ne
   81c26:	2000      	movne	r0, #0
   81c28:	4770      	bxne	lr
   81c2a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   81c2e:	d104      	bne.n	81c3a <__addsf3+0x126>
   81c30:	0040      	lsls	r0, r0, #1
   81c32:	bf28      	it	cs
   81c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   81c38:	4770      	bx	lr
   81c3a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   81c3e:	bf3c      	itt	cc
   81c40:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   81c44:	4770      	bxcc	lr
   81c46:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   81c4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81c52:	4770      	bx	lr
   81c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
   81c58:	bf16      	itet	ne
   81c5a:	4608      	movne	r0, r1
   81c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81c60:	4601      	movne	r1, r0
   81c62:	0242      	lsls	r2, r0, #9
   81c64:	bf06      	itte	eq
   81c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   81c6a:	ea90 0f01 	teqeq	r0, r1
   81c6e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81c72:	4770      	bx	lr

00081c74 <__aeabi_ui2f>:
   81c74:	f04f 0300 	mov.w	r3, #0
   81c78:	e004      	b.n	81c84 <__aeabi_i2f+0x8>
   81c7a:	bf00      	nop

00081c7c <__aeabi_i2f>:
   81c7c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81c80:	bf48      	it	mi
   81c82:	4240      	negmi	r0, r0
   81c84:	ea5f 0c00 	movs.w	ip, r0
   81c88:	bf08      	it	eq
   81c8a:	4770      	bxeq	lr
   81c8c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81c90:	4601      	mov	r1, r0
   81c92:	f04f 0000 	mov.w	r0, #0
   81c96:	e01c      	b.n	81cd2 <__aeabi_l2f+0x2a>

00081c98 <__aeabi_ul2f>:
   81c98:	ea50 0201 	orrs.w	r2, r0, r1
   81c9c:	bf08      	it	eq
   81c9e:	4770      	bxeq	lr
   81ca0:	f04f 0300 	mov.w	r3, #0
   81ca4:	e00a      	b.n	81cbc <__aeabi_l2f+0x14>
   81ca6:	bf00      	nop

00081ca8 <__aeabi_l2f>:
   81ca8:	ea50 0201 	orrs.w	r2, r0, r1
   81cac:	bf08      	it	eq
   81cae:	4770      	bxeq	lr
   81cb0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81cb4:	d502      	bpl.n	81cbc <__aeabi_l2f+0x14>
   81cb6:	4240      	negs	r0, r0
   81cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81cbc:	ea5f 0c01 	movs.w	ip, r1
   81cc0:	bf02      	ittt	eq
   81cc2:	4684      	moveq	ip, r0
   81cc4:	4601      	moveq	r1, r0
   81cc6:	2000      	moveq	r0, #0
   81cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81ccc:	bf08      	it	eq
   81cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81cd6:	fabc f28c 	clz	r2, ip
   81cda:	3a08      	subs	r2, #8
   81cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81ce0:	db10      	blt.n	81d04 <__aeabi_l2f+0x5c>
   81ce2:	fa01 fc02 	lsl.w	ip, r1, r2
   81ce6:	4463      	add	r3, ip
   81ce8:	fa00 fc02 	lsl.w	ip, r0, r2
   81cec:	f1c2 0220 	rsb	r2, r2, #32
   81cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81cf4:	fa20 f202 	lsr.w	r2, r0, r2
   81cf8:	eb43 0002 	adc.w	r0, r3, r2
   81cfc:	bf08      	it	eq
   81cfe:	f020 0001 	biceq.w	r0, r0, #1
   81d02:	4770      	bx	lr
   81d04:	f102 0220 	add.w	r2, r2, #32
   81d08:	fa01 fc02 	lsl.w	ip, r1, r2
   81d0c:	f1c2 0220 	rsb	r2, r2, #32
   81d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81d14:	fa21 f202 	lsr.w	r2, r1, r2
   81d18:	eb43 0002 	adc.w	r0, r3, r2
   81d1c:	bf08      	it	eq
   81d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81d22:	4770      	bx	lr

00081d24 <__aeabi_fmul>:
   81d24:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81d2c:	bf1e      	ittt	ne
   81d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81d32:	ea92 0f0c 	teqne	r2, ip
   81d36:	ea93 0f0c 	teqne	r3, ip
   81d3a:	d06f      	beq.n	81e1c <__aeabi_fmul+0xf8>
   81d3c:	441a      	add	r2, r3
   81d3e:	ea80 0c01 	eor.w	ip, r0, r1
   81d42:	0240      	lsls	r0, r0, #9
   81d44:	bf18      	it	ne
   81d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   81d4a:	d01e      	beq.n	81d8a <__aeabi_fmul+0x66>
   81d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   81d58:	fba0 3101 	umull	r3, r1, r0, r1
   81d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81d60:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81d64:	bf3e      	ittt	cc
   81d66:	0049      	lslcc	r1, r1, #1
   81d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81d6c:	005b      	lslcc	r3, r3, #1
   81d6e:	ea40 0001 	orr.w	r0, r0, r1
   81d72:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   81d76:	2afd      	cmp	r2, #253	; 0xfd
   81d78:	d81d      	bhi.n	81db6 <__aeabi_fmul+0x92>
   81d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81d82:	bf08      	it	eq
   81d84:	f020 0001 	biceq.w	r0, r0, #1
   81d88:	4770      	bx	lr
   81d8a:	f090 0f00 	teq	r0, #0
   81d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81d92:	bf08      	it	eq
   81d94:	0249      	lsleq	r1, r1, #9
   81d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81d9e:	3a7f      	subs	r2, #127	; 0x7f
   81da0:	bfc2      	ittt	gt
   81da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81daa:	4770      	bxgt	lr
   81dac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81db0:	f04f 0300 	mov.w	r3, #0
   81db4:	3a01      	subs	r2, #1
   81db6:	dc5d      	bgt.n	81e74 <__aeabi_fmul+0x150>
   81db8:	f112 0f19 	cmn.w	r2, #25
   81dbc:	bfdc      	itt	le
   81dbe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81dc2:	4770      	bxle	lr
   81dc4:	f1c2 0200 	rsb	r2, r2, #0
   81dc8:	0041      	lsls	r1, r0, #1
   81dca:	fa21 f102 	lsr.w	r1, r1, r2
   81dce:	f1c2 0220 	rsb	r2, r2, #32
   81dd2:	fa00 fc02 	lsl.w	ip, r0, r2
   81dd6:	ea5f 0031 	movs.w	r0, r1, rrx
   81dda:	f140 0000 	adc.w	r0, r0, #0
   81dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81de2:	bf08      	it	eq
   81de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81de8:	4770      	bx	lr
   81dea:	f092 0f00 	teq	r2, #0
   81dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81df2:	bf02      	ittt	eq
   81df4:	0040      	lsleq	r0, r0, #1
   81df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81dfa:	3a01      	subeq	r2, #1
   81dfc:	d0f9      	beq.n	81df2 <__aeabi_fmul+0xce>
   81dfe:	ea40 000c 	orr.w	r0, r0, ip
   81e02:	f093 0f00 	teq	r3, #0
   81e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81e0a:	bf02      	ittt	eq
   81e0c:	0049      	lsleq	r1, r1, #1
   81e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81e12:	3b01      	subeq	r3, #1
   81e14:	d0f9      	beq.n	81e0a <__aeabi_fmul+0xe6>
   81e16:	ea41 010c 	orr.w	r1, r1, ip
   81e1a:	e78f      	b.n	81d3c <__aeabi_fmul+0x18>
   81e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81e20:	ea92 0f0c 	teq	r2, ip
   81e24:	bf18      	it	ne
   81e26:	ea93 0f0c 	teqne	r3, ip
   81e2a:	d00a      	beq.n	81e42 <__aeabi_fmul+0x11e>
   81e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81e30:	bf18      	it	ne
   81e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81e36:	d1d8      	bne.n	81dea <__aeabi_fmul+0xc6>
   81e38:	ea80 0001 	eor.w	r0, r0, r1
   81e3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81e40:	4770      	bx	lr
   81e42:	f090 0f00 	teq	r0, #0
   81e46:	bf17      	itett	ne
   81e48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   81e4c:	4608      	moveq	r0, r1
   81e4e:	f091 0f00 	teqne	r1, #0
   81e52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81e56:	d014      	beq.n	81e82 <__aeabi_fmul+0x15e>
   81e58:	ea92 0f0c 	teq	r2, ip
   81e5c:	d101      	bne.n	81e62 <__aeabi_fmul+0x13e>
   81e5e:	0242      	lsls	r2, r0, #9
   81e60:	d10f      	bne.n	81e82 <__aeabi_fmul+0x15e>
   81e62:	ea93 0f0c 	teq	r3, ip
   81e66:	d103      	bne.n	81e70 <__aeabi_fmul+0x14c>
   81e68:	024b      	lsls	r3, r1, #9
   81e6a:	bf18      	it	ne
   81e6c:	4608      	movne	r0, r1
   81e6e:	d108      	bne.n	81e82 <__aeabi_fmul+0x15e>
   81e70:	ea80 0001 	eor.w	r0, r0, r1
   81e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81e78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81e80:	4770      	bx	lr
   81e82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81e86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   81e8a:	4770      	bx	lr

00081e8c <__aeabi_fdiv>:
   81e8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81e94:	bf1e      	ittt	ne
   81e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81e9a:	ea92 0f0c 	teqne	r2, ip
   81e9e:	ea93 0f0c 	teqne	r3, ip
   81ea2:	d069      	beq.n	81f78 <__aeabi_fdiv+0xec>
   81ea4:	eba2 0203 	sub.w	r2, r2, r3
   81ea8:	ea80 0c01 	eor.w	ip, r0, r1
   81eac:	0249      	lsls	r1, r1, #9
   81eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81eb2:	d037      	beq.n	81f24 <__aeabi_fdiv+0x98>
   81eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81ec0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81ec4:	428b      	cmp	r3, r1
   81ec6:	bf38      	it	cc
   81ec8:	005b      	lslcc	r3, r3, #1
   81eca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81ece:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81ed2:	428b      	cmp	r3, r1
   81ed4:	bf24      	itt	cs
   81ed6:	1a5b      	subcs	r3, r3, r1
   81ed8:	ea40 000c 	orrcs.w	r0, r0, ip
   81edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81ee0:	bf24      	itt	cs
   81ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81eee:	bf24      	itt	cs
   81ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81efc:	bf24      	itt	cs
   81efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81f06:	011b      	lsls	r3, r3, #4
   81f08:	bf18      	it	ne
   81f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81f0e:	d1e0      	bne.n	81ed2 <__aeabi_fdiv+0x46>
   81f10:	2afd      	cmp	r2, #253	; 0xfd
   81f12:	f63f af50 	bhi.w	81db6 <__aeabi_fmul+0x92>
   81f16:	428b      	cmp	r3, r1
   81f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81f1c:	bf08      	it	eq
   81f1e:	f020 0001 	biceq.w	r0, r0, #1
   81f22:	4770      	bx	lr
   81f24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81f2c:	327f      	adds	r2, #127	; 0x7f
   81f2e:	bfc2      	ittt	gt
   81f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81f38:	4770      	bxgt	lr
   81f3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81f3e:	f04f 0300 	mov.w	r3, #0
   81f42:	3a01      	subs	r2, #1
   81f44:	e737      	b.n	81db6 <__aeabi_fmul+0x92>
   81f46:	f092 0f00 	teq	r2, #0
   81f4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81f4e:	bf02      	ittt	eq
   81f50:	0040      	lsleq	r0, r0, #1
   81f52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81f56:	3a01      	subeq	r2, #1
   81f58:	d0f9      	beq.n	81f4e <__aeabi_fdiv+0xc2>
   81f5a:	ea40 000c 	orr.w	r0, r0, ip
   81f5e:	f093 0f00 	teq	r3, #0
   81f62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81f66:	bf02      	ittt	eq
   81f68:	0049      	lsleq	r1, r1, #1
   81f6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81f6e:	3b01      	subeq	r3, #1
   81f70:	d0f9      	beq.n	81f66 <__aeabi_fdiv+0xda>
   81f72:	ea41 010c 	orr.w	r1, r1, ip
   81f76:	e795      	b.n	81ea4 <__aeabi_fdiv+0x18>
   81f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81f7c:	ea92 0f0c 	teq	r2, ip
   81f80:	d108      	bne.n	81f94 <__aeabi_fdiv+0x108>
   81f82:	0242      	lsls	r2, r0, #9
   81f84:	f47f af7d 	bne.w	81e82 <__aeabi_fmul+0x15e>
   81f88:	ea93 0f0c 	teq	r3, ip
   81f8c:	f47f af70 	bne.w	81e70 <__aeabi_fmul+0x14c>
   81f90:	4608      	mov	r0, r1
   81f92:	e776      	b.n	81e82 <__aeabi_fmul+0x15e>
   81f94:	ea93 0f0c 	teq	r3, ip
   81f98:	d104      	bne.n	81fa4 <__aeabi_fdiv+0x118>
   81f9a:	024b      	lsls	r3, r1, #9
   81f9c:	f43f af4c 	beq.w	81e38 <__aeabi_fmul+0x114>
   81fa0:	4608      	mov	r0, r1
   81fa2:	e76e      	b.n	81e82 <__aeabi_fmul+0x15e>
   81fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81fa8:	bf18      	it	ne
   81faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81fae:	d1ca      	bne.n	81f46 <__aeabi_fdiv+0xba>
   81fb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81fb4:	f47f af5c 	bne.w	81e70 <__aeabi_fmul+0x14c>
   81fb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81fbc:	f47f af3c 	bne.w	81e38 <__aeabi_fmul+0x114>
   81fc0:	e75f      	b.n	81e82 <__aeabi_fmul+0x15e>
   81fc2:	bf00      	nop

00081fc4 <__aeabi_f2uiz>:
   81fc4:	0042      	lsls	r2, r0, #1
   81fc6:	d20e      	bcs.n	81fe6 <__aeabi_f2uiz+0x22>
   81fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81fcc:	d30b      	bcc.n	81fe6 <__aeabi_f2uiz+0x22>
   81fce:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81fd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81fd6:	d409      	bmi.n	81fec <__aeabi_f2uiz+0x28>
   81fd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81fdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81fe0:	fa23 f002 	lsr.w	r0, r3, r2
   81fe4:	4770      	bx	lr
   81fe6:	f04f 0000 	mov.w	r0, #0
   81fea:	4770      	bx	lr
   81fec:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81ff0:	d101      	bne.n	81ff6 <__aeabi_f2uiz+0x32>
   81ff2:	0242      	lsls	r2, r0, #9
   81ff4:	d102      	bne.n	81ffc <__aeabi_f2uiz+0x38>
   81ff6:	f04f 30ff 	mov.w	r0, #4294967295
   81ffa:	4770      	bx	lr
   81ffc:	f04f 0000 	mov.w	r0, #0
   82000:	4770      	bx	lr
   82002:	bf00      	nop

00082004 <__libc_init_array>:
   82004:	b570      	push	{r4, r5, r6, lr}
   82006:	4e0f      	ldr	r6, [pc, #60]	; (82044 <__libc_init_array+0x40>)
   82008:	4d0f      	ldr	r5, [pc, #60]	; (82048 <__libc_init_array+0x44>)
   8200a:	1b76      	subs	r6, r6, r5
   8200c:	10b6      	asrs	r6, r6, #2
   8200e:	bf18      	it	ne
   82010:	2400      	movne	r4, #0
   82012:	d005      	beq.n	82020 <__libc_init_array+0x1c>
   82014:	3401      	adds	r4, #1
   82016:	f855 3b04 	ldr.w	r3, [r5], #4
   8201a:	4798      	blx	r3
   8201c:	42a6      	cmp	r6, r4
   8201e:	d1f9      	bne.n	82014 <__libc_init_array+0x10>
   82020:	4e0a      	ldr	r6, [pc, #40]	; (8204c <__libc_init_array+0x48>)
   82022:	4d0b      	ldr	r5, [pc, #44]	; (82050 <__libc_init_array+0x4c>)
   82024:	f003 f864 	bl	850f0 <_init>
   82028:	1b76      	subs	r6, r6, r5
   8202a:	10b6      	asrs	r6, r6, #2
   8202c:	bf18      	it	ne
   8202e:	2400      	movne	r4, #0
   82030:	d006      	beq.n	82040 <__libc_init_array+0x3c>
   82032:	3401      	adds	r4, #1
   82034:	f855 3b04 	ldr.w	r3, [r5], #4
   82038:	4798      	blx	r3
   8203a:	42a6      	cmp	r6, r4
   8203c:	d1f9      	bne.n	82032 <__libc_init_array+0x2e>
   8203e:	bd70      	pop	{r4, r5, r6, pc}
   82040:	bd70      	pop	{r4, r5, r6, pc}
   82042:	bf00      	nop
   82044:	000850fc 	.word	0x000850fc
   82048:	000850fc 	.word	0x000850fc
   8204c:	00085104 	.word	0x00085104
   82050:	000850fc 	.word	0x000850fc

00082054 <iprintf>:
   82054:	b40f      	push	{r0, r1, r2, r3}
   82056:	b510      	push	{r4, lr}
   82058:	4b07      	ldr	r3, [pc, #28]	; (82078 <iprintf+0x24>)
   8205a:	b082      	sub	sp, #8
   8205c:	ac04      	add	r4, sp, #16
   8205e:	f854 2b04 	ldr.w	r2, [r4], #4
   82062:	6818      	ldr	r0, [r3, #0]
   82064:	4623      	mov	r3, r4
   82066:	6881      	ldr	r1, [r0, #8]
   82068:	9401      	str	r4, [sp, #4]
   8206a:	f000 f9e9 	bl	82440 <_vfiprintf_r>
   8206e:	b002      	add	sp, #8
   82070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82074:	b004      	add	sp, #16
   82076:	4770      	bx	lr
   82078:	20070134 	.word	0x20070134

0008207c <memset>:
   8207c:	b470      	push	{r4, r5, r6}
   8207e:	0786      	lsls	r6, r0, #30
   82080:	d046      	beq.n	82110 <memset+0x94>
   82082:	1e54      	subs	r4, r2, #1
   82084:	2a00      	cmp	r2, #0
   82086:	d041      	beq.n	8210c <memset+0x90>
   82088:	b2ca      	uxtb	r2, r1
   8208a:	4603      	mov	r3, r0
   8208c:	e002      	b.n	82094 <memset+0x18>
   8208e:	f114 34ff 	adds.w	r4, r4, #4294967295
   82092:	d33b      	bcc.n	8210c <memset+0x90>
   82094:	f803 2b01 	strb.w	r2, [r3], #1
   82098:	079d      	lsls	r5, r3, #30
   8209a:	d1f8      	bne.n	8208e <memset+0x12>
   8209c:	2c03      	cmp	r4, #3
   8209e:	d92e      	bls.n	820fe <memset+0x82>
   820a0:	b2cd      	uxtb	r5, r1
   820a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   820a6:	2c0f      	cmp	r4, #15
   820a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   820ac:	d919      	bls.n	820e2 <memset+0x66>
   820ae:	4626      	mov	r6, r4
   820b0:	f103 0210 	add.w	r2, r3, #16
   820b4:	3e10      	subs	r6, #16
   820b6:	2e0f      	cmp	r6, #15
   820b8:	f842 5c10 	str.w	r5, [r2, #-16]
   820bc:	f842 5c0c 	str.w	r5, [r2, #-12]
   820c0:	f842 5c08 	str.w	r5, [r2, #-8]
   820c4:	f842 5c04 	str.w	r5, [r2, #-4]
   820c8:	f102 0210 	add.w	r2, r2, #16
   820cc:	d8f2      	bhi.n	820b4 <memset+0x38>
   820ce:	f1a4 0210 	sub.w	r2, r4, #16
   820d2:	f022 020f 	bic.w	r2, r2, #15
   820d6:	f004 040f 	and.w	r4, r4, #15
   820da:	3210      	adds	r2, #16
   820dc:	2c03      	cmp	r4, #3
   820de:	4413      	add	r3, r2
   820e0:	d90d      	bls.n	820fe <memset+0x82>
   820e2:	461e      	mov	r6, r3
   820e4:	4622      	mov	r2, r4
   820e6:	3a04      	subs	r2, #4
   820e8:	2a03      	cmp	r2, #3
   820ea:	f846 5b04 	str.w	r5, [r6], #4
   820ee:	d8fa      	bhi.n	820e6 <memset+0x6a>
   820f0:	1f22      	subs	r2, r4, #4
   820f2:	f022 0203 	bic.w	r2, r2, #3
   820f6:	3204      	adds	r2, #4
   820f8:	4413      	add	r3, r2
   820fa:	f004 0403 	and.w	r4, r4, #3
   820fe:	b12c      	cbz	r4, 8210c <memset+0x90>
   82100:	b2c9      	uxtb	r1, r1
   82102:	441c      	add	r4, r3
   82104:	f803 1b01 	strb.w	r1, [r3], #1
   82108:	429c      	cmp	r4, r3
   8210a:	d1fb      	bne.n	82104 <memset+0x88>
   8210c:	bc70      	pop	{r4, r5, r6}
   8210e:	4770      	bx	lr
   82110:	4614      	mov	r4, r2
   82112:	4603      	mov	r3, r0
   82114:	e7c2      	b.n	8209c <memset+0x20>
   82116:	bf00      	nop

00082118 <_puts_r>:
   82118:	b5f0      	push	{r4, r5, r6, r7, lr}
   8211a:	4605      	mov	r5, r0
   8211c:	b089      	sub	sp, #36	; 0x24
   8211e:	4608      	mov	r0, r1
   82120:	460c      	mov	r4, r1
   82122:	2701      	movs	r7, #1
   82124:	f000 f91e 	bl	82364 <strlen>
   82128:	2602      	movs	r6, #2
   8212a:	19c3      	adds	r3, r0, r7
   8212c:	4920      	ldr	r1, [pc, #128]	; (821b0 <_puts_r+0x98>)
   8212e:	9303      	str	r3, [sp, #12]
   82130:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82132:	aa04      	add	r2, sp, #16
   82134:	9404      	str	r4, [sp, #16]
   82136:	9005      	str	r0, [sp, #20]
   82138:	68ac      	ldr	r4, [r5, #8]
   8213a:	9707      	str	r7, [sp, #28]
   8213c:	9602      	str	r6, [sp, #8]
   8213e:	9106      	str	r1, [sp, #24]
   82140:	9201      	str	r2, [sp, #4]
   82142:	b353      	cbz	r3, 8219a <_puts_r+0x82>
   82144:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82146:	f013 0f01 	tst.w	r3, #1
   8214a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8214e:	b29a      	uxth	r2, r3
   82150:	d101      	bne.n	82156 <_puts_r+0x3e>
   82152:	0590      	lsls	r0, r2, #22
   82154:	d525      	bpl.n	821a2 <_puts_r+0x8a>
   82156:	0491      	lsls	r1, r2, #18
   82158:	d406      	bmi.n	82168 <_puts_r+0x50>
   8215a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8215c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82160:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   82164:	81a3      	strh	r3, [r4, #12]
   82166:	6662      	str	r2, [r4, #100]	; 0x64
   82168:	4628      	mov	r0, r5
   8216a:	aa01      	add	r2, sp, #4
   8216c:	4621      	mov	r1, r4
   8216e:	f001 fb63 	bl	83838 <__sfvwrite_r>
   82172:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82174:	2800      	cmp	r0, #0
   82176:	bf0c      	ite	eq
   82178:	250a      	moveq	r5, #10
   8217a:	f04f 35ff 	movne.w	r5, #4294967295
   8217e:	07da      	lsls	r2, r3, #31
   82180:	d402      	bmi.n	82188 <_puts_r+0x70>
   82182:	89a3      	ldrh	r3, [r4, #12]
   82184:	059b      	lsls	r3, r3, #22
   82186:	d502      	bpl.n	8218e <_puts_r+0x76>
   82188:	4628      	mov	r0, r5
   8218a:	b009      	add	sp, #36	; 0x24
   8218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8218e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82190:	f001 fd08 	bl	83ba4 <__retarget_lock_release_recursive>
   82194:	4628      	mov	r0, r5
   82196:	b009      	add	sp, #36	; 0x24
   82198:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8219a:	4628      	mov	r0, r5
   8219c:	f001 f940 	bl	83420 <__sinit>
   821a0:	e7d0      	b.n	82144 <_puts_r+0x2c>
   821a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   821a4:	f001 fcfc 	bl	83ba0 <__retarget_lock_acquire_recursive>
   821a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   821ac:	b29a      	uxth	r2, r3
   821ae:	e7d2      	b.n	82156 <_puts_r+0x3e>
   821b0:	00084f88 	.word	0x00084f88

000821b4 <puts>:
   821b4:	4b02      	ldr	r3, [pc, #8]	; (821c0 <puts+0xc>)
   821b6:	4601      	mov	r1, r0
   821b8:	6818      	ldr	r0, [r3, #0]
   821ba:	f7ff bfad 	b.w	82118 <_puts_r>
   821be:	bf00      	nop
   821c0:	20070134 	.word	0x20070134

000821c4 <setbuf>:
   821c4:	2900      	cmp	r1, #0
   821c6:	bf0c      	ite	eq
   821c8:	2202      	moveq	r2, #2
   821ca:	2200      	movne	r2, #0
   821cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   821d0:	f000 b800 	b.w	821d4 <setvbuf>

000821d4 <setvbuf>:
   821d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   821d8:	4d61      	ldr	r5, [pc, #388]	; (82360 <setvbuf+0x18c>)
   821da:	b083      	sub	sp, #12
   821dc:	682d      	ldr	r5, [r5, #0]
   821de:	4604      	mov	r4, r0
   821e0:	460f      	mov	r7, r1
   821e2:	4690      	mov	r8, r2
   821e4:	461e      	mov	r6, r3
   821e6:	b115      	cbz	r5, 821ee <setvbuf+0x1a>
   821e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   821ea:	2b00      	cmp	r3, #0
   821ec:	d064      	beq.n	822b8 <setvbuf+0xe4>
   821ee:	f1b8 0f02 	cmp.w	r8, #2
   821f2:	d006      	beq.n	82202 <setvbuf+0x2e>
   821f4:	f1b8 0f01 	cmp.w	r8, #1
   821f8:	f200 809f 	bhi.w	8233a <setvbuf+0x166>
   821fc:	2e00      	cmp	r6, #0
   821fe:	f2c0 809c 	blt.w	8233a <setvbuf+0x166>
   82202:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82204:	07d8      	lsls	r0, r3, #31
   82206:	d534      	bpl.n	82272 <setvbuf+0x9e>
   82208:	4621      	mov	r1, r4
   8220a:	4628      	mov	r0, r5
   8220c:	f001 f8b0 	bl	83370 <_fflush_r>
   82210:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82212:	b141      	cbz	r1, 82226 <setvbuf+0x52>
   82214:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82218:	4299      	cmp	r1, r3
   8221a:	d002      	beq.n	82222 <setvbuf+0x4e>
   8221c:	4628      	mov	r0, r5
   8221e:	f001 fa25 	bl	8366c <_free_r>
   82222:	2300      	movs	r3, #0
   82224:	6323      	str	r3, [r4, #48]	; 0x30
   82226:	2200      	movs	r2, #0
   82228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8222c:	61a2      	str	r2, [r4, #24]
   8222e:	6062      	str	r2, [r4, #4]
   82230:	061a      	lsls	r2, r3, #24
   82232:	d43a      	bmi.n	822aa <setvbuf+0xd6>
   82234:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82238:	f023 0303 	bic.w	r3, r3, #3
   8223c:	f1b8 0f02 	cmp.w	r8, #2
   82240:	81a3      	strh	r3, [r4, #12]
   82242:	d01d      	beq.n	82280 <setvbuf+0xac>
   82244:	ab01      	add	r3, sp, #4
   82246:	466a      	mov	r2, sp
   82248:	4621      	mov	r1, r4
   8224a:	4628      	mov	r0, r5
   8224c:	f001 fcac 	bl	83ba8 <__swhatbuf_r>
   82250:	89a3      	ldrh	r3, [r4, #12]
   82252:	4318      	orrs	r0, r3
   82254:	81a0      	strh	r0, [r4, #12]
   82256:	2e00      	cmp	r6, #0
   82258:	d132      	bne.n	822c0 <setvbuf+0xec>
   8225a:	9e00      	ldr	r6, [sp, #0]
   8225c:	4630      	mov	r0, r6
   8225e:	f001 fd1b 	bl	83c98 <malloc>
   82262:	4607      	mov	r7, r0
   82264:	2800      	cmp	r0, #0
   82266:	d06b      	beq.n	82340 <setvbuf+0x16c>
   82268:	89a3      	ldrh	r3, [r4, #12]
   8226a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8226e:	81a3      	strh	r3, [r4, #12]
   82270:	e028      	b.n	822c4 <setvbuf+0xf0>
   82272:	89a3      	ldrh	r3, [r4, #12]
   82274:	0599      	lsls	r1, r3, #22
   82276:	d4c7      	bmi.n	82208 <setvbuf+0x34>
   82278:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8227a:	f001 fc91 	bl	83ba0 <__retarget_lock_acquire_recursive>
   8227e:	e7c3      	b.n	82208 <setvbuf+0x34>
   82280:	2500      	movs	r5, #0
   82282:	2600      	movs	r6, #0
   82284:	2001      	movs	r0, #1
   82286:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82288:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8228c:	f043 0302 	orr.w	r3, r3, #2
   82290:	60a6      	str	r6, [r4, #8]
   82292:	07ce      	lsls	r6, r1, #31
   82294:	81a3      	strh	r3, [r4, #12]
   82296:	6160      	str	r0, [r4, #20]
   82298:	6022      	str	r2, [r4, #0]
   8229a:	6122      	str	r2, [r4, #16]
   8229c:	d401      	bmi.n	822a2 <setvbuf+0xce>
   8229e:	0598      	lsls	r0, r3, #22
   822a0:	d53e      	bpl.n	82320 <setvbuf+0x14c>
   822a2:	4628      	mov	r0, r5
   822a4:	b003      	add	sp, #12
   822a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   822aa:	6921      	ldr	r1, [r4, #16]
   822ac:	4628      	mov	r0, r5
   822ae:	f001 f9dd 	bl	8366c <_free_r>
   822b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   822b6:	e7bd      	b.n	82234 <setvbuf+0x60>
   822b8:	4628      	mov	r0, r5
   822ba:	f001 f8b1 	bl	83420 <__sinit>
   822be:	e796      	b.n	821ee <setvbuf+0x1a>
   822c0:	2f00      	cmp	r7, #0
   822c2:	d0cb      	beq.n	8225c <setvbuf+0x88>
   822c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   822c6:	2b00      	cmp	r3, #0
   822c8:	d033      	beq.n	82332 <setvbuf+0x15e>
   822ca:	9b00      	ldr	r3, [sp, #0]
   822cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   822d0:	429e      	cmp	r6, r3
   822d2:	bf1c      	itt	ne
   822d4:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   822d8:	81a2      	strhne	r2, [r4, #12]
   822da:	f1b8 0f01 	cmp.w	r8, #1
   822de:	bf04      	itt	eq
   822e0:	f042 0201 	orreq.w	r2, r2, #1
   822e4:	81a2      	strheq	r2, [r4, #12]
   822e6:	b292      	uxth	r2, r2
   822e8:	f012 0308 	ands.w	r3, r2, #8
   822ec:	6027      	str	r7, [r4, #0]
   822ee:	6127      	str	r7, [r4, #16]
   822f0:	6166      	str	r6, [r4, #20]
   822f2:	d00e      	beq.n	82312 <setvbuf+0x13e>
   822f4:	07d1      	lsls	r1, r2, #31
   822f6:	d51a      	bpl.n	8232e <setvbuf+0x15a>
   822f8:	2300      	movs	r3, #0
   822fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
   822fc:	4276      	negs	r6, r6
   822fe:	f015 0501 	ands.w	r5, r5, #1
   82302:	61a6      	str	r6, [r4, #24]
   82304:	60a3      	str	r3, [r4, #8]
   82306:	d009      	beq.n	8231c <setvbuf+0x148>
   82308:	2500      	movs	r5, #0
   8230a:	4628      	mov	r0, r5
   8230c:	b003      	add	sp, #12
   8230e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82312:	60a3      	str	r3, [r4, #8]
   82314:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82316:	f015 0501 	ands.w	r5, r5, #1
   8231a:	d1f5      	bne.n	82308 <setvbuf+0x134>
   8231c:	0593      	lsls	r3, r2, #22
   8231e:	d4c0      	bmi.n	822a2 <setvbuf+0xce>
   82320:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82322:	f001 fc3f 	bl	83ba4 <__retarget_lock_release_recursive>
   82326:	4628      	mov	r0, r5
   82328:	b003      	add	sp, #12
   8232a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8232e:	60a6      	str	r6, [r4, #8]
   82330:	e7f0      	b.n	82314 <setvbuf+0x140>
   82332:	4628      	mov	r0, r5
   82334:	f001 f874 	bl	83420 <__sinit>
   82338:	e7c7      	b.n	822ca <setvbuf+0xf6>
   8233a:	f04f 35ff 	mov.w	r5, #4294967295
   8233e:	e7b0      	b.n	822a2 <setvbuf+0xce>
   82340:	f8dd 9000 	ldr.w	r9, [sp]
   82344:	45b1      	cmp	r9, r6
   82346:	d004      	beq.n	82352 <setvbuf+0x17e>
   82348:	4648      	mov	r0, r9
   8234a:	f001 fca5 	bl	83c98 <malloc>
   8234e:	4607      	mov	r7, r0
   82350:	b920      	cbnz	r0, 8235c <setvbuf+0x188>
   82352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82356:	f04f 35ff 	mov.w	r5, #4294967295
   8235a:	e792      	b.n	82282 <setvbuf+0xae>
   8235c:	464e      	mov	r6, r9
   8235e:	e783      	b.n	82268 <setvbuf+0x94>
   82360:	20070134 	.word	0x20070134

00082364 <strlen>:
   82364:	f020 0103 	bic.w	r1, r0, #3
   82368:	f010 0003 	ands.w	r0, r0, #3
   8236c:	f1c0 0000 	rsb	r0, r0, #0
   82370:	f851 3b04 	ldr.w	r3, [r1], #4
   82374:	f100 0c04 	add.w	ip, r0, #4
   82378:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8237c:	f06f 0200 	mvn.w	r2, #0
   82380:	bf1c      	itt	ne
   82382:	fa22 f20c 	lsrne.w	r2, r2, ip
   82386:	4313      	orrne	r3, r2
   82388:	f04f 0c01 	mov.w	ip, #1
   8238c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82390:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82394:	eba3 020c 	sub.w	r2, r3, ip
   82398:	ea22 0203 	bic.w	r2, r2, r3
   8239c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   823a0:	bf04      	itt	eq
   823a2:	f851 3b04 	ldreq.w	r3, [r1], #4
   823a6:	3004      	addeq	r0, #4
   823a8:	d0f4      	beq.n	82394 <strlen+0x30>
   823aa:	f1c2 0100 	rsb	r1, r2, #0
   823ae:	ea02 0201 	and.w	r2, r2, r1
   823b2:	fab2 f282 	clz	r2, r2
   823b6:	f1c2 021f 	rsb	r2, r2, #31
   823ba:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   823be:	4770      	bx	lr

000823c0 <__sprint_r.part.0>:
   823c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   823c4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   823c6:	4693      	mov	fp, r2
   823c8:	049c      	lsls	r4, r3, #18
   823ca:	d52f      	bpl.n	8242c <__sprint_r.part.0+0x6c>
   823cc:	6893      	ldr	r3, [r2, #8]
   823ce:	6812      	ldr	r2, [r2, #0]
   823d0:	b353      	cbz	r3, 82428 <__sprint_r.part.0+0x68>
   823d2:	460e      	mov	r6, r1
   823d4:	4607      	mov	r7, r0
   823d6:	f102 0908 	add.w	r9, r2, #8
   823da:	e919 0420 	ldmdb	r9, {r5, sl}
   823de:	ea5f 089a 	movs.w	r8, sl, lsr #2
   823e2:	d017      	beq.n	82414 <__sprint_r.part.0+0x54>
   823e4:	2400      	movs	r4, #0
   823e6:	3d04      	subs	r5, #4
   823e8:	e001      	b.n	823ee <__sprint_r.part.0+0x2e>
   823ea:	45a0      	cmp	r8, r4
   823ec:	d010      	beq.n	82410 <__sprint_r.part.0+0x50>
   823ee:	4632      	mov	r2, r6
   823f0:	f855 1f04 	ldr.w	r1, [r5, #4]!
   823f4:	4638      	mov	r0, r7
   823f6:	f001 f8b5 	bl	83564 <_fputwc_r>
   823fa:	1c43      	adds	r3, r0, #1
   823fc:	f104 0401 	add.w	r4, r4, #1
   82400:	d1f3      	bne.n	823ea <__sprint_r.part.0+0x2a>
   82402:	2300      	movs	r3, #0
   82404:	f8cb 3008 	str.w	r3, [fp, #8]
   82408:	f8cb 3004 	str.w	r3, [fp, #4]
   8240c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82410:	f8db 3008 	ldr.w	r3, [fp, #8]
   82414:	f02a 0a03 	bic.w	sl, sl, #3
   82418:	eba3 030a 	sub.w	r3, r3, sl
   8241c:	f8cb 3008 	str.w	r3, [fp, #8]
   82420:	f109 0908 	add.w	r9, r9, #8
   82424:	2b00      	cmp	r3, #0
   82426:	d1d8      	bne.n	823da <__sprint_r.part.0+0x1a>
   82428:	2000      	movs	r0, #0
   8242a:	e7ea      	b.n	82402 <__sprint_r.part.0+0x42>
   8242c:	f001 fa04 	bl	83838 <__sfvwrite_r>
   82430:	2300      	movs	r3, #0
   82432:	f8cb 3008 	str.w	r3, [fp, #8]
   82436:	f8cb 3004 	str.w	r3, [fp, #4]
   8243a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8243e:	bf00      	nop

00082440 <_vfiprintf_r>:
   82440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82444:	b0ad      	sub	sp, #180	; 0xb4
   82446:	461d      	mov	r5, r3
   82448:	468b      	mov	fp, r1
   8244a:	4690      	mov	r8, r2
   8244c:	9307      	str	r3, [sp, #28]
   8244e:	9006      	str	r0, [sp, #24]
   82450:	b118      	cbz	r0, 8245a <_vfiprintf_r+0x1a>
   82452:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82454:	2b00      	cmp	r3, #0
   82456:	f000 80f3 	beq.w	82640 <_vfiprintf_r+0x200>
   8245a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8245e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82462:	07df      	lsls	r7, r3, #31
   82464:	b281      	uxth	r1, r0
   82466:	d402      	bmi.n	8246e <_vfiprintf_r+0x2e>
   82468:	058e      	lsls	r6, r1, #22
   8246a:	f140 80fc 	bpl.w	82666 <_vfiprintf_r+0x226>
   8246e:	048c      	lsls	r4, r1, #18
   82470:	d40a      	bmi.n	82488 <_vfiprintf_r+0x48>
   82472:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82476:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   8247a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8247e:	f8ab 100c 	strh.w	r1, [fp, #12]
   82482:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   82486:	b289      	uxth	r1, r1
   82488:	0708      	lsls	r0, r1, #28
   8248a:	f140 80b3 	bpl.w	825f4 <_vfiprintf_r+0x1b4>
   8248e:	f8db 3010 	ldr.w	r3, [fp, #16]
   82492:	2b00      	cmp	r3, #0
   82494:	f000 80ae 	beq.w	825f4 <_vfiprintf_r+0x1b4>
   82498:	f001 031a 	and.w	r3, r1, #26
   8249c:	2b0a      	cmp	r3, #10
   8249e:	f000 80b5 	beq.w	8260c <_vfiprintf_r+0x1cc>
   824a2:	2300      	movs	r3, #0
   824a4:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   824a8:	46d1      	mov	r9, sl
   824aa:	930b      	str	r3, [sp, #44]	; 0x2c
   824ac:	9303      	str	r3, [sp, #12]
   824ae:	9311      	str	r3, [sp, #68]	; 0x44
   824b0:	9310      	str	r3, [sp, #64]	; 0x40
   824b2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   824b6:	f8cd b010 	str.w	fp, [sp, #16]
   824ba:	f898 3000 	ldrb.w	r3, [r8]
   824be:	4644      	mov	r4, r8
   824c0:	b1fb      	cbz	r3, 82502 <_vfiprintf_r+0xc2>
   824c2:	2b25      	cmp	r3, #37	; 0x25
   824c4:	d102      	bne.n	824cc <_vfiprintf_r+0x8c>
   824c6:	e01c      	b.n	82502 <_vfiprintf_r+0xc2>
   824c8:	2b25      	cmp	r3, #37	; 0x25
   824ca:	d003      	beq.n	824d4 <_vfiprintf_r+0x94>
   824cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   824d0:	2b00      	cmp	r3, #0
   824d2:	d1f9      	bne.n	824c8 <_vfiprintf_r+0x88>
   824d4:	eba4 0508 	sub.w	r5, r4, r8
   824d8:	b19d      	cbz	r5, 82502 <_vfiprintf_r+0xc2>
   824da:	9b10      	ldr	r3, [sp, #64]	; 0x40
   824dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   824de:	3301      	adds	r3, #1
   824e0:	442a      	add	r2, r5
   824e2:	2b07      	cmp	r3, #7
   824e4:	f8c9 8000 	str.w	r8, [r9]
   824e8:	f8c9 5004 	str.w	r5, [r9, #4]
   824ec:	9211      	str	r2, [sp, #68]	; 0x44
   824ee:	9310      	str	r3, [sp, #64]	; 0x40
   824f0:	dd7a      	ble.n	825e8 <_vfiprintf_r+0x1a8>
   824f2:	2a00      	cmp	r2, #0
   824f4:	f040 84b5 	bne.w	82e62 <_vfiprintf_r+0xa22>
   824f8:	46d1      	mov	r9, sl
   824fa:	9b03      	ldr	r3, [sp, #12]
   824fc:	9210      	str	r2, [sp, #64]	; 0x40
   824fe:	442b      	add	r3, r5
   82500:	9303      	str	r3, [sp, #12]
   82502:	7823      	ldrb	r3, [r4, #0]
   82504:	2b00      	cmp	r3, #0
   82506:	f000 83e5 	beq.w	82cd4 <_vfiprintf_r+0x894>
   8250a:	2000      	movs	r0, #0
   8250c:	f04f 0300 	mov.w	r3, #0
   82510:	f104 0801 	add.w	r8, r4, #1
   82514:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82518:	7862      	ldrb	r2, [r4, #1]
   8251a:	4606      	mov	r6, r0
   8251c:	4605      	mov	r5, r0
   8251e:	4603      	mov	r3, r0
   82520:	f04f 34ff 	mov.w	r4, #4294967295
   82524:	f108 0801 	add.w	r8, r8, #1
   82528:	f1a2 0120 	sub.w	r1, r2, #32
   8252c:	2958      	cmp	r1, #88	; 0x58
   8252e:	f200 82d9 	bhi.w	82ae4 <_vfiprintf_r+0x6a4>
   82532:	e8df f011 	tbh	[pc, r1, lsl #1]
   82536:	0228      	.short	0x0228
   82538:	02d702d7 	.word	0x02d702d7
   8253c:	02d70230 	.word	0x02d70230
   82540:	02d702d7 	.word	0x02d702d7
   82544:	02d702d7 	.word	0x02d702d7
   82548:	00a002d7 	.word	0x00a002d7
   8254c:	02d70288 	.word	0x02d70288
   82550:	02b800a8 	.word	0x02b800a8
   82554:	01a602d7 	.word	0x01a602d7
   82558:	01ab01ab 	.word	0x01ab01ab
   8255c:	01ab01ab 	.word	0x01ab01ab
   82560:	01ab01ab 	.word	0x01ab01ab
   82564:	01ab01ab 	.word	0x01ab01ab
   82568:	02d701ab 	.word	0x02d701ab
   8256c:	02d702d7 	.word	0x02d702d7
   82570:	02d702d7 	.word	0x02d702d7
   82574:	02d702d7 	.word	0x02d702d7
   82578:	02d702d7 	.word	0x02d702d7
   8257c:	01b902d7 	.word	0x01b902d7
   82580:	02d702d7 	.word	0x02d702d7
   82584:	02d702d7 	.word	0x02d702d7
   82588:	02d702d7 	.word	0x02d702d7
   8258c:	02d702d7 	.word	0x02d702d7
   82590:	02d702d7 	.word	0x02d702d7
   82594:	02d7019e 	.word	0x02d7019e
   82598:	02d702d7 	.word	0x02d702d7
   8259c:	02d702d7 	.word	0x02d702d7
   825a0:	02d701a2 	.word	0x02d701a2
   825a4:	025a02d7 	.word	0x025a02d7
   825a8:	02d702d7 	.word	0x02d702d7
   825ac:	02d702d7 	.word	0x02d702d7
   825b0:	02d702d7 	.word	0x02d702d7
   825b4:	02d702d7 	.word	0x02d702d7
   825b8:	02d702d7 	.word	0x02d702d7
   825bc:	02220261 	.word	0x02220261
   825c0:	02d702d7 	.word	0x02d702d7
   825c4:	027602d7 	.word	0x027602d7
   825c8:	02d70222 	.word	0x02d70222
   825cc:	027b02d7 	.word	0x027b02d7
   825d0:	01fc02d7 	.word	0x01fc02d7
   825d4:	02100189 	.word	0x02100189
   825d8:	02d702d2 	.word	0x02d702d2
   825dc:	02d70295 	.word	0x02d70295
   825e0:	02d700ad 	.word	0x02d700ad
   825e4:	023502d7 	.word	0x023502d7
   825e8:	f109 0908 	add.w	r9, r9, #8
   825ec:	9b03      	ldr	r3, [sp, #12]
   825ee:	442b      	add	r3, r5
   825f0:	9303      	str	r3, [sp, #12]
   825f2:	e786      	b.n	82502 <_vfiprintf_r+0xc2>
   825f4:	4659      	mov	r1, fp
   825f6:	9806      	ldr	r0, [sp, #24]
   825f8:	f000 fdaa 	bl	83150 <__swsetup_r>
   825fc:	bb18      	cbnz	r0, 82646 <_vfiprintf_r+0x206>
   825fe:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82602:	f001 031a 	and.w	r3, r1, #26
   82606:	2b0a      	cmp	r3, #10
   82608:	f47f af4b 	bne.w	824a2 <_vfiprintf_r+0x62>
   8260c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82610:	2b00      	cmp	r3, #0
   82612:	f6ff af46 	blt.w	824a2 <_vfiprintf_r+0x62>
   82616:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8261a:	07db      	lsls	r3, r3, #31
   8261c:	d405      	bmi.n	8262a <_vfiprintf_r+0x1ea>
   8261e:	058f      	lsls	r7, r1, #22
   82620:	d403      	bmi.n	8262a <_vfiprintf_r+0x1ea>
   82622:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82626:	f001 fabd 	bl	83ba4 <__retarget_lock_release_recursive>
   8262a:	462b      	mov	r3, r5
   8262c:	4642      	mov	r2, r8
   8262e:	4659      	mov	r1, fp
   82630:	9806      	ldr	r0, [sp, #24]
   82632:	f000 fd49 	bl	830c8 <__sbprintf>
   82636:	9003      	str	r0, [sp, #12]
   82638:	9803      	ldr	r0, [sp, #12]
   8263a:	b02d      	add	sp, #180	; 0xb4
   8263c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82640:	f000 feee 	bl	83420 <__sinit>
   82644:	e709      	b.n	8245a <_vfiprintf_r+0x1a>
   82646:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8264a:	07d9      	lsls	r1, r3, #31
   8264c:	d404      	bmi.n	82658 <_vfiprintf_r+0x218>
   8264e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82652:	059a      	lsls	r2, r3, #22
   82654:	f140 84ae 	bpl.w	82fb4 <_vfiprintf_r+0xb74>
   82658:	f04f 33ff 	mov.w	r3, #4294967295
   8265c:	9303      	str	r3, [sp, #12]
   8265e:	9803      	ldr	r0, [sp, #12]
   82660:	b02d      	add	sp, #180	; 0xb4
   82662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82666:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8266a:	f001 fa99 	bl	83ba0 <__retarget_lock_acquire_recursive>
   8266e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82672:	b281      	uxth	r1, r0
   82674:	e6fb      	b.n	8246e <_vfiprintf_r+0x2e>
   82676:	9907      	ldr	r1, [sp, #28]
   82678:	460a      	mov	r2, r1
   8267a:	680d      	ldr	r5, [r1, #0]
   8267c:	3204      	adds	r2, #4
   8267e:	2d00      	cmp	r5, #0
   82680:	9207      	str	r2, [sp, #28]
   82682:	da02      	bge.n	8268a <_vfiprintf_r+0x24a>
   82684:	426d      	negs	r5, r5
   82686:	f043 0304 	orr.w	r3, r3, #4
   8268a:	f898 2000 	ldrb.w	r2, [r8]
   8268e:	e749      	b.n	82524 <_vfiprintf_r+0xe4>
   82690:	9508      	str	r5, [sp, #32]
   82692:	069e      	lsls	r6, r3, #26
   82694:	f100 845a 	bmi.w	82f4c <_vfiprintf_r+0xb0c>
   82698:	9907      	ldr	r1, [sp, #28]
   8269a:	06dd      	lsls	r5, r3, #27
   8269c:	460a      	mov	r2, r1
   8269e:	f100 83ef 	bmi.w	82e80 <_vfiprintf_r+0xa40>
   826a2:	0658      	lsls	r0, r3, #25
   826a4:	f140 83ec 	bpl.w	82e80 <_vfiprintf_r+0xa40>
   826a8:	2700      	movs	r7, #0
   826aa:	2201      	movs	r2, #1
   826ac:	880e      	ldrh	r6, [r1, #0]
   826ae:	3104      	adds	r1, #4
   826b0:	9107      	str	r1, [sp, #28]
   826b2:	f04f 0100 	mov.w	r1, #0
   826b6:	2500      	movs	r5, #0
   826b8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   826bc:	1c61      	adds	r1, r4, #1
   826be:	f000 8117 	beq.w	828f0 <_vfiprintf_r+0x4b0>
   826c2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   826c6:	9102      	str	r1, [sp, #8]
   826c8:	ea56 0107 	orrs.w	r1, r6, r7
   826cc:	f040 8115 	bne.w	828fa <_vfiprintf_r+0x4ba>
   826d0:	2c00      	cmp	r4, #0
   826d2:	f040 835b 	bne.w	82d8c <_vfiprintf_r+0x94c>
   826d6:	2a00      	cmp	r2, #0
   826d8:	f040 83b6 	bne.w	82e48 <_vfiprintf_r+0xa08>
   826dc:	f013 0301 	ands.w	r3, r3, #1
   826e0:	9305      	str	r3, [sp, #20]
   826e2:	f000 8455 	beq.w	82f90 <_vfiprintf_r+0xb50>
   826e6:	2330      	movs	r3, #48	; 0x30
   826e8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   826ec:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   826f0:	9b05      	ldr	r3, [sp, #20]
   826f2:	42a3      	cmp	r3, r4
   826f4:	bfb8      	it	lt
   826f6:	4623      	movlt	r3, r4
   826f8:	9301      	str	r3, [sp, #4]
   826fa:	b10d      	cbz	r5, 82700 <_vfiprintf_r+0x2c0>
   826fc:	3301      	adds	r3, #1
   826fe:	9301      	str	r3, [sp, #4]
   82700:	9b02      	ldr	r3, [sp, #8]
   82702:	f013 0302 	ands.w	r3, r3, #2
   82706:	9309      	str	r3, [sp, #36]	; 0x24
   82708:	d002      	beq.n	82710 <_vfiprintf_r+0x2d0>
   8270a:	9b01      	ldr	r3, [sp, #4]
   8270c:	3302      	adds	r3, #2
   8270e:	9301      	str	r3, [sp, #4]
   82710:	9b02      	ldr	r3, [sp, #8]
   82712:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82716:	930a      	str	r3, [sp, #40]	; 0x28
   82718:	f040 8215 	bne.w	82b46 <_vfiprintf_r+0x706>
   8271c:	9b08      	ldr	r3, [sp, #32]
   8271e:	9a01      	ldr	r2, [sp, #4]
   82720:	1a9d      	subs	r5, r3, r2
   82722:	2d00      	cmp	r5, #0
   82724:	f340 820f 	ble.w	82b46 <_vfiprintf_r+0x706>
   82728:	2d10      	cmp	r5, #16
   8272a:	f340 8484 	ble.w	83036 <_vfiprintf_r+0xbf6>
   8272e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82730:	46ce      	mov	lr, r9
   82732:	2710      	movs	r7, #16
   82734:	46a1      	mov	r9, r4
   82736:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82738:	4ec5      	ldr	r6, [pc, #788]	; (82a50 <_vfiprintf_r+0x610>)
   8273a:	4619      	mov	r1, r3
   8273c:	9c06      	ldr	r4, [sp, #24]
   8273e:	e007      	b.n	82750 <_vfiprintf_r+0x310>
   82740:	f101 0c02 	add.w	ip, r1, #2
   82744:	4601      	mov	r1, r0
   82746:	f10e 0e08 	add.w	lr, lr, #8
   8274a:	3d10      	subs	r5, #16
   8274c:	2d10      	cmp	r5, #16
   8274e:	dd11      	ble.n	82774 <_vfiprintf_r+0x334>
   82750:	1c48      	adds	r0, r1, #1
   82752:	3210      	adds	r2, #16
   82754:	2807      	cmp	r0, #7
   82756:	9211      	str	r2, [sp, #68]	; 0x44
   82758:	e88e 00c0 	stmia.w	lr, {r6, r7}
   8275c:	9010      	str	r0, [sp, #64]	; 0x40
   8275e:	ddef      	ble.n	82740 <_vfiprintf_r+0x300>
   82760:	2a00      	cmp	r2, #0
   82762:	f040 81d9 	bne.w	82b18 <_vfiprintf_r+0x6d8>
   82766:	3d10      	subs	r5, #16
   82768:	2d10      	cmp	r5, #16
   8276a:	4611      	mov	r1, r2
   8276c:	f04f 0c01 	mov.w	ip, #1
   82770:	46d6      	mov	lr, sl
   82772:	dced      	bgt.n	82750 <_vfiprintf_r+0x310>
   82774:	464c      	mov	r4, r9
   82776:	4661      	mov	r1, ip
   82778:	46f1      	mov	r9, lr
   8277a:	442a      	add	r2, r5
   8277c:	2907      	cmp	r1, #7
   8277e:	9211      	str	r2, [sp, #68]	; 0x44
   82780:	f8c9 6000 	str.w	r6, [r9]
   82784:	f8c9 5004 	str.w	r5, [r9, #4]
   82788:	9110      	str	r1, [sp, #64]	; 0x40
   8278a:	f300 82eb 	bgt.w	82d64 <_vfiprintf_r+0x924>
   8278e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82792:	f109 0908 	add.w	r9, r9, #8
   82796:	1c48      	adds	r0, r1, #1
   82798:	2d00      	cmp	r5, #0
   8279a:	f040 81dc 	bne.w	82b56 <_vfiprintf_r+0x716>
   8279e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   827a0:	2b00      	cmp	r3, #0
   827a2:	f000 81f6 	beq.w	82b92 <_vfiprintf_r+0x752>
   827a6:	2102      	movs	r1, #2
   827a8:	ab0e      	add	r3, sp, #56	; 0x38
   827aa:	440a      	add	r2, r1
   827ac:	2807      	cmp	r0, #7
   827ae:	9211      	str	r2, [sp, #68]	; 0x44
   827b0:	9010      	str	r0, [sp, #64]	; 0x40
   827b2:	f8c9 1004 	str.w	r1, [r9, #4]
   827b6:	f8c9 3000 	str.w	r3, [r9]
   827ba:	f340 81e6 	ble.w	82b8a <_vfiprintf_r+0x74a>
   827be:	2a00      	cmp	r2, #0
   827c0:	f040 8395 	bne.w	82eee <_vfiprintf_r+0xaae>
   827c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   827c6:	2001      	movs	r0, #1
   827c8:	2b80      	cmp	r3, #128	; 0x80
   827ca:	4611      	mov	r1, r2
   827cc:	46d1      	mov	r9, sl
   827ce:	f040 81e4 	bne.w	82b9a <_vfiprintf_r+0x75a>
   827d2:	9b08      	ldr	r3, [sp, #32]
   827d4:	9d01      	ldr	r5, [sp, #4]
   827d6:	1b5e      	subs	r6, r3, r5
   827d8:	2e00      	cmp	r6, #0
   827da:	f340 81de 	ble.w	82b9a <_vfiprintf_r+0x75a>
   827de:	2e10      	cmp	r6, #16
   827e0:	f340 843c 	ble.w	8305c <_vfiprintf_r+0xc1c>
   827e4:	46cc      	mov	ip, r9
   827e6:	2710      	movs	r7, #16
   827e8:	46a1      	mov	r9, r4
   827ea:	4d9a      	ldr	r5, [pc, #616]	; (82a54 <_vfiprintf_r+0x614>)
   827ec:	9c06      	ldr	r4, [sp, #24]
   827ee:	e007      	b.n	82800 <_vfiprintf_r+0x3c0>
   827f0:	f101 0e02 	add.w	lr, r1, #2
   827f4:	4601      	mov	r1, r0
   827f6:	f10c 0c08 	add.w	ip, ip, #8
   827fa:	3e10      	subs	r6, #16
   827fc:	2e10      	cmp	r6, #16
   827fe:	dd11      	ble.n	82824 <_vfiprintf_r+0x3e4>
   82800:	1c48      	adds	r0, r1, #1
   82802:	3210      	adds	r2, #16
   82804:	2807      	cmp	r0, #7
   82806:	9211      	str	r2, [sp, #68]	; 0x44
   82808:	e88c 00a0 	stmia.w	ip, {r5, r7}
   8280c:	9010      	str	r0, [sp, #64]	; 0x40
   8280e:	ddef      	ble.n	827f0 <_vfiprintf_r+0x3b0>
   82810:	2a00      	cmp	r2, #0
   82812:	f040 829b 	bne.w	82d4c <_vfiprintf_r+0x90c>
   82816:	3e10      	subs	r6, #16
   82818:	2e10      	cmp	r6, #16
   8281a:	f04f 0e01 	mov.w	lr, #1
   8281e:	4611      	mov	r1, r2
   82820:	46d4      	mov	ip, sl
   82822:	dced      	bgt.n	82800 <_vfiprintf_r+0x3c0>
   82824:	464c      	mov	r4, r9
   82826:	46e1      	mov	r9, ip
   82828:	4432      	add	r2, r6
   8282a:	f1be 0f07 	cmp.w	lr, #7
   8282e:	9211      	str	r2, [sp, #68]	; 0x44
   82830:	e889 0060 	stmia.w	r9, {r5, r6}
   82834:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82838:	f300 8366 	bgt.w	82f08 <_vfiprintf_r+0xac8>
   8283c:	f109 0908 	add.w	r9, r9, #8
   82840:	f10e 0001 	add.w	r0, lr, #1
   82844:	4671      	mov	r1, lr
   82846:	e1a8      	b.n	82b9a <_vfiprintf_r+0x75a>
   82848:	9508      	str	r5, [sp, #32]
   8284a:	f013 0220 	ands.w	r2, r3, #32
   8284e:	f040 8389 	bne.w	82f64 <_vfiprintf_r+0xb24>
   82852:	f013 0110 	ands.w	r1, r3, #16
   82856:	f040 8319 	bne.w	82e8c <_vfiprintf_r+0xa4c>
   8285a:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   8285e:	f000 8315 	beq.w	82e8c <_vfiprintf_r+0xa4c>
   82862:	9807      	ldr	r0, [sp, #28]
   82864:	460a      	mov	r2, r1
   82866:	4601      	mov	r1, r0
   82868:	3104      	adds	r1, #4
   8286a:	8806      	ldrh	r6, [r0, #0]
   8286c:	2700      	movs	r7, #0
   8286e:	9107      	str	r1, [sp, #28]
   82870:	e71f      	b.n	826b2 <_vfiprintf_r+0x272>
   82872:	9508      	str	r5, [sp, #32]
   82874:	f043 0310 	orr.w	r3, r3, #16
   82878:	e7e7      	b.n	8284a <_vfiprintf_r+0x40a>
   8287a:	9508      	str	r5, [sp, #32]
   8287c:	f043 0310 	orr.w	r3, r3, #16
   82880:	e707      	b.n	82692 <_vfiprintf_r+0x252>
   82882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82886:	f898 2000 	ldrb.w	r2, [r8]
   8288a:	e64b      	b.n	82524 <_vfiprintf_r+0xe4>
   8288c:	2500      	movs	r5, #0
   8288e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82892:	f818 2b01 	ldrb.w	r2, [r8], #1
   82896:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8289a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   8289e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   828a2:	2909      	cmp	r1, #9
   828a4:	d9f5      	bls.n	82892 <_vfiprintf_r+0x452>
   828a6:	e63f      	b.n	82528 <_vfiprintf_r+0xe8>
   828a8:	9508      	str	r5, [sp, #32]
   828aa:	2800      	cmp	r0, #0
   828ac:	f040 8402 	bne.w	830b4 <_vfiprintf_r+0xc74>
   828b0:	f043 0310 	orr.w	r3, r3, #16
   828b4:	069e      	lsls	r6, r3, #26
   828b6:	f100 833d 	bmi.w	82f34 <_vfiprintf_r+0xaf4>
   828ba:	9907      	ldr	r1, [sp, #28]
   828bc:	06dd      	lsls	r5, r3, #27
   828be:	460a      	mov	r2, r1
   828c0:	f100 82f0 	bmi.w	82ea4 <_vfiprintf_r+0xa64>
   828c4:	0658      	lsls	r0, r3, #25
   828c6:	f140 82ed 	bpl.w	82ea4 <_vfiprintf_r+0xa64>
   828ca:	f9b1 6000 	ldrsh.w	r6, [r1]
   828ce:	3204      	adds	r2, #4
   828d0:	17f7      	asrs	r7, r6, #31
   828d2:	4630      	mov	r0, r6
   828d4:	4639      	mov	r1, r7
   828d6:	9207      	str	r2, [sp, #28]
   828d8:	2800      	cmp	r0, #0
   828da:	f171 0200 	sbcs.w	r2, r1, #0
   828de:	f2c0 835a 	blt.w	82f96 <_vfiprintf_r+0xb56>
   828e2:	1c61      	adds	r1, r4, #1
   828e4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   828e8:	f04f 0201 	mov.w	r2, #1
   828ec:	f47f aee9 	bne.w	826c2 <_vfiprintf_r+0x282>
   828f0:	ea56 0107 	orrs.w	r1, r6, r7
   828f4:	f000 824b 	beq.w	82d8e <_vfiprintf_r+0x94e>
   828f8:	9302      	str	r3, [sp, #8]
   828fa:	2a01      	cmp	r2, #1
   828fc:	f000 828a 	beq.w	82e14 <_vfiprintf_r+0x9d4>
   82900:	2a02      	cmp	r2, #2
   82902:	f040 825a 	bne.w	82dba <_vfiprintf_r+0x97a>
   82906:	46d3      	mov	fp, sl
   82908:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8290a:	0933      	lsrs	r3, r6, #4
   8290c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82910:	0939      	lsrs	r1, r7, #4
   82912:	f006 020f 	and.w	r2, r6, #15
   82916:	460f      	mov	r7, r1
   82918:	461e      	mov	r6, r3
   8291a:	5c83      	ldrb	r3, [r0, r2]
   8291c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82920:	ea56 0307 	orrs.w	r3, r6, r7
   82924:	d1f1      	bne.n	8290a <_vfiprintf_r+0x4ca>
   82926:	ebaa 030b 	sub.w	r3, sl, fp
   8292a:	9305      	str	r3, [sp, #20]
   8292c:	e6e0      	b.n	826f0 <_vfiprintf_r+0x2b0>
   8292e:	2800      	cmp	r0, #0
   82930:	f040 83bd 	bne.w	830ae <_vfiprintf_r+0xc6e>
   82934:	0699      	lsls	r1, r3, #26
   82936:	f100 8359 	bmi.w	82fec <_vfiprintf_r+0xbac>
   8293a:	06da      	lsls	r2, r3, #27
   8293c:	f100 80e5 	bmi.w	82b0a <_vfiprintf_r+0x6ca>
   82940:	065b      	lsls	r3, r3, #25
   82942:	f140 80e2 	bpl.w	82b0a <_vfiprintf_r+0x6ca>
   82946:	9a07      	ldr	r2, [sp, #28]
   82948:	6813      	ldr	r3, [r2, #0]
   8294a:	3204      	adds	r2, #4
   8294c:	9207      	str	r2, [sp, #28]
   8294e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82952:	801a      	strh	r2, [r3, #0]
   82954:	e5b1      	b.n	824ba <_vfiprintf_r+0x7a>
   82956:	2278      	movs	r2, #120	; 0x78
   82958:	2130      	movs	r1, #48	; 0x30
   8295a:	9508      	str	r5, [sp, #32]
   8295c:	9d07      	ldr	r5, [sp, #28]
   8295e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82962:	1d2a      	adds	r2, r5, #4
   82964:	9207      	str	r2, [sp, #28]
   82966:	4a3c      	ldr	r2, [pc, #240]	; (82a58 <_vfiprintf_r+0x618>)
   82968:	682e      	ldr	r6, [r5, #0]
   8296a:	920b      	str	r2, [sp, #44]	; 0x2c
   8296c:	f043 0302 	orr.w	r3, r3, #2
   82970:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82974:	2700      	movs	r7, #0
   82976:	2202      	movs	r2, #2
   82978:	e69b      	b.n	826b2 <_vfiprintf_r+0x272>
   8297a:	9508      	str	r5, [sp, #32]
   8297c:	2800      	cmp	r0, #0
   8297e:	d099      	beq.n	828b4 <_vfiprintf_r+0x474>
   82980:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82984:	e796      	b.n	828b4 <_vfiprintf_r+0x474>
   82986:	f898 2000 	ldrb.w	r2, [r8]
   8298a:	2e00      	cmp	r6, #0
   8298c:	f47f adca 	bne.w	82524 <_vfiprintf_r+0xe4>
   82990:	2001      	movs	r0, #1
   82992:	2620      	movs	r6, #32
   82994:	e5c6      	b.n	82524 <_vfiprintf_r+0xe4>
   82996:	f043 0301 	orr.w	r3, r3, #1
   8299a:	f898 2000 	ldrb.w	r2, [r8]
   8299e:	e5c1      	b.n	82524 <_vfiprintf_r+0xe4>
   829a0:	9508      	str	r5, [sp, #32]
   829a2:	2800      	cmp	r0, #0
   829a4:	f040 8380 	bne.w	830a8 <_vfiprintf_r+0xc68>
   829a8:	492b      	ldr	r1, [pc, #172]	; (82a58 <_vfiprintf_r+0x618>)
   829aa:	910b      	str	r1, [sp, #44]	; 0x2c
   829ac:	069f      	lsls	r7, r3, #26
   829ae:	f100 82e5 	bmi.w	82f7c <_vfiprintf_r+0xb3c>
   829b2:	9807      	ldr	r0, [sp, #28]
   829b4:	06de      	lsls	r6, r3, #27
   829b6:	4601      	mov	r1, r0
   829b8:	f100 826f 	bmi.w	82e9a <_vfiprintf_r+0xa5a>
   829bc:	065d      	lsls	r5, r3, #25
   829be:	f140 826c 	bpl.w	82e9a <_vfiprintf_r+0xa5a>
   829c2:	2700      	movs	r7, #0
   829c4:	3104      	adds	r1, #4
   829c6:	8806      	ldrh	r6, [r0, #0]
   829c8:	9107      	str	r1, [sp, #28]
   829ca:	07d8      	lsls	r0, r3, #31
   829cc:	f140 8220 	bpl.w	82e10 <_vfiprintf_r+0x9d0>
   829d0:	ea56 0107 	orrs.w	r1, r6, r7
   829d4:	f000 821c 	beq.w	82e10 <_vfiprintf_r+0x9d0>
   829d8:	2130      	movs	r1, #48	; 0x30
   829da:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   829de:	f043 0302 	orr.w	r3, r3, #2
   829e2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   829e6:	2202      	movs	r2, #2
   829e8:	e663      	b.n	826b2 <_vfiprintf_r+0x272>
   829ea:	9508      	str	r5, [sp, #32]
   829ec:	2800      	cmp	r0, #0
   829ee:	f040 8355 	bne.w	8309c <_vfiprintf_r+0xc5c>
   829f2:	491a      	ldr	r1, [pc, #104]	; (82a5c <_vfiprintf_r+0x61c>)
   829f4:	910b      	str	r1, [sp, #44]	; 0x2c
   829f6:	e7d9      	b.n	829ac <_vfiprintf_r+0x56c>
   829f8:	2201      	movs	r2, #1
   829fa:	9807      	ldr	r0, [sp, #28]
   829fc:	4611      	mov	r1, r2
   829fe:	9201      	str	r2, [sp, #4]
   82a00:	6802      	ldr	r2, [r0, #0]
   82a02:	f04f 0400 	mov.w	r4, #0
   82a06:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82a0a:	4602      	mov	r2, r0
   82a0c:	3204      	adds	r2, #4
   82a0e:	9508      	str	r5, [sp, #32]
   82a10:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82a14:	9105      	str	r1, [sp, #20]
   82a16:	9207      	str	r2, [sp, #28]
   82a18:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82a1c:	9302      	str	r3, [sp, #8]
   82a1e:	2400      	movs	r4, #0
   82a20:	e66e      	b.n	82700 <_vfiprintf_r+0x2c0>
   82a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82a26:	f898 2000 	ldrb.w	r2, [r8]
   82a2a:	e57b      	b.n	82524 <_vfiprintf_r+0xe4>
   82a2c:	f898 2000 	ldrb.w	r2, [r8]
   82a30:	2a6c      	cmp	r2, #108	; 0x6c
   82a32:	bf03      	ittte	eq
   82a34:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   82a38:	f043 0320 	orreq.w	r3, r3, #32
   82a3c:	f108 0801 	addeq.w	r8, r8, #1
   82a40:	f043 0310 	orrne.w	r3, r3, #16
   82a44:	e56e      	b.n	82524 <_vfiprintf_r+0xe4>
   82a46:	f898 2000 	ldrb.w	r2, [r8]
   82a4a:	2001      	movs	r0, #1
   82a4c:	262b      	movs	r6, #43	; 0x2b
   82a4e:	e569      	b.n	82524 <_vfiprintf_r+0xe4>
   82a50:	00084fbc 	.word	0x00084fbc
   82a54:	00084fcc 	.word	0x00084fcc
   82a58:	00084fa0 	.word	0x00084fa0
   82a5c:	00084f8c 	.word	0x00084f8c
   82a60:	f04f 0200 	mov.w	r2, #0
   82a64:	9907      	ldr	r1, [sp, #28]
   82a66:	9508      	str	r5, [sp, #32]
   82a68:	f8d1 b000 	ldr.w	fp, [r1]
   82a6c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82a70:	1d0d      	adds	r5, r1, #4
   82a72:	f1bb 0f00 	cmp.w	fp, #0
   82a76:	f000 82e4 	beq.w	83042 <_vfiprintf_r+0xc02>
   82a7a:	1c67      	adds	r7, r4, #1
   82a7c:	f000 82c3 	beq.w	83006 <_vfiprintf_r+0xbc6>
   82a80:	4622      	mov	r2, r4
   82a82:	2100      	movs	r1, #0
   82a84:	4658      	mov	r0, fp
   82a86:	9301      	str	r3, [sp, #4]
   82a88:	f001 fbc6 	bl	84218 <memchr>
   82a8c:	9b01      	ldr	r3, [sp, #4]
   82a8e:	2800      	cmp	r0, #0
   82a90:	f000 82e8 	beq.w	83064 <_vfiprintf_r+0xc24>
   82a94:	eba0 020b 	sub.w	r2, r0, fp
   82a98:	9507      	str	r5, [sp, #28]
   82a9a:	9205      	str	r2, [sp, #20]
   82a9c:	9302      	str	r3, [sp, #8]
   82a9e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82aa2:	2400      	movs	r4, #0
   82aa4:	e624      	b.n	826f0 <_vfiprintf_r+0x2b0>
   82aa6:	f898 2000 	ldrb.w	r2, [r8]
   82aaa:	f108 0701 	add.w	r7, r8, #1
   82aae:	2a2a      	cmp	r2, #42	; 0x2a
   82ab0:	f000 82e9 	beq.w	83086 <_vfiprintf_r+0xc46>
   82ab4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82ab8:	2909      	cmp	r1, #9
   82aba:	46b8      	mov	r8, r7
   82abc:	f04f 0400 	mov.w	r4, #0
   82ac0:	f63f ad32 	bhi.w	82528 <_vfiprintf_r+0xe8>
   82ac4:	f818 2b01 	ldrb.w	r2, [r8], #1
   82ac8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82acc:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   82ad0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82ad4:	2909      	cmp	r1, #9
   82ad6:	d9f5      	bls.n	82ac4 <_vfiprintf_r+0x684>
   82ad8:	e526      	b.n	82528 <_vfiprintf_r+0xe8>
   82ada:	f043 0320 	orr.w	r3, r3, #32
   82ade:	f898 2000 	ldrb.w	r2, [r8]
   82ae2:	e51f      	b.n	82524 <_vfiprintf_r+0xe4>
   82ae4:	9508      	str	r5, [sp, #32]
   82ae6:	2800      	cmp	r0, #0
   82ae8:	f040 82db 	bne.w	830a2 <_vfiprintf_r+0xc62>
   82aec:	2a00      	cmp	r2, #0
   82aee:	f000 80f1 	beq.w	82cd4 <_vfiprintf_r+0x894>
   82af2:	2101      	movs	r1, #1
   82af4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82af8:	f04f 0200 	mov.w	r2, #0
   82afc:	9101      	str	r1, [sp, #4]
   82afe:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82b02:	9105      	str	r1, [sp, #20]
   82b04:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82b08:	e788      	b.n	82a1c <_vfiprintf_r+0x5dc>
   82b0a:	9a07      	ldr	r2, [sp, #28]
   82b0c:	6813      	ldr	r3, [r2, #0]
   82b0e:	3204      	adds	r2, #4
   82b10:	9207      	str	r2, [sp, #28]
   82b12:	9a03      	ldr	r2, [sp, #12]
   82b14:	601a      	str	r2, [r3, #0]
   82b16:	e4d0      	b.n	824ba <_vfiprintf_r+0x7a>
   82b18:	aa0f      	add	r2, sp, #60	; 0x3c
   82b1a:	9904      	ldr	r1, [sp, #16]
   82b1c:	4620      	mov	r0, r4
   82b1e:	f7ff fc4f 	bl	823c0 <__sprint_r.part.0>
   82b22:	2800      	cmp	r0, #0
   82b24:	f040 8143 	bne.w	82dae <_vfiprintf_r+0x96e>
   82b28:	9910      	ldr	r1, [sp, #64]	; 0x40
   82b2a:	46d6      	mov	lr, sl
   82b2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82b2e:	f101 0c01 	add.w	ip, r1, #1
   82b32:	e60a      	b.n	8274a <_vfiprintf_r+0x30a>
   82b34:	aa0f      	add	r2, sp, #60	; 0x3c
   82b36:	9904      	ldr	r1, [sp, #16]
   82b38:	9806      	ldr	r0, [sp, #24]
   82b3a:	f7ff fc41 	bl	823c0 <__sprint_r.part.0>
   82b3e:	2800      	cmp	r0, #0
   82b40:	f040 8135 	bne.w	82dae <_vfiprintf_r+0x96e>
   82b44:	46d1      	mov	r9, sl
   82b46:	9910      	ldr	r1, [sp, #64]	; 0x40
   82b48:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82b4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82b4e:	1c48      	adds	r0, r1, #1
   82b50:	2d00      	cmp	r5, #0
   82b52:	f43f ae24 	beq.w	8279e <_vfiprintf_r+0x35e>
   82b56:	2101      	movs	r1, #1
   82b58:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   82b5c:	440a      	add	r2, r1
   82b5e:	2807      	cmp	r0, #7
   82b60:	9211      	str	r2, [sp, #68]	; 0x44
   82b62:	9010      	str	r0, [sp, #64]	; 0x40
   82b64:	f8c9 1004 	str.w	r1, [r9, #4]
   82b68:	f8c9 5000 	str.w	r5, [r9]
   82b6c:	f340 8109 	ble.w	82d82 <_vfiprintf_r+0x942>
   82b70:	2a00      	cmp	r2, #0
   82b72:	f040 81af 	bne.w	82ed4 <_vfiprintf_r+0xa94>
   82b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82b78:	2b00      	cmp	r3, #0
   82b7a:	f43f ae23 	beq.w	827c4 <_vfiprintf_r+0x384>
   82b7e:	2202      	movs	r2, #2
   82b80:	4608      	mov	r0, r1
   82b82:	46d1      	mov	r9, sl
   82b84:	ab0e      	add	r3, sp, #56	; 0x38
   82b86:	921d      	str	r2, [sp, #116]	; 0x74
   82b88:	931c      	str	r3, [sp, #112]	; 0x70
   82b8a:	4601      	mov	r1, r0
   82b8c:	f109 0908 	add.w	r9, r9, #8
   82b90:	3001      	adds	r0, #1
   82b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82b94:	2b80      	cmp	r3, #128	; 0x80
   82b96:	f43f ae1c 	beq.w	827d2 <_vfiprintf_r+0x392>
   82b9a:	9b05      	ldr	r3, [sp, #20]
   82b9c:	1ae4      	subs	r4, r4, r3
   82b9e:	2c00      	cmp	r4, #0
   82ba0:	dd2f      	ble.n	82c02 <_vfiprintf_r+0x7c2>
   82ba2:	2c10      	cmp	r4, #16
   82ba4:	f340 8220 	ble.w	82fe8 <_vfiprintf_r+0xba8>
   82ba8:	46ce      	mov	lr, r9
   82baa:	2610      	movs	r6, #16
   82bac:	4db2      	ldr	r5, [pc, #712]	; (82e78 <_vfiprintf_r+0xa38>)
   82bae:	9f06      	ldr	r7, [sp, #24]
   82bb0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   82bb4:	e006      	b.n	82bc4 <_vfiprintf_r+0x784>
   82bb6:	1c88      	adds	r0, r1, #2
   82bb8:	4619      	mov	r1, r3
   82bba:	f10e 0e08 	add.w	lr, lr, #8
   82bbe:	3c10      	subs	r4, #16
   82bc0:	2c10      	cmp	r4, #16
   82bc2:	dd10      	ble.n	82be6 <_vfiprintf_r+0x7a6>
   82bc4:	1c4b      	adds	r3, r1, #1
   82bc6:	3210      	adds	r2, #16
   82bc8:	2b07      	cmp	r3, #7
   82bca:	9211      	str	r2, [sp, #68]	; 0x44
   82bcc:	e88e 0060 	stmia.w	lr, {r5, r6}
   82bd0:	9310      	str	r3, [sp, #64]	; 0x40
   82bd2:	ddf0      	ble.n	82bb6 <_vfiprintf_r+0x776>
   82bd4:	2a00      	cmp	r2, #0
   82bd6:	d165      	bne.n	82ca4 <_vfiprintf_r+0x864>
   82bd8:	3c10      	subs	r4, #16
   82bda:	2c10      	cmp	r4, #16
   82bdc:	f04f 0001 	mov.w	r0, #1
   82be0:	4611      	mov	r1, r2
   82be2:	46d6      	mov	lr, sl
   82be4:	dcee      	bgt.n	82bc4 <_vfiprintf_r+0x784>
   82be6:	46f1      	mov	r9, lr
   82be8:	4422      	add	r2, r4
   82bea:	2807      	cmp	r0, #7
   82bec:	9211      	str	r2, [sp, #68]	; 0x44
   82bee:	f8c9 5000 	str.w	r5, [r9]
   82bf2:	f8c9 4004 	str.w	r4, [r9, #4]
   82bf6:	9010      	str	r0, [sp, #64]	; 0x40
   82bf8:	f300 8085 	bgt.w	82d06 <_vfiprintf_r+0x8c6>
   82bfc:	f109 0908 	add.w	r9, r9, #8
   82c00:	3001      	adds	r0, #1
   82c02:	9905      	ldr	r1, [sp, #20]
   82c04:	2807      	cmp	r0, #7
   82c06:	440a      	add	r2, r1
   82c08:	9211      	str	r2, [sp, #68]	; 0x44
   82c0a:	f8c9 b000 	str.w	fp, [r9]
   82c0e:	f8c9 1004 	str.w	r1, [r9, #4]
   82c12:	9010      	str	r0, [sp, #64]	; 0x40
   82c14:	f340 8082 	ble.w	82d1c <_vfiprintf_r+0x8dc>
   82c18:	2a00      	cmp	r2, #0
   82c1a:	f040 8118 	bne.w	82e4e <_vfiprintf_r+0xa0e>
   82c1e:	9b02      	ldr	r3, [sp, #8]
   82c20:	9210      	str	r2, [sp, #64]	; 0x40
   82c22:	0758      	lsls	r0, r3, #29
   82c24:	d535      	bpl.n	82c92 <_vfiprintf_r+0x852>
   82c26:	9b08      	ldr	r3, [sp, #32]
   82c28:	9901      	ldr	r1, [sp, #4]
   82c2a:	1a5c      	subs	r4, r3, r1
   82c2c:	2c00      	cmp	r4, #0
   82c2e:	f340 80e7 	ble.w	82e00 <_vfiprintf_r+0x9c0>
   82c32:	46d1      	mov	r9, sl
   82c34:	2c10      	cmp	r4, #16
   82c36:	f340 820d 	ble.w	83054 <_vfiprintf_r+0xc14>
   82c3a:	2510      	movs	r5, #16
   82c3c:	9910      	ldr	r1, [sp, #64]	; 0x40
   82c3e:	4e8f      	ldr	r6, [pc, #572]	; (82e7c <_vfiprintf_r+0xa3c>)
   82c40:	9f06      	ldr	r7, [sp, #24]
   82c42:	f8dd b010 	ldr.w	fp, [sp, #16]
   82c46:	e006      	b.n	82c56 <_vfiprintf_r+0x816>
   82c48:	1c88      	adds	r0, r1, #2
   82c4a:	4619      	mov	r1, r3
   82c4c:	f109 0908 	add.w	r9, r9, #8
   82c50:	3c10      	subs	r4, #16
   82c52:	2c10      	cmp	r4, #16
   82c54:	dd11      	ble.n	82c7a <_vfiprintf_r+0x83a>
   82c56:	1c4b      	adds	r3, r1, #1
   82c58:	3210      	adds	r2, #16
   82c5a:	2b07      	cmp	r3, #7
   82c5c:	9211      	str	r2, [sp, #68]	; 0x44
   82c5e:	f8c9 6000 	str.w	r6, [r9]
   82c62:	f8c9 5004 	str.w	r5, [r9, #4]
   82c66:	9310      	str	r3, [sp, #64]	; 0x40
   82c68:	ddee      	ble.n	82c48 <_vfiprintf_r+0x808>
   82c6a:	bb42      	cbnz	r2, 82cbe <_vfiprintf_r+0x87e>
   82c6c:	3c10      	subs	r4, #16
   82c6e:	2c10      	cmp	r4, #16
   82c70:	f04f 0001 	mov.w	r0, #1
   82c74:	4611      	mov	r1, r2
   82c76:	46d1      	mov	r9, sl
   82c78:	dced      	bgt.n	82c56 <_vfiprintf_r+0x816>
   82c7a:	4422      	add	r2, r4
   82c7c:	2807      	cmp	r0, #7
   82c7e:	9211      	str	r2, [sp, #68]	; 0x44
   82c80:	f8c9 6000 	str.w	r6, [r9]
   82c84:	f8c9 4004 	str.w	r4, [r9, #4]
   82c88:	9010      	str	r0, [sp, #64]	; 0x40
   82c8a:	dd51      	ble.n	82d30 <_vfiprintf_r+0x8f0>
   82c8c:	2a00      	cmp	r2, #0
   82c8e:	f040 819a 	bne.w	82fc6 <_vfiprintf_r+0xb86>
   82c92:	9b03      	ldr	r3, [sp, #12]
   82c94:	9a08      	ldr	r2, [sp, #32]
   82c96:	9901      	ldr	r1, [sp, #4]
   82c98:	428a      	cmp	r2, r1
   82c9a:	bfac      	ite	ge
   82c9c:	189b      	addge	r3, r3, r2
   82c9e:	185b      	addlt	r3, r3, r1
   82ca0:	9303      	str	r3, [sp, #12]
   82ca2:	e04e      	b.n	82d42 <_vfiprintf_r+0x902>
   82ca4:	aa0f      	add	r2, sp, #60	; 0x3c
   82ca6:	4649      	mov	r1, r9
   82ca8:	4638      	mov	r0, r7
   82caa:	f7ff fb89 	bl	823c0 <__sprint_r.part.0>
   82cae:	2800      	cmp	r0, #0
   82cb0:	f040 813e 	bne.w	82f30 <_vfiprintf_r+0xaf0>
   82cb4:	9910      	ldr	r1, [sp, #64]	; 0x40
   82cb6:	46d6      	mov	lr, sl
   82cb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82cba:	1c48      	adds	r0, r1, #1
   82cbc:	e77f      	b.n	82bbe <_vfiprintf_r+0x77e>
   82cbe:	aa0f      	add	r2, sp, #60	; 0x3c
   82cc0:	4659      	mov	r1, fp
   82cc2:	4638      	mov	r0, r7
   82cc4:	f7ff fb7c 	bl	823c0 <__sprint_r.part.0>
   82cc8:	b960      	cbnz	r0, 82ce4 <_vfiprintf_r+0x8a4>
   82cca:	9910      	ldr	r1, [sp, #64]	; 0x40
   82ccc:	46d1      	mov	r9, sl
   82cce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82cd0:	1c48      	adds	r0, r1, #1
   82cd2:	e7bd      	b.n	82c50 <_vfiprintf_r+0x810>
   82cd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82cd6:	f8dd b010 	ldr.w	fp, [sp, #16]
   82cda:	2b00      	cmp	r3, #0
   82cdc:	f040 81ca 	bne.w	83074 <_vfiprintf_r+0xc34>
   82ce0:	2300      	movs	r3, #0
   82ce2:	9310      	str	r3, [sp, #64]	; 0x40
   82ce4:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82ce8:	f013 0f01 	tst.w	r3, #1
   82cec:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82cf0:	d102      	bne.n	82cf8 <_vfiprintf_r+0x8b8>
   82cf2:	059a      	lsls	r2, r3, #22
   82cf4:	f140 80dd 	bpl.w	82eb2 <_vfiprintf_r+0xa72>
   82cf8:	065b      	lsls	r3, r3, #25
   82cfa:	f53f acad 	bmi.w	82658 <_vfiprintf_r+0x218>
   82cfe:	9803      	ldr	r0, [sp, #12]
   82d00:	b02d      	add	sp, #180	; 0xb4
   82d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d06:	2a00      	cmp	r2, #0
   82d08:	f040 8105 	bne.w	82f16 <_vfiprintf_r+0xad6>
   82d0c:	2301      	movs	r3, #1
   82d0e:	46d1      	mov	r9, sl
   82d10:	9a05      	ldr	r2, [sp, #20]
   82d12:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   82d16:	921d      	str	r2, [sp, #116]	; 0x74
   82d18:	9211      	str	r2, [sp, #68]	; 0x44
   82d1a:	9310      	str	r3, [sp, #64]	; 0x40
   82d1c:	f109 0908 	add.w	r9, r9, #8
   82d20:	9b02      	ldr	r3, [sp, #8]
   82d22:	0759      	lsls	r1, r3, #29
   82d24:	d504      	bpl.n	82d30 <_vfiprintf_r+0x8f0>
   82d26:	9b08      	ldr	r3, [sp, #32]
   82d28:	9901      	ldr	r1, [sp, #4]
   82d2a:	1a5c      	subs	r4, r3, r1
   82d2c:	2c00      	cmp	r4, #0
   82d2e:	dc81      	bgt.n	82c34 <_vfiprintf_r+0x7f4>
   82d30:	9b03      	ldr	r3, [sp, #12]
   82d32:	9908      	ldr	r1, [sp, #32]
   82d34:	9801      	ldr	r0, [sp, #4]
   82d36:	4281      	cmp	r1, r0
   82d38:	bfac      	ite	ge
   82d3a:	185b      	addge	r3, r3, r1
   82d3c:	181b      	addlt	r3, r3, r0
   82d3e:	9303      	str	r3, [sp, #12]
   82d40:	bb72      	cbnz	r2, 82da0 <_vfiprintf_r+0x960>
   82d42:	2300      	movs	r3, #0
   82d44:	46d1      	mov	r9, sl
   82d46:	9310      	str	r3, [sp, #64]	; 0x40
   82d48:	f7ff bbb7 	b.w	824ba <_vfiprintf_r+0x7a>
   82d4c:	aa0f      	add	r2, sp, #60	; 0x3c
   82d4e:	9904      	ldr	r1, [sp, #16]
   82d50:	4620      	mov	r0, r4
   82d52:	f7ff fb35 	bl	823c0 <__sprint_r.part.0>
   82d56:	bb50      	cbnz	r0, 82dae <_vfiprintf_r+0x96e>
   82d58:	9910      	ldr	r1, [sp, #64]	; 0x40
   82d5a:	46d4      	mov	ip, sl
   82d5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d5e:	f101 0e01 	add.w	lr, r1, #1
   82d62:	e54a      	b.n	827fa <_vfiprintf_r+0x3ba>
   82d64:	2a00      	cmp	r2, #0
   82d66:	f47f aee5 	bne.w	82b34 <_vfiprintf_r+0x6f4>
   82d6a:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82d6e:	2900      	cmp	r1, #0
   82d70:	f000 811a 	beq.w	82fa8 <_vfiprintf_r+0xb68>
   82d74:	2201      	movs	r2, #1
   82d76:	46d1      	mov	r9, sl
   82d78:	4610      	mov	r0, r2
   82d7a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82d7e:	921d      	str	r2, [sp, #116]	; 0x74
   82d80:	911c      	str	r1, [sp, #112]	; 0x70
   82d82:	4601      	mov	r1, r0
   82d84:	f109 0908 	add.w	r9, r9, #8
   82d88:	3001      	adds	r0, #1
   82d8a:	e508      	b.n	8279e <_vfiprintf_r+0x35e>
   82d8c:	9b02      	ldr	r3, [sp, #8]
   82d8e:	2a01      	cmp	r2, #1
   82d90:	f000 8097 	beq.w	82ec2 <_vfiprintf_r+0xa82>
   82d94:	2a02      	cmp	r2, #2
   82d96:	d10d      	bne.n	82db4 <_vfiprintf_r+0x974>
   82d98:	9302      	str	r3, [sp, #8]
   82d9a:	2600      	movs	r6, #0
   82d9c:	2700      	movs	r7, #0
   82d9e:	e5b2      	b.n	82906 <_vfiprintf_r+0x4c6>
   82da0:	aa0f      	add	r2, sp, #60	; 0x3c
   82da2:	9904      	ldr	r1, [sp, #16]
   82da4:	9806      	ldr	r0, [sp, #24]
   82da6:	f7ff fb0b 	bl	823c0 <__sprint_r.part.0>
   82daa:	2800      	cmp	r0, #0
   82dac:	d0c9      	beq.n	82d42 <_vfiprintf_r+0x902>
   82dae:	f8dd b010 	ldr.w	fp, [sp, #16]
   82db2:	e797      	b.n	82ce4 <_vfiprintf_r+0x8a4>
   82db4:	2600      	movs	r6, #0
   82db6:	2700      	movs	r7, #0
   82db8:	9302      	str	r3, [sp, #8]
   82dba:	4651      	mov	r1, sl
   82dbc:	e000      	b.n	82dc0 <_vfiprintf_r+0x980>
   82dbe:	4659      	mov	r1, fp
   82dc0:	08f2      	lsrs	r2, r6, #3
   82dc2:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   82dc6:	08f8      	lsrs	r0, r7, #3
   82dc8:	f006 0307 	and.w	r3, r6, #7
   82dcc:	4607      	mov	r7, r0
   82dce:	4616      	mov	r6, r2
   82dd0:	3330      	adds	r3, #48	; 0x30
   82dd2:	ea56 0207 	orrs.w	r2, r6, r7
   82dd6:	f801 3c01 	strb.w	r3, [r1, #-1]
   82dda:	f101 3bff 	add.w	fp, r1, #4294967295
   82dde:	d1ee      	bne.n	82dbe <_vfiprintf_r+0x97e>
   82de0:	9a02      	ldr	r2, [sp, #8]
   82de2:	07d6      	lsls	r6, r2, #31
   82de4:	f57f ad9f 	bpl.w	82926 <_vfiprintf_r+0x4e6>
   82de8:	2b30      	cmp	r3, #48	; 0x30
   82dea:	f43f ad9c 	beq.w	82926 <_vfiprintf_r+0x4e6>
   82dee:	2330      	movs	r3, #48	; 0x30
   82df0:	3902      	subs	r1, #2
   82df2:	f80b 3c01 	strb.w	r3, [fp, #-1]
   82df6:	ebaa 0301 	sub.w	r3, sl, r1
   82dfa:	9305      	str	r3, [sp, #20]
   82dfc:	468b      	mov	fp, r1
   82dfe:	e477      	b.n	826f0 <_vfiprintf_r+0x2b0>
   82e00:	9b03      	ldr	r3, [sp, #12]
   82e02:	9a08      	ldr	r2, [sp, #32]
   82e04:	428a      	cmp	r2, r1
   82e06:	bfac      	ite	ge
   82e08:	189b      	addge	r3, r3, r2
   82e0a:	185b      	addlt	r3, r3, r1
   82e0c:	9303      	str	r3, [sp, #12]
   82e0e:	e798      	b.n	82d42 <_vfiprintf_r+0x902>
   82e10:	2202      	movs	r2, #2
   82e12:	e44e      	b.n	826b2 <_vfiprintf_r+0x272>
   82e14:	2f00      	cmp	r7, #0
   82e16:	bf08      	it	eq
   82e18:	2e0a      	cmpeq	r6, #10
   82e1a:	d351      	bcc.n	82ec0 <_vfiprintf_r+0xa80>
   82e1c:	46d3      	mov	fp, sl
   82e1e:	4630      	mov	r0, r6
   82e20:	4639      	mov	r1, r7
   82e22:	220a      	movs	r2, #10
   82e24:	2300      	movs	r3, #0
   82e26:	f001 fefb 	bl	84c20 <__aeabi_uldivmod>
   82e2a:	3230      	adds	r2, #48	; 0x30
   82e2c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   82e30:	4630      	mov	r0, r6
   82e32:	4639      	mov	r1, r7
   82e34:	2300      	movs	r3, #0
   82e36:	220a      	movs	r2, #10
   82e38:	f001 fef2 	bl	84c20 <__aeabi_uldivmod>
   82e3c:	4606      	mov	r6, r0
   82e3e:	460f      	mov	r7, r1
   82e40:	ea56 0307 	orrs.w	r3, r6, r7
   82e44:	d1eb      	bne.n	82e1e <_vfiprintf_r+0x9de>
   82e46:	e56e      	b.n	82926 <_vfiprintf_r+0x4e6>
   82e48:	9405      	str	r4, [sp, #20]
   82e4a:	46d3      	mov	fp, sl
   82e4c:	e450      	b.n	826f0 <_vfiprintf_r+0x2b0>
   82e4e:	aa0f      	add	r2, sp, #60	; 0x3c
   82e50:	9904      	ldr	r1, [sp, #16]
   82e52:	9806      	ldr	r0, [sp, #24]
   82e54:	f7ff fab4 	bl	823c0 <__sprint_r.part.0>
   82e58:	2800      	cmp	r0, #0
   82e5a:	d1a8      	bne.n	82dae <_vfiprintf_r+0x96e>
   82e5c:	46d1      	mov	r9, sl
   82e5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82e60:	e75e      	b.n	82d20 <_vfiprintf_r+0x8e0>
   82e62:	aa0f      	add	r2, sp, #60	; 0x3c
   82e64:	9904      	ldr	r1, [sp, #16]
   82e66:	9806      	ldr	r0, [sp, #24]
   82e68:	f7ff faaa 	bl	823c0 <__sprint_r.part.0>
   82e6c:	2800      	cmp	r0, #0
   82e6e:	d19e      	bne.n	82dae <_vfiprintf_r+0x96e>
   82e70:	46d1      	mov	r9, sl
   82e72:	f7ff bbbb 	b.w	825ec <_vfiprintf_r+0x1ac>
   82e76:	bf00      	nop
   82e78:	00084fcc 	.word	0x00084fcc
   82e7c:	00084fbc 	.word	0x00084fbc
   82e80:	3104      	adds	r1, #4
   82e82:	6816      	ldr	r6, [r2, #0]
   82e84:	2700      	movs	r7, #0
   82e86:	2201      	movs	r2, #1
   82e88:	9107      	str	r1, [sp, #28]
   82e8a:	e412      	b.n	826b2 <_vfiprintf_r+0x272>
   82e8c:	9807      	ldr	r0, [sp, #28]
   82e8e:	2700      	movs	r7, #0
   82e90:	4601      	mov	r1, r0
   82e92:	3104      	adds	r1, #4
   82e94:	6806      	ldr	r6, [r0, #0]
   82e96:	9107      	str	r1, [sp, #28]
   82e98:	e40b      	b.n	826b2 <_vfiprintf_r+0x272>
   82e9a:	680e      	ldr	r6, [r1, #0]
   82e9c:	3104      	adds	r1, #4
   82e9e:	9107      	str	r1, [sp, #28]
   82ea0:	2700      	movs	r7, #0
   82ea2:	e592      	b.n	829ca <_vfiprintf_r+0x58a>
   82ea4:	6816      	ldr	r6, [r2, #0]
   82ea6:	3204      	adds	r2, #4
   82ea8:	17f7      	asrs	r7, r6, #31
   82eaa:	9207      	str	r2, [sp, #28]
   82eac:	4630      	mov	r0, r6
   82eae:	4639      	mov	r1, r7
   82eb0:	e512      	b.n	828d8 <_vfiprintf_r+0x498>
   82eb2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82eb6:	f000 fe75 	bl	83ba4 <__retarget_lock_release_recursive>
   82eba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82ebe:	e71b      	b.n	82cf8 <_vfiprintf_r+0x8b8>
   82ec0:	9b02      	ldr	r3, [sp, #8]
   82ec2:	9302      	str	r3, [sp, #8]
   82ec4:	2301      	movs	r3, #1
   82ec6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82eca:	3630      	adds	r6, #48	; 0x30
   82ecc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   82ed0:	9305      	str	r3, [sp, #20]
   82ed2:	e40d      	b.n	826f0 <_vfiprintf_r+0x2b0>
   82ed4:	aa0f      	add	r2, sp, #60	; 0x3c
   82ed6:	9904      	ldr	r1, [sp, #16]
   82ed8:	9806      	ldr	r0, [sp, #24]
   82eda:	f7ff fa71 	bl	823c0 <__sprint_r.part.0>
   82ede:	2800      	cmp	r0, #0
   82ee0:	f47f af65 	bne.w	82dae <_vfiprintf_r+0x96e>
   82ee4:	9910      	ldr	r1, [sp, #64]	; 0x40
   82ee6:	46d1      	mov	r9, sl
   82ee8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82eea:	1c48      	adds	r0, r1, #1
   82eec:	e457      	b.n	8279e <_vfiprintf_r+0x35e>
   82eee:	aa0f      	add	r2, sp, #60	; 0x3c
   82ef0:	9904      	ldr	r1, [sp, #16]
   82ef2:	9806      	ldr	r0, [sp, #24]
   82ef4:	f7ff fa64 	bl	823c0 <__sprint_r.part.0>
   82ef8:	2800      	cmp	r0, #0
   82efa:	f47f af58 	bne.w	82dae <_vfiprintf_r+0x96e>
   82efe:	9910      	ldr	r1, [sp, #64]	; 0x40
   82f00:	46d1      	mov	r9, sl
   82f02:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82f04:	1c48      	adds	r0, r1, #1
   82f06:	e644      	b.n	82b92 <_vfiprintf_r+0x752>
   82f08:	2a00      	cmp	r2, #0
   82f0a:	f040 8087 	bne.w	8301c <_vfiprintf_r+0xbdc>
   82f0e:	2001      	movs	r0, #1
   82f10:	4611      	mov	r1, r2
   82f12:	46d1      	mov	r9, sl
   82f14:	e641      	b.n	82b9a <_vfiprintf_r+0x75a>
   82f16:	aa0f      	add	r2, sp, #60	; 0x3c
   82f18:	9904      	ldr	r1, [sp, #16]
   82f1a:	9806      	ldr	r0, [sp, #24]
   82f1c:	f7ff fa50 	bl	823c0 <__sprint_r.part.0>
   82f20:	2800      	cmp	r0, #0
   82f22:	f47f af44 	bne.w	82dae <_vfiprintf_r+0x96e>
   82f26:	9810      	ldr	r0, [sp, #64]	; 0x40
   82f28:	46d1      	mov	r9, sl
   82f2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82f2c:	3001      	adds	r0, #1
   82f2e:	e668      	b.n	82c02 <_vfiprintf_r+0x7c2>
   82f30:	46cb      	mov	fp, r9
   82f32:	e6d7      	b.n	82ce4 <_vfiprintf_r+0x8a4>
   82f34:	9d07      	ldr	r5, [sp, #28]
   82f36:	3507      	adds	r5, #7
   82f38:	f025 0507 	bic.w	r5, r5, #7
   82f3c:	f105 0208 	add.w	r2, r5, #8
   82f40:	e9d5 0100 	ldrd	r0, r1, [r5]
   82f44:	9207      	str	r2, [sp, #28]
   82f46:	4606      	mov	r6, r0
   82f48:	460f      	mov	r7, r1
   82f4a:	e4c5      	b.n	828d8 <_vfiprintf_r+0x498>
   82f4c:	9d07      	ldr	r5, [sp, #28]
   82f4e:	3507      	adds	r5, #7
   82f50:	f025 0207 	bic.w	r2, r5, #7
   82f54:	f102 0108 	add.w	r1, r2, #8
   82f58:	e9d2 6700 	ldrd	r6, r7, [r2]
   82f5c:	9107      	str	r1, [sp, #28]
   82f5e:	2201      	movs	r2, #1
   82f60:	f7ff bba7 	b.w	826b2 <_vfiprintf_r+0x272>
   82f64:	9d07      	ldr	r5, [sp, #28]
   82f66:	3507      	adds	r5, #7
   82f68:	f025 0207 	bic.w	r2, r5, #7
   82f6c:	f102 0108 	add.w	r1, r2, #8
   82f70:	e9d2 6700 	ldrd	r6, r7, [r2]
   82f74:	9107      	str	r1, [sp, #28]
   82f76:	2200      	movs	r2, #0
   82f78:	f7ff bb9b 	b.w	826b2 <_vfiprintf_r+0x272>
   82f7c:	9d07      	ldr	r5, [sp, #28]
   82f7e:	3507      	adds	r5, #7
   82f80:	f025 0107 	bic.w	r1, r5, #7
   82f84:	f101 0008 	add.w	r0, r1, #8
   82f88:	9007      	str	r0, [sp, #28]
   82f8a:	e9d1 6700 	ldrd	r6, r7, [r1]
   82f8e:	e51c      	b.n	829ca <_vfiprintf_r+0x58a>
   82f90:	46d3      	mov	fp, sl
   82f92:	f7ff bbad 	b.w	826f0 <_vfiprintf_r+0x2b0>
   82f96:	252d      	movs	r5, #45	; 0x2d
   82f98:	4276      	negs	r6, r6
   82f9a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82f9e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82fa2:	2201      	movs	r2, #1
   82fa4:	f7ff bb8a 	b.w	826bc <_vfiprintf_r+0x27c>
   82fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82faa:	b9b3      	cbnz	r3, 82fda <_vfiprintf_r+0xb9a>
   82fac:	4611      	mov	r1, r2
   82fae:	2001      	movs	r0, #1
   82fb0:	46d1      	mov	r9, sl
   82fb2:	e5f2      	b.n	82b9a <_vfiprintf_r+0x75a>
   82fb4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82fb8:	f000 fdf4 	bl	83ba4 <__retarget_lock_release_recursive>
   82fbc:	f04f 33ff 	mov.w	r3, #4294967295
   82fc0:	9303      	str	r3, [sp, #12]
   82fc2:	f7ff bb4c 	b.w	8265e <_vfiprintf_r+0x21e>
   82fc6:	aa0f      	add	r2, sp, #60	; 0x3c
   82fc8:	9904      	ldr	r1, [sp, #16]
   82fca:	9806      	ldr	r0, [sp, #24]
   82fcc:	f7ff f9f8 	bl	823c0 <__sprint_r.part.0>
   82fd0:	2800      	cmp	r0, #0
   82fd2:	f47f aeec 	bne.w	82dae <_vfiprintf_r+0x96e>
   82fd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82fd8:	e6aa      	b.n	82d30 <_vfiprintf_r+0x8f0>
   82fda:	2202      	movs	r2, #2
   82fdc:	ab0e      	add	r3, sp, #56	; 0x38
   82fde:	921d      	str	r2, [sp, #116]	; 0x74
   82fe0:	931c      	str	r3, [sp, #112]	; 0x70
   82fe2:	2001      	movs	r0, #1
   82fe4:	46d1      	mov	r9, sl
   82fe6:	e5d0      	b.n	82b8a <_vfiprintf_r+0x74a>
   82fe8:	4d34      	ldr	r5, [pc, #208]	; (830bc <_vfiprintf_r+0xc7c>)
   82fea:	e5fd      	b.n	82be8 <_vfiprintf_r+0x7a8>
   82fec:	9a07      	ldr	r2, [sp, #28]
   82fee:	4613      	mov	r3, r2
   82ff0:	3304      	adds	r3, #4
   82ff2:	9307      	str	r3, [sp, #28]
   82ff4:	9b03      	ldr	r3, [sp, #12]
   82ff6:	6811      	ldr	r1, [r2, #0]
   82ff8:	17dd      	asrs	r5, r3, #31
   82ffa:	461a      	mov	r2, r3
   82ffc:	462b      	mov	r3, r5
   82ffe:	e9c1 2300 	strd	r2, r3, [r1]
   83002:	f7ff ba5a 	b.w	824ba <_vfiprintf_r+0x7a>
   83006:	4658      	mov	r0, fp
   83008:	9507      	str	r5, [sp, #28]
   8300a:	9302      	str	r3, [sp, #8]
   8300c:	f7ff f9aa 	bl	82364 <strlen>
   83010:	2400      	movs	r4, #0
   83012:	9005      	str	r0, [sp, #20]
   83014:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83018:	f7ff bb6a 	b.w	826f0 <_vfiprintf_r+0x2b0>
   8301c:	aa0f      	add	r2, sp, #60	; 0x3c
   8301e:	9904      	ldr	r1, [sp, #16]
   83020:	9806      	ldr	r0, [sp, #24]
   83022:	f7ff f9cd 	bl	823c0 <__sprint_r.part.0>
   83026:	2800      	cmp	r0, #0
   83028:	f47f aec1 	bne.w	82dae <_vfiprintf_r+0x96e>
   8302c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8302e:	46d1      	mov	r9, sl
   83030:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83032:	1c48      	adds	r0, r1, #1
   83034:	e5b1      	b.n	82b9a <_vfiprintf_r+0x75a>
   83036:	9910      	ldr	r1, [sp, #64]	; 0x40
   83038:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8303a:	3101      	adds	r1, #1
   8303c:	4e20      	ldr	r6, [pc, #128]	; (830c0 <_vfiprintf_r+0xc80>)
   8303e:	f7ff bb9c 	b.w	8277a <_vfiprintf_r+0x33a>
   83042:	2c06      	cmp	r4, #6
   83044:	bf28      	it	cs
   83046:	2406      	movcs	r4, #6
   83048:	9507      	str	r5, [sp, #28]
   8304a:	9405      	str	r4, [sp, #20]
   8304c:	9401      	str	r4, [sp, #4]
   8304e:	f8df b074 	ldr.w	fp, [pc, #116]	; 830c4 <_vfiprintf_r+0xc84>
   83052:	e4e3      	b.n	82a1c <_vfiprintf_r+0x5dc>
   83054:	9810      	ldr	r0, [sp, #64]	; 0x40
   83056:	4e1a      	ldr	r6, [pc, #104]	; (830c0 <_vfiprintf_r+0xc80>)
   83058:	3001      	adds	r0, #1
   8305a:	e60e      	b.n	82c7a <_vfiprintf_r+0x83a>
   8305c:	4686      	mov	lr, r0
   8305e:	4d17      	ldr	r5, [pc, #92]	; (830bc <_vfiprintf_r+0xc7c>)
   83060:	f7ff bbe2 	b.w	82828 <_vfiprintf_r+0x3e8>
   83064:	9405      	str	r4, [sp, #20]
   83066:	9507      	str	r5, [sp, #28]
   83068:	9302      	str	r3, [sp, #8]
   8306a:	4604      	mov	r4, r0
   8306c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83070:	f7ff bb3e 	b.w	826f0 <_vfiprintf_r+0x2b0>
   83074:	9806      	ldr	r0, [sp, #24]
   83076:	aa0f      	add	r2, sp, #60	; 0x3c
   83078:	4659      	mov	r1, fp
   8307a:	f7ff f9a1 	bl	823c0 <__sprint_r.part.0>
   8307e:	2800      	cmp	r0, #0
   83080:	f43f ae2e 	beq.w	82ce0 <_vfiprintf_r+0x8a0>
   83084:	e62e      	b.n	82ce4 <_vfiprintf_r+0x8a4>
   83086:	9907      	ldr	r1, [sp, #28]
   83088:	f898 2001 	ldrb.w	r2, [r8, #1]
   8308c:	680c      	ldr	r4, [r1, #0]
   8308e:	3104      	adds	r1, #4
   83090:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   83094:	46b8      	mov	r8, r7
   83096:	9107      	str	r1, [sp, #28]
   83098:	f7ff ba44 	b.w	82524 <_vfiprintf_r+0xe4>
   8309c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   830a0:	e4a7      	b.n	829f2 <_vfiprintf_r+0x5b2>
   830a2:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   830a6:	e521      	b.n	82aec <_vfiprintf_r+0x6ac>
   830a8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   830ac:	e47c      	b.n	829a8 <_vfiprintf_r+0x568>
   830ae:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   830b2:	e43f      	b.n	82934 <_vfiprintf_r+0x4f4>
   830b4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   830b8:	f7ff bbfa 	b.w	828b0 <_vfiprintf_r+0x470>
   830bc:	00084fcc 	.word	0x00084fcc
   830c0:	00084fbc 	.word	0x00084fbc
   830c4:	00084fb4 	.word	0x00084fb4

000830c8 <__sbprintf>:
   830c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   830cc:	460c      	mov	r4, r1
   830ce:	f04f 0e00 	mov.w	lr, #0
   830d2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   830d6:	4606      	mov	r6, r0
   830d8:	4617      	mov	r7, r2
   830da:	4698      	mov	r8, r3
   830dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
   830de:	89e3      	ldrh	r3, [r4, #14]
   830e0:	8989      	ldrh	r1, [r1, #12]
   830e2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   830e6:	f021 0102 	bic.w	r1, r1, #2
   830ea:	9219      	str	r2, [sp, #100]	; 0x64
   830ec:	f8ad 300e 	strh.w	r3, [sp, #14]
   830f0:	69e2      	ldr	r2, [r4, #28]
   830f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   830f4:	f8ad 100c 	strh.w	r1, [sp, #12]
   830f8:	a816      	add	r0, sp, #88	; 0x58
   830fa:	a91a      	add	r1, sp, #104	; 0x68
   830fc:	f8cd e018 	str.w	lr, [sp, #24]
   83100:	9207      	str	r2, [sp, #28]
   83102:	9309      	str	r3, [sp, #36]	; 0x24
   83104:	9100      	str	r1, [sp, #0]
   83106:	9104      	str	r1, [sp, #16]
   83108:	9502      	str	r5, [sp, #8]
   8310a:	9505      	str	r5, [sp, #20]
   8310c:	f000 fd44 	bl	83b98 <__retarget_lock_init_recursive>
   83110:	4643      	mov	r3, r8
   83112:	463a      	mov	r2, r7
   83114:	4669      	mov	r1, sp
   83116:	4630      	mov	r0, r6
   83118:	f7ff f992 	bl	82440 <_vfiprintf_r>
   8311c:	1e05      	subs	r5, r0, #0
   8311e:	db07      	blt.n	83130 <__sbprintf+0x68>
   83120:	4630      	mov	r0, r6
   83122:	4669      	mov	r1, sp
   83124:	f000 f924 	bl	83370 <_fflush_r>
   83128:	2800      	cmp	r0, #0
   8312a:	bf18      	it	ne
   8312c:	f04f 35ff 	movne.w	r5, #4294967295
   83130:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83134:	065b      	lsls	r3, r3, #25
   83136:	d503      	bpl.n	83140 <__sbprintf+0x78>
   83138:	89a3      	ldrh	r3, [r4, #12]
   8313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8313e:	81a3      	strh	r3, [r4, #12]
   83140:	9816      	ldr	r0, [sp, #88]	; 0x58
   83142:	f000 fd2b 	bl	83b9c <__retarget_lock_close_recursive>
   83146:	4628      	mov	r0, r5
   83148:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083150 <__swsetup_r>:
   83150:	b538      	push	{r3, r4, r5, lr}
   83152:	4b30      	ldr	r3, [pc, #192]	; (83214 <__swsetup_r+0xc4>)
   83154:	4605      	mov	r5, r0
   83156:	6818      	ldr	r0, [r3, #0]
   83158:	460c      	mov	r4, r1
   8315a:	b110      	cbz	r0, 83162 <__swsetup_r+0x12>
   8315c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8315e:	2b00      	cmp	r3, #0
   83160:	d038      	beq.n	831d4 <__swsetup_r+0x84>
   83162:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83166:	b293      	uxth	r3, r2
   83168:	0718      	lsls	r0, r3, #28
   8316a:	d50c      	bpl.n	83186 <__swsetup_r+0x36>
   8316c:	6920      	ldr	r0, [r4, #16]
   8316e:	b1a8      	cbz	r0, 8319c <__swsetup_r+0x4c>
   83170:	f013 0201 	ands.w	r2, r3, #1
   83174:	d01e      	beq.n	831b4 <__swsetup_r+0x64>
   83176:	2200      	movs	r2, #0
   83178:	6963      	ldr	r3, [r4, #20]
   8317a:	60a2      	str	r2, [r4, #8]
   8317c:	425b      	negs	r3, r3
   8317e:	61a3      	str	r3, [r4, #24]
   83180:	b1f0      	cbz	r0, 831c0 <__swsetup_r+0x70>
   83182:	2000      	movs	r0, #0
   83184:	bd38      	pop	{r3, r4, r5, pc}
   83186:	06d9      	lsls	r1, r3, #27
   83188:	d53b      	bpl.n	83202 <__swsetup_r+0xb2>
   8318a:	0758      	lsls	r0, r3, #29
   8318c:	d425      	bmi.n	831da <__swsetup_r+0x8a>
   8318e:	6920      	ldr	r0, [r4, #16]
   83190:	f042 0308 	orr.w	r3, r2, #8
   83194:	81a3      	strh	r3, [r4, #12]
   83196:	b29b      	uxth	r3, r3
   83198:	2800      	cmp	r0, #0
   8319a:	d1e9      	bne.n	83170 <__swsetup_r+0x20>
   8319c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   831a0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   831a4:	d0e4      	beq.n	83170 <__swsetup_r+0x20>
   831a6:	4628      	mov	r0, r5
   831a8:	4621      	mov	r1, r4
   831aa:	f000 fd2b 	bl	83c04 <__smakebuf_r>
   831ae:	89a3      	ldrh	r3, [r4, #12]
   831b0:	6920      	ldr	r0, [r4, #16]
   831b2:	e7dd      	b.n	83170 <__swsetup_r+0x20>
   831b4:	0799      	lsls	r1, r3, #30
   831b6:	bf58      	it	pl
   831b8:	6962      	ldrpl	r2, [r4, #20]
   831ba:	60a2      	str	r2, [r4, #8]
   831bc:	2800      	cmp	r0, #0
   831be:	d1e0      	bne.n	83182 <__swsetup_r+0x32>
   831c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   831c4:	061a      	lsls	r2, r3, #24
   831c6:	d5dd      	bpl.n	83184 <__swsetup_r+0x34>
   831c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   831cc:	81a3      	strh	r3, [r4, #12]
   831ce:	f04f 30ff 	mov.w	r0, #4294967295
   831d2:	bd38      	pop	{r3, r4, r5, pc}
   831d4:	f000 f924 	bl	83420 <__sinit>
   831d8:	e7c3      	b.n	83162 <__swsetup_r+0x12>
   831da:	6b21      	ldr	r1, [r4, #48]	; 0x30
   831dc:	b151      	cbz	r1, 831f4 <__swsetup_r+0xa4>
   831de:	f104 0340 	add.w	r3, r4, #64	; 0x40
   831e2:	4299      	cmp	r1, r3
   831e4:	d004      	beq.n	831f0 <__swsetup_r+0xa0>
   831e6:	4628      	mov	r0, r5
   831e8:	f000 fa40 	bl	8366c <_free_r>
   831ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   831f0:	2300      	movs	r3, #0
   831f2:	6323      	str	r3, [r4, #48]	; 0x30
   831f4:	2300      	movs	r3, #0
   831f6:	6920      	ldr	r0, [r4, #16]
   831f8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   831fc:	e884 0009 	stmia.w	r4, {r0, r3}
   83200:	e7c6      	b.n	83190 <__swsetup_r+0x40>
   83202:	2309      	movs	r3, #9
   83204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   83208:	602b      	str	r3, [r5, #0]
   8320a:	f04f 30ff 	mov.w	r0, #4294967295
   8320e:	81a2      	strh	r2, [r4, #12]
   83210:	bd38      	pop	{r3, r4, r5, pc}
   83212:	bf00      	nop
   83214:	20070134 	.word	0x20070134

00083218 <register_fini>:
   83218:	4b02      	ldr	r3, [pc, #8]	; (83224 <register_fini+0xc>)
   8321a:	b113      	cbz	r3, 83222 <register_fini+0xa>
   8321c:	4802      	ldr	r0, [pc, #8]	; (83228 <register_fini+0x10>)
   8321e:	f000 b805 	b.w	8322c <atexit>
   83222:	4770      	bx	lr
   83224:	00000000 	.word	0x00000000
   83228:	00083499 	.word	0x00083499

0008322c <atexit>:
   8322c:	2300      	movs	r3, #0
   8322e:	4601      	mov	r1, r0
   83230:	461a      	mov	r2, r3
   83232:	4618      	mov	r0, r3
   83234:	f001 bbcc 	b.w	849d0 <__register_exitproc>

00083238 <__sflush_r>:
   83238:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83240:	b29a      	uxth	r2, r3
   83242:	460d      	mov	r5, r1
   83244:	0711      	lsls	r1, r2, #28
   83246:	4680      	mov	r8, r0
   83248:	d43a      	bmi.n	832c0 <__sflush_r+0x88>
   8324a:	686a      	ldr	r2, [r5, #4]
   8324c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83250:	2a00      	cmp	r2, #0
   83252:	81ab      	strh	r3, [r5, #12]
   83254:	dd70      	ble.n	83338 <__sflush_r+0x100>
   83256:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83258:	2c00      	cmp	r4, #0
   8325a:	d04a      	beq.n	832f2 <__sflush_r+0xba>
   8325c:	2200      	movs	r2, #0
   8325e:	b29b      	uxth	r3, r3
   83260:	f8d8 6000 	ldr.w	r6, [r8]
   83264:	f8c8 2000 	str.w	r2, [r8]
   83268:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   8326c:	d068      	beq.n	83340 <__sflush_r+0x108>
   8326e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83270:	075f      	lsls	r7, r3, #29
   83272:	d505      	bpl.n	83280 <__sflush_r+0x48>
   83274:	6869      	ldr	r1, [r5, #4]
   83276:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83278:	1a52      	subs	r2, r2, r1
   8327a:	b10b      	cbz	r3, 83280 <__sflush_r+0x48>
   8327c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8327e:	1ad2      	subs	r2, r2, r3
   83280:	2300      	movs	r3, #0
   83282:	69e9      	ldr	r1, [r5, #28]
   83284:	4640      	mov	r0, r8
   83286:	47a0      	blx	r4
   83288:	1c44      	adds	r4, r0, #1
   8328a:	d03d      	beq.n	83308 <__sflush_r+0xd0>
   8328c:	2100      	movs	r1, #0
   8328e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83292:	692a      	ldr	r2, [r5, #16]
   83294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83298:	81ab      	strh	r3, [r5, #12]
   8329a:	04db      	lsls	r3, r3, #19
   8329c:	6069      	str	r1, [r5, #4]
   8329e:	602a      	str	r2, [r5, #0]
   832a0:	d448      	bmi.n	83334 <__sflush_r+0xfc>
   832a2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   832a4:	f8c8 6000 	str.w	r6, [r8]
   832a8:	b319      	cbz	r1, 832f2 <__sflush_r+0xba>
   832aa:	f105 0340 	add.w	r3, r5, #64	; 0x40
   832ae:	4299      	cmp	r1, r3
   832b0:	d002      	beq.n	832b8 <__sflush_r+0x80>
   832b2:	4640      	mov	r0, r8
   832b4:	f000 f9da 	bl	8366c <_free_r>
   832b8:	2000      	movs	r0, #0
   832ba:	6328      	str	r0, [r5, #48]	; 0x30
   832bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832c0:	692e      	ldr	r6, [r5, #16]
   832c2:	b1b6      	cbz	r6, 832f2 <__sflush_r+0xba>
   832c4:	0791      	lsls	r1, r2, #30
   832c6:	bf18      	it	ne
   832c8:	2300      	movne	r3, #0
   832ca:	682c      	ldr	r4, [r5, #0]
   832cc:	bf08      	it	eq
   832ce:	696b      	ldreq	r3, [r5, #20]
   832d0:	602e      	str	r6, [r5, #0]
   832d2:	1ba4      	subs	r4, r4, r6
   832d4:	60ab      	str	r3, [r5, #8]
   832d6:	e00a      	b.n	832ee <__sflush_r+0xb6>
   832d8:	4623      	mov	r3, r4
   832da:	4632      	mov	r2, r6
   832dc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   832de:	69e9      	ldr	r1, [r5, #28]
   832e0:	4640      	mov	r0, r8
   832e2:	47b8      	blx	r7
   832e4:	2800      	cmp	r0, #0
   832e6:	eba4 0400 	sub.w	r4, r4, r0
   832ea:	4406      	add	r6, r0
   832ec:	dd04      	ble.n	832f8 <__sflush_r+0xc0>
   832ee:	2c00      	cmp	r4, #0
   832f0:	dcf2      	bgt.n	832d8 <__sflush_r+0xa0>
   832f2:	2000      	movs	r0, #0
   832f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   832f8:	89ab      	ldrh	r3, [r5, #12]
   832fa:	f04f 30ff 	mov.w	r0, #4294967295
   832fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83302:	81ab      	strh	r3, [r5, #12]
   83304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83308:	f8d8 4000 	ldr.w	r4, [r8]
   8330c:	2c1d      	cmp	r4, #29
   8330e:	d8f3      	bhi.n	832f8 <__sflush_r+0xc0>
   83310:	4b16      	ldr	r3, [pc, #88]	; (8336c <__sflush_r+0x134>)
   83312:	40e3      	lsrs	r3, r4
   83314:	43db      	mvns	r3, r3
   83316:	f013 0301 	ands.w	r3, r3, #1
   8331a:	d1ed      	bne.n	832f8 <__sflush_r+0xc0>
   8331c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   83320:	6929      	ldr	r1, [r5, #16]
   83322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83326:	81aa      	strh	r2, [r5, #12]
   83328:	04d2      	lsls	r2, r2, #19
   8332a:	606b      	str	r3, [r5, #4]
   8332c:	6029      	str	r1, [r5, #0]
   8332e:	d5b8      	bpl.n	832a2 <__sflush_r+0x6a>
   83330:	2c00      	cmp	r4, #0
   83332:	d1b6      	bne.n	832a2 <__sflush_r+0x6a>
   83334:	6528      	str	r0, [r5, #80]	; 0x50
   83336:	e7b4      	b.n	832a2 <__sflush_r+0x6a>
   83338:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8333a:	2a00      	cmp	r2, #0
   8333c:	dc8b      	bgt.n	83256 <__sflush_r+0x1e>
   8333e:	e7d8      	b.n	832f2 <__sflush_r+0xba>
   83340:	2301      	movs	r3, #1
   83342:	69e9      	ldr	r1, [r5, #28]
   83344:	4640      	mov	r0, r8
   83346:	47a0      	blx	r4
   83348:	1c43      	adds	r3, r0, #1
   8334a:	4602      	mov	r2, r0
   8334c:	d002      	beq.n	83354 <__sflush_r+0x11c>
   8334e:	89ab      	ldrh	r3, [r5, #12]
   83350:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83352:	e78d      	b.n	83270 <__sflush_r+0x38>
   83354:	f8d8 3000 	ldr.w	r3, [r8]
   83358:	2b00      	cmp	r3, #0
   8335a:	d0f8      	beq.n	8334e <__sflush_r+0x116>
   8335c:	2b1d      	cmp	r3, #29
   8335e:	d001      	beq.n	83364 <__sflush_r+0x12c>
   83360:	2b16      	cmp	r3, #22
   83362:	d1c9      	bne.n	832f8 <__sflush_r+0xc0>
   83364:	f8c8 6000 	str.w	r6, [r8]
   83368:	e7c3      	b.n	832f2 <__sflush_r+0xba>
   8336a:	bf00      	nop
   8336c:	20400001 	.word	0x20400001

00083370 <_fflush_r>:
   83370:	b538      	push	{r3, r4, r5, lr}
   83372:	460d      	mov	r5, r1
   83374:	4604      	mov	r4, r0
   83376:	b108      	cbz	r0, 8337c <_fflush_r+0xc>
   83378:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8337a:	b1bb      	cbz	r3, 833ac <_fflush_r+0x3c>
   8337c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   83380:	b188      	cbz	r0, 833a6 <_fflush_r+0x36>
   83382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83384:	07db      	lsls	r3, r3, #31
   83386:	d401      	bmi.n	8338c <_fflush_r+0x1c>
   83388:	0581      	lsls	r1, r0, #22
   8338a:	d517      	bpl.n	833bc <_fflush_r+0x4c>
   8338c:	4620      	mov	r0, r4
   8338e:	4629      	mov	r1, r5
   83390:	f7ff ff52 	bl	83238 <__sflush_r>
   83394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83396:	4604      	mov	r4, r0
   83398:	07da      	lsls	r2, r3, #31
   8339a:	d402      	bmi.n	833a2 <_fflush_r+0x32>
   8339c:	89ab      	ldrh	r3, [r5, #12]
   8339e:	059b      	lsls	r3, r3, #22
   833a0:	d507      	bpl.n	833b2 <_fflush_r+0x42>
   833a2:	4620      	mov	r0, r4
   833a4:	bd38      	pop	{r3, r4, r5, pc}
   833a6:	4604      	mov	r4, r0
   833a8:	4620      	mov	r0, r4
   833aa:	bd38      	pop	{r3, r4, r5, pc}
   833ac:	f000 f838 	bl	83420 <__sinit>
   833b0:	e7e4      	b.n	8337c <_fflush_r+0xc>
   833b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   833b4:	f000 fbf6 	bl	83ba4 <__retarget_lock_release_recursive>
   833b8:	4620      	mov	r0, r4
   833ba:	bd38      	pop	{r3, r4, r5, pc}
   833bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   833be:	f000 fbef 	bl	83ba0 <__retarget_lock_acquire_recursive>
   833c2:	e7e3      	b.n	8338c <_fflush_r+0x1c>

000833c4 <_cleanup_r>:
   833c4:	4901      	ldr	r1, [pc, #4]	; (833cc <_cleanup_r+0x8>)
   833c6:	f000 bbb1 	b.w	83b2c <_fwalk_reent>
   833ca:	bf00      	nop
   833cc:	00084ab9 	.word	0x00084ab9

000833d0 <std.isra.0>:
   833d0:	2300      	movs	r3, #0
   833d2:	b510      	push	{r4, lr}
   833d4:	4604      	mov	r4, r0
   833d6:	8181      	strh	r1, [r0, #12]
   833d8:	81c2      	strh	r2, [r0, #14]
   833da:	6003      	str	r3, [r0, #0]
   833dc:	6043      	str	r3, [r0, #4]
   833de:	6083      	str	r3, [r0, #8]
   833e0:	6643      	str	r3, [r0, #100]	; 0x64
   833e2:	6103      	str	r3, [r0, #16]
   833e4:	6143      	str	r3, [r0, #20]
   833e6:	6183      	str	r3, [r0, #24]
   833e8:	4619      	mov	r1, r3
   833ea:	2208      	movs	r2, #8
   833ec:	305c      	adds	r0, #92	; 0x5c
   833ee:	f7fe fe45 	bl	8207c <memset>
   833f2:	4807      	ldr	r0, [pc, #28]	; (83410 <std.isra.0+0x40>)
   833f4:	4907      	ldr	r1, [pc, #28]	; (83414 <std.isra.0+0x44>)
   833f6:	4a08      	ldr	r2, [pc, #32]	; (83418 <std.isra.0+0x48>)
   833f8:	4b08      	ldr	r3, [pc, #32]	; (8341c <std.isra.0+0x4c>)
   833fa:	6220      	str	r0, [r4, #32]
   833fc:	61e4      	str	r4, [r4, #28]
   833fe:	6261      	str	r1, [r4, #36]	; 0x24
   83400:	62a2      	str	r2, [r4, #40]	; 0x28
   83402:	62e3      	str	r3, [r4, #44]	; 0x2c
   83404:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8340c:	f000 bbc4 	b.w	83b98 <__retarget_lock_init_recursive>
   83410:	00084801 	.word	0x00084801
   83414:	00084825 	.word	0x00084825
   83418:	00084861 	.word	0x00084861
   8341c:	00084881 	.word	0x00084881

00083420 <__sinit>:
   83420:	b510      	push	{r4, lr}
   83422:	4604      	mov	r4, r0
   83424:	4814      	ldr	r0, [pc, #80]	; (83478 <__sinit+0x58>)
   83426:	f000 fbbb 	bl	83ba0 <__retarget_lock_acquire_recursive>
   8342a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8342c:	b9fa      	cbnz	r2, 8346e <__sinit+0x4e>
   8342e:	2003      	movs	r0, #3
   83430:	4912      	ldr	r1, [pc, #72]	; (8347c <__sinit+0x5c>)
   83432:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83436:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8343a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8343e:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   83442:	63e1      	str	r1, [r4, #60]	; 0x3c
   83444:	6860      	ldr	r0, [r4, #4]
   83446:	2104      	movs	r1, #4
   83448:	f7ff ffc2 	bl	833d0 <std.isra.0>
   8344c:	68a0      	ldr	r0, [r4, #8]
   8344e:	2201      	movs	r2, #1
   83450:	2109      	movs	r1, #9
   83452:	f7ff ffbd 	bl	833d0 <std.isra.0>
   83456:	68e0      	ldr	r0, [r4, #12]
   83458:	2202      	movs	r2, #2
   8345a:	2112      	movs	r1, #18
   8345c:	f7ff ffb8 	bl	833d0 <std.isra.0>
   83460:	2301      	movs	r3, #1
   83462:	4805      	ldr	r0, [pc, #20]	; (83478 <__sinit+0x58>)
   83464:	63a3      	str	r3, [r4, #56]	; 0x38
   83466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8346a:	f000 bb9b 	b.w	83ba4 <__retarget_lock_release_recursive>
   8346e:	4802      	ldr	r0, [pc, #8]	; (83478 <__sinit+0x58>)
   83470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83474:	f000 bb96 	b.w	83ba4 <__retarget_lock_release_recursive>
   83478:	20071c74 	.word	0x20071c74
   8347c:	000833c5 	.word	0x000833c5

00083480 <__sfp_lock_acquire>:
   83480:	4801      	ldr	r0, [pc, #4]	; (83488 <__sfp_lock_acquire+0x8>)
   83482:	f000 bb8d 	b.w	83ba0 <__retarget_lock_acquire_recursive>
   83486:	bf00      	nop
   83488:	20071c88 	.word	0x20071c88

0008348c <__sfp_lock_release>:
   8348c:	4801      	ldr	r0, [pc, #4]	; (83494 <__sfp_lock_release+0x8>)
   8348e:	f000 bb89 	b.w	83ba4 <__retarget_lock_release_recursive>
   83492:	bf00      	nop
   83494:	20071c88 	.word	0x20071c88

00083498 <__libc_fini_array>:
   83498:	b538      	push	{r3, r4, r5, lr}
   8349a:	4c0a      	ldr	r4, [pc, #40]	; (834c4 <__libc_fini_array+0x2c>)
   8349c:	4d0a      	ldr	r5, [pc, #40]	; (834c8 <__libc_fini_array+0x30>)
   8349e:	1b64      	subs	r4, r4, r5
   834a0:	10a4      	asrs	r4, r4, #2
   834a2:	d00a      	beq.n	834ba <__libc_fini_array+0x22>
   834a4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   834a8:	3b01      	subs	r3, #1
   834aa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   834ae:	3c01      	subs	r4, #1
   834b0:	f855 3904 	ldr.w	r3, [r5], #-4
   834b4:	4798      	blx	r3
   834b6:	2c00      	cmp	r4, #0
   834b8:	d1f9      	bne.n	834ae <__libc_fini_array+0x16>
   834ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   834be:	f001 be21 	b.w	85104 <_fini>
   834c2:	bf00      	nop
   834c4:	00085114 	.word	0x00085114
   834c8:	00085110 	.word	0x00085110

000834cc <__fputwc>:
   834cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   834d0:	b083      	sub	sp, #12
   834d2:	4607      	mov	r7, r0
   834d4:	4688      	mov	r8, r1
   834d6:	4614      	mov	r4, r2
   834d8:	f000 fb50 	bl	83b7c <__locale_mb_cur_max>
   834dc:	2801      	cmp	r0, #1
   834de:	d033      	beq.n	83548 <__fputwc+0x7c>
   834e0:	4642      	mov	r2, r8
   834e2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   834e6:	a901      	add	r1, sp, #4
   834e8:	4638      	mov	r0, r7
   834ea:	f001 fa25 	bl	84938 <_wcrtomb_r>
   834ee:	1c42      	adds	r2, r0, #1
   834f0:	4606      	mov	r6, r0
   834f2:	d022      	beq.n	8353a <__fputwc+0x6e>
   834f4:	b390      	cbz	r0, 8355c <__fputwc+0x90>
   834f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   834fa:	2500      	movs	r5, #0
   834fc:	f10d 0904 	add.w	r9, sp, #4
   83500:	e008      	b.n	83514 <__fputwc+0x48>
   83502:	6823      	ldr	r3, [r4, #0]
   83504:	1c5a      	adds	r2, r3, #1
   83506:	6022      	str	r2, [r4, #0]
   83508:	7019      	strb	r1, [r3, #0]
   8350a:	3501      	adds	r5, #1
   8350c:	42b5      	cmp	r5, r6
   8350e:	d225      	bcs.n	8355c <__fputwc+0x90>
   83510:	f815 1009 	ldrb.w	r1, [r5, r9]
   83514:	68a3      	ldr	r3, [r4, #8]
   83516:	3b01      	subs	r3, #1
   83518:	2b00      	cmp	r3, #0
   8351a:	60a3      	str	r3, [r4, #8]
   8351c:	daf1      	bge.n	83502 <__fputwc+0x36>
   8351e:	69a2      	ldr	r2, [r4, #24]
   83520:	4293      	cmp	r3, r2
   83522:	db01      	blt.n	83528 <__fputwc+0x5c>
   83524:	290a      	cmp	r1, #10
   83526:	d1ec      	bne.n	83502 <__fputwc+0x36>
   83528:	4622      	mov	r2, r4
   8352a:	4638      	mov	r0, r7
   8352c:	f001 f9ac 	bl	84888 <__swbuf_r>
   83530:	1c43      	adds	r3, r0, #1
   83532:	d1ea      	bne.n	8350a <__fputwc+0x3e>
   83534:	b003      	add	sp, #12
   83536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8353a:	89a3      	ldrh	r3, [r4, #12]
   8353c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83540:	81a3      	strh	r3, [r4, #12]
   83542:	b003      	add	sp, #12
   83544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83548:	f108 33ff 	add.w	r3, r8, #4294967295
   8354c:	2bfe      	cmp	r3, #254	; 0xfe
   8354e:	d8c7      	bhi.n	834e0 <__fputwc+0x14>
   83550:	fa5f f188 	uxtb.w	r1, r8
   83554:	4606      	mov	r6, r0
   83556:	f88d 1004 	strb.w	r1, [sp, #4]
   8355a:	e7ce      	b.n	834fa <__fputwc+0x2e>
   8355c:	4640      	mov	r0, r8
   8355e:	b003      	add	sp, #12
   83560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00083564 <_fputwc_r>:
   83564:	b530      	push	{r4, r5, lr}
   83566:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83568:	4614      	mov	r4, r2
   8356a:	f013 0f01 	tst.w	r3, #1
   8356e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83572:	b083      	sub	sp, #12
   83574:	4605      	mov	r5, r0
   83576:	b29a      	uxth	r2, r3
   83578:	d101      	bne.n	8357e <_fputwc_r+0x1a>
   8357a:	0590      	lsls	r0, r2, #22
   8357c:	d51c      	bpl.n	835b8 <_fputwc_r+0x54>
   8357e:	0490      	lsls	r0, r2, #18
   83580:	d406      	bmi.n	83590 <_fputwc_r+0x2c>
   83582:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8358c:	81a3      	strh	r3, [r4, #12]
   8358e:	6662      	str	r2, [r4, #100]	; 0x64
   83590:	4628      	mov	r0, r5
   83592:	4622      	mov	r2, r4
   83594:	f7ff ff9a 	bl	834cc <__fputwc>
   83598:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8359a:	4605      	mov	r5, r0
   8359c:	07da      	lsls	r2, r3, #31
   8359e:	d402      	bmi.n	835a6 <_fputwc_r+0x42>
   835a0:	89a3      	ldrh	r3, [r4, #12]
   835a2:	059b      	lsls	r3, r3, #22
   835a4:	d502      	bpl.n	835ac <_fputwc_r+0x48>
   835a6:	4628      	mov	r0, r5
   835a8:	b003      	add	sp, #12
   835aa:	bd30      	pop	{r4, r5, pc}
   835ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   835ae:	f000 faf9 	bl	83ba4 <__retarget_lock_release_recursive>
   835b2:	4628      	mov	r0, r5
   835b4:	b003      	add	sp, #12
   835b6:	bd30      	pop	{r4, r5, pc}
   835b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   835ba:	9101      	str	r1, [sp, #4]
   835bc:	f000 faf0 	bl	83ba0 <__retarget_lock_acquire_recursive>
   835c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   835c4:	9901      	ldr	r1, [sp, #4]
   835c6:	b29a      	uxth	r2, r3
   835c8:	e7d9      	b.n	8357e <_fputwc_r+0x1a>
   835ca:	bf00      	nop

000835cc <_malloc_trim_r>:
   835cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   835ce:	460c      	mov	r4, r1
   835d0:	4f23      	ldr	r7, [pc, #140]	; (83660 <_malloc_trim_r+0x94>)
   835d2:	4606      	mov	r6, r0
   835d4:	f000 ff40 	bl	84458 <__malloc_lock>
   835d8:	68bb      	ldr	r3, [r7, #8]
   835da:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   835de:	685d      	ldr	r5, [r3, #4]
   835e0:	310f      	adds	r1, #15
   835e2:	f025 0503 	bic.w	r5, r5, #3
   835e6:	4429      	add	r1, r5
   835e8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   835ec:	f021 010f 	bic.w	r1, r1, #15
   835f0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   835f4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   835f8:	db07      	blt.n	8360a <_malloc_trim_r+0x3e>
   835fa:	2100      	movs	r1, #0
   835fc:	4630      	mov	r0, r6
   835fe:	f001 f8ed 	bl	847dc <_sbrk_r>
   83602:	68bb      	ldr	r3, [r7, #8]
   83604:	442b      	add	r3, r5
   83606:	4298      	cmp	r0, r3
   83608:	d004      	beq.n	83614 <_malloc_trim_r+0x48>
   8360a:	4630      	mov	r0, r6
   8360c:	f000 ff2a 	bl	84464 <__malloc_unlock>
   83610:	2000      	movs	r0, #0
   83612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83614:	4261      	negs	r1, r4
   83616:	4630      	mov	r0, r6
   83618:	f001 f8e0 	bl	847dc <_sbrk_r>
   8361c:	3001      	adds	r0, #1
   8361e:	d00d      	beq.n	8363c <_malloc_trim_r+0x70>
   83620:	4b10      	ldr	r3, [pc, #64]	; (83664 <_malloc_trim_r+0x98>)
   83622:	68ba      	ldr	r2, [r7, #8]
   83624:	6819      	ldr	r1, [r3, #0]
   83626:	1b2d      	subs	r5, r5, r4
   83628:	f045 0501 	orr.w	r5, r5, #1
   8362c:	4630      	mov	r0, r6
   8362e:	1b09      	subs	r1, r1, r4
   83630:	6055      	str	r5, [r2, #4]
   83632:	6019      	str	r1, [r3, #0]
   83634:	f000 ff16 	bl	84464 <__malloc_unlock>
   83638:	2001      	movs	r0, #1
   8363a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8363c:	2100      	movs	r1, #0
   8363e:	4630      	mov	r0, r6
   83640:	f001 f8cc 	bl	847dc <_sbrk_r>
   83644:	68ba      	ldr	r2, [r7, #8]
   83646:	1a83      	subs	r3, r0, r2
   83648:	2b0f      	cmp	r3, #15
   8364a:	ddde      	ble.n	8360a <_malloc_trim_r+0x3e>
   8364c:	4c06      	ldr	r4, [pc, #24]	; (83668 <_malloc_trim_r+0x9c>)
   8364e:	4905      	ldr	r1, [pc, #20]	; (83664 <_malloc_trim_r+0x98>)
   83650:	6824      	ldr	r4, [r4, #0]
   83652:	f043 0301 	orr.w	r3, r3, #1
   83656:	1b00      	subs	r0, r0, r4
   83658:	6053      	str	r3, [r2, #4]
   8365a:	6008      	str	r0, [r1, #0]
   8365c:	e7d5      	b.n	8360a <_malloc_trim_r+0x3e>
   8365e:	bf00      	nop
   83660:	200706d0 	.word	0x200706d0
   83664:	20070c28 	.word	0x20070c28
   83668:	20070ad8 	.word	0x20070ad8

0008366c <_free_r>:
   8366c:	2900      	cmp	r1, #0
   8366e:	d044      	beq.n	836fa <_free_r+0x8e>
   83670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83674:	460d      	mov	r5, r1
   83676:	4680      	mov	r8, r0
   83678:	f000 feee 	bl	84458 <__malloc_lock>
   8367c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83680:	4969      	ldr	r1, [pc, #420]	; (83828 <_free_r+0x1bc>)
   83682:	f1a5 0408 	sub.w	r4, r5, #8
   83686:	f027 0301 	bic.w	r3, r7, #1
   8368a:	18e2      	adds	r2, r4, r3
   8368c:	688e      	ldr	r6, [r1, #8]
   8368e:	6850      	ldr	r0, [r2, #4]
   83690:	42b2      	cmp	r2, r6
   83692:	f020 0003 	bic.w	r0, r0, #3
   83696:	d05e      	beq.n	83756 <_free_r+0xea>
   83698:	07fe      	lsls	r6, r7, #31
   8369a:	6050      	str	r0, [r2, #4]
   8369c:	d40b      	bmi.n	836b6 <_free_r+0x4a>
   8369e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   836a2:	f101 0e08 	add.w	lr, r1, #8
   836a6:	1be4      	subs	r4, r4, r7
   836a8:	68a5      	ldr	r5, [r4, #8]
   836aa:	443b      	add	r3, r7
   836ac:	4575      	cmp	r5, lr
   836ae:	d06d      	beq.n	8378c <_free_r+0x120>
   836b0:	68e7      	ldr	r7, [r4, #12]
   836b2:	60ef      	str	r7, [r5, #12]
   836b4:	60bd      	str	r5, [r7, #8]
   836b6:	1815      	adds	r5, r2, r0
   836b8:	686d      	ldr	r5, [r5, #4]
   836ba:	07ed      	lsls	r5, r5, #31
   836bc:	d53e      	bpl.n	8373c <_free_r+0xd0>
   836be:	f043 0201 	orr.w	r2, r3, #1
   836c2:	6062      	str	r2, [r4, #4]
   836c4:	50e3      	str	r3, [r4, r3]
   836c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   836ca:	d217      	bcs.n	836fc <_free_r+0x90>
   836cc:	2201      	movs	r2, #1
   836ce:	08db      	lsrs	r3, r3, #3
   836d0:	1098      	asrs	r0, r3, #2
   836d2:	684d      	ldr	r5, [r1, #4]
   836d4:	4413      	add	r3, r2
   836d6:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   836da:	4082      	lsls	r2, r0
   836dc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   836e0:	432a      	orrs	r2, r5
   836e2:	3808      	subs	r0, #8
   836e4:	60e0      	str	r0, [r4, #12]
   836e6:	60a7      	str	r7, [r4, #8]
   836e8:	604a      	str	r2, [r1, #4]
   836ea:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   836ee:	60fc      	str	r4, [r7, #12]
   836f0:	4640      	mov	r0, r8
   836f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   836f6:	f000 beb5 	b.w	84464 <__malloc_unlock>
   836fa:	4770      	bx	lr
   836fc:	0a5a      	lsrs	r2, r3, #9
   836fe:	2a04      	cmp	r2, #4
   83700:	d852      	bhi.n	837a8 <_free_r+0x13c>
   83702:	099a      	lsrs	r2, r3, #6
   83704:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83708:	00ff      	lsls	r7, r7, #3
   8370a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8370e:	19c8      	adds	r0, r1, r7
   83710:	59ca      	ldr	r2, [r1, r7]
   83712:	3808      	subs	r0, #8
   83714:	4290      	cmp	r0, r2
   83716:	d04f      	beq.n	837b8 <_free_r+0x14c>
   83718:	6851      	ldr	r1, [r2, #4]
   8371a:	f021 0103 	bic.w	r1, r1, #3
   8371e:	428b      	cmp	r3, r1
   83720:	d232      	bcs.n	83788 <_free_r+0x11c>
   83722:	6892      	ldr	r2, [r2, #8]
   83724:	4290      	cmp	r0, r2
   83726:	d1f7      	bne.n	83718 <_free_r+0xac>
   83728:	68c3      	ldr	r3, [r0, #12]
   8372a:	60a0      	str	r0, [r4, #8]
   8372c:	60e3      	str	r3, [r4, #12]
   8372e:	609c      	str	r4, [r3, #8]
   83730:	60c4      	str	r4, [r0, #12]
   83732:	4640      	mov	r0, r8
   83734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83738:	f000 be94 	b.w	84464 <__malloc_unlock>
   8373c:	6895      	ldr	r5, [r2, #8]
   8373e:	4f3b      	ldr	r7, [pc, #236]	; (8382c <_free_r+0x1c0>)
   83740:	4403      	add	r3, r0
   83742:	42bd      	cmp	r5, r7
   83744:	d040      	beq.n	837c8 <_free_r+0x15c>
   83746:	68d0      	ldr	r0, [r2, #12]
   83748:	f043 0201 	orr.w	r2, r3, #1
   8374c:	60e8      	str	r0, [r5, #12]
   8374e:	6085      	str	r5, [r0, #8]
   83750:	6062      	str	r2, [r4, #4]
   83752:	50e3      	str	r3, [r4, r3]
   83754:	e7b7      	b.n	836c6 <_free_r+0x5a>
   83756:	07ff      	lsls	r7, r7, #31
   83758:	4403      	add	r3, r0
   8375a:	d407      	bmi.n	8376c <_free_r+0x100>
   8375c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83760:	1b64      	subs	r4, r4, r5
   83762:	68e2      	ldr	r2, [r4, #12]
   83764:	68a0      	ldr	r0, [r4, #8]
   83766:	442b      	add	r3, r5
   83768:	60c2      	str	r2, [r0, #12]
   8376a:	6090      	str	r0, [r2, #8]
   8376c:	4a30      	ldr	r2, [pc, #192]	; (83830 <_free_r+0x1c4>)
   8376e:	f043 0001 	orr.w	r0, r3, #1
   83772:	6812      	ldr	r2, [r2, #0]
   83774:	6060      	str	r0, [r4, #4]
   83776:	4293      	cmp	r3, r2
   83778:	608c      	str	r4, [r1, #8]
   8377a:	d3b9      	bcc.n	836f0 <_free_r+0x84>
   8377c:	4b2d      	ldr	r3, [pc, #180]	; (83834 <_free_r+0x1c8>)
   8377e:	4640      	mov	r0, r8
   83780:	6819      	ldr	r1, [r3, #0]
   83782:	f7ff ff23 	bl	835cc <_malloc_trim_r>
   83786:	e7b3      	b.n	836f0 <_free_r+0x84>
   83788:	4610      	mov	r0, r2
   8378a:	e7cd      	b.n	83728 <_free_r+0xbc>
   8378c:	1811      	adds	r1, r2, r0
   8378e:	6849      	ldr	r1, [r1, #4]
   83790:	07c9      	lsls	r1, r1, #31
   83792:	d444      	bmi.n	8381e <_free_r+0x1b2>
   83794:	6891      	ldr	r1, [r2, #8]
   83796:	4403      	add	r3, r0
   83798:	68d2      	ldr	r2, [r2, #12]
   8379a:	f043 0001 	orr.w	r0, r3, #1
   8379e:	60ca      	str	r2, [r1, #12]
   837a0:	6091      	str	r1, [r2, #8]
   837a2:	6060      	str	r0, [r4, #4]
   837a4:	50e3      	str	r3, [r4, r3]
   837a6:	e7a3      	b.n	836f0 <_free_r+0x84>
   837a8:	2a14      	cmp	r2, #20
   837aa:	d816      	bhi.n	837da <_free_r+0x16e>
   837ac:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   837b0:	00ff      	lsls	r7, r7, #3
   837b2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   837b6:	e7aa      	b.n	8370e <_free_r+0xa2>
   837b8:	2301      	movs	r3, #1
   837ba:	10aa      	asrs	r2, r5, #2
   837bc:	684d      	ldr	r5, [r1, #4]
   837be:	4093      	lsls	r3, r2
   837c0:	432b      	orrs	r3, r5
   837c2:	604b      	str	r3, [r1, #4]
   837c4:	4603      	mov	r3, r0
   837c6:	e7b0      	b.n	8372a <_free_r+0xbe>
   837c8:	f043 0201 	orr.w	r2, r3, #1
   837cc:	614c      	str	r4, [r1, #20]
   837ce:	610c      	str	r4, [r1, #16]
   837d0:	60e5      	str	r5, [r4, #12]
   837d2:	60a5      	str	r5, [r4, #8]
   837d4:	6062      	str	r2, [r4, #4]
   837d6:	50e3      	str	r3, [r4, r3]
   837d8:	e78a      	b.n	836f0 <_free_r+0x84>
   837da:	2a54      	cmp	r2, #84	; 0x54
   837dc:	d806      	bhi.n	837ec <_free_r+0x180>
   837de:	0b1a      	lsrs	r2, r3, #12
   837e0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   837e4:	00ff      	lsls	r7, r7, #3
   837e6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   837ea:	e790      	b.n	8370e <_free_r+0xa2>
   837ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   837f0:	d806      	bhi.n	83800 <_free_r+0x194>
   837f2:	0bda      	lsrs	r2, r3, #15
   837f4:	f102 0778 	add.w	r7, r2, #120	; 0x78
   837f8:	00ff      	lsls	r7, r7, #3
   837fa:	f102 0577 	add.w	r5, r2, #119	; 0x77
   837fe:	e786      	b.n	8370e <_free_r+0xa2>
   83800:	f240 5054 	movw	r0, #1364	; 0x554
   83804:	4282      	cmp	r2, r0
   83806:	d806      	bhi.n	83816 <_free_r+0x1aa>
   83808:	0c9a      	lsrs	r2, r3, #18
   8380a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8380e:	00ff      	lsls	r7, r7, #3
   83810:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83814:	e77b      	b.n	8370e <_free_r+0xa2>
   83816:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8381a:	257e      	movs	r5, #126	; 0x7e
   8381c:	e777      	b.n	8370e <_free_r+0xa2>
   8381e:	f043 0101 	orr.w	r1, r3, #1
   83822:	6061      	str	r1, [r4, #4]
   83824:	6013      	str	r3, [r2, #0]
   83826:	e763      	b.n	836f0 <_free_r+0x84>
   83828:	200706d0 	.word	0x200706d0
   8382c:	200706d8 	.word	0x200706d8
   83830:	20070adc 	.word	0x20070adc
   83834:	20070c58 	.word	0x20070c58

00083838 <__sfvwrite_r>:
   83838:	6893      	ldr	r3, [r2, #8]
   8383a:	2b00      	cmp	r3, #0
   8383c:	d071      	beq.n	83922 <__sfvwrite_r+0xea>
   8383e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83842:	898b      	ldrh	r3, [r1, #12]
   83844:	b083      	sub	sp, #12
   83846:	460c      	mov	r4, r1
   83848:	0719      	lsls	r1, r3, #28
   8384a:	9000      	str	r0, [sp, #0]
   8384c:	4616      	mov	r6, r2
   8384e:	d525      	bpl.n	8389c <__sfvwrite_r+0x64>
   83850:	6922      	ldr	r2, [r4, #16]
   83852:	b31a      	cbz	r2, 8389c <__sfvwrite_r+0x64>
   83854:	f013 0002 	ands.w	r0, r3, #2
   83858:	6835      	ldr	r5, [r6, #0]
   8385a:	d02b      	beq.n	838b4 <__sfvwrite_r+0x7c>
   8385c:	f04f 0900 	mov.w	r9, #0
   83860:	46b0      	mov	r8, r6
   83862:	464f      	mov	r7, r9
   83864:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 83b28 <__sfvwrite_r+0x2f0>
   83868:	2f00      	cmp	r7, #0
   8386a:	d055      	beq.n	83918 <__sfvwrite_r+0xe0>
   8386c:	4557      	cmp	r7, sl
   8386e:	463b      	mov	r3, r7
   83870:	464a      	mov	r2, r9
   83872:	bf28      	it	cs
   83874:	4653      	movcs	r3, sl
   83876:	69e1      	ldr	r1, [r4, #28]
   83878:	9800      	ldr	r0, [sp, #0]
   8387a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8387c:	47b0      	blx	r6
   8387e:	2800      	cmp	r0, #0
   83880:	dd56      	ble.n	83930 <__sfvwrite_r+0xf8>
   83882:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83886:	4481      	add	r9, r0
   83888:	1a1b      	subs	r3, r3, r0
   8388a:	1a3f      	subs	r7, r7, r0
   8388c:	f8c8 3008 	str.w	r3, [r8, #8]
   83890:	2b00      	cmp	r3, #0
   83892:	d1e9      	bne.n	83868 <__sfvwrite_r+0x30>
   83894:	2000      	movs	r0, #0
   83896:	b003      	add	sp, #12
   83898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8389c:	4621      	mov	r1, r4
   8389e:	9800      	ldr	r0, [sp, #0]
   838a0:	f7ff fc56 	bl	83150 <__swsetup_r>
   838a4:	2800      	cmp	r0, #0
   838a6:	f040 8135 	bne.w	83b14 <__sfvwrite_r+0x2dc>
   838aa:	89a3      	ldrh	r3, [r4, #12]
   838ac:	6835      	ldr	r5, [r6, #0]
   838ae:	f013 0002 	ands.w	r0, r3, #2
   838b2:	d1d3      	bne.n	8385c <__sfvwrite_r+0x24>
   838b4:	f013 0901 	ands.w	r9, r3, #1
   838b8:	d144      	bne.n	83944 <__sfvwrite_r+0x10c>
   838ba:	464f      	mov	r7, r9
   838bc:	9601      	str	r6, [sp, #4]
   838be:	b337      	cbz	r7, 8390e <__sfvwrite_r+0xd6>
   838c0:	059a      	lsls	r2, r3, #22
   838c2:	f8d4 8008 	ldr.w	r8, [r4, #8]
   838c6:	f140 8085 	bpl.w	839d4 <__sfvwrite_r+0x19c>
   838ca:	4547      	cmp	r7, r8
   838cc:	46c3      	mov	fp, r8
   838ce:	f0c0 80ad 	bcc.w	83a2c <__sfvwrite_r+0x1f4>
   838d2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   838d6:	f040 80ae 	bne.w	83a36 <__sfvwrite_r+0x1fe>
   838da:	46ba      	mov	sl, r7
   838dc:	6820      	ldr	r0, [r4, #0]
   838de:	465a      	mov	r2, fp
   838e0:	4649      	mov	r1, r9
   838e2:	f000 fd55 	bl	84390 <memmove>
   838e6:	68a2      	ldr	r2, [r4, #8]
   838e8:	6823      	ldr	r3, [r4, #0]
   838ea:	eba2 0208 	sub.w	r2, r2, r8
   838ee:	445b      	add	r3, fp
   838f0:	60a2      	str	r2, [r4, #8]
   838f2:	6023      	str	r3, [r4, #0]
   838f4:	9a01      	ldr	r2, [sp, #4]
   838f6:	44d1      	add	r9, sl
   838f8:	6893      	ldr	r3, [r2, #8]
   838fa:	eba7 070a 	sub.w	r7, r7, sl
   838fe:	eba3 030a 	sub.w	r3, r3, sl
   83902:	6093      	str	r3, [r2, #8]
   83904:	2b00      	cmp	r3, #0
   83906:	d0c5      	beq.n	83894 <__sfvwrite_r+0x5c>
   83908:	89a3      	ldrh	r3, [r4, #12]
   8390a:	2f00      	cmp	r7, #0
   8390c:	d1d8      	bne.n	838c0 <__sfvwrite_r+0x88>
   8390e:	f8d5 9000 	ldr.w	r9, [r5]
   83912:	686f      	ldr	r7, [r5, #4]
   83914:	3508      	adds	r5, #8
   83916:	e7d2      	b.n	838be <__sfvwrite_r+0x86>
   83918:	f8d5 9000 	ldr.w	r9, [r5]
   8391c:	686f      	ldr	r7, [r5, #4]
   8391e:	3508      	adds	r5, #8
   83920:	e7a2      	b.n	83868 <__sfvwrite_r+0x30>
   83922:	2000      	movs	r0, #0
   83924:	4770      	bx	lr
   83926:	4621      	mov	r1, r4
   83928:	9800      	ldr	r0, [sp, #0]
   8392a:	f7ff fd21 	bl	83370 <_fflush_r>
   8392e:	b378      	cbz	r0, 83990 <__sfvwrite_r+0x158>
   83930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83934:	f04f 30ff 	mov.w	r0, #4294967295
   83938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8393c:	81a3      	strh	r3, [r4, #12]
   8393e:	b003      	add	sp, #12
   83940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83944:	4681      	mov	r9, r0
   83946:	4633      	mov	r3, r6
   83948:	464e      	mov	r6, r9
   8394a:	46a8      	mov	r8, r5
   8394c:	469a      	mov	sl, r3
   8394e:	464d      	mov	r5, r9
   83950:	b356      	cbz	r6, 839a8 <__sfvwrite_r+0x170>
   83952:	2800      	cmp	r0, #0
   83954:	d032      	beq.n	839bc <__sfvwrite_r+0x184>
   83956:	45b1      	cmp	r9, r6
   83958:	46cb      	mov	fp, r9
   8395a:	bf28      	it	cs
   8395c:	46b3      	movcs	fp, r6
   8395e:	6820      	ldr	r0, [r4, #0]
   83960:	6923      	ldr	r3, [r4, #16]
   83962:	465f      	mov	r7, fp
   83964:	4298      	cmp	r0, r3
   83966:	6962      	ldr	r2, [r4, #20]
   83968:	d904      	bls.n	83974 <__sfvwrite_r+0x13c>
   8396a:	68a3      	ldr	r3, [r4, #8]
   8396c:	4413      	add	r3, r2
   8396e:	459b      	cmp	fp, r3
   83970:	f300 80a8 	bgt.w	83ac4 <__sfvwrite_r+0x28c>
   83974:	4593      	cmp	fp, r2
   83976:	db4d      	blt.n	83a14 <__sfvwrite_r+0x1dc>
   83978:	4613      	mov	r3, r2
   8397a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8397c:	462a      	mov	r2, r5
   8397e:	69e1      	ldr	r1, [r4, #28]
   83980:	9800      	ldr	r0, [sp, #0]
   83982:	47b8      	blx	r7
   83984:	1e07      	subs	r7, r0, #0
   83986:	ddd3      	ble.n	83930 <__sfvwrite_r+0xf8>
   83988:	ebb9 0907 	subs.w	r9, r9, r7
   8398c:	d0cb      	beq.n	83926 <__sfvwrite_r+0xee>
   8398e:	2001      	movs	r0, #1
   83990:	f8da 3008 	ldr.w	r3, [sl, #8]
   83994:	443d      	add	r5, r7
   83996:	1bdb      	subs	r3, r3, r7
   83998:	1bf6      	subs	r6, r6, r7
   8399a:	f8ca 3008 	str.w	r3, [sl, #8]
   8399e:	2b00      	cmp	r3, #0
   839a0:	f43f af78 	beq.w	83894 <__sfvwrite_r+0x5c>
   839a4:	2e00      	cmp	r6, #0
   839a6:	d1d4      	bne.n	83952 <__sfvwrite_r+0x11a>
   839a8:	f108 0308 	add.w	r3, r8, #8
   839ac:	f853 6c04 	ldr.w	r6, [r3, #-4]
   839b0:	4698      	mov	r8, r3
   839b2:	f853 5c08 	ldr.w	r5, [r3, #-8]
   839b6:	3308      	adds	r3, #8
   839b8:	2e00      	cmp	r6, #0
   839ba:	d0f7      	beq.n	839ac <__sfvwrite_r+0x174>
   839bc:	4632      	mov	r2, r6
   839be:	210a      	movs	r1, #10
   839c0:	4628      	mov	r0, r5
   839c2:	f000 fc29 	bl	84218 <memchr>
   839c6:	2800      	cmp	r0, #0
   839c8:	f000 80a1 	beq.w	83b0e <__sfvwrite_r+0x2d6>
   839cc:	3001      	adds	r0, #1
   839ce:	eba0 0905 	sub.w	r9, r0, r5
   839d2:	e7c0      	b.n	83956 <__sfvwrite_r+0x11e>
   839d4:	6820      	ldr	r0, [r4, #0]
   839d6:	6923      	ldr	r3, [r4, #16]
   839d8:	4298      	cmp	r0, r3
   839da:	d802      	bhi.n	839e2 <__sfvwrite_r+0x1aa>
   839dc:	6963      	ldr	r3, [r4, #20]
   839de:	429f      	cmp	r7, r3
   839e0:	d25d      	bcs.n	83a9e <__sfvwrite_r+0x266>
   839e2:	45b8      	cmp	r8, r7
   839e4:	bf28      	it	cs
   839e6:	46b8      	movcs	r8, r7
   839e8:	4649      	mov	r1, r9
   839ea:	4642      	mov	r2, r8
   839ec:	f000 fcd0 	bl	84390 <memmove>
   839f0:	68a3      	ldr	r3, [r4, #8]
   839f2:	6822      	ldr	r2, [r4, #0]
   839f4:	eba3 0308 	sub.w	r3, r3, r8
   839f8:	4442      	add	r2, r8
   839fa:	60a3      	str	r3, [r4, #8]
   839fc:	6022      	str	r2, [r4, #0]
   839fe:	b10b      	cbz	r3, 83a04 <__sfvwrite_r+0x1cc>
   83a00:	46c2      	mov	sl, r8
   83a02:	e777      	b.n	838f4 <__sfvwrite_r+0xbc>
   83a04:	4621      	mov	r1, r4
   83a06:	9800      	ldr	r0, [sp, #0]
   83a08:	f7ff fcb2 	bl	83370 <_fflush_r>
   83a0c:	2800      	cmp	r0, #0
   83a0e:	d18f      	bne.n	83930 <__sfvwrite_r+0xf8>
   83a10:	46c2      	mov	sl, r8
   83a12:	e76f      	b.n	838f4 <__sfvwrite_r+0xbc>
   83a14:	465a      	mov	r2, fp
   83a16:	4629      	mov	r1, r5
   83a18:	f000 fcba 	bl	84390 <memmove>
   83a1c:	68a2      	ldr	r2, [r4, #8]
   83a1e:	6823      	ldr	r3, [r4, #0]
   83a20:	eba2 020b 	sub.w	r2, r2, fp
   83a24:	445b      	add	r3, fp
   83a26:	60a2      	str	r2, [r4, #8]
   83a28:	6023      	str	r3, [r4, #0]
   83a2a:	e7ad      	b.n	83988 <__sfvwrite_r+0x150>
   83a2c:	46b8      	mov	r8, r7
   83a2e:	46ba      	mov	sl, r7
   83a30:	46bb      	mov	fp, r7
   83a32:	6820      	ldr	r0, [r4, #0]
   83a34:	e753      	b.n	838de <__sfvwrite_r+0xa6>
   83a36:	6962      	ldr	r2, [r4, #20]
   83a38:	6820      	ldr	r0, [r4, #0]
   83a3a:	6921      	ldr	r1, [r4, #16]
   83a3c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83a40:	eba0 0a01 	sub.w	sl, r0, r1
   83a44:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   83a48:	f10a 0001 	add.w	r0, sl, #1
   83a4c:	ea4f 0868 	mov.w	r8, r8, asr #1
   83a50:	4438      	add	r0, r7
   83a52:	4540      	cmp	r0, r8
   83a54:	4642      	mov	r2, r8
   83a56:	bf84      	itt	hi
   83a58:	4680      	movhi	r8, r0
   83a5a:	4642      	movhi	r2, r8
   83a5c:	055b      	lsls	r3, r3, #21
   83a5e:	d544      	bpl.n	83aea <__sfvwrite_r+0x2b2>
   83a60:	4611      	mov	r1, r2
   83a62:	9800      	ldr	r0, [sp, #0]
   83a64:	f000 f920 	bl	83ca8 <_malloc_r>
   83a68:	4683      	mov	fp, r0
   83a6a:	2800      	cmp	r0, #0
   83a6c:	d055      	beq.n	83b1a <__sfvwrite_r+0x2e2>
   83a6e:	4652      	mov	r2, sl
   83a70:	6921      	ldr	r1, [r4, #16]
   83a72:	f000 fc17 	bl	842a4 <memcpy>
   83a76:	89a3      	ldrh	r3, [r4, #12]
   83a78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83a80:	81a3      	strh	r3, [r4, #12]
   83a82:	eb0b 000a 	add.w	r0, fp, sl
   83a86:	eba8 030a 	sub.w	r3, r8, sl
   83a8a:	f8c4 b010 	str.w	fp, [r4, #16]
   83a8e:	f8c4 8014 	str.w	r8, [r4, #20]
   83a92:	6020      	str	r0, [r4, #0]
   83a94:	60a3      	str	r3, [r4, #8]
   83a96:	46b8      	mov	r8, r7
   83a98:	46ba      	mov	sl, r7
   83a9a:	46bb      	mov	fp, r7
   83a9c:	e71f      	b.n	838de <__sfvwrite_r+0xa6>
   83a9e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83aa2:	42ba      	cmp	r2, r7
   83aa4:	bf28      	it	cs
   83aa6:	463a      	movcs	r2, r7
   83aa8:	fb92 f2f3 	sdiv	r2, r2, r3
   83aac:	69e1      	ldr	r1, [r4, #28]
   83aae:	fb03 f302 	mul.w	r3, r3, r2
   83ab2:	9800      	ldr	r0, [sp, #0]
   83ab4:	464a      	mov	r2, r9
   83ab6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83ab8:	47b0      	blx	r6
   83aba:	f1b0 0a00 	subs.w	sl, r0, #0
   83abe:	f73f af19 	bgt.w	838f4 <__sfvwrite_r+0xbc>
   83ac2:	e735      	b.n	83930 <__sfvwrite_r+0xf8>
   83ac4:	461a      	mov	r2, r3
   83ac6:	4629      	mov	r1, r5
   83ac8:	9301      	str	r3, [sp, #4]
   83aca:	f000 fc61 	bl	84390 <memmove>
   83ace:	6822      	ldr	r2, [r4, #0]
   83ad0:	9b01      	ldr	r3, [sp, #4]
   83ad2:	4621      	mov	r1, r4
   83ad4:	441a      	add	r2, r3
   83ad6:	6022      	str	r2, [r4, #0]
   83ad8:	9800      	ldr	r0, [sp, #0]
   83ada:	f7ff fc49 	bl	83370 <_fflush_r>
   83ade:	9b01      	ldr	r3, [sp, #4]
   83ae0:	2800      	cmp	r0, #0
   83ae2:	f47f af25 	bne.w	83930 <__sfvwrite_r+0xf8>
   83ae6:	461f      	mov	r7, r3
   83ae8:	e74e      	b.n	83988 <__sfvwrite_r+0x150>
   83aea:	9800      	ldr	r0, [sp, #0]
   83aec:	f000 fcc0 	bl	84470 <_realloc_r>
   83af0:	4683      	mov	fp, r0
   83af2:	2800      	cmp	r0, #0
   83af4:	d1c5      	bne.n	83a82 <__sfvwrite_r+0x24a>
   83af6:	9d00      	ldr	r5, [sp, #0]
   83af8:	6921      	ldr	r1, [r4, #16]
   83afa:	4628      	mov	r0, r5
   83afc:	f7ff fdb6 	bl	8366c <_free_r>
   83b00:	220c      	movs	r2, #12
   83b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b06:	602a      	str	r2, [r5, #0]
   83b08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83b0c:	e712      	b.n	83934 <__sfvwrite_r+0xfc>
   83b0e:	f106 0901 	add.w	r9, r6, #1
   83b12:	e720      	b.n	83956 <__sfvwrite_r+0x11e>
   83b14:	f04f 30ff 	mov.w	r0, #4294967295
   83b18:	e6bd      	b.n	83896 <__sfvwrite_r+0x5e>
   83b1a:	220c      	movs	r2, #12
   83b1c:	9900      	ldr	r1, [sp, #0]
   83b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b22:	600a      	str	r2, [r1, #0]
   83b24:	e706      	b.n	83934 <__sfvwrite_r+0xfc>
   83b26:	bf00      	nop
   83b28:	7ffffc00 	.word	0x7ffffc00

00083b2c <_fwalk_reent>:
   83b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83b30:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83b34:	d01e      	beq.n	83b74 <_fwalk_reent+0x48>
   83b36:	4688      	mov	r8, r1
   83b38:	4607      	mov	r7, r0
   83b3a:	f04f 0900 	mov.w	r9, #0
   83b3e:	6875      	ldr	r5, [r6, #4]
   83b40:	68b4      	ldr	r4, [r6, #8]
   83b42:	3d01      	subs	r5, #1
   83b44:	d410      	bmi.n	83b68 <_fwalk_reent+0x3c>
   83b46:	89a3      	ldrh	r3, [r4, #12]
   83b48:	3d01      	subs	r5, #1
   83b4a:	2b01      	cmp	r3, #1
   83b4c:	d908      	bls.n	83b60 <_fwalk_reent+0x34>
   83b4e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83b52:	3301      	adds	r3, #1
   83b54:	d004      	beq.n	83b60 <_fwalk_reent+0x34>
   83b56:	4621      	mov	r1, r4
   83b58:	4638      	mov	r0, r7
   83b5a:	47c0      	blx	r8
   83b5c:	ea49 0900 	orr.w	r9, r9, r0
   83b60:	1c6b      	adds	r3, r5, #1
   83b62:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83b66:	d1ee      	bne.n	83b46 <_fwalk_reent+0x1a>
   83b68:	6836      	ldr	r6, [r6, #0]
   83b6a:	2e00      	cmp	r6, #0
   83b6c:	d1e7      	bne.n	83b3e <_fwalk_reent+0x12>
   83b6e:	4648      	mov	r0, r9
   83b70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83b74:	46b1      	mov	r9, r6
   83b76:	4648      	mov	r0, r9
   83b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083b7c <__locale_mb_cur_max>:
   83b7c:	4b04      	ldr	r3, [pc, #16]	; (83b90 <__locale_mb_cur_max+0x14>)
   83b7e:	4a05      	ldr	r2, [pc, #20]	; (83b94 <__locale_mb_cur_max+0x18>)
   83b80:	681b      	ldr	r3, [r3, #0]
   83b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   83b84:	2b00      	cmp	r3, #0
   83b86:	bf08      	it	eq
   83b88:	4613      	moveq	r3, r2
   83b8a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   83b8e:	4770      	bx	lr
   83b90:	20070134 	.word	0x20070134
   83b94:	20070564 	.word	0x20070564

00083b98 <__retarget_lock_init_recursive>:
   83b98:	4770      	bx	lr
   83b9a:	bf00      	nop

00083b9c <__retarget_lock_close_recursive>:
   83b9c:	4770      	bx	lr
   83b9e:	bf00      	nop

00083ba0 <__retarget_lock_acquire_recursive>:
   83ba0:	4770      	bx	lr
   83ba2:	bf00      	nop

00083ba4 <__retarget_lock_release_recursive>:
   83ba4:	4770      	bx	lr
   83ba6:	bf00      	nop

00083ba8 <__swhatbuf_r>:
   83ba8:	b570      	push	{r4, r5, r6, lr}
   83baa:	460c      	mov	r4, r1
   83bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83bb0:	b090      	sub	sp, #64	; 0x40
   83bb2:	2900      	cmp	r1, #0
   83bb4:	4615      	mov	r5, r2
   83bb6:	461e      	mov	r6, r3
   83bb8:	db14      	blt.n	83be4 <__swhatbuf_r+0x3c>
   83bba:	aa01      	add	r2, sp, #4
   83bbc:	f000 ffde 	bl	84b7c <_fstat_r>
   83bc0:	2800      	cmp	r0, #0
   83bc2:	db0f      	blt.n	83be4 <__swhatbuf_r+0x3c>
   83bc4:	9a02      	ldr	r2, [sp, #8]
   83bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83bca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   83bce:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   83bd2:	fab2 f282 	clz	r2, r2
   83bd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83bda:	0952      	lsrs	r2, r2, #5
   83bdc:	6032      	str	r2, [r6, #0]
   83bde:	602b      	str	r3, [r5, #0]
   83be0:	b010      	add	sp, #64	; 0x40
   83be2:	bd70      	pop	{r4, r5, r6, pc}
   83be4:	2300      	movs	r3, #0
   83be6:	89a2      	ldrh	r2, [r4, #12]
   83be8:	6033      	str	r3, [r6, #0]
   83bea:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   83bee:	d004      	beq.n	83bfa <__swhatbuf_r+0x52>
   83bf0:	2240      	movs	r2, #64	; 0x40
   83bf2:	4618      	mov	r0, r3
   83bf4:	602a      	str	r2, [r5, #0]
   83bf6:	b010      	add	sp, #64	; 0x40
   83bf8:	bd70      	pop	{r4, r5, r6, pc}
   83bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83bfe:	602b      	str	r3, [r5, #0]
   83c00:	b010      	add	sp, #64	; 0x40
   83c02:	bd70      	pop	{r4, r5, r6, pc}

00083c04 <__smakebuf_r>:
   83c04:	898a      	ldrh	r2, [r1, #12]
   83c06:	460b      	mov	r3, r1
   83c08:	0792      	lsls	r2, r2, #30
   83c0a:	d506      	bpl.n	83c1a <__smakebuf_r+0x16>
   83c0c:	2101      	movs	r1, #1
   83c0e:	f103 0243 	add.w	r2, r3, #67	; 0x43
   83c12:	6159      	str	r1, [r3, #20]
   83c14:	601a      	str	r2, [r3, #0]
   83c16:	611a      	str	r2, [r3, #16]
   83c18:	4770      	bx	lr
   83c1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   83c1c:	b083      	sub	sp, #12
   83c1e:	ab01      	add	r3, sp, #4
   83c20:	466a      	mov	r2, sp
   83c22:	460c      	mov	r4, r1
   83c24:	4606      	mov	r6, r0
   83c26:	f7ff ffbf 	bl	83ba8 <__swhatbuf_r>
   83c2a:	9900      	ldr	r1, [sp, #0]
   83c2c:	4605      	mov	r5, r0
   83c2e:	4630      	mov	r0, r6
   83c30:	f000 f83a 	bl	83ca8 <_malloc_r>
   83c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c38:	b1d8      	cbz	r0, 83c72 <__smakebuf_r+0x6e>
   83c3a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   83c3e:	4f15      	ldr	r7, [pc, #84]	; (83c94 <__smakebuf_r+0x90>)
   83c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83c44:	63f7      	str	r7, [r6, #60]	; 0x3c
   83c46:	81a3      	strh	r3, [r4, #12]
   83c48:	6020      	str	r0, [r4, #0]
   83c4a:	6120      	str	r0, [r4, #16]
   83c4c:	6161      	str	r1, [r4, #20]
   83c4e:	b91a      	cbnz	r2, 83c58 <__smakebuf_r+0x54>
   83c50:	432b      	orrs	r3, r5
   83c52:	81a3      	strh	r3, [r4, #12]
   83c54:	b003      	add	sp, #12
   83c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c58:	4630      	mov	r0, r6
   83c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83c5e:	f000 ffa1 	bl	84ba4 <_isatty_r>
   83c62:	b1a0      	cbz	r0, 83c8e <__smakebuf_r+0x8a>
   83c64:	89a3      	ldrh	r3, [r4, #12]
   83c66:	f023 0303 	bic.w	r3, r3, #3
   83c6a:	f043 0301 	orr.w	r3, r3, #1
   83c6e:	b21b      	sxth	r3, r3
   83c70:	e7ee      	b.n	83c50 <__smakebuf_r+0x4c>
   83c72:	059a      	lsls	r2, r3, #22
   83c74:	d4ee      	bmi.n	83c54 <__smakebuf_r+0x50>
   83c76:	2101      	movs	r1, #1
   83c78:	f023 0303 	bic.w	r3, r3, #3
   83c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83c80:	f043 0302 	orr.w	r3, r3, #2
   83c84:	81a3      	strh	r3, [r4, #12]
   83c86:	6161      	str	r1, [r4, #20]
   83c88:	6022      	str	r2, [r4, #0]
   83c8a:	6122      	str	r2, [r4, #16]
   83c8c:	e7e2      	b.n	83c54 <__smakebuf_r+0x50>
   83c8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c92:	e7dd      	b.n	83c50 <__smakebuf_r+0x4c>
   83c94:	000833c5 	.word	0x000833c5

00083c98 <malloc>:
   83c98:	4b02      	ldr	r3, [pc, #8]	; (83ca4 <malloc+0xc>)
   83c9a:	4601      	mov	r1, r0
   83c9c:	6818      	ldr	r0, [r3, #0]
   83c9e:	f000 b803 	b.w	83ca8 <_malloc_r>
   83ca2:	bf00      	nop
   83ca4:	20070134 	.word	0x20070134

00083ca8 <_malloc_r>:
   83ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83cac:	f101 060b 	add.w	r6, r1, #11
   83cb0:	2e16      	cmp	r6, #22
   83cb2:	b083      	sub	sp, #12
   83cb4:	4605      	mov	r5, r0
   83cb6:	f240 809e 	bls.w	83df6 <_malloc_r+0x14e>
   83cba:	f036 0607 	bics.w	r6, r6, #7
   83cbe:	f100 80bd 	bmi.w	83e3c <_malloc_r+0x194>
   83cc2:	42b1      	cmp	r1, r6
   83cc4:	f200 80ba 	bhi.w	83e3c <_malloc_r+0x194>
   83cc8:	f000 fbc6 	bl	84458 <__malloc_lock>
   83ccc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   83cd0:	f0c0 8285 	bcc.w	841de <_malloc_r+0x536>
   83cd4:	0a73      	lsrs	r3, r6, #9
   83cd6:	f000 80b8 	beq.w	83e4a <_malloc_r+0x1a2>
   83cda:	2b04      	cmp	r3, #4
   83cdc:	f200 816c 	bhi.w	83fb8 <_malloc_r+0x310>
   83ce0:	09b3      	lsrs	r3, r6, #6
   83ce2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   83ce6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   83cea:	00c1      	lsls	r1, r0, #3
   83cec:	4fb8      	ldr	r7, [pc, #736]	; (83fd0 <_malloc_r+0x328>)
   83cee:	4439      	add	r1, r7
   83cf0:	684c      	ldr	r4, [r1, #4]
   83cf2:	3908      	subs	r1, #8
   83cf4:	42a1      	cmp	r1, r4
   83cf6:	d106      	bne.n	83d06 <_malloc_r+0x5e>
   83cf8:	e00c      	b.n	83d14 <_malloc_r+0x6c>
   83cfa:	2a00      	cmp	r2, #0
   83cfc:	f280 80ab 	bge.w	83e56 <_malloc_r+0x1ae>
   83d00:	68e4      	ldr	r4, [r4, #12]
   83d02:	42a1      	cmp	r1, r4
   83d04:	d006      	beq.n	83d14 <_malloc_r+0x6c>
   83d06:	6863      	ldr	r3, [r4, #4]
   83d08:	f023 0303 	bic.w	r3, r3, #3
   83d0c:	1b9a      	subs	r2, r3, r6
   83d0e:	2a0f      	cmp	r2, #15
   83d10:	ddf3      	ble.n	83cfa <_malloc_r+0x52>
   83d12:	4670      	mov	r0, lr
   83d14:	693c      	ldr	r4, [r7, #16]
   83d16:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83fe4 <_malloc_r+0x33c>
   83d1a:	4574      	cmp	r4, lr
   83d1c:	f000 819e 	beq.w	8405c <_malloc_r+0x3b4>
   83d20:	6863      	ldr	r3, [r4, #4]
   83d22:	f023 0303 	bic.w	r3, r3, #3
   83d26:	1b9a      	subs	r2, r3, r6
   83d28:	2a0f      	cmp	r2, #15
   83d2a:	f300 8183 	bgt.w	84034 <_malloc_r+0x38c>
   83d2e:	2a00      	cmp	r2, #0
   83d30:	f8c7 e014 	str.w	lr, [r7, #20]
   83d34:	f8c7 e010 	str.w	lr, [r7, #16]
   83d38:	f280 8091 	bge.w	83e5e <_malloc_r+0x1b6>
   83d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83d40:	f080 8154 	bcs.w	83fec <_malloc_r+0x344>
   83d44:	2201      	movs	r2, #1
   83d46:	08db      	lsrs	r3, r3, #3
   83d48:	6879      	ldr	r1, [r7, #4]
   83d4a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83d4e:	4413      	add	r3, r2
   83d50:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   83d54:	fa02 f20c 	lsl.w	r2, r2, ip
   83d58:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83d5c:	430a      	orrs	r2, r1
   83d5e:	f1ac 0108 	sub.w	r1, ip, #8
   83d62:	60e1      	str	r1, [r4, #12]
   83d64:	f8c4 8008 	str.w	r8, [r4, #8]
   83d68:	607a      	str	r2, [r7, #4]
   83d6a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83d6e:	f8c8 400c 	str.w	r4, [r8, #12]
   83d72:	2401      	movs	r4, #1
   83d74:	1083      	asrs	r3, r0, #2
   83d76:	409c      	lsls	r4, r3
   83d78:	4294      	cmp	r4, r2
   83d7a:	d87d      	bhi.n	83e78 <_malloc_r+0x1d0>
   83d7c:	4214      	tst	r4, r2
   83d7e:	d106      	bne.n	83d8e <_malloc_r+0xe6>
   83d80:	f020 0003 	bic.w	r0, r0, #3
   83d84:	0064      	lsls	r4, r4, #1
   83d86:	4214      	tst	r4, r2
   83d88:	f100 0004 	add.w	r0, r0, #4
   83d8c:	d0fa      	beq.n	83d84 <_malloc_r+0xdc>
   83d8e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   83d92:	46cc      	mov	ip, r9
   83d94:	4680      	mov	r8, r0
   83d96:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83d9a:	459c      	cmp	ip, r3
   83d9c:	d107      	bne.n	83dae <_malloc_r+0x106>
   83d9e:	e15f      	b.n	84060 <_malloc_r+0x3b8>
   83da0:	2a00      	cmp	r2, #0
   83da2:	f280 816d 	bge.w	84080 <_malloc_r+0x3d8>
   83da6:	68db      	ldr	r3, [r3, #12]
   83da8:	459c      	cmp	ip, r3
   83daa:	f000 8159 	beq.w	84060 <_malloc_r+0x3b8>
   83dae:	6859      	ldr	r1, [r3, #4]
   83db0:	f021 0103 	bic.w	r1, r1, #3
   83db4:	1b8a      	subs	r2, r1, r6
   83db6:	2a0f      	cmp	r2, #15
   83db8:	ddf2      	ble.n	83da0 <_malloc_r+0xf8>
   83dba:	68dc      	ldr	r4, [r3, #12]
   83dbc:	f8d3 c008 	ldr.w	ip, [r3, #8]
   83dc0:	f046 0801 	orr.w	r8, r6, #1
   83dc4:	4628      	mov	r0, r5
   83dc6:	441e      	add	r6, r3
   83dc8:	f042 0501 	orr.w	r5, r2, #1
   83dcc:	f8c3 8004 	str.w	r8, [r3, #4]
   83dd0:	f8cc 400c 	str.w	r4, [ip, #12]
   83dd4:	f8c4 c008 	str.w	ip, [r4, #8]
   83dd8:	617e      	str	r6, [r7, #20]
   83dda:	613e      	str	r6, [r7, #16]
   83ddc:	f8c6 e00c 	str.w	lr, [r6, #12]
   83de0:	f8c6 e008 	str.w	lr, [r6, #8]
   83de4:	6075      	str	r5, [r6, #4]
   83de6:	505a      	str	r2, [r3, r1]
   83de8:	9300      	str	r3, [sp, #0]
   83dea:	f000 fb3b 	bl	84464 <__malloc_unlock>
   83dee:	9b00      	ldr	r3, [sp, #0]
   83df0:	f103 0408 	add.w	r4, r3, #8
   83df4:	e01e      	b.n	83e34 <_malloc_r+0x18c>
   83df6:	2910      	cmp	r1, #16
   83df8:	d820      	bhi.n	83e3c <_malloc_r+0x194>
   83dfa:	f000 fb2d 	bl	84458 <__malloc_lock>
   83dfe:	2610      	movs	r6, #16
   83e00:	2318      	movs	r3, #24
   83e02:	2002      	movs	r0, #2
   83e04:	4f72      	ldr	r7, [pc, #456]	; (83fd0 <_malloc_r+0x328>)
   83e06:	443b      	add	r3, r7
   83e08:	685c      	ldr	r4, [r3, #4]
   83e0a:	f1a3 0208 	sub.w	r2, r3, #8
   83e0e:	4294      	cmp	r4, r2
   83e10:	f000 812f 	beq.w	84072 <_malloc_r+0x3ca>
   83e14:	6863      	ldr	r3, [r4, #4]
   83e16:	68e1      	ldr	r1, [r4, #12]
   83e18:	f023 0303 	bic.w	r3, r3, #3
   83e1c:	4423      	add	r3, r4
   83e1e:	685a      	ldr	r2, [r3, #4]
   83e20:	68a6      	ldr	r6, [r4, #8]
   83e22:	f042 0201 	orr.w	r2, r2, #1
   83e26:	60f1      	str	r1, [r6, #12]
   83e28:	4628      	mov	r0, r5
   83e2a:	608e      	str	r6, [r1, #8]
   83e2c:	605a      	str	r2, [r3, #4]
   83e2e:	f000 fb19 	bl	84464 <__malloc_unlock>
   83e32:	3408      	adds	r4, #8
   83e34:	4620      	mov	r0, r4
   83e36:	b003      	add	sp, #12
   83e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e3c:	2400      	movs	r4, #0
   83e3e:	230c      	movs	r3, #12
   83e40:	4620      	mov	r0, r4
   83e42:	602b      	str	r3, [r5, #0]
   83e44:	b003      	add	sp, #12
   83e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e4a:	2040      	movs	r0, #64	; 0x40
   83e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
   83e50:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   83e54:	e74a      	b.n	83cec <_malloc_r+0x44>
   83e56:	4423      	add	r3, r4
   83e58:	685a      	ldr	r2, [r3, #4]
   83e5a:	68e1      	ldr	r1, [r4, #12]
   83e5c:	e7e0      	b.n	83e20 <_malloc_r+0x178>
   83e5e:	4423      	add	r3, r4
   83e60:	685a      	ldr	r2, [r3, #4]
   83e62:	4628      	mov	r0, r5
   83e64:	f042 0201 	orr.w	r2, r2, #1
   83e68:	605a      	str	r2, [r3, #4]
   83e6a:	3408      	adds	r4, #8
   83e6c:	f000 fafa 	bl	84464 <__malloc_unlock>
   83e70:	4620      	mov	r0, r4
   83e72:	b003      	add	sp, #12
   83e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e78:	68bc      	ldr	r4, [r7, #8]
   83e7a:	6863      	ldr	r3, [r4, #4]
   83e7c:	f023 0803 	bic.w	r8, r3, #3
   83e80:	45b0      	cmp	r8, r6
   83e82:	d304      	bcc.n	83e8e <_malloc_r+0x1e6>
   83e84:	eba8 0306 	sub.w	r3, r8, r6
   83e88:	2b0f      	cmp	r3, #15
   83e8a:	f300 8085 	bgt.w	83f98 <_malloc_r+0x2f0>
   83e8e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83fe8 <_malloc_r+0x340>
   83e92:	4b50      	ldr	r3, [pc, #320]	; (83fd4 <_malloc_r+0x32c>)
   83e94:	f8d9 2000 	ldr.w	r2, [r9]
   83e98:	681b      	ldr	r3, [r3, #0]
   83e9a:	3201      	adds	r2, #1
   83e9c:	4433      	add	r3, r6
   83e9e:	eb04 0a08 	add.w	sl, r4, r8
   83ea2:	f000 8154 	beq.w	8414e <_malloc_r+0x4a6>
   83ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83eaa:	330f      	adds	r3, #15
   83eac:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83eb0:	f02b 0b0f 	bic.w	fp, fp, #15
   83eb4:	4659      	mov	r1, fp
   83eb6:	4628      	mov	r0, r5
   83eb8:	f000 fc90 	bl	847dc <_sbrk_r>
   83ebc:	1c41      	adds	r1, r0, #1
   83ebe:	4602      	mov	r2, r0
   83ec0:	f000 80fb 	beq.w	840ba <_malloc_r+0x412>
   83ec4:	4582      	cmp	sl, r0
   83ec6:	f200 80f6 	bhi.w	840b6 <_malloc_r+0x40e>
   83eca:	4b43      	ldr	r3, [pc, #268]	; (83fd8 <_malloc_r+0x330>)
   83ecc:	6819      	ldr	r1, [r3, #0]
   83ece:	4459      	add	r1, fp
   83ed0:	6019      	str	r1, [r3, #0]
   83ed2:	f000 814c 	beq.w	8416e <_malloc_r+0x4c6>
   83ed6:	f8d9 0000 	ldr.w	r0, [r9]
   83eda:	3001      	adds	r0, #1
   83edc:	bf1b      	ittet	ne
   83ede:	eba2 0a0a 	subne.w	sl, r2, sl
   83ee2:	4451      	addne	r1, sl
   83ee4:	f8c9 2000 	streq.w	r2, [r9]
   83ee8:	6019      	strne	r1, [r3, #0]
   83eea:	f012 0107 	ands.w	r1, r2, #7
   83eee:	f000 8114 	beq.w	8411a <_malloc_r+0x472>
   83ef2:	f1c1 0008 	rsb	r0, r1, #8
   83ef6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83efa:	4402      	add	r2, r0
   83efc:	3108      	adds	r1, #8
   83efe:	eb02 090b 	add.w	r9, r2, fp
   83f02:	f3c9 090b 	ubfx	r9, r9, #0, #12
   83f06:	eba1 0909 	sub.w	r9, r1, r9
   83f0a:	4649      	mov	r1, r9
   83f0c:	4628      	mov	r0, r5
   83f0e:	9301      	str	r3, [sp, #4]
   83f10:	9200      	str	r2, [sp, #0]
   83f12:	f000 fc63 	bl	847dc <_sbrk_r>
   83f16:	1c43      	adds	r3, r0, #1
   83f18:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83f1c:	f000 8142 	beq.w	841a4 <_malloc_r+0x4fc>
   83f20:	1a80      	subs	r0, r0, r2
   83f22:	4448      	add	r0, r9
   83f24:	f040 0001 	orr.w	r0, r0, #1
   83f28:	6819      	ldr	r1, [r3, #0]
   83f2a:	42bc      	cmp	r4, r7
   83f2c:	4449      	add	r1, r9
   83f2e:	60ba      	str	r2, [r7, #8]
   83f30:	6019      	str	r1, [r3, #0]
   83f32:	6050      	str	r0, [r2, #4]
   83f34:	d017      	beq.n	83f66 <_malloc_r+0x2be>
   83f36:	f1b8 0f0f 	cmp.w	r8, #15
   83f3a:	f240 80fa 	bls.w	84132 <_malloc_r+0x48a>
   83f3e:	f04f 0c05 	mov.w	ip, #5
   83f42:	6862      	ldr	r2, [r4, #4]
   83f44:	f1a8 000c 	sub.w	r0, r8, #12
   83f48:	f020 0007 	bic.w	r0, r0, #7
   83f4c:	f002 0201 	and.w	r2, r2, #1
   83f50:	eb04 0e00 	add.w	lr, r4, r0
   83f54:	4302      	orrs	r2, r0
   83f56:	280f      	cmp	r0, #15
   83f58:	6062      	str	r2, [r4, #4]
   83f5a:	f8ce c004 	str.w	ip, [lr, #4]
   83f5e:	f8ce c008 	str.w	ip, [lr, #8]
   83f62:	f200 8116 	bhi.w	84192 <_malloc_r+0x4ea>
   83f66:	4b1d      	ldr	r3, [pc, #116]	; (83fdc <_malloc_r+0x334>)
   83f68:	68bc      	ldr	r4, [r7, #8]
   83f6a:	681a      	ldr	r2, [r3, #0]
   83f6c:	4291      	cmp	r1, r2
   83f6e:	bf88      	it	hi
   83f70:	6019      	strhi	r1, [r3, #0]
   83f72:	4b1b      	ldr	r3, [pc, #108]	; (83fe0 <_malloc_r+0x338>)
   83f74:	681a      	ldr	r2, [r3, #0]
   83f76:	4291      	cmp	r1, r2
   83f78:	6862      	ldr	r2, [r4, #4]
   83f7a:	bf88      	it	hi
   83f7c:	6019      	strhi	r1, [r3, #0]
   83f7e:	f022 0203 	bic.w	r2, r2, #3
   83f82:	4296      	cmp	r6, r2
   83f84:	eba2 0306 	sub.w	r3, r2, r6
   83f88:	d801      	bhi.n	83f8e <_malloc_r+0x2e6>
   83f8a:	2b0f      	cmp	r3, #15
   83f8c:	dc04      	bgt.n	83f98 <_malloc_r+0x2f0>
   83f8e:	4628      	mov	r0, r5
   83f90:	f000 fa68 	bl	84464 <__malloc_unlock>
   83f94:	2400      	movs	r4, #0
   83f96:	e74d      	b.n	83e34 <_malloc_r+0x18c>
   83f98:	f046 0201 	orr.w	r2, r6, #1
   83f9c:	f043 0301 	orr.w	r3, r3, #1
   83fa0:	4426      	add	r6, r4
   83fa2:	6062      	str	r2, [r4, #4]
   83fa4:	4628      	mov	r0, r5
   83fa6:	60be      	str	r6, [r7, #8]
   83fa8:	3408      	adds	r4, #8
   83faa:	6073      	str	r3, [r6, #4]
   83fac:	f000 fa5a 	bl	84464 <__malloc_unlock>
   83fb0:	4620      	mov	r0, r4
   83fb2:	b003      	add	sp, #12
   83fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83fb8:	2b14      	cmp	r3, #20
   83fba:	d970      	bls.n	8409e <_malloc_r+0x3f6>
   83fbc:	2b54      	cmp	r3, #84	; 0x54
   83fbe:	f200 80a2 	bhi.w	84106 <_malloc_r+0x45e>
   83fc2:	0b33      	lsrs	r3, r6, #12
   83fc4:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83fc8:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83fcc:	00c1      	lsls	r1, r0, #3
   83fce:	e68d      	b.n	83cec <_malloc_r+0x44>
   83fd0:	200706d0 	.word	0x200706d0
   83fd4:	20070c58 	.word	0x20070c58
   83fd8:	20070c28 	.word	0x20070c28
   83fdc:	20070c50 	.word	0x20070c50
   83fe0:	20070c54 	.word	0x20070c54
   83fe4:	200706d8 	.word	0x200706d8
   83fe8:	20070ad8 	.word	0x20070ad8
   83fec:	0a5a      	lsrs	r2, r3, #9
   83fee:	2a04      	cmp	r2, #4
   83ff0:	d95b      	bls.n	840aa <_malloc_r+0x402>
   83ff2:	2a14      	cmp	r2, #20
   83ff4:	f200 80ae 	bhi.w	84154 <_malloc_r+0x4ac>
   83ff8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   83ffc:	00c9      	lsls	r1, r1, #3
   83ffe:	325b      	adds	r2, #91	; 0x5b
   84000:	eb07 0c01 	add.w	ip, r7, r1
   84004:	5879      	ldr	r1, [r7, r1]
   84006:	f1ac 0c08 	sub.w	ip, ip, #8
   8400a:	458c      	cmp	ip, r1
   8400c:	f000 8088 	beq.w	84120 <_malloc_r+0x478>
   84010:	684a      	ldr	r2, [r1, #4]
   84012:	f022 0203 	bic.w	r2, r2, #3
   84016:	4293      	cmp	r3, r2
   84018:	d273      	bcs.n	84102 <_malloc_r+0x45a>
   8401a:	6889      	ldr	r1, [r1, #8]
   8401c:	458c      	cmp	ip, r1
   8401e:	d1f7      	bne.n	84010 <_malloc_r+0x368>
   84020:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84024:	687a      	ldr	r2, [r7, #4]
   84026:	60e3      	str	r3, [r4, #12]
   84028:	f8c4 c008 	str.w	ip, [r4, #8]
   8402c:	609c      	str	r4, [r3, #8]
   8402e:	f8cc 400c 	str.w	r4, [ip, #12]
   84032:	e69e      	b.n	83d72 <_malloc_r+0xca>
   84034:	f046 0c01 	orr.w	ip, r6, #1
   84038:	f042 0101 	orr.w	r1, r2, #1
   8403c:	4426      	add	r6, r4
   8403e:	f8c4 c004 	str.w	ip, [r4, #4]
   84042:	4628      	mov	r0, r5
   84044:	617e      	str	r6, [r7, #20]
   84046:	613e      	str	r6, [r7, #16]
   84048:	f8c6 e00c 	str.w	lr, [r6, #12]
   8404c:	f8c6 e008 	str.w	lr, [r6, #8]
   84050:	6071      	str	r1, [r6, #4]
   84052:	50e2      	str	r2, [r4, r3]
   84054:	f000 fa06 	bl	84464 <__malloc_unlock>
   84058:	3408      	adds	r4, #8
   8405a:	e6eb      	b.n	83e34 <_malloc_r+0x18c>
   8405c:	687a      	ldr	r2, [r7, #4]
   8405e:	e688      	b.n	83d72 <_malloc_r+0xca>
   84060:	f108 0801 	add.w	r8, r8, #1
   84064:	f018 0f03 	tst.w	r8, #3
   84068:	f10c 0c08 	add.w	ip, ip, #8
   8406c:	f47f ae93 	bne.w	83d96 <_malloc_r+0xee>
   84070:	e02d      	b.n	840ce <_malloc_r+0x426>
   84072:	68dc      	ldr	r4, [r3, #12]
   84074:	42a3      	cmp	r3, r4
   84076:	bf08      	it	eq
   84078:	3002      	addeq	r0, #2
   8407a:	f43f ae4b 	beq.w	83d14 <_malloc_r+0x6c>
   8407e:	e6c9      	b.n	83e14 <_malloc_r+0x16c>
   84080:	461c      	mov	r4, r3
   84082:	4419      	add	r1, r3
   84084:	684a      	ldr	r2, [r1, #4]
   84086:	68db      	ldr	r3, [r3, #12]
   84088:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8408c:	f042 0201 	orr.w	r2, r2, #1
   84090:	604a      	str	r2, [r1, #4]
   84092:	4628      	mov	r0, r5
   84094:	60f3      	str	r3, [r6, #12]
   84096:	609e      	str	r6, [r3, #8]
   84098:	f000 f9e4 	bl	84464 <__malloc_unlock>
   8409c:	e6ca      	b.n	83e34 <_malloc_r+0x18c>
   8409e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   840a2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   840a6:	00c1      	lsls	r1, r0, #3
   840a8:	e620      	b.n	83cec <_malloc_r+0x44>
   840aa:	099a      	lsrs	r2, r3, #6
   840ac:	f102 0139 	add.w	r1, r2, #57	; 0x39
   840b0:	00c9      	lsls	r1, r1, #3
   840b2:	3238      	adds	r2, #56	; 0x38
   840b4:	e7a4      	b.n	84000 <_malloc_r+0x358>
   840b6:	42bc      	cmp	r4, r7
   840b8:	d054      	beq.n	84164 <_malloc_r+0x4bc>
   840ba:	68bc      	ldr	r4, [r7, #8]
   840bc:	6862      	ldr	r2, [r4, #4]
   840be:	f022 0203 	bic.w	r2, r2, #3
   840c2:	e75e      	b.n	83f82 <_malloc_r+0x2da>
   840c4:	f859 3908 	ldr.w	r3, [r9], #-8
   840c8:	4599      	cmp	r9, r3
   840ca:	f040 8086 	bne.w	841da <_malloc_r+0x532>
   840ce:	f010 0f03 	tst.w	r0, #3
   840d2:	f100 30ff 	add.w	r0, r0, #4294967295
   840d6:	d1f5      	bne.n	840c4 <_malloc_r+0x41c>
   840d8:	687b      	ldr	r3, [r7, #4]
   840da:	ea23 0304 	bic.w	r3, r3, r4
   840de:	607b      	str	r3, [r7, #4]
   840e0:	0064      	lsls	r4, r4, #1
   840e2:	429c      	cmp	r4, r3
   840e4:	f63f aec8 	bhi.w	83e78 <_malloc_r+0x1d0>
   840e8:	2c00      	cmp	r4, #0
   840ea:	f43f aec5 	beq.w	83e78 <_malloc_r+0x1d0>
   840ee:	421c      	tst	r4, r3
   840f0:	4640      	mov	r0, r8
   840f2:	f47f ae4c 	bne.w	83d8e <_malloc_r+0xe6>
   840f6:	0064      	lsls	r4, r4, #1
   840f8:	421c      	tst	r4, r3
   840fa:	f100 0004 	add.w	r0, r0, #4
   840fe:	d0fa      	beq.n	840f6 <_malloc_r+0x44e>
   84100:	e645      	b.n	83d8e <_malloc_r+0xe6>
   84102:	468c      	mov	ip, r1
   84104:	e78c      	b.n	84020 <_malloc_r+0x378>
   84106:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8410a:	d815      	bhi.n	84138 <_malloc_r+0x490>
   8410c:	0bf3      	lsrs	r3, r6, #15
   8410e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84112:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   84116:	00c1      	lsls	r1, r0, #3
   84118:	e5e8      	b.n	83cec <_malloc_r+0x44>
   8411a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8411e:	e6ee      	b.n	83efe <_malloc_r+0x256>
   84120:	2101      	movs	r1, #1
   84122:	687b      	ldr	r3, [r7, #4]
   84124:	1092      	asrs	r2, r2, #2
   84126:	fa01 f202 	lsl.w	r2, r1, r2
   8412a:	431a      	orrs	r2, r3
   8412c:	607a      	str	r2, [r7, #4]
   8412e:	4663      	mov	r3, ip
   84130:	e779      	b.n	84026 <_malloc_r+0x37e>
   84132:	2301      	movs	r3, #1
   84134:	6053      	str	r3, [r2, #4]
   84136:	e72a      	b.n	83f8e <_malloc_r+0x2e6>
   84138:	f240 5254 	movw	r2, #1364	; 0x554
   8413c:	4293      	cmp	r3, r2
   8413e:	d822      	bhi.n	84186 <_malloc_r+0x4de>
   84140:	0cb3      	lsrs	r3, r6, #18
   84142:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   84146:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8414a:	00c1      	lsls	r1, r0, #3
   8414c:	e5ce      	b.n	83cec <_malloc_r+0x44>
   8414e:	f103 0b10 	add.w	fp, r3, #16
   84152:	e6af      	b.n	83eb4 <_malloc_r+0x20c>
   84154:	2a54      	cmp	r2, #84	; 0x54
   84156:	d829      	bhi.n	841ac <_malloc_r+0x504>
   84158:	0b1a      	lsrs	r2, r3, #12
   8415a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8415e:	00c9      	lsls	r1, r1, #3
   84160:	326e      	adds	r2, #110	; 0x6e
   84162:	e74d      	b.n	84000 <_malloc_r+0x358>
   84164:	4b20      	ldr	r3, [pc, #128]	; (841e8 <_malloc_r+0x540>)
   84166:	6819      	ldr	r1, [r3, #0]
   84168:	4459      	add	r1, fp
   8416a:	6019      	str	r1, [r3, #0]
   8416c:	e6b3      	b.n	83ed6 <_malloc_r+0x22e>
   8416e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   84172:	2800      	cmp	r0, #0
   84174:	f47f aeaf 	bne.w	83ed6 <_malloc_r+0x22e>
   84178:	eb08 030b 	add.w	r3, r8, fp
   8417c:	68ba      	ldr	r2, [r7, #8]
   8417e:	f043 0301 	orr.w	r3, r3, #1
   84182:	6053      	str	r3, [r2, #4]
   84184:	e6ef      	b.n	83f66 <_malloc_r+0x2be>
   84186:	207f      	movs	r0, #127	; 0x7f
   84188:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8418c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84190:	e5ac      	b.n	83cec <_malloc_r+0x44>
   84192:	f104 0108 	add.w	r1, r4, #8
   84196:	4628      	mov	r0, r5
   84198:	9300      	str	r3, [sp, #0]
   8419a:	f7ff fa67 	bl	8366c <_free_r>
   8419e:	9b00      	ldr	r3, [sp, #0]
   841a0:	6819      	ldr	r1, [r3, #0]
   841a2:	e6e0      	b.n	83f66 <_malloc_r+0x2be>
   841a4:	2001      	movs	r0, #1
   841a6:	f04f 0900 	mov.w	r9, #0
   841aa:	e6bd      	b.n	83f28 <_malloc_r+0x280>
   841ac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   841b0:	d805      	bhi.n	841be <_malloc_r+0x516>
   841b2:	0bda      	lsrs	r2, r3, #15
   841b4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   841b8:	00c9      	lsls	r1, r1, #3
   841ba:	3277      	adds	r2, #119	; 0x77
   841bc:	e720      	b.n	84000 <_malloc_r+0x358>
   841be:	f240 5154 	movw	r1, #1364	; 0x554
   841c2:	428a      	cmp	r2, r1
   841c4:	d805      	bhi.n	841d2 <_malloc_r+0x52a>
   841c6:	0c9a      	lsrs	r2, r3, #18
   841c8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   841cc:	00c9      	lsls	r1, r1, #3
   841ce:	327c      	adds	r2, #124	; 0x7c
   841d0:	e716      	b.n	84000 <_malloc_r+0x358>
   841d2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   841d6:	227e      	movs	r2, #126	; 0x7e
   841d8:	e712      	b.n	84000 <_malloc_r+0x358>
   841da:	687b      	ldr	r3, [r7, #4]
   841dc:	e780      	b.n	840e0 <_malloc_r+0x438>
   841de:	08f0      	lsrs	r0, r6, #3
   841e0:	f106 0308 	add.w	r3, r6, #8
   841e4:	e60e      	b.n	83e04 <_malloc_r+0x15c>
   841e6:	bf00      	nop
   841e8:	20070c28 	.word	0x20070c28

000841ec <__ascii_mbtowc>:
   841ec:	b082      	sub	sp, #8
   841ee:	b149      	cbz	r1, 84204 <__ascii_mbtowc+0x18>
   841f0:	b15a      	cbz	r2, 8420a <__ascii_mbtowc+0x1e>
   841f2:	b16b      	cbz	r3, 84210 <__ascii_mbtowc+0x24>
   841f4:	7813      	ldrb	r3, [r2, #0]
   841f6:	600b      	str	r3, [r1, #0]
   841f8:	7812      	ldrb	r2, [r2, #0]
   841fa:	1c10      	adds	r0, r2, #0
   841fc:	bf18      	it	ne
   841fe:	2001      	movne	r0, #1
   84200:	b002      	add	sp, #8
   84202:	4770      	bx	lr
   84204:	a901      	add	r1, sp, #4
   84206:	2a00      	cmp	r2, #0
   84208:	d1f3      	bne.n	841f2 <__ascii_mbtowc+0x6>
   8420a:	4610      	mov	r0, r2
   8420c:	b002      	add	sp, #8
   8420e:	4770      	bx	lr
   84210:	f06f 0001 	mvn.w	r0, #1
   84214:	e7f4      	b.n	84200 <__ascii_mbtowc+0x14>
   84216:	bf00      	nop

00084218 <memchr>:
   84218:	0783      	lsls	r3, r0, #30
   8421a:	b470      	push	{r4, r5, r6}
   8421c:	b2cd      	uxtb	r5, r1
   8421e:	d03d      	beq.n	8429c <memchr+0x84>
   84220:	1e54      	subs	r4, r2, #1
   84222:	b30a      	cbz	r2, 84268 <memchr+0x50>
   84224:	7803      	ldrb	r3, [r0, #0]
   84226:	42ab      	cmp	r3, r5
   84228:	d01f      	beq.n	8426a <memchr+0x52>
   8422a:	1c43      	adds	r3, r0, #1
   8422c:	e005      	b.n	8423a <memchr+0x22>
   8422e:	f114 34ff 	adds.w	r4, r4, #4294967295
   84232:	d319      	bcc.n	84268 <memchr+0x50>
   84234:	7802      	ldrb	r2, [r0, #0]
   84236:	42aa      	cmp	r2, r5
   84238:	d017      	beq.n	8426a <memchr+0x52>
   8423a:	f013 0f03 	tst.w	r3, #3
   8423e:	4618      	mov	r0, r3
   84240:	f103 0301 	add.w	r3, r3, #1
   84244:	d1f3      	bne.n	8422e <memchr+0x16>
   84246:	2c03      	cmp	r4, #3
   84248:	d811      	bhi.n	8426e <memchr+0x56>
   8424a:	b34c      	cbz	r4, 842a0 <memchr+0x88>
   8424c:	7803      	ldrb	r3, [r0, #0]
   8424e:	42ab      	cmp	r3, r5
   84250:	d00b      	beq.n	8426a <memchr+0x52>
   84252:	4404      	add	r4, r0
   84254:	1c43      	adds	r3, r0, #1
   84256:	e002      	b.n	8425e <memchr+0x46>
   84258:	7802      	ldrb	r2, [r0, #0]
   8425a:	42aa      	cmp	r2, r5
   8425c:	d005      	beq.n	8426a <memchr+0x52>
   8425e:	429c      	cmp	r4, r3
   84260:	4618      	mov	r0, r3
   84262:	f103 0301 	add.w	r3, r3, #1
   84266:	d1f7      	bne.n	84258 <memchr+0x40>
   84268:	2000      	movs	r0, #0
   8426a:	bc70      	pop	{r4, r5, r6}
   8426c:	4770      	bx	lr
   8426e:	0209      	lsls	r1, r1, #8
   84270:	b289      	uxth	r1, r1
   84272:	4329      	orrs	r1, r5
   84274:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84278:	6803      	ldr	r3, [r0, #0]
   8427a:	4606      	mov	r6, r0
   8427c:	404b      	eors	r3, r1
   8427e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84282:	ea22 0303 	bic.w	r3, r2, r3
   84286:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8428a:	f100 0004 	add.w	r0, r0, #4
   8428e:	d103      	bne.n	84298 <memchr+0x80>
   84290:	3c04      	subs	r4, #4
   84292:	2c03      	cmp	r4, #3
   84294:	d8f0      	bhi.n	84278 <memchr+0x60>
   84296:	e7d8      	b.n	8424a <memchr+0x32>
   84298:	4630      	mov	r0, r6
   8429a:	e7d7      	b.n	8424c <memchr+0x34>
   8429c:	4614      	mov	r4, r2
   8429e:	e7d2      	b.n	84246 <memchr+0x2e>
   842a0:	4620      	mov	r0, r4
   842a2:	e7e2      	b.n	8426a <memchr+0x52>

000842a4 <memcpy>:
   842a4:	4684      	mov	ip, r0
   842a6:	ea41 0300 	orr.w	r3, r1, r0
   842aa:	f013 0303 	ands.w	r3, r3, #3
   842ae:	d149      	bne.n	84344 <memcpy+0xa0>
   842b0:	3a40      	subs	r2, #64	; 0x40
   842b2:	d323      	bcc.n	842fc <memcpy+0x58>
   842b4:	680b      	ldr	r3, [r1, #0]
   842b6:	6003      	str	r3, [r0, #0]
   842b8:	684b      	ldr	r3, [r1, #4]
   842ba:	6043      	str	r3, [r0, #4]
   842bc:	688b      	ldr	r3, [r1, #8]
   842be:	6083      	str	r3, [r0, #8]
   842c0:	68cb      	ldr	r3, [r1, #12]
   842c2:	60c3      	str	r3, [r0, #12]
   842c4:	690b      	ldr	r3, [r1, #16]
   842c6:	6103      	str	r3, [r0, #16]
   842c8:	694b      	ldr	r3, [r1, #20]
   842ca:	6143      	str	r3, [r0, #20]
   842cc:	698b      	ldr	r3, [r1, #24]
   842ce:	6183      	str	r3, [r0, #24]
   842d0:	69cb      	ldr	r3, [r1, #28]
   842d2:	61c3      	str	r3, [r0, #28]
   842d4:	6a0b      	ldr	r3, [r1, #32]
   842d6:	6203      	str	r3, [r0, #32]
   842d8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   842da:	6243      	str	r3, [r0, #36]	; 0x24
   842dc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   842de:	6283      	str	r3, [r0, #40]	; 0x28
   842e0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   842e2:	62c3      	str	r3, [r0, #44]	; 0x2c
   842e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   842e6:	6303      	str	r3, [r0, #48]	; 0x30
   842e8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   842ea:	6343      	str	r3, [r0, #52]	; 0x34
   842ec:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   842ee:	6383      	str	r3, [r0, #56]	; 0x38
   842f0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   842f2:	63c3      	str	r3, [r0, #60]	; 0x3c
   842f4:	3040      	adds	r0, #64	; 0x40
   842f6:	3140      	adds	r1, #64	; 0x40
   842f8:	3a40      	subs	r2, #64	; 0x40
   842fa:	d2db      	bcs.n	842b4 <memcpy+0x10>
   842fc:	3230      	adds	r2, #48	; 0x30
   842fe:	d30b      	bcc.n	84318 <memcpy+0x74>
   84300:	680b      	ldr	r3, [r1, #0]
   84302:	6003      	str	r3, [r0, #0]
   84304:	684b      	ldr	r3, [r1, #4]
   84306:	6043      	str	r3, [r0, #4]
   84308:	688b      	ldr	r3, [r1, #8]
   8430a:	6083      	str	r3, [r0, #8]
   8430c:	68cb      	ldr	r3, [r1, #12]
   8430e:	60c3      	str	r3, [r0, #12]
   84310:	3010      	adds	r0, #16
   84312:	3110      	adds	r1, #16
   84314:	3a10      	subs	r2, #16
   84316:	d2f3      	bcs.n	84300 <memcpy+0x5c>
   84318:	320c      	adds	r2, #12
   8431a:	d305      	bcc.n	84328 <memcpy+0x84>
   8431c:	f851 3b04 	ldr.w	r3, [r1], #4
   84320:	f840 3b04 	str.w	r3, [r0], #4
   84324:	3a04      	subs	r2, #4
   84326:	d2f9      	bcs.n	8431c <memcpy+0x78>
   84328:	3204      	adds	r2, #4
   8432a:	d008      	beq.n	8433e <memcpy+0x9a>
   8432c:	07d2      	lsls	r2, r2, #31
   8432e:	bf1c      	itt	ne
   84330:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84334:	f800 3b01 	strbne.w	r3, [r0], #1
   84338:	d301      	bcc.n	8433e <memcpy+0x9a>
   8433a:	880b      	ldrh	r3, [r1, #0]
   8433c:	8003      	strh	r3, [r0, #0]
   8433e:	4660      	mov	r0, ip
   84340:	4770      	bx	lr
   84342:	bf00      	nop
   84344:	2a08      	cmp	r2, #8
   84346:	d313      	bcc.n	84370 <memcpy+0xcc>
   84348:	078b      	lsls	r3, r1, #30
   8434a:	d0b1      	beq.n	842b0 <memcpy+0xc>
   8434c:	f010 0303 	ands.w	r3, r0, #3
   84350:	d0ae      	beq.n	842b0 <memcpy+0xc>
   84352:	f1c3 0304 	rsb	r3, r3, #4
   84356:	1ad2      	subs	r2, r2, r3
   84358:	07db      	lsls	r3, r3, #31
   8435a:	bf1c      	itt	ne
   8435c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84360:	f800 3b01 	strbne.w	r3, [r0], #1
   84364:	d3a4      	bcc.n	842b0 <memcpy+0xc>
   84366:	f831 3b02 	ldrh.w	r3, [r1], #2
   8436a:	f820 3b02 	strh.w	r3, [r0], #2
   8436e:	e79f      	b.n	842b0 <memcpy+0xc>
   84370:	3a04      	subs	r2, #4
   84372:	d3d9      	bcc.n	84328 <memcpy+0x84>
   84374:	3a01      	subs	r2, #1
   84376:	f811 3b01 	ldrb.w	r3, [r1], #1
   8437a:	f800 3b01 	strb.w	r3, [r0], #1
   8437e:	d2f9      	bcs.n	84374 <memcpy+0xd0>
   84380:	780b      	ldrb	r3, [r1, #0]
   84382:	7003      	strb	r3, [r0, #0]
   84384:	784b      	ldrb	r3, [r1, #1]
   84386:	7043      	strb	r3, [r0, #1]
   84388:	788b      	ldrb	r3, [r1, #2]
   8438a:	7083      	strb	r3, [r0, #2]
   8438c:	4660      	mov	r0, ip
   8438e:	4770      	bx	lr

00084390 <memmove>:
   84390:	4288      	cmp	r0, r1
   84392:	b5f0      	push	{r4, r5, r6, r7, lr}
   84394:	d90d      	bls.n	843b2 <memmove+0x22>
   84396:	188b      	adds	r3, r1, r2
   84398:	4298      	cmp	r0, r3
   8439a:	d20a      	bcs.n	843b2 <memmove+0x22>
   8439c:	1884      	adds	r4, r0, r2
   8439e:	2a00      	cmp	r2, #0
   843a0:	d051      	beq.n	84446 <memmove+0xb6>
   843a2:	4622      	mov	r2, r4
   843a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   843a8:	4299      	cmp	r1, r3
   843aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   843ae:	d1f9      	bne.n	843a4 <memmove+0x14>
   843b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   843b2:	2a0f      	cmp	r2, #15
   843b4:	d948      	bls.n	84448 <memmove+0xb8>
   843b6:	ea41 0300 	orr.w	r3, r1, r0
   843ba:	079b      	lsls	r3, r3, #30
   843bc:	d146      	bne.n	8444c <memmove+0xbc>
   843be:	4615      	mov	r5, r2
   843c0:	f100 0410 	add.w	r4, r0, #16
   843c4:	f101 0310 	add.w	r3, r1, #16
   843c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   843cc:	3d10      	subs	r5, #16
   843ce:	f844 6c10 	str.w	r6, [r4, #-16]
   843d2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   843d6:	2d0f      	cmp	r5, #15
   843d8:	f844 6c0c 	str.w	r6, [r4, #-12]
   843dc:	f853 6c08 	ldr.w	r6, [r3, #-8]
   843e0:	f104 0410 	add.w	r4, r4, #16
   843e4:	f844 6c18 	str.w	r6, [r4, #-24]
   843e8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   843ec:	f103 0310 	add.w	r3, r3, #16
   843f0:	f844 6c14 	str.w	r6, [r4, #-20]
   843f4:	d8e8      	bhi.n	843c8 <memmove+0x38>
   843f6:	f1a2 0310 	sub.w	r3, r2, #16
   843fa:	f023 030f 	bic.w	r3, r3, #15
   843fe:	f002 0e0f 	and.w	lr, r2, #15
   84402:	3310      	adds	r3, #16
   84404:	f1be 0f03 	cmp.w	lr, #3
   84408:	4419      	add	r1, r3
   8440a:	4403      	add	r3, r0
   8440c:	d921      	bls.n	84452 <memmove+0xc2>
   8440e:	460e      	mov	r6, r1
   84410:	4674      	mov	r4, lr
   84412:	1f1d      	subs	r5, r3, #4
   84414:	f856 7b04 	ldr.w	r7, [r6], #4
   84418:	3c04      	subs	r4, #4
   8441a:	2c03      	cmp	r4, #3
   8441c:	f845 7f04 	str.w	r7, [r5, #4]!
   84420:	d8f8      	bhi.n	84414 <memmove+0x84>
   84422:	f1ae 0404 	sub.w	r4, lr, #4
   84426:	f024 0403 	bic.w	r4, r4, #3
   8442a:	3404      	adds	r4, #4
   8442c:	4421      	add	r1, r4
   8442e:	4423      	add	r3, r4
   84430:	f002 0203 	and.w	r2, r2, #3
   84434:	b162      	cbz	r2, 84450 <memmove+0xc0>
   84436:	3b01      	subs	r3, #1
   84438:	440a      	add	r2, r1
   8443a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8443e:	428a      	cmp	r2, r1
   84440:	f803 4f01 	strb.w	r4, [r3, #1]!
   84444:	d1f9      	bne.n	8443a <memmove+0xaa>
   84446:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84448:	4603      	mov	r3, r0
   8444a:	e7f3      	b.n	84434 <memmove+0xa4>
   8444c:	4603      	mov	r3, r0
   8444e:	e7f2      	b.n	84436 <memmove+0xa6>
   84450:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84452:	4672      	mov	r2, lr
   84454:	e7ee      	b.n	84434 <memmove+0xa4>
   84456:	bf00      	nop

00084458 <__malloc_lock>:
   84458:	4801      	ldr	r0, [pc, #4]	; (84460 <__malloc_lock+0x8>)
   8445a:	f7ff bba1 	b.w	83ba0 <__retarget_lock_acquire_recursive>
   8445e:	bf00      	nop
   84460:	20071c78 	.word	0x20071c78

00084464 <__malloc_unlock>:
   84464:	4801      	ldr	r0, [pc, #4]	; (8446c <__malloc_unlock+0x8>)
   84466:	f7ff bb9d 	b.w	83ba4 <__retarget_lock_release_recursive>
   8446a:	bf00      	nop
   8446c:	20071c78 	.word	0x20071c78

00084470 <_realloc_r>:
   84470:	2900      	cmp	r1, #0
   84472:	f000 8094 	beq.w	8459e <_realloc_r+0x12e>
   84476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8447a:	460c      	mov	r4, r1
   8447c:	4615      	mov	r5, r2
   8447e:	b083      	sub	sp, #12
   84480:	4680      	mov	r8, r0
   84482:	f105 060b 	add.w	r6, r5, #11
   84486:	f7ff ffe7 	bl	84458 <__malloc_lock>
   8448a:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8448e:	2e16      	cmp	r6, #22
   84490:	f02e 0703 	bic.w	r7, lr, #3
   84494:	f1a4 0908 	sub.w	r9, r4, #8
   84498:	d83c      	bhi.n	84514 <_realloc_r+0xa4>
   8449a:	2210      	movs	r2, #16
   8449c:	4616      	mov	r6, r2
   8449e:	42b5      	cmp	r5, r6
   844a0:	d83d      	bhi.n	8451e <_realloc_r+0xae>
   844a2:	4297      	cmp	r7, r2
   844a4:	da43      	bge.n	8452e <_realloc_r+0xbe>
   844a6:	4bc6      	ldr	r3, [pc, #792]	; (847c0 <_realloc_r+0x350>)
   844a8:	eb09 0007 	add.w	r0, r9, r7
   844ac:	6899      	ldr	r1, [r3, #8]
   844ae:	4288      	cmp	r0, r1
   844b0:	f000 80c3 	beq.w	8463a <_realloc_r+0x1ca>
   844b4:	6843      	ldr	r3, [r0, #4]
   844b6:	f023 0101 	bic.w	r1, r3, #1
   844ba:	4401      	add	r1, r0
   844bc:	6849      	ldr	r1, [r1, #4]
   844be:	07c9      	lsls	r1, r1, #31
   844c0:	d54d      	bpl.n	8455e <_realloc_r+0xee>
   844c2:	f01e 0f01 	tst.w	lr, #1
   844c6:	f000 809b 	beq.w	84600 <_realloc_r+0x190>
   844ca:	4629      	mov	r1, r5
   844cc:	4640      	mov	r0, r8
   844ce:	f7ff fbeb 	bl	83ca8 <_malloc_r>
   844d2:	4605      	mov	r5, r0
   844d4:	2800      	cmp	r0, #0
   844d6:	d03b      	beq.n	84550 <_realloc_r+0xe0>
   844d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   844dc:	f1a0 0208 	sub.w	r2, r0, #8
   844e0:	f023 0301 	bic.w	r3, r3, #1
   844e4:	444b      	add	r3, r9
   844e6:	429a      	cmp	r2, r3
   844e8:	f000 812b 	beq.w	84742 <_realloc_r+0x2d2>
   844ec:	1f3a      	subs	r2, r7, #4
   844ee:	2a24      	cmp	r2, #36	; 0x24
   844f0:	f200 8118 	bhi.w	84724 <_realloc_r+0x2b4>
   844f4:	2a13      	cmp	r2, #19
   844f6:	f200 80eb 	bhi.w	846d0 <_realloc_r+0x260>
   844fa:	4603      	mov	r3, r0
   844fc:	4622      	mov	r2, r4
   844fe:	6811      	ldr	r1, [r2, #0]
   84500:	6019      	str	r1, [r3, #0]
   84502:	6851      	ldr	r1, [r2, #4]
   84504:	6059      	str	r1, [r3, #4]
   84506:	6892      	ldr	r2, [r2, #8]
   84508:	609a      	str	r2, [r3, #8]
   8450a:	4621      	mov	r1, r4
   8450c:	4640      	mov	r0, r8
   8450e:	f7ff f8ad 	bl	8366c <_free_r>
   84512:	e01d      	b.n	84550 <_realloc_r+0xe0>
   84514:	f026 0607 	bic.w	r6, r6, #7
   84518:	2e00      	cmp	r6, #0
   8451a:	4632      	mov	r2, r6
   8451c:	dabf      	bge.n	8449e <_realloc_r+0x2e>
   8451e:	2500      	movs	r5, #0
   84520:	230c      	movs	r3, #12
   84522:	4628      	mov	r0, r5
   84524:	f8c8 3000 	str.w	r3, [r8]
   84528:	b003      	add	sp, #12
   8452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8452e:	4625      	mov	r5, r4
   84530:	1bbb      	subs	r3, r7, r6
   84532:	2b0f      	cmp	r3, #15
   84534:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84538:	d81d      	bhi.n	84576 <_realloc_r+0x106>
   8453a:	f002 0201 	and.w	r2, r2, #1
   8453e:	433a      	orrs	r2, r7
   84540:	eb09 0107 	add.w	r1, r9, r7
   84544:	f8c9 2004 	str.w	r2, [r9, #4]
   84548:	684b      	ldr	r3, [r1, #4]
   8454a:	f043 0301 	orr.w	r3, r3, #1
   8454e:	604b      	str	r3, [r1, #4]
   84550:	4640      	mov	r0, r8
   84552:	f7ff ff87 	bl	84464 <__malloc_unlock>
   84556:	4628      	mov	r0, r5
   84558:	b003      	add	sp, #12
   8455a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8455e:	f023 0303 	bic.w	r3, r3, #3
   84562:	18f9      	adds	r1, r7, r3
   84564:	4291      	cmp	r1, r2
   84566:	db1d      	blt.n	845a4 <_realloc_r+0x134>
   84568:	68c3      	ldr	r3, [r0, #12]
   8456a:	6882      	ldr	r2, [r0, #8]
   8456c:	4625      	mov	r5, r4
   8456e:	60d3      	str	r3, [r2, #12]
   84570:	460f      	mov	r7, r1
   84572:	609a      	str	r2, [r3, #8]
   84574:	e7dc      	b.n	84530 <_realloc_r+0xc0>
   84576:	f002 0201 	and.w	r2, r2, #1
   8457a:	eb09 0106 	add.w	r1, r9, r6
   8457e:	f043 0301 	orr.w	r3, r3, #1
   84582:	4332      	orrs	r2, r6
   84584:	f8c9 2004 	str.w	r2, [r9, #4]
   84588:	444f      	add	r7, r9
   8458a:	604b      	str	r3, [r1, #4]
   8458c:	687b      	ldr	r3, [r7, #4]
   8458e:	3108      	adds	r1, #8
   84590:	f043 0301 	orr.w	r3, r3, #1
   84594:	607b      	str	r3, [r7, #4]
   84596:	4640      	mov	r0, r8
   84598:	f7ff f868 	bl	8366c <_free_r>
   8459c:	e7d8      	b.n	84550 <_realloc_r+0xe0>
   8459e:	4611      	mov	r1, r2
   845a0:	f7ff bb82 	b.w	83ca8 <_malloc_r>
   845a4:	f01e 0f01 	tst.w	lr, #1
   845a8:	d18f      	bne.n	844ca <_realloc_r+0x5a>
   845aa:	f854 1c08 	ldr.w	r1, [r4, #-8]
   845ae:	eba9 0a01 	sub.w	sl, r9, r1
   845b2:	f8da 1004 	ldr.w	r1, [sl, #4]
   845b6:	f021 0103 	bic.w	r1, r1, #3
   845ba:	440b      	add	r3, r1
   845bc:	443b      	add	r3, r7
   845be:	4293      	cmp	r3, r2
   845c0:	db26      	blt.n	84610 <_realloc_r+0x1a0>
   845c2:	4655      	mov	r5, sl
   845c4:	68c1      	ldr	r1, [r0, #12]
   845c6:	6880      	ldr	r0, [r0, #8]
   845c8:	1f3a      	subs	r2, r7, #4
   845ca:	60c1      	str	r1, [r0, #12]
   845cc:	6088      	str	r0, [r1, #8]
   845ce:	f855 0f08 	ldr.w	r0, [r5, #8]!
   845d2:	f8da 100c 	ldr.w	r1, [sl, #12]
   845d6:	2a24      	cmp	r2, #36	; 0x24
   845d8:	60c1      	str	r1, [r0, #12]
   845da:	6088      	str	r0, [r1, #8]
   845dc:	d826      	bhi.n	8462c <_realloc_r+0x1bc>
   845de:	2a13      	cmp	r2, #19
   845e0:	f240 8081 	bls.w	846e6 <_realloc_r+0x276>
   845e4:	6821      	ldr	r1, [r4, #0]
   845e6:	2a1b      	cmp	r2, #27
   845e8:	f8ca 1008 	str.w	r1, [sl, #8]
   845ec:	6861      	ldr	r1, [r4, #4]
   845ee:	f8ca 100c 	str.w	r1, [sl, #12]
   845f2:	f200 80ad 	bhi.w	84750 <_realloc_r+0x2e0>
   845f6:	f104 0008 	add.w	r0, r4, #8
   845fa:	f10a 0210 	add.w	r2, sl, #16
   845fe:	e074      	b.n	846ea <_realloc_r+0x27a>
   84600:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84604:	eba9 0a03 	sub.w	sl, r9, r3
   84608:	f8da 1004 	ldr.w	r1, [sl, #4]
   8460c:	f021 0103 	bic.w	r1, r1, #3
   84610:	187b      	adds	r3, r7, r1
   84612:	4293      	cmp	r3, r2
   84614:	f6ff af59 	blt.w	844ca <_realloc_r+0x5a>
   84618:	4655      	mov	r5, sl
   8461a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8461e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84622:	1f3a      	subs	r2, r7, #4
   84624:	2a24      	cmp	r2, #36	; 0x24
   84626:	60c1      	str	r1, [r0, #12]
   84628:	6088      	str	r0, [r1, #8]
   8462a:	d9d8      	bls.n	845de <_realloc_r+0x16e>
   8462c:	4621      	mov	r1, r4
   8462e:	4628      	mov	r0, r5
   84630:	461f      	mov	r7, r3
   84632:	46d1      	mov	r9, sl
   84634:	f7ff feac 	bl	84390 <memmove>
   84638:	e77a      	b.n	84530 <_realloc_r+0xc0>
   8463a:	6841      	ldr	r1, [r0, #4]
   8463c:	f106 0010 	add.w	r0, r6, #16
   84640:	f021 0b03 	bic.w	fp, r1, #3
   84644:	44bb      	add	fp, r7
   84646:	4583      	cmp	fp, r0
   84648:	da58      	bge.n	846fc <_realloc_r+0x28c>
   8464a:	f01e 0f01 	tst.w	lr, #1
   8464e:	f47f af3c 	bne.w	844ca <_realloc_r+0x5a>
   84652:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84656:	eba9 0a01 	sub.w	sl, r9, r1
   8465a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8465e:	f021 0103 	bic.w	r1, r1, #3
   84662:	448b      	add	fp, r1
   84664:	4558      	cmp	r0, fp
   84666:	dcd3      	bgt.n	84610 <_realloc_r+0x1a0>
   84668:	4655      	mov	r5, sl
   8466a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8466e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84672:	1f3a      	subs	r2, r7, #4
   84674:	2a24      	cmp	r2, #36	; 0x24
   84676:	60c1      	str	r1, [r0, #12]
   84678:	6088      	str	r0, [r1, #8]
   8467a:	f200 808d 	bhi.w	84798 <_realloc_r+0x328>
   8467e:	2a13      	cmp	r2, #19
   84680:	f240 8087 	bls.w	84792 <_realloc_r+0x322>
   84684:	6821      	ldr	r1, [r4, #0]
   84686:	2a1b      	cmp	r2, #27
   84688:	f8ca 1008 	str.w	r1, [sl, #8]
   8468c:	6861      	ldr	r1, [r4, #4]
   8468e:	f8ca 100c 	str.w	r1, [sl, #12]
   84692:	f200 8088 	bhi.w	847a6 <_realloc_r+0x336>
   84696:	f104 0108 	add.w	r1, r4, #8
   8469a:	f10a 0210 	add.w	r2, sl, #16
   8469e:	6808      	ldr	r0, [r1, #0]
   846a0:	6010      	str	r0, [r2, #0]
   846a2:	6848      	ldr	r0, [r1, #4]
   846a4:	6050      	str	r0, [r2, #4]
   846a6:	6889      	ldr	r1, [r1, #8]
   846a8:	6091      	str	r1, [r2, #8]
   846aa:	ebab 0206 	sub.w	r2, fp, r6
   846ae:	eb0a 0106 	add.w	r1, sl, r6
   846b2:	f042 0201 	orr.w	r2, r2, #1
   846b6:	6099      	str	r1, [r3, #8]
   846b8:	604a      	str	r2, [r1, #4]
   846ba:	f8da 3004 	ldr.w	r3, [sl, #4]
   846be:	4640      	mov	r0, r8
   846c0:	f003 0301 	and.w	r3, r3, #1
   846c4:	431e      	orrs	r6, r3
   846c6:	f8ca 6004 	str.w	r6, [sl, #4]
   846ca:	f7ff fecb 	bl	84464 <__malloc_unlock>
   846ce:	e742      	b.n	84556 <_realloc_r+0xe6>
   846d0:	6823      	ldr	r3, [r4, #0]
   846d2:	2a1b      	cmp	r2, #27
   846d4:	6003      	str	r3, [r0, #0]
   846d6:	6863      	ldr	r3, [r4, #4]
   846d8:	6043      	str	r3, [r0, #4]
   846da:	d827      	bhi.n	8472c <_realloc_r+0x2bc>
   846dc:	f100 0308 	add.w	r3, r0, #8
   846e0:	f104 0208 	add.w	r2, r4, #8
   846e4:	e70b      	b.n	844fe <_realloc_r+0x8e>
   846e6:	4620      	mov	r0, r4
   846e8:	462a      	mov	r2, r5
   846ea:	6801      	ldr	r1, [r0, #0]
   846ec:	461f      	mov	r7, r3
   846ee:	6011      	str	r1, [r2, #0]
   846f0:	6841      	ldr	r1, [r0, #4]
   846f2:	46d1      	mov	r9, sl
   846f4:	6051      	str	r1, [r2, #4]
   846f6:	6883      	ldr	r3, [r0, #8]
   846f8:	6093      	str	r3, [r2, #8]
   846fa:	e719      	b.n	84530 <_realloc_r+0xc0>
   846fc:	ebab 0b06 	sub.w	fp, fp, r6
   84700:	eb09 0106 	add.w	r1, r9, r6
   84704:	f04b 0201 	orr.w	r2, fp, #1
   84708:	6099      	str	r1, [r3, #8]
   8470a:	604a      	str	r2, [r1, #4]
   8470c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84710:	4640      	mov	r0, r8
   84712:	f003 0301 	and.w	r3, r3, #1
   84716:	431e      	orrs	r6, r3
   84718:	f844 6c04 	str.w	r6, [r4, #-4]
   8471c:	f7ff fea2 	bl	84464 <__malloc_unlock>
   84720:	4625      	mov	r5, r4
   84722:	e718      	b.n	84556 <_realloc_r+0xe6>
   84724:	4621      	mov	r1, r4
   84726:	f7ff fe33 	bl	84390 <memmove>
   8472a:	e6ee      	b.n	8450a <_realloc_r+0x9a>
   8472c:	68a3      	ldr	r3, [r4, #8]
   8472e:	2a24      	cmp	r2, #36	; 0x24
   84730:	6083      	str	r3, [r0, #8]
   84732:	68e3      	ldr	r3, [r4, #12]
   84734:	60c3      	str	r3, [r0, #12]
   84736:	d018      	beq.n	8476a <_realloc_r+0x2fa>
   84738:	f100 0310 	add.w	r3, r0, #16
   8473c:	f104 0210 	add.w	r2, r4, #16
   84740:	e6dd      	b.n	844fe <_realloc_r+0x8e>
   84742:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84746:	4625      	mov	r5, r4
   84748:	f023 0303 	bic.w	r3, r3, #3
   8474c:	441f      	add	r7, r3
   8474e:	e6ef      	b.n	84530 <_realloc_r+0xc0>
   84750:	68a1      	ldr	r1, [r4, #8]
   84752:	2a24      	cmp	r2, #36	; 0x24
   84754:	f8ca 1010 	str.w	r1, [sl, #16]
   84758:	68e1      	ldr	r1, [r4, #12]
   8475a:	f8ca 1014 	str.w	r1, [sl, #20]
   8475e:	d00d      	beq.n	8477c <_realloc_r+0x30c>
   84760:	f104 0010 	add.w	r0, r4, #16
   84764:	f10a 0218 	add.w	r2, sl, #24
   84768:	e7bf      	b.n	846ea <_realloc_r+0x27a>
   8476a:	6922      	ldr	r2, [r4, #16]
   8476c:	f100 0318 	add.w	r3, r0, #24
   84770:	6102      	str	r2, [r0, #16]
   84772:	6961      	ldr	r1, [r4, #20]
   84774:	f104 0218 	add.w	r2, r4, #24
   84778:	6141      	str	r1, [r0, #20]
   8477a:	e6c0      	b.n	844fe <_realloc_r+0x8e>
   8477c:	6922      	ldr	r2, [r4, #16]
   8477e:	f104 0018 	add.w	r0, r4, #24
   84782:	f8ca 2018 	str.w	r2, [sl, #24]
   84786:	6961      	ldr	r1, [r4, #20]
   84788:	f10a 0220 	add.w	r2, sl, #32
   8478c:	f8ca 101c 	str.w	r1, [sl, #28]
   84790:	e7ab      	b.n	846ea <_realloc_r+0x27a>
   84792:	4621      	mov	r1, r4
   84794:	462a      	mov	r2, r5
   84796:	e782      	b.n	8469e <_realloc_r+0x22e>
   84798:	4621      	mov	r1, r4
   8479a:	4628      	mov	r0, r5
   8479c:	9301      	str	r3, [sp, #4]
   8479e:	f7ff fdf7 	bl	84390 <memmove>
   847a2:	9b01      	ldr	r3, [sp, #4]
   847a4:	e781      	b.n	846aa <_realloc_r+0x23a>
   847a6:	68a1      	ldr	r1, [r4, #8]
   847a8:	2a24      	cmp	r2, #36	; 0x24
   847aa:	f8ca 1010 	str.w	r1, [sl, #16]
   847ae:	68e1      	ldr	r1, [r4, #12]
   847b0:	f8ca 1014 	str.w	r1, [sl, #20]
   847b4:	d006      	beq.n	847c4 <_realloc_r+0x354>
   847b6:	f104 0110 	add.w	r1, r4, #16
   847ba:	f10a 0218 	add.w	r2, sl, #24
   847be:	e76e      	b.n	8469e <_realloc_r+0x22e>
   847c0:	200706d0 	.word	0x200706d0
   847c4:	6922      	ldr	r2, [r4, #16]
   847c6:	f104 0118 	add.w	r1, r4, #24
   847ca:	f8ca 2018 	str.w	r2, [sl, #24]
   847ce:	6960      	ldr	r0, [r4, #20]
   847d0:	f10a 0220 	add.w	r2, sl, #32
   847d4:	f8ca 001c 	str.w	r0, [sl, #28]
   847d8:	e761      	b.n	8469e <_realloc_r+0x22e>
   847da:	bf00      	nop

000847dc <_sbrk_r>:
   847dc:	b538      	push	{r3, r4, r5, lr}
   847de:	2300      	movs	r3, #0
   847e0:	4c06      	ldr	r4, [pc, #24]	; (847fc <_sbrk_r+0x20>)
   847e2:	4605      	mov	r5, r0
   847e4:	4608      	mov	r0, r1
   847e6:	6023      	str	r3, [r4, #0]
   847e8:	f7fc fc10 	bl	8100c <_sbrk>
   847ec:	1c43      	adds	r3, r0, #1
   847ee:	d000      	beq.n	847f2 <_sbrk_r+0x16>
   847f0:	bd38      	pop	{r3, r4, r5, pc}
   847f2:	6823      	ldr	r3, [r4, #0]
   847f4:	2b00      	cmp	r3, #0
   847f6:	d0fb      	beq.n	847f0 <_sbrk_r+0x14>
   847f8:	602b      	str	r3, [r5, #0]
   847fa:	bd38      	pop	{r3, r4, r5, pc}
   847fc:	20071c8c 	.word	0x20071c8c

00084800 <__sread>:
   84800:	b510      	push	{r4, lr}
   84802:	460c      	mov	r4, r1
   84804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84808:	f000 f9f4 	bl	84bf4 <_read_r>
   8480c:	2800      	cmp	r0, #0
   8480e:	db03      	blt.n	84818 <__sread+0x18>
   84810:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84812:	4403      	add	r3, r0
   84814:	6523      	str	r3, [r4, #80]	; 0x50
   84816:	bd10      	pop	{r4, pc}
   84818:	89a3      	ldrh	r3, [r4, #12]
   8481a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8481e:	81a3      	strh	r3, [r4, #12]
   84820:	bd10      	pop	{r4, pc}
   84822:	bf00      	nop

00084824 <__swrite>:
   84824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84828:	460c      	mov	r4, r1
   8482a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8482e:	461f      	mov	r7, r3
   84830:	05cb      	lsls	r3, r1, #23
   84832:	4616      	mov	r6, r2
   84834:	4605      	mov	r5, r0
   84836:	d507      	bpl.n	84848 <__swrite+0x24>
   84838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8483c:	2302      	movs	r3, #2
   8483e:	2200      	movs	r2, #0
   84840:	f000 f9c2 	bl	84bc8 <_lseek_r>
   84844:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84848:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8484c:	81a1      	strh	r1, [r4, #12]
   8484e:	463b      	mov	r3, r7
   84850:	4632      	mov	r2, r6
   84852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84856:	4628      	mov	r0, r5
   84858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8485c:	f000 b8a2 	b.w	849a4 <_write_r>

00084860 <__sseek>:
   84860:	b510      	push	{r4, lr}
   84862:	460c      	mov	r4, r1
   84864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84868:	f000 f9ae 	bl	84bc8 <_lseek_r>
   8486c:	89a3      	ldrh	r3, [r4, #12]
   8486e:	1c42      	adds	r2, r0, #1
   84870:	bf0e      	itee	eq
   84872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8487a:	6520      	strne	r0, [r4, #80]	; 0x50
   8487c:	81a3      	strh	r3, [r4, #12]
   8487e:	bd10      	pop	{r4, pc}

00084880 <__sclose>:
   84880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84884:	f000 b906 	b.w	84a94 <_close_r>

00084888 <__swbuf_r>:
   84888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8488a:	460d      	mov	r5, r1
   8488c:	4614      	mov	r4, r2
   8488e:	4606      	mov	r6, r0
   84890:	b110      	cbz	r0, 84898 <__swbuf_r+0x10>
   84892:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84894:	2b00      	cmp	r3, #0
   84896:	d04b      	beq.n	84930 <__swbuf_r+0xa8>
   84898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8489c:	69a3      	ldr	r3, [r4, #24]
   8489e:	b291      	uxth	r1, r2
   848a0:	0708      	lsls	r0, r1, #28
   848a2:	60a3      	str	r3, [r4, #8]
   848a4:	d539      	bpl.n	8491a <__swbuf_r+0x92>
   848a6:	6923      	ldr	r3, [r4, #16]
   848a8:	2b00      	cmp	r3, #0
   848aa:	d036      	beq.n	8491a <__swbuf_r+0x92>
   848ac:	b2ed      	uxtb	r5, r5
   848ae:	0489      	lsls	r1, r1, #18
   848b0:	462f      	mov	r7, r5
   848b2:	d515      	bpl.n	848e0 <__swbuf_r+0x58>
   848b4:	6822      	ldr	r2, [r4, #0]
   848b6:	6961      	ldr	r1, [r4, #20]
   848b8:	1ad3      	subs	r3, r2, r3
   848ba:	428b      	cmp	r3, r1
   848bc:	da1c      	bge.n	848f8 <__swbuf_r+0x70>
   848be:	3301      	adds	r3, #1
   848c0:	68a1      	ldr	r1, [r4, #8]
   848c2:	1c50      	adds	r0, r2, #1
   848c4:	3901      	subs	r1, #1
   848c6:	60a1      	str	r1, [r4, #8]
   848c8:	6020      	str	r0, [r4, #0]
   848ca:	7015      	strb	r5, [r2, #0]
   848cc:	6962      	ldr	r2, [r4, #20]
   848ce:	429a      	cmp	r2, r3
   848d0:	d01a      	beq.n	84908 <__swbuf_r+0x80>
   848d2:	89a3      	ldrh	r3, [r4, #12]
   848d4:	07db      	lsls	r3, r3, #31
   848d6:	d501      	bpl.n	848dc <__swbuf_r+0x54>
   848d8:	2d0a      	cmp	r5, #10
   848da:	d015      	beq.n	84908 <__swbuf_r+0x80>
   848dc:	4638      	mov	r0, r7
   848de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   848e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   848e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   848e6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   848ea:	81a2      	strh	r2, [r4, #12]
   848ec:	6822      	ldr	r2, [r4, #0]
   848ee:	6661      	str	r1, [r4, #100]	; 0x64
   848f0:	6961      	ldr	r1, [r4, #20]
   848f2:	1ad3      	subs	r3, r2, r3
   848f4:	428b      	cmp	r3, r1
   848f6:	dbe2      	blt.n	848be <__swbuf_r+0x36>
   848f8:	4621      	mov	r1, r4
   848fa:	4630      	mov	r0, r6
   848fc:	f7fe fd38 	bl	83370 <_fflush_r>
   84900:	b940      	cbnz	r0, 84914 <__swbuf_r+0x8c>
   84902:	2301      	movs	r3, #1
   84904:	6822      	ldr	r2, [r4, #0]
   84906:	e7db      	b.n	848c0 <__swbuf_r+0x38>
   84908:	4621      	mov	r1, r4
   8490a:	4630      	mov	r0, r6
   8490c:	f7fe fd30 	bl	83370 <_fflush_r>
   84910:	2800      	cmp	r0, #0
   84912:	d0e3      	beq.n	848dc <__swbuf_r+0x54>
   84914:	f04f 37ff 	mov.w	r7, #4294967295
   84918:	e7e0      	b.n	848dc <__swbuf_r+0x54>
   8491a:	4621      	mov	r1, r4
   8491c:	4630      	mov	r0, r6
   8491e:	f7fe fc17 	bl	83150 <__swsetup_r>
   84922:	2800      	cmp	r0, #0
   84924:	d1f6      	bne.n	84914 <__swbuf_r+0x8c>
   84926:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8492a:	6923      	ldr	r3, [r4, #16]
   8492c:	b291      	uxth	r1, r2
   8492e:	e7bd      	b.n	848ac <__swbuf_r+0x24>
   84930:	f7fe fd76 	bl	83420 <__sinit>
   84934:	e7b0      	b.n	84898 <__swbuf_r+0x10>
   84936:	bf00      	nop

00084938 <_wcrtomb_r>:
   84938:	b5f0      	push	{r4, r5, r6, r7, lr}
   8493a:	4606      	mov	r6, r0
   8493c:	b085      	sub	sp, #20
   8493e:	461f      	mov	r7, r3
   84940:	b189      	cbz	r1, 84966 <_wcrtomb_r+0x2e>
   84942:	4c10      	ldr	r4, [pc, #64]	; (84984 <_wcrtomb_r+0x4c>)
   84944:	4d10      	ldr	r5, [pc, #64]	; (84988 <_wcrtomb_r+0x50>)
   84946:	6824      	ldr	r4, [r4, #0]
   84948:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8494a:	2c00      	cmp	r4, #0
   8494c:	bf08      	it	eq
   8494e:	462c      	moveq	r4, r5
   84950:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84954:	47a0      	blx	r4
   84956:	1c43      	adds	r3, r0, #1
   84958:	d103      	bne.n	84962 <_wcrtomb_r+0x2a>
   8495a:	2200      	movs	r2, #0
   8495c:	238a      	movs	r3, #138	; 0x8a
   8495e:	603a      	str	r2, [r7, #0]
   84960:	6033      	str	r3, [r6, #0]
   84962:	b005      	add	sp, #20
   84964:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84966:	460c      	mov	r4, r1
   84968:	4a06      	ldr	r2, [pc, #24]	; (84984 <_wcrtomb_r+0x4c>)
   8496a:	4d07      	ldr	r5, [pc, #28]	; (84988 <_wcrtomb_r+0x50>)
   8496c:	6811      	ldr	r1, [r2, #0]
   8496e:	4622      	mov	r2, r4
   84970:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   84972:	a901      	add	r1, sp, #4
   84974:	2c00      	cmp	r4, #0
   84976:	bf08      	it	eq
   84978:	462c      	moveq	r4, r5
   8497a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8497e:	47a0      	blx	r4
   84980:	e7e9      	b.n	84956 <_wcrtomb_r+0x1e>
   84982:	bf00      	nop
   84984:	20070134 	.word	0x20070134
   84988:	20070564 	.word	0x20070564

0008498c <__ascii_wctomb>:
   8498c:	b119      	cbz	r1, 84996 <__ascii_wctomb+0xa>
   8498e:	2aff      	cmp	r2, #255	; 0xff
   84990:	d803      	bhi.n	8499a <__ascii_wctomb+0xe>
   84992:	700a      	strb	r2, [r1, #0]
   84994:	2101      	movs	r1, #1
   84996:	4608      	mov	r0, r1
   84998:	4770      	bx	lr
   8499a:	238a      	movs	r3, #138	; 0x8a
   8499c:	f04f 31ff 	mov.w	r1, #4294967295
   849a0:	6003      	str	r3, [r0, #0]
   849a2:	e7f8      	b.n	84996 <__ascii_wctomb+0xa>

000849a4 <_write_r>:
   849a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   849a6:	460e      	mov	r6, r1
   849a8:	2500      	movs	r5, #0
   849aa:	4c08      	ldr	r4, [pc, #32]	; (849cc <_write_r+0x28>)
   849ac:	4611      	mov	r1, r2
   849ae:	4607      	mov	r7, r0
   849b0:	461a      	mov	r2, r3
   849b2:	4630      	mov	r0, r6
   849b4:	6025      	str	r5, [r4, #0]
   849b6:	f7fb fecd 	bl	80754 <_write>
   849ba:	1c43      	adds	r3, r0, #1
   849bc:	d000      	beq.n	849c0 <_write_r+0x1c>
   849be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   849c0:	6823      	ldr	r3, [r4, #0]
   849c2:	2b00      	cmp	r3, #0
   849c4:	d0fb      	beq.n	849be <_write_r+0x1a>
   849c6:	603b      	str	r3, [r7, #0]
   849c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   849ca:	bf00      	nop
   849cc:	20071c8c 	.word	0x20071c8c

000849d0 <__register_exitproc>:
   849d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   849d4:	4d2c      	ldr	r5, [pc, #176]	; (84a88 <__register_exitproc+0xb8>)
   849d6:	4606      	mov	r6, r0
   849d8:	6828      	ldr	r0, [r5, #0]
   849da:	4698      	mov	r8, r3
   849dc:	460f      	mov	r7, r1
   849de:	4691      	mov	r9, r2
   849e0:	f7ff f8de 	bl	83ba0 <__retarget_lock_acquire_recursive>
   849e4:	4b29      	ldr	r3, [pc, #164]	; (84a8c <__register_exitproc+0xbc>)
   849e6:	681c      	ldr	r4, [r3, #0]
   849e8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   849ec:	2b00      	cmp	r3, #0
   849ee:	d03e      	beq.n	84a6e <__register_exitproc+0x9e>
   849f0:	685a      	ldr	r2, [r3, #4]
   849f2:	2a1f      	cmp	r2, #31
   849f4:	dc1c      	bgt.n	84a30 <__register_exitproc+0x60>
   849f6:	f102 0e01 	add.w	lr, r2, #1
   849fa:	b176      	cbz	r6, 84a1a <__register_exitproc+0x4a>
   849fc:	2101      	movs	r1, #1
   849fe:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   84a02:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   84a06:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84a0a:	4091      	lsls	r1, r2
   84a0c:	4308      	orrs	r0, r1
   84a0e:	2e02      	cmp	r6, #2
   84a10:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84a14:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84a18:	d023      	beq.n	84a62 <__register_exitproc+0x92>
   84a1a:	3202      	adds	r2, #2
   84a1c:	f8c3 e004 	str.w	lr, [r3, #4]
   84a20:	6828      	ldr	r0, [r5, #0]
   84a22:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   84a26:	f7ff f8bd 	bl	83ba4 <__retarget_lock_release_recursive>
   84a2a:	2000      	movs	r0, #0
   84a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84a30:	4b17      	ldr	r3, [pc, #92]	; (84a90 <__register_exitproc+0xc0>)
   84a32:	b30b      	cbz	r3, 84a78 <__register_exitproc+0xa8>
   84a34:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84a38:	f7ff f92e 	bl	83c98 <malloc>
   84a3c:	4603      	mov	r3, r0
   84a3e:	b1d8      	cbz	r0, 84a78 <__register_exitproc+0xa8>
   84a40:	2000      	movs	r0, #0
   84a42:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84a46:	f04f 0e01 	mov.w	lr, #1
   84a4a:	6058      	str	r0, [r3, #4]
   84a4c:	6019      	str	r1, [r3, #0]
   84a4e:	4602      	mov	r2, r0
   84a50:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84a54:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84a58:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84a5c:	2e00      	cmp	r6, #0
   84a5e:	d0dc      	beq.n	84a1a <__register_exitproc+0x4a>
   84a60:	e7cc      	b.n	849fc <__register_exitproc+0x2c>
   84a62:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84a66:	4301      	orrs	r1, r0
   84a68:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84a6c:	e7d5      	b.n	84a1a <__register_exitproc+0x4a>
   84a6e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84a72:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84a76:	e7bb      	b.n	849f0 <__register_exitproc+0x20>
   84a78:	6828      	ldr	r0, [r5, #0]
   84a7a:	f7ff f893 	bl	83ba4 <__retarget_lock_release_recursive>
   84a7e:	f04f 30ff 	mov.w	r0, #4294967295
   84a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84a86:	bf00      	nop
   84a88:	20070560 	.word	0x20070560
   84a8c:	00084f84 	.word	0x00084f84
   84a90:	00083c99 	.word	0x00083c99

00084a94 <_close_r>:
   84a94:	b538      	push	{r3, r4, r5, lr}
   84a96:	2300      	movs	r3, #0
   84a98:	4c06      	ldr	r4, [pc, #24]	; (84ab4 <_close_r+0x20>)
   84a9a:	4605      	mov	r5, r0
   84a9c:	4608      	mov	r0, r1
   84a9e:	6023      	str	r3, [r4, #0]
   84aa0:	f7fc fad0 	bl	81044 <_close>
   84aa4:	1c43      	adds	r3, r0, #1
   84aa6:	d000      	beq.n	84aaa <_close_r+0x16>
   84aa8:	bd38      	pop	{r3, r4, r5, pc}
   84aaa:	6823      	ldr	r3, [r4, #0]
   84aac:	2b00      	cmp	r3, #0
   84aae:	d0fb      	beq.n	84aa8 <_close_r+0x14>
   84ab0:	602b      	str	r3, [r5, #0]
   84ab2:	bd38      	pop	{r3, r4, r5, pc}
   84ab4:	20071c8c 	.word	0x20071c8c

00084ab8 <_fclose_r>:
   84ab8:	b570      	push	{r4, r5, r6, lr}
   84aba:	b159      	cbz	r1, 84ad4 <_fclose_r+0x1c>
   84abc:	4605      	mov	r5, r0
   84abe:	460c      	mov	r4, r1
   84ac0:	b110      	cbz	r0, 84ac8 <_fclose_r+0x10>
   84ac2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ac4:	2b00      	cmp	r3, #0
   84ac6:	d03c      	beq.n	84b42 <_fclose_r+0x8a>
   84ac8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84aca:	07d8      	lsls	r0, r3, #31
   84acc:	d505      	bpl.n	84ada <_fclose_r+0x22>
   84ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84ad2:	b92b      	cbnz	r3, 84ae0 <_fclose_r+0x28>
   84ad4:	2600      	movs	r6, #0
   84ad6:	4630      	mov	r0, r6
   84ad8:	bd70      	pop	{r4, r5, r6, pc}
   84ada:	89a3      	ldrh	r3, [r4, #12]
   84adc:	0599      	lsls	r1, r3, #22
   84ade:	d53c      	bpl.n	84b5a <_fclose_r+0xa2>
   84ae0:	4621      	mov	r1, r4
   84ae2:	4628      	mov	r0, r5
   84ae4:	f7fe fba8 	bl	83238 <__sflush_r>
   84ae8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84aea:	4606      	mov	r6, r0
   84aec:	b133      	cbz	r3, 84afc <_fclose_r+0x44>
   84aee:	69e1      	ldr	r1, [r4, #28]
   84af0:	4628      	mov	r0, r5
   84af2:	4798      	blx	r3
   84af4:	2800      	cmp	r0, #0
   84af6:	bfb8      	it	lt
   84af8:	f04f 36ff 	movlt.w	r6, #4294967295
   84afc:	89a3      	ldrh	r3, [r4, #12]
   84afe:	061a      	lsls	r2, r3, #24
   84b00:	d422      	bmi.n	84b48 <_fclose_r+0x90>
   84b02:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84b04:	b141      	cbz	r1, 84b18 <_fclose_r+0x60>
   84b06:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84b0a:	4299      	cmp	r1, r3
   84b0c:	d002      	beq.n	84b14 <_fclose_r+0x5c>
   84b0e:	4628      	mov	r0, r5
   84b10:	f7fe fdac 	bl	8366c <_free_r>
   84b14:	2300      	movs	r3, #0
   84b16:	6323      	str	r3, [r4, #48]	; 0x30
   84b18:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84b1a:	b121      	cbz	r1, 84b26 <_fclose_r+0x6e>
   84b1c:	4628      	mov	r0, r5
   84b1e:	f7fe fda5 	bl	8366c <_free_r>
   84b22:	2300      	movs	r3, #0
   84b24:	6463      	str	r3, [r4, #68]	; 0x44
   84b26:	f7fe fcab 	bl	83480 <__sfp_lock_acquire>
   84b2a:	2200      	movs	r2, #0
   84b2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84b2e:	81a2      	strh	r2, [r4, #12]
   84b30:	07db      	lsls	r3, r3, #31
   84b32:	d50e      	bpl.n	84b52 <_fclose_r+0x9a>
   84b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b36:	f7ff f831 	bl	83b9c <__retarget_lock_close_recursive>
   84b3a:	f7fe fca7 	bl	8348c <__sfp_lock_release>
   84b3e:	4630      	mov	r0, r6
   84b40:	bd70      	pop	{r4, r5, r6, pc}
   84b42:	f7fe fc6d 	bl	83420 <__sinit>
   84b46:	e7bf      	b.n	84ac8 <_fclose_r+0x10>
   84b48:	6921      	ldr	r1, [r4, #16]
   84b4a:	4628      	mov	r0, r5
   84b4c:	f7fe fd8e 	bl	8366c <_free_r>
   84b50:	e7d7      	b.n	84b02 <_fclose_r+0x4a>
   84b52:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b54:	f7ff f826 	bl	83ba4 <__retarget_lock_release_recursive>
   84b58:	e7ec      	b.n	84b34 <_fclose_r+0x7c>
   84b5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b5c:	f7ff f820 	bl	83ba0 <__retarget_lock_acquire_recursive>
   84b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84b64:	2b00      	cmp	r3, #0
   84b66:	d1bb      	bne.n	84ae0 <_fclose_r+0x28>
   84b68:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84b6a:	f016 0601 	ands.w	r6, r6, #1
   84b6e:	d1b1      	bne.n	84ad4 <_fclose_r+0x1c>
   84b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84b72:	f7ff f817 	bl	83ba4 <__retarget_lock_release_recursive>
   84b76:	4630      	mov	r0, r6
   84b78:	bd70      	pop	{r4, r5, r6, pc}
   84b7a:	bf00      	nop

00084b7c <_fstat_r>:
   84b7c:	b570      	push	{r4, r5, r6, lr}
   84b7e:	460d      	mov	r5, r1
   84b80:	2300      	movs	r3, #0
   84b82:	4c07      	ldr	r4, [pc, #28]	; (84ba0 <_fstat_r+0x24>)
   84b84:	4606      	mov	r6, r0
   84b86:	4611      	mov	r1, r2
   84b88:	4628      	mov	r0, r5
   84b8a:	6023      	str	r3, [r4, #0]
   84b8c:	f7fc fa5d 	bl	8104a <_fstat>
   84b90:	1c43      	adds	r3, r0, #1
   84b92:	d000      	beq.n	84b96 <_fstat_r+0x1a>
   84b94:	bd70      	pop	{r4, r5, r6, pc}
   84b96:	6823      	ldr	r3, [r4, #0]
   84b98:	2b00      	cmp	r3, #0
   84b9a:	d0fb      	beq.n	84b94 <_fstat_r+0x18>
   84b9c:	6033      	str	r3, [r6, #0]
   84b9e:	bd70      	pop	{r4, r5, r6, pc}
   84ba0:	20071c8c 	.word	0x20071c8c

00084ba4 <_isatty_r>:
   84ba4:	b538      	push	{r3, r4, r5, lr}
   84ba6:	2300      	movs	r3, #0
   84ba8:	4c06      	ldr	r4, [pc, #24]	; (84bc4 <_isatty_r+0x20>)
   84baa:	4605      	mov	r5, r0
   84bac:	4608      	mov	r0, r1
   84bae:	6023      	str	r3, [r4, #0]
   84bb0:	f7fc fa50 	bl	81054 <_isatty>
   84bb4:	1c43      	adds	r3, r0, #1
   84bb6:	d000      	beq.n	84bba <_isatty_r+0x16>
   84bb8:	bd38      	pop	{r3, r4, r5, pc}
   84bba:	6823      	ldr	r3, [r4, #0]
   84bbc:	2b00      	cmp	r3, #0
   84bbe:	d0fb      	beq.n	84bb8 <_isatty_r+0x14>
   84bc0:	602b      	str	r3, [r5, #0]
   84bc2:	bd38      	pop	{r3, r4, r5, pc}
   84bc4:	20071c8c 	.word	0x20071c8c

00084bc8 <_lseek_r>:
   84bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84bca:	460e      	mov	r6, r1
   84bcc:	2500      	movs	r5, #0
   84bce:	4c08      	ldr	r4, [pc, #32]	; (84bf0 <_lseek_r+0x28>)
   84bd0:	4611      	mov	r1, r2
   84bd2:	4607      	mov	r7, r0
   84bd4:	461a      	mov	r2, r3
   84bd6:	4630      	mov	r0, r6
   84bd8:	6025      	str	r5, [r4, #0]
   84bda:	f7fc fa3d 	bl	81058 <_lseek>
   84bde:	1c43      	adds	r3, r0, #1
   84be0:	d000      	beq.n	84be4 <_lseek_r+0x1c>
   84be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84be4:	6823      	ldr	r3, [r4, #0]
   84be6:	2b00      	cmp	r3, #0
   84be8:	d0fb      	beq.n	84be2 <_lseek_r+0x1a>
   84bea:	603b      	str	r3, [r7, #0]
   84bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84bee:	bf00      	nop
   84bf0:	20071c8c 	.word	0x20071c8c

00084bf4 <_read_r>:
   84bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84bf6:	460e      	mov	r6, r1
   84bf8:	2500      	movs	r5, #0
   84bfa:	4c08      	ldr	r4, [pc, #32]	; (84c1c <_read_r+0x28>)
   84bfc:	4611      	mov	r1, r2
   84bfe:	4607      	mov	r7, r0
   84c00:	461a      	mov	r2, r3
   84c02:	4630      	mov	r0, r6
   84c04:	6025      	str	r5, [r4, #0]
   84c06:	f7fb fcdd 	bl	805c4 <_read>
   84c0a:	1c43      	adds	r3, r0, #1
   84c0c:	d000      	beq.n	84c10 <_read_r+0x1c>
   84c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c10:	6823      	ldr	r3, [r4, #0]
   84c12:	2b00      	cmp	r3, #0
   84c14:	d0fb      	beq.n	84c0e <_read_r+0x1a>
   84c16:	603b      	str	r3, [r7, #0]
   84c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c1a:	bf00      	nop
   84c1c:	20071c8c 	.word	0x20071c8c

00084c20 <__aeabi_uldivmod>:
   84c20:	b953      	cbnz	r3, 84c38 <__aeabi_uldivmod+0x18>
   84c22:	b94a      	cbnz	r2, 84c38 <__aeabi_uldivmod+0x18>
   84c24:	2900      	cmp	r1, #0
   84c26:	bf08      	it	eq
   84c28:	2800      	cmpeq	r0, #0
   84c2a:	bf1c      	itt	ne
   84c2c:	f04f 31ff 	movne.w	r1, #4294967295
   84c30:	f04f 30ff 	movne.w	r0, #4294967295
   84c34:	f000 b97a 	b.w	84f2c <__aeabi_idiv0>
   84c38:	f1ad 0c08 	sub.w	ip, sp, #8
   84c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   84c40:	f000 f806 	bl	84c50 <__udivmoddi4>
   84c44:	f8dd e004 	ldr.w	lr, [sp, #4]
   84c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   84c4c:	b004      	add	sp, #16
   84c4e:	4770      	bx	lr

00084c50 <__udivmoddi4>:
   84c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84c54:	468c      	mov	ip, r1
   84c56:	460e      	mov	r6, r1
   84c58:	4604      	mov	r4, r0
   84c5a:	9d08      	ldr	r5, [sp, #32]
   84c5c:	2b00      	cmp	r3, #0
   84c5e:	d150      	bne.n	84d02 <__udivmoddi4+0xb2>
   84c60:	428a      	cmp	r2, r1
   84c62:	4617      	mov	r7, r2
   84c64:	d96c      	bls.n	84d40 <__udivmoddi4+0xf0>
   84c66:	fab2 fe82 	clz	lr, r2
   84c6a:	f1be 0f00 	cmp.w	lr, #0
   84c6e:	d00b      	beq.n	84c88 <__udivmoddi4+0x38>
   84c70:	f1ce 0c20 	rsb	ip, lr, #32
   84c74:	fa01 f60e 	lsl.w	r6, r1, lr
   84c78:	fa20 fc0c 	lsr.w	ip, r0, ip
   84c7c:	fa02 f70e 	lsl.w	r7, r2, lr
   84c80:	ea4c 0c06 	orr.w	ip, ip, r6
   84c84:	fa00 f40e 	lsl.w	r4, r0, lr
   84c88:	0c3a      	lsrs	r2, r7, #16
   84c8a:	fbbc f9f2 	udiv	r9, ip, r2
   84c8e:	b2bb      	uxth	r3, r7
   84c90:	fb02 cc19 	mls	ip, r2, r9, ip
   84c94:	fb09 fa03 	mul.w	sl, r9, r3
   84c98:	ea4f 4814 	mov.w	r8, r4, lsr #16
   84c9c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   84ca0:	45b2      	cmp	sl, r6
   84ca2:	d90a      	bls.n	84cba <__udivmoddi4+0x6a>
   84ca4:	19f6      	adds	r6, r6, r7
   84ca6:	f109 31ff 	add.w	r1, r9, #4294967295
   84caa:	f080 8125 	bcs.w	84ef8 <__udivmoddi4+0x2a8>
   84cae:	45b2      	cmp	sl, r6
   84cb0:	f240 8122 	bls.w	84ef8 <__udivmoddi4+0x2a8>
   84cb4:	f1a9 0902 	sub.w	r9, r9, #2
   84cb8:	443e      	add	r6, r7
   84cba:	eba6 060a 	sub.w	r6, r6, sl
   84cbe:	fbb6 f0f2 	udiv	r0, r6, r2
   84cc2:	fb02 6610 	mls	r6, r2, r0, r6
   84cc6:	fb00 f303 	mul.w	r3, r0, r3
   84cca:	b2a4      	uxth	r4, r4
   84ccc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   84cd0:	42a3      	cmp	r3, r4
   84cd2:	d909      	bls.n	84ce8 <__udivmoddi4+0x98>
   84cd4:	19e4      	adds	r4, r4, r7
   84cd6:	f100 32ff 	add.w	r2, r0, #4294967295
   84cda:	f080 810b 	bcs.w	84ef4 <__udivmoddi4+0x2a4>
   84cde:	42a3      	cmp	r3, r4
   84ce0:	f240 8108 	bls.w	84ef4 <__udivmoddi4+0x2a4>
   84ce4:	3802      	subs	r0, #2
   84ce6:	443c      	add	r4, r7
   84ce8:	2100      	movs	r1, #0
   84cea:	1ae4      	subs	r4, r4, r3
   84cec:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84cf0:	2d00      	cmp	r5, #0
   84cf2:	d062      	beq.n	84dba <__udivmoddi4+0x16a>
   84cf4:	2300      	movs	r3, #0
   84cf6:	fa24 f40e 	lsr.w	r4, r4, lr
   84cfa:	602c      	str	r4, [r5, #0]
   84cfc:	606b      	str	r3, [r5, #4]
   84cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84d02:	428b      	cmp	r3, r1
   84d04:	d907      	bls.n	84d16 <__udivmoddi4+0xc6>
   84d06:	2d00      	cmp	r5, #0
   84d08:	d055      	beq.n	84db6 <__udivmoddi4+0x166>
   84d0a:	2100      	movs	r1, #0
   84d0c:	e885 0041 	stmia.w	r5, {r0, r6}
   84d10:	4608      	mov	r0, r1
   84d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84d16:	fab3 f183 	clz	r1, r3
   84d1a:	2900      	cmp	r1, #0
   84d1c:	f040 808f 	bne.w	84e3e <__udivmoddi4+0x1ee>
   84d20:	42b3      	cmp	r3, r6
   84d22:	d302      	bcc.n	84d2a <__udivmoddi4+0xda>
   84d24:	4282      	cmp	r2, r0
   84d26:	f200 80fc 	bhi.w	84f22 <__udivmoddi4+0x2d2>
   84d2a:	1a84      	subs	r4, r0, r2
   84d2c:	eb66 0603 	sbc.w	r6, r6, r3
   84d30:	2001      	movs	r0, #1
   84d32:	46b4      	mov	ip, r6
   84d34:	2d00      	cmp	r5, #0
   84d36:	d040      	beq.n	84dba <__udivmoddi4+0x16a>
   84d38:	e885 1010 	stmia.w	r5, {r4, ip}
   84d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84d40:	b912      	cbnz	r2, 84d48 <__udivmoddi4+0xf8>
   84d42:	2701      	movs	r7, #1
   84d44:	fbb7 f7f2 	udiv	r7, r7, r2
   84d48:	fab7 fe87 	clz	lr, r7
   84d4c:	f1be 0f00 	cmp.w	lr, #0
   84d50:	d135      	bne.n	84dbe <__udivmoddi4+0x16e>
   84d52:	2101      	movs	r1, #1
   84d54:	1bf6      	subs	r6, r6, r7
   84d56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84d5a:	fa1f f887 	uxth.w	r8, r7
   84d5e:	fbb6 f2fc 	udiv	r2, r6, ip
   84d62:	fb0c 6612 	mls	r6, ip, r2, r6
   84d66:	fb08 f002 	mul.w	r0, r8, r2
   84d6a:	0c23      	lsrs	r3, r4, #16
   84d6c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   84d70:	42b0      	cmp	r0, r6
   84d72:	d907      	bls.n	84d84 <__udivmoddi4+0x134>
   84d74:	19f6      	adds	r6, r6, r7
   84d76:	f102 33ff 	add.w	r3, r2, #4294967295
   84d7a:	d202      	bcs.n	84d82 <__udivmoddi4+0x132>
   84d7c:	42b0      	cmp	r0, r6
   84d7e:	f200 80d2 	bhi.w	84f26 <__udivmoddi4+0x2d6>
   84d82:	461a      	mov	r2, r3
   84d84:	1a36      	subs	r6, r6, r0
   84d86:	fbb6 f0fc 	udiv	r0, r6, ip
   84d8a:	fb0c 6610 	mls	r6, ip, r0, r6
   84d8e:	fb08 f800 	mul.w	r8, r8, r0
   84d92:	b2a3      	uxth	r3, r4
   84d94:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   84d98:	45a0      	cmp	r8, r4
   84d9a:	d907      	bls.n	84dac <__udivmoddi4+0x15c>
   84d9c:	19e4      	adds	r4, r4, r7
   84d9e:	f100 33ff 	add.w	r3, r0, #4294967295
   84da2:	d202      	bcs.n	84daa <__udivmoddi4+0x15a>
   84da4:	45a0      	cmp	r8, r4
   84da6:	f200 80b9 	bhi.w	84f1c <__udivmoddi4+0x2cc>
   84daa:	4618      	mov	r0, r3
   84dac:	eba4 0408 	sub.w	r4, r4, r8
   84db0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   84db4:	e79c      	b.n	84cf0 <__udivmoddi4+0xa0>
   84db6:	4629      	mov	r1, r5
   84db8:	4628      	mov	r0, r5
   84dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84dbe:	fa07 f70e 	lsl.w	r7, r7, lr
   84dc2:	f1ce 0320 	rsb	r3, lr, #32
   84dc6:	fa26 f203 	lsr.w	r2, r6, r3
   84dca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84dce:	fbb2 f1fc 	udiv	r1, r2, ip
   84dd2:	fa1f f887 	uxth.w	r8, r7
   84dd6:	fb0c 2211 	mls	r2, ip, r1, r2
   84dda:	fa06 f60e 	lsl.w	r6, r6, lr
   84dde:	fa20 f303 	lsr.w	r3, r0, r3
   84de2:	fb01 f908 	mul.w	r9, r1, r8
   84de6:	4333      	orrs	r3, r6
   84de8:	0c1e      	lsrs	r6, r3, #16
   84dea:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   84dee:	45b1      	cmp	r9, r6
   84df0:	fa00 f40e 	lsl.w	r4, r0, lr
   84df4:	d909      	bls.n	84e0a <__udivmoddi4+0x1ba>
   84df6:	19f6      	adds	r6, r6, r7
   84df8:	f101 32ff 	add.w	r2, r1, #4294967295
   84dfc:	f080 808c 	bcs.w	84f18 <__udivmoddi4+0x2c8>
   84e00:	45b1      	cmp	r9, r6
   84e02:	f240 8089 	bls.w	84f18 <__udivmoddi4+0x2c8>
   84e06:	3902      	subs	r1, #2
   84e08:	443e      	add	r6, r7
   84e0a:	eba6 0609 	sub.w	r6, r6, r9
   84e0e:	fbb6 f0fc 	udiv	r0, r6, ip
   84e12:	fb0c 6210 	mls	r2, ip, r0, r6
   84e16:	fb00 f908 	mul.w	r9, r0, r8
   84e1a:	b29e      	uxth	r6, r3
   84e1c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   84e20:	45b1      	cmp	r9, r6
   84e22:	d907      	bls.n	84e34 <__udivmoddi4+0x1e4>
   84e24:	19f6      	adds	r6, r6, r7
   84e26:	f100 33ff 	add.w	r3, r0, #4294967295
   84e2a:	d271      	bcs.n	84f10 <__udivmoddi4+0x2c0>
   84e2c:	45b1      	cmp	r9, r6
   84e2e:	d96f      	bls.n	84f10 <__udivmoddi4+0x2c0>
   84e30:	3802      	subs	r0, #2
   84e32:	443e      	add	r6, r7
   84e34:	eba6 0609 	sub.w	r6, r6, r9
   84e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   84e3c:	e78f      	b.n	84d5e <__udivmoddi4+0x10e>
   84e3e:	f1c1 0720 	rsb	r7, r1, #32
   84e42:	fa22 f807 	lsr.w	r8, r2, r7
   84e46:	408b      	lsls	r3, r1
   84e48:	ea48 0303 	orr.w	r3, r8, r3
   84e4c:	fa26 f407 	lsr.w	r4, r6, r7
   84e50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   84e54:	fbb4 f9fe 	udiv	r9, r4, lr
   84e58:	fa1f fc83 	uxth.w	ip, r3
   84e5c:	fb0e 4419 	mls	r4, lr, r9, r4
   84e60:	408e      	lsls	r6, r1
   84e62:	fa20 f807 	lsr.w	r8, r0, r7
   84e66:	fb09 fa0c 	mul.w	sl, r9, ip
   84e6a:	ea48 0806 	orr.w	r8, r8, r6
   84e6e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   84e72:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   84e76:	45a2      	cmp	sl, r4
   84e78:	fa02 f201 	lsl.w	r2, r2, r1
   84e7c:	fa00 f601 	lsl.w	r6, r0, r1
   84e80:	d908      	bls.n	84e94 <__udivmoddi4+0x244>
   84e82:	18e4      	adds	r4, r4, r3
   84e84:	f109 30ff 	add.w	r0, r9, #4294967295
   84e88:	d244      	bcs.n	84f14 <__udivmoddi4+0x2c4>
   84e8a:	45a2      	cmp	sl, r4
   84e8c:	d942      	bls.n	84f14 <__udivmoddi4+0x2c4>
   84e8e:	f1a9 0902 	sub.w	r9, r9, #2
   84e92:	441c      	add	r4, r3
   84e94:	eba4 040a 	sub.w	r4, r4, sl
   84e98:	fbb4 f0fe 	udiv	r0, r4, lr
   84e9c:	fb0e 4410 	mls	r4, lr, r0, r4
   84ea0:	fb00 fc0c 	mul.w	ip, r0, ip
   84ea4:	fa1f f888 	uxth.w	r8, r8
   84ea8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   84eac:	45a4      	cmp	ip, r4
   84eae:	d907      	bls.n	84ec0 <__udivmoddi4+0x270>
   84eb0:	18e4      	adds	r4, r4, r3
   84eb2:	f100 3eff 	add.w	lr, r0, #4294967295
   84eb6:	d229      	bcs.n	84f0c <__udivmoddi4+0x2bc>
   84eb8:	45a4      	cmp	ip, r4
   84eba:	d927      	bls.n	84f0c <__udivmoddi4+0x2bc>
   84ebc:	3802      	subs	r0, #2
   84ebe:	441c      	add	r4, r3
   84ec0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84ec4:	fba0 8902 	umull	r8, r9, r0, r2
   84ec8:	eba4 0c0c 	sub.w	ip, r4, ip
   84ecc:	45cc      	cmp	ip, r9
   84ece:	46c2      	mov	sl, r8
   84ed0:	46ce      	mov	lr, r9
   84ed2:	d315      	bcc.n	84f00 <__udivmoddi4+0x2b0>
   84ed4:	d012      	beq.n	84efc <__udivmoddi4+0x2ac>
   84ed6:	b155      	cbz	r5, 84eee <__udivmoddi4+0x29e>
   84ed8:	ebb6 030a 	subs.w	r3, r6, sl
   84edc:	eb6c 060e 	sbc.w	r6, ip, lr
   84ee0:	fa06 f707 	lsl.w	r7, r6, r7
   84ee4:	40cb      	lsrs	r3, r1
   84ee6:	431f      	orrs	r7, r3
   84ee8:	40ce      	lsrs	r6, r1
   84eea:	602f      	str	r7, [r5, #0]
   84eec:	606e      	str	r6, [r5, #4]
   84eee:	2100      	movs	r1, #0
   84ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84ef4:	4610      	mov	r0, r2
   84ef6:	e6f7      	b.n	84ce8 <__udivmoddi4+0x98>
   84ef8:	4689      	mov	r9, r1
   84efa:	e6de      	b.n	84cba <__udivmoddi4+0x6a>
   84efc:	4546      	cmp	r6, r8
   84efe:	d2ea      	bcs.n	84ed6 <__udivmoddi4+0x286>
   84f00:	ebb8 0a02 	subs.w	sl, r8, r2
   84f04:	eb69 0e03 	sbc.w	lr, r9, r3
   84f08:	3801      	subs	r0, #1
   84f0a:	e7e4      	b.n	84ed6 <__udivmoddi4+0x286>
   84f0c:	4670      	mov	r0, lr
   84f0e:	e7d7      	b.n	84ec0 <__udivmoddi4+0x270>
   84f10:	4618      	mov	r0, r3
   84f12:	e78f      	b.n	84e34 <__udivmoddi4+0x1e4>
   84f14:	4681      	mov	r9, r0
   84f16:	e7bd      	b.n	84e94 <__udivmoddi4+0x244>
   84f18:	4611      	mov	r1, r2
   84f1a:	e776      	b.n	84e0a <__udivmoddi4+0x1ba>
   84f1c:	3802      	subs	r0, #2
   84f1e:	443c      	add	r4, r7
   84f20:	e744      	b.n	84dac <__udivmoddi4+0x15c>
   84f22:	4608      	mov	r0, r1
   84f24:	e706      	b.n	84d34 <__udivmoddi4+0xe4>
   84f26:	3a02      	subs	r2, #2
   84f28:	443e      	add	r6, r7
   84f2a:	e72b      	b.n	84d84 <__udivmoddi4+0x134>

00084f2c <__aeabi_idiv0>:
   84f2c:	4770      	bx	lr
   84f2e:	bf00      	nop
   84f30:	71657246 	.word	0x71657246
   84f34:	636e6575 	.word	0x636e6575
   84f38:	25203a79 	.word	0x25203a79
   84f3c:	4820756c 	.word	0x4820756c
   84f40:	00000a7a 	.word	0x00000a7a
   84f44:	656d6954 	.word	0x656d6954
   84f48:	61682072 	.word	0x61682072
   84f4c:	6f6e2073 	.word	0x6f6e2073
   84f50:	65622074 	.word	0x65622074
   84f54:	63206e65 	.word	0x63206e65
   84f58:	69666e6f 	.word	0x69666e6f
   84f5c:	65727567 	.word	0x65727567
   84f60:	00002164 	.word	0x00002164
   84f64:	736e6f43 	.word	0x736e6f43
   84f68:	20656c6f 	.word	0x20656c6f
   84f6c:	64616572 	.word	0x64616572
   84f70:	00000a79 	.word	0x00000a79
   84f74:	3d3d3d3d 	.word	0x3d3d3d3d
   84f78:	3d3d3d3d 	.word	0x3d3d3d3d
   84f7c:	3d3d3d3d 	.word	0x3d3d3d3d
   84f80:	00000a3d 	.word	0x00000a3d

00084f84 <_global_impure_ptr>:
   84f84:	20070138 0000000a 33323130 37363534     8.. ....01234567
   84f94:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   84fa4:	37363534 62613938 66656463 00000000     456789abcdef....
   84fb4:	6c756e28 0000296c                       (null)..

00084fbc <blanks.7217>:
   84fbc:	20202020 20202020 20202020 20202020                     

00084fcc <zeroes.7218>:
   84fcc:	30303030 30303030 30303030 30303030     0000000000000000
   84fdc:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00084fec <_ctype_>:
   84fec:	20202000 20202020 28282020 20282828     .         ((((( 
   84ffc:	20202020 20202020 20202020 20202020                     
   8500c:	10108820 10101010 10101010 10101010      ...............
   8501c:	04040410 04040404 10040404 10101010     ................
   8502c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8503c:	01010101 01010101 01010101 10101010     ................
   8504c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8505c:	02020202 02020202 02020202 10101010     ................
   8506c:	00000020 00000000 00000000 00000000      ...............
	...

000850f0 <_init>:
   850f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   850f2:	bf00      	nop
   850f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   850f6:	bc08      	pop	{r3}
   850f8:	469e      	mov	lr, r3
   850fa:	4770      	bx	lr

000850fc <__init_array_start>:
   850fc:	00083219 	.word	0x00083219

00085100 <__frame_dummy_init_array_entry>:
   85100:	00080119                                ....

00085104 <_fini>:
   85104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85106:	bf00      	nop
   85108:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8510a:	bc08      	pop	{r3}
   8510c:	469e      	mov	lr, r3
   8510e:	4770      	bx	lr

00085110 <__fini_array_start>:
   85110:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20071c68                                h.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	0008498d 000841ed 00000000 00084fec     .I...A.......O..
20070654:	00084fe8 00084f9c 00084f9c 00084f9c     .O...O...O...O..
20070664:	00084f9c 00084f9c 00084f9c 00084f9c     .O...O...O...O..
20070674:	00084f9c 00084f9c ffffffff ffffffff     .O...O..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
