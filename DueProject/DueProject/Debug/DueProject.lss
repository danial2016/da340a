
DueProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004484  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084484  00084484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  0008448c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000011a4  20070ae0  00084f6c  00020ae0  2**2
                  ALLOC
  4 .stack        00002004  20071c84  00086110  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   000192a2  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003a12  00000000  00000000  00039e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005222  00000000  00000000  0003d816  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c18  00000000  00000000  00042a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b70  00000000  00000000  00043650  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001aa72  00000000  00000000  000441c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000116ad  00000000  00000000  0005ec32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006619e  00000000  00000000  000702df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000027c4  00000000  00000000  000d6480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	88 3c 07 20 21 0a 08 00 1d 0a 08 00 1d 0a 08 00     .<. !...........
   80010:	1d 0a 08 00 1d 0a 08 00 1d 0a 08 00 00 00 00 00     ................
	...
   8002c:	1d 0a 08 00 1d 0a 08 00 00 00 00 00 1d 0a 08 00     ................
   8003c:	1d 0a 08 00 1d 0a 08 00 1d 0a 08 00 1d 0a 08 00     ................
   8004c:	1d 0a 08 00 1d 0a 08 00 1d 0a 08 00 1d 0a 08 00     ................
   8005c:	1d 0a 08 00 1d 0a 08 00 1d 0a 08 00 00 00 00 00     ................
   8006c:	91 08 08 00 a5 08 08 00 b9 08 08 00 cd 08 08 00     ................
	...
   80084:	81 03 08 00 1d 0a 08 00 1d 0a 08 00 1d 0a 08 00     ................
   80094:	1d 0a 08 00 1d 0a 08 00 1d 0a 08 00 1d 0a 08 00     ................
   800a4:	00 00 00 00 1d 0a 08 00 61 01 08 00 1d 0a 08 00     ........a.......
   800b4:	1d 0a 08 00 1d 0a 08 00 1d 0a 08 00 1d 0a 08 00     ................
   800c4:	1d 0a 08 00 1d 0a 08 00 1d 0a 08 00 1d 0a 08 00     ................
   800d4:	41 02 08 00 1d 0a 08 00 1d 0a 08 00 1d 0a 08 00     A...............
   800e4:	1d 0a 08 00 1d 0a 08 00 1d 0a 08 00 1d 0a 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	0008448c 	.word	0x0008448c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008448c 	.word	0x0008448c
   80154:	20070ae4 	.word	0x20070ae4
   80158:	0008448c 	.word	0x0008448c
   8015c:	00000000 	.word	0x00000000

00080160 <TC0_Handler>:

/**
 *  Interrupt handler for TC0 interrupt.
 */
void TC0_Handler(void)
{
   80160:	b500      	push	{lr}
   80162:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);			//The compare bit is cleared by reading the register, manual p. 915
   80164:	2100      	movs	r1, #0
   80166:	4805      	ldr	r0, [pc, #20]	; (8017c <TC0_Handler+0x1c>)
   80168:	4b05      	ldr	r3, [pc, #20]	; (80180 <TC0_Handler+0x20>)
   8016a:	4798      	blx	r3
   8016c:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   8016e:	9b01      	ldr	r3, [sp, #4]
	
	adc_start(ADC);
   80170:	4804      	ldr	r0, [pc, #16]	; (80184 <TC0_Handler+0x24>)
   80172:	4b05      	ldr	r3, [pc, #20]	; (80188 <TC0_Handler+0x28>)
   80174:	4798      	blx	r3
	
}
   80176:	b003      	add	sp, #12
   80178:	f85d fb04 	ldr.w	pc, [sp], #4
   8017c:	40080000 	.word	0x40080000
   80180:	0008034b 	.word	0x0008034b
   80184:	400c0000 	.word	0x400c0000
   80188:	00080341 	.word	0x00080341

0008018c <smooth_values>:
	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
}

static void smooth_values(uint16_t *buffer)
{
   8018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80190:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
   80194:	b085      	sub	sp, #20
   80196:	f1a0 0802 	sub.w	r8, r0, #2
   8019a:	f10d 050e 	add.w	r5, sp, #14
   8019e:	f50d 5b80 	add.w	fp, sp, #4096	; 0x1000
   801a2:	f10b 0b0e 	add.w	fp, fp, #14
   801a6:	4b20      	ldr	r3, [pc, #128]	; (80228 <smooth_values+0x9c>)
   801a8:	685a      	ldr	r2, [r3, #4]
   801aa:	9200      	str	r2, [sp, #0]
   801ac:	681b      	ldr	r3, [r3, #0]
		for(int k = M-1; k >= 0; k--)
		{
			xbuff[k+1] = xbuff[k];
		}
		invalue = buffer[i];
		xbuff[0] =(float)invalue;
   801ae:	462c      	mov	r4, r5
   801b0:	46c1      	mov	r9, r8
		float sum = 0;
		// Construct sum 
		for(int j = 0; j <= M; j++){
			sum += (xbuff[j]*b[j]);
   801b2:	4f1e      	ldr	r7, [pc, #120]	; (8022c <smooth_values+0xa0>)
   801b4:	4e1e      	ldr	r6, [pc, #120]	; (80230 <smooth_values+0xa4>)
		}
		outvalue = (uint16_t)sum;
   801b6:	f8df a084 	ldr.w	sl, [pc, #132]	; 8023c <smooth_values+0xb0>
   801ba:	9502      	str	r5, [sp, #8]
   801bc:	461d      	mov	r5, r3
   801be:	f8cd 800c 	str.w	r8, [sp, #12]
   801c2:	e001      	b.n	801c8 <smooth_values+0x3c>
			xbuff[k+1] = xbuff[k];
   801c4:	9500      	str	r5, [sp, #0]
		xbuff[0] =(float)invalue;
   801c6:	9d01      	ldr	r5, [sp, #4]
   801c8:	f839 0f02 	ldrh.w	r0, [r9, #2]!
   801cc:	4b19      	ldr	r3, [pc, #100]	; (80234 <smooth_values+0xa8>)
   801ce:	4798      	blx	r3
   801d0:	9001      	str	r0, [sp, #4]
			sum += (xbuff[j]*b[j]);
   801d2:	4919      	ldr	r1, [pc, #100]	; (80238 <smooth_values+0xac>)
   801d4:	47b8      	blx	r7
   801d6:	2100      	movs	r1, #0
   801d8:	47b0      	blx	r6
   801da:	4680      	mov	r8, r0
   801dc:	4916      	ldr	r1, [pc, #88]	; (80238 <smooth_values+0xac>)
   801de:	4628      	mov	r0, r5
   801e0:	47b8      	blx	r7
   801e2:	4641      	mov	r1, r8
   801e4:	47b0      	blx	r6
   801e6:	4680      	mov	r8, r0
   801e8:	4913      	ldr	r1, [pc, #76]	; (80238 <smooth_values+0xac>)
   801ea:	9800      	ldr	r0, [sp, #0]
   801ec:	47b8      	blx	r7
   801ee:	4641      	mov	r1, r8
   801f0:	47b0      	blx	r6
		outvalue = (uint16_t)sum;
   801f2:	47d0      	blx	sl
   801f4:	f824 0f02 	strh.w	r0, [r4, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   801f8:	455c      	cmp	r4, fp
   801fa:	d1e3      	bne.n	801c4 <smooth_values+0x38>
   801fc:	462a      	mov	r2, r5
   801fe:	9d02      	ldr	r5, [sp, #8]
   80200:	f8dd 800c 	ldr.w	r8, [sp, #12]
   80204:	4b08      	ldr	r3, [pc, #32]	; (80228 <smooth_values+0x9c>)
   80206:	605a      	str	r2, [r3, #4]
   80208:	9a00      	ldr	r2, [sp, #0]
   8020a:	609a      	str	r2, [r3, #8]
   8020c:	9a01      	ldr	r2, [sp, #4]
   8020e:	601a      	str	r2, [r3, #0]
	//Copy values of temp_buff into old buffer
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
	{
		uint16_t *ip;       /* ip is a pointer to uint16_t */
		ip = &buffer[i];    /* sets ip to point to element i of buffer (contains address of buffer[i]) */
		*ip = temp_buff[i]; /* *ip points to content of buffer[i], this will change content of buffer[i] */
   80210:	f835 3f02 	ldrh.w	r3, [r5, #2]!
   80214:	f828 3f02 	strh.w	r3, [r8, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80218:	42ac      	cmp	r4, r5
   8021a:	d1f9      	bne.n	80210 <smooth_values+0x84>
	}
}
   8021c:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
   80220:	b005      	add	sp, #20
   80222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80226:	bf00      	nop
   80228:	20070afc 	.word	0x20070afc
   8022c:	00081065 	.word	0x00081065
   80230:	00080e55 	.word	0x00080e55
   80234:	00080fb5 	.word	0x00080fb5
   80238:	3eaaa64c 	.word	0x3eaaa64c
   8023c:	00081305 	.word	0x00081305

00080240 <ADC_Handler>:

void ADC_Handler(void){
   80240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Data transfer has been stopped (is complete) and RXBUFF status flag is set because ADC_RCR
	* and the ADC_RNCR have reached zero. Buffer of sample values is full.
	*/
	if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF) {
   80244:	4826      	ldr	r0, [pc, #152]	; (802e0 <ADC_Handler+0xa0>)
   80246:	4b27      	ldr	r3, [pc, #156]	; (802e4 <ADC_Handler+0xa4>)
   80248:	4798      	blx	r3
   8024a:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   8024e:	d037      	beq.n	802c0 <ADC_Handler+0x80>
   80250:	4d25      	ldr	r5, [pc, #148]	; (802e8 <ADC_Handler+0xa8>)
   80252:	462e      	mov	r6, r5
   80254:	2400      	movs	r4, #0
		
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
		{
			printf("Buffer values: %u, index: %u\n", adc_buffer_sample_values[i], i);
   80256:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80300 <ADC_Handler+0xc0>
   8025a:	4f24      	ldr	r7, [pc, #144]	; (802ec <ADC_Handler+0xac>)
   8025c:	4622      	mov	r2, r4
   8025e:	f836 1f02 	ldrh.w	r1, [r6, #2]!
   80262:	4640      	mov	r0, r8
   80264:	47b8      	blx	r7
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80266:	3401      	adds	r4, #1
   80268:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   8026c:	d1f6      	bne.n	8025c <ADC_Handler+0x1c>
		}
		smooth_values(adc_buffer_sample_values);
   8026e:	4820      	ldr	r0, [pc, #128]	; (802f0 <ADC_Handler+0xb0>)
   80270:	4b20      	ldr	r3, [pc, #128]	; (802f4 <ADC_Handler+0xb4>)
   80272:	4798      	blx	r3
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80274:	2400      	movs	r4, #0
		{
			printf("Temp buffer: %u, index: %u\n", adc_buffer_sample_values[i], i);
   80276:	4f20      	ldr	r7, [pc, #128]	; (802f8 <ADC_Handler+0xb8>)
   80278:	4e1c      	ldr	r6, [pc, #112]	; (802ec <ADC_Handler+0xac>)
   8027a:	4622      	mov	r2, r4
   8027c:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   80280:	4638      	mov	r0, r7
   80282:	47b0      	blx	r6
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80284:	3401      	adds	r4, #1
   80286:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   8028a:	d1f6      	bne.n	8027a <ADC_Handler+0x3a>
		}
		
		/* Clear sample buffer */
		memset((void *)&adc_buffer_sample_values, 0, sizeof(adc_buffer_sample_values));
   8028c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80290:	2100      	movs	r1, #0
   80292:	4817      	ldr	r0, [pc, #92]	; (802f0 <ADC_Handler+0xb0>)
   80294:	4b19      	ldr	r3, [pc, #100]	; (802fc <ADC_Handler+0xbc>)
   80296:	4798      	blx	r3
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
   80298:	4b11      	ldr	r3, [pc, #68]	; (802e0 <ADC_Handler+0xa0>)
   8029a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   8029e:	b91b      	cbnz	r3, 802a8 <ADC_Handler+0x68>
   802a0:	4b0f      	ldr	r3, [pc, #60]	; (802e0 <ADC_Handler+0xa0>)
   802a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   802a6:	b16b      	cbz	r3, 802c4 <ADC_Handler+0x84>
		if (p_adc->ADC_RNCR == 0)
   802a8:	4b0d      	ldr	r3, [pc, #52]	; (802e0 <ADC_Handler+0xa0>)
   802aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   802ae:	b93b      	cbnz	r3, 802c0 <ADC_Handler+0x80>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer; /* Receive Next Pointer Register */
   802b0:	4b0b      	ldr	r3, [pc, #44]	; (802e0 <ADC_Handler+0xa0>)
   802b2:	4a0f      	ldr	r2, [pc, #60]	; (802f0 <ADC_Handler+0xb0>)
   802b4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;               /* Receive Next Counter Register */
   802b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   802bc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   802c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		p_adc->ADC_RPR = (uint32_t) p_s_buffer; /* Receive Pointer Register */
   802c4:	4b06      	ldr	r3, [pc, #24]	; (802e0 <ADC_Handler+0xa0>)
   802c6:	4a0a      	ldr	r2, [pc, #40]	; (802f0 <ADC_Handler+0xb0>)
   802c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;               /* Receive Counter Register */
   802cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   802d0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN; /*ADC_PTCR = Transfer Control Register, RXTEN: Receiver Transfer Enable */
   802d4:	2201      	movs	r2, #1
   802d6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   802da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802de:	bf00      	nop
   802e0:	400c0000 	.word	0x400c0000
   802e4:	00080347 	.word	0x00080347
   802e8:	20070c4e 	.word	0x20070c4e
   802ec:	00081395 	.word	0x00081395
   802f0:	20070c50 	.word	0x20070c50
   802f4:	0008018d 	.word	0x0008018d
   802f8:	00084290 	.word	0x00084290
   802fc:	000813bd 	.word	0x000813bd
   80300:	00084270 	.word	0x00084270

00080304 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80308:	b980      	cbnz	r0, 8032c <_read+0x28>
   8030a:	460c      	mov	r4, r1
   8030c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8030e:	2a00      	cmp	r2, #0
   80310:	dd0f      	ble.n	80332 <_read+0x2e>
   80312:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80314:	4e08      	ldr	r6, [pc, #32]	; (80338 <_read+0x34>)
   80316:	4d09      	ldr	r5, [pc, #36]	; (8033c <_read+0x38>)
   80318:	6830      	ldr	r0, [r6, #0]
   8031a:	4621      	mov	r1, r4
   8031c:	682b      	ldr	r3, [r5, #0]
   8031e:	4798      	blx	r3
		ptr++;
   80320:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   80322:	42bc      	cmp	r4, r7
   80324:	d1f8      	bne.n	80318 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80326:	4640      	mov	r0, r8
   80328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8032c:	f04f 38ff 	mov.w	r8, #4294967295
   80330:	e7f9      	b.n	80326 <_read+0x22>
	for (; len > 0; --len) {
   80332:	4680      	mov	r8, r0
   80334:	e7f7      	b.n	80326 <_read+0x22>
   80336:	bf00      	nop
   80338:	20071c58 	.word	0x20071c58
   8033c:	20071c50 	.word	0x20071c50

00080340 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   80340:	2302      	movs	r3, #2
   80342:	6003      	str	r3, [r0, #0]
   80344:	4770      	bx	lr

00080346 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80346:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80348:	4770      	bx	lr

0008034a <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8034a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   8034e:	6a08      	ldr	r0, [r1, #32]
}
   80350:	4770      	bx	lr

00080352 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80352:	6943      	ldr	r3, [r0, #20]
   80354:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80358:	bf1d      	ittte	ne
   8035a:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8035e:	61c1      	strne	r1, [r0, #28]
	return 0;
   80360:	2000      	movne	r0, #0
		return 1;
   80362:	2001      	moveq	r0, #1
}
   80364:	4770      	bx	lr

00080366 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80366:	6943      	ldr	r3, [r0, #20]
   80368:	f013 0f01 	tst.w	r3, #1
   8036c:	d005      	beq.n	8037a <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8036e:	6983      	ldr	r3, [r0, #24]
   80370:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80374:	600b      	str	r3, [r1, #0]

	return 0;
   80376:	2000      	movs	r0, #0
   80378:	4770      	bx	lr
		return 1;
   8037a:	2001      	movs	r0, #1
}
   8037c:	4770      	bx	lr
	...

00080380 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80380:	b500      	push	{lr}
   80382:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   80384:	2201      	movs	r2, #1
   80386:	f10d 0107 	add.w	r1, sp, #7
   8038a:	4810      	ldr	r0, [pc, #64]	; (803cc <USART0_Handler+0x4c>)
   8038c:	4b10      	ldr	r3, [pc, #64]	; (803d0 <USART0_Handler+0x50>)
   8038e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80390:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80392:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80396:	2200      	movs	r2, #0
   80398:	4b0e      	ldr	r3, [pc, #56]	; (803d4 <USART0_Handler+0x54>)
   8039a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8039c:	4b0e      	ldr	r3, [pc, #56]	; (803d8 <USART0_Handler+0x58>)
   8039e:	781b      	ldrb	r3, [r3, #0]
   803a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803a4:	4a0d      	ldr	r2, [pc, #52]	; (803dc <USART0_Handler+0x5c>)
   803a6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   803a8:	2b9b      	cmp	r3, #155	; 0x9b
   803aa:	d00b      	beq.n	803c4 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   803ac:	3301      	adds	r3, #1
   803ae:	4a0a      	ldr	r2, [pc, #40]	; (803d8 <USART0_Handler+0x58>)
   803b0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   803b2:	2201      	movs	r2, #1
   803b4:	4b07      	ldr	r3, [pc, #28]	; (803d4 <USART0_Handler+0x54>)
   803b6:	701a      	strb	r2, [r3, #0]
   803b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   803bc:	b662      	cpsie	i
}
   803be:	b003      	add	sp, #12
   803c0:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   803c4:	2200      	movs	r2, #0
   803c6:	4b04      	ldr	r3, [pc, #16]	; (803d8 <USART0_Handler+0x58>)
   803c8:	701a      	strb	r2, [r3, #0]
   803ca:	e7f2      	b.n	803b2 <USART0_Handler+0x32>
   803cc:	40098000 	.word	0x40098000
   803d0:	00080431 	.word	0x00080431
   803d4:	2007012c 	.word	0x2007012c
   803d8:	20070ba4 	.word	0x20070ba4
   803dc:	20070b08 	.word	0x20070b08

000803e0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   803e0:	3801      	subs	r0, #1
   803e2:	2802      	cmp	r0, #2
   803e4:	d815      	bhi.n	80412 <_write+0x32>
{
   803e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803ea:	460e      	mov	r6, r1
   803ec:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   803ee:	b19a      	cbz	r2, 80418 <_write+0x38>
   803f0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   803f2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8042c <_write+0x4c>
   803f6:	4f0c      	ldr	r7, [pc, #48]	; (80428 <_write+0x48>)
   803f8:	f8d8 0000 	ldr.w	r0, [r8]
   803fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   80400:	683b      	ldr	r3, [r7, #0]
   80402:	4798      	blx	r3
   80404:	2800      	cmp	r0, #0
   80406:	db0a      	blt.n	8041e <_write+0x3e>
   80408:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8040a:	3c01      	subs	r4, #1
   8040c:	d1f4      	bne.n	803f8 <_write+0x18>
   8040e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80412:	f04f 30ff 	mov.w	r0, #4294967295
   80416:	4770      	bx	lr
	for (; len != 0; --len) {
   80418:	4610      	mov	r0, r2
   8041a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8041e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80426:	bf00      	nop
   80428:	20071c54 	.word	0x20071c54
   8042c:	20071c58 	.word	0x20071c58

00080430 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80430:	2a00      	cmp	r2, #0
   80432:	d051      	beq.n	804d8 <usart_serial_read_packet+0xa8>
{
   80434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80438:	b083      	sub	sp, #12
   8043a:	4605      	mov	r5, r0
   8043c:	460c      	mov	r4, r1
   8043e:	4692      	mov	sl, r2
   80440:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80442:	4f26      	ldr	r7, [pc, #152]	; (804dc <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   80444:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 804f0 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80448:	4e25      	ldr	r6, [pc, #148]	; (804e0 <usart_serial_read_packet+0xb0>)
   8044a:	e01d      	b.n	80488 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   8044c:	4621      	mov	r1, r4
   8044e:	4638      	mov	r0, r7
   80450:	47c8      	blx	r9
   80452:	2800      	cmp	r0, #0
   80454:	d1fa      	bne.n	8044c <usart_serial_read_packet+0x1c>
   80456:	e021      	b.n	8049c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80458:	469b      	mov	fp, r3
   8045a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 804f4 <usart_serial_read_packet+0xc4>
   8045e:	a901      	add	r1, sp, #4
   80460:	4658      	mov	r0, fp
   80462:	47c0      	blx	r8
   80464:	2800      	cmp	r0, #0
   80466:	d1fa      	bne.n	8045e <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   80468:	9b01      	ldr	r3, [sp, #4]
   8046a:	7023      	strb	r3, [r4, #0]
   8046c:	e019      	b.n	804a2 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   8046e:	469b      	mov	fp, r3
   80470:	f8df 8080 	ldr.w	r8, [pc, #128]	; 804f4 <usart_serial_read_packet+0xc4>
   80474:	a901      	add	r1, sp, #4
   80476:	4658      	mov	r0, fp
   80478:	47c0      	blx	r8
   8047a:	2800      	cmp	r0, #0
   8047c:	d1fa      	bne.n	80474 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   8047e:	9b01      	ldr	r3, [sp, #4]
   80480:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   80482:	3401      	adds	r4, #1
	while (len) {
   80484:	4554      	cmp	r4, sl
   80486:	d023      	beq.n	804d0 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   80488:	2300      	movs	r3, #0
   8048a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   8048c:	42bd      	cmp	r5, r7
   8048e:	d0dd      	beq.n	8044c <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   80490:	4b14      	ldr	r3, [pc, #80]	; (804e4 <usart_serial_read_packet+0xb4>)
   80492:	429d      	cmp	r5, r3
   80494:	d0e0      	beq.n	80458 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   80496:	4b14      	ldr	r3, [pc, #80]	; (804e8 <usart_serial_read_packet+0xb8>)
   80498:	429d      	cmp	r5, r3
   8049a:	d0e8      	beq.n	8046e <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   8049c:	4b13      	ldr	r3, [pc, #76]	; (804ec <usart_serial_read_packet+0xbc>)
   8049e:	429d      	cmp	r5, r3
   804a0:	d00b      	beq.n	804ba <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   804a2:	42b5      	cmp	r5, r6
   804a4:	d1ed      	bne.n	80482 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   804a6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 804f4 <usart_serial_read_packet+0xc4>
   804aa:	a901      	add	r1, sp, #4
   804ac:	4630      	mov	r0, r6
   804ae:	47c0      	blx	r8
   804b0:	2800      	cmp	r0, #0
   804b2:	d1fa      	bne.n	804aa <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   804b4:	9b01      	ldr	r3, [sp, #4]
   804b6:	7023      	strb	r3, [r4, #0]
   804b8:	e7e3      	b.n	80482 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   804ba:	469b      	mov	fp, r3
   804bc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 804f4 <usart_serial_read_packet+0xc4>
   804c0:	a901      	add	r1, sp, #4
   804c2:	4658      	mov	r0, fp
   804c4:	47c0      	blx	r8
   804c6:	2800      	cmp	r0, #0
   804c8:	d1fa      	bne.n	804c0 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   804ca:	9b01      	ldr	r3, [sp, #4]
   804cc:	7023      	strb	r3, [r4, #0]
   804ce:	e7d8      	b.n	80482 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   804d0:	2000      	movs	r0, #0
   804d2:	b003      	add	sp, #12
   804d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   804d8:	2000      	movs	r0, #0
   804da:	4770      	bx	lr
   804dc:	400e0800 	.word	0x400e0800
   804e0:	400a4000 	.word	0x400a4000
   804e4:	40098000 	.word	0x40098000
   804e8:	4009c000 	.word	0x4009c000
   804ec:	400a0000 	.word	0x400a0000
   804f0:	0008053f 	.word	0x0008053f
   804f4:	00080367 	.word	0x00080367

000804f8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   804f8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   804fa:	23ac      	movs	r3, #172	; 0xac
   804fc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   804fe:	680b      	ldr	r3, [r1, #0]
   80500:	684a      	ldr	r2, [r1, #4]
   80502:	fbb3 f3f2 	udiv	r3, r3, r2
   80506:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80508:	1e5c      	subs	r4, r3, #1
   8050a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8050e:	4294      	cmp	r4, r2
   80510:	d80b      	bhi.n	8052a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80512:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80514:	688b      	ldr	r3, [r1, #8]
   80516:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80518:	f240 2302 	movw	r3, #514	; 0x202
   8051c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80520:	2350      	movs	r3, #80	; 0x50
   80522:	6003      	str	r3, [r0, #0]

	return 0;
   80524:	2000      	movs	r0, #0
}
   80526:	bc10      	pop	{r4}
   80528:	4770      	bx	lr
		return 1;
   8052a:	2001      	movs	r0, #1
   8052c:	e7fb      	b.n	80526 <uart_init+0x2e>

0008052e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8052e:	6943      	ldr	r3, [r0, #20]
   80530:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80534:	bf1a      	itte	ne
   80536:	61c1      	strne	r1, [r0, #28]
	return 0;
   80538:	2000      	movne	r0, #0
		return 1;
   8053a:	2001      	moveq	r0, #1
}
   8053c:	4770      	bx	lr

0008053e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8053e:	6943      	ldr	r3, [r0, #20]
   80540:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80544:	bf1d      	ittte	ne
   80546:	6983      	ldrne	r3, [r0, #24]
   80548:	700b      	strbne	r3, [r1, #0]
	return 0;
   8054a:	2000      	movne	r0, #0
		return 1;
   8054c:	2001      	moveq	r0, #1
}
   8054e:	4770      	bx	lr

00080550 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80550:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80552:	480e      	ldr	r0, [pc, #56]	; (8058c <sysclk_init+0x3c>)
   80554:	4b0e      	ldr	r3, [pc, #56]	; (80590 <sysclk_init+0x40>)
   80556:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80558:	213e      	movs	r1, #62	; 0x3e
   8055a:	2000      	movs	r0, #0
   8055c:	4b0d      	ldr	r3, [pc, #52]	; (80594 <sysclk_init+0x44>)
   8055e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80560:	4c0d      	ldr	r4, [pc, #52]	; (80598 <sysclk_init+0x48>)
   80562:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80564:	2800      	cmp	r0, #0
   80566:	d0fc      	beq.n	80562 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80568:	4b0c      	ldr	r3, [pc, #48]	; (8059c <sysclk_init+0x4c>)
   8056a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8056c:	4a0c      	ldr	r2, [pc, #48]	; (805a0 <sysclk_init+0x50>)
   8056e:	4b0d      	ldr	r3, [pc, #52]	; (805a4 <sysclk_init+0x54>)
   80570:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80572:	4c0d      	ldr	r4, [pc, #52]	; (805a8 <sysclk_init+0x58>)
   80574:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80576:	2800      	cmp	r0, #0
   80578:	d0fc      	beq.n	80574 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8057a:	2010      	movs	r0, #16
   8057c:	4b0b      	ldr	r3, [pc, #44]	; (805ac <sysclk_init+0x5c>)
   8057e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80580:	4b0b      	ldr	r3, [pc, #44]	; (805b0 <sysclk_init+0x60>)
   80582:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80584:	4801      	ldr	r0, [pc, #4]	; (8058c <sysclk_init+0x3c>)
   80586:	4b02      	ldr	r3, [pc, #8]	; (80590 <sysclk_init+0x40>)
   80588:	4798      	blx	r3
   8058a:	bd10      	pop	{r4, pc}
   8058c:	0501bd00 	.word	0x0501bd00
   80590:	200700a5 	.word	0x200700a5
   80594:	00080945 	.word	0x00080945
   80598:	00080999 	.word	0x00080999
   8059c:	000809a9 	.word	0x000809a9
   805a0:	200d3f01 	.word	0x200d3f01
   805a4:	400e0600 	.word	0x400e0600
   805a8:	000809b9 	.word	0x000809b9
   805ac:	000808e1 	.word	0x000808e1
   805b0:	00080ab9 	.word	0x00080ab9

000805b4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   805b4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   805b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805ba:	4b16      	ldr	r3, [pc, #88]	; (80614 <board_init+0x60>)
   805bc:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805be:	200b      	movs	r0, #11
   805c0:	4c15      	ldr	r4, [pc, #84]	; (80618 <board_init+0x64>)
   805c2:	47a0      	blx	r4
   805c4:	200c      	movs	r0, #12
   805c6:	47a0      	blx	r4
   805c8:	200d      	movs	r0, #13
   805ca:	47a0      	blx	r4
   805cc:	200e      	movs	r0, #14
   805ce:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   805d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805d4:	203b      	movs	r0, #59	; 0x3b
   805d6:	4c11      	ldr	r4, [pc, #68]	; (8061c <board_init+0x68>)
   805d8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   805da:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805de:	2055      	movs	r0, #85	; 0x55
   805e0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   805e2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805e6:	2056      	movs	r0, #86	; 0x56
   805e8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   805ea:	490d      	ldr	r1, [pc, #52]	; (80620 <board_init+0x6c>)
   805ec:	2068      	movs	r0, #104	; 0x68
   805ee:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   805f0:	490c      	ldr	r1, [pc, #48]	; (80624 <board_init+0x70>)
   805f2:	205c      	movs	r0, #92	; 0x5c
   805f4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   805f6:	4a0c      	ldr	r2, [pc, #48]	; (80628 <board_init+0x74>)
   805f8:	f44f 7140 	mov.w	r1, #768	; 0x300
   805fc:	480b      	ldr	r0, [pc, #44]	; (8062c <board_init+0x78>)
   805fe:	4b0c      	ldr	r3, [pc, #48]	; (80630 <board_init+0x7c>)
   80600:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80602:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80606:	202b      	movs	r0, #43	; 0x2b
   80608:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8060a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8060e:	202a      	movs	r0, #42	; 0x2a
   80610:	47a0      	blx	r4
   80612:	bd10      	pop	{r4, pc}
   80614:	400e1a50 	.word	0x400e1a50
   80618:	000809c9 	.word	0x000809c9
   8061c:	000806d5 	.word	0x000806d5
   80620:	28000079 	.word	0x28000079
   80624:	28000001 	.word	0x28000001
   80628:	08000001 	.word	0x08000001
   8062c:	400e0e00 	.word	0x400e0e00
   80630:	000807a5 	.word	0x000807a5

00080634 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80634:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80636:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8063a:	d016      	beq.n	8066a <pio_set_peripheral+0x36>
   8063c:	d80b      	bhi.n	80656 <pio_set_peripheral+0x22>
   8063e:	b149      	cbz	r1, 80654 <pio_set_peripheral+0x20>
   80640:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80644:	d105      	bne.n	80652 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80646:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80648:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8064a:	400b      	ands	r3, r1
   8064c:	ea23 0302 	bic.w	r3, r3, r2
   80650:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80652:	6042      	str	r2, [r0, #4]
   80654:	4770      	bx	lr
	switch (ul_type) {
   80656:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8065a:	d0fb      	beq.n	80654 <pio_set_peripheral+0x20>
   8065c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80660:	d0f8      	beq.n	80654 <pio_set_peripheral+0x20>
   80662:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80666:	d1f4      	bne.n	80652 <pio_set_peripheral+0x1e>
   80668:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8066a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8066c:	4313      	orrs	r3, r2
   8066e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80670:	e7ef      	b.n	80652 <pio_set_peripheral+0x1e>

00080672 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80672:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80674:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80678:	bf14      	ite	ne
   8067a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8067c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8067e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80682:	bf14      	ite	ne
   80684:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80686:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80688:	f012 0f02 	tst.w	r2, #2
   8068c:	d107      	bne.n	8069e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8068e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80692:	bf18      	it	ne
   80694:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80698:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8069a:	6001      	str	r1, [r0, #0]
   8069c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8069e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   806a2:	e7f9      	b.n	80698 <pio_set_input+0x26>

000806a4 <pio_set_output>:
{
   806a4:	b410      	push	{r4}
   806a6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   806a8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   806aa:	b944      	cbnz	r4, 806be <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   806ac:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   806ae:	b143      	cbz	r3, 806c2 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   806b0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   806b2:	b942      	cbnz	r2, 806c6 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   806b4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   806b6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   806b8:	6001      	str	r1, [r0, #0]
}
   806ba:	bc10      	pop	{r4}
   806bc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   806be:	6641      	str	r1, [r0, #100]	; 0x64
   806c0:	e7f5      	b.n	806ae <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   806c2:	6541      	str	r1, [r0, #84]	; 0x54
   806c4:	e7f5      	b.n	806b2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   806c6:	6301      	str	r1, [r0, #48]	; 0x30
   806c8:	e7f5      	b.n	806b6 <pio_set_output+0x12>

000806ca <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   806ca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   806cc:	4770      	bx	lr

000806ce <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   806ce:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   806d0:	4770      	bx	lr
	...

000806d4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   806d4:	b570      	push	{r4, r5, r6, lr}
   806d6:	b082      	sub	sp, #8
   806d8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   806da:	0943      	lsrs	r3, r0, #5
   806dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   806e0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   806e4:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   806e6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   806ea:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   806ee:	d031      	beq.n	80754 <pio_configure_pin+0x80>
   806f0:	d816      	bhi.n	80720 <pio_configure_pin+0x4c>
   806f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   806f6:	d01b      	beq.n	80730 <pio_configure_pin+0x5c>
   806f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   806fc:	d116      	bne.n	8072c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   806fe:	f000 001f 	and.w	r0, r0, #31
   80702:	2601      	movs	r6, #1
   80704:	4086      	lsls	r6, r0
   80706:	4632      	mov	r2, r6
   80708:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8070c:	4620      	mov	r0, r4
   8070e:	4b22      	ldr	r3, [pc, #136]	; (80798 <pio_configure_pin+0xc4>)
   80710:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80712:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80716:	bf14      	ite	ne
   80718:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8071a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8071c:	2001      	movs	r0, #1
   8071e:	e017      	b.n	80750 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80720:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80724:	d021      	beq.n	8076a <pio_configure_pin+0x96>
   80726:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8072a:	d01e      	beq.n	8076a <pio_configure_pin+0x96>
		return 0;
   8072c:	2000      	movs	r0, #0
   8072e:	e00f      	b.n	80750 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80730:	f000 001f 	and.w	r0, r0, #31
   80734:	2601      	movs	r6, #1
   80736:	4086      	lsls	r6, r0
   80738:	4632      	mov	r2, r6
   8073a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8073e:	4620      	mov	r0, r4
   80740:	4b15      	ldr	r3, [pc, #84]	; (80798 <pio_configure_pin+0xc4>)
   80742:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80744:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80748:	bf14      	ite	ne
   8074a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8074c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8074e:	2001      	movs	r0, #1
}
   80750:	b002      	add	sp, #8
   80752:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80754:	f000 011f 	and.w	r1, r0, #31
   80758:	2601      	movs	r6, #1
   8075a:	462a      	mov	r2, r5
   8075c:	fa06 f101 	lsl.w	r1, r6, r1
   80760:	4620      	mov	r0, r4
   80762:	4b0e      	ldr	r3, [pc, #56]	; (8079c <pio_configure_pin+0xc8>)
   80764:	4798      	blx	r3
	return 1;
   80766:	4630      	mov	r0, r6
		break;
   80768:	e7f2      	b.n	80750 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8076a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8076e:	f000 011f 	and.w	r1, r0, #31
   80772:	2601      	movs	r6, #1
   80774:	ea05 0306 	and.w	r3, r5, r6
   80778:	9300      	str	r3, [sp, #0]
   8077a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8077e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80782:	bf14      	ite	ne
   80784:	2200      	movne	r2, #0
   80786:	2201      	moveq	r2, #1
   80788:	fa06 f101 	lsl.w	r1, r6, r1
   8078c:	4620      	mov	r0, r4
   8078e:	4c04      	ldr	r4, [pc, #16]	; (807a0 <pio_configure_pin+0xcc>)
   80790:	47a0      	blx	r4
	return 1;
   80792:	4630      	mov	r0, r6
		break;
   80794:	e7dc      	b.n	80750 <pio_configure_pin+0x7c>
   80796:	bf00      	nop
   80798:	00080635 	.word	0x00080635
   8079c:	00080673 	.word	0x00080673
   807a0:	000806a5 	.word	0x000806a5

000807a4 <pio_configure_pin_group>:
{
   807a4:	b570      	push	{r4, r5, r6, lr}
   807a6:	b082      	sub	sp, #8
   807a8:	4605      	mov	r5, r0
   807aa:	460e      	mov	r6, r1
   807ac:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   807ae:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   807b2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   807b6:	d027      	beq.n	80808 <pio_configure_pin_group+0x64>
   807b8:	d811      	bhi.n	807de <pio_configure_pin_group+0x3a>
   807ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   807be:	d016      	beq.n	807ee <pio_configure_pin_group+0x4a>
   807c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   807c4:	d111      	bne.n	807ea <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   807c6:	460a      	mov	r2, r1
   807c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807cc:	4b19      	ldr	r3, [pc, #100]	; (80834 <pio_configure_pin_group+0x90>)
   807ce:	4798      	blx	r3
	if (ul_pull_up_enable) {
   807d0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   807d4:	bf14      	ite	ne
   807d6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807d8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   807da:	2001      	movs	r0, #1
   807dc:	e012      	b.n	80804 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   807de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   807e2:	d015      	beq.n	80810 <pio_configure_pin_group+0x6c>
   807e4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   807e8:	d012      	beq.n	80810 <pio_configure_pin_group+0x6c>
		return 0;
   807ea:	2000      	movs	r0, #0
   807ec:	e00a      	b.n	80804 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   807ee:	460a      	mov	r2, r1
   807f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807f4:	4b0f      	ldr	r3, [pc, #60]	; (80834 <pio_configure_pin_group+0x90>)
   807f6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   807f8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   807fc:	bf14      	ite	ne
   807fe:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80800:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80802:	2001      	movs	r0, #1
}
   80804:	b002      	add	sp, #8
   80806:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80808:	4b0b      	ldr	r3, [pc, #44]	; (80838 <pio_configure_pin_group+0x94>)
   8080a:	4798      	blx	r3
	return 1;
   8080c:	2001      	movs	r0, #1
		break;
   8080e:	e7f9      	b.n	80804 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80810:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80814:	f004 0301 	and.w	r3, r4, #1
   80818:	9300      	str	r3, [sp, #0]
   8081a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8081e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80822:	bf14      	ite	ne
   80824:	2200      	movne	r2, #0
   80826:	2201      	moveq	r2, #1
   80828:	4631      	mov	r1, r6
   8082a:	4628      	mov	r0, r5
   8082c:	4c03      	ldr	r4, [pc, #12]	; (8083c <pio_configure_pin_group+0x98>)
   8082e:	47a0      	blx	r4
	return 1;
   80830:	2001      	movs	r0, #1
		break;
   80832:	e7e7      	b.n	80804 <pio_configure_pin_group+0x60>
   80834:	00080635 	.word	0x00080635
   80838:	00080673 	.word	0x00080673
   8083c:	000806a5 	.word	0x000806a5

00080840 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80844:	4604      	mov	r4, r0
   80846:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80848:	4b0e      	ldr	r3, [pc, #56]	; (80884 <pio_handler_process+0x44>)
   8084a:	4798      	blx	r3
   8084c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8084e:	4620      	mov	r0, r4
   80850:	4b0d      	ldr	r3, [pc, #52]	; (80888 <pio_handler_process+0x48>)
   80852:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80854:	4005      	ands	r5, r0
   80856:	d013      	beq.n	80880 <pio_handler_process+0x40>
   80858:	4c0c      	ldr	r4, [pc, #48]	; (8088c <pio_handler_process+0x4c>)
   8085a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8085e:	e003      	b.n	80868 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80860:	42b4      	cmp	r4, r6
   80862:	d00d      	beq.n	80880 <pio_handler_process+0x40>
   80864:	3410      	adds	r4, #16
		while (status != 0) {
   80866:	b15d      	cbz	r5, 80880 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80868:	6820      	ldr	r0, [r4, #0]
   8086a:	4540      	cmp	r0, r8
   8086c:	d1f8      	bne.n	80860 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8086e:	6861      	ldr	r1, [r4, #4]
   80870:	4229      	tst	r1, r5
   80872:	d0f5      	beq.n	80860 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80874:	68e3      	ldr	r3, [r4, #12]
   80876:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80878:	6863      	ldr	r3, [r4, #4]
   8087a:	ea25 0503 	bic.w	r5, r5, r3
   8087e:	e7ef      	b.n	80860 <pio_handler_process+0x20>
   80880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80884:	000806cb 	.word	0x000806cb
   80888:	000806cf 	.word	0x000806cf
   8088c:	20070ba8 	.word	0x20070ba8

00080890 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80890:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80892:	210b      	movs	r1, #11
   80894:	4801      	ldr	r0, [pc, #4]	; (8089c <PIOA_Handler+0xc>)
   80896:	4b02      	ldr	r3, [pc, #8]	; (808a0 <PIOA_Handler+0x10>)
   80898:	4798      	blx	r3
   8089a:	bd08      	pop	{r3, pc}
   8089c:	400e0e00 	.word	0x400e0e00
   808a0:	00080841 	.word	0x00080841

000808a4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   808a4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   808a6:	210c      	movs	r1, #12
   808a8:	4801      	ldr	r0, [pc, #4]	; (808b0 <PIOB_Handler+0xc>)
   808aa:	4b02      	ldr	r3, [pc, #8]	; (808b4 <PIOB_Handler+0x10>)
   808ac:	4798      	blx	r3
   808ae:	bd08      	pop	{r3, pc}
   808b0:	400e1000 	.word	0x400e1000
   808b4:	00080841 	.word	0x00080841

000808b8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   808b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   808ba:	210d      	movs	r1, #13
   808bc:	4801      	ldr	r0, [pc, #4]	; (808c4 <PIOC_Handler+0xc>)
   808be:	4b02      	ldr	r3, [pc, #8]	; (808c8 <PIOC_Handler+0x10>)
   808c0:	4798      	blx	r3
   808c2:	bd08      	pop	{r3, pc}
   808c4:	400e1200 	.word	0x400e1200
   808c8:	00080841 	.word	0x00080841

000808cc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   808cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   808ce:	210e      	movs	r1, #14
   808d0:	4801      	ldr	r0, [pc, #4]	; (808d8 <PIOD_Handler+0xc>)
   808d2:	4b02      	ldr	r3, [pc, #8]	; (808dc <PIOD_Handler+0x10>)
   808d4:	4798      	blx	r3
   808d6:	bd08      	pop	{r3, pc}
   808d8:	400e1400 	.word	0x400e1400
   808dc:	00080841 	.word	0x00080841

000808e0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   808e0:	4a17      	ldr	r2, [pc, #92]	; (80940 <pmc_switch_mck_to_pllack+0x60>)
   808e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   808e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   808e8:	4318      	orrs	r0, r3
   808ea:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   808ec:	6e93      	ldr	r3, [r2, #104]	; 0x68
   808ee:	f013 0f08 	tst.w	r3, #8
   808f2:	d10a      	bne.n	8090a <pmc_switch_mck_to_pllack+0x2a>
   808f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808f8:	4911      	ldr	r1, [pc, #68]	; (80940 <pmc_switch_mck_to_pllack+0x60>)
   808fa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   808fc:	f012 0f08 	tst.w	r2, #8
   80900:	d103      	bne.n	8090a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80902:	3b01      	subs	r3, #1
   80904:	d1f9      	bne.n	808fa <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80906:	2001      	movs	r0, #1
   80908:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8090a:	4a0d      	ldr	r2, [pc, #52]	; (80940 <pmc_switch_mck_to_pllack+0x60>)
   8090c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8090e:	f023 0303 	bic.w	r3, r3, #3
   80912:	f043 0302 	orr.w	r3, r3, #2
   80916:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80918:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8091a:	f013 0f08 	tst.w	r3, #8
   8091e:	d10a      	bne.n	80936 <pmc_switch_mck_to_pllack+0x56>
   80920:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80924:	4906      	ldr	r1, [pc, #24]	; (80940 <pmc_switch_mck_to_pllack+0x60>)
   80926:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80928:	f012 0f08 	tst.w	r2, #8
   8092c:	d105      	bne.n	8093a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8092e:	3b01      	subs	r3, #1
   80930:	d1f9      	bne.n	80926 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80932:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80934:	4770      	bx	lr
	return 0;
   80936:	2000      	movs	r0, #0
   80938:	4770      	bx	lr
   8093a:	2000      	movs	r0, #0
   8093c:	4770      	bx	lr
   8093e:	bf00      	nop
   80940:	400e0600 	.word	0x400e0600

00080944 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80944:	b9c8      	cbnz	r0, 8097a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80946:	4a11      	ldr	r2, [pc, #68]	; (8098c <pmc_switch_mainck_to_xtal+0x48>)
   80948:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8094a:	0209      	lsls	r1, r1, #8
   8094c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8094e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80952:	f023 0303 	bic.w	r3, r3, #3
   80956:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8095a:	f043 0301 	orr.w	r3, r3, #1
   8095e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80960:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80962:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80964:	f013 0f01 	tst.w	r3, #1
   80968:	d0fb      	beq.n	80962 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8096a:	4a08      	ldr	r2, [pc, #32]	; (8098c <pmc_switch_mainck_to_xtal+0x48>)
   8096c:	6a13      	ldr	r3, [r2, #32]
   8096e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80976:	6213      	str	r3, [r2, #32]
   80978:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8097a:	4904      	ldr	r1, [pc, #16]	; (8098c <pmc_switch_mainck_to_xtal+0x48>)
   8097c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8097e:	4a04      	ldr	r2, [pc, #16]	; (80990 <pmc_switch_mainck_to_xtal+0x4c>)
   80980:	401a      	ands	r2, r3
   80982:	4b04      	ldr	r3, [pc, #16]	; (80994 <pmc_switch_mainck_to_xtal+0x50>)
   80984:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80986:	620b      	str	r3, [r1, #32]
   80988:	4770      	bx	lr
   8098a:	bf00      	nop
   8098c:	400e0600 	.word	0x400e0600
   80990:	fec8fffc 	.word	0xfec8fffc
   80994:	01370002 	.word	0x01370002

00080998 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80998:	4b02      	ldr	r3, [pc, #8]	; (809a4 <pmc_osc_is_ready_mainck+0xc>)
   8099a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8099c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   809a0:	4770      	bx	lr
   809a2:	bf00      	nop
   809a4:	400e0600 	.word	0x400e0600

000809a8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   809a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   809ac:	4b01      	ldr	r3, [pc, #4]	; (809b4 <pmc_disable_pllack+0xc>)
   809ae:	629a      	str	r2, [r3, #40]	; 0x28
   809b0:	4770      	bx	lr
   809b2:	bf00      	nop
   809b4:	400e0600 	.word	0x400e0600

000809b8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   809b8:	4b02      	ldr	r3, [pc, #8]	; (809c4 <pmc_is_locked_pllack+0xc>)
   809ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   809bc:	f000 0002 	and.w	r0, r0, #2
   809c0:	4770      	bx	lr
   809c2:	bf00      	nop
   809c4:	400e0600 	.word	0x400e0600

000809c8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   809c8:	282c      	cmp	r0, #44	; 0x2c
   809ca:	d81e      	bhi.n	80a0a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   809cc:	281f      	cmp	r0, #31
   809ce:	d80c      	bhi.n	809ea <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   809d0:	4b11      	ldr	r3, [pc, #68]	; (80a18 <pmc_enable_periph_clk+0x50>)
   809d2:	699a      	ldr	r2, [r3, #24]
   809d4:	2301      	movs	r3, #1
   809d6:	4083      	lsls	r3, r0
   809d8:	4393      	bics	r3, r2
   809da:	d018      	beq.n	80a0e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   809dc:	2301      	movs	r3, #1
   809de:	fa03 f000 	lsl.w	r0, r3, r0
   809e2:	4b0d      	ldr	r3, [pc, #52]	; (80a18 <pmc_enable_periph_clk+0x50>)
   809e4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   809e6:	2000      	movs	r0, #0
   809e8:	4770      	bx	lr
		ul_id -= 32;
   809ea:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   809ec:	4b0a      	ldr	r3, [pc, #40]	; (80a18 <pmc_enable_periph_clk+0x50>)
   809ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   809f2:	2301      	movs	r3, #1
   809f4:	4083      	lsls	r3, r0
   809f6:	4393      	bics	r3, r2
   809f8:	d00b      	beq.n	80a12 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   809fa:	2301      	movs	r3, #1
   809fc:	fa03 f000 	lsl.w	r0, r3, r0
   80a00:	4b05      	ldr	r3, [pc, #20]	; (80a18 <pmc_enable_periph_clk+0x50>)
   80a02:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80a06:	2000      	movs	r0, #0
   80a08:	4770      	bx	lr
		return 1;
   80a0a:	2001      	movs	r0, #1
   80a0c:	4770      	bx	lr
	return 0;
   80a0e:	2000      	movs	r0, #0
   80a10:	4770      	bx	lr
   80a12:	2000      	movs	r0, #0
}
   80a14:	4770      	bx	lr
   80a16:	bf00      	nop
   80a18:	400e0600 	.word	0x400e0600

00080a1c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80a1c:	e7fe      	b.n	80a1c <Dummy_Handler>
	...

00080a20 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80a20:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80a22:	4b1c      	ldr	r3, [pc, #112]	; (80a94 <Reset_Handler+0x74>)
   80a24:	4a1c      	ldr	r2, [pc, #112]	; (80a98 <Reset_Handler+0x78>)
   80a26:	429a      	cmp	r2, r3
   80a28:	d010      	beq.n	80a4c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80a2a:	4b1c      	ldr	r3, [pc, #112]	; (80a9c <Reset_Handler+0x7c>)
   80a2c:	4a19      	ldr	r2, [pc, #100]	; (80a94 <Reset_Handler+0x74>)
   80a2e:	429a      	cmp	r2, r3
   80a30:	d20c      	bcs.n	80a4c <Reset_Handler+0x2c>
   80a32:	3b01      	subs	r3, #1
   80a34:	1a9b      	subs	r3, r3, r2
   80a36:	f023 0303 	bic.w	r3, r3, #3
   80a3a:	3304      	adds	r3, #4
   80a3c:	4413      	add	r3, r2
   80a3e:	4916      	ldr	r1, [pc, #88]	; (80a98 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80a40:	f851 0b04 	ldr.w	r0, [r1], #4
   80a44:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80a48:	429a      	cmp	r2, r3
   80a4a:	d1f9      	bne.n	80a40 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a4c:	4b14      	ldr	r3, [pc, #80]	; (80aa0 <Reset_Handler+0x80>)
   80a4e:	4a15      	ldr	r2, [pc, #84]	; (80aa4 <Reset_Handler+0x84>)
   80a50:	429a      	cmp	r2, r3
   80a52:	d20a      	bcs.n	80a6a <Reset_Handler+0x4a>
   80a54:	3b01      	subs	r3, #1
   80a56:	1a9b      	subs	r3, r3, r2
   80a58:	f023 0303 	bic.w	r3, r3, #3
   80a5c:	3304      	adds	r3, #4
   80a5e:	4413      	add	r3, r2
		*pDest++ = 0;
   80a60:	2100      	movs	r1, #0
   80a62:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80a66:	4293      	cmp	r3, r2
   80a68:	d1fb      	bne.n	80a62 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80a6a:	4b0f      	ldr	r3, [pc, #60]	; (80aa8 <Reset_Handler+0x88>)
   80a6c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80a70:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80a74:	490d      	ldr	r1, [pc, #52]	; (80aac <Reset_Handler+0x8c>)
   80a76:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80a78:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80a80:	d203      	bcs.n	80a8a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80a82:	688b      	ldr	r3, [r1, #8]
   80a84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80a88:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80a8a:	4b09      	ldr	r3, [pc, #36]	; (80ab0 <Reset_Handler+0x90>)
   80a8c:	4798      	blx	r3

	/* Branch to main function */
	main();
   80a8e:	4b09      	ldr	r3, [pc, #36]	; (80ab4 <Reset_Handler+0x94>)
   80a90:	4798      	blx	r3
   80a92:	e7fe      	b.n	80a92 <Reset_Handler+0x72>
   80a94:	20070000 	.word	0x20070000
   80a98:	0008448c 	.word	0x0008448c
   80a9c:	20070ae0 	.word	0x20070ae0
   80aa0:	20071c84 	.word	0x20071c84
   80aa4:	20070ae0 	.word	0x20070ae0
   80aa8:	00080000 	.word	0x00080000
   80aac:	e000ed00 	.word	0xe000ed00
   80ab0:	00081345 	.word	0x00081345
   80ab4:	00080d69 	.word	0x00080d69

00080ab8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80ab8:	4b3d      	ldr	r3, [pc, #244]	; (80bb0 <SystemCoreClockUpdate+0xf8>)
   80aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80abc:	f003 0303 	and.w	r3, r3, #3
   80ac0:	2b03      	cmp	r3, #3
   80ac2:	d80e      	bhi.n	80ae2 <SystemCoreClockUpdate+0x2a>
   80ac4:	e8df f003 	tbb	[pc, r3]
   80ac8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80acc:	4b39      	ldr	r3, [pc, #228]	; (80bb4 <SystemCoreClockUpdate+0xfc>)
   80ace:	695b      	ldr	r3, [r3, #20]
   80ad0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ad4:	bf14      	ite	ne
   80ad6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80ada:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80ade:	4b36      	ldr	r3, [pc, #216]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80ae0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80ae2:	4b33      	ldr	r3, [pc, #204]	; (80bb0 <SystemCoreClockUpdate+0xf8>)
   80ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80aea:	2b70      	cmp	r3, #112	; 0x70
   80aec:	d057      	beq.n	80b9e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80aee:	4b30      	ldr	r3, [pc, #192]	; (80bb0 <SystemCoreClockUpdate+0xf8>)
   80af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80af2:	4931      	ldr	r1, [pc, #196]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80af4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80af8:	680b      	ldr	r3, [r1, #0]
   80afa:	40d3      	lsrs	r3, r2
   80afc:	600b      	str	r3, [r1, #0]
   80afe:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b00:	4b2b      	ldr	r3, [pc, #172]	; (80bb0 <SystemCoreClockUpdate+0xf8>)
   80b02:	6a1b      	ldr	r3, [r3, #32]
   80b04:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b08:	d003      	beq.n	80b12 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b0a:	4a2c      	ldr	r2, [pc, #176]	; (80bbc <SystemCoreClockUpdate+0x104>)
   80b0c:	4b2a      	ldr	r3, [pc, #168]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80b0e:	601a      	str	r2, [r3, #0]
   80b10:	e7e7      	b.n	80ae2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b12:	4a2b      	ldr	r2, [pc, #172]	; (80bc0 <SystemCoreClockUpdate+0x108>)
   80b14:	4b28      	ldr	r3, [pc, #160]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80b16:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b18:	4b25      	ldr	r3, [pc, #148]	; (80bb0 <SystemCoreClockUpdate+0xf8>)
   80b1a:	6a1b      	ldr	r3, [r3, #32]
   80b1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b20:	2b10      	cmp	r3, #16
   80b22:	d005      	beq.n	80b30 <SystemCoreClockUpdate+0x78>
   80b24:	2b20      	cmp	r3, #32
   80b26:	d1dc      	bne.n	80ae2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80b28:	4a24      	ldr	r2, [pc, #144]	; (80bbc <SystemCoreClockUpdate+0x104>)
   80b2a:	4b23      	ldr	r3, [pc, #140]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80b2c:	601a      	str	r2, [r3, #0]
				break;
   80b2e:	e7d8      	b.n	80ae2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80b30:	4a24      	ldr	r2, [pc, #144]	; (80bc4 <SystemCoreClockUpdate+0x10c>)
   80b32:	4b21      	ldr	r3, [pc, #132]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80b34:	601a      	str	r2, [r3, #0]
				break;
   80b36:	e7d4      	b.n	80ae2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b38:	4b1d      	ldr	r3, [pc, #116]	; (80bb0 <SystemCoreClockUpdate+0xf8>)
   80b3a:	6a1b      	ldr	r3, [r3, #32]
   80b3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b40:	d00c      	beq.n	80b5c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b42:	4a1e      	ldr	r2, [pc, #120]	; (80bbc <SystemCoreClockUpdate+0x104>)
   80b44:	4b1c      	ldr	r3, [pc, #112]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80b46:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80b48:	4b19      	ldr	r3, [pc, #100]	; (80bb0 <SystemCoreClockUpdate+0xf8>)
   80b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b4c:	f003 0303 	and.w	r3, r3, #3
   80b50:	2b02      	cmp	r3, #2
   80b52:	d016      	beq.n	80b82 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80b54:	4a1c      	ldr	r2, [pc, #112]	; (80bc8 <SystemCoreClockUpdate+0x110>)
   80b56:	4b18      	ldr	r3, [pc, #96]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80b58:	601a      	str	r2, [r3, #0]
   80b5a:	e7c2      	b.n	80ae2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b5c:	4a18      	ldr	r2, [pc, #96]	; (80bc0 <SystemCoreClockUpdate+0x108>)
   80b5e:	4b16      	ldr	r3, [pc, #88]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80b60:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b62:	4b13      	ldr	r3, [pc, #76]	; (80bb0 <SystemCoreClockUpdate+0xf8>)
   80b64:	6a1b      	ldr	r3, [r3, #32]
   80b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b6a:	2b10      	cmp	r3, #16
   80b6c:	d005      	beq.n	80b7a <SystemCoreClockUpdate+0xc2>
   80b6e:	2b20      	cmp	r3, #32
   80b70:	d1ea      	bne.n	80b48 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80b72:	4a12      	ldr	r2, [pc, #72]	; (80bbc <SystemCoreClockUpdate+0x104>)
   80b74:	4b10      	ldr	r3, [pc, #64]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80b76:	601a      	str	r2, [r3, #0]
				break;
   80b78:	e7e6      	b.n	80b48 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80b7a:	4a12      	ldr	r2, [pc, #72]	; (80bc4 <SystemCoreClockUpdate+0x10c>)
   80b7c:	4b0e      	ldr	r3, [pc, #56]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80b7e:	601a      	str	r2, [r3, #0]
				break;
   80b80:	e7e2      	b.n	80b48 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b82:	4a0b      	ldr	r2, [pc, #44]	; (80bb0 <SystemCoreClockUpdate+0xf8>)
   80b84:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b86:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80b88:	480b      	ldr	r0, [pc, #44]	; (80bb8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80b8a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80b8e:	6803      	ldr	r3, [r0, #0]
   80b90:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80b94:	b2d2      	uxtb	r2, r2
   80b96:	fbb3 f3f2 	udiv	r3, r3, r2
   80b9a:	6003      	str	r3, [r0, #0]
   80b9c:	e7a1      	b.n	80ae2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80b9e:	4a06      	ldr	r2, [pc, #24]	; (80bb8 <SystemCoreClockUpdate+0x100>)
   80ba0:	6813      	ldr	r3, [r2, #0]
   80ba2:	490a      	ldr	r1, [pc, #40]	; (80bcc <SystemCoreClockUpdate+0x114>)
   80ba4:	fba1 1303 	umull	r1, r3, r1, r3
   80ba8:	085b      	lsrs	r3, r3, #1
   80baa:	6013      	str	r3, [r2, #0]
   80bac:	4770      	bx	lr
   80bae:	bf00      	nop
   80bb0:	400e0600 	.word	0x400e0600
   80bb4:	400e1a10 	.word	0x400e1a10
   80bb8:	20070130 	.word	0x20070130
   80bbc:	00b71b00 	.word	0x00b71b00
   80bc0:	003d0900 	.word	0x003d0900
   80bc4:	007a1200 	.word	0x007a1200
   80bc8:	0e4e1c00 	.word	0x0e4e1c00
   80bcc:	aaaaaaab 	.word	0xaaaaaaab

00080bd0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80bd0:	4b0a      	ldr	r3, [pc, #40]	; (80bfc <_sbrk+0x2c>)
   80bd2:	681b      	ldr	r3, [r3, #0]
   80bd4:	b153      	cbz	r3, 80bec <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80bd6:	4b09      	ldr	r3, [pc, #36]	; (80bfc <_sbrk+0x2c>)
   80bd8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80bda:	181a      	adds	r2, r3, r0
   80bdc:	4908      	ldr	r1, [pc, #32]	; (80c00 <_sbrk+0x30>)
   80bde:	4291      	cmp	r1, r2
   80be0:	db08      	blt.n	80bf4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80be2:	4610      	mov	r0, r2
   80be4:	4a05      	ldr	r2, [pc, #20]	; (80bfc <_sbrk+0x2c>)
   80be6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80be8:	4618      	mov	r0, r3
   80bea:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80bec:	4a05      	ldr	r2, [pc, #20]	; (80c04 <_sbrk+0x34>)
   80bee:	4b03      	ldr	r3, [pc, #12]	; (80bfc <_sbrk+0x2c>)
   80bf0:	601a      	str	r2, [r3, #0]
   80bf2:	e7f0      	b.n	80bd6 <_sbrk+0x6>
		return (caddr_t) -1;	
   80bf4:	f04f 30ff 	mov.w	r0, #4294967295
}
   80bf8:	4770      	bx	lr
   80bfa:	bf00      	nop
   80bfc:	20070c18 	.word	0x20070c18
   80c00:	20087ffc 	.word	0x20087ffc
   80c04:	20073c88 	.word	0x20073c88

00080c08 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80c08:	f04f 30ff 	mov.w	r0, #4294967295
   80c0c:	4770      	bx	lr

00080c0e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80c12:	604b      	str	r3, [r1, #4]

	return 0;
}
   80c14:	2000      	movs	r0, #0
   80c16:	4770      	bx	lr

00080c18 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80c18:	2001      	movs	r0, #1
   80c1a:	4770      	bx	lr

00080c1c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80c1c:	2000      	movs	r0, #0
   80c1e:	4770      	bx	lr

00080c20 <usart_serial_getchar>:
{
   80c20:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c22:	b083      	sub	sp, #12
   80c24:	4604      	mov	r4, r0
   80c26:	460d      	mov	r5, r1
	uint32_t val = 0;
   80c28:	2300      	movs	r3, #0
   80c2a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80c2c:	4b20      	ldr	r3, [pc, #128]	; (80cb0 <usart_serial_getchar+0x90>)
   80c2e:	4298      	cmp	r0, r3
   80c30:	d00d      	beq.n	80c4e <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   80c32:	4b20      	ldr	r3, [pc, #128]	; (80cb4 <usart_serial_getchar+0x94>)
   80c34:	4298      	cmp	r0, r3
   80c36:	d012      	beq.n	80c5e <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   80c38:	4b1f      	ldr	r3, [pc, #124]	; (80cb8 <usart_serial_getchar+0x98>)
   80c3a:	4298      	cmp	r0, r3
   80c3c:	d019      	beq.n	80c72 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   80c3e:	4b1f      	ldr	r3, [pc, #124]	; (80cbc <usart_serial_getchar+0x9c>)
   80c40:	429c      	cmp	r4, r3
   80c42:	d020      	beq.n	80c86 <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   80c44:	4b1e      	ldr	r3, [pc, #120]	; (80cc0 <usart_serial_getchar+0xa0>)
   80c46:	429c      	cmp	r4, r3
   80c48:	d027      	beq.n	80c9a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80c4a:	b003      	add	sp, #12
   80c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80c4e:	461f      	mov	r7, r3
   80c50:	4e1c      	ldr	r6, [pc, #112]	; (80cc4 <usart_serial_getchar+0xa4>)
   80c52:	4629      	mov	r1, r5
   80c54:	4638      	mov	r0, r7
   80c56:	47b0      	blx	r6
   80c58:	2800      	cmp	r0, #0
   80c5a:	d1fa      	bne.n	80c52 <usart_serial_getchar+0x32>
   80c5c:	e7ef      	b.n	80c3e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80c5e:	461f      	mov	r7, r3
   80c60:	4e19      	ldr	r6, [pc, #100]	; (80cc8 <usart_serial_getchar+0xa8>)
   80c62:	a901      	add	r1, sp, #4
   80c64:	4638      	mov	r0, r7
   80c66:	47b0      	blx	r6
   80c68:	2800      	cmp	r0, #0
   80c6a:	d1fa      	bne.n	80c62 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80c6c:	9b01      	ldr	r3, [sp, #4]
   80c6e:	702b      	strb	r3, [r5, #0]
   80c70:	e7e8      	b.n	80c44 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80c72:	461e      	mov	r6, r3
   80c74:	4c14      	ldr	r4, [pc, #80]	; (80cc8 <usart_serial_getchar+0xa8>)
   80c76:	a901      	add	r1, sp, #4
   80c78:	4630      	mov	r0, r6
   80c7a:	47a0      	blx	r4
   80c7c:	2800      	cmp	r0, #0
   80c7e:	d1fa      	bne.n	80c76 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80c80:	9b01      	ldr	r3, [sp, #4]
   80c82:	702b      	strb	r3, [r5, #0]
   80c84:	e7e1      	b.n	80c4a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80c86:	461e      	mov	r6, r3
   80c88:	4c0f      	ldr	r4, [pc, #60]	; (80cc8 <usart_serial_getchar+0xa8>)
   80c8a:	a901      	add	r1, sp, #4
   80c8c:	4630      	mov	r0, r6
   80c8e:	47a0      	blx	r4
   80c90:	2800      	cmp	r0, #0
   80c92:	d1fa      	bne.n	80c8a <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80c94:	9b01      	ldr	r3, [sp, #4]
   80c96:	702b      	strb	r3, [r5, #0]
   80c98:	e7d7      	b.n	80c4a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80c9a:	461e      	mov	r6, r3
   80c9c:	4c0a      	ldr	r4, [pc, #40]	; (80cc8 <usart_serial_getchar+0xa8>)
   80c9e:	a901      	add	r1, sp, #4
   80ca0:	4630      	mov	r0, r6
   80ca2:	47a0      	blx	r4
   80ca4:	2800      	cmp	r0, #0
   80ca6:	d1fa      	bne.n	80c9e <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80ca8:	9b01      	ldr	r3, [sp, #4]
   80caa:	702b      	strb	r3, [r5, #0]
}
   80cac:	e7cd      	b.n	80c4a <usart_serial_getchar+0x2a>
   80cae:	bf00      	nop
   80cb0:	400e0800 	.word	0x400e0800
   80cb4:	40098000 	.word	0x40098000
   80cb8:	4009c000 	.word	0x4009c000
   80cbc:	400a0000 	.word	0x400a0000
   80cc0:	400a4000 	.word	0x400a4000
   80cc4:	0008053f 	.word	0x0008053f
   80cc8:	00080367 	.word	0x00080367

00080ccc <usart_serial_putchar>:
{
   80ccc:	b570      	push	{r4, r5, r6, lr}
   80cce:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80cd0:	4b1e      	ldr	r3, [pc, #120]	; (80d4c <usart_serial_putchar+0x80>)
   80cd2:	4298      	cmp	r0, r3
   80cd4:	d00d      	beq.n	80cf2 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80cd6:	4b1e      	ldr	r3, [pc, #120]	; (80d50 <usart_serial_putchar+0x84>)
   80cd8:	4298      	cmp	r0, r3
   80cda:	d013      	beq.n	80d04 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80cdc:	4b1d      	ldr	r3, [pc, #116]	; (80d54 <usart_serial_putchar+0x88>)
   80cde:	4298      	cmp	r0, r3
   80ce0:	d019      	beq.n	80d16 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80ce2:	4b1d      	ldr	r3, [pc, #116]	; (80d58 <usart_serial_putchar+0x8c>)
   80ce4:	4298      	cmp	r0, r3
   80ce6:	d01f      	beq.n	80d28 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80ce8:	4b1c      	ldr	r3, [pc, #112]	; (80d5c <usart_serial_putchar+0x90>)
   80cea:	4298      	cmp	r0, r3
   80cec:	d025      	beq.n	80d3a <usart_serial_putchar+0x6e>
	return 0;
   80cee:	2000      	movs	r0, #0
}
   80cf0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80cf2:	461e      	mov	r6, r3
   80cf4:	4d1a      	ldr	r5, [pc, #104]	; (80d60 <usart_serial_putchar+0x94>)
   80cf6:	4621      	mov	r1, r4
   80cf8:	4630      	mov	r0, r6
   80cfa:	47a8      	blx	r5
   80cfc:	2800      	cmp	r0, #0
   80cfe:	d1fa      	bne.n	80cf6 <usart_serial_putchar+0x2a>
		return 1;
   80d00:	2001      	movs	r0, #1
   80d02:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d04:	461e      	mov	r6, r3
   80d06:	4d17      	ldr	r5, [pc, #92]	; (80d64 <usart_serial_putchar+0x98>)
   80d08:	4621      	mov	r1, r4
   80d0a:	4630      	mov	r0, r6
   80d0c:	47a8      	blx	r5
   80d0e:	2800      	cmp	r0, #0
   80d10:	d1fa      	bne.n	80d08 <usart_serial_putchar+0x3c>
		return 1;
   80d12:	2001      	movs	r0, #1
   80d14:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d16:	461e      	mov	r6, r3
   80d18:	4d12      	ldr	r5, [pc, #72]	; (80d64 <usart_serial_putchar+0x98>)
   80d1a:	4621      	mov	r1, r4
   80d1c:	4630      	mov	r0, r6
   80d1e:	47a8      	blx	r5
   80d20:	2800      	cmp	r0, #0
   80d22:	d1fa      	bne.n	80d1a <usart_serial_putchar+0x4e>
		return 1;
   80d24:	2001      	movs	r0, #1
   80d26:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d28:	461e      	mov	r6, r3
   80d2a:	4d0e      	ldr	r5, [pc, #56]	; (80d64 <usart_serial_putchar+0x98>)
   80d2c:	4621      	mov	r1, r4
   80d2e:	4630      	mov	r0, r6
   80d30:	47a8      	blx	r5
   80d32:	2800      	cmp	r0, #0
   80d34:	d1fa      	bne.n	80d2c <usart_serial_putchar+0x60>
		return 1;
   80d36:	2001      	movs	r0, #1
   80d38:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d3a:	461e      	mov	r6, r3
   80d3c:	4d09      	ldr	r5, [pc, #36]	; (80d64 <usart_serial_putchar+0x98>)
   80d3e:	4621      	mov	r1, r4
   80d40:	4630      	mov	r0, r6
   80d42:	47a8      	blx	r5
   80d44:	2800      	cmp	r0, #0
   80d46:	d1fa      	bne.n	80d3e <usart_serial_putchar+0x72>
		return 1;
   80d48:	2001      	movs	r0, #1
   80d4a:	bd70      	pop	{r4, r5, r6, pc}
   80d4c:	400e0800 	.word	0x400e0800
   80d50:	40098000 	.word	0x40098000
   80d54:	4009c000 	.word	0x4009c000
   80d58:	400a0000 	.word	0x400a0000
   80d5c:	400a4000 	.word	0x400a4000
   80d60:	0008052f 	.word	0x0008052f
   80d64:	00080353 	.word	0x00080353

00080d68 <main>:
	printf("=============\n");
}


int main (void)
{
   80d68:	b500      	push	{lr}
   80d6a:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   80d6c:	4b22      	ldr	r3, [pc, #136]	; (80df8 <main+0x90>)
   80d6e:	4798      	blx	r3
	board_init();
   80d70:	4b22      	ldr	r3, [pc, #136]	; (80dfc <main+0x94>)
   80d72:	4798      	blx	r3
   80d74:	2008      	movs	r0, #8
   80d76:	4c22      	ldr	r4, [pc, #136]	; (80e00 <main+0x98>)
   80d78:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80d7a:	4d22      	ldr	r5, [pc, #136]	; (80e04 <main+0x9c>)
   80d7c:	4b22      	ldr	r3, [pc, #136]	; (80e08 <main+0xa0>)
   80d7e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80d80:	4a22      	ldr	r2, [pc, #136]	; (80e0c <main+0xa4>)
   80d82:	4b23      	ldr	r3, [pc, #140]	; (80e10 <main+0xa8>)
   80d84:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80d86:	4a23      	ldr	r2, [pc, #140]	; (80e14 <main+0xac>)
   80d88:	4b23      	ldr	r3, [pc, #140]	; (80e18 <main+0xb0>)
   80d8a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80d8c:	4b23      	ldr	r3, [pc, #140]	; (80e1c <main+0xb4>)
   80d8e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80d90:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80d94:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80d96:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d9a:	9303      	str	r3, [sp, #12]
   80d9c:	2008      	movs	r0, #8
   80d9e:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
   80da0:	a901      	add	r1, sp, #4
   80da2:	4628      	mov	r0, r5
   80da4:	4b1e      	ldr	r3, [pc, #120]	; (80e20 <main+0xb8>)
   80da6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80da8:	4e1e      	ldr	r6, [pc, #120]	; (80e24 <main+0xbc>)
   80daa:	6833      	ldr	r3, [r6, #0]
   80dac:	2100      	movs	r1, #0
   80dae:	6898      	ldr	r0, [r3, #8]
   80db0:	4d1d      	ldr	r5, [pc, #116]	; (80e28 <main+0xc0>)
   80db2:	47a8      	blx	r5
	setbuf(stdin, NULL);
   80db4:	6833      	ldr	r3, [r6, #0]
   80db6:	2100      	movs	r1, #0
   80db8:	6858      	ldr	r0, [r3, #4]
   80dba:	47a8      	blx	r5
	printf("Console ready\n");
   80dbc:	481b      	ldr	r0, [pc, #108]	; (80e2c <main+0xc4>)
   80dbe:	4d1c      	ldr	r5, [pc, #112]	; (80e30 <main+0xc8>)
   80dc0:	47a8      	blx	r5
	printf("=============\n");
   80dc2:	481c      	ldr	r0, [pc, #112]	; (80e34 <main+0xcc>)
   80dc4:	47a8      	blx	r5
   80dc6:	200b      	movs	r0, #11
   80dc8:	47a0      	blx	r4
   80dca:	200c      	movs	r0, #12
   80dcc:	47a0      	blx	r4
   80dce:	200d      	movs	r0, #13
   80dd0:	47a0      	blx	r4
   80dd2:	200e      	movs	r0, #14
   80dd4:	47a0      	blx	r4
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80dd6:	4b18      	ldr	r3, [pc, #96]	; (80e38 <main+0xd0>)
   80dd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80ddc:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80dde:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   80de2:	461d      	mov	r5, r3
		{
			puts("Amplitude level detected");
		} 
		else
		{
			puts("----NO EDGE----");
   80de4:	4e15      	ldr	r6, [pc, #84]	; (80e3c <main+0xd4>)
   80de6:	4c16      	ldr	r4, [pc, #88]	; (80e40 <main+0xd8>)
   80de8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
		if (ioport_get_pin_level(CHECK_PIN) == 1)
   80dea:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
			puts("Amplitude level detected");
   80dee:	bf14      	ite	ne
   80df0:	4814      	ldrne	r0, [pc, #80]	; (80e44 <main+0xdc>)
			puts("----NO EDGE----");
   80df2:	4630      	moveq	r0, r6
   80df4:	47a0      	blx	r4
   80df6:	e7f7      	b.n	80de8 <main+0x80>
   80df8:	00080551 	.word	0x00080551
   80dfc:	000805b5 	.word	0x000805b5
   80e00:	000809c9 	.word	0x000809c9
   80e04:	400e0800 	.word	0x400e0800
   80e08:	20071c58 	.word	0x20071c58
   80e0c:	00080ccd 	.word	0x00080ccd
   80e10:	20071c54 	.word	0x20071c54
   80e14:	00080c21 	.word	0x00080c21
   80e18:	20071c50 	.word	0x20071c50
   80e1c:	0501bd00 	.word	0x0501bd00
   80e20:	000804f9 	.word	0x000804f9
   80e24:	20070134 	.word	0x20070134
   80e28:	00081505 	.word	0x00081505
   80e2c:	000842ac 	.word	0x000842ac
   80e30:	00081395 	.word	0x00081395
   80e34:	000842bc 	.word	0x000842bc
   80e38:	400e1000 	.word	0x400e1000
   80e3c:	000842e8 	.word	0x000842e8
   80e40:	000814f5 	.word	0x000814f5
   80e44:	000842cc 	.word	0x000842cc

00080e48 <__aeabi_frsub>:
   80e48:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   80e4c:	e002      	b.n	80e54 <__addsf3>
   80e4e:	bf00      	nop

00080e50 <__aeabi_fsub>:
   80e50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00080e54 <__addsf3>:
   80e54:	0042      	lsls	r2, r0, #1
   80e56:	bf1f      	itttt	ne
   80e58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   80e5c:	ea92 0f03 	teqne	r2, r3
   80e60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   80e64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80e68:	d06a      	beq.n	80f40 <__addsf3+0xec>
   80e6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   80e6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   80e72:	bfc1      	itttt	gt
   80e74:	18d2      	addgt	r2, r2, r3
   80e76:	4041      	eorgt	r1, r0
   80e78:	4048      	eorgt	r0, r1
   80e7a:	4041      	eorgt	r1, r0
   80e7c:	bfb8      	it	lt
   80e7e:	425b      	neglt	r3, r3
   80e80:	2b19      	cmp	r3, #25
   80e82:	bf88      	it	hi
   80e84:	4770      	bxhi	lr
   80e86:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   80e8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80e8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80e92:	bf18      	it	ne
   80e94:	4240      	negne	r0, r0
   80e96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80e9a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80e9e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   80ea2:	bf18      	it	ne
   80ea4:	4249      	negne	r1, r1
   80ea6:	ea92 0f03 	teq	r2, r3
   80eaa:	d03f      	beq.n	80f2c <__addsf3+0xd8>
   80eac:	f1a2 0201 	sub.w	r2, r2, #1
   80eb0:	fa41 fc03 	asr.w	ip, r1, r3
   80eb4:	eb10 000c 	adds.w	r0, r0, ip
   80eb8:	f1c3 0320 	rsb	r3, r3, #32
   80ebc:	fa01 f103 	lsl.w	r1, r1, r3
   80ec0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80ec4:	d502      	bpl.n	80ecc <__addsf3+0x78>
   80ec6:	4249      	negs	r1, r1
   80ec8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   80ecc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   80ed0:	d313      	bcc.n	80efa <__addsf3+0xa6>
   80ed2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80ed6:	d306      	bcc.n	80ee6 <__addsf3+0x92>
   80ed8:	0840      	lsrs	r0, r0, #1
   80eda:	ea4f 0131 	mov.w	r1, r1, rrx
   80ede:	f102 0201 	add.w	r2, r2, #1
   80ee2:	2afe      	cmp	r2, #254	; 0xfe
   80ee4:	d251      	bcs.n	80f8a <__addsf3+0x136>
   80ee6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   80eea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80eee:	bf08      	it	eq
   80ef0:	f020 0001 	biceq.w	r0, r0, #1
   80ef4:	ea40 0003 	orr.w	r0, r0, r3
   80ef8:	4770      	bx	lr
   80efa:	0049      	lsls	r1, r1, #1
   80efc:	eb40 0000 	adc.w	r0, r0, r0
   80f00:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   80f04:	f1a2 0201 	sub.w	r2, r2, #1
   80f08:	d1ed      	bne.n	80ee6 <__addsf3+0x92>
   80f0a:	fab0 fc80 	clz	ip, r0
   80f0e:	f1ac 0c08 	sub.w	ip, ip, #8
   80f12:	ebb2 020c 	subs.w	r2, r2, ip
   80f16:	fa00 f00c 	lsl.w	r0, r0, ip
   80f1a:	bfaa      	itet	ge
   80f1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   80f20:	4252      	neglt	r2, r2
   80f22:	4318      	orrge	r0, r3
   80f24:	bfbc      	itt	lt
   80f26:	40d0      	lsrlt	r0, r2
   80f28:	4318      	orrlt	r0, r3
   80f2a:	4770      	bx	lr
   80f2c:	f092 0f00 	teq	r2, #0
   80f30:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   80f34:	bf06      	itte	eq
   80f36:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   80f3a:	3201      	addeq	r2, #1
   80f3c:	3b01      	subne	r3, #1
   80f3e:	e7b5      	b.n	80eac <__addsf3+0x58>
   80f40:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80f44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   80f48:	bf18      	it	ne
   80f4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80f4e:	d021      	beq.n	80f94 <__addsf3+0x140>
   80f50:	ea92 0f03 	teq	r2, r3
   80f54:	d004      	beq.n	80f60 <__addsf3+0x10c>
   80f56:	f092 0f00 	teq	r2, #0
   80f5a:	bf08      	it	eq
   80f5c:	4608      	moveq	r0, r1
   80f5e:	4770      	bx	lr
   80f60:	ea90 0f01 	teq	r0, r1
   80f64:	bf1c      	itt	ne
   80f66:	2000      	movne	r0, #0
   80f68:	4770      	bxne	lr
   80f6a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   80f6e:	d104      	bne.n	80f7a <__addsf3+0x126>
   80f70:	0040      	lsls	r0, r0, #1
   80f72:	bf28      	it	cs
   80f74:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   80f78:	4770      	bx	lr
   80f7a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   80f7e:	bf3c      	itt	cc
   80f80:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   80f84:	4770      	bxcc	lr
   80f86:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80f8a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   80f8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80f92:	4770      	bx	lr
   80f94:	ea7f 6222 	mvns.w	r2, r2, asr #24
   80f98:	bf16      	itet	ne
   80f9a:	4608      	movne	r0, r1
   80f9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   80fa0:	4601      	movne	r1, r0
   80fa2:	0242      	lsls	r2, r0, #9
   80fa4:	bf06      	itte	eq
   80fa6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   80faa:	ea90 0f01 	teqeq	r0, r1
   80fae:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   80fb2:	4770      	bx	lr

00080fb4 <__aeabi_ui2f>:
   80fb4:	f04f 0300 	mov.w	r3, #0
   80fb8:	e004      	b.n	80fc4 <__aeabi_i2f+0x8>
   80fba:	bf00      	nop

00080fbc <__aeabi_i2f>:
   80fbc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   80fc0:	bf48      	it	mi
   80fc2:	4240      	negmi	r0, r0
   80fc4:	ea5f 0c00 	movs.w	ip, r0
   80fc8:	bf08      	it	eq
   80fca:	4770      	bxeq	lr
   80fcc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   80fd0:	4601      	mov	r1, r0
   80fd2:	f04f 0000 	mov.w	r0, #0
   80fd6:	e01c      	b.n	81012 <__aeabi_l2f+0x2a>

00080fd8 <__aeabi_ul2f>:
   80fd8:	ea50 0201 	orrs.w	r2, r0, r1
   80fdc:	bf08      	it	eq
   80fde:	4770      	bxeq	lr
   80fe0:	f04f 0300 	mov.w	r3, #0
   80fe4:	e00a      	b.n	80ffc <__aeabi_l2f+0x14>
   80fe6:	bf00      	nop

00080fe8 <__aeabi_l2f>:
   80fe8:	ea50 0201 	orrs.w	r2, r0, r1
   80fec:	bf08      	it	eq
   80fee:	4770      	bxeq	lr
   80ff0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   80ff4:	d502      	bpl.n	80ffc <__aeabi_l2f+0x14>
   80ff6:	4240      	negs	r0, r0
   80ff8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   80ffc:	ea5f 0c01 	movs.w	ip, r1
   81000:	bf02      	ittt	eq
   81002:	4684      	moveq	ip, r0
   81004:	4601      	moveq	r1, r0
   81006:	2000      	moveq	r0, #0
   81008:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   8100c:	bf08      	it	eq
   8100e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81012:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81016:	fabc f28c 	clz	r2, ip
   8101a:	3a08      	subs	r2, #8
   8101c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81020:	db10      	blt.n	81044 <__aeabi_l2f+0x5c>
   81022:	fa01 fc02 	lsl.w	ip, r1, r2
   81026:	4463      	add	r3, ip
   81028:	fa00 fc02 	lsl.w	ip, r0, r2
   8102c:	f1c2 0220 	rsb	r2, r2, #32
   81030:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81034:	fa20 f202 	lsr.w	r2, r0, r2
   81038:	eb43 0002 	adc.w	r0, r3, r2
   8103c:	bf08      	it	eq
   8103e:	f020 0001 	biceq.w	r0, r0, #1
   81042:	4770      	bx	lr
   81044:	f102 0220 	add.w	r2, r2, #32
   81048:	fa01 fc02 	lsl.w	ip, r1, r2
   8104c:	f1c2 0220 	rsb	r2, r2, #32
   81050:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81054:	fa21 f202 	lsr.w	r2, r1, r2
   81058:	eb43 0002 	adc.w	r0, r3, r2
   8105c:	bf08      	it	eq
   8105e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81062:	4770      	bx	lr

00081064 <__aeabi_fmul>:
   81064:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81068:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8106c:	bf1e      	ittt	ne
   8106e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81072:	ea92 0f0c 	teqne	r2, ip
   81076:	ea93 0f0c 	teqne	r3, ip
   8107a:	d06f      	beq.n	8115c <__aeabi_fmul+0xf8>
   8107c:	441a      	add	r2, r3
   8107e:	ea80 0c01 	eor.w	ip, r0, r1
   81082:	0240      	lsls	r0, r0, #9
   81084:	bf18      	it	ne
   81086:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8108a:	d01e      	beq.n	810ca <__aeabi_fmul+0x66>
   8108c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81090:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   81094:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   81098:	fba0 3101 	umull	r3, r1, r0, r1
   8109c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   810a0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   810a4:	bf3e      	ittt	cc
   810a6:	0049      	lslcc	r1, r1, #1
   810a8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   810ac:	005b      	lslcc	r3, r3, #1
   810ae:	ea40 0001 	orr.w	r0, r0, r1
   810b2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   810b6:	2afd      	cmp	r2, #253	; 0xfd
   810b8:	d81d      	bhi.n	810f6 <__aeabi_fmul+0x92>
   810ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   810be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   810c2:	bf08      	it	eq
   810c4:	f020 0001 	biceq.w	r0, r0, #1
   810c8:	4770      	bx	lr
   810ca:	f090 0f00 	teq	r0, #0
   810ce:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   810d2:	bf08      	it	eq
   810d4:	0249      	lsleq	r1, r1, #9
   810d6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   810da:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   810de:	3a7f      	subs	r2, #127	; 0x7f
   810e0:	bfc2      	ittt	gt
   810e2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   810e6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   810ea:	4770      	bxgt	lr
   810ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   810f0:	f04f 0300 	mov.w	r3, #0
   810f4:	3a01      	subs	r2, #1
   810f6:	dc5d      	bgt.n	811b4 <__aeabi_fmul+0x150>
   810f8:	f112 0f19 	cmn.w	r2, #25
   810fc:	bfdc      	itt	le
   810fe:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81102:	4770      	bxle	lr
   81104:	f1c2 0200 	rsb	r2, r2, #0
   81108:	0041      	lsls	r1, r0, #1
   8110a:	fa21 f102 	lsr.w	r1, r1, r2
   8110e:	f1c2 0220 	rsb	r2, r2, #32
   81112:	fa00 fc02 	lsl.w	ip, r0, r2
   81116:	ea5f 0031 	movs.w	r0, r1, rrx
   8111a:	f140 0000 	adc.w	r0, r0, #0
   8111e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81122:	bf08      	it	eq
   81124:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81128:	4770      	bx	lr
   8112a:	f092 0f00 	teq	r2, #0
   8112e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81132:	bf02      	ittt	eq
   81134:	0040      	lsleq	r0, r0, #1
   81136:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8113a:	3a01      	subeq	r2, #1
   8113c:	d0f9      	beq.n	81132 <__aeabi_fmul+0xce>
   8113e:	ea40 000c 	orr.w	r0, r0, ip
   81142:	f093 0f00 	teq	r3, #0
   81146:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8114a:	bf02      	ittt	eq
   8114c:	0049      	lsleq	r1, r1, #1
   8114e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81152:	3b01      	subeq	r3, #1
   81154:	d0f9      	beq.n	8114a <__aeabi_fmul+0xe6>
   81156:	ea41 010c 	orr.w	r1, r1, ip
   8115a:	e78f      	b.n	8107c <__aeabi_fmul+0x18>
   8115c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81160:	ea92 0f0c 	teq	r2, ip
   81164:	bf18      	it	ne
   81166:	ea93 0f0c 	teqne	r3, ip
   8116a:	d00a      	beq.n	81182 <__aeabi_fmul+0x11e>
   8116c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81170:	bf18      	it	ne
   81172:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81176:	d1d8      	bne.n	8112a <__aeabi_fmul+0xc6>
   81178:	ea80 0001 	eor.w	r0, r0, r1
   8117c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81180:	4770      	bx	lr
   81182:	f090 0f00 	teq	r0, #0
   81186:	bf17      	itett	ne
   81188:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   8118c:	4608      	moveq	r0, r1
   8118e:	f091 0f00 	teqne	r1, #0
   81192:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   81196:	d014      	beq.n	811c2 <__aeabi_fmul+0x15e>
   81198:	ea92 0f0c 	teq	r2, ip
   8119c:	d101      	bne.n	811a2 <__aeabi_fmul+0x13e>
   8119e:	0242      	lsls	r2, r0, #9
   811a0:	d10f      	bne.n	811c2 <__aeabi_fmul+0x15e>
   811a2:	ea93 0f0c 	teq	r3, ip
   811a6:	d103      	bne.n	811b0 <__aeabi_fmul+0x14c>
   811a8:	024b      	lsls	r3, r1, #9
   811aa:	bf18      	it	ne
   811ac:	4608      	movne	r0, r1
   811ae:	d108      	bne.n	811c2 <__aeabi_fmul+0x15e>
   811b0:	ea80 0001 	eor.w	r0, r0, r1
   811b4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   811b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   811bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   811c0:	4770      	bx	lr
   811c2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   811c6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   811ca:	4770      	bx	lr

000811cc <__aeabi_fdiv>:
   811cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   811d0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   811d4:	bf1e      	ittt	ne
   811d6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   811da:	ea92 0f0c 	teqne	r2, ip
   811de:	ea93 0f0c 	teqne	r3, ip
   811e2:	d069      	beq.n	812b8 <__aeabi_fdiv+0xec>
   811e4:	eba2 0203 	sub.w	r2, r2, r3
   811e8:	ea80 0c01 	eor.w	ip, r0, r1
   811ec:	0249      	lsls	r1, r1, #9
   811ee:	ea4f 2040 	mov.w	r0, r0, lsl #9
   811f2:	d037      	beq.n	81264 <__aeabi_fdiv+0x98>
   811f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   811f8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   811fc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81200:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81204:	428b      	cmp	r3, r1
   81206:	bf38      	it	cc
   81208:	005b      	lslcc	r3, r3, #1
   8120a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8120e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81212:	428b      	cmp	r3, r1
   81214:	bf24      	itt	cs
   81216:	1a5b      	subcs	r3, r3, r1
   81218:	ea40 000c 	orrcs.w	r0, r0, ip
   8121c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81220:	bf24      	itt	cs
   81222:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81226:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8122a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8122e:	bf24      	itt	cs
   81230:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81234:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81238:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   8123c:	bf24      	itt	cs
   8123e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81242:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81246:	011b      	lsls	r3, r3, #4
   81248:	bf18      	it	ne
   8124a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8124e:	d1e0      	bne.n	81212 <__aeabi_fdiv+0x46>
   81250:	2afd      	cmp	r2, #253	; 0xfd
   81252:	f63f af50 	bhi.w	810f6 <__aeabi_fmul+0x92>
   81256:	428b      	cmp	r3, r1
   81258:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8125c:	bf08      	it	eq
   8125e:	f020 0001 	biceq.w	r0, r0, #1
   81262:	4770      	bx	lr
   81264:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81268:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8126c:	327f      	adds	r2, #127	; 0x7f
   8126e:	bfc2      	ittt	gt
   81270:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81274:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   81278:	4770      	bxgt	lr
   8127a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8127e:	f04f 0300 	mov.w	r3, #0
   81282:	3a01      	subs	r2, #1
   81284:	e737      	b.n	810f6 <__aeabi_fmul+0x92>
   81286:	f092 0f00 	teq	r2, #0
   8128a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8128e:	bf02      	ittt	eq
   81290:	0040      	lsleq	r0, r0, #1
   81292:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   81296:	3a01      	subeq	r2, #1
   81298:	d0f9      	beq.n	8128e <__aeabi_fdiv+0xc2>
   8129a:	ea40 000c 	orr.w	r0, r0, ip
   8129e:	f093 0f00 	teq	r3, #0
   812a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   812a6:	bf02      	ittt	eq
   812a8:	0049      	lsleq	r1, r1, #1
   812aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   812ae:	3b01      	subeq	r3, #1
   812b0:	d0f9      	beq.n	812a6 <__aeabi_fdiv+0xda>
   812b2:	ea41 010c 	orr.w	r1, r1, ip
   812b6:	e795      	b.n	811e4 <__aeabi_fdiv+0x18>
   812b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   812bc:	ea92 0f0c 	teq	r2, ip
   812c0:	d108      	bne.n	812d4 <__aeabi_fdiv+0x108>
   812c2:	0242      	lsls	r2, r0, #9
   812c4:	f47f af7d 	bne.w	811c2 <__aeabi_fmul+0x15e>
   812c8:	ea93 0f0c 	teq	r3, ip
   812cc:	f47f af70 	bne.w	811b0 <__aeabi_fmul+0x14c>
   812d0:	4608      	mov	r0, r1
   812d2:	e776      	b.n	811c2 <__aeabi_fmul+0x15e>
   812d4:	ea93 0f0c 	teq	r3, ip
   812d8:	d104      	bne.n	812e4 <__aeabi_fdiv+0x118>
   812da:	024b      	lsls	r3, r1, #9
   812dc:	f43f af4c 	beq.w	81178 <__aeabi_fmul+0x114>
   812e0:	4608      	mov	r0, r1
   812e2:	e76e      	b.n	811c2 <__aeabi_fmul+0x15e>
   812e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   812e8:	bf18      	it	ne
   812ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   812ee:	d1ca      	bne.n	81286 <__aeabi_fdiv+0xba>
   812f0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   812f4:	f47f af5c 	bne.w	811b0 <__aeabi_fmul+0x14c>
   812f8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   812fc:	f47f af3c 	bne.w	81178 <__aeabi_fmul+0x114>
   81300:	e75f      	b.n	811c2 <__aeabi_fmul+0x15e>
   81302:	bf00      	nop

00081304 <__aeabi_f2uiz>:
   81304:	0042      	lsls	r2, r0, #1
   81306:	d20e      	bcs.n	81326 <__aeabi_f2uiz+0x22>
   81308:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8130c:	d30b      	bcc.n	81326 <__aeabi_f2uiz+0x22>
   8130e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81312:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81316:	d409      	bmi.n	8132c <__aeabi_f2uiz+0x28>
   81318:	ea4f 2300 	mov.w	r3, r0, lsl #8
   8131c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81320:	fa23 f002 	lsr.w	r0, r3, r2
   81324:	4770      	bx	lr
   81326:	f04f 0000 	mov.w	r0, #0
   8132a:	4770      	bx	lr
   8132c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81330:	d101      	bne.n	81336 <__aeabi_f2uiz+0x32>
   81332:	0242      	lsls	r2, r0, #9
   81334:	d102      	bne.n	8133c <__aeabi_f2uiz+0x38>
   81336:	f04f 30ff 	mov.w	r0, #4294967295
   8133a:	4770      	bx	lr
   8133c:	f04f 0000 	mov.w	r0, #0
   81340:	4770      	bx	lr
   81342:	bf00      	nop

00081344 <__libc_init_array>:
   81344:	b570      	push	{r4, r5, r6, lr}
   81346:	4e0f      	ldr	r6, [pc, #60]	; (81384 <__libc_init_array+0x40>)
   81348:	4d0f      	ldr	r5, [pc, #60]	; (81388 <__libc_init_array+0x44>)
   8134a:	1b76      	subs	r6, r6, r5
   8134c:	10b6      	asrs	r6, r6, #2
   8134e:	bf18      	it	ne
   81350:	2400      	movne	r4, #0
   81352:	d005      	beq.n	81360 <__libc_init_array+0x1c>
   81354:	3401      	adds	r4, #1
   81356:	f855 3b04 	ldr.w	r3, [r5], #4
   8135a:	4798      	blx	r3
   8135c:	42a6      	cmp	r6, r4
   8135e:	d1f9      	bne.n	81354 <__libc_init_array+0x10>
   81360:	4e0a      	ldr	r6, [pc, #40]	; (8138c <__libc_init_array+0x48>)
   81362:	4d0b      	ldr	r5, [pc, #44]	; (81390 <__libc_init_array+0x4c>)
   81364:	f003 f87c 	bl	84460 <_init>
   81368:	1b76      	subs	r6, r6, r5
   8136a:	10b6      	asrs	r6, r6, #2
   8136c:	bf18      	it	ne
   8136e:	2400      	movne	r4, #0
   81370:	d006      	beq.n	81380 <__libc_init_array+0x3c>
   81372:	3401      	adds	r4, #1
   81374:	f855 3b04 	ldr.w	r3, [r5], #4
   81378:	4798      	blx	r3
   8137a:	42a6      	cmp	r6, r4
   8137c:	d1f9      	bne.n	81372 <__libc_init_array+0x2e>
   8137e:	bd70      	pop	{r4, r5, r6, pc}
   81380:	bd70      	pop	{r4, r5, r6, pc}
   81382:	bf00      	nop
   81384:	0008446c 	.word	0x0008446c
   81388:	0008446c 	.word	0x0008446c
   8138c:	00084474 	.word	0x00084474
   81390:	0008446c 	.word	0x0008446c

00081394 <iprintf>:
   81394:	b40f      	push	{r0, r1, r2, r3}
   81396:	b510      	push	{r4, lr}
   81398:	4b07      	ldr	r3, [pc, #28]	; (813b8 <iprintf+0x24>)
   8139a:	b082      	sub	sp, #8
   8139c:	ac04      	add	r4, sp, #16
   8139e:	f854 2b04 	ldr.w	r2, [r4], #4
   813a2:	6818      	ldr	r0, [r3, #0]
   813a4:	4623      	mov	r3, r4
   813a6:	6881      	ldr	r1, [r0, #8]
   813a8:	9401      	str	r4, [sp, #4]
   813aa:	f000 f9e9 	bl	81780 <_vfiprintf_r>
   813ae:	b002      	add	sp, #8
   813b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   813b4:	b004      	add	sp, #16
   813b6:	4770      	bx	lr
   813b8:	20070134 	.word	0x20070134

000813bc <memset>:
   813bc:	b470      	push	{r4, r5, r6}
   813be:	0786      	lsls	r6, r0, #30
   813c0:	d046      	beq.n	81450 <memset+0x94>
   813c2:	1e54      	subs	r4, r2, #1
   813c4:	2a00      	cmp	r2, #0
   813c6:	d041      	beq.n	8144c <memset+0x90>
   813c8:	b2ca      	uxtb	r2, r1
   813ca:	4603      	mov	r3, r0
   813cc:	e002      	b.n	813d4 <memset+0x18>
   813ce:	f114 34ff 	adds.w	r4, r4, #4294967295
   813d2:	d33b      	bcc.n	8144c <memset+0x90>
   813d4:	f803 2b01 	strb.w	r2, [r3], #1
   813d8:	079d      	lsls	r5, r3, #30
   813da:	d1f8      	bne.n	813ce <memset+0x12>
   813dc:	2c03      	cmp	r4, #3
   813de:	d92e      	bls.n	8143e <memset+0x82>
   813e0:	b2cd      	uxtb	r5, r1
   813e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   813e6:	2c0f      	cmp	r4, #15
   813e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   813ec:	d919      	bls.n	81422 <memset+0x66>
   813ee:	4626      	mov	r6, r4
   813f0:	f103 0210 	add.w	r2, r3, #16
   813f4:	3e10      	subs	r6, #16
   813f6:	2e0f      	cmp	r6, #15
   813f8:	f842 5c10 	str.w	r5, [r2, #-16]
   813fc:	f842 5c0c 	str.w	r5, [r2, #-12]
   81400:	f842 5c08 	str.w	r5, [r2, #-8]
   81404:	f842 5c04 	str.w	r5, [r2, #-4]
   81408:	f102 0210 	add.w	r2, r2, #16
   8140c:	d8f2      	bhi.n	813f4 <memset+0x38>
   8140e:	f1a4 0210 	sub.w	r2, r4, #16
   81412:	f022 020f 	bic.w	r2, r2, #15
   81416:	f004 040f 	and.w	r4, r4, #15
   8141a:	3210      	adds	r2, #16
   8141c:	2c03      	cmp	r4, #3
   8141e:	4413      	add	r3, r2
   81420:	d90d      	bls.n	8143e <memset+0x82>
   81422:	461e      	mov	r6, r3
   81424:	4622      	mov	r2, r4
   81426:	3a04      	subs	r2, #4
   81428:	2a03      	cmp	r2, #3
   8142a:	f846 5b04 	str.w	r5, [r6], #4
   8142e:	d8fa      	bhi.n	81426 <memset+0x6a>
   81430:	1f22      	subs	r2, r4, #4
   81432:	f022 0203 	bic.w	r2, r2, #3
   81436:	3204      	adds	r2, #4
   81438:	4413      	add	r3, r2
   8143a:	f004 0403 	and.w	r4, r4, #3
   8143e:	b12c      	cbz	r4, 8144c <memset+0x90>
   81440:	b2c9      	uxtb	r1, r1
   81442:	441c      	add	r4, r3
   81444:	f803 1b01 	strb.w	r1, [r3], #1
   81448:	429c      	cmp	r4, r3
   8144a:	d1fb      	bne.n	81444 <memset+0x88>
   8144c:	bc70      	pop	{r4, r5, r6}
   8144e:	4770      	bx	lr
   81450:	4614      	mov	r4, r2
   81452:	4603      	mov	r3, r0
   81454:	e7c2      	b.n	813dc <memset+0x20>
   81456:	bf00      	nop

00081458 <_puts_r>:
   81458:	b5f0      	push	{r4, r5, r6, r7, lr}
   8145a:	4605      	mov	r5, r0
   8145c:	b089      	sub	sp, #36	; 0x24
   8145e:	4608      	mov	r0, r1
   81460:	460c      	mov	r4, r1
   81462:	2701      	movs	r7, #1
   81464:	f000 f91e 	bl	816a4 <strlen>
   81468:	2602      	movs	r6, #2
   8146a:	19c3      	adds	r3, r0, r7
   8146c:	4920      	ldr	r1, [pc, #128]	; (814f0 <_puts_r+0x98>)
   8146e:	9303      	str	r3, [sp, #12]
   81470:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81472:	aa04      	add	r2, sp, #16
   81474:	9404      	str	r4, [sp, #16]
   81476:	9005      	str	r0, [sp, #20]
   81478:	68ac      	ldr	r4, [r5, #8]
   8147a:	9707      	str	r7, [sp, #28]
   8147c:	9602      	str	r6, [sp, #8]
   8147e:	9106      	str	r1, [sp, #24]
   81480:	9201      	str	r2, [sp, #4]
   81482:	b353      	cbz	r3, 814da <_puts_r+0x82>
   81484:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81486:	f013 0f01 	tst.w	r3, #1
   8148a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8148e:	b29a      	uxth	r2, r3
   81490:	d101      	bne.n	81496 <_puts_r+0x3e>
   81492:	0590      	lsls	r0, r2, #22
   81494:	d525      	bpl.n	814e2 <_puts_r+0x8a>
   81496:	0491      	lsls	r1, r2, #18
   81498:	d406      	bmi.n	814a8 <_puts_r+0x50>
   8149a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8149c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   814a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   814a4:	81a3      	strh	r3, [r4, #12]
   814a6:	6662      	str	r2, [r4, #100]	; 0x64
   814a8:	4628      	mov	r0, r5
   814aa:	aa01      	add	r2, sp, #4
   814ac:	4621      	mov	r1, r4
   814ae:	f001 fb63 	bl	82b78 <__sfvwrite_r>
   814b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   814b4:	2800      	cmp	r0, #0
   814b6:	bf0c      	ite	eq
   814b8:	250a      	moveq	r5, #10
   814ba:	f04f 35ff 	movne.w	r5, #4294967295
   814be:	07da      	lsls	r2, r3, #31
   814c0:	d402      	bmi.n	814c8 <_puts_r+0x70>
   814c2:	89a3      	ldrh	r3, [r4, #12]
   814c4:	059b      	lsls	r3, r3, #22
   814c6:	d502      	bpl.n	814ce <_puts_r+0x76>
   814c8:	4628      	mov	r0, r5
   814ca:	b009      	add	sp, #36	; 0x24
   814cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   814ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
   814d0:	f001 fd08 	bl	82ee4 <__retarget_lock_release_recursive>
   814d4:	4628      	mov	r0, r5
   814d6:	b009      	add	sp, #36	; 0x24
   814d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   814da:	4628      	mov	r0, r5
   814dc:	f001 f940 	bl	82760 <__sinit>
   814e0:	e7d0      	b.n	81484 <_puts_r+0x2c>
   814e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   814e4:	f001 fcfc 	bl	82ee0 <__retarget_lock_acquire_recursive>
   814e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   814ec:	b29a      	uxth	r2, r3
   814ee:	e7d2      	b.n	81496 <_puts_r+0x3e>
   814f0:	0008428c 	.word	0x0008428c

000814f4 <puts>:
   814f4:	4b02      	ldr	r3, [pc, #8]	; (81500 <puts+0xc>)
   814f6:	4601      	mov	r1, r0
   814f8:	6818      	ldr	r0, [r3, #0]
   814fa:	f7ff bfad 	b.w	81458 <_puts_r>
   814fe:	bf00      	nop
   81500:	20070134 	.word	0x20070134

00081504 <setbuf>:
   81504:	2900      	cmp	r1, #0
   81506:	bf0c      	ite	eq
   81508:	2202      	moveq	r2, #2
   8150a:	2200      	movne	r2, #0
   8150c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81510:	f000 b800 	b.w	81514 <setvbuf>

00081514 <setvbuf>:
   81514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81518:	4d61      	ldr	r5, [pc, #388]	; (816a0 <setvbuf+0x18c>)
   8151a:	b083      	sub	sp, #12
   8151c:	682d      	ldr	r5, [r5, #0]
   8151e:	4604      	mov	r4, r0
   81520:	460f      	mov	r7, r1
   81522:	4690      	mov	r8, r2
   81524:	461e      	mov	r6, r3
   81526:	b115      	cbz	r5, 8152e <setvbuf+0x1a>
   81528:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8152a:	2b00      	cmp	r3, #0
   8152c:	d064      	beq.n	815f8 <setvbuf+0xe4>
   8152e:	f1b8 0f02 	cmp.w	r8, #2
   81532:	d006      	beq.n	81542 <setvbuf+0x2e>
   81534:	f1b8 0f01 	cmp.w	r8, #1
   81538:	f200 809f 	bhi.w	8167a <setvbuf+0x166>
   8153c:	2e00      	cmp	r6, #0
   8153e:	f2c0 809c 	blt.w	8167a <setvbuf+0x166>
   81542:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81544:	07d8      	lsls	r0, r3, #31
   81546:	d534      	bpl.n	815b2 <setvbuf+0x9e>
   81548:	4621      	mov	r1, r4
   8154a:	4628      	mov	r0, r5
   8154c:	f001 f8b0 	bl	826b0 <_fflush_r>
   81550:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81552:	b141      	cbz	r1, 81566 <setvbuf+0x52>
   81554:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81558:	4299      	cmp	r1, r3
   8155a:	d002      	beq.n	81562 <setvbuf+0x4e>
   8155c:	4628      	mov	r0, r5
   8155e:	f001 fa25 	bl	829ac <_free_r>
   81562:	2300      	movs	r3, #0
   81564:	6323      	str	r3, [r4, #48]	; 0x30
   81566:	2200      	movs	r2, #0
   81568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8156c:	61a2      	str	r2, [r4, #24]
   8156e:	6062      	str	r2, [r4, #4]
   81570:	061a      	lsls	r2, r3, #24
   81572:	d43a      	bmi.n	815ea <setvbuf+0xd6>
   81574:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81578:	f023 0303 	bic.w	r3, r3, #3
   8157c:	f1b8 0f02 	cmp.w	r8, #2
   81580:	81a3      	strh	r3, [r4, #12]
   81582:	d01d      	beq.n	815c0 <setvbuf+0xac>
   81584:	ab01      	add	r3, sp, #4
   81586:	466a      	mov	r2, sp
   81588:	4621      	mov	r1, r4
   8158a:	4628      	mov	r0, r5
   8158c:	f001 fcac 	bl	82ee8 <__swhatbuf_r>
   81590:	89a3      	ldrh	r3, [r4, #12]
   81592:	4318      	orrs	r0, r3
   81594:	81a0      	strh	r0, [r4, #12]
   81596:	2e00      	cmp	r6, #0
   81598:	d132      	bne.n	81600 <setvbuf+0xec>
   8159a:	9e00      	ldr	r6, [sp, #0]
   8159c:	4630      	mov	r0, r6
   8159e:	f001 fd1b 	bl	82fd8 <malloc>
   815a2:	4607      	mov	r7, r0
   815a4:	2800      	cmp	r0, #0
   815a6:	d06b      	beq.n	81680 <setvbuf+0x16c>
   815a8:	89a3      	ldrh	r3, [r4, #12]
   815aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   815ae:	81a3      	strh	r3, [r4, #12]
   815b0:	e028      	b.n	81604 <setvbuf+0xf0>
   815b2:	89a3      	ldrh	r3, [r4, #12]
   815b4:	0599      	lsls	r1, r3, #22
   815b6:	d4c7      	bmi.n	81548 <setvbuf+0x34>
   815b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   815ba:	f001 fc91 	bl	82ee0 <__retarget_lock_acquire_recursive>
   815be:	e7c3      	b.n	81548 <setvbuf+0x34>
   815c0:	2500      	movs	r5, #0
   815c2:	2600      	movs	r6, #0
   815c4:	2001      	movs	r0, #1
   815c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
   815c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   815cc:	f043 0302 	orr.w	r3, r3, #2
   815d0:	60a6      	str	r6, [r4, #8]
   815d2:	07ce      	lsls	r6, r1, #31
   815d4:	81a3      	strh	r3, [r4, #12]
   815d6:	6160      	str	r0, [r4, #20]
   815d8:	6022      	str	r2, [r4, #0]
   815da:	6122      	str	r2, [r4, #16]
   815dc:	d401      	bmi.n	815e2 <setvbuf+0xce>
   815de:	0598      	lsls	r0, r3, #22
   815e0:	d53e      	bpl.n	81660 <setvbuf+0x14c>
   815e2:	4628      	mov	r0, r5
   815e4:	b003      	add	sp, #12
   815e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   815ea:	6921      	ldr	r1, [r4, #16]
   815ec:	4628      	mov	r0, r5
   815ee:	f001 f9dd 	bl	829ac <_free_r>
   815f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   815f6:	e7bd      	b.n	81574 <setvbuf+0x60>
   815f8:	4628      	mov	r0, r5
   815fa:	f001 f8b1 	bl	82760 <__sinit>
   815fe:	e796      	b.n	8152e <setvbuf+0x1a>
   81600:	2f00      	cmp	r7, #0
   81602:	d0cb      	beq.n	8159c <setvbuf+0x88>
   81604:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81606:	2b00      	cmp	r3, #0
   81608:	d033      	beq.n	81672 <setvbuf+0x15e>
   8160a:	9b00      	ldr	r3, [sp, #0]
   8160c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81610:	429e      	cmp	r6, r3
   81612:	bf1c      	itt	ne
   81614:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81618:	81a2      	strhne	r2, [r4, #12]
   8161a:	f1b8 0f01 	cmp.w	r8, #1
   8161e:	bf04      	itt	eq
   81620:	f042 0201 	orreq.w	r2, r2, #1
   81624:	81a2      	strheq	r2, [r4, #12]
   81626:	b292      	uxth	r2, r2
   81628:	f012 0308 	ands.w	r3, r2, #8
   8162c:	6027      	str	r7, [r4, #0]
   8162e:	6127      	str	r7, [r4, #16]
   81630:	6166      	str	r6, [r4, #20]
   81632:	d00e      	beq.n	81652 <setvbuf+0x13e>
   81634:	07d1      	lsls	r1, r2, #31
   81636:	d51a      	bpl.n	8166e <setvbuf+0x15a>
   81638:	2300      	movs	r3, #0
   8163a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8163c:	4276      	negs	r6, r6
   8163e:	f015 0501 	ands.w	r5, r5, #1
   81642:	61a6      	str	r6, [r4, #24]
   81644:	60a3      	str	r3, [r4, #8]
   81646:	d009      	beq.n	8165c <setvbuf+0x148>
   81648:	2500      	movs	r5, #0
   8164a:	4628      	mov	r0, r5
   8164c:	b003      	add	sp, #12
   8164e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81652:	60a3      	str	r3, [r4, #8]
   81654:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81656:	f015 0501 	ands.w	r5, r5, #1
   8165a:	d1f5      	bne.n	81648 <setvbuf+0x134>
   8165c:	0593      	lsls	r3, r2, #22
   8165e:	d4c0      	bmi.n	815e2 <setvbuf+0xce>
   81660:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81662:	f001 fc3f 	bl	82ee4 <__retarget_lock_release_recursive>
   81666:	4628      	mov	r0, r5
   81668:	b003      	add	sp, #12
   8166a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8166e:	60a6      	str	r6, [r4, #8]
   81670:	e7f0      	b.n	81654 <setvbuf+0x140>
   81672:	4628      	mov	r0, r5
   81674:	f001 f874 	bl	82760 <__sinit>
   81678:	e7c7      	b.n	8160a <setvbuf+0xf6>
   8167a:	f04f 35ff 	mov.w	r5, #4294967295
   8167e:	e7b0      	b.n	815e2 <setvbuf+0xce>
   81680:	f8dd 9000 	ldr.w	r9, [sp]
   81684:	45b1      	cmp	r9, r6
   81686:	d004      	beq.n	81692 <setvbuf+0x17e>
   81688:	4648      	mov	r0, r9
   8168a:	f001 fca5 	bl	82fd8 <malloc>
   8168e:	4607      	mov	r7, r0
   81690:	b920      	cbnz	r0, 8169c <setvbuf+0x188>
   81692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81696:	f04f 35ff 	mov.w	r5, #4294967295
   8169a:	e792      	b.n	815c2 <setvbuf+0xae>
   8169c:	464e      	mov	r6, r9
   8169e:	e783      	b.n	815a8 <setvbuf+0x94>
   816a0:	20070134 	.word	0x20070134

000816a4 <strlen>:
   816a4:	f020 0103 	bic.w	r1, r0, #3
   816a8:	f010 0003 	ands.w	r0, r0, #3
   816ac:	f1c0 0000 	rsb	r0, r0, #0
   816b0:	f851 3b04 	ldr.w	r3, [r1], #4
   816b4:	f100 0c04 	add.w	ip, r0, #4
   816b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   816bc:	f06f 0200 	mvn.w	r2, #0
   816c0:	bf1c      	itt	ne
   816c2:	fa22 f20c 	lsrne.w	r2, r2, ip
   816c6:	4313      	orrne	r3, r2
   816c8:	f04f 0c01 	mov.w	ip, #1
   816cc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   816d0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   816d4:	eba3 020c 	sub.w	r2, r3, ip
   816d8:	ea22 0203 	bic.w	r2, r2, r3
   816dc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   816e0:	bf04      	itt	eq
   816e2:	f851 3b04 	ldreq.w	r3, [r1], #4
   816e6:	3004      	addeq	r0, #4
   816e8:	d0f4      	beq.n	816d4 <strlen+0x30>
   816ea:	f1c2 0100 	rsb	r1, r2, #0
   816ee:	ea02 0201 	and.w	r2, r2, r1
   816f2:	fab2 f282 	clz	r2, r2
   816f6:	f1c2 021f 	rsb	r2, r2, #31
   816fa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   816fe:	4770      	bx	lr

00081700 <__sprint_r.part.0>:
   81700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81704:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81706:	4693      	mov	fp, r2
   81708:	049c      	lsls	r4, r3, #18
   8170a:	d52f      	bpl.n	8176c <__sprint_r.part.0+0x6c>
   8170c:	6893      	ldr	r3, [r2, #8]
   8170e:	6812      	ldr	r2, [r2, #0]
   81710:	b353      	cbz	r3, 81768 <__sprint_r.part.0+0x68>
   81712:	460e      	mov	r6, r1
   81714:	4607      	mov	r7, r0
   81716:	f102 0908 	add.w	r9, r2, #8
   8171a:	e919 0420 	ldmdb	r9, {r5, sl}
   8171e:	ea5f 089a 	movs.w	r8, sl, lsr #2
   81722:	d017      	beq.n	81754 <__sprint_r.part.0+0x54>
   81724:	2400      	movs	r4, #0
   81726:	3d04      	subs	r5, #4
   81728:	e001      	b.n	8172e <__sprint_r.part.0+0x2e>
   8172a:	45a0      	cmp	r8, r4
   8172c:	d010      	beq.n	81750 <__sprint_r.part.0+0x50>
   8172e:	4632      	mov	r2, r6
   81730:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81734:	4638      	mov	r0, r7
   81736:	f001 f8b5 	bl	828a4 <_fputwc_r>
   8173a:	1c43      	adds	r3, r0, #1
   8173c:	f104 0401 	add.w	r4, r4, #1
   81740:	d1f3      	bne.n	8172a <__sprint_r.part.0+0x2a>
   81742:	2300      	movs	r3, #0
   81744:	f8cb 3008 	str.w	r3, [fp, #8]
   81748:	f8cb 3004 	str.w	r3, [fp, #4]
   8174c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81750:	f8db 3008 	ldr.w	r3, [fp, #8]
   81754:	f02a 0a03 	bic.w	sl, sl, #3
   81758:	eba3 030a 	sub.w	r3, r3, sl
   8175c:	f8cb 3008 	str.w	r3, [fp, #8]
   81760:	f109 0908 	add.w	r9, r9, #8
   81764:	2b00      	cmp	r3, #0
   81766:	d1d8      	bne.n	8171a <__sprint_r.part.0+0x1a>
   81768:	2000      	movs	r0, #0
   8176a:	e7ea      	b.n	81742 <__sprint_r.part.0+0x42>
   8176c:	f001 fa04 	bl	82b78 <__sfvwrite_r>
   81770:	2300      	movs	r3, #0
   81772:	f8cb 3008 	str.w	r3, [fp, #8]
   81776:	f8cb 3004 	str.w	r3, [fp, #4]
   8177a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8177e:	bf00      	nop

00081780 <_vfiprintf_r>:
   81780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81784:	b0ad      	sub	sp, #180	; 0xb4
   81786:	461d      	mov	r5, r3
   81788:	468b      	mov	fp, r1
   8178a:	4690      	mov	r8, r2
   8178c:	9307      	str	r3, [sp, #28]
   8178e:	9006      	str	r0, [sp, #24]
   81790:	b118      	cbz	r0, 8179a <_vfiprintf_r+0x1a>
   81792:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81794:	2b00      	cmp	r3, #0
   81796:	f000 80f3 	beq.w	81980 <_vfiprintf_r+0x200>
   8179a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8179e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   817a2:	07df      	lsls	r7, r3, #31
   817a4:	b281      	uxth	r1, r0
   817a6:	d402      	bmi.n	817ae <_vfiprintf_r+0x2e>
   817a8:	058e      	lsls	r6, r1, #22
   817aa:	f140 80fc 	bpl.w	819a6 <_vfiprintf_r+0x226>
   817ae:	048c      	lsls	r4, r1, #18
   817b0:	d40a      	bmi.n	817c8 <_vfiprintf_r+0x48>
   817b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   817b6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   817ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   817be:	f8ab 100c 	strh.w	r1, [fp, #12]
   817c2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   817c6:	b289      	uxth	r1, r1
   817c8:	0708      	lsls	r0, r1, #28
   817ca:	f140 80b3 	bpl.w	81934 <_vfiprintf_r+0x1b4>
   817ce:	f8db 3010 	ldr.w	r3, [fp, #16]
   817d2:	2b00      	cmp	r3, #0
   817d4:	f000 80ae 	beq.w	81934 <_vfiprintf_r+0x1b4>
   817d8:	f001 031a 	and.w	r3, r1, #26
   817dc:	2b0a      	cmp	r3, #10
   817de:	f000 80b5 	beq.w	8194c <_vfiprintf_r+0x1cc>
   817e2:	2300      	movs	r3, #0
   817e4:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   817e8:	46d1      	mov	r9, sl
   817ea:	930b      	str	r3, [sp, #44]	; 0x2c
   817ec:	9303      	str	r3, [sp, #12]
   817ee:	9311      	str	r3, [sp, #68]	; 0x44
   817f0:	9310      	str	r3, [sp, #64]	; 0x40
   817f2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   817f6:	f8cd b010 	str.w	fp, [sp, #16]
   817fa:	f898 3000 	ldrb.w	r3, [r8]
   817fe:	4644      	mov	r4, r8
   81800:	b1fb      	cbz	r3, 81842 <_vfiprintf_r+0xc2>
   81802:	2b25      	cmp	r3, #37	; 0x25
   81804:	d102      	bne.n	8180c <_vfiprintf_r+0x8c>
   81806:	e01c      	b.n	81842 <_vfiprintf_r+0xc2>
   81808:	2b25      	cmp	r3, #37	; 0x25
   8180a:	d003      	beq.n	81814 <_vfiprintf_r+0x94>
   8180c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81810:	2b00      	cmp	r3, #0
   81812:	d1f9      	bne.n	81808 <_vfiprintf_r+0x88>
   81814:	eba4 0508 	sub.w	r5, r4, r8
   81818:	b19d      	cbz	r5, 81842 <_vfiprintf_r+0xc2>
   8181a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8181c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8181e:	3301      	adds	r3, #1
   81820:	442a      	add	r2, r5
   81822:	2b07      	cmp	r3, #7
   81824:	f8c9 8000 	str.w	r8, [r9]
   81828:	f8c9 5004 	str.w	r5, [r9, #4]
   8182c:	9211      	str	r2, [sp, #68]	; 0x44
   8182e:	9310      	str	r3, [sp, #64]	; 0x40
   81830:	dd7a      	ble.n	81928 <_vfiprintf_r+0x1a8>
   81832:	2a00      	cmp	r2, #0
   81834:	f040 84b5 	bne.w	821a2 <_vfiprintf_r+0xa22>
   81838:	46d1      	mov	r9, sl
   8183a:	9b03      	ldr	r3, [sp, #12]
   8183c:	9210      	str	r2, [sp, #64]	; 0x40
   8183e:	442b      	add	r3, r5
   81840:	9303      	str	r3, [sp, #12]
   81842:	7823      	ldrb	r3, [r4, #0]
   81844:	2b00      	cmp	r3, #0
   81846:	f000 83e5 	beq.w	82014 <_vfiprintf_r+0x894>
   8184a:	2000      	movs	r0, #0
   8184c:	f04f 0300 	mov.w	r3, #0
   81850:	f104 0801 	add.w	r8, r4, #1
   81854:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81858:	7862      	ldrb	r2, [r4, #1]
   8185a:	4606      	mov	r6, r0
   8185c:	4605      	mov	r5, r0
   8185e:	4603      	mov	r3, r0
   81860:	f04f 34ff 	mov.w	r4, #4294967295
   81864:	f108 0801 	add.w	r8, r8, #1
   81868:	f1a2 0120 	sub.w	r1, r2, #32
   8186c:	2958      	cmp	r1, #88	; 0x58
   8186e:	f200 82d9 	bhi.w	81e24 <_vfiprintf_r+0x6a4>
   81872:	e8df f011 	tbh	[pc, r1, lsl #1]
   81876:	0228      	.short	0x0228
   81878:	02d702d7 	.word	0x02d702d7
   8187c:	02d70230 	.word	0x02d70230
   81880:	02d702d7 	.word	0x02d702d7
   81884:	02d702d7 	.word	0x02d702d7
   81888:	00a002d7 	.word	0x00a002d7
   8188c:	02d70288 	.word	0x02d70288
   81890:	02b800a8 	.word	0x02b800a8
   81894:	01a602d7 	.word	0x01a602d7
   81898:	01ab01ab 	.word	0x01ab01ab
   8189c:	01ab01ab 	.word	0x01ab01ab
   818a0:	01ab01ab 	.word	0x01ab01ab
   818a4:	01ab01ab 	.word	0x01ab01ab
   818a8:	02d701ab 	.word	0x02d701ab
   818ac:	02d702d7 	.word	0x02d702d7
   818b0:	02d702d7 	.word	0x02d702d7
   818b4:	02d702d7 	.word	0x02d702d7
   818b8:	02d702d7 	.word	0x02d702d7
   818bc:	01b902d7 	.word	0x01b902d7
   818c0:	02d702d7 	.word	0x02d702d7
   818c4:	02d702d7 	.word	0x02d702d7
   818c8:	02d702d7 	.word	0x02d702d7
   818cc:	02d702d7 	.word	0x02d702d7
   818d0:	02d702d7 	.word	0x02d702d7
   818d4:	02d7019e 	.word	0x02d7019e
   818d8:	02d702d7 	.word	0x02d702d7
   818dc:	02d702d7 	.word	0x02d702d7
   818e0:	02d701a2 	.word	0x02d701a2
   818e4:	025a02d7 	.word	0x025a02d7
   818e8:	02d702d7 	.word	0x02d702d7
   818ec:	02d702d7 	.word	0x02d702d7
   818f0:	02d702d7 	.word	0x02d702d7
   818f4:	02d702d7 	.word	0x02d702d7
   818f8:	02d702d7 	.word	0x02d702d7
   818fc:	02220261 	.word	0x02220261
   81900:	02d702d7 	.word	0x02d702d7
   81904:	027602d7 	.word	0x027602d7
   81908:	02d70222 	.word	0x02d70222
   8190c:	027b02d7 	.word	0x027b02d7
   81910:	01fc02d7 	.word	0x01fc02d7
   81914:	02100189 	.word	0x02100189
   81918:	02d702d2 	.word	0x02d702d2
   8191c:	02d70295 	.word	0x02d70295
   81920:	02d700ad 	.word	0x02d700ad
   81924:	023502d7 	.word	0x023502d7
   81928:	f109 0908 	add.w	r9, r9, #8
   8192c:	9b03      	ldr	r3, [sp, #12]
   8192e:	442b      	add	r3, r5
   81930:	9303      	str	r3, [sp, #12]
   81932:	e786      	b.n	81842 <_vfiprintf_r+0xc2>
   81934:	4659      	mov	r1, fp
   81936:	9806      	ldr	r0, [sp, #24]
   81938:	f000 fdaa 	bl	82490 <__swsetup_r>
   8193c:	bb18      	cbnz	r0, 81986 <_vfiprintf_r+0x206>
   8193e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   81942:	f001 031a 	and.w	r3, r1, #26
   81946:	2b0a      	cmp	r3, #10
   81948:	f47f af4b 	bne.w	817e2 <_vfiprintf_r+0x62>
   8194c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81950:	2b00      	cmp	r3, #0
   81952:	f6ff af46 	blt.w	817e2 <_vfiprintf_r+0x62>
   81956:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8195a:	07db      	lsls	r3, r3, #31
   8195c:	d405      	bmi.n	8196a <_vfiprintf_r+0x1ea>
   8195e:	058f      	lsls	r7, r1, #22
   81960:	d403      	bmi.n	8196a <_vfiprintf_r+0x1ea>
   81962:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81966:	f001 fabd 	bl	82ee4 <__retarget_lock_release_recursive>
   8196a:	462b      	mov	r3, r5
   8196c:	4642      	mov	r2, r8
   8196e:	4659      	mov	r1, fp
   81970:	9806      	ldr	r0, [sp, #24]
   81972:	f000 fd49 	bl	82408 <__sbprintf>
   81976:	9003      	str	r0, [sp, #12]
   81978:	9803      	ldr	r0, [sp, #12]
   8197a:	b02d      	add	sp, #180	; 0xb4
   8197c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81980:	f000 feee 	bl	82760 <__sinit>
   81984:	e709      	b.n	8179a <_vfiprintf_r+0x1a>
   81986:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8198a:	07d9      	lsls	r1, r3, #31
   8198c:	d404      	bmi.n	81998 <_vfiprintf_r+0x218>
   8198e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81992:	059a      	lsls	r2, r3, #22
   81994:	f140 84ae 	bpl.w	822f4 <_vfiprintf_r+0xb74>
   81998:	f04f 33ff 	mov.w	r3, #4294967295
   8199c:	9303      	str	r3, [sp, #12]
   8199e:	9803      	ldr	r0, [sp, #12]
   819a0:	b02d      	add	sp, #180	; 0xb4
   819a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   819a6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   819aa:	f001 fa99 	bl	82ee0 <__retarget_lock_acquire_recursive>
   819ae:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   819b2:	b281      	uxth	r1, r0
   819b4:	e6fb      	b.n	817ae <_vfiprintf_r+0x2e>
   819b6:	9907      	ldr	r1, [sp, #28]
   819b8:	460a      	mov	r2, r1
   819ba:	680d      	ldr	r5, [r1, #0]
   819bc:	3204      	adds	r2, #4
   819be:	2d00      	cmp	r5, #0
   819c0:	9207      	str	r2, [sp, #28]
   819c2:	da02      	bge.n	819ca <_vfiprintf_r+0x24a>
   819c4:	426d      	negs	r5, r5
   819c6:	f043 0304 	orr.w	r3, r3, #4
   819ca:	f898 2000 	ldrb.w	r2, [r8]
   819ce:	e749      	b.n	81864 <_vfiprintf_r+0xe4>
   819d0:	9508      	str	r5, [sp, #32]
   819d2:	069e      	lsls	r6, r3, #26
   819d4:	f100 845a 	bmi.w	8228c <_vfiprintf_r+0xb0c>
   819d8:	9907      	ldr	r1, [sp, #28]
   819da:	06dd      	lsls	r5, r3, #27
   819dc:	460a      	mov	r2, r1
   819de:	f100 83ef 	bmi.w	821c0 <_vfiprintf_r+0xa40>
   819e2:	0658      	lsls	r0, r3, #25
   819e4:	f140 83ec 	bpl.w	821c0 <_vfiprintf_r+0xa40>
   819e8:	2700      	movs	r7, #0
   819ea:	2201      	movs	r2, #1
   819ec:	880e      	ldrh	r6, [r1, #0]
   819ee:	3104      	adds	r1, #4
   819f0:	9107      	str	r1, [sp, #28]
   819f2:	f04f 0100 	mov.w	r1, #0
   819f6:	2500      	movs	r5, #0
   819f8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   819fc:	1c61      	adds	r1, r4, #1
   819fe:	f000 8117 	beq.w	81c30 <_vfiprintf_r+0x4b0>
   81a02:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81a06:	9102      	str	r1, [sp, #8]
   81a08:	ea56 0107 	orrs.w	r1, r6, r7
   81a0c:	f040 8115 	bne.w	81c3a <_vfiprintf_r+0x4ba>
   81a10:	2c00      	cmp	r4, #0
   81a12:	f040 835b 	bne.w	820cc <_vfiprintf_r+0x94c>
   81a16:	2a00      	cmp	r2, #0
   81a18:	f040 83b6 	bne.w	82188 <_vfiprintf_r+0xa08>
   81a1c:	f013 0301 	ands.w	r3, r3, #1
   81a20:	9305      	str	r3, [sp, #20]
   81a22:	f000 8455 	beq.w	822d0 <_vfiprintf_r+0xb50>
   81a26:	2330      	movs	r3, #48	; 0x30
   81a28:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81a2c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81a30:	9b05      	ldr	r3, [sp, #20]
   81a32:	42a3      	cmp	r3, r4
   81a34:	bfb8      	it	lt
   81a36:	4623      	movlt	r3, r4
   81a38:	9301      	str	r3, [sp, #4]
   81a3a:	b10d      	cbz	r5, 81a40 <_vfiprintf_r+0x2c0>
   81a3c:	3301      	adds	r3, #1
   81a3e:	9301      	str	r3, [sp, #4]
   81a40:	9b02      	ldr	r3, [sp, #8]
   81a42:	f013 0302 	ands.w	r3, r3, #2
   81a46:	9309      	str	r3, [sp, #36]	; 0x24
   81a48:	d002      	beq.n	81a50 <_vfiprintf_r+0x2d0>
   81a4a:	9b01      	ldr	r3, [sp, #4]
   81a4c:	3302      	adds	r3, #2
   81a4e:	9301      	str	r3, [sp, #4]
   81a50:	9b02      	ldr	r3, [sp, #8]
   81a52:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81a56:	930a      	str	r3, [sp, #40]	; 0x28
   81a58:	f040 8215 	bne.w	81e86 <_vfiprintf_r+0x706>
   81a5c:	9b08      	ldr	r3, [sp, #32]
   81a5e:	9a01      	ldr	r2, [sp, #4]
   81a60:	1a9d      	subs	r5, r3, r2
   81a62:	2d00      	cmp	r5, #0
   81a64:	f340 820f 	ble.w	81e86 <_vfiprintf_r+0x706>
   81a68:	2d10      	cmp	r5, #16
   81a6a:	f340 8484 	ble.w	82376 <_vfiprintf_r+0xbf6>
   81a6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81a70:	46ce      	mov	lr, r9
   81a72:	2710      	movs	r7, #16
   81a74:	46a1      	mov	r9, r4
   81a76:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81a78:	4ec5      	ldr	r6, [pc, #788]	; (81d90 <_vfiprintf_r+0x610>)
   81a7a:	4619      	mov	r1, r3
   81a7c:	9c06      	ldr	r4, [sp, #24]
   81a7e:	e007      	b.n	81a90 <_vfiprintf_r+0x310>
   81a80:	f101 0c02 	add.w	ip, r1, #2
   81a84:	4601      	mov	r1, r0
   81a86:	f10e 0e08 	add.w	lr, lr, #8
   81a8a:	3d10      	subs	r5, #16
   81a8c:	2d10      	cmp	r5, #16
   81a8e:	dd11      	ble.n	81ab4 <_vfiprintf_r+0x334>
   81a90:	1c48      	adds	r0, r1, #1
   81a92:	3210      	adds	r2, #16
   81a94:	2807      	cmp	r0, #7
   81a96:	9211      	str	r2, [sp, #68]	; 0x44
   81a98:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81a9c:	9010      	str	r0, [sp, #64]	; 0x40
   81a9e:	ddef      	ble.n	81a80 <_vfiprintf_r+0x300>
   81aa0:	2a00      	cmp	r2, #0
   81aa2:	f040 81d9 	bne.w	81e58 <_vfiprintf_r+0x6d8>
   81aa6:	3d10      	subs	r5, #16
   81aa8:	2d10      	cmp	r5, #16
   81aaa:	4611      	mov	r1, r2
   81aac:	f04f 0c01 	mov.w	ip, #1
   81ab0:	46d6      	mov	lr, sl
   81ab2:	dced      	bgt.n	81a90 <_vfiprintf_r+0x310>
   81ab4:	464c      	mov	r4, r9
   81ab6:	4661      	mov	r1, ip
   81ab8:	46f1      	mov	r9, lr
   81aba:	442a      	add	r2, r5
   81abc:	2907      	cmp	r1, #7
   81abe:	9211      	str	r2, [sp, #68]	; 0x44
   81ac0:	f8c9 6000 	str.w	r6, [r9]
   81ac4:	f8c9 5004 	str.w	r5, [r9, #4]
   81ac8:	9110      	str	r1, [sp, #64]	; 0x40
   81aca:	f300 82eb 	bgt.w	820a4 <_vfiprintf_r+0x924>
   81ace:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81ad2:	f109 0908 	add.w	r9, r9, #8
   81ad6:	1c48      	adds	r0, r1, #1
   81ad8:	2d00      	cmp	r5, #0
   81ada:	f040 81dc 	bne.w	81e96 <_vfiprintf_r+0x716>
   81ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81ae0:	2b00      	cmp	r3, #0
   81ae2:	f000 81f6 	beq.w	81ed2 <_vfiprintf_r+0x752>
   81ae6:	2102      	movs	r1, #2
   81ae8:	ab0e      	add	r3, sp, #56	; 0x38
   81aea:	440a      	add	r2, r1
   81aec:	2807      	cmp	r0, #7
   81aee:	9211      	str	r2, [sp, #68]	; 0x44
   81af0:	9010      	str	r0, [sp, #64]	; 0x40
   81af2:	f8c9 1004 	str.w	r1, [r9, #4]
   81af6:	f8c9 3000 	str.w	r3, [r9]
   81afa:	f340 81e6 	ble.w	81eca <_vfiprintf_r+0x74a>
   81afe:	2a00      	cmp	r2, #0
   81b00:	f040 8395 	bne.w	8222e <_vfiprintf_r+0xaae>
   81b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81b06:	2001      	movs	r0, #1
   81b08:	2b80      	cmp	r3, #128	; 0x80
   81b0a:	4611      	mov	r1, r2
   81b0c:	46d1      	mov	r9, sl
   81b0e:	f040 81e4 	bne.w	81eda <_vfiprintf_r+0x75a>
   81b12:	9b08      	ldr	r3, [sp, #32]
   81b14:	9d01      	ldr	r5, [sp, #4]
   81b16:	1b5e      	subs	r6, r3, r5
   81b18:	2e00      	cmp	r6, #0
   81b1a:	f340 81de 	ble.w	81eda <_vfiprintf_r+0x75a>
   81b1e:	2e10      	cmp	r6, #16
   81b20:	f340 843c 	ble.w	8239c <_vfiprintf_r+0xc1c>
   81b24:	46cc      	mov	ip, r9
   81b26:	2710      	movs	r7, #16
   81b28:	46a1      	mov	r9, r4
   81b2a:	4d9a      	ldr	r5, [pc, #616]	; (81d94 <_vfiprintf_r+0x614>)
   81b2c:	9c06      	ldr	r4, [sp, #24]
   81b2e:	e007      	b.n	81b40 <_vfiprintf_r+0x3c0>
   81b30:	f101 0e02 	add.w	lr, r1, #2
   81b34:	4601      	mov	r1, r0
   81b36:	f10c 0c08 	add.w	ip, ip, #8
   81b3a:	3e10      	subs	r6, #16
   81b3c:	2e10      	cmp	r6, #16
   81b3e:	dd11      	ble.n	81b64 <_vfiprintf_r+0x3e4>
   81b40:	1c48      	adds	r0, r1, #1
   81b42:	3210      	adds	r2, #16
   81b44:	2807      	cmp	r0, #7
   81b46:	9211      	str	r2, [sp, #68]	; 0x44
   81b48:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81b4c:	9010      	str	r0, [sp, #64]	; 0x40
   81b4e:	ddef      	ble.n	81b30 <_vfiprintf_r+0x3b0>
   81b50:	2a00      	cmp	r2, #0
   81b52:	f040 829b 	bne.w	8208c <_vfiprintf_r+0x90c>
   81b56:	3e10      	subs	r6, #16
   81b58:	2e10      	cmp	r6, #16
   81b5a:	f04f 0e01 	mov.w	lr, #1
   81b5e:	4611      	mov	r1, r2
   81b60:	46d4      	mov	ip, sl
   81b62:	dced      	bgt.n	81b40 <_vfiprintf_r+0x3c0>
   81b64:	464c      	mov	r4, r9
   81b66:	46e1      	mov	r9, ip
   81b68:	4432      	add	r2, r6
   81b6a:	f1be 0f07 	cmp.w	lr, #7
   81b6e:	9211      	str	r2, [sp, #68]	; 0x44
   81b70:	e889 0060 	stmia.w	r9, {r5, r6}
   81b74:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81b78:	f300 8366 	bgt.w	82248 <_vfiprintf_r+0xac8>
   81b7c:	f109 0908 	add.w	r9, r9, #8
   81b80:	f10e 0001 	add.w	r0, lr, #1
   81b84:	4671      	mov	r1, lr
   81b86:	e1a8      	b.n	81eda <_vfiprintf_r+0x75a>
   81b88:	9508      	str	r5, [sp, #32]
   81b8a:	f013 0220 	ands.w	r2, r3, #32
   81b8e:	f040 8389 	bne.w	822a4 <_vfiprintf_r+0xb24>
   81b92:	f013 0110 	ands.w	r1, r3, #16
   81b96:	f040 8319 	bne.w	821cc <_vfiprintf_r+0xa4c>
   81b9a:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   81b9e:	f000 8315 	beq.w	821cc <_vfiprintf_r+0xa4c>
   81ba2:	9807      	ldr	r0, [sp, #28]
   81ba4:	460a      	mov	r2, r1
   81ba6:	4601      	mov	r1, r0
   81ba8:	3104      	adds	r1, #4
   81baa:	8806      	ldrh	r6, [r0, #0]
   81bac:	2700      	movs	r7, #0
   81bae:	9107      	str	r1, [sp, #28]
   81bb0:	e71f      	b.n	819f2 <_vfiprintf_r+0x272>
   81bb2:	9508      	str	r5, [sp, #32]
   81bb4:	f043 0310 	orr.w	r3, r3, #16
   81bb8:	e7e7      	b.n	81b8a <_vfiprintf_r+0x40a>
   81bba:	9508      	str	r5, [sp, #32]
   81bbc:	f043 0310 	orr.w	r3, r3, #16
   81bc0:	e707      	b.n	819d2 <_vfiprintf_r+0x252>
   81bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81bc6:	f898 2000 	ldrb.w	r2, [r8]
   81bca:	e64b      	b.n	81864 <_vfiprintf_r+0xe4>
   81bcc:	2500      	movs	r5, #0
   81bce:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81bd2:	f818 2b01 	ldrb.w	r2, [r8], #1
   81bd6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81bda:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   81bde:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81be2:	2909      	cmp	r1, #9
   81be4:	d9f5      	bls.n	81bd2 <_vfiprintf_r+0x452>
   81be6:	e63f      	b.n	81868 <_vfiprintf_r+0xe8>
   81be8:	9508      	str	r5, [sp, #32]
   81bea:	2800      	cmp	r0, #0
   81bec:	f040 8402 	bne.w	823f4 <_vfiprintf_r+0xc74>
   81bf0:	f043 0310 	orr.w	r3, r3, #16
   81bf4:	069e      	lsls	r6, r3, #26
   81bf6:	f100 833d 	bmi.w	82274 <_vfiprintf_r+0xaf4>
   81bfa:	9907      	ldr	r1, [sp, #28]
   81bfc:	06dd      	lsls	r5, r3, #27
   81bfe:	460a      	mov	r2, r1
   81c00:	f100 82f0 	bmi.w	821e4 <_vfiprintf_r+0xa64>
   81c04:	0658      	lsls	r0, r3, #25
   81c06:	f140 82ed 	bpl.w	821e4 <_vfiprintf_r+0xa64>
   81c0a:	f9b1 6000 	ldrsh.w	r6, [r1]
   81c0e:	3204      	adds	r2, #4
   81c10:	17f7      	asrs	r7, r6, #31
   81c12:	4630      	mov	r0, r6
   81c14:	4639      	mov	r1, r7
   81c16:	9207      	str	r2, [sp, #28]
   81c18:	2800      	cmp	r0, #0
   81c1a:	f171 0200 	sbcs.w	r2, r1, #0
   81c1e:	f2c0 835a 	blt.w	822d6 <_vfiprintf_r+0xb56>
   81c22:	1c61      	adds	r1, r4, #1
   81c24:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81c28:	f04f 0201 	mov.w	r2, #1
   81c2c:	f47f aee9 	bne.w	81a02 <_vfiprintf_r+0x282>
   81c30:	ea56 0107 	orrs.w	r1, r6, r7
   81c34:	f000 824b 	beq.w	820ce <_vfiprintf_r+0x94e>
   81c38:	9302      	str	r3, [sp, #8]
   81c3a:	2a01      	cmp	r2, #1
   81c3c:	f000 828a 	beq.w	82154 <_vfiprintf_r+0x9d4>
   81c40:	2a02      	cmp	r2, #2
   81c42:	f040 825a 	bne.w	820fa <_vfiprintf_r+0x97a>
   81c46:	46d3      	mov	fp, sl
   81c48:	980b      	ldr	r0, [sp, #44]	; 0x2c
   81c4a:	0933      	lsrs	r3, r6, #4
   81c4c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81c50:	0939      	lsrs	r1, r7, #4
   81c52:	f006 020f 	and.w	r2, r6, #15
   81c56:	460f      	mov	r7, r1
   81c58:	461e      	mov	r6, r3
   81c5a:	5c83      	ldrb	r3, [r0, r2]
   81c5c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81c60:	ea56 0307 	orrs.w	r3, r6, r7
   81c64:	d1f1      	bne.n	81c4a <_vfiprintf_r+0x4ca>
   81c66:	ebaa 030b 	sub.w	r3, sl, fp
   81c6a:	9305      	str	r3, [sp, #20]
   81c6c:	e6e0      	b.n	81a30 <_vfiprintf_r+0x2b0>
   81c6e:	2800      	cmp	r0, #0
   81c70:	f040 83bd 	bne.w	823ee <_vfiprintf_r+0xc6e>
   81c74:	0699      	lsls	r1, r3, #26
   81c76:	f100 8359 	bmi.w	8232c <_vfiprintf_r+0xbac>
   81c7a:	06da      	lsls	r2, r3, #27
   81c7c:	f100 80e5 	bmi.w	81e4a <_vfiprintf_r+0x6ca>
   81c80:	065b      	lsls	r3, r3, #25
   81c82:	f140 80e2 	bpl.w	81e4a <_vfiprintf_r+0x6ca>
   81c86:	9a07      	ldr	r2, [sp, #28]
   81c88:	6813      	ldr	r3, [r2, #0]
   81c8a:	3204      	adds	r2, #4
   81c8c:	9207      	str	r2, [sp, #28]
   81c8e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   81c92:	801a      	strh	r2, [r3, #0]
   81c94:	e5b1      	b.n	817fa <_vfiprintf_r+0x7a>
   81c96:	2278      	movs	r2, #120	; 0x78
   81c98:	2130      	movs	r1, #48	; 0x30
   81c9a:	9508      	str	r5, [sp, #32]
   81c9c:	9d07      	ldr	r5, [sp, #28]
   81c9e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81ca2:	1d2a      	adds	r2, r5, #4
   81ca4:	9207      	str	r2, [sp, #28]
   81ca6:	4a3c      	ldr	r2, [pc, #240]	; (81d98 <_vfiprintf_r+0x618>)
   81ca8:	682e      	ldr	r6, [r5, #0]
   81caa:	920b      	str	r2, [sp, #44]	; 0x2c
   81cac:	f043 0302 	orr.w	r3, r3, #2
   81cb0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81cb4:	2700      	movs	r7, #0
   81cb6:	2202      	movs	r2, #2
   81cb8:	e69b      	b.n	819f2 <_vfiprintf_r+0x272>
   81cba:	9508      	str	r5, [sp, #32]
   81cbc:	2800      	cmp	r0, #0
   81cbe:	d099      	beq.n	81bf4 <_vfiprintf_r+0x474>
   81cc0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81cc4:	e796      	b.n	81bf4 <_vfiprintf_r+0x474>
   81cc6:	f898 2000 	ldrb.w	r2, [r8]
   81cca:	2e00      	cmp	r6, #0
   81ccc:	f47f adca 	bne.w	81864 <_vfiprintf_r+0xe4>
   81cd0:	2001      	movs	r0, #1
   81cd2:	2620      	movs	r6, #32
   81cd4:	e5c6      	b.n	81864 <_vfiprintf_r+0xe4>
   81cd6:	f043 0301 	orr.w	r3, r3, #1
   81cda:	f898 2000 	ldrb.w	r2, [r8]
   81cde:	e5c1      	b.n	81864 <_vfiprintf_r+0xe4>
   81ce0:	9508      	str	r5, [sp, #32]
   81ce2:	2800      	cmp	r0, #0
   81ce4:	f040 8380 	bne.w	823e8 <_vfiprintf_r+0xc68>
   81ce8:	492b      	ldr	r1, [pc, #172]	; (81d98 <_vfiprintf_r+0x618>)
   81cea:	910b      	str	r1, [sp, #44]	; 0x2c
   81cec:	069f      	lsls	r7, r3, #26
   81cee:	f100 82e5 	bmi.w	822bc <_vfiprintf_r+0xb3c>
   81cf2:	9807      	ldr	r0, [sp, #28]
   81cf4:	06de      	lsls	r6, r3, #27
   81cf6:	4601      	mov	r1, r0
   81cf8:	f100 826f 	bmi.w	821da <_vfiprintf_r+0xa5a>
   81cfc:	065d      	lsls	r5, r3, #25
   81cfe:	f140 826c 	bpl.w	821da <_vfiprintf_r+0xa5a>
   81d02:	2700      	movs	r7, #0
   81d04:	3104      	adds	r1, #4
   81d06:	8806      	ldrh	r6, [r0, #0]
   81d08:	9107      	str	r1, [sp, #28]
   81d0a:	07d8      	lsls	r0, r3, #31
   81d0c:	f140 8220 	bpl.w	82150 <_vfiprintf_r+0x9d0>
   81d10:	ea56 0107 	orrs.w	r1, r6, r7
   81d14:	f000 821c 	beq.w	82150 <_vfiprintf_r+0x9d0>
   81d18:	2130      	movs	r1, #48	; 0x30
   81d1a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81d1e:	f043 0302 	orr.w	r3, r3, #2
   81d22:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81d26:	2202      	movs	r2, #2
   81d28:	e663      	b.n	819f2 <_vfiprintf_r+0x272>
   81d2a:	9508      	str	r5, [sp, #32]
   81d2c:	2800      	cmp	r0, #0
   81d2e:	f040 8355 	bne.w	823dc <_vfiprintf_r+0xc5c>
   81d32:	491a      	ldr	r1, [pc, #104]	; (81d9c <_vfiprintf_r+0x61c>)
   81d34:	910b      	str	r1, [sp, #44]	; 0x2c
   81d36:	e7d9      	b.n	81cec <_vfiprintf_r+0x56c>
   81d38:	2201      	movs	r2, #1
   81d3a:	9807      	ldr	r0, [sp, #28]
   81d3c:	4611      	mov	r1, r2
   81d3e:	9201      	str	r2, [sp, #4]
   81d40:	6802      	ldr	r2, [r0, #0]
   81d42:	f04f 0400 	mov.w	r4, #0
   81d46:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81d4a:	4602      	mov	r2, r0
   81d4c:	3204      	adds	r2, #4
   81d4e:	9508      	str	r5, [sp, #32]
   81d50:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81d54:	9105      	str	r1, [sp, #20]
   81d56:	9207      	str	r2, [sp, #28]
   81d58:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81d5c:	9302      	str	r3, [sp, #8]
   81d5e:	2400      	movs	r4, #0
   81d60:	e66e      	b.n	81a40 <_vfiprintf_r+0x2c0>
   81d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d66:	f898 2000 	ldrb.w	r2, [r8]
   81d6a:	e57b      	b.n	81864 <_vfiprintf_r+0xe4>
   81d6c:	f898 2000 	ldrb.w	r2, [r8]
   81d70:	2a6c      	cmp	r2, #108	; 0x6c
   81d72:	bf03      	ittte	eq
   81d74:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81d78:	f043 0320 	orreq.w	r3, r3, #32
   81d7c:	f108 0801 	addeq.w	r8, r8, #1
   81d80:	f043 0310 	orrne.w	r3, r3, #16
   81d84:	e56e      	b.n	81864 <_vfiprintf_r+0xe4>
   81d86:	f898 2000 	ldrb.w	r2, [r8]
   81d8a:	2001      	movs	r0, #1
   81d8c:	262b      	movs	r6, #43	; 0x2b
   81d8e:	e569      	b.n	81864 <_vfiprintf_r+0xe4>
   81d90:	0008432c 	.word	0x0008432c
   81d94:	0008433c 	.word	0x0008433c
   81d98:	00084310 	.word	0x00084310
   81d9c:	000842fc 	.word	0x000842fc
   81da0:	f04f 0200 	mov.w	r2, #0
   81da4:	9907      	ldr	r1, [sp, #28]
   81da6:	9508      	str	r5, [sp, #32]
   81da8:	f8d1 b000 	ldr.w	fp, [r1]
   81dac:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81db0:	1d0d      	adds	r5, r1, #4
   81db2:	f1bb 0f00 	cmp.w	fp, #0
   81db6:	f000 82e4 	beq.w	82382 <_vfiprintf_r+0xc02>
   81dba:	1c67      	adds	r7, r4, #1
   81dbc:	f000 82c3 	beq.w	82346 <_vfiprintf_r+0xbc6>
   81dc0:	4622      	mov	r2, r4
   81dc2:	2100      	movs	r1, #0
   81dc4:	4658      	mov	r0, fp
   81dc6:	9301      	str	r3, [sp, #4]
   81dc8:	f001 fbc6 	bl	83558 <memchr>
   81dcc:	9b01      	ldr	r3, [sp, #4]
   81dce:	2800      	cmp	r0, #0
   81dd0:	f000 82e8 	beq.w	823a4 <_vfiprintf_r+0xc24>
   81dd4:	eba0 020b 	sub.w	r2, r0, fp
   81dd8:	9507      	str	r5, [sp, #28]
   81dda:	9205      	str	r2, [sp, #20]
   81ddc:	9302      	str	r3, [sp, #8]
   81dde:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81de2:	2400      	movs	r4, #0
   81de4:	e624      	b.n	81a30 <_vfiprintf_r+0x2b0>
   81de6:	f898 2000 	ldrb.w	r2, [r8]
   81dea:	f108 0701 	add.w	r7, r8, #1
   81dee:	2a2a      	cmp	r2, #42	; 0x2a
   81df0:	f000 82e9 	beq.w	823c6 <_vfiprintf_r+0xc46>
   81df4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81df8:	2909      	cmp	r1, #9
   81dfa:	46b8      	mov	r8, r7
   81dfc:	f04f 0400 	mov.w	r4, #0
   81e00:	f63f ad32 	bhi.w	81868 <_vfiprintf_r+0xe8>
   81e04:	f818 2b01 	ldrb.w	r2, [r8], #1
   81e08:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81e0c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81e10:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81e14:	2909      	cmp	r1, #9
   81e16:	d9f5      	bls.n	81e04 <_vfiprintf_r+0x684>
   81e18:	e526      	b.n	81868 <_vfiprintf_r+0xe8>
   81e1a:	f043 0320 	orr.w	r3, r3, #32
   81e1e:	f898 2000 	ldrb.w	r2, [r8]
   81e22:	e51f      	b.n	81864 <_vfiprintf_r+0xe4>
   81e24:	9508      	str	r5, [sp, #32]
   81e26:	2800      	cmp	r0, #0
   81e28:	f040 82db 	bne.w	823e2 <_vfiprintf_r+0xc62>
   81e2c:	2a00      	cmp	r2, #0
   81e2e:	f000 80f1 	beq.w	82014 <_vfiprintf_r+0x894>
   81e32:	2101      	movs	r1, #1
   81e34:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81e38:	f04f 0200 	mov.w	r2, #0
   81e3c:	9101      	str	r1, [sp, #4]
   81e3e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81e42:	9105      	str	r1, [sp, #20]
   81e44:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81e48:	e788      	b.n	81d5c <_vfiprintf_r+0x5dc>
   81e4a:	9a07      	ldr	r2, [sp, #28]
   81e4c:	6813      	ldr	r3, [r2, #0]
   81e4e:	3204      	adds	r2, #4
   81e50:	9207      	str	r2, [sp, #28]
   81e52:	9a03      	ldr	r2, [sp, #12]
   81e54:	601a      	str	r2, [r3, #0]
   81e56:	e4d0      	b.n	817fa <_vfiprintf_r+0x7a>
   81e58:	aa0f      	add	r2, sp, #60	; 0x3c
   81e5a:	9904      	ldr	r1, [sp, #16]
   81e5c:	4620      	mov	r0, r4
   81e5e:	f7ff fc4f 	bl	81700 <__sprint_r.part.0>
   81e62:	2800      	cmp	r0, #0
   81e64:	f040 8143 	bne.w	820ee <_vfiprintf_r+0x96e>
   81e68:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e6a:	46d6      	mov	lr, sl
   81e6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e6e:	f101 0c01 	add.w	ip, r1, #1
   81e72:	e60a      	b.n	81a8a <_vfiprintf_r+0x30a>
   81e74:	aa0f      	add	r2, sp, #60	; 0x3c
   81e76:	9904      	ldr	r1, [sp, #16]
   81e78:	9806      	ldr	r0, [sp, #24]
   81e7a:	f7ff fc41 	bl	81700 <__sprint_r.part.0>
   81e7e:	2800      	cmp	r0, #0
   81e80:	f040 8135 	bne.w	820ee <_vfiprintf_r+0x96e>
   81e84:	46d1      	mov	r9, sl
   81e86:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e88:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e8e:	1c48      	adds	r0, r1, #1
   81e90:	2d00      	cmp	r5, #0
   81e92:	f43f ae24 	beq.w	81ade <_vfiprintf_r+0x35e>
   81e96:	2101      	movs	r1, #1
   81e98:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81e9c:	440a      	add	r2, r1
   81e9e:	2807      	cmp	r0, #7
   81ea0:	9211      	str	r2, [sp, #68]	; 0x44
   81ea2:	9010      	str	r0, [sp, #64]	; 0x40
   81ea4:	f8c9 1004 	str.w	r1, [r9, #4]
   81ea8:	f8c9 5000 	str.w	r5, [r9]
   81eac:	f340 8109 	ble.w	820c2 <_vfiprintf_r+0x942>
   81eb0:	2a00      	cmp	r2, #0
   81eb2:	f040 81af 	bne.w	82214 <_vfiprintf_r+0xa94>
   81eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81eb8:	2b00      	cmp	r3, #0
   81eba:	f43f ae23 	beq.w	81b04 <_vfiprintf_r+0x384>
   81ebe:	2202      	movs	r2, #2
   81ec0:	4608      	mov	r0, r1
   81ec2:	46d1      	mov	r9, sl
   81ec4:	ab0e      	add	r3, sp, #56	; 0x38
   81ec6:	921d      	str	r2, [sp, #116]	; 0x74
   81ec8:	931c      	str	r3, [sp, #112]	; 0x70
   81eca:	4601      	mov	r1, r0
   81ecc:	f109 0908 	add.w	r9, r9, #8
   81ed0:	3001      	adds	r0, #1
   81ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81ed4:	2b80      	cmp	r3, #128	; 0x80
   81ed6:	f43f ae1c 	beq.w	81b12 <_vfiprintf_r+0x392>
   81eda:	9b05      	ldr	r3, [sp, #20]
   81edc:	1ae4      	subs	r4, r4, r3
   81ede:	2c00      	cmp	r4, #0
   81ee0:	dd2f      	ble.n	81f42 <_vfiprintf_r+0x7c2>
   81ee2:	2c10      	cmp	r4, #16
   81ee4:	f340 8220 	ble.w	82328 <_vfiprintf_r+0xba8>
   81ee8:	46ce      	mov	lr, r9
   81eea:	2610      	movs	r6, #16
   81eec:	4db2      	ldr	r5, [pc, #712]	; (821b8 <_vfiprintf_r+0xa38>)
   81eee:	9f06      	ldr	r7, [sp, #24]
   81ef0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81ef4:	e006      	b.n	81f04 <_vfiprintf_r+0x784>
   81ef6:	1c88      	adds	r0, r1, #2
   81ef8:	4619      	mov	r1, r3
   81efa:	f10e 0e08 	add.w	lr, lr, #8
   81efe:	3c10      	subs	r4, #16
   81f00:	2c10      	cmp	r4, #16
   81f02:	dd10      	ble.n	81f26 <_vfiprintf_r+0x7a6>
   81f04:	1c4b      	adds	r3, r1, #1
   81f06:	3210      	adds	r2, #16
   81f08:	2b07      	cmp	r3, #7
   81f0a:	9211      	str	r2, [sp, #68]	; 0x44
   81f0c:	e88e 0060 	stmia.w	lr, {r5, r6}
   81f10:	9310      	str	r3, [sp, #64]	; 0x40
   81f12:	ddf0      	ble.n	81ef6 <_vfiprintf_r+0x776>
   81f14:	2a00      	cmp	r2, #0
   81f16:	d165      	bne.n	81fe4 <_vfiprintf_r+0x864>
   81f18:	3c10      	subs	r4, #16
   81f1a:	2c10      	cmp	r4, #16
   81f1c:	f04f 0001 	mov.w	r0, #1
   81f20:	4611      	mov	r1, r2
   81f22:	46d6      	mov	lr, sl
   81f24:	dcee      	bgt.n	81f04 <_vfiprintf_r+0x784>
   81f26:	46f1      	mov	r9, lr
   81f28:	4422      	add	r2, r4
   81f2a:	2807      	cmp	r0, #7
   81f2c:	9211      	str	r2, [sp, #68]	; 0x44
   81f2e:	f8c9 5000 	str.w	r5, [r9]
   81f32:	f8c9 4004 	str.w	r4, [r9, #4]
   81f36:	9010      	str	r0, [sp, #64]	; 0x40
   81f38:	f300 8085 	bgt.w	82046 <_vfiprintf_r+0x8c6>
   81f3c:	f109 0908 	add.w	r9, r9, #8
   81f40:	3001      	adds	r0, #1
   81f42:	9905      	ldr	r1, [sp, #20]
   81f44:	2807      	cmp	r0, #7
   81f46:	440a      	add	r2, r1
   81f48:	9211      	str	r2, [sp, #68]	; 0x44
   81f4a:	f8c9 b000 	str.w	fp, [r9]
   81f4e:	f8c9 1004 	str.w	r1, [r9, #4]
   81f52:	9010      	str	r0, [sp, #64]	; 0x40
   81f54:	f340 8082 	ble.w	8205c <_vfiprintf_r+0x8dc>
   81f58:	2a00      	cmp	r2, #0
   81f5a:	f040 8118 	bne.w	8218e <_vfiprintf_r+0xa0e>
   81f5e:	9b02      	ldr	r3, [sp, #8]
   81f60:	9210      	str	r2, [sp, #64]	; 0x40
   81f62:	0758      	lsls	r0, r3, #29
   81f64:	d535      	bpl.n	81fd2 <_vfiprintf_r+0x852>
   81f66:	9b08      	ldr	r3, [sp, #32]
   81f68:	9901      	ldr	r1, [sp, #4]
   81f6a:	1a5c      	subs	r4, r3, r1
   81f6c:	2c00      	cmp	r4, #0
   81f6e:	f340 80e7 	ble.w	82140 <_vfiprintf_r+0x9c0>
   81f72:	46d1      	mov	r9, sl
   81f74:	2c10      	cmp	r4, #16
   81f76:	f340 820d 	ble.w	82394 <_vfiprintf_r+0xc14>
   81f7a:	2510      	movs	r5, #16
   81f7c:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f7e:	4e8f      	ldr	r6, [pc, #572]	; (821bc <_vfiprintf_r+0xa3c>)
   81f80:	9f06      	ldr	r7, [sp, #24]
   81f82:	f8dd b010 	ldr.w	fp, [sp, #16]
   81f86:	e006      	b.n	81f96 <_vfiprintf_r+0x816>
   81f88:	1c88      	adds	r0, r1, #2
   81f8a:	4619      	mov	r1, r3
   81f8c:	f109 0908 	add.w	r9, r9, #8
   81f90:	3c10      	subs	r4, #16
   81f92:	2c10      	cmp	r4, #16
   81f94:	dd11      	ble.n	81fba <_vfiprintf_r+0x83a>
   81f96:	1c4b      	adds	r3, r1, #1
   81f98:	3210      	adds	r2, #16
   81f9a:	2b07      	cmp	r3, #7
   81f9c:	9211      	str	r2, [sp, #68]	; 0x44
   81f9e:	f8c9 6000 	str.w	r6, [r9]
   81fa2:	f8c9 5004 	str.w	r5, [r9, #4]
   81fa6:	9310      	str	r3, [sp, #64]	; 0x40
   81fa8:	ddee      	ble.n	81f88 <_vfiprintf_r+0x808>
   81faa:	bb42      	cbnz	r2, 81ffe <_vfiprintf_r+0x87e>
   81fac:	3c10      	subs	r4, #16
   81fae:	2c10      	cmp	r4, #16
   81fb0:	f04f 0001 	mov.w	r0, #1
   81fb4:	4611      	mov	r1, r2
   81fb6:	46d1      	mov	r9, sl
   81fb8:	dced      	bgt.n	81f96 <_vfiprintf_r+0x816>
   81fba:	4422      	add	r2, r4
   81fbc:	2807      	cmp	r0, #7
   81fbe:	9211      	str	r2, [sp, #68]	; 0x44
   81fc0:	f8c9 6000 	str.w	r6, [r9]
   81fc4:	f8c9 4004 	str.w	r4, [r9, #4]
   81fc8:	9010      	str	r0, [sp, #64]	; 0x40
   81fca:	dd51      	ble.n	82070 <_vfiprintf_r+0x8f0>
   81fcc:	2a00      	cmp	r2, #0
   81fce:	f040 819a 	bne.w	82306 <_vfiprintf_r+0xb86>
   81fd2:	9b03      	ldr	r3, [sp, #12]
   81fd4:	9a08      	ldr	r2, [sp, #32]
   81fd6:	9901      	ldr	r1, [sp, #4]
   81fd8:	428a      	cmp	r2, r1
   81fda:	bfac      	ite	ge
   81fdc:	189b      	addge	r3, r3, r2
   81fde:	185b      	addlt	r3, r3, r1
   81fe0:	9303      	str	r3, [sp, #12]
   81fe2:	e04e      	b.n	82082 <_vfiprintf_r+0x902>
   81fe4:	aa0f      	add	r2, sp, #60	; 0x3c
   81fe6:	4649      	mov	r1, r9
   81fe8:	4638      	mov	r0, r7
   81fea:	f7ff fb89 	bl	81700 <__sprint_r.part.0>
   81fee:	2800      	cmp	r0, #0
   81ff0:	f040 813e 	bne.w	82270 <_vfiprintf_r+0xaf0>
   81ff4:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ff6:	46d6      	mov	lr, sl
   81ff8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ffa:	1c48      	adds	r0, r1, #1
   81ffc:	e77f      	b.n	81efe <_vfiprintf_r+0x77e>
   81ffe:	aa0f      	add	r2, sp, #60	; 0x3c
   82000:	4659      	mov	r1, fp
   82002:	4638      	mov	r0, r7
   82004:	f7ff fb7c 	bl	81700 <__sprint_r.part.0>
   82008:	b960      	cbnz	r0, 82024 <_vfiprintf_r+0x8a4>
   8200a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8200c:	46d1      	mov	r9, sl
   8200e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82010:	1c48      	adds	r0, r1, #1
   82012:	e7bd      	b.n	81f90 <_vfiprintf_r+0x810>
   82014:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82016:	f8dd b010 	ldr.w	fp, [sp, #16]
   8201a:	2b00      	cmp	r3, #0
   8201c:	f040 81ca 	bne.w	823b4 <_vfiprintf_r+0xc34>
   82020:	2300      	movs	r3, #0
   82022:	9310      	str	r3, [sp, #64]	; 0x40
   82024:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82028:	f013 0f01 	tst.w	r3, #1
   8202c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82030:	d102      	bne.n	82038 <_vfiprintf_r+0x8b8>
   82032:	059a      	lsls	r2, r3, #22
   82034:	f140 80dd 	bpl.w	821f2 <_vfiprintf_r+0xa72>
   82038:	065b      	lsls	r3, r3, #25
   8203a:	f53f acad 	bmi.w	81998 <_vfiprintf_r+0x218>
   8203e:	9803      	ldr	r0, [sp, #12]
   82040:	b02d      	add	sp, #180	; 0xb4
   82042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82046:	2a00      	cmp	r2, #0
   82048:	f040 8105 	bne.w	82256 <_vfiprintf_r+0xad6>
   8204c:	2301      	movs	r3, #1
   8204e:	46d1      	mov	r9, sl
   82050:	9a05      	ldr	r2, [sp, #20]
   82052:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   82056:	921d      	str	r2, [sp, #116]	; 0x74
   82058:	9211      	str	r2, [sp, #68]	; 0x44
   8205a:	9310      	str	r3, [sp, #64]	; 0x40
   8205c:	f109 0908 	add.w	r9, r9, #8
   82060:	9b02      	ldr	r3, [sp, #8]
   82062:	0759      	lsls	r1, r3, #29
   82064:	d504      	bpl.n	82070 <_vfiprintf_r+0x8f0>
   82066:	9b08      	ldr	r3, [sp, #32]
   82068:	9901      	ldr	r1, [sp, #4]
   8206a:	1a5c      	subs	r4, r3, r1
   8206c:	2c00      	cmp	r4, #0
   8206e:	dc81      	bgt.n	81f74 <_vfiprintf_r+0x7f4>
   82070:	9b03      	ldr	r3, [sp, #12]
   82072:	9908      	ldr	r1, [sp, #32]
   82074:	9801      	ldr	r0, [sp, #4]
   82076:	4281      	cmp	r1, r0
   82078:	bfac      	ite	ge
   8207a:	185b      	addge	r3, r3, r1
   8207c:	181b      	addlt	r3, r3, r0
   8207e:	9303      	str	r3, [sp, #12]
   82080:	bb72      	cbnz	r2, 820e0 <_vfiprintf_r+0x960>
   82082:	2300      	movs	r3, #0
   82084:	46d1      	mov	r9, sl
   82086:	9310      	str	r3, [sp, #64]	; 0x40
   82088:	f7ff bbb7 	b.w	817fa <_vfiprintf_r+0x7a>
   8208c:	aa0f      	add	r2, sp, #60	; 0x3c
   8208e:	9904      	ldr	r1, [sp, #16]
   82090:	4620      	mov	r0, r4
   82092:	f7ff fb35 	bl	81700 <__sprint_r.part.0>
   82096:	bb50      	cbnz	r0, 820ee <_vfiprintf_r+0x96e>
   82098:	9910      	ldr	r1, [sp, #64]	; 0x40
   8209a:	46d4      	mov	ip, sl
   8209c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8209e:	f101 0e01 	add.w	lr, r1, #1
   820a2:	e54a      	b.n	81b3a <_vfiprintf_r+0x3ba>
   820a4:	2a00      	cmp	r2, #0
   820a6:	f47f aee5 	bne.w	81e74 <_vfiprintf_r+0x6f4>
   820aa:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   820ae:	2900      	cmp	r1, #0
   820b0:	f000 811a 	beq.w	822e8 <_vfiprintf_r+0xb68>
   820b4:	2201      	movs	r2, #1
   820b6:	46d1      	mov	r9, sl
   820b8:	4610      	mov	r0, r2
   820ba:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   820be:	921d      	str	r2, [sp, #116]	; 0x74
   820c0:	911c      	str	r1, [sp, #112]	; 0x70
   820c2:	4601      	mov	r1, r0
   820c4:	f109 0908 	add.w	r9, r9, #8
   820c8:	3001      	adds	r0, #1
   820ca:	e508      	b.n	81ade <_vfiprintf_r+0x35e>
   820cc:	9b02      	ldr	r3, [sp, #8]
   820ce:	2a01      	cmp	r2, #1
   820d0:	f000 8097 	beq.w	82202 <_vfiprintf_r+0xa82>
   820d4:	2a02      	cmp	r2, #2
   820d6:	d10d      	bne.n	820f4 <_vfiprintf_r+0x974>
   820d8:	9302      	str	r3, [sp, #8]
   820da:	2600      	movs	r6, #0
   820dc:	2700      	movs	r7, #0
   820de:	e5b2      	b.n	81c46 <_vfiprintf_r+0x4c6>
   820e0:	aa0f      	add	r2, sp, #60	; 0x3c
   820e2:	9904      	ldr	r1, [sp, #16]
   820e4:	9806      	ldr	r0, [sp, #24]
   820e6:	f7ff fb0b 	bl	81700 <__sprint_r.part.0>
   820ea:	2800      	cmp	r0, #0
   820ec:	d0c9      	beq.n	82082 <_vfiprintf_r+0x902>
   820ee:	f8dd b010 	ldr.w	fp, [sp, #16]
   820f2:	e797      	b.n	82024 <_vfiprintf_r+0x8a4>
   820f4:	2600      	movs	r6, #0
   820f6:	2700      	movs	r7, #0
   820f8:	9302      	str	r3, [sp, #8]
   820fa:	4651      	mov	r1, sl
   820fc:	e000      	b.n	82100 <_vfiprintf_r+0x980>
   820fe:	4659      	mov	r1, fp
   82100:	08f2      	lsrs	r2, r6, #3
   82102:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   82106:	08f8      	lsrs	r0, r7, #3
   82108:	f006 0307 	and.w	r3, r6, #7
   8210c:	4607      	mov	r7, r0
   8210e:	4616      	mov	r6, r2
   82110:	3330      	adds	r3, #48	; 0x30
   82112:	ea56 0207 	orrs.w	r2, r6, r7
   82116:	f801 3c01 	strb.w	r3, [r1, #-1]
   8211a:	f101 3bff 	add.w	fp, r1, #4294967295
   8211e:	d1ee      	bne.n	820fe <_vfiprintf_r+0x97e>
   82120:	9a02      	ldr	r2, [sp, #8]
   82122:	07d6      	lsls	r6, r2, #31
   82124:	f57f ad9f 	bpl.w	81c66 <_vfiprintf_r+0x4e6>
   82128:	2b30      	cmp	r3, #48	; 0x30
   8212a:	f43f ad9c 	beq.w	81c66 <_vfiprintf_r+0x4e6>
   8212e:	2330      	movs	r3, #48	; 0x30
   82130:	3902      	subs	r1, #2
   82132:	f80b 3c01 	strb.w	r3, [fp, #-1]
   82136:	ebaa 0301 	sub.w	r3, sl, r1
   8213a:	9305      	str	r3, [sp, #20]
   8213c:	468b      	mov	fp, r1
   8213e:	e477      	b.n	81a30 <_vfiprintf_r+0x2b0>
   82140:	9b03      	ldr	r3, [sp, #12]
   82142:	9a08      	ldr	r2, [sp, #32]
   82144:	428a      	cmp	r2, r1
   82146:	bfac      	ite	ge
   82148:	189b      	addge	r3, r3, r2
   8214a:	185b      	addlt	r3, r3, r1
   8214c:	9303      	str	r3, [sp, #12]
   8214e:	e798      	b.n	82082 <_vfiprintf_r+0x902>
   82150:	2202      	movs	r2, #2
   82152:	e44e      	b.n	819f2 <_vfiprintf_r+0x272>
   82154:	2f00      	cmp	r7, #0
   82156:	bf08      	it	eq
   82158:	2e0a      	cmpeq	r6, #10
   8215a:	d351      	bcc.n	82200 <_vfiprintf_r+0xa80>
   8215c:	46d3      	mov	fp, sl
   8215e:	4630      	mov	r0, r6
   82160:	4639      	mov	r1, r7
   82162:	220a      	movs	r2, #10
   82164:	2300      	movs	r3, #0
   82166:	f001 fefb 	bl	83f60 <__aeabi_uldivmod>
   8216a:	3230      	adds	r2, #48	; 0x30
   8216c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   82170:	4630      	mov	r0, r6
   82172:	4639      	mov	r1, r7
   82174:	2300      	movs	r3, #0
   82176:	220a      	movs	r2, #10
   82178:	f001 fef2 	bl	83f60 <__aeabi_uldivmod>
   8217c:	4606      	mov	r6, r0
   8217e:	460f      	mov	r7, r1
   82180:	ea56 0307 	orrs.w	r3, r6, r7
   82184:	d1eb      	bne.n	8215e <_vfiprintf_r+0x9de>
   82186:	e56e      	b.n	81c66 <_vfiprintf_r+0x4e6>
   82188:	9405      	str	r4, [sp, #20]
   8218a:	46d3      	mov	fp, sl
   8218c:	e450      	b.n	81a30 <_vfiprintf_r+0x2b0>
   8218e:	aa0f      	add	r2, sp, #60	; 0x3c
   82190:	9904      	ldr	r1, [sp, #16]
   82192:	9806      	ldr	r0, [sp, #24]
   82194:	f7ff fab4 	bl	81700 <__sprint_r.part.0>
   82198:	2800      	cmp	r0, #0
   8219a:	d1a8      	bne.n	820ee <_vfiprintf_r+0x96e>
   8219c:	46d1      	mov	r9, sl
   8219e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821a0:	e75e      	b.n	82060 <_vfiprintf_r+0x8e0>
   821a2:	aa0f      	add	r2, sp, #60	; 0x3c
   821a4:	9904      	ldr	r1, [sp, #16]
   821a6:	9806      	ldr	r0, [sp, #24]
   821a8:	f7ff faaa 	bl	81700 <__sprint_r.part.0>
   821ac:	2800      	cmp	r0, #0
   821ae:	d19e      	bne.n	820ee <_vfiprintf_r+0x96e>
   821b0:	46d1      	mov	r9, sl
   821b2:	f7ff bbbb 	b.w	8192c <_vfiprintf_r+0x1ac>
   821b6:	bf00      	nop
   821b8:	0008433c 	.word	0x0008433c
   821bc:	0008432c 	.word	0x0008432c
   821c0:	3104      	adds	r1, #4
   821c2:	6816      	ldr	r6, [r2, #0]
   821c4:	2700      	movs	r7, #0
   821c6:	2201      	movs	r2, #1
   821c8:	9107      	str	r1, [sp, #28]
   821ca:	e412      	b.n	819f2 <_vfiprintf_r+0x272>
   821cc:	9807      	ldr	r0, [sp, #28]
   821ce:	2700      	movs	r7, #0
   821d0:	4601      	mov	r1, r0
   821d2:	3104      	adds	r1, #4
   821d4:	6806      	ldr	r6, [r0, #0]
   821d6:	9107      	str	r1, [sp, #28]
   821d8:	e40b      	b.n	819f2 <_vfiprintf_r+0x272>
   821da:	680e      	ldr	r6, [r1, #0]
   821dc:	3104      	adds	r1, #4
   821de:	9107      	str	r1, [sp, #28]
   821e0:	2700      	movs	r7, #0
   821e2:	e592      	b.n	81d0a <_vfiprintf_r+0x58a>
   821e4:	6816      	ldr	r6, [r2, #0]
   821e6:	3204      	adds	r2, #4
   821e8:	17f7      	asrs	r7, r6, #31
   821ea:	9207      	str	r2, [sp, #28]
   821ec:	4630      	mov	r0, r6
   821ee:	4639      	mov	r1, r7
   821f0:	e512      	b.n	81c18 <_vfiprintf_r+0x498>
   821f2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   821f6:	f000 fe75 	bl	82ee4 <__retarget_lock_release_recursive>
   821fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   821fe:	e71b      	b.n	82038 <_vfiprintf_r+0x8b8>
   82200:	9b02      	ldr	r3, [sp, #8]
   82202:	9302      	str	r3, [sp, #8]
   82204:	2301      	movs	r3, #1
   82206:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8220a:	3630      	adds	r6, #48	; 0x30
   8220c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   82210:	9305      	str	r3, [sp, #20]
   82212:	e40d      	b.n	81a30 <_vfiprintf_r+0x2b0>
   82214:	aa0f      	add	r2, sp, #60	; 0x3c
   82216:	9904      	ldr	r1, [sp, #16]
   82218:	9806      	ldr	r0, [sp, #24]
   8221a:	f7ff fa71 	bl	81700 <__sprint_r.part.0>
   8221e:	2800      	cmp	r0, #0
   82220:	f47f af65 	bne.w	820ee <_vfiprintf_r+0x96e>
   82224:	9910      	ldr	r1, [sp, #64]	; 0x40
   82226:	46d1      	mov	r9, sl
   82228:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8222a:	1c48      	adds	r0, r1, #1
   8222c:	e457      	b.n	81ade <_vfiprintf_r+0x35e>
   8222e:	aa0f      	add	r2, sp, #60	; 0x3c
   82230:	9904      	ldr	r1, [sp, #16]
   82232:	9806      	ldr	r0, [sp, #24]
   82234:	f7ff fa64 	bl	81700 <__sprint_r.part.0>
   82238:	2800      	cmp	r0, #0
   8223a:	f47f af58 	bne.w	820ee <_vfiprintf_r+0x96e>
   8223e:	9910      	ldr	r1, [sp, #64]	; 0x40
   82240:	46d1      	mov	r9, sl
   82242:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82244:	1c48      	adds	r0, r1, #1
   82246:	e644      	b.n	81ed2 <_vfiprintf_r+0x752>
   82248:	2a00      	cmp	r2, #0
   8224a:	f040 8087 	bne.w	8235c <_vfiprintf_r+0xbdc>
   8224e:	2001      	movs	r0, #1
   82250:	4611      	mov	r1, r2
   82252:	46d1      	mov	r9, sl
   82254:	e641      	b.n	81eda <_vfiprintf_r+0x75a>
   82256:	aa0f      	add	r2, sp, #60	; 0x3c
   82258:	9904      	ldr	r1, [sp, #16]
   8225a:	9806      	ldr	r0, [sp, #24]
   8225c:	f7ff fa50 	bl	81700 <__sprint_r.part.0>
   82260:	2800      	cmp	r0, #0
   82262:	f47f af44 	bne.w	820ee <_vfiprintf_r+0x96e>
   82266:	9810      	ldr	r0, [sp, #64]	; 0x40
   82268:	46d1      	mov	r9, sl
   8226a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8226c:	3001      	adds	r0, #1
   8226e:	e668      	b.n	81f42 <_vfiprintf_r+0x7c2>
   82270:	46cb      	mov	fp, r9
   82272:	e6d7      	b.n	82024 <_vfiprintf_r+0x8a4>
   82274:	9d07      	ldr	r5, [sp, #28]
   82276:	3507      	adds	r5, #7
   82278:	f025 0507 	bic.w	r5, r5, #7
   8227c:	f105 0208 	add.w	r2, r5, #8
   82280:	e9d5 0100 	ldrd	r0, r1, [r5]
   82284:	9207      	str	r2, [sp, #28]
   82286:	4606      	mov	r6, r0
   82288:	460f      	mov	r7, r1
   8228a:	e4c5      	b.n	81c18 <_vfiprintf_r+0x498>
   8228c:	9d07      	ldr	r5, [sp, #28]
   8228e:	3507      	adds	r5, #7
   82290:	f025 0207 	bic.w	r2, r5, #7
   82294:	f102 0108 	add.w	r1, r2, #8
   82298:	e9d2 6700 	ldrd	r6, r7, [r2]
   8229c:	9107      	str	r1, [sp, #28]
   8229e:	2201      	movs	r2, #1
   822a0:	f7ff bba7 	b.w	819f2 <_vfiprintf_r+0x272>
   822a4:	9d07      	ldr	r5, [sp, #28]
   822a6:	3507      	adds	r5, #7
   822a8:	f025 0207 	bic.w	r2, r5, #7
   822ac:	f102 0108 	add.w	r1, r2, #8
   822b0:	e9d2 6700 	ldrd	r6, r7, [r2]
   822b4:	9107      	str	r1, [sp, #28]
   822b6:	2200      	movs	r2, #0
   822b8:	f7ff bb9b 	b.w	819f2 <_vfiprintf_r+0x272>
   822bc:	9d07      	ldr	r5, [sp, #28]
   822be:	3507      	adds	r5, #7
   822c0:	f025 0107 	bic.w	r1, r5, #7
   822c4:	f101 0008 	add.w	r0, r1, #8
   822c8:	9007      	str	r0, [sp, #28]
   822ca:	e9d1 6700 	ldrd	r6, r7, [r1]
   822ce:	e51c      	b.n	81d0a <_vfiprintf_r+0x58a>
   822d0:	46d3      	mov	fp, sl
   822d2:	f7ff bbad 	b.w	81a30 <_vfiprintf_r+0x2b0>
   822d6:	252d      	movs	r5, #45	; 0x2d
   822d8:	4276      	negs	r6, r6
   822da:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   822de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   822e2:	2201      	movs	r2, #1
   822e4:	f7ff bb8a 	b.w	819fc <_vfiprintf_r+0x27c>
   822e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   822ea:	b9b3      	cbnz	r3, 8231a <_vfiprintf_r+0xb9a>
   822ec:	4611      	mov	r1, r2
   822ee:	2001      	movs	r0, #1
   822f0:	46d1      	mov	r9, sl
   822f2:	e5f2      	b.n	81eda <_vfiprintf_r+0x75a>
   822f4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   822f8:	f000 fdf4 	bl	82ee4 <__retarget_lock_release_recursive>
   822fc:	f04f 33ff 	mov.w	r3, #4294967295
   82300:	9303      	str	r3, [sp, #12]
   82302:	f7ff bb4c 	b.w	8199e <_vfiprintf_r+0x21e>
   82306:	aa0f      	add	r2, sp, #60	; 0x3c
   82308:	9904      	ldr	r1, [sp, #16]
   8230a:	9806      	ldr	r0, [sp, #24]
   8230c:	f7ff f9f8 	bl	81700 <__sprint_r.part.0>
   82310:	2800      	cmp	r0, #0
   82312:	f47f aeec 	bne.w	820ee <_vfiprintf_r+0x96e>
   82316:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82318:	e6aa      	b.n	82070 <_vfiprintf_r+0x8f0>
   8231a:	2202      	movs	r2, #2
   8231c:	ab0e      	add	r3, sp, #56	; 0x38
   8231e:	921d      	str	r2, [sp, #116]	; 0x74
   82320:	931c      	str	r3, [sp, #112]	; 0x70
   82322:	2001      	movs	r0, #1
   82324:	46d1      	mov	r9, sl
   82326:	e5d0      	b.n	81eca <_vfiprintf_r+0x74a>
   82328:	4d34      	ldr	r5, [pc, #208]	; (823fc <_vfiprintf_r+0xc7c>)
   8232a:	e5fd      	b.n	81f28 <_vfiprintf_r+0x7a8>
   8232c:	9a07      	ldr	r2, [sp, #28]
   8232e:	4613      	mov	r3, r2
   82330:	3304      	adds	r3, #4
   82332:	9307      	str	r3, [sp, #28]
   82334:	9b03      	ldr	r3, [sp, #12]
   82336:	6811      	ldr	r1, [r2, #0]
   82338:	17dd      	asrs	r5, r3, #31
   8233a:	461a      	mov	r2, r3
   8233c:	462b      	mov	r3, r5
   8233e:	e9c1 2300 	strd	r2, r3, [r1]
   82342:	f7ff ba5a 	b.w	817fa <_vfiprintf_r+0x7a>
   82346:	4658      	mov	r0, fp
   82348:	9507      	str	r5, [sp, #28]
   8234a:	9302      	str	r3, [sp, #8]
   8234c:	f7ff f9aa 	bl	816a4 <strlen>
   82350:	2400      	movs	r4, #0
   82352:	9005      	str	r0, [sp, #20]
   82354:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82358:	f7ff bb6a 	b.w	81a30 <_vfiprintf_r+0x2b0>
   8235c:	aa0f      	add	r2, sp, #60	; 0x3c
   8235e:	9904      	ldr	r1, [sp, #16]
   82360:	9806      	ldr	r0, [sp, #24]
   82362:	f7ff f9cd 	bl	81700 <__sprint_r.part.0>
   82366:	2800      	cmp	r0, #0
   82368:	f47f aec1 	bne.w	820ee <_vfiprintf_r+0x96e>
   8236c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8236e:	46d1      	mov	r9, sl
   82370:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82372:	1c48      	adds	r0, r1, #1
   82374:	e5b1      	b.n	81eda <_vfiprintf_r+0x75a>
   82376:	9910      	ldr	r1, [sp, #64]	; 0x40
   82378:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8237a:	3101      	adds	r1, #1
   8237c:	4e20      	ldr	r6, [pc, #128]	; (82400 <_vfiprintf_r+0xc80>)
   8237e:	f7ff bb9c 	b.w	81aba <_vfiprintf_r+0x33a>
   82382:	2c06      	cmp	r4, #6
   82384:	bf28      	it	cs
   82386:	2406      	movcs	r4, #6
   82388:	9507      	str	r5, [sp, #28]
   8238a:	9405      	str	r4, [sp, #20]
   8238c:	9401      	str	r4, [sp, #4]
   8238e:	f8df b074 	ldr.w	fp, [pc, #116]	; 82404 <_vfiprintf_r+0xc84>
   82392:	e4e3      	b.n	81d5c <_vfiprintf_r+0x5dc>
   82394:	9810      	ldr	r0, [sp, #64]	; 0x40
   82396:	4e1a      	ldr	r6, [pc, #104]	; (82400 <_vfiprintf_r+0xc80>)
   82398:	3001      	adds	r0, #1
   8239a:	e60e      	b.n	81fba <_vfiprintf_r+0x83a>
   8239c:	4686      	mov	lr, r0
   8239e:	4d17      	ldr	r5, [pc, #92]	; (823fc <_vfiprintf_r+0xc7c>)
   823a0:	f7ff bbe2 	b.w	81b68 <_vfiprintf_r+0x3e8>
   823a4:	9405      	str	r4, [sp, #20]
   823a6:	9507      	str	r5, [sp, #28]
   823a8:	9302      	str	r3, [sp, #8]
   823aa:	4604      	mov	r4, r0
   823ac:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   823b0:	f7ff bb3e 	b.w	81a30 <_vfiprintf_r+0x2b0>
   823b4:	9806      	ldr	r0, [sp, #24]
   823b6:	aa0f      	add	r2, sp, #60	; 0x3c
   823b8:	4659      	mov	r1, fp
   823ba:	f7ff f9a1 	bl	81700 <__sprint_r.part.0>
   823be:	2800      	cmp	r0, #0
   823c0:	f43f ae2e 	beq.w	82020 <_vfiprintf_r+0x8a0>
   823c4:	e62e      	b.n	82024 <_vfiprintf_r+0x8a4>
   823c6:	9907      	ldr	r1, [sp, #28]
   823c8:	f898 2001 	ldrb.w	r2, [r8, #1]
   823cc:	680c      	ldr	r4, [r1, #0]
   823ce:	3104      	adds	r1, #4
   823d0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   823d4:	46b8      	mov	r8, r7
   823d6:	9107      	str	r1, [sp, #28]
   823d8:	f7ff ba44 	b.w	81864 <_vfiprintf_r+0xe4>
   823dc:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   823e0:	e4a7      	b.n	81d32 <_vfiprintf_r+0x5b2>
   823e2:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   823e6:	e521      	b.n	81e2c <_vfiprintf_r+0x6ac>
   823e8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   823ec:	e47c      	b.n	81ce8 <_vfiprintf_r+0x568>
   823ee:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   823f2:	e43f      	b.n	81c74 <_vfiprintf_r+0x4f4>
   823f4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   823f8:	f7ff bbfa 	b.w	81bf0 <_vfiprintf_r+0x470>
   823fc:	0008433c 	.word	0x0008433c
   82400:	0008432c 	.word	0x0008432c
   82404:	00084324 	.word	0x00084324

00082408 <__sbprintf>:
   82408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8240c:	460c      	mov	r4, r1
   8240e:	f04f 0e00 	mov.w	lr, #0
   82412:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82416:	4606      	mov	r6, r0
   82418:	4617      	mov	r7, r2
   8241a:	4698      	mov	r8, r3
   8241c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8241e:	89e3      	ldrh	r3, [r4, #14]
   82420:	8989      	ldrh	r1, [r1, #12]
   82422:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82426:	f021 0102 	bic.w	r1, r1, #2
   8242a:	9219      	str	r2, [sp, #100]	; 0x64
   8242c:	f8ad 300e 	strh.w	r3, [sp, #14]
   82430:	69e2      	ldr	r2, [r4, #28]
   82432:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82434:	f8ad 100c 	strh.w	r1, [sp, #12]
   82438:	a816      	add	r0, sp, #88	; 0x58
   8243a:	a91a      	add	r1, sp, #104	; 0x68
   8243c:	f8cd e018 	str.w	lr, [sp, #24]
   82440:	9207      	str	r2, [sp, #28]
   82442:	9309      	str	r3, [sp, #36]	; 0x24
   82444:	9100      	str	r1, [sp, #0]
   82446:	9104      	str	r1, [sp, #16]
   82448:	9502      	str	r5, [sp, #8]
   8244a:	9505      	str	r5, [sp, #20]
   8244c:	f000 fd44 	bl	82ed8 <__retarget_lock_init_recursive>
   82450:	4643      	mov	r3, r8
   82452:	463a      	mov	r2, r7
   82454:	4669      	mov	r1, sp
   82456:	4630      	mov	r0, r6
   82458:	f7ff f992 	bl	81780 <_vfiprintf_r>
   8245c:	1e05      	subs	r5, r0, #0
   8245e:	db07      	blt.n	82470 <__sbprintf+0x68>
   82460:	4630      	mov	r0, r6
   82462:	4669      	mov	r1, sp
   82464:	f000 f924 	bl	826b0 <_fflush_r>
   82468:	2800      	cmp	r0, #0
   8246a:	bf18      	it	ne
   8246c:	f04f 35ff 	movne.w	r5, #4294967295
   82470:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82474:	065b      	lsls	r3, r3, #25
   82476:	d503      	bpl.n	82480 <__sbprintf+0x78>
   82478:	89a3      	ldrh	r3, [r4, #12]
   8247a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8247e:	81a3      	strh	r3, [r4, #12]
   82480:	9816      	ldr	r0, [sp, #88]	; 0x58
   82482:	f000 fd2b 	bl	82edc <__retarget_lock_close_recursive>
   82486:	4628      	mov	r0, r5
   82488:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082490 <__swsetup_r>:
   82490:	b538      	push	{r3, r4, r5, lr}
   82492:	4b30      	ldr	r3, [pc, #192]	; (82554 <__swsetup_r+0xc4>)
   82494:	4605      	mov	r5, r0
   82496:	6818      	ldr	r0, [r3, #0]
   82498:	460c      	mov	r4, r1
   8249a:	b110      	cbz	r0, 824a2 <__swsetup_r+0x12>
   8249c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8249e:	2b00      	cmp	r3, #0
   824a0:	d038      	beq.n	82514 <__swsetup_r+0x84>
   824a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   824a6:	b293      	uxth	r3, r2
   824a8:	0718      	lsls	r0, r3, #28
   824aa:	d50c      	bpl.n	824c6 <__swsetup_r+0x36>
   824ac:	6920      	ldr	r0, [r4, #16]
   824ae:	b1a8      	cbz	r0, 824dc <__swsetup_r+0x4c>
   824b0:	f013 0201 	ands.w	r2, r3, #1
   824b4:	d01e      	beq.n	824f4 <__swsetup_r+0x64>
   824b6:	2200      	movs	r2, #0
   824b8:	6963      	ldr	r3, [r4, #20]
   824ba:	60a2      	str	r2, [r4, #8]
   824bc:	425b      	negs	r3, r3
   824be:	61a3      	str	r3, [r4, #24]
   824c0:	b1f0      	cbz	r0, 82500 <__swsetup_r+0x70>
   824c2:	2000      	movs	r0, #0
   824c4:	bd38      	pop	{r3, r4, r5, pc}
   824c6:	06d9      	lsls	r1, r3, #27
   824c8:	d53b      	bpl.n	82542 <__swsetup_r+0xb2>
   824ca:	0758      	lsls	r0, r3, #29
   824cc:	d425      	bmi.n	8251a <__swsetup_r+0x8a>
   824ce:	6920      	ldr	r0, [r4, #16]
   824d0:	f042 0308 	orr.w	r3, r2, #8
   824d4:	81a3      	strh	r3, [r4, #12]
   824d6:	b29b      	uxth	r3, r3
   824d8:	2800      	cmp	r0, #0
   824da:	d1e9      	bne.n	824b0 <__swsetup_r+0x20>
   824dc:	f403 7220 	and.w	r2, r3, #640	; 0x280
   824e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   824e4:	d0e4      	beq.n	824b0 <__swsetup_r+0x20>
   824e6:	4628      	mov	r0, r5
   824e8:	4621      	mov	r1, r4
   824ea:	f000 fd2b 	bl	82f44 <__smakebuf_r>
   824ee:	89a3      	ldrh	r3, [r4, #12]
   824f0:	6920      	ldr	r0, [r4, #16]
   824f2:	e7dd      	b.n	824b0 <__swsetup_r+0x20>
   824f4:	0799      	lsls	r1, r3, #30
   824f6:	bf58      	it	pl
   824f8:	6962      	ldrpl	r2, [r4, #20]
   824fa:	60a2      	str	r2, [r4, #8]
   824fc:	2800      	cmp	r0, #0
   824fe:	d1e0      	bne.n	824c2 <__swsetup_r+0x32>
   82500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82504:	061a      	lsls	r2, r3, #24
   82506:	d5dd      	bpl.n	824c4 <__swsetup_r+0x34>
   82508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8250c:	81a3      	strh	r3, [r4, #12]
   8250e:	f04f 30ff 	mov.w	r0, #4294967295
   82512:	bd38      	pop	{r3, r4, r5, pc}
   82514:	f000 f924 	bl	82760 <__sinit>
   82518:	e7c3      	b.n	824a2 <__swsetup_r+0x12>
   8251a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8251c:	b151      	cbz	r1, 82534 <__swsetup_r+0xa4>
   8251e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82522:	4299      	cmp	r1, r3
   82524:	d004      	beq.n	82530 <__swsetup_r+0xa0>
   82526:	4628      	mov	r0, r5
   82528:	f000 fa40 	bl	829ac <_free_r>
   8252c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82530:	2300      	movs	r3, #0
   82532:	6323      	str	r3, [r4, #48]	; 0x30
   82534:	2300      	movs	r3, #0
   82536:	6920      	ldr	r0, [r4, #16]
   82538:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8253c:	e884 0009 	stmia.w	r4, {r0, r3}
   82540:	e7c6      	b.n	824d0 <__swsetup_r+0x40>
   82542:	2309      	movs	r3, #9
   82544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82548:	602b      	str	r3, [r5, #0]
   8254a:	f04f 30ff 	mov.w	r0, #4294967295
   8254e:	81a2      	strh	r2, [r4, #12]
   82550:	bd38      	pop	{r3, r4, r5, pc}
   82552:	bf00      	nop
   82554:	20070134 	.word	0x20070134

00082558 <register_fini>:
   82558:	4b02      	ldr	r3, [pc, #8]	; (82564 <register_fini+0xc>)
   8255a:	b113      	cbz	r3, 82562 <register_fini+0xa>
   8255c:	4802      	ldr	r0, [pc, #8]	; (82568 <register_fini+0x10>)
   8255e:	f000 b805 	b.w	8256c <atexit>
   82562:	4770      	bx	lr
   82564:	00000000 	.word	0x00000000
   82568:	000827d9 	.word	0x000827d9

0008256c <atexit>:
   8256c:	2300      	movs	r3, #0
   8256e:	4601      	mov	r1, r0
   82570:	461a      	mov	r2, r3
   82572:	4618      	mov	r0, r3
   82574:	f001 bbcc 	b.w	83d10 <__register_exitproc>

00082578 <__sflush_r>:
   82578:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82580:	b29a      	uxth	r2, r3
   82582:	460d      	mov	r5, r1
   82584:	0711      	lsls	r1, r2, #28
   82586:	4680      	mov	r8, r0
   82588:	d43a      	bmi.n	82600 <__sflush_r+0x88>
   8258a:	686a      	ldr	r2, [r5, #4]
   8258c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82590:	2a00      	cmp	r2, #0
   82592:	81ab      	strh	r3, [r5, #12]
   82594:	dd70      	ble.n	82678 <__sflush_r+0x100>
   82596:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82598:	2c00      	cmp	r4, #0
   8259a:	d04a      	beq.n	82632 <__sflush_r+0xba>
   8259c:	2200      	movs	r2, #0
   8259e:	b29b      	uxth	r3, r3
   825a0:	f8d8 6000 	ldr.w	r6, [r8]
   825a4:	f8c8 2000 	str.w	r2, [r8]
   825a8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   825ac:	d068      	beq.n	82680 <__sflush_r+0x108>
   825ae:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   825b0:	075f      	lsls	r7, r3, #29
   825b2:	d505      	bpl.n	825c0 <__sflush_r+0x48>
   825b4:	6869      	ldr	r1, [r5, #4]
   825b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   825b8:	1a52      	subs	r2, r2, r1
   825ba:	b10b      	cbz	r3, 825c0 <__sflush_r+0x48>
   825bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   825be:	1ad2      	subs	r2, r2, r3
   825c0:	2300      	movs	r3, #0
   825c2:	69e9      	ldr	r1, [r5, #28]
   825c4:	4640      	mov	r0, r8
   825c6:	47a0      	blx	r4
   825c8:	1c44      	adds	r4, r0, #1
   825ca:	d03d      	beq.n	82648 <__sflush_r+0xd0>
   825cc:	2100      	movs	r1, #0
   825ce:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   825d2:	692a      	ldr	r2, [r5, #16]
   825d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   825d8:	81ab      	strh	r3, [r5, #12]
   825da:	04db      	lsls	r3, r3, #19
   825dc:	6069      	str	r1, [r5, #4]
   825de:	602a      	str	r2, [r5, #0]
   825e0:	d448      	bmi.n	82674 <__sflush_r+0xfc>
   825e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   825e4:	f8c8 6000 	str.w	r6, [r8]
   825e8:	b319      	cbz	r1, 82632 <__sflush_r+0xba>
   825ea:	f105 0340 	add.w	r3, r5, #64	; 0x40
   825ee:	4299      	cmp	r1, r3
   825f0:	d002      	beq.n	825f8 <__sflush_r+0x80>
   825f2:	4640      	mov	r0, r8
   825f4:	f000 f9da 	bl	829ac <_free_r>
   825f8:	2000      	movs	r0, #0
   825fa:	6328      	str	r0, [r5, #48]	; 0x30
   825fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82600:	692e      	ldr	r6, [r5, #16]
   82602:	b1b6      	cbz	r6, 82632 <__sflush_r+0xba>
   82604:	0791      	lsls	r1, r2, #30
   82606:	bf18      	it	ne
   82608:	2300      	movne	r3, #0
   8260a:	682c      	ldr	r4, [r5, #0]
   8260c:	bf08      	it	eq
   8260e:	696b      	ldreq	r3, [r5, #20]
   82610:	602e      	str	r6, [r5, #0]
   82612:	1ba4      	subs	r4, r4, r6
   82614:	60ab      	str	r3, [r5, #8]
   82616:	e00a      	b.n	8262e <__sflush_r+0xb6>
   82618:	4623      	mov	r3, r4
   8261a:	4632      	mov	r2, r6
   8261c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8261e:	69e9      	ldr	r1, [r5, #28]
   82620:	4640      	mov	r0, r8
   82622:	47b8      	blx	r7
   82624:	2800      	cmp	r0, #0
   82626:	eba4 0400 	sub.w	r4, r4, r0
   8262a:	4406      	add	r6, r0
   8262c:	dd04      	ble.n	82638 <__sflush_r+0xc0>
   8262e:	2c00      	cmp	r4, #0
   82630:	dcf2      	bgt.n	82618 <__sflush_r+0xa0>
   82632:	2000      	movs	r0, #0
   82634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82638:	89ab      	ldrh	r3, [r5, #12]
   8263a:	f04f 30ff 	mov.w	r0, #4294967295
   8263e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82642:	81ab      	strh	r3, [r5, #12]
   82644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82648:	f8d8 4000 	ldr.w	r4, [r8]
   8264c:	2c1d      	cmp	r4, #29
   8264e:	d8f3      	bhi.n	82638 <__sflush_r+0xc0>
   82650:	4b16      	ldr	r3, [pc, #88]	; (826ac <__sflush_r+0x134>)
   82652:	40e3      	lsrs	r3, r4
   82654:	43db      	mvns	r3, r3
   82656:	f013 0301 	ands.w	r3, r3, #1
   8265a:	d1ed      	bne.n	82638 <__sflush_r+0xc0>
   8265c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82660:	6929      	ldr	r1, [r5, #16]
   82662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82666:	81aa      	strh	r2, [r5, #12]
   82668:	04d2      	lsls	r2, r2, #19
   8266a:	606b      	str	r3, [r5, #4]
   8266c:	6029      	str	r1, [r5, #0]
   8266e:	d5b8      	bpl.n	825e2 <__sflush_r+0x6a>
   82670:	2c00      	cmp	r4, #0
   82672:	d1b6      	bne.n	825e2 <__sflush_r+0x6a>
   82674:	6528      	str	r0, [r5, #80]	; 0x50
   82676:	e7b4      	b.n	825e2 <__sflush_r+0x6a>
   82678:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8267a:	2a00      	cmp	r2, #0
   8267c:	dc8b      	bgt.n	82596 <__sflush_r+0x1e>
   8267e:	e7d8      	b.n	82632 <__sflush_r+0xba>
   82680:	2301      	movs	r3, #1
   82682:	69e9      	ldr	r1, [r5, #28]
   82684:	4640      	mov	r0, r8
   82686:	47a0      	blx	r4
   82688:	1c43      	adds	r3, r0, #1
   8268a:	4602      	mov	r2, r0
   8268c:	d002      	beq.n	82694 <__sflush_r+0x11c>
   8268e:	89ab      	ldrh	r3, [r5, #12]
   82690:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82692:	e78d      	b.n	825b0 <__sflush_r+0x38>
   82694:	f8d8 3000 	ldr.w	r3, [r8]
   82698:	2b00      	cmp	r3, #0
   8269a:	d0f8      	beq.n	8268e <__sflush_r+0x116>
   8269c:	2b1d      	cmp	r3, #29
   8269e:	d001      	beq.n	826a4 <__sflush_r+0x12c>
   826a0:	2b16      	cmp	r3, #22
   826a2:	d1c9      	bne.n	82638 <__sflush_r+0xc0>
   826a4:	f8c8 6000 	str.w	r6, [r8]
   826a8:	e7c3      	b.n	82632 <__sflush_r+0xba>
   826aa:	bf00      	nop
   826ac:	20400001 	.word	0x20400001

000826b0 <_fflush_r>:
   826b0:	b538      	push	{r3, r4, r5, lr}
   826b2:	460d      	mov	r5, r1
   826b4:	4604      	mov	r4, r0
   826b6:	b108      	cbz	r0, 826bc <_fflush_r+0xc>
   826b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   826ba:	b1bb      	cbz	r3, 826ec <_fflush_r+0x3c>
   826bc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   826c0:	b188      	cbz	r0, 826e6 <_fflush_r+0x36>
   826c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   826c4:	07db      	lsls	r3, r3, #31
   826c6:	d401      	bmi.n	826cc <_fflush_r+0x1c>
   826c8:	0581      	lsls	r1, r0, #22
   826ca:	d517      	bpl.n	826fc <_fflush_r+0x4c>
   826cc:	4620      	mov	r0, r4
   826ce:	4629      	mov	r1, r5
   826d0:	f7ff ff52 	bl	82578 <__sflush_r>
   826d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   826d6:	4604      	mov	r4, r0
   826d8:	07da      	lsls	r2, r3, #31
   826da:	d402      	bmi.n	826e2 <_fflush_r+0x32>
   826dc:	89ab      	ldrh	r3, [r5, #12]
   826de:	059b      	lsls	r3, r3, #22
   826e0:	d507      	bpl.n	826f2 <_fflush_r+0x42>
   826e2:	4620      	mov	r0, r4
   826e4:	bd38      	pop	{r3, r4, r5, pc}
   826e6:	4604      	mov	r4, r0
   826e8:	4620      	mov	r0, r4
   826ea:	bd38      	pop	{r3, r4, r5, pc}
   826ec:	f000 f838 	bl	82760 <__sinit>
   826f0:	e7e4      	b.n	826bc <_fflush_r+0xc>
   826f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   826f4:	f000 fbf6 	bl	82ee4 <__retarget_lock_release_recursive>
   826f8:	4620      	mov	r0, r4
   826fa:	bd38      	pop	{r3, r4, r5, pc}
   826fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   826fe:	f000 fbef 	bl	82ee0 <__retarget_lock_acquire_recursive>
   82702:	e7e3      	b.n	826cc <_fflush_r+0x1c>

00082704 <_cleanup_r>:
   82704:	4901      	ldr	r1, [pc, #4]	; (8270c <_cleanup_r+0x8>)
   82706:	f000 bbb1 	b.w	82e6c <_fwalk_reent>
   8270a:	bf00      	nop
   8270c:	00083df9 	.word	0x00083df9

00082710 <std.isra.0>:
   82710:	2300      	movs	r3, #0
   82712:	b510      	push	{r4, lr}
   82714:	4604      	mov	r4, r0
   82716:	8181      	strh	r1, [r0, #12]
   82718:	81c2      	strh	r2, [r0, #14]
   8271a:	6003      	str	r3, [r0, #0]
   8271c:	6043      	str	r3, [r0, #4]
   8271e:	6083      	str	r3, [r0, #8]
   82720:	6643      	str	r3, [r0, #100]	; 0x64
   82722:	6103      	str	r3, [r0, #16]
   82724:	6143      	str	r3, [r0, #20]
   82726:	6183      	str	r3, [r0, #24]
   82728:	4619      	mov	r1, r3
   8272a:	2208      	movs	r2, #8
   8272c:	305c      	adds	r0, #92	; 0x5c
   8272e:	f7fe fe45 	bl	813bc <memset>
   82732:	4807      	ldr	r0, [pc, #28]	; (82750 <std.isra.0+0x40>)
   82734:	4907      	ldr	r1, [pc, #28]	; (82754 <std.isra.0+0x44>)
   82736:	4a08      	ldr	r2, [pc, #32]	; (82758 <std.isra.0+0x48>)
   82738:	4b08      	ldr	r3, [pc, #32]	; (8275c <std.isra.0+0x4c>)
   8273a:	6220      	str	r0, [r4, #32]
   8273c:	61e4      	str	r4, [r4, #28]
   8273e:	6261      	str	r1, [r4, #36]	; 0x24
   82740:	62a2      	str	r2, [r4, #40]	; 0x28
   82742:	62e3      	str	r3, [r4, #44]	; 0x2c
   82744:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8274c:	f000 bbc4 	b.w	82ed8 <__retarget_lock_init_recursive>
   82750:	00083b41 	.word	0x00083b41
   82754:	00083b65 	.word	0x00083b65
   82758:	00083ba1 	.word	0x00083ba1
   8275c:	00083bc1 	.word	0x00083bc1

00082760 <__sinit>:
   82760:	b510      	push	{r4, lr}
   82762:	4604      	mov	r4, r0
   82764:	4814      	ldr	r0, [pc, #80]	; (827b8 <__sinit+0x58>)
   82766:	f000 fbbb 	bl	82ee0 <__retarget_lock_acquire_recursive>
   8276a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8276c:	b9fa      	cbnz	r2, 827ae <__sinit+0x4e>
   8276e:	2003      	movs	r0, #3
   82770:	4912      	ldr	r1, [pc, #72]	; (827bc <__sinit+0x5c>)
   82772:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   82776:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8277a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8277e:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82782:	63e1      	str	r1, [r4, #60]	; 0x3c
   82784:	6860      	ldr	r0, [r4, #4]
   82786:	2104      	movs	r1, #4
   82788:	f7ff ffc2 	bl	82710 <std.isra.0>
   8278c:	68a0      	ldr	r0, [r4, #8]
   8278e:	2201      	movs	r2, #1
   82790:	2109      	movs	r1, #9
   82792:	f7ff ffbd 	bl	82710 <std.isra.0>
   82796:	68e0      	ldr	r0, [r4, #12]
   82798:	2202      	movs	r2, #2
   8279a:	2112      	movs	r1, #18
   8279c:	f7ff ffb8 	bl	82710 <std.isra.0>
   827a0:	2301      	movs	r3, #1
   827a2:	4805      	ldr	r0, [pc, #20]	; (827b8 <__sinit+0x58>)
   827a4:	63a3      	str	r3, [r4, #56]	; 0x38
   827a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   827aa:	f000 bb9b 	b.w	82ee4 <__retarget_lock_release_recursive>
   827ae:	4802      	ldr	r0, [pc, #8]	; (827b8 <__sinit+0x58>)
   827b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   827b4:	f000 bb96 	b.w	82ee4 <__retarget_lock_release_recursive>
   827b8:	20071c68 	.word	0x20071c68
   827bc:	00082705 	.word	0x00082705

000827c0 <__sfp_lock_acquire>:
   827c0:	4801      	ldr	r0, [pc, #4]	; (827c8 <__sfp_lock_acquire+0x8>)
   827c2:	f000 bb8d 	b.w	82ee0 <__retarget_lock_acquire_recursive>
   827c6:	bf00      	nop
   827c8:	20071c7c 	.word	0x20071c7c

000827cc <__sfp_lock_release>:
   827cc:	4801      	ldr	r0, [pc, #4]	; (827d4 <__sfp_lock_release+0x8>)
   827ce:	f000 bb89 	b.w	82ee4 <__retarget_lock_release_recursive>
   827d2:	bf00      	nop
   827d4:	20071c7c 	.word	0x20071c7c

000827d8 <__libc_fini_array>:
   827d8:	b538      	push	{r3, r4, r5, lr}
   827da:	4c0a      	ldr	r4, [pc, #40]	; (82804 <__libc_fini_array+0x2c>)
   827dc:	4d0a      	ldr	r5, [pc, #40]	; (82808 <__libc_fini_array+0x30>)
   827de:	1b64      	subs	r4, r4, r5
   827e0:	10a4      	asrs	r4, r4, #2
   827e2:	d00a      	beq.n	827fa <__libc_fini_array+0x22>
   827e4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   827e8:	3b01      	subs	r3, #1
   827ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   827ee:	3c01      	subs	r4, #1
   827f0:	f855 3904 	ldr.w	r3, [r5], #-4
   827f4:	4798      	blx	r3
   827f6:	2c00      	cmp	r4, #0
   827f8:	d1f9      	bne.n	827ee <__libc_fini_array+0x16>
   827fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   827fe:	f001 be39 	b.w	84474 <_fini>
   82802:	bf00      	nop
   82804:	00084484 	.word	0x00084484
   82808:	00084480 	.word	0x00084480

0008280c <__fputwc>:
   8280c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82810:	b083      	sub	sp, #12
   82812:	4607      	mov	r7, r0
   82814:	4688      	mov	r8, r1
   82816:	4614      	mov	r4, r2
   82818:	f000 fb50 	bl	82ebc <__locale_mb_cur_max>
   8281c:	2801      	cmp	r0, #1
   8281e:	d033      	beq.n	82888 <__fputwc+0x7c>
   82820:	4642      	mov	r2, r8
   82822:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82826:	a901      	add	r1, sp, #4
   82828:	4638      	mov	r0, r7
   8282a:	f001 fa25 	bl	83c78 <_wcrtomb_r>
   8282e:	1c42      	adds	r2, r0, #1
   82830:	4606      	mov	r6, r0
   82832:	d022      	beq.n	8287a <__fputwc+0x6e>
   82834:	b390      	cbz	r0, 8289c <__fputwc+0x90>
   82836:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8283a:	2500      	movs	r5, #0
   8283c:	f10d 0904 	add.w	r9, sp, #4
   82840:	e008      	b.n	82854 <__fputwc+0x48>
   82842:	6823      	ldr	r3, [r4, #0]
   82844:	1c5a      	adds	r2, r3, #1
   82846:	6022      	str	r2, [r4, #0]
   82848:	7019      	strb	r1, [r3, #0]
   8284a:	3501      	adds	r5, #1
   8284c:	42b5      	cmp	r5, r6
   8284e:	d225      	bcs.n	8289c <__fputwc+0x90>
   82850:	f815 1009 	ldrb.w	r1, [r5, r9]
   82854:	68a3      	ldr	r3, [r4, #8]
   82856:	3b01      	subs	r3, #1
   82858:	2b00      	cmp	r3, #0
   8285a:	60a3      	str	r3, [r4, #8]
   8285c:	daf1      	bge.n	82842 <__fputwc+0x36>
   8285e:	69a2      	ldr	r2, [r4, #24]
   82860:	4293      	cmp	r3, r2
   82862:	db01      	blt.n	82868 <__fputwc+0x5c>
   82864:	290a      	cmp	r1, #10
   82866:	d1ec      	bne.n	82842 <__fputwc+0x36>
   82868:	4622      	mov	r2, r4
   8286a:	4638      	mov	r0, r7
   8286c:	f001 f9ac 	bl	83bc8 <__swbuf_r>
   82870:	1c43      	adds	r3, r0, #1
   82872:	d1ea      	bne.n	8284a <__fputwc+0x3e>
   82874:	b003      	add	sp, #12
   82876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8287a:	89a3      	ldrh	r3, [r4, #12]
   8287c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82880:	81a3      	strh	r3, [r4, #12]
   82882:	b003      	add	sp, #12
   82884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82888:	f108 33ff 	add.w	r3, r8, #4294967295
   8288c:	2bfe      	cmp	r3, #254	; 0xfe
   8288e:	d8c7      	bhi.n	82820 <__fputwc+0x14>
   82890:	fa5f f188 	uxtb.w	r1, r8
   82894:	4606      	mov	r6, r0
   82896:	f88d 1004 	strb.w	r1, [sp, #4]
   8289a:	e7ce      	b.n	8283a <__fputwc+0x2e>
   8289c:	4640      	mov	r0, r8
   8289e:	b003      	add	sp, #12
   828a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000828a4 <_fputwc_r>:
   828a4:	b530      	push	{r4, r5, lr}
   828a6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   828a8:	4614      	mov	r4, r2
   828aa:	f013 0f01 	tst.w	r3, #1
   828ae:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   828b2:	b083      	sub	sp, #12
   828b4:	4605      	mov	r5, r0
   828b6:	b29a      	uxth	r2, r3
   828b8:	d101      	bne.n	828be <_fputwc_r+0x1a>
   828ba:	0590      	lsls	r0, r2, #22
   828bc:	d51c      	bpl.n	828f8 <_fputwc_r+0x54>
   828be:	0490      	lsls	r0, r2, #18
   828c0:	d406      	bmi.n	828d0 <_fputwc_r+0x2c>
   828c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   828c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   828c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   828cc:	81a3      	strh	r3, [r4, #12]
   828ce:	6662      	str	r2, [r4, #100]	; 0x64
   828d0:	4628      	mov	r0, r5
   828d2:	4622      	mov	r2, r4
   828d4:	f7ff ff9a 	bl	8280c <__fputwc>
   828d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   828da:	4605      	mov	r5, r0
   828dc:	07da      	lsls	r2, r3, #31
   828de:	d402      	bmi.n	828e6 <_fputwc_r+0x42>
   828e0:	89a3      	ldrh	r3, [r4, #12]
   828e2:	059b      	lsls	r3, r3, #22
   828e4:	d502      	bpl.n	828ec <_fputwc_r+0x48>
   828e6:	4628      	mov	r0, r5
   828e8:	b003      	add	sp, #12
   828ea:	bd30      	pop	{r4, r5, pc}
   828ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   828ee:	f000 faf9 	bl	82ee4 <__retarget_lock_release_recursive>
   828f2:	4628      	mov	r0, r5
   828f4:	b003      	add	sp, #12
   828f6:	bd30      	pop	{r4, r5, pc}
   828f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   828fa:	9101      	str	r1, [sp, #4]
   828fc:	f000 faf0 	bl	82ee0 <__retarget_lock_acquire_recursive>
   82900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82904:	9901      	ldr	r1, [sp, #4]
   82906:	b29a      	uxth	r2, r3
   82908:	e7d9      	b.n	828be <_fputwc_r+0x1a>
   8290a:	bf00      	nop

0008290c <_malloc_trim_r>:
   8290c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8290e:	460c      	mov	r4, r1
   82910:	4f23      	ldr	r7, [pc, #140]	; (829a0 <_malloc_trim_r+0x94>)
   82912:	4606      	mov	r6, r0
   82914:	f000 ff40 	bl	83798 <__malloc_lock>
   82918:	68bb      	ldr	r3, [r7, #8]
   8291a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8291e:	685d      	ldr	r5, [r3, #4]
   82920:	310f      	adds	r1, #15
   82922:	f025 0503 	bic.w	r5, r5, #3
   82926:	4429      	add	r1, r5
   82928:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8292c:	f021 010f 	bic.w	r1, r1, #15
   82930:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82934:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82938:	db07      	blt.n	8294a <_malloc_trim_r+0x3e>
   8293a:	2100      	movs	r1, #0
   8293c:	4630      	mov	r0, r6
   8293e:	f001 f8ed 	bl	83b1c <_sbrk_r>
   82942:	68bb      	ldr	r3, [r7, #8]
   82944:	442b      	add	r3, r5
   82946:	4298      	cmp	r0, r3
   82948:	d004      	beq.n	82954 <_malloc_trim_r+0x48>
   8294a:	4630      	mov	r0, r6
   8294c:	f000 ff2a 	bl	837a4 <__malloc_unlock>
   82950:	2000      	movs	r0, #0
   82952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82954:	4261      	negs	r1, r4
   82956:	4630      	mov	r0, r6
   82958:	f001 f8e0 	bl	83b1c <_sbrk_r>
   8295c:	3001      	adds	r0, #1
   8295e:	d00d      	beq.n	8297c <_malloc_trim_r+0x70>
   82960:	4b10      	ldr	r3, [pc, #64]	; (829a4 <_malloc_trim_r+0x98>)
   82962:	68ba      	ldr	r2, [r7, #8]
   82964:	6819      	ldr	r1, [r3, #0]
   82966:	1b2d      	subs	r5, r5, r4
   82968:	f045 0501 	orr.w	r5, r5, #1
   8296c:	4630      	mov	r0, r6
   8296e:	1b09      	subs	r1, r1, r4
   82970:	6055      	str	r5, [r2, #4]
   82972:	6019      	str	r1, [r3, #0]
   82974:	f000 ff16 	bl	837a4 <__malloc_unlock>
   82978:	2001      	movs	r0, #1
   8297a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8297c:	2100      	movs	r1, #0
   8297e:	4630      	mov	r0, r6
   82980:	f001 f8cc 	bl	83b1c <_sbrk_r>
   82984:	68ba      	ldr	r2, [r7, #8]
   82986:	1a83      	subs	r3, r0, r2
   82988:	2b0f      	cmp	r3, #15
   8298a:	ddde      	ble.n	8294a <_malloc_trim_r+0x3e>
   8298c:	4c06      	ldr	r4, [pc, #24]	; (829a8 <_malloc_trim_r+0x9c>)
   8298e:	4905      	ldr	r1, [pc, #20]	; (829a4 <_malloc_trim_r+0x98>)
   82990:	6824      	ldr	r4, [r4, #0]
   82992:	f043 0301 	orr.w	r3, r3, #1
   82996:	1b00      	subs	r0, r0, r4
   82998:	6053      	str	r3, [r2, #4]
   8299a:	6008      	str	r0, [r1, #0]
   8299c:	e7d5      	b.n	8294a <_malloc_trim_r+0x3e>
   8299e:	bf00      	nop
   829a0:	200706d0 	.word	0x200706d0
   829a4:	20070c1c 	.word	0x20070c1c
   829a8:	20070ad8 	.word	0x20070ad8

000829ac <_free_r>:
   829ac:	2900      	cmp	r1, #0
   829ae:	d044      	beq.n	82a3a <_free_r+0x8e>
   829b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   829b4:	460d      	mov	r5, r1
   829b6:	4680      	mov	r8, r0
   829b8:	f000 feee 	bl	83798 <__malloc_lock>
   829bc:	f855 7c04 	ldr.w	r7, [r5, #-4]
   829c0:	4969      	ldr	r1, [pc, #420]	; (82b68 <_free_r+0x1bc>)
   829c2:	f1a5 0408 	sub.w	r4, r5, #8
   829c6:	f027 0301 	bic.w	r3, r7, #1
   829ca:	18e2      	adds	r2, r4, r3
   829cc:	688e      	ldr	r6, [r1, #8]
   829ce:	6850      	ldr	r0, [r2, #4]
   829d0:	42b2      	cmp	r2, r6
   829d2:	f020 0003 	bic.w	r0, r0, #3
   829d6:	d05e      	beq.n	82a96 <_free_r+0xea>
   829d8:	07fe      	lsls	r6, r7, #31
   829da:	6050      	str	r0, [r2, #4]
   829dc:	d40b      	bmi.n	829f6 <_free_r+0x4a>
   829de:	f855 7c08 	ldr.w	r7, [r5, #-8]
   829e2:	f101 0e08 	add.w	lr, r1, #8
   829e6:	1be4      	subs	r4, r4, r7
   829e8:	68a5      	ldr	r5, [r4, #8]
   829ea:	443b      	add	r3, r7
   829ec:	4575      	cmp	r5, lr
   829ee:	d06d      	beq.n	82acc <_free_r+0x120>
   829f0:	68e7      	ldr	r7, [r4, #12]
   829f2:	60ef      	str	r7, [r5, #12]
   829f4:	60bd      	str	r5, [r7, #8]
   829f6:	1815      	adds	r5, r2, r0
   829f8:	686d      	ldr	r5, [r5, #4]
   829fa:	07ed      	lsls	r5, r5, #31
   829fc:	d53e      	bpl.n	82a7c <_free_r+0xd0>
   829fe:	f043 0201 	orr.w	r2, r3, #1
   82a02:	6062      	str	r2, [r4, #4]
   82a04:	50e3      	str	r3, [r4, r3]
   82a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82a0a:	d217      	bcs.n	82a3c <_free_r+0x90>
   82a0c:	2201      	movs	r2, #1
   82a0e:	08db      	lsrs	r3, r3, #3
   82a10:	1098      	asrs	r0, r3, #2
   82a12:	684d      	ldr	r5, [r1, #4]
   82a14:	4413      	add	r3, r2
   82a16:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82a1a:	4082      	lsls	r2, r0
   82a1c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82a20:	432a      	orrs	r2, r5
   82a22:	3808      	subs	r0, #8
   82a24:	60e0      	str	r0, [r4, #12]
   82a26:	60a7      	str	r7, [r4, #8]
   82a28:	604a      	str	r2, [r1, #4]
   82a2a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82a2e:	60fc      	str	r4, [r7, #12]
   82a30:	4640      	mov	r0, r8
   82a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82a36:	f000 beb5 	b.w	837a4 <__malloc_unlock>
   82a3a:	4770      	bx	lr
   82a3c:	0a5a      	lsrs	r2, r3, #9
   82a3e:	2a04      	cmp	r2, #4
   82a40:	d852      	bhi.n	82ae8 <_free_r+0x13c>
   82a42:	099a      	lsrs	r2, r3, #6
   82a44:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82a48:	00ff      	lsls	r7, r7, #3
   82a4a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82a4e:	19c8      	adds	r0, r1, r7
   82a50:	59ca      	ldr	r2, [r1, r7]
   82a52:	3808      	subs	r0, #8
   82a54:	4290      	cmp	r0, r2
   82a56:	d04f      	beq.n	82af8 <_free_r+0x14c>
   82a58:	6851      	ldr	r1, [r2, #4]
   82a5a:	f021 0103 	bic.w	r1, r1, #3
   82a5e:	428b      	cmp	r3, r1
   82a60:	d232      	bcs.n	82ac8 <_free_r+0x11c>
   82a62:	6892      	ldr	r2, [r2, #8]
   82a64:	4290      	cmp	r0, r2
   82a66:	d1f7      	bne.n	82a58 <_free_r+0xac>
   82a68:	68c3      	ldr	r3, [r0, #12]
   82a6a:	60a0      	str	r0, [r4, #8]
   82a6c:	60e3      	str	r3, [r4, #12]
   82a6e:	609c      	str	r4, [r3, #8]
   82a70:	60c4      	str	r4, [r0, #12]
   82a72:	4640      	mov	r0, r8
   82a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82a78:	f000 be94 	b.w	837a4 <__malloc_unlock>
   82a7c:	6895      	ldr	r5, [r2, #8]
   82a7e:	4f3b      	ldr	r7, [pc, #236]	; (82b6c <_free_r+0x1c0>)
   82a80:	4403      	add	r3, r0
   82a82:	42bd      	cmp	r5, r7
   82a84:	d040      	beq.n	82b08 <_free_r+0x15c>
   82a86:	68d0      	ldr	r0, [r2, #12]
   82a88:	f043 0201 	orr.w	r2, r3, #1
   82a8c:	60e8      	str	r0, [r5, #12]
   82a8e:	6085      	str	r5, [r0, #8]
   82a90:	6062      	str	r2, [r4, #4]
   82a92:	50e3      	str	r3, [r4, r3]
   82a94:	e7b7      	b.n	82a06 <_free_r+0x5a>
   82a96:	07ff      	lsls	r7, r7, #31
   82a98:	4403      	add	r3, r0
   82a9a:	d407      	bmi.n	82aac <_free_r+0x100>
   82a9c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82aa0:	1b64      	subs	r4, r4, r5
   82aa2:	68e2      	ldr	r2, [r4, #12]
   82aa4:	68a0      	ldr	r0, [r4, #8]
   82aa6:	442b      	add	r3, r5
   82aa8:	60c2      	str	r2, [r0, #12]
   82aaa:	6090      	str	r0, [r2, #8]
   82aac:	4a30      	ldr	r2, [pc, #192]	; (82b70 <_free_r+0x1c4>)
   82aae:	f043 0001 	orr.w	r0, r3, #1
   82ab2:	6812      	ldr	r2, [r2, #0]
   82ab4:	6060      	str	r0, [r4, #4]
   82ab6:	4293      	cmp	r3, r2
   82ab8:	608c      	str	r4, [r1, #8]
   82aba:	d3b9      	bcc.n	82a30 <_free_r+0x84>
   82abc:	4b2d      	ldr	r3, [pc, #180]	; (82b74 <_free_r+0x1c8>)
   82abe:	4640      	mov	r0, r8
   82ac0:	6819      	ldr	r1, [r3, #0]
   82ac2:	f7ff ff23 	bl	8290c <_malloc_trim_r>
   82ac6:	e7b3      	b.n	82a30 <_free_r+0x84>
   82ac8:	4610      	mov	r0, r2
   82aca:	e7cd      	b.n	82a68 <_free_r+0xbc>
   82acc:	1811      	adds	r1, r2, r0
   82ace:	6849      	ldr	r1, [r1, #4]
   82ad0:	07c9      	lsls	r1, r1, #31
   82ad2:	d444      	bmi.n	82b5e <_free_r+0x1b2>
   82ad4:	6891      	ldr	r1, [r2, #8]
   82ad6:	4403      	add	r3, r0
   82ad8:	68d2      	ldr	r2, [r2, #12]
   82ada:	f043 0001 	orr.w	r0, r3, #1
   82ade:	60ca      	str	r2, [r1, #12]
   82ae0:	6091      	str	r1, [r2, #8]
   82ae2:	6060      	str	r0, [r4, #4]
   82ae4:	50e3      	str	r3, [r4, r3]
   82ae6:	e7a3      	b.n	82a30 <_free_r+0x84>
   82ae8:	2a14      	cmp	r2, #20
   82aea:	d816      	bhi.n	82b1a <_free_r+0x16e>
   82aec:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82af0:	00ff      	lsls	r7, r7, #3
   82af2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82af6:	e7aa      	b.n	82a4e <_free_r+0xa2>
   82af8:	2301      	movs	r3, #1
   82afa:	10aa      	asrs	r2, r5, #2
   82afc:	684d      	ldr	r5, [r1, #4]
   82afe:	4093      	lsls	r3, r2
   82b00:	432b      	orrs	r3, r5
   82b02:	604b      	str	r3, [r1, #4]
   82b04:	4603      	mov	r3, r0
   82b06:	e7b0      	b.n	82a6a <_free_r+0xbe>
   82b08:	f043 0201 	orr.w	r2, r3, #1
   82b0c:	614c      	str	r4, [r1, #20]
   82b0e:	610c      	str	r4, [r1, #16]
   82b10:	60e5      	str	r5, [r4, #12]
   82b12:	60a5      	str	r5, [r4, #8]
   82b14:	6062      	str	r2, [r4, #4]
   82b16:	50e3      	str	r3, [r4, r3]
   82b18:	e78a      	b.n	82a30 <_free_r+0x84>
   82b1a:	2a54      	cmp	r2, #84	; 0x54
   82b1c:	d806      	bhi.n	82b2c <_free_r+0x180>
   82b1e:	0b1a      	lsrs	r2, r3, #12
   82b20:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82b24:	00ff      	lsls	r7, r7, #3
   82b26:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82b2a:	e790      	b.n	82a4e <_free_r+0xa2>
   82b2c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82b30:	d806      	bhi.n	82b40 <_free_r+0x194>
   82b32:	0bda      	lsrs	r2, r3, #15
   82b34:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82b38:	00ff      	lsls	r7, r7, #3
   82b3a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82b3e:	e786      	b.n	82a4e <_free_r+0xa2>
   82b40:	f240 5054 	movw	r0, #1364	; 0x554
   82b44:	4282      	cmp	r2, r0
   82b46:	d806      	bhi.n	82b56 <_free_r+0x1aa>
   82b48:	0c9a      	lsrs	r2, r3, #18
   82b4a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82b4e:	00ff      	lsls	r7, r7, #3
   82b50:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82b54:	e77b      	b.n	82a4e <_free_r+0xa2>
   82b56:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82b5a:	257e      	movs	r5, #126	; 0x7e
   82b5c:	e777      	b.n	82a4e <_free_r+0xa2>
   82b5e:	f043 0101 	orr.w	r1, r3, #1
   82b62:	6061      	str	r1, [r4, #4]
   82b64:	6013      	str	r3, [r2, #0]
   82b66:	e763      	b.n	82a30 <_free_r+0x84>
   82b68:	200706d0 	.word	0x200706d0
   82b6c:	200706d8 	.word	0x200706d8
   82b70:	20070adc 	.word	0x20070adc
   82b74:	20070c4c 	.word	0x20070c4c

00082b78 <__sfvwrite_r>:
   82b78:	6893      	ldr	r3, [r2, #8]
   82b7a:	2b00      	cmp	r3, #0
   82b7c:	d071      	beq.n	82c62 <__sfvwrite_r+0xea>
   82b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b82:	898b      	ldrh	r3, [r1, #12]
   82b84:	b083      	sub	sp, #12
   82b86:	460c      	mov	r4, r1
   82b88:	0719      	lsls	r1, r3, #28
   82b8a:	9000      	str	r0, [sp, #0]
   82b8c:	4616      	mov	r6, r2
   82b8e:	d525      	bpl.n	82bdc <__sfvwrite_r+0x64>
   82b90:	6922      	ldr	r2, [r4, #16]
   82b92:	b31a      	cbz	r2, 82bdc <__sfvwrite_r+0x64>
   82b94:	f013 0002 	ands.w	r0, r3, #2
   82b98:	6835      	ldr	r5, [r6, #0]
   82b9a:	d02b      	beq.n	82bf4 <__sfvwrite_r+0x7c>
   82b9c:	f04f 0900 	mov.w	r9, #0
   82ba0:	46b0      	mov	r8, r6
   82ba2:	464f      	mov	r7, r9
   82ba4:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82e68 <__sfvwrite_r+0x2f0>
   82ba8:	2f00      	cmp	r7, #0
   82baa:	d055      	beq.n	82c58 <__sfvwrite_r+0xe0>
   82bac:	4557      	cmp	r7, sl
   82bae:	463b      	mov	r3, r7
   82bb0:	464a      	mov	r2, r9
   82bb2:	bf28      	it	cs
   82bb4:	4653      	movcs	r3, sl
   82bb6:	69e1      	ldr	r1, [r4, #28]
   82bb8:	9800      	ldr	r0, [sp, #0]
   82bba:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82bbc:	47b0      	blx	r6
   82bbe:	2800      	cmp	r0, #0
   82bc0:	dd56      	ble.n	82c70 <__sfvwrite_r+0xf8>
   82bc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   82bc6:	4481      	add	r9, r0
   82bc8:	1a1b      	subs	r3, r3, r0
   82bca:	1a3f      	subs	r7, r7, r0
   82bcc:	f8c8 3008 	str.w	r3, [r8, #8]
   82bd0:	2b00      	cmp	r3, #0
   82bd2:	d1e9      	bne.n	82ba8 <__sfvwrite_r+0x30>
   82bd4:	2000      	movs	r0, #0
   82bd6:	b003      	add	sp, #12
   82bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bdc:	4621      	mov	r1, r4
   82bde:	9800      	ldr	r0, [sp, #0]
   82be0:	f7ff fc56 	bl	82490 <__swsetup_r>
   82be4:	2800      	cmp	r0, #0
   82be6:	f040 8135 	bne.w	82e54 <__sfvwrite_r+0x2dc>
   82bea:	89a3      	ldrh	r3, [r4, #12]
   82bec:	6835      	ldr	r5, [r6, #0]
   82bee:	f013 0002 	ands.w	r0, r3, #2
   82bf2:	d1d3      	bne.n	82b9c <__sfvwrite_r+0x24>
   82bf4:	f013 0901 	ands.w	r9, r3, #1
   82bf8:	d144      	bne.n	82c84 <__sfvwrite_r+0x10c>
   82bfa:	464f      	mov	r7, r9
   82bfc:	9601      	str	r6, [sp, #4]
   82bfe:	b337      	cbz	r7, 82c4e <__sfvwrite_r+0xd6>
   82c00:	059a      	lsls	r2, r3, #22
   82c02:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82c06:	f140 8085 	bpl.w	82d14 <__sfvwrite_r+0x19c>
   82c0a:	4547      	cmp	r7, r8
   82c0c:	46c3      	mov	fp, r8
   82c0e:	f0c0 80ad 	bcc.w	82d6c <__sfvwrite_r+0x1f4>
   82c12:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82c16:	f040 80ae 	bne.w	82d76 <__sfvwrite_r+0x1fe>
   82c1a:	46ba      	mov	sl, r7
   82c1c:	6820      	ldr	r0, [r4, #0]
   82c1e:	465a      	mov	r2, fp
   82c20:	4649      	mov	r1, r9
   82c22:	f000 fd55 	bl	836d0 <memmove>
   82c26:	68a2      	ldr	r2, [r4, #8]
   82c28:	6823      	ldr	r3, [r4, #0]
   82c2a:	eba2 0208 	sub.w	r2, r2, r8
   82c2e:	445b      	add	r3, fp
   82c30:	60a2      	str	r2, [r4, #8]
   82c32:	6023      	str	r3, [r4, #0]
   82c34:	9a01      	ldr	r2, [sp, #4]
   82c36:	44d1      	add	r9, sl
   82c38:	6893      	ldr	r3, [r2, #8]
   82c3a:	eba7 070a 	sub.w	r7, r7, sl
   82c3e:	eba3 030a 	sub.w	r3, r3, sl
   82c42:	6093      	str	r3, [r2, #8]
   82c44:	2b00      	cmp	r3, #0
   82c46:	d0c5      	beq.n	82bd4 <__sfvwrite_r+0x5c>
   82c48:	89a3      	ldrh	r3, [r4, #12]
   82c4a:	2f00      	cmp	r7, #0
   82c4c:	d1d8      	bne.n	82c00 <__sfvwrite_r+0x88>
   82c4e:	f8d5 9000 	ldr.w	r9, [r5]
   82c52:	686f      	ldr	r7, [r5, #4]
   82c54:	3508      	adds	r5, #8
   82c56:	e7d2      	b.n	82bfe <__sfvwrite_r+0x86>
   82c58:	f8d5 9000 	ldr.w	r9, [r5]
   82c5c:	686f      	ldr	r7, [r5, #4]
   82c5e:	3508      	adds	r5, #8
   82c60:	e7a2      	b.n	82ba8 <__sfvwrite_r+0x30>
   82c62:	2000      	movs	r0, #0
   82c64:	4770      	bx	lr
   82c66:	4621      	mov	r1, r4
   82c68:	9800      	ldr	r0, [sp, #0]
   82c6a:	f7ff fd21 	bl	826b0 <_fflush_r>
   82c6e:	b378      	cbz	r0, 82cd0 <__sfvwrite_r+0x158>
   82c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c74:	f04f 30ff 	mov.w	r0, #4294967295
   82c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82c7c:	81a3      	strh	r3, [r4, #12]
   82c7e:	b003      	add	sp, #12
   82c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c84:	4681      	mov	r9, r0
   82c86:	4633      	mov	r3, r6
   82c88:	464e      	mov	r6, r9
   82c8a:	46a8      	mov	r8, r5
   82c8c:	469a      	mov	sl, r3
   82c8e:	464d      	mov	r5, r9
   82c90:	b356      	cbz	r6, 82ce8 <__sfvwrite_r+0x170>
   82c92:	2800      	cmp	r0, #0
   82c94:	d032      	beq.n	82cfc <__sfvwrite_r+0x184>
   82c96:	45b1      	cmp	r9, r6
   82c98:	46cb      	mov	fp, r9
   82c9a:	bf28      	it	cs
   82c9c:	46b3      	movcs	fp, r6
   82c9e:	6820      	ldr	r0, [r4, #0]
   82ca0:	6923      	ldr	r3, [r4, #16]
   82ca2:	465f      	mov	r7, fp
   82ca4:	4298      	cmp	r0, r3
   82ca6:	6962      	ldr	r2, [r4, #20]
   82ca8:	d904      	bls.n	82cb4 <__sfvwrite_r+0x13c>
   82caa:	68a3      	ldr	r3, [r4, #8]
   82cac:	4413      	add	r3, r2
   82cae:	459b      	cmp	fp, r3
   82cb0:	f300 80a8 	bgt.w	82e04 <__sfvwrite_r+0x28c>
   82cb4:	4593      	cmp	fp, r2
   82cb6:	db4d      	blt.n	82d54 <__sfvwrite_r+0x1dc>
   82cb8:	4613      	mov	r3, r2
   82cba:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82cbc:	462a      	mov	r2, r5
   82cbe:	69e1      	ldr	r1, [r4, #28]
   82cc0:	9800      	ldr	r0, [sp, #0]
   82cc2:	47b8      	blx	r7
   82cc4:	1e07      	subs	r7, r0, #0
   82cc6:	ddd3      	ble.n	82c70 <__sfvwrite_r+0xf8>
   82cc8:	ebb9 0907 	subs.w	r9, r9, r7
   82ccc:	d0cb      	beq.n	82c66 <__sfvwrite_r+0xee>
   82cce:	2001      	movs	r0, #1
   82cd0:	f8da 3008 	ldr.w	r3, [sl, #8]
   82cd4:	443d      	add	r5, r7
   82cd6:	1bdb      	subs	r3, r3, r7
   82cd8:	1bf6      	subs	r6, r6, r7
   82cda:	f8ca 3008 	str.w	r3, [sl, #8]
   82cde:	2b00      	cmp	r3, #0
   82ce0:	f43f af78 	beq.w	82bd4 <__sfvwrite_r+0x5c>
   82ce4:	2e00      	cmp	r6, #0
   82ce6:	d1d4      	bne.n	82c92 <__sfvwrite_r+0x11a>
   82ce8:	f108 0308 	add.w	r3, r8, #8
   82cec:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82cf0:	4698      	mov	r8, r3
   82cf2:	f853 5c08 	ldr.w	r5, [r3, #-8]
   82cf6:	3308      	adds	r3, #8
   82cf8:	2e00      	cmp	r6, #0
   82cfa:	d0f7      	beq.n	82cec <__sfvwrite_r+0x174>
   82cfc:	4632      	mov	r2, r6
   82cfe:	210a      	movs	r1, #10
   82d00:	4628      	mov	r0, r5
   82d02:	f000 fc29 	bl	83558 <memchr>
   82d06:	2800      	cmp	r0, #0
   82d08:	f000 80a1 	beq.w	82e4e <__sfvwrite_r+0x2d6>
   82d0c:	3001      	adds	r0, #1
   82d0e:	eba0 0905 	sub.w	r9, r0, r5
   82d12:	e7c0      	b.n	82c96 <__sfvwrite_r+0x11e>
   82d14:	6820      	ldr	r0, [r4, #0]
   82d16:	6923      	ldr	r3, [r4, #16]
   82d18:	4298      	cmp	r0, r3
   82d1a:	d802      	bhi.n	82d22 <__sfvwrite_r+0x1aa>
   82d1c:	6963      	ldr	r3, [r4, #20]
   82d1e:	429f      	cmp	r7, r3
   82d20:	d25d      	bcs.n	82dde <__sfvwrite_r+0x266>
   82d22:	45b8      	cmp	r8, r7
   82d24:	bf28      	it	cs
   82d26:	46b8      	movcs	r8, r7
   82d28:	4649      	mov	r1, r9
   82d2a:	4642      	mov	r2, r8
   82d2c:	f000 fcd0 	bl	836d0 <memmove>
   82d30:	68a3      	ldr	r3, [r4, #8]
   82d32:	6822      	ldr	r2, [r4, #0]
   82d34:	eba3 0308 	sub.w	r3, r3, r8
   82d38:	4442      	add	r2, r8
   82d3a:	60a3      	str	r3, [r4, #8]
   82d3c:	6022      	str	r2, [r4, #0]
   82d3e:	b10b      	cbz	r3, 82d44 <__sfvwrite_r+0x1cc>
   82d40:	46c2      	mov	sl, r8
   82d42:	e777      	b.n	82c34 <__sfvwrite_r+0xbc>
   82d44:	4621      	mov	r1, r4
   82d46:	9800      	ldr	r0, [sp, #0]
   82d48:	f7ff fcb2 	bl	826b0 <_fflush_r>
   82d4c:	2800      	cmp	r0, #0
   82d4e:	d18f      	bne.n	82c70 <__sfvwrite_r+0xf8>
   82d50:	46c2      	mov	sl, r8
   82d52:	e76f      	b.n	82c34 <__sfvwrite_r+0xbc>
   82d54:	465a      	mov	r2, fp
   82d56:	4629      	mov	r1, r5
   82d58:	f000 fcba 	bl	836d0 <memmove>
   82d5c:	68a2      	ldr	r2, [r4, #8]
   82d5e:	6823      	ldr	r3, [r4, #0]
   82d60:	eba2 020b 	sub.w	r2, r2, fp
   82d64:	445b      	add	r3, fp
   82d66:	60a2      	str	r2, [r4, #8]
   82d68:	6023      	str	r3, [r4, #0]
   82d6a:	e7ad      	b.n	82cc8 <__sfvwrite_r+0x150>
   82d6c:	46b8      	mov	r8, r7
   82d6e:	46ba      	mov	sl, r7
   82d70:	46bb      	mov	fp, r7
   82d72:	6820      	ldr	r0, [r4, #0]
   82d74:	e753      	b.n	82c1e <__sfvwrite_r+0xa6>
   82d76:	6962      	ldr	r2, [r4, #20]
   82d78:	6820      	ldr	r0, [r4, #0]
   82d7a:	6921      	ldr	r1, [r4, #16]
   82d7c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82d80:	eba0 0a01 	sub.w	sl, r0, r1
   82d84:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82d88:	f10a 0001 	add.w	r0, sl, #1
   82d8c:	ea4f 0868 	mov.w	r8, r8, asr #1
   82d90:	4438      	add	r0, r7
   82d92:	4540      	cmp	r0, r8
   82d94:	4642      	mov	r2, r8
   82d96:	bf84      	itt	hi
   82d98:	4680      	movhi	r8, r0
   82d9a:	4642      	movhi	r2, r8
   82d9c:	055b      	lsls	r3, r3, #21
   82d9e:	d544      	bpl.n	82e2a <__sfvwrite_r+0x2b2>
   82da0:	4611      	mov	r1, r2
   82da2:	9800      	ldr	r0, [sp, #0]
   82da4:	f000 f920 	bl	82fe8 <_malloc_r>
   82da8:	4683      	mov	fp, r0
   82daa:	2800      	cmp	r0, #0
   82dac:	d055      	beq.n	82e5a <__sfvwrite_r+0x2e2>
   82dae:	4652      	mov	r2, sl
   82db0:	6921      	ldr	r1, [r4, #16]
   82db2:	f000 fc17 	bl	835e4 <memcpy>
   82db6:	89a3      	ldrh	r3, [r4, #12]
   82db8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82dc0:	81a3      	strh	r3, [r4, #12]
   82dc2:	eb0b 000a 	add.w	r0, fp, sl
   82dc6:	eba8 030a 	sub.w	r3, r8, sl
   82dca:	f8c4 b010 	str.w	fp, [r4, #16]
   82dce:	f8c4 8014 	str.w	r8, [r4, #20]
   82dd2:	6020      	str	r0, [r4, #0]
   82dd4:	60a3      	str	r3, [r4, #8]
   82dd6:	46b8      	mov	r8, r7
   82dd8:	46ba      	mov	sl, r7
   82dda:	46bb      	mov	fp, r7
   82ddc:	e71f      	b.n	82c1e <__sfvwrite_r+0xa6>
   82dde:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82de2:	42ba      	cmp	r2, r7
   82de4:	bf28      	it	cs
   82de6:	463a      	movcs	r2, r7
   82de8:	fb92 f2f3 	sdiv	r2, r2, r3
   82dec:	69e1      	ldr	r1, [r4, #28]
   82dee:	fb03 f302 	mul.w	r3, r3, r2
   82df2:	9800      	ldr	r0, [sp, #0]
   82df4:	464a      	mov	r2, r9
   82df6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82df8:	47b0      	blx	r6
   82dfa:	f1b0 0a00 	subs.w	sl, r0, #0
   82dfe:	f73f af19 	bgt.w	82c34 <__sfvwrite_r+0xbc>
   82e02:	e735      	b.n	82c70 <__sfvwrite_r+0xf8>
   82e04:	461a      	mov	r2, r3
   82e06:	4629      	mov	r1, r5
   82e08:	9301      	str	r3, [sp, #4]
   82e0a:	f000 fc61 	bl	836d0 <memmove>
   82e0e:	6822      	ldr	r2, [r4, #0]
   82e10:	9b01      	ldr	r3, [sp, #4]
   82e12:	4621      	mov	r1, r4
   82e14:	441a      	add	r2, r3
   82e16:	6022      	str	r2, [r4, #0]
   82e18:	9800      	ldr	r0, [sp, #0]
   82e1a:	f7ff fc49 	bl	826b0 <_fflush_r>
   82e1e:	9b01      	ldr	r3, [sp, #4]
   82e20:	2800      	cmp	r0, #0
   82e22:	f47f af25 	bne.w	82c70 <__sfvwrite_r+0xf8>
   82e26:	461f      	mov	r7, r3
   82e28:	e74e      	b.n	82cc8 <__sfvwrite_r+0x150>
   82e2a:	9800      	ldr	r0, [sp, #0]
   82e2c:	f000 fcc0 	bl	837b0 <_realloc_r>
   82e30:	4683      	mov	fp, r0
   82e32:	2800      	cmp	r0, #0
   82e34:	d1c5      	bne.n	82dc2 <__sfvwrite_r+0x24a>
   82e36:	9d00      	ldr	r5, [sp, #0]
   82e38:	6921      	ldr	r1, [r4, #16]
   82e3a:	4628      	mov	r0, r5
   82e3c:	f7ff fdb6 	bl	829ac <_free_r>
   82e40:	220c      	movs	r2, #12
   82e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82e46:	602a      	str	r2, [r5, #0]
   82e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82e4c:	e712      	b.n	82c74 <__sfvwrite_r+0xfc>
   82e4e:	f106 0901 	add.w	r9, r6, #1
   82e52:	e720      	b.n	82c96 <__sfvwrite_r+0x11e>
   82e54:	f04f 30ff 	mov.w	r0, #4294967295
   82e58:	e6bd      	b.n	82bd6 <__sfvwrite_r+0x5e>
   82e5a:	220c      	movs	r2, #12
   82e5c:	9900      	ldr	r1, [sp, #0]
   82e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82e62:	600a      	str	r2, [r1, #0]
   82e64:	e706      	b.n	82c74 <__sfvwrite_r+0xfc>
   82e66:	bf00      	nop
   82e68:	7ffffc00 	.word	0x7ffffc00

00082e6c <_fwalk_reent>:
   82e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82e70:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82e74:	d01e      	beq.n	82eb4 <_fwalk_reent+0x48>
   82e76:	4688      	mov	r8, r1
   82e78:	4607      	mov	r7, r0
   82e7a:	f04f 0900 	mov.w	r9, #0
   82e7e:	6875      	ldr	r5, [r6, #4]
   82e80:	68b4      	ldr	r4, [r6, #8]
   82e82:	3d01      	subs	r5, #1
   82e84:	d410      	bmi.n	82ea8 <_fwalk_reent+0x3c>
   82e86:	89a3      	ldrh	r3, [r4, #12]
   82e88:	3d01      	subs	r5, #1
   82e8a:	2b01      	cmp	r3, #1
   82e8c:	d908      	bls.n	82ea0 <_fwalk_reent+0x34>
   82e8e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82e92:	3301      	adds	r3, #1
   82e94:	d004      	beq.n	82ea0 <_fwalk_reent+0x34>
   82e96:	4621      	mov	r1, r4
   82e98:	4638      	mov	r0, r7
   82e9a:	47c0      	blx	r8
   82e9c:	ea49 0900 	orr.w	r9, r9, r0
   82ea0:	1c6b      	adds	r3, r5, #1
   82ea2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82ea6:	d1ee      	bne.n	82e86 <_fwalk_reent+0x1a>
   82ea8:	6836      	ldr	r6, [r6, #0]
   82eaa:	2e00      	cmp	r6, #0
   82eac:	d1e7      	bne.n	82e7e <_fwalk_reent+0x12>
   82eae:	4648      	mov	r0, r9
   82eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82eb4:	46b1      	mov	r9, r6
   82eb6:	4648      	mov	r0, r9
   82eb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082ebc <__locale_mb_cur_max>:
   82ebc:	4b04      	ldr	r3, [pc, #16]	; (82ed0 <__locale_mb_cur_max+0x14>)
   82ebe:	4a05      	ldr	r2, [pc, #20]	; (82ed4 <__locale_mb_cur_max+0x18>)
   82ec0:	681b      	ldr	r3, [r3, #0]
   82ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82ec4:	2b00      	cmp	r3, #0
   82ec6:	bf08      	it	eq
   82ec8:	4613      	moveq	r3, r2
   82eca:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82ece:	4770      	bx	lr
   82ed0:	20070134 	.word	0x20070134
   82ed4:	20070564 	.word	0x20070564

00082ed8 <__retarget_lock_init_recursive>:
   82ed8:	4770      	bx	lr
   82eda:	bf00      	nop

00082edc <__retarget_lock_close_recursive>:
   82edc:	4770      	bx	lr
   82ede:	bf00      	nop

00082ee0 <__retarget_lock_acquire_recursive>:
   82ee0:	4770      	bx	lr
   82ee2:	bf00      	nop

00082ee4 <__retarget_lock_release_recursive>:
   82ee4:	4770      	bx	lr
   82ee6:	bf00      	nop

00082ee8 <__swhatbuf_r>:
   82ee8:	b570      	push	{r4, r5, r6, lr}
   82eea:	460c      	mov	r4, r1
   82eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82ef0:	b090      	sub	sp, #64	; 0x40
   82ef2:	2900      	cmp	r1, #0
   82ef4:	4615      	mov	r5, r2
   82ef6:	461e      	mov	r6, r3
   82ef8:	db14      	blt.n	82f24 <__swhatbuf_r+0x3c>
   82efa:	aa01      	add	r2, sp, #4
   82efc:	f000 ffde 	bl	83ebc <_fstat_r>
   82f00:	2800      	cmp	r0, #0
   82f02:	db0f      	blt.n	82f24 <__swhatbuf_r+0x3c>
   82f04:	9a02      	ldr	r2, [sp, #8]
   82f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82f0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82f0e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82f12:	fab2 f282 	clz	r2, r2
   82f16:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82f1a:	0952      	lsrs	r2, r2, #5
   82f1c:	6032      	str	r2, [r6, #0]
   82f1e:	602b      	str	r3, [r5, #0]
   82f20:	b010      	add	sp, #64	; 0x40
   82f22:	bd70      	pop	{r4, r5, r6, pc}
   82f24:	2300      	movs	r3, #0
   82f26:	89a2      	ldrh	r2, [r4, #12]
   82f28:	6033      	str	r3, [r6, #0]
   82f2a:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82f2e:	d004      	beq.n	82f3a <__swhatbuf_r+0x52>
   82f30:	2240      	movs	r2, #64	; 0x40
   82f32:	4618      	mov	r0, r3
   82f34:	602a      	str	r2, [r5, #0]
   82f36:	b010      	add	sp, #64	; 0x40
   82f38:	bd70      	pop	{r4, r5, r6, pc}
   82f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82f3e:	602b      	str	r3, [r5, #0]
   82f40:	b010      	add	sp, #64	; 0x40
   82f42:	bd70      	pop	{r4, r5, r6, pc}

00082f44 <__smakebuf_r>:
   82f44:	898a      	ldrh	r2, [r1, #12]
   82f46:	460b      	mov	r3, r1
   82f48:	0792      	lsls	r2, r2, #30
   82f4a:	d506      	bpl.n	82f5a <__smakebuf_r+0x16>
   82f4c:	2101      	movs	r1, #1
   82f4e:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82f52:	6159      	str	r1, [r3, #20]
   82f54:	601a      	str	r2, [r3, #0]
   82f56:	611a      	str	r2, [r3, #16]
   82f58:	4770      	bx	lr
   82f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   82f5c:	b083      	sub	sp, #12
   82f5e:	ab01      	add	r3, sp, #4
   82f60:	466a      	mov	r2, sp
   82f62:	460c      	mov	r4, r1
   82f64:	4606      	mov	r6, r0
   82f66:	f7ff ffbf 	bl	82ee8 <__swhatbuf_r>
   82f6a:	9900      	ldr	r1, [sp, #0]
   82f6c:	4605      	mov	r5, r0
   82f6e:	4630      	mov	r0, r6
   82f70:	f000 f83a 	bl	82fe8 <_malloc_r>
   82f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82f78:	b1d8      	cbz	r0, 82fb2 <__smakebuf_r+0x6e>
   82f7a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82f7e:	4f15      	ldr	r7, [pc, #84]	; (82fd4 <__smakebuf_r+0x90>)
   82f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82f84:	63f7      	str	r7, [r6, #60]	; 0x3c
   82f86:	81a3      	strh	r3, [r4, #12]
   82f88:	6020      	str	r0, [r4, #0]
   82f8a:	6120      	str	r0, [r4, #16]
   82f8c:	6161      	str	r1, [r4, #20]
   82f8e:	b91a      	cbnz	r2, 82f98 <__smakebuf_r+0x54>
   82f90:	432b      	orrs	r3, r5
   82f92:	81a3      	strh	r3, [r4, #12]
   82f94:	b003      	add	sp, #12
   82f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82f98:	4630      	mov	r0, r6
   82f9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82f9e:	f000 ffa1 	bl	83ee4 <_isatty_r>
   82fa2:	b1a0      	cbz	r0, 82fce <__smakebuf_r+0x8a>
   82fa4:	89a3      	ldrh	r3, [r4, #12]
   82fa6:	f023 0303 	bic.w	r3, r3, #3
   82faa:	f043 0301 	orr.w	r3, r3, #1
   82fae:	b21b      	sxth	r3, r3
   82fb0:	e7ee      	b.n	82f90 <__smakebuf_r+0x4c>
   82fb2:	059a      	lsls	r2, r3, #22
   82fb4:	d4ee      	bmi.n	82f94 <__smakebuf_r+0x50>
   82fb6:	2101      	movs	r1, #1
   82fb8:	f023 0303 	bic.w	r3, r3, #3
   82fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82fc0:	f043 0302 	orr.w	r3, r3, #2
   82fc4:	81a3      	strh	r3, [r4, #12]
   82fc6:	6161      	str	r1, [r4, #20]
   82fc8:	6022      	str	r2, [r4, #0]
   82fca:	6122      	str	r2, [r4, #16]
   82fcc:	e7e2      	b.n	82f94 <__smakebuf_r+0x50>
   82fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82fd2:	e7dd      	b.n	82f90 <__smakebuf_r+0x4c>
   82fd4:	00082705 	.word	0x00082705

00082fd8 <malloc>:
   82fd8:	4b02      	ldr	r3, [pc, #8]	; (82fe4 <malloc+0xc>)
   82fda:	4601      	mov	r1, r0
   82fdc:	6818      	ldr	r0, [r3, #0]
   82fde:	f000 b803 	b.w	82fe8 <_malloc_r>
   82fe2:	bf00      	nop
   82fe4:	20070134 	.word	0x20070134

00082fe8 <_malloc_r>:
   82fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82fec:	f101 060b 	add.w	r6, r1, #11
   82ff0:	2e16      	cmp	r6, #22
   82ff2:	b083      	sub	sp, #12
   82ff4:	4605      	mov	r5, r0
   82ff6:	f240 809e 	bls.w	83136 <_malloc_r+0x14e>
   82ffa:	f036 0607 	bics.w	r6, r6, #7
   82ffe:	f100 80bd 	bmi.w	8317c <_malloc_r+0x194>
   83002:	42b1      	cmp	r1, r6
   83004:	f200 80ba 	bhi.w	8317c <_malloc_r+0x194>
   83008:	f000 fbc6 	bl	83798 <__malloc_lock>
   8300c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   83010:	f0c0 8285 	bcc.w	8351e <_malloc_r+0x536>
   83014:	0a73      	lsrs	r3, r6, #9
   83016:	f000 80b8 	beq.w	8318a <_malloc_r+0x1a2>
   8301a:	2b04      	cmp	r3, #4
   8301c:	f200 816c 	bhi.w	832f8 <_malloc_r+0x310>
   83020:	09b3      	lsrs	r3, r6, #6
   83022:	f103 0039 	add.w	r0, r3, #57	; 0x39
   83026:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8302a:	00c1      	lsls	r1, r0, #3
   8302c:	4fb8      	ldr	r7, [pc, #736]	; (83310 <_malloc_r+0x328>)
   8302e:	4439      	add	r1, r7
   83030:	684c      	ldr	r4, [r1, #4]
   83032:	3908      	subs	r1, #8
   83034:	42a1      	cmp	r1, r4
   83036:	d106      	bne.n	83046 <_malloc_r+0x5e>
   83038:	e00c      	b.n	83054 <_malloc_r+0x6c>
   8303a:	2a00      	cmp	r2, #0
   8303c:	f280 80ab 	bge.w	83196 <_malloc_r+0x1ae>
   83040:	68e4      	ldr	r4, [r4, #12]
   83042:	42a1      	cmp	r1, r4
   83044:	d006      	beq.n	83054 <_malloc_r+0x6c>
   83046:	6863      	ldr	r3, [r4, #4]
   83048:	f023 0303 	bic.w	r3, r3, #3
   8304c:	1b9a      	subs	r2, r3, r6
   8304e:	2a0f      	cmp	r2, #15
   83050:	ddf3      	ble.n	8303a <_malloc_r+0x52>
   83052:	4670      	mov	r0, lr
   83054:	693c      	ldr	r4, [r7, #16]
   83056:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83324 <_malloc_r+0x33c>
   8305a:	4574      	cmp	r4, lr
   8305c:	f000 819e 	beq.w	8339c <_malloc_r+0x3b4>
   83060:	6863      	ldr	r3, [r4, #4]
   83062:	f023 0303 	bic.w	r3, r3, #3
   83066:	1b9a      	subs	r2, r3, r6
   83068:	2a0f      	cmp	r2, #15
   8306a:	f300 8183 	bgt.w	83374 <_malloc_r+0x38c>
   8306e:	2a00      	cmp	r2, #0
   83070:	f8c7 e014 	str.w	lr, [r7, #20]
   83074:	f8c7 e010 	str.w	lr, [r7, #16]
   83078:	f280 8091 	bge.w	8319e <_malloc_r+0x1b6>
   8307c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83080:	f080 8154 	bcs.w	8332c <_malloc_r+0x344>
   83084:	2201      	movs	r2, #1
   83086:	08db      	lsrs	r3, r3, #3
   83088:	6879      	ldr	r1, [r7, #4]
   8308a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8308e:	4413      	add	r3, r2
   83090:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   83094:	fa02 f20c 	lsl.w	r2, r2, ip
   83098:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8309c:	430a      	orrs	r2, r1
   8309e:	f1ac 0108 	sub.w	r1, ip, #8
   830a2:	60e1      	str	r1, [r4, #12]
   830a4:	f8c4 8008 	str.w	r8, [r4, #8]
   830a8:	607a      	str	r2, [r7, #4]
   830aa:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   830ae:	f8c8 400c 	str.w	r4, [r8, #12]
   830b2:	2401      	movs	r4, #1
   830b4:	1083      	asrs	r3, r0, #2
   830b6:	409c      	lsls	r4, r3
   830b8:	4294      	cmp	r4, r2
   830ba:	d87d      	bhi.n	831b8 <_malloc_r+0x1d0>
   830bc:	4214      	tst	r4, r2
   830be:	d106      	bne.n	830ce <_malloc_r+0xe6>
   830c0:	f020 0003 	bic.w	r0, r0, #3
   830c4:	0064      	lsls	r4, r4, #1
   830c6:	4214      	tst	r4, r2
   830c8:	f100 0004 	add.w	r0, r0, #4
   830cc:	d0fa      	beq.n	830c4 <_malloc_r+0xdc>
   830ce:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   830d2:	46cc      	mov	ip, r9
   830d4:	4680      	mov	r8, r0
   830d6:	f8dc 300c 	ldr.w	r3, [ip, #12]
   830da:	459c      	cmp	ip, r3
   830dc:	d107      	bne.n	830ee <_malloc_r+0x106>
   830de:	e15f      	b.n	833a0 <_malloc_r+0x3b8>
   830e0:	2a00      	cmp	r2, #0
   830e2:	f280 816d 	bge.w	833c0 <_malloc_r+0x3d8>
   830e6:	68db      	ldr	r3, [r3, #12]
   830e8:	459c      	cmp	ip, r3
   830ea:	f000 8159 	beq.w	833a0 <_malloc_r+0x3b8>
   830ee:	6859      	ldr	r1, [r3, #4]
   830f0:	f021 0103 	bic.w	r1, r1, #3
   830f4:	1b8a      	subs	r2, r1, r6
   830f6:	2a0f      	cmp	r2, #15
   830f8:	ddf2      	ble.n	830e0 <_malloc_r+0xf8>
   830fa:	68dc      	ldr	r4, [r3, #12]
   830fc:	f8d3 c008 	ldr.w	ip, [r3, #8]
   83100:	f046 0801 	orr.w	r8, r6, #1
   83104:	4628      	mov	r0, r5
   83106:	441e      	add	r6, r3
   83108:	f042 0501 	orr.w	r5, r2, #1
   8310c:	f8c3 8004 	str.w	r8, [r3, #4]
   83110:	f8cc 400c 	str.w	r4, [ip, #12]
   83114:	f8c4 c008 	str.w	ip, [r4, #8]
   83118:	617e      	str	r6, [r7, #20]
   8311a:	613e      	str	r6, [r7, #16]
   8311c:	f8c6 e00c 	str.w	lr, [r6, #12]
   83120:	f8c6 e008 	str.w	lr, [r6, #8]
   83124:	6075      	str	r5, [r6, #4]
   83126:	505a      	str	r2, [r3, r1]
   83128:	9300      	str	r3, [sp, #0]
   8312a:	f000 fb3b 	bl	837a4 <__malloc_unlock>
   8312e:	9b00      	ldr	r3, [sp, #0]
   83130:	f103 0408 	add.w	r4, r3, #8
   83134:	e01e      	b.n	83174 <_malloc_r+0x18c>
   83136:	2910      	cmp	r1, #16
   83138:	d820      	bhi.n	8317c <_malloc_r+0x194>
   8313a:	f000 fb2d 	bl	83798 <__malloc_lock>
   8313e:	2610      	movs	r6, #16
   83140:	2318      	movs	r3, #24
   83142:	2002      	movs	r0, #2
   83144:	4f72      	ldr	r7, [pc, #456]	; (83310 <_malloc_r+0x328>)
   83146:	443b      	add	r3, r7
   83148:	685c      	ldr	r4, [r3, #4]
   8314a:	f1a3 0208 	sub.w	r2, r3, #8
   8314e:	4294      	cmp	r4, r2
   83150:	f000 812f 	beq.w	833b2 <_malloc_r+0x3ca>
   83154:	6863      	ldr	r3, [r4, #4]
   83156:	68e1      	ldr	r1, [r4, #12]
   83158:	f023 0303 	bic.w	r3, r3, #3
   8315c:	4423      	add	r3, r4
   8315e:	685a      	ldr	r2, [r3, #4]
   83160:	68a6      	ldr	r6, [r4, #8]
   83162:	f042 0201 	orr.w	r2, r2, #1
   83166:	60f1      	str	r1, [r6, #12]
   83168:	4628      	mov	r0, r5
   8316a:	608e      	str	r6, [r1, #8]
   8316c:	605a      	str	r2, [r3, #4]
   8316e:	f000 fb19 	bl	837a4 <__malloc_unlock>
   83172:	3408      	adds	r4, #8
   83174:	4620      	mov	r0, r4
   83176:	b003      	add	sp, #12
   83178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8317c:	2400      	movs	r4, #0
   8317e:	230c      	movs	r3, #12
   83180:	4620      	mov	r0, r4
   83182:	602b      	str	r3, [r5, #0]
   83184:	b003      	add	sp, #12
   83186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8318a:	2040      	movs	r0, #64	; 0x40
   8318c:	f44f 7100 	mov.w	r1, #512	; 0x200
   83190:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   83194:	e74a      	b.n	8302c <_malloc_r+0x44>
   83196:	4423      	add	r3, r4
   83198:	685a      	ldr	r2, [r3, #4]
   8319a:	68e1      	ldr	r1, [r4, #12]
   8319c:	e7e0      	b.n	83160 <_malloc_r+0x178>
   8319e:	4423      	add	r3, r4
   831a0:	685a      	ldr	r2, [r3, #4]
   831a2:	4628      	mov	r0, r5
   831a4:	f042 0201 	orr.w	r2, r2, #1
   831a8:	605a      	str	r2, [r3, #4]
   831aa:	3408      	adds	r4, #8
   831ac:	f000 fafa 	bl	837a4 <__malloc_unlock>
   831b0:	4620      	mov	r0, r4
   831b2:	b003      	add	sp, #12
   831b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   831b8:	68bc      	ldr	r4, [r7, #8]
   831ba:	6863      	ldr	r3, [r4, #4]
   831bc:	f023 0803 	bic.w	r8, r3, #3
   831c0:	45b0      	cmp	r8, r6
   831c2:	d304      	bcc.n	831ce <_malloc_r+0x1e6>
   831c4:	eba8 0306 	sub.w	r3, r8, r6
   831c8:	2b0f      	cmp	r3, #15
   831ca:	f300 8085 	bgt.w	832d8 <_malloc_r+0x2f0>
   831ce:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83328 <_malloc_r+0x340>
   831d2:	4b50      	ldr	r3, [pc, #320]	; (83314 <_malloc_r+0x32c>)
   831d4:	f8d9 2000 	ldr.w	r2, [r9]
   831d8:	681b      	ldr	r3, [r3, #0]
   831da:	3201      	adds	r2, #1
   831dc:	4433      	add	r3, r6
   831de:	eb04 0a08 	add.w	sl, r4, r8
   831e2:	f000 8154 	beq.w	8348e <_malloc_r+0x4a6>
   831e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   831ea:	330f      	adds	r3, #15
   831ec:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   831f0:	f02b 0b0f 	bic.w	fp, fp, #15
   831f4:	4659      	mov	r1, fp
   831f6:	4628      	mov	r0, r5
   831f8:	f000 fc90 	bl	83b1c <_sbrk_r>
   831fc:	1c41      	adds	r1, r0, #1
   831fe:	4602      	mov	r2, r0
   83200:	f000 80fb 	beq.w	833fa <_malloc_r+0x412>
   83204:	4582      	cmp	sl, r0
   83206:	f200 80f6 	bhi.w	833f6 <_malloc_r+0x40e>
   8320a:	4b43      	ldr	r3, [pc, #268]	; (83318 <_malloc_r+0x330>)
   8320c:	6819      	ldr	r1, [r3, #0]
   8320e:	4459      	add	r1, fp
   83210:	6019      	str	r1, [r3, #0]
   83212:	f000 814c 	beq.w	834ae <_malloc_r+0x4c6>
   83216:	f8d9 0000 	ldr.w	r0, [r9]
   8321a:	3001      	adds	r0, #1
   8321c:	bf1b      	ittet	ne
   8321e:	eba2 0a0a 	subne.w	sl, r2, sl
   83222:	4451      	addne	r1, sl
   83224:	f8c9 2000 	streq.w	r2, [r9]
   83228:	6019      	strne	r1, [r3, #0]
   8322a:	f012 0107 	ands.w	r1, r2, #7
   8322e:	f000 8114 	beq.w	8345a <_malloc_r+0x472>
   83232:	f1c1 0008 	rsb	r0, r1, #8
   83236:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8323a:	4402      	add	r2, r0
   8323c:	3108      	adds	r1, #8
   8323e:	eb02 090b 	add.w	r9, r2, fp
   83242:	f3c9 090b 	ubfx	r9, r9, #0, #12
   83246:	eba1 0909 	sub.w	r9, r1, r9
   8324a:	4649      	mov	r1, r9
   8324c:	4628      	mov	r0, r5
   8324e:	9301      	str	r3, [sp, #4]
   83250:	9200      	str	r2, [sp, #0]
   83252:	f000 fc63 	bl	83b1c <_sbrk_r>
   83256:	1c43      	adds	r3, r0, #1
   83258:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8325c:	f000 8142 	beq.w	834e4 <_malloc_r+0x4fc>
   83260:	1a80      	subs	r0, r0, r2
   83262:	4448      	add	r0, r9
   83264:	f040 0001 	orr.w	r0, r0, #1
   83268:	6819      	ldr	r1, [r3, #0]
   8326a:	42bc      	cmp	r4, r7
   8326c:	4449      	add	r1, r9
   8326e:	60ba      	str	r2, [r7, #8]
   83270:	6019      	str	r1, [r3, #0]
   83272:	6050      	str	r0, [r2, #4]
   83274:	d017      	beq.n	832a6 <_malloc_r+0x2be>
   83276:	f1b8 0f0f 	cmp.w	r8, #15
   8327a:	f240 80fa 	bls.w	83472 <_malloc_r+0x48a>
   8327e:	f04f 0c05 	mov.w	ip, #5
   83282:	6862      	ldr	r2, [r4, #4]
   83284:	f1a8 000c 	sub.w	r0, r8, #12
   83288:	f020 0007 	bic.w	r0, r0, #7
   8328c:	f002 0201 	and.w	r2, r2, #1
   83290:	eb04 0e00 	add.w	lr, r4, r0
   83294:	4302      	orrs	r2, r0
   83296:	280f      	cmp	r0, #15
   83298:	6062      	str	r2, [r4, #4]
   8329a:	f8ce c004 	str.w	ip, [lr, #4]
   8329e:	f8ce c008 	str.w	ip, [lr, #8]
   832a2:	f200 8116 	bhi.w	834d2 <_malloc_r+0x4ea>
   832a6:	4b1d      	ldr	r3, [pc, #116]	; (8331c <_malloc_r+0x334>)
   832a8:	68bc      	ldr	r4, [r7, #8]
   832aa:	681a      	ldr	r2, [r3, #0]
   832ac:	4291      	cmp	r1, r2
   832ae:	bf88      	it	hi
   832b0:	6019      	strhi	r1, [r3, #0]
   832b2:	4b1b      	ldr	r3, [pc, #108]	; (83320 <_malloc_r+0x338>)
   832b4:	681a      	ldr	r2, [r3, #0]
   832b6:	4291      	cmp	r1, r2
   832b8:	6862      	ldr	r2, [r4, #4]
   832ba:	bf88      	it	hi
   832bc:	6019      	strhi	r1, [r3, #0]
   832be:	f022 0203 	bic.w	r2, r2, #3
   832c2:	4296      	cmp	r6, r2
   832c4:	eba2 0306 	sub.w	r3, r2, r6
   832c8:	d801      	bhi.n	832ce <_malloc_r+0x2e6>
   832ca:	2b0f      	cmp	r3, #15
   832cc:	dc04      	bgt.n	832d8 <_malloc_r+0x2f0>
   832ce:	4628      	mov	r0, r5
   832d0:	f000 fa68 	bl	837a4 <__malloc_unlock>
   832d4:	2400      	movs	r4, #0
   832d6:	e74d      	b.n	83174 <_malloc_r+0x18c>
   832d8:	f046 0201 	orr.w	r2, r6, #1
   832dc:	f043 0301 	orr.w	r3, r3, #1
   832e0:	4426      	add	r6, r4
   832e2:	6062      	str	r2, [r4, #4]
   832e4:	4628      	mov	r0, r5
   832e6:	60be      	str	r6, [r7, #8]
   832e8:	3408      	adds	r4, #8
   832ea:	6073      	str	r3, [r6, #4]
   832ec:	f000 fa5a 	bl	837a4 <__malloc_unlock>
   832f0:	4620      	mov	r0, r4
   832f2:	b003      	add	sp, #12
   832f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832f8:	2b14      	cmp	r3, #20
   832fa:	d970      	bls.n	833de <_malloc_r+0x3f6>
   832fc:	2b54      	cmp	r3, #84	; 0x54
   832fe:	f200 80a2 	bhi.w	83446 <_malloc_r+0x45e>
   83302:	0b33      	lsrs	r3, r6, #12
   83304:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83308:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8330c:	00c1      	lsls	r1, r0, #3
   8330e:	e68d      	b.n	8302c <_malloc_r+0x44>
   83310:	200706d0 	.word	0x200706d0
   83314:	20070c4c 	.word	0x20070c4c
   83318:	20070c1c 	.word	0x20070c1c
   8331c:	20070c44 	.word	0x20070c44
   83320:	20070c48 	.word	0x20070c48
   83324:	200706d8 	.word	0x200706d8
   83328:	20070ad8 	.word	0x20070ad8
   8332c:	0a5a      	lsrs	r2, r3, #9
   8332e:	2a04      	cmp	r2, #4
   83330:	d95b      	bls.n	833ea <_malloc_r+0x402>
   83332:	2a14      	cmp	r2, #20
   83334:	f200 80ae 	bhi.w	83494 <_malloc_r+0x4ac>
   83338:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8333c:	00c9      	lsls	r1, r1, #3
   8333e:	325b      	adds	r2, #91	; 0x5b
   83340:	eb07 0c01 	add.w	ip, r7, r1
   83344:	5879      	ldr	r1, [r7, r1]
   83346:	f1ac 0c08 	sub.w	ip, ip, #8
   8334a:	458c      	cmp	ip, r1
   8334c:	f000 8088 	beq.w	83460 <_malloc_r+0x478>
   83350:	684a      	ldr	r2, [r1, #4]
   83352:	f022 0203 	bic.w	r2, r2, #3
   83356:	4293      	cmp	r3, r2
   83358:	d273      	bcs.n	83442 <_malloc_r+0x45a>
   8335a:	6889      	ldr	r1, [r1, #8]
   8335c:	458c      	cmp	ip, r1
   8335e:	d1f7      	bne.n	83350 <_malloc_r+0x368>
   83360:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83364:	687a      	ldr	r2, [r7, #4]
   83366:	60e3      	str	r3, [r4, #12]
   83368:	f8c4 c008 	str.w	ip, [r4, #8]
   8336c:	609c      	str	r4, [r3, #8]
   8336e:	f8cc 400c 	str.w	r4, [ip, #12]
   83372:	e69e      	b.n	830b2 <_malloc_r+0xca>
   83374:	f046 0c01 	orr.w	ip, r6, #1
   83378:	f042 0101 	orr.w	r1, r2, #1
   8337c:	4426      	add	r6, r4
   8337e:	f8c4 c004 	str.w	ip, [r4, #4]
   83382:	4628      	mov	r0, r5
   83384:	617e      	str	r6, [r7, #20]
   83386:	613e      	str	r6, [r7, #16]
   83388:	f8c6 e00c 	str.w	lr, [r6, #12]
   8338c:	f8c6 e008 	str.w	lr, [r6, #8]
   83390:	6071      	str	r1, [r6, #4]
   83392:	50e2      	str	r2, [r4, r3]
   83394:	f000 fa06 	bl	837a4 <__malloc_unlock>
   83398:	3408      	adds	r4, #8
   8339a:	e6eb      	b.n	83174 <_malloc_r+0x18c>
   8339c:	687a      	ldr	r2, [r7, #4]
   8339e:	e688      	b.n	830b2 <_malloc_r+0xca>
   833a0:	f108 0801 	add.w	r8, r8, #1
   833a4:	f018 0f03 	tst.w	r8, #3
   833a8:	f10c 0c08 	add.w	ip, ip, #8
   833ac:	f47f ae93 	bne.w	830d6 <_malloc_r+0xee>
   833b0:	e02d      	b.n	8340e <_malloc_r+0x426>
   833b2:	68dc      	ldr	r4, [r3, #12]
   833b4:	42a3      	cmp	r3, r4
   833b6:	bf08      	it	eq
   833b8:	3002      	addeq	r0, #2
   833ba:	f43f ae4b 	beq.w	83054 <_malloc_r+0x6c>
   833be:	e6c9      	b.n	83154 <_malloc_r+0x16c>
   833c0:	461c      	mov	r4, r3
   833c2:	4419      	add	r1, r3
   833c4:	684a      	ldr	r2, [r1, #4]
   833c6:	68db      	ldr	r3, [r3, #12]
   833c8:	f854 6f08 	ldr.w	r6, [r4, #8]!
   833cc:	f042 0201 	orr.w	r2, r2, #1
   833d0:	604a      	str	r2, [r1, #4]
   833d2:	4628      	mov	r0, r5
   833d4:	60f3      	str	r3, [r6, #12]
   833d6:	609e      	str	r6, [r3, #8]
   833d8:	f000 f9e4 	bl	837a4 <__malloc_unlock>
   833dc:	e6ca      	b.n	83174 <_malloc_r+0x18c>
   833de:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   833e2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   833e6:	00c1      	lsls	r1, r0, #3
   833e8:	e620      	b.n	8302c <_malloc_r+0x44>
   833ea:	099a      	lsrs	r2, r3, #6
   833ec:	f102 0139 	add.w	r1, r2, #57	; 0x39
   833f0:	00c9      	lsls	r1, r1, #3
   833f2:	3238      	adds	r2, #56	; 0x38
   833f4:	e7a4      	b.n	83340 <_malloc_r+0x358>
   833f6:	42bc      	cmp	r4, r7
   833f8:	d054      	beq.n	834a4 <_malloc_r+0x4bc>
   833fa:	68bc      	ldr	r4, [r7, #8]
   833fc:	6862      	ldr	r2, [r4, #4]
   833fe:	f022 0203 	bic.w	r2, r2, #3
   83402:	e75e      	b.n	832c2 <_malloc_r+0x2da>
   83404:	f859 3908 	ldr.w	r3, [r9], #-8
   83408:	4599      	cmp	r9, r3
   8340a:	f040 8086 	bne.w	8351a <_malloc_r+0x532>
   8340e:	f010 0f03 	tst.w	r0, #3
   83412:	f100 30ff 	add.w	r0, r0, #4294967295
   83416:	d1f5      	bne.n	83404 <_malloc_r+0x41c>
   83418:	687b      	ldr	r3, [r7, #4]
   8341a:	ea23 0304 	bic.w	r3, r3, r4
   8341e:	607b      	str	r3, [r7, #4]
   83420:	0064      	lsls	r4, r4, #1
   83422:	429c      	cmp	r4, r3
   83424:	f63f aec8 	bhi.w	831b8 <_malloc_r+0x1d0>
   83428:	2c00      	cmp	r4, #0
   8342a:	f43f aec5 	beq.w	831b8 <_malloc_r+0x1d0>
   8342e:	421c      	tst	r4, r3
   83430:	4640      	mov	r0, r8
   83432:	f47f ae4c 	bne.w	830ce <_malloc_r+0xe6>
   83436:	0064      	lsls	r4, r4, #1
   83438:	421c      	tst	r4, r3
   8343a:	f100 0004 	add.w	r0, r0, #4
   8343e:	d0fa      	beq.n	83436 <_malloc_r+0x44e>
   83440:	e645      	b.n	830ce <_malloc_r+0xe6>
   83442:	468c      	mov	ip, r1
   83444:	e78c      	b.n	83360 <_malloc_r+0x378>
   83446:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8344a:	d815      	bhi.n	83478 <_malloc_r+0x490>
   8344c:	0bf3      	lsrs	r3, r6, #15
   8344e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   83452:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   83456:	00c1      	lsls	r1, r0, #3
   83458:	e5e8      	b.n	8302c <_malloc_r+0x44>
   8345a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8345e:	e6ee      	b.n	8323e <_malloc_r+0x256>
   83460:	2101      	movs	r1, #1
   83462:	687b      	ldr	r3, [r7, #4]
   83464:	1092      	asrs	r2, r2, #2
   83466:	fa01 f202 	lsl.w	r2, r1, r2
   8346a:	431a      	orrs	r2, r3
   8346c:	607a      	str	r2, [r7, #4]
   8346e:	4663      	mov	r3, ip
   83470:	e779      	b.n	83366 <_malloc_r+0x37e>
   83472:	2301      	movs	r3, #1
   83474:	6053      	str	r3, [r2, #4]
   83476:	e72a      	b.n	832ce <_malloc_r+0x2e6>
   83478:	f240 5254 	movw	r2, #1364	; 0x554
   8347c:	4293      	cmp	r3, r2
   8347e:	d822      	bhi.n	834c6 <_malloc_r+0x4de>
   83480:	0cb3      	lsrs	r3, r6, #18
   83482:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   83486:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8348a:	00c1      	lsls	r1, r0, #3
   8348c:	e5ce      	b.n	8302c <_malloc_r+0x44>
   8348e:	f103 0b10 	add.w	fp, r3, #16
   83492:	e6af      	b.n	831f4 <_malloc_r+0x20c>
   83494:	2a54      	cmp	r2, #84	; 0x54
   83496:	d829      	bhi.n	834ec <_malloc_r+0x504>
   83498:	0b1a      	lsrs	r2, r3, #12
   8349a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8349e:	00c9      	lsls	r1, r1, #3
   834a0:	326e      	adds	r2, #110	; 0x6e
   834a2:	e74d      	b.n	83340 <_malloc_r+0x358>
   834a4:	4b20      	ldr	r3, [pc, #128]	; (83528 <_malloc_r+0x540>)
   834a6:	6819      	ldr	r1, [r3, #0]
   834a8:	4459      	add	r1, fp
   834aa:	6019      	str	r1, [r3, #0]
   834ac:	e6b3      	b.n	83216 <_malloc_r+0x22e>
   834ae:	f3ca 000b 	ubfx	r0, sl, #0, #12
   834b2:	2800      	cmp	r0, #0
   834b4:	f47f aeaf 	bne.w	83216 <_malloc_r+0x22e>
   834b8:	eb08 030b 	add.w	r3, r8, fp
   834bc:	68ba      	ldr	r2, [r7, #8]
   834be:	f043 0301 	orr.w	r3, r3, #1
   834c2:	6053      	str	r3, [r2, #4]
   834c4:	e6ef      	b.n	832a6 <_malloc_r+0x2be>
   834c6:	207f      	movs	r0, #127	; 0x7f
   834c8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   834cc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   834d0:	e5ac      	b.n	8302c <_malloc_r+0x44>
   834d2:	f104 0108 	add.w	r1, r4, #8
   834d6:	4628      	mov	r0, r5
   834d8:	9300      	str	r3, [sp, #0]
   834da:	f7ff fa67 	bl	829ac <_free_r>
   834de:	9b00      	ldr	r3, [sp, #0]
   834e0:	6819      	ldr	r1, [r3, #0]
   834e2:	e6e0      	b.n	832a6 <_malloc_r+0x2be>
   834e4:	2001      	movs	r0, #1
   834e6:	f04f 0900 	mov.w	r9, #0
   834ea:	e6bd      	b.n	83268 <_malloc_r+0x280>
   834ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   834f0:	d805      	bhi.n	834fe <_malloc_r+0x516>
   834f2:	0bda      	lsrs	r2, r3, #15
   834f4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   834f8:	00c9      	lsls	r1, r1, #3
   834fa:	3277      	adds	r2, #119	; 0x77
   834fc:	e720      	b.n	83340 <_malloc_r+0x358>
   834fe:	f240 5154 	movw	r1, #1364	; 0x554
   83502:	428a      	cmp	r2, r1
   83504:	d805      	bhi.n	83512 <_malloc_r+0x52a>
   83506:	0c9a      	lsrs	r2, r3, #18
   83508:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8350c:	00c9      	lsls	r1, r1, #3
   8350e:	327c      	adds	r2, #124	; 0x7c
   83510:	e716      	b.n	83340 <_malloc_r+0x358>
   83512:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83516:	227e      	movs	r2, #126	; 0x7e
   83518:	e712      	b.n	83340 <_malloc_r+0x358>
   8351a:	687b      	ldr	r3, [r7, #4]
   8351c:	e780      	b.n	83420 <_malloc_r+0x438>
   8351e:	08f0      	lsrs	r0, r6, #3
   83520:	f106 0308 	add.w	r3, r6, #8
   83524:	e60e      	b.n	83144 <_malloc_r+0x15c>
   83526:	bf00      	nop
   83528:	20070c1c 	.word	0x20070c1c

0008352c <__ascii_mbtowc>:
   8352c:	b082      	sub	sp, #8
   8352e:	b149      	cbz	r1, 83544 <__ascii_mbtowc+0x18>
   83530:	b15a      	cbz	r2, 8354a <__ascii_mbtowc+0x1e>
   83532:	b16b      	cbz	r3, 83550 <__ascii_mbtowc+0x24>
   83534:	7813      	ldrb	r3, [r2, #0]
   83536:	600b      	str	r3, [r1, #0]
   83538:	7812      	ldrb	r2, [r2, #0]
   8353a:	1c10      	adds	r0, r2, #0
   8353c:	bf18      	it	ne
   8353e:	2001      	movne	r0, #1
   83540:	b002      	add	sp, #8
   83542:	4770      	bx	lr
   83544:	a901      	add	r1, sp, #4
   83546:	2a00      	cmp	r2, #0
   83548:	d1f3      	bne.n	83532 <__ascii_mbtowc+0x6>
   8354a:	4610      	mov	r0, r2
   8354c:	b002      	add	sp, #8
   8354e:	4770      	bx	lr
   83550:	f06f 0001 	mvn.w	r0, #1
   83554:	e7f4      	b.n	83540 <__ascii_mbtowc+0x14>
   83556:	bf00      	nop

00083558 <memchr>:
   83558:	0783      	lsls	r3, r0, #30
   8355a:	b470      	push	{r4, r5, r6}
   8355c:	b2cd      	uxtb	r5, r1
   8355e:	d03d      	beq.n	835dc <memchr+0x84>
   83560:	1e54      	subs	r4, r2, #1
   83562:	b30a      	cbz	r2, 835a8 <memchr+0x50>
   83564:	7803      	ldrb	r3, [r0, #0]
   83566:	42ab      	cmp	r3, r5
   83568:	d01f      	beq.n	835aa <memchr+0x52>
   8356a:	1c43      	adds	r3, r0, #1
   8356c:	e005      	b.n	8357a <memchr+0x22>
   8356e:	f114 34ff 	adds.w	r4, r4, #4294967295
   83572:	d319      	bcc.n	835a8 <memchr+0x50>
   83574:	7802      	ldrb	r2, [r0, #0]
   83576:	42aa      	cmp	r2, r5
   83578:	d017      	beq.n	835aa <memchr+0x52>
   8357a:	f013 0f03 	tst.w	r3, #3
   8357e:	4618      	mov	r0, r3
   83580:	f103 0301 	add.w	r3, r3, #1
   83584:	d1f3      	bne.n	8356e <memchr+0x16>
   83586:	2c03      	cmp	r4, #3
   83588:	d811      	bhi.n	835ae <memchr+0x56>
   8358a:	b34c      	cbz	r4, 835e0 <memchr+0x88>
   8358c:	7803      	ldrb	r3, [r0, #0]
   8358e:	42ab      	cmp	r3, r5
   83590:	d00b      	beq.n	835aa <memchr+0x52>
   83592:	4404      	add	r4, r0
   83594:	1c43      	adds	r3, r0, #1
   83596:	e002      	b.n	8359e <memchr+0x46>
   83598:	7802      	ldrb	r2, [r0, #0]
   8359a:	42aa      	cmp	r2, r5
   8359c:	d005      	beq.n	835aa <memchr+0x52>
   8359e:	429c      	cmp	r4, r3
   835a0:	4618      	mov	r0, r3
   835a2:	f103 0301 	add.w	r3, r3, #1
   835a6:	d1f7      	bne.n	83598 <memchr+0x40>
   835a8:	2000      	movs	r0, #0
   835aa:	bc70      	pop	{r4, r5, r6}
   835ac:	4770      	bx	lr
   835ae:	0209      	lsls	r1, r1, #8
   835b0:	b289      	uxth	r1, r1
   835b2:	4329      	orrs	r1, r5
   835b4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   835b8:	6803      	ldr	r3, [r0, #0]
   835ba:	4606      	mov	r6, r0
   835bc:	404b      	eors	r3, r1
   835be:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   835c2:	ea22 0303 	bic.w	r3, r2, r3
   835c6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   835ca:	f100 0004 	add.w	r0, r0, #4
   835ce:	d103      	bne.n	835d8 <memchr+0x80>
   835d0:	3c04      	subs	r4, #4
   835d2:	2c03      	cmp	r4, #3
   835d4:	d8f0      	bhi.n	835b8 <memchr+0x60>
   835d6:	e7d8      	b.n	8358a <memchr+0x32>
   835d8:	4630      	mov	r0, r6
   835da:	e7d7      	b.n	8358c <memchr+0x34>
   835dc:	4614      	mov	r4, r2
   835de:	e7d2      	b.n	83586 <memchr+0x2e>
   835e0:	4620      	mov	r0, r4
   835e2:	e7e2      	b.n	835aa <memchr+0x52>

000835e4 <memcpy>:
   835e4:	4684      	mov	ip, r0
   835e6:	ea41 0300 	orr.w	r3, r1, r0
   835ea:	f013 0303 	ands.w	r3, r3, #3
   835ee:	d149      	bne.n	83684 <memcpy+0xa0>
   835f0:	3a40      	subs	r2, #64	; 0x40
   835f2:	d323      	bcc.n	8363c <memcpy+0x58>
   835f4:	680b      	ldr	r3, [r1, #0]
   835f6:	6003      	str	r3, [r0, #0]
   835f8:	684b      	ldr	r3, [r1, #4]
   835fa:	6043      	str	r3, [r0, #4]
   835fc:	688b      	ldr	r3, [r1, #8]
   835fe:	6083      	str	r3, [r0, #8]
   83600:	68cb      	ldr	r3, [r1, #12]
   83602:	60c3      	str	r3, [r0, #12]
   83604:	690b      	ldr	r3, [r1, #16]
   83606:	6103      	str	r3, [r0, #16]
   83608:	694b      	ldr	r3, [r1, #20]
   8360a:	6143      	str	r3, [r0, #20]
   8360c:	698b      	ldr	r3, [r1, #24]
   8360e:	6183      	str	r3, [r0, #24]
   83610:	69cb      	ldr	r3, [r1, #28]
   83612:	61c3      	str	r3, [r0, #28]
   83614:	6a0b      	ldr	r3, [r1, #32]
   83616:	6203      	str	r3, [r0, #32]
   83618:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8361a:	6243      	str	r3, [r0, #36]	; 0x24
   8361c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8361e:	6283      	str	r3, [r0, #40]	; 0x28
   83620:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83622:	62c3      	str	r3, [r0, #44]	; 0x2c
   83624:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83626:	6303      	str	r3, [r0, #48]	; 0x30
   83628:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8362a:	6343      	str	r3, [r0, #52]	; 0x34
   8362c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8362e:	6383      	str	r3, [r0, #56]	; 0x38
   83630:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83632:	63c3      	str	r3, [r0, #60]	; 0x3c
   83634:	3040      	adds	r0, #64	; 0x40
   83636:	3140      	adds	r1, #64	; 0x40
   83638:	3a40      	subs	r2, #64	; 0x40
   8363a:	d2db      	bcs.n	835f4 <memcpy+0x10>
   8363c:	3230      	adds	r2, #48	; 0x30
   8363e:	d30b      	bcc.n	83658 <memcpy+0x74>
   83640:	680b      	ldr	r3, [r1, #0]
   83642:	6003      	str	r3, [r0, #0]
   83644:	684b      	ldr	r3, [r1, #4]
   83646:	6043      	str	r3, [r0, #4]
   83648:	688b      	ldr	r3, [r1, #8]
   8364a:	6083      	str	r3, [r0, #8]
   8364c:	68cb      	ldr	r3, [r1, #12]
   8364e:	60c3      	str	r3, [r0, #12]
   83650:	3010      	adds	r0, #16
   83652:	3110      	adds	r1, #16
   83654:	3a10      	subs	r2, #16
   83656:	d2f3      	bcs.n	83640 <memcpy+0x5c>
   83658:	320c      	adds	r2, #12
   8365a:	d305      	bcc.n	83668 <memcpy+0x84>
   8365c:	f851 3b04 	ldr.w	r3, [r1], #4
   83660:	f840 3b04 	str.w	r3, [r0], #4
   83664:	3a04      	subs	r2, #4
   83666:	d2f9      	bcs.n	8365c <memcpy+0x78>
   83668:	3204      	adds	r2, #4
   8366a:	d008      	beq.n	8367e <memcpy+0x9a>
   8366c:	07d2      	lsls	r2, r2, #31
   8366e:	bf1c      	itt	ne
   83670:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83674:	f800 3b01 	strbne.w	r3, [r0], #1
   83678:	d301      	bcc.n	8367e <memcpy+0x9a>
   8367a:	880b      	ldrh	r3, [r1, #0]
   8367c:	8003      	strh	r3, [r0, #0]
   8367e:	4660      	mov	r0, ip
   83680:	4770      	bx	lr
   83682:	bf00      	nop
   83684:	2a08      	cmp	r2, #8
   83686:	d313      	bcc.n	836b0 <memcpy+0xcc>
   83688:	078b      	lsls	r3, r1, #30
   8368a:	d0b1      	beq.n	835f0 <memcpy+0xc>
   8368c:	f010 0303 	ands.w	r3, r0, #3
   83690:	d0ae      	beq.n	835f0 <memcpy+0xc>
   83692:	f1c3 0304 	rsb	r3, r3, #4
   83696:	1ad2      	subs	r2, r2, r3
   83698:	07db      	lsls	r3, r3, #31
   8369a:	bf1c      	itt	ne
   8369c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   836a0:	f800 3b01 	strbne.w	r3, [r0], #1
   836a4:	d3a4      	bcc.n	835f0 <memcpy+0xc>
   836a6:	f831 3b02 	ldrh.w	r3, [r1], #2
   836aa:	f820 3b02 	strh.w	r3, [r0], #2
   836ae:	e79f      	b.n	835f0 <memcpy+0xc>
   836b0:	3a04      	subs	r2, #4
   836b2:	d3d9      	bcc.n	83668 <memcpy+0x84>
   836b4:	3a01      	subs	r2, #1
   836b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   836ba:	f800 3b01 	strb.w	r3, [r0], #1
   836be:	d2f9      	bcs.n	836b4 <memcpy+0xd0>
   836c0:	780b      	ldrb	r3, [r1, #0]
   836c2:	7003      	strb	r3, [r0, #0]
   836c4:	784b      	ldrb	r3, [r1, #1]
   836c6:	7043      	strb	r3, [r0, #1]
   836c8:	788b      	ldrb	r3, [r1, #2]
   836ca:	7083      	strb	r3, [r0, #2]
   836cc:	4660      	mov	r0, ip
   836ce:	4770      	bx	lr

000836d0 <memmove>:
   836d0:	4288      	cmp	r0, r1
   836d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   836d4:	d90d      	bls.n	836f2 <memmove+0x22>
   836d6:	188b      	adds	r3, r1, r2
   836d8:	4298      	cmp	r0, r3
   836da:	d20a      	bcs.n	836f2 <memmove+0x22>
   836dc:	1884      	adds	r4, r0, r2
   836de:	2a00      	cmp	r2, #0
   836e0:	d051      	beq.n	83786 <memmove+0xb6>
   836e2:	4622      	mov	r2, r4
   836e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   836e8:	4299      	cmp	r1, r3
   836ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
   836ee:	d1f9      	bne.n	836e4 <memmove+0x14>
   836f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   836f2:	2a0f      	cmp	r2, #15
   836f4:	d948      	bls.n	83788 <memmove+0xb8>
   836f6:	ea41 0300 	orr.w	r3, r1, r0
   836fa:	079b      	lsls	r3, r3, #30
   836fc:	d146      	bne.n	8378c <memmove+0xbc>
   836fe:	4615      	mov	r5, r2
   83700:	f100 0410 	add.w	r4, r0, #16
   83704:	f101 0310 	add.w	r3, r1, #16
   83708:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8370c:	3d10      	subs	r5, #16
   8370e:	f844 6c10 	str.w	r6, [r4, #-16]
   83712:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83716:	2d0f      	cmp	r5, #15
   83718:	f844 6c0c 	str.w	r6, [r4, #-12]
   8371c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83720:	f104 0410 	add.w	r4, r4, #16
   83724:	f844 6c18 	str.w	r6, [r4, #-24]
   83728:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8372c:	f103 0310 	add.w	r3, r3, #16
   83730:	f844 6c14 	str.w	r6, [r4, #-20]
   83734:	d8e8      	bhi.n	83708 <memmove+0x38>
   83736:	f1a2 0310 	sub.w	r3, r2, #16
   8373a:	f023 030f 	bic.w	r3, r3, #15
   8373e:	f002 0e0f 	and.w	lr, r2, #15
   83742:	3310      	adds	r3, #16
   83744:	f1be 0f03 	cmp.w	lr, #3
   83748:	4419      	add	r1, r3
   8374a:	4403      	add	r3, r0
   8374c:	d921      	bls.n	83792 <memmove+0xc2>
   8374e:	460e      	mov	r6, r1
   83750:	4674      	mov	r4, lr
   83752:	1f1d      	subs	r5, r3, #4
   83754:	f856 7b04 	ldr.w	r7, [r6], #4
   83758:	3c04      	subs	r4, #4
   8375a:	2c03      	cmp	r4, #3
   8375c:	f845 7f04 	str.w	r7, [r5, #4]!
   83760:	d8f8      	bhi.n	83754 <memmove+0x84>
   83762:	f1ae 0404 	sub.w	r4, lr, #4
   83766:	f024 0403 	bic.w	r4, r4, #3
   8376a:	3404      	adds	r4, #4
   8376c:	4421      	add	r1, r4
   8376e:	4423      	add	r3, r4
   83770:	f002 0203 	and.w	r2, r2, #3
   83774:	b162      	cbz	r2, 83790 <memmove+0xc0>
   83776:	3b01      	subs	r3, #1
   83778:	440a      	add	r2, r1
   8377a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8377e:	428a      	cmp	r2, r1
   83780:	f803 4f01 	strb.w	r4, [r3, #1]!
   83784:	d1f9      	bne.n	8377a <memmove+0xaa>
   83786:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83788:	4603      	mov	r3, r0
   8378a:	e7f3      	b.n	83774 <memmove+0xa4>
   8378c:	4603      	mov	r3, r0
   8378e:	e7f2      	b.n	83776 <memmove+0xa6>
   83790:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83792:	4672      	mov	r2, lr
   83794:	e7ee      	b.n	83774 <memmove+0xa4>
   83796:	bf00      	nop

00083798 <__malloc_lock>:
   83798:	4801      	ldr	r0, [pc, #4]	; (837a0 <__malloc_lock+0x8>)
   8379a:	f7ff bba1 	b.w	82ee0 <__retarget_lock_acquire_recursive>
   8379e:	bf00      	nop
   837a0:	20071c6c 	.word	0x20071c6c

000837a4 <__malloc_unlock>:
   837a4:	4801      	ldr	r0, [pc, #4]	; (837ac <__malloc_unlock+0x8>)
   837a6:	f7ff bb9d 	b.w	82ee4 <__retarget_lock_release_recursive>
   837aa:	bf00      	nop
   837ac:	20071c6c 	.word	0x20071c6c

000837b0 <_realloc_r>:
   837b0:	2900      	cmp	r1, #0
   837b2:	f000 8094 	beq.w	838de <_realloc_r+0x12e>
   837b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   837ba:	460c      	mov	r4, r1
   837bc:	4615      	mov	r5, r2
   837be:	b083      	sub	sp, #12
   837c0:	4680      	mov	r8, r0
   837c2:	f105 060b 	add.w	r6, r5, #11
   837c6:	f7ff ffe7 	bl	83798 <__malloc_lock>
   837ca:	f854 ec04 	ldr.w	lr, [r4, #-4]
   837ce:	2e16      	cmp	r6, #22
   837d0:	f02e 0703 	bic.w	r7, lr, #3
   837d4:	f1a4 0908 	sub.w	r9, r4, #8
   837d8:	d83c      	bhi.n	83854 <_realloc_r+0xa4>
   837da:	2210      	movs	r2, #16
   837dc:	4616      	mov	r6, r2
   837de:	42b5      	cmp	r5, r6
   837e0:	d83d      	bhi.n	8385e <_realloc_r+0xae>
   837e2:	4297      	cmp	r7, r2
   837e4:	da43      	bge.n	8386e <_realloc_r+0xbe>
   837e6:	4bc6      	ldr	r3, [pc, #792]	; (83b00 <_realloc_r+0x350>)
   837e8:	eb09 0007 	add.w	r0, r9, r7
   837ec:	6899      	ldr	r1, [r3, #8]
   837ee:	4288      	cmp	r0, r1
   837f0:	f000 80c3 	beq.w	8397a <_realloc_r+0x1ca>
   837f4:	6843      	ldr	r3, [r0, #4]
   837f6:	f023 0101 	bic.w	r1, r3, #1
   837fa:	4401      	add	r1, r0
   837fc:	6849      	ldr	r1, [r1, #4]
   837fe:	07c9      	lsls	r1, r1, #31
   83800:	d54d      	bpl.n	8389e <_realloc_r+0xee>
   83802:	f01e 0f01 	tst.w	lr, #1
   83806:	f000 809b 	beq.w	83940 <_realloc_r+0x190>
   8380a:	4629      	mov	r1, r5
   8380c:	4640      	mov	r0, r8
   8380e:	f7ff fbeb 	bl	82fe8 <_malloc_r>
   83812:	4605      	mov	r5, r0
   83814:	2800      	cmp	r0, #0
   83816:	d03b      	beq.n	83890 <_realloc_r+0xe0>
   83818:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8381c:	f1a0 0208 	sub.w	r2, r0, #8
   83820:	f023 0301 	bic.w	r3, r3, #1
   83824:	444b      	add	r3, r9
   83826:	429a      	cmp	r2, r3
   83828:	f000 812b 	beq.w	83a82 <_realloc_r+0x2d2>
   8382c:	1f3a      	subs	r2, r7, #4
   8382e:	2a24      	cmp	r2, #36	; 0x24
   83830:	f200 8118 	bhi.w	83a64 <_realloc_r+0x2b4>
   83834:	2a13      	cmp	r2, #19
   83836:	f200 80eb 	bhi.w	83a10 <_realloc_r+0x260>
   8383a:	4603      	mov	r3, r0
   8383c:	4622      	mov	r2, r4
   8383e:	6811      	ldr	r1, [r2, #0]
   83840:	6019      	str	r1, [r3, #0]
   83842:	6851      	ldr	r1, [r2, #4]
   83844:	6059      	str	r1, [r3, #4]
   83846:	6892      	ldr	r2, [r2, #8]
   83848:	609a      	str	r2, [r3, #8]
   8384a:	4621      	mov	r1, r4
   8384c:	4640      	mov	r0, r8
   8384e:	f7ff f8ad 	bl	829ac <_free_r>
   83852:	e01d      	b.n	83890 <_realloc_r+0xe0>
   83854:	f026 0607 	bic.w	r6, r6, #7
   83858:	2e00      	cmp	r6, #0
   8385a:	4632      	mov	r2, r6
   8385c:	dabf      	bge.n	837de <_realloc_r+0x2e>
   8385e:	2500      	movs	r5, #0
   83860:	230c      	movs	r3, #12
   83862:	4628      	mov	r0, r5
   83864:	f8c8 3000 	str.w	r3, [r8]
   83868:	b003      	add	sp, #12
   8386a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8386e:	4625      	mov	r5, r4
   83870:	1bbb      	subs	r3, r7, r6
   83872:	2b0f      	cmp	r3, #15
   83874:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83878:	d81d      	bhi.n	838b6 <_realloc_r+0x106>
   8387a:	f002 0201 	and.w	r2, r2, #1
   8387e:	433a      	orrs	r2, r7
   83880:	eb09 0107 	add.w	r1, r9, r7
   83884:	f8c9 2004 	str.w	r2, [r9, #4]
   83888:	684b      	ldr	r3, [r1, #4]
   8388a:	f043 0301 	orr.w	r3, r3, #1
   8388e:	604b      	str	r3, [r1, #4]
   83890:	4640      	mov	r0, r8
   83892:	f7ff ff87 	bl	837a4 <__malloc_unlock>
   83896:	4628      	mov	r0, r5
   83898:	b003      	add	sp, #12
   8389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8389e:	f023 0303 	bic.w	r3, r3, #3
   838a2:	18f9      	adds	r1, r7, r3
   838a4:	4291      	cmp	r1, r2
   838a6:	db1d      	blt.n	838e4 <_realloc_r+0x134>
   838a8:	68c3      	ldr	r3, [r0, #12]
   838aa:	6882      	ldr	r2, [r0, #8]
   838ac:	4625      	mov	r5, r4
   838ae:	60d3      	str	r3, [r2, #12]
   838b0:	460f      	mov	r7, r1
   838b2:	609a      	str	r2, [r3, #8]
   838b4:	e7dc      	b.n	83870 <_realloc_r+0xc0>
   838b6:	f002 0201 	and.w	r2, r2, #1
   838ba:	eb09 0106 	add.w	r1, r9, r6
   838be:	f043 0301 	orr.w	r3, r3, #1
   838c2:	4332      	orrs	r2, r6
   838c4:	f8c9 2004 	str.w	r2, [r9, #4]
   838c8:	444f      	add	r7, r9
   838ca:	604b      	str	r3, [r1, #4]
   838cc:	687b      	ldr	r3, [r7, #4]
   838ce:	3108      	adds	r1, #8
   838d0:	f043 0301 	orr.w	r3, r3, #1
   838d4:	607b      	str	r3, [r7, #4]
   838d6:	4640      	mov	r0, r8
   838d8:	f7ff f868 	bl	829ac <_free_r>
   838dc:	e7d8      	b.n	83890 <_realloc_r+0xe0>
   838de:	4611      	mov	r1, r2
   838e0:	f7ff bb82 	b.w	82fe8 <_malloc_r>
   838e4:	f01e 0f01 	tst.w	lr, #1
   838e8:	d18f      	bne.n	8380a <_realloc_r+0x5a>
   838ea:	f854 1c08 	ldr.w	r1, [r4, #-8]
   838ee:	eba9 0a01 	sub.w	sl, r9, r1
   838f2:	f8da 1004 	ldr.w	r1, [sl, #4]
   838f6:	f021 0103 	bic.w	r1, r1, #3
   838fa:	440b      	add	r3, r1
   838fc:	443b      	add	r3, r7
   838fe:	4293      	cmp	r3, r2
   83900:	db26      	blt.n	83950 <_realloc_r+0x1a0>
   83902:	4655      	mov	r5, sl
   83904:	68c1      	ldr	r1, [r0, #12]
   83906:	6880      	ldr	r0, [r0, #8]
   83908:	1f3a      	subs	r2, r7, #4
   8390a:	60c1      	str	r1, [r0, #12]
   8390c:	6088      	str	r0, [r1, #8]
   8390e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83912:	f8da 100c 	ldr.w	r1, [sl, #12]
   83916:	2a24      	cmp	r2, #36	; 0x24
   83918:	60c1      	str	r1, [r0, #12]
   8391a:	6088      	str	r0, [r1, #8]
   8391c:	d826      	bhi.n	8396c <_realloc_r+0x1bc>
   8391e:	2a13      	cmp	r2, #19
   83920:	f240 8081 	bls.w	83a26 <_realloc_r+0x276>
   83924:	6821      	ldr	r1, [r4, #0]
   83926:	2a1b      	cmp	r2, #27
   83928:	f8ca 1008 	str.w	r1, [sl, #8]
   8392c:	6861      	ldr	r1, [r4, #4]
   8392e:	f8ca 100c 	str.w	r1, [sl, #12]
   83932:	f200 80ad 	bhi.w	83a90 <_realloc_r+0x2e0>
   83936:	f104 0008 	add.w	r0, r4, #8
   8393a:	f10a 0210 	add.w	r2, sl, #16
   8393e:	e074      	b.n	83a2a <_realloc_r+0x27a>
   83940:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83944:	eba9 0a03 	sub.w	sl, r9, r3
   83948:	f8da 1004 	ldr.w	r1, [sl, #4]
   8394c:	f021 0103 	bic.w	r1, r1, #3
   83950:	187b      	adds	r3, r7, r1
   83952:	4293      	cmp	r3, r2
   83954:	f6ff af59 	blt.w	8380a <_realloc_r+0x5a>
   83958:	4655      	mov	r5, sl
   8395a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8395e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83962:	1f3a      	subs	r2, r7, #4
   83964:	2a24      	cmp	r2, #36	; 0x24
   83966:	60c1      	str	r1, [r0, #12]
   83968:	6088      	str	r0, [r1, #8]
   8396a:	d9d8      	bls.n	8391e <_realloc_r+0x16e>
   8396c:	4621      	mov	r1, r4
   8396e:	4628      	mov	r0, r5
   83970:	461f      	mov	r7, r3
   83972:	46d1      	mov	r9, sl
   83974:	f7ff feac 	bl	836d0 <memmove>
   83978:	e77a      	b.n	83870 <_realloc_r+0xc0>
   8397a:	6841      	ldr	r1, [r0, #4]
   8397c:	f106 0010 	add.w	r0, r6, #16
   83980:	f021 0b03 	bic.w	fp, r1, #3
   83984:	44bb      	add	fp, r7
   83986:	4583      	cmp	fp, r0
   83988:	da58      	bge.n	83a3c <_realloc_r+0x28c>
   8398a:	f01e 0f01 	tst.w	lr, #1
   8398e:	f47f af3c 	bne.w	8380a <_realloc_r+0x5a>
   83992:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83996:	eba9 0a01 	sub.w	sl, r9, r1
   8399a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8399e:	f021 0103 	bic.w	r1, r1, #3
   839a2:	448b      	add	fp, r1
   839a4:	4558      	cmp	r0, fp
   839a6:	dcd3      	bgt.n	83950 <_realloc_r+0x1a0>
   839a8:	4655      	mov	r5, sl
   839aa:	f8da 100c 	ldr.w	r1, [sl, #12]
   839ae:	f855 0f08 	ldr.w	r0, [r5, #8]!
   839b2:	1f3a      	subs	r2, r7, #4
   839b4:	2a24      	cmp	r2, #36	; 0x24
   839b6:	60c1      	str	r1, [r0, #12]
   839b8:	6088      	str	r0, [r1, #8]
   839ba:	f200 808d 	bhi.w	83ad8 <_realloc_r+0x328>
   839be:	2a13      	cmp	r2, #19
   839c0:	f240 8087 	bls.w	83ad2 <_realloc_r+0x322>
   839c4:	6821      	ldr	r1, [r4, #0]
   839c6:	2a1b      	cmp	r2, #27
   839c8:	f8ca 1008 	str.w	r1, [sl, #8]
   839cc:	6861      	ldr	r1, [r4, #4]
   839ce:	f8ca 100c 	str.w	r1, [sl, #12]
   839d2:	f200 8088 	bhi.w	83ae6 <_realloc_r+0x336>
   839d6:	f104 0108 	add.w	r1, r4, #8
   839da:	f10a 0210 	add.w	r2, sl, #16
   839de:	6808      	ldr	r0, [r1, #0]
   839e0:	6010      	str	r0, [r2, #0]
   839e2:	6848      	ldr	r0, [r1, #4]
   839e4:	6050      	str	r0, [r2, #4]
   839e6:	6889      	ldr	r1, [r1, #8]
   839e8:	6091      	str	r1, [r2, #8]
   839ea:	ebab 0206 	sub.w	r2, fp, r6
   839ee:	eb0a 0106 	add.w	r1, sl, r6
   839f2:	f042 0201 	orr.w	r2, r2, #1
   839f6:	6099      	str	r1, [r3, #8]
   839f8:	604a      	str	r2, [r1, #4]
   839fa:	f8da 3004 	ldr.w	r3, [sl, #4]
   839fe:	4640      	mov	r0, r8
   83a00:	f003 0301 	and.w	r3, r3, #1
   83a04:	431e      	orrs	r6, r3
   83a06:	f8ca 6004 	str.w	r6, [sl, #4]
   83a0a:	f7ff fecb 	bl	837a4 <__malloc_unlock>
   83a0e:	e742      	b.n	83896 <_realloc_r+0xe6>
   83a10:	6823      	ldr	r3, [r4, #0]
   83a12:	2a1b      	cmp	r2, #27
   83a14:	6003      	str	r3, [r0, #0]
   83a16:	6863      	ldr	r3, [r4, #4]
   83a18:	6043      	str	r3, [r0, #4]
   83a1a:	d827      	bhi.n	83a6c <_realloc_r+0x2bc>
   83a1c:	f100 0308 	add.w	r3, r0, #8
   83a20:	f104 0208 	add.w	r2, r4, #8
   83a24:	e70b      	b.n	8383e <_realloc_r+0x8e>
   83a26:	4620      	mov	r0, r4
   83a28:	462a      	mov	r2, r5
   83a2a:	6801      	ldr	r1, [r0, #0]
   83a2c:	461f      	mov	r7, r3
   83a2e:	6011      	str	r1, [r2, #0]
   83a30:	6841      	ldr	r1, [r0, #4]
   83a32:	46d1      	mov	r9, sl
   83a34:	6051      	str	r1, [r2, #4]
   83a36:	6883      	ldr	r3, [r0, #8]
   83a38:	6093      	str	r3, [r2, #8]
   83a3a:	e719      	b.n	83870 <_realloc_r+0xc0>
   83a3c:	ebab 0b06 	sub.w	fp, fp, r6
   83a40:	eb09 0106 	add.w	r1, r9, r6
   83a44:	f04b 0201 	orr.w	r2, fp, #1
   83a48:	6099      	str	r1, [r3, #8]
   83a4a:	604a      	str	r2, [r1, #4]
   83a4c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83a50:	4640      	mov	r0, r8
   83a52:	f003 0301 	and.w	r3, r3, #1
   83a56:	431e      	orrs	r6, r3
   83a58:	f844 6c04 	str.w	r6, [r4, #-4]
   83a5c:	f7ff fea2 	bl	837a4 <__malloc_unlock>
   83a60:	4625      	mov	r5, r4
   83a62:	e718      	b.n	83896 <_realloc_r+0xe6>
   83a64:	4621      	mov	r1, r4
   83a66:	f7ff fe33 	bl	836d0 <memmove>
   83a6a:	e6ee      	b.n	8384a <_realloc_r+0x9a>
   83a6c:	68a3      	ldr	r3, [r4, #8]
   83a6e:	2a24      	cmp	r2, #36	; 0x24
   83a70:	6083      	str	r3, [r0, #8]
   83a72:	68e3      	ldr	r3, [r4, #12]
   83a74:	60c3      	str	r3, [r0, #12]
   83a76:	d018      	beq.n	83aaa <_realloc_r+0x2fa>
   83a78:	f100 0310 	add.w	r3, r0, #16
   83a7c:	f104 0210 	add.w	r2, r4, #16
   83a80:	e6dd      	b.n	8383e <_realloc_r+0x8e>
   83a82:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83a86:	4625      	mov	r5, r4
   83a88:	f023 0303 	bic.w	r3, r3, #3
   83a8c:	441f      	add	r7, r3
   83a8e:	e6ef      	b.n	83870 <_realloc_r+0xc0>
   83a90:	68a1      	ldr	r1, [r4, #8]
   83a92:	2a24      	cmp	r2, #36	; 0x24
   83a94:	f8ca 1010 	str.w	r1, [sl, #16]
   83a98:	68e1      	ldr	r1, [r4, #12]
   83a9a:	f8ca 1014 	str.w	r1, [sl, #20]
   83a9e:	d00d      	beq.n	83abc <_realloc_r+0x30c>
   83aa0:	f104 0010 	add.w	r0, r4, #16
   83aa4:	f10a 0218 	add.w	r2, sl, #24
   83aa8:	e7bf      	b.n	83a2a <_realloc_r+0x27a>
   83aaa:	6922      	ldr	r2, [r4, #16]
   83aac:	f100 0318 	add.w	r3, r0, #24
   83ab0:	6102      	str	r2, [r0, #16]
   83ab2:	6961      	ldr	r1, [r4, #20]
   83ab4:	f104 0218 	add.w	r2, r4, #24
   83ab8:	6141      	str	r1, [r0, #20]
   83aba:	e6c0      	b.n	8383e <_realloc_r+0x8e>
   83abc:	6922      	ldr	r2, [r4, #16]
   83abe:	f104 0018 	add.w	r0, r4, #24
   83ac2:	f8ca 2018 	str.w	r2, [sl, #24]
   83ac6:	6961      	ldr	r1, [r4, #20]
   83ac8:	f10a 0220 	add.w	r2, sl, #32
   83acc:	f8ca 101c 	str.w	r1, [sl, #28]
   83ad0:	e7ab      	b.n	83a2a <_realloc_r+0x27a>
   83ad2:	4621      	mov	r1, r4
   83ad4:	462a      	mov	r2, r5
   83ad6:	e782      	b.n	839de <_realloc_r+0x22e>
   83ad8:	4621      	mov	r1, r4
   83ada:	4628      	mov	r0, r5
   83adc:	9301      	str	r3, [sp, #4]
   83ade:	f7ff fdf7 	bl	836d0 <memmove>
   83ae2:	9b01      	ldr	r3, [sp, #4]
   83ae4:	e781      	b.n	839ea <_realloc_r+0x23a>
   83ae6:	68a1      	ldr	r1, [r4, #8]
   83ae8:	2a24      	cmp	r2, #36	; 0x24
   83aea:	f8ca 1010 	str.w	r1, [sl, #16]
   83aee:	68e1      	ldr	r1, [r4, #12]
   83af0:	f8ca 1014 	str.w	r1, [sl, #20]
   83af4:	d006      	beq.n	83b04 <_realloc_r+0x354>
   83af6:	f104 0110 	add.w	r1, r4, #16
   83afa:	f10a 0218 	add.w	r2, sl, #24
   83afe:	e76e      	b.n	839de <_realloc_r+0x22e>
   83b00:	200706d0 	.word	0x200706d0
   83b04:	6922      	ldr	r2, [r4, #16]
   83b06:	f104 0118 	add.w	r1, r4, #24
   83b0a:	f8ca 2018 	str.w	r2, [sl, #24]
   83b0e:	6960      	ldr	r0, [r4, #20]
   83b10:	f10a 0220 	add.w	r2, sl, #32
   83b14:	f8ca 001c 	str.w	r0, [sl, #28]
   83b18:	e761      	b.n	839de <_realloc_r+0x22e>
   83b1a:	bf00      	nop

00083b1c <_sbrk_r>:
   83b1c:	b538      	push	{r3, r4, r5, lr}
   83b1e:	2300      	movs	r3, #0
   83b20:	4c06      	ldr	r4, [pc, #24]	; (83b3c <_sbrk_r+0x20>)
   83b22:	4605      	mov	r5, r0
   83b24:	4608      	mov	r0, r1
   83b26:	6023      	str	r3, [r4, #0]
   83b28:	f7fd f852 	bl	80bd0 <_sbrk>
   83b2c:	1c43      	adds	r3, r0, #1
   83b2e:	d000      	beq.n	83b32 <_sbrk_r+0x16>
   83b30:	bd38      	pop	{r3, r4, r5, pc}
   83b32:	6823      	ldr	r3, [r4, #0]
   83b34:	2b00      	cmp	r3, #0
   83b36:	d0fb      	beq.n	83b30 <_sbrk_r+0x14>
   83b38:	602b      	str	r3, [r5, #0]
   83b3a:	bd38      	pop	{r3, r4, r5, pc}
   83b3c:	20071c80 	.word	0x20071c80

00083b40 <__sread>:
   83b40:	b510      	push	{r4, lr}
   83b42:	460c      	mov	r4, r1
   83b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b48:	f000 f9f4 	bl	83f34 <_read_r>
   83b4c:	2800      	cmp	r0, #0
   83b4e:	db03      	blt.n	83b58 <__sread+0x18>
   83b50:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83b52:	4403      	add	r3, r0
   83b54:	6523      	str	r3, [r4, #80]	; 0x50
   83b56:	bd10      	pop	{r4, pc}
   83b58:	89a3      	ldrh	r3, [r4, #12]
   83b5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83b5e:	81a3      	strh	r3, [r4, #12]
   83b60:	bd10      	pop	{r4, pc}
   83b62:	bf00      	nop

00083b64 <__swrite>:
   83b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83b68:	460c      	mov	r4, r1
   83b6a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83b6e:	461f      	mov	r7, r3
   83b70:	05cb      	lsls	r3, r1, #23
   83b72:	4616      	mov	r6, r2
   83b74:	4605      	mov	r5, r0
   83b76:	d507      	bpl.n	83b88 <__swrite+0x24>
   83b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83b7c:	2302      	movs	r3, #2
   83b7e:	2200      	movs	r2, #0
   83b80:	f000 f9c2 	bl	83f08 <_lseek_r>
   83b84:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83b88:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83b8c:	81a1      	strh	r1, [r4, #12]
   83b8e:	463b      	mov	r3, r7
   83b90:	4632      	mov	r2, r6
   83b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83b96:	4628      	mov	r0, r5
   83b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b9c:	f000 b8a2 	b.w	83ce4 <_write_r>

00083ba0 <__sseek>:
   83ba0:	b510      	push	{r4, lr}
   83ba2:	460c      	mov	r4, r1
   83ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83ba8:	f000 f9ae 	bl	83f08 <_lseek_r>
   83bac:	89a3      	ldrh	r3, [r4, #12]
   83bae:	1c42      	adds	r2, r0, #1
   83bb0:	bf0e      	itee	eq
   83bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83bba:	6520      	strne	r0, [r4, #80]	; 0x50
   83bbc:	81a3      	strh	r3, [r4, #12]
   83bbe:	bd10      	pop	{r4, pc}

00083bc0 <__sclose>:
   83bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83bc4:	f000 b906 	b.w	83dd4 <_close_r>

00083bc8 <__swbuf_r>:
   83bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bca:	460d      	mov	r5, r1
   83bcc:	4614      	mov	r4, r2
   83bce:	4606      	mov	r6, r0
   83bd0:	b110      	cbz	r0, 83bd8 <__swbuf_r+0x10>
   83bd2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83bd4:	2b00      	cmp	r3, #0
   83bd6:	d04b      	beq.n	83c70 <__swbuf_r+0xa8>
   83bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83bdc:	69a3      	ldr	r3, [r4, #24]
   83bde:	b291      	uxth	r1, r2
   83be0:	0708      	lsls	r0, r1, #28
   83be2:	60a3      	str	r3, [r4, #8]
   83be4:	d539      	bpl.n	83c5a <__swbuf_r+0x92>
   83be6:	6923      	ldr	r3, [r4, #16]
   83be8:	2b00      	cmp	r3, #0
   83bea:	d036      	beq.n	83c5a <__swbuf_r+0x92>
   83bec:	b2ed      	uxtb	r5, r5
   83bee:	0489      	lsls	r1, r1, #18
   83bf0:	462f      	mov	r7, r5
   83bf2:	d515      	bpl.n	83c20 <__swbuf_r+0x58>
   83bf4:	6822      	ldr	r2, [r4, #0]
   83bf6:	6961      	ldr	r1, [r4, #20]
   83bf8:	1ad3      	subs	r3, r2, r3
   83bfa:	428b      	cmp	r3, r1
   83bfc:	da1c      	bge.n	83c38 <__swbuf_r+0x70>
   83bfe:	3301      	adds	r3, #1
   83c00:	68a1      	ldr	r1, [r4, #8]
   83c02:	1c50      	adds	r0, r2, #1
   83c04:	3901      	subs	r1, #1
   83c06:	60a1      	str	r1, [r4, #8]
   83c08:	6020      	str	r0, [r4, #0]
   83c0a:	7015      	strb	r5, [r2, #0]
   83c0c:	6962      	ldr	r2, [r4, #20]
   83c0e:	429a      	cmp	r2, r3
   83c10:	d01a      	beq.n	83c48 <__swbuf_r+0x80>
   83c12:	89a3      	ldrh	r3, [r4, #12]
   83c14:	07db      	lsls	r3, r3, #31
   83c16:	d501      	bpl.n	83c1c <__swbuf_r+0x54>
   83c18:	2d0a      	cmp	r5, #10
   83c1a:	d015      	beq.n	83c48 <__swbuf_r+0x80>
   83c1c:	4638      	mov	r0, r7
   83c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c20:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83c22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83c26:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83c2a:	81a2      	strh	r2, [r4, #12]
   83c2c:	6822      	ldr	r2, [r4, #0]
   83c2e:	6661      	str	r1, [r4, #100]	; 0x64
   83c30:	6961      	ldr	r1, [r4, #20]
   83c32:	1ad3      	subs	r3, r2, r3
   83c34:	428b      	cmp	r3, r1
   83c36:	dbe2      	blt.n	83bfe <__swbuf_r+0x36>
   83c38:	4621      	mov	r1, r4
   83c3a:	4630      	mov	r0, r6
   83c3c:	f7fe fd38 	bl	826b0 <_fflush_r>
   83c40:	b940      	cbnz	r0, 83c54 <__swbuf_r+0x8c>
   83c42:	2301      	movs	r3, #1
   83c44:	6822      	ldr	r2, [r4, #0]
   83c46:	e7db      	b.n	83c00 <__swbuf_r+0x38>
   83c48:	4621      	mov	r1, r4
   83c4a:	4630      	mov	r0, r6
   83c4c:	f7fe fd30 	bl	826b0 <_fflush_r>
   83c50:	2800      	cmp	r0, #0
   83c52:	d0e3      	beq.n	83c1c <__swbuf_r+0x54>
   83c54:	f04f 37ff 	mov.w	r7, #4294967295
   83c58:	e7e0      	b.n	83c1c <__swbuf_r+0x54>
   83c5a:	4621      	mov	r1, r4
   83c5c:	4630      	mov	r0, r6
   83c5e:	f7fe fc17 	bl	82490 <__swsetup_r>
   83c62:	2800      	cmp	r0, #0
   83c64:	d1f6      	bne.n	83c54 <__swbuf_r+0x8c>
   83c66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83c6a:	6923      	ldr	r3, [r4, #16]
   83c6c:	b291      	uxth	r1, r2
   83c6e:	e7bd      	b.n	83bec <__swbuf_r+0x24>
   83c70:	f7fe fd76 	bl	82760 <__sinit>
   83c74:	e7b0      	b.n	83bd8 <__swbuf_r+0x10>
   83c76:	bf00      	nop

00083c78 <_wcrtomb_r>:
   83c78:	b5f0      	push	{r4, r5, r6, r7, lr}
   83c7a:	4606      	mov	r6, r0
   83c7c:	b085      	sub	sp, #20
   83c7e:	461f      	mov	r7, r3
   83c80:	b189      	cbz	r1, 83ca6 <_wcrtomb_r+0x2e>
   83c82:	4c10      	ldr	r4, [pc, #64]	; (83cc4 <_wcrtomb_r+0x4c>)
   83c84:	4d10      	ldr	r5, [pc, #64]	; (83cc8 <_wcrtomb_r+0x50>)
   83c86:	6824      	ldr	r4, [r4, #0]
   83c88:	6b64      	ldr	r4, [r4, #52]	; 0x34
   83c8a:	2c00      	cmp	r4, #0
   83c8c:	bf08      	it	eq
   83c8e:	462c      	moveq	r4, r5
   83c90:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83c94:	47a0      	blx	r4
   83c96:	1c43      	adds	r3, r0, #1
   83c98:	d103      	bne.n	83ca2 <_wcrtomb_r+0x2a>
   83c9a:	2200      	movs	r2, #0
   83c9c:	238a      	movs	r3, #138	; 0x8a
   83c9e:	603a      	str	r2, [r7, #0]
   83ca0:	6033      	str	r3, [r6, #0]
   83ca2:	b005      	add	sp, #20
   83ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83ca6:	460c      	mov	r4, r1
   83ca8:	4a06      	ldr	r2, [pc, #24]	; (83cc4 <_wcrtomb_r+0x4c>)
   83caa:	4d07      	ldr	r5, [pc, #28]	; (83cc8 <_wcrtomb_r+0x50>)
   83cac:	6811      	ldr	r1, [r2, #0]
   83cae:	4622      	mov	r2, r4
   83cb0:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83cb2:	a901      	add	r1, sp, #4
   83cb4:	2c00      	cmp	r4, #0
   83cb6:	bf08      	it	eq
   83cb8:	462c      	moveq	r4, r5
   83cba:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83cbe:	47a0      	blx	r4
   83cc0:	e7e9      	b.n	83c96 <_wcrtomb_r+0x1e>
   83cc2:	bf00      	nop
   83cc4:	20070134 	.word	0x20070134
   83cc8:	20070564 	.word	0x20070564

00083ccc <__ascii_wctomb>:
   83ccc:	b119      	cbz	r1, 83cd6 <__ascii_wctomb+0xa>
   83cce:	2aff      	cmp	r2, #255	; 0xff
   83cd0:	d803      	bhi.n	83cda <__ascii_wctomb+0xe>
   83cd2:	700a      	strb	r2, [r1, #0]
   83cd4:	2101      	movs	r1, #1
   83cd6:	4608      	mov	r0, r1
   83cd8:	4770      	bx	lr
   83cda:	238a      	movs	r3, #138	; 0x8a
   83cdc:	f04f 31ff 	mov.w	r1, #4294967295
   83ce0:	6003      	str	r3, [r0, #0]
   83ce2:	e7f8      	b.n	83cd6 <__ascii_wctomb+0xa>

00083ce4 <_write_r>:
   83ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ce6:	460e      	mov	r6, r1
   83ce8:	2500      	movs	r5, #0
   83cea:	4c08      	ldr	r4, [pc, #32]	; (83d0c <_write_r+0x28>)
   83cec:	4611      	mov	r1, r2
   83cee:	4607      	mov	r7, r0
   83cf0:	461a      	mov	r2, r3
   83cf2:	4630      	mov	r0, r6
   83cf4:	6025      	str	r5, [r4, #0]
   83cf6:	f7fc fb73 	bl	803e0 <_write>
   83cfa:	1c43      	adds	r3, r0, #1
   83cfc:	d000      	beq.n	83d00 <_write_r+0x1c>
   83cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83d00:	6823      	ldr	r3, [r4, #0]
   83d02:	2b00      	cmp	r3, #0
   83d04:	d0fb      	beq.n	83cfe <_write_r+0x1a>
   83d06:	603b      	str	r3, [r7, #0]
   83d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83d0a:	bf00      	nop
   83d0c:	20071c80 	.word	0x20071c80

00083d10 <__register_exitproc>:
   83d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83d14:	4d2c      	ldr	r5, [pc, #176]	; (83dc8 <__register_exitproc+0xb8>)
   83d16:	4606      	mov	r6, r0
   83d18:	6828      	ldr	r0, [r5, #0]
   83d1a:	4698      	mov	r8, r3
   83d1c:	460f      	mov	r7, r1
   83d1e:	4691      	mov	r9, r2
   83d20:	f7ff f8de 	bl	82ee0 <__retarget_lock_acquire_recursive>
   83d24:	4b29      	ldr	r3, [pc, #164]	; (83dcc <__register_exitproc+0xbc>)
   83d26:	681c      	ldr	r4, [r3, #0]
   83d28:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83d2c:	2b00      	cmp	r3, #0
   83d2e:	d03e      	beq.n	83dae <__register_exitproc+0x9e>
   83d30:	685a      	ldr	r2, [r3, #4]
   83d32:	2a1f      	cmp	r2, #31
   83d34:	dc1c      	bgt.n	83d70 <__register_exitproc+0x60>
   83d36:	f102 0e01 	add.w	lr, r2, #1
   83d3a:	b176      	cbz	r6, 83d5a <__register_exitproc+0x4a>
   83d3c:	2101      	movs	r1, #1
   83d3e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83d42:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83d46:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83d4a:	4091      	lsls	r1, r2
   83d4c:	4308      	orrs	r0, r1
   83d4e:	2e02      	cmp	r6, #2
   83d50:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83d54:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83d58:	d023      	beq.n	83da2 <__register_exitproc+0x92>
   83d5a:	3202      	adds	r2, #2
   83d5c:	f8c3 e004 	str.w	lr, [r3, #4]
   83d60:	6828      	ldr	r0, [r5, #0]
   83d62:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83d66:	f7ff f8bd 	bl	82ee4 <__retarget_lock_release_recursive>
   83d6a:	2000      	movs	r0, #0
   83d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d70:	4b17      	ldr	r3, [pc, #92]	; (83dd0 <__register_exitproc+0xc0>)
   83d72:	b30b      	cbz	r3, 83db8 <__register_exitproc+0xa8>
   83d74:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83d78:	f7ff f92e 	bl	82fd8 <malloc>
   83d7c:	4603      	mov	r3, r0
   83d7e:	b1d8      	cbz	r0, 83db8 <__register_exitproc+0xa8>
   83d80:	2000      	movs	r0, #0
   83d82:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83d86:	f04f 0e01 	mov.w	lr, #1
   83d8a:	6058      	str	r0, [r3, #4]
   83d8c:	6019      	str	r1, [r3, #0]
   83d8e:	4602      	mov	r2, r0
   83d90:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83d94:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83d98:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83d9c:	2e00      	cmp	r6, #0
   83d9e:	d0dc      	beq.n	83d5a <__register_exitproc+0x4a>
   83da0:	e7cc      	b.n	83d3c <__register_exitproc+0x2c>
   83da2:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83da6:	4301      	orrs	r1, r0
   83da8:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83dac:	e7d5      	b.n	83d5a <__register_exitproc+0x4a>
   83dae:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83db2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83db6:	e7bb      	b.n	83d30 <__register_exitproc+0x20>
   83db8:	6828      	ldr	r0, [r5, #0]
   83dba:	f7ff f893 	bl	82ee4 <__retarget_lock_release_recursive>
   83dbe:	f04f 30ff 	mov.w	r0, #4294967295
   83dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83dc6:	bf00      	nop
   83dc8:	20070560 	.word	0x20070560
   83dcc:	000842f8 	.word	0x000842f8
   83dd0:	00082fd9 	.word	0x00082fd9

00083dd4 <_close_r>:
   83dd4:	b538      	push	{r3, r4, r5, lr}
   83dd6:	2300      	movs	r3, #0
   83dd8:	4c06      	ldr	r4, [pc, #24]	; (83df4 <_close_r+0x20>)
   83dda:	4605      	mov	r5, r0
   83ddc:	4608      	mov	r0, r1
   83dde:	6023      	str	r3, [r4, #0]
   83de0:	f7fc ff12 	bl	80c08 <_close>
   83de4:	1c43      	adds	r3, r0, #1
   83de6:	d000      	beq.n	83dea <_close_r+0x16>
   83de8:	bd38      	pop	{r3, r4, r5, pc}
   83dea:	6823      	ldr	r3, [r4, #0]
   83dec:	2b00      	cmp	r3, #0
   83dee:	d0fb      	beq.n	83de8 <_close_r+0x14>
   83df0:	602b      	str	r3, [r5, #0]
   83df2:	bd38      	pop	{r3, r4, r5, pc}
   83df4:	20071c80 	.word	0x20071c80

00083df8 <_fclose_r>:
   83df8:	b570      	push	{r4, r5, r6, lr}
   83dfa:	b159      	cbz	r1, 83e14 <_fclose_r+0x1c>
   83dfc:	4605      	mov	r5, r0
   83dfe:	460c      	mov	r4, r1
   83e00:	b110      	cbz	r0, 83e08 <_fclose_r+0x10>
   83e02:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83e04:	2b00      	cmp	r3, #0
   83e06:	d03c      	beq.n	83e82 <_fclose_r+0x8a>
   83e08:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83e0a:	07d8      	lsls	r0, r3, #31
   83e0c:	d505      	bpl.n	83e1a <_fclose_r+0x22>
   83e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e12:	b92b      	cbnz	r3, 83e20 <_fclose_r+0x28>
   83e14:	2600      	movs	r6, #0
   83e16:	4630      	mov	r0, r6
   83e18:	bd70      	pop	{r4, r5, r6, pc}
   83e1a:	89a3      	ldrh	r3, [r4, #12]
   83e1c:	0599      	lsls	r1, r3, #22
   83e1e:	d53c      	bpl.n	83e9a <_fclose_r+0xa2>
   83e20:	4621      	mov	r1, r4
   83e22:	4628      	mov	r0, r5
   83e24:	f7fe fba8 	bl	82578 <__sflush_r>
   83e28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83e2a:	4606      	mov	r6, r0
   83e2c:	b133      	cbz	r3, 83e3c <_fclose_r+0x44>
   83e2e:	69e1      	ldr	r1, [r4, #28]
   83e30:	4628      	mov	r0, r5
   83e32:	4798      	blx	r3
   83e34:	2800      	cmp	r0, #0
   83e36:	bfb8      	it	lt
   83e38:	f04f 36ff 	movlt.w	r6, #4294967295
   83e3c:	89a3      	ldrh	r3, [r4, #12]
   83e3e:	061a      	lsls	r2, r3, #24
   83e40:	d422      	bmi.n	83e88 <_fclose_r+0x90>
   83e42:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83e44:	b141      	cbz	r1, 83e58 <_fclose_r+0x60>
   83e46:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83e4a:	4299      	cmp	r1, r3
   83e4c:	d002      	beq.n	83e54 <_fclose_r+0x5c>
   83e4e:	4628      	mov	r0, r5
   83e50:	f7fe fdac 	bl	829ac <_free_r>
   83e54:	2300      	movs	r3, #0
   83e56:	6323      	str	r3, [r4, #48]	; 0x30
   83e58:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83e5a:	b121      	cbz	r1, 83e66 <_fclose_r+0x6e>
   83e5c:	4628      	mov	r0, r5
   83e5e:	f7fe fda5 	bl	829ac <_free_r>
   83e62:	2300      	movs	r3, #0
   83e64:	6463      	str	r3, [r4, #68]	; 0x44
   83e66:	f7fe fcab 	bl	827c0 <__sfp_lock_acquire>
   83e6a:	2200      	movs	r2, #0
   83e6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83e6e:	81a2      	strh	r2, [r4, #12]
   83e70:	07db      	lsls	r3, r3, #31
   83e72:	d50e      	bpl.n	83e92 <_fclose_r+0x9a>
   83e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e76:	f7ff f831 	bl	82edc <__retarget_lock_close_recursive>
   83e7a:	f7fe fca7 	bl	827cc <__sfp_lock_release>
   83e7e:	4630      	mov	r0, r6
   83e80:	bd70      	pop	{r4, r5, r6, pc}
   83e82:	f7fe fc6d 	bl	82760 <__sinit>
   83e86:	e7bf      	b.n	83e08 <_fclose_r+0x10>
   83e88:	6921      	ldr	r1, [r4, #16]
   83e8a:	4628      	mov	r0, r5
   83e8c:	f7fe fd8e 	bl	829ac <_free_r>
   83e90:	e7d7      	b.n	83e42 <_fclose_r+0x4a>
   83e92:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e94:	f7ff f826 	bl	82ee4 <__retarget_lock_release_recursive>
   83e98:	e7ec      	b.n	83e74 <_fclose_r+0x7c>
   83e9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e9c:	f7ff f820 	bl	82ee0 <__retarget_lock_acquire_recursive>
   83ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ea4:	2b00      	cmp	r3, #0
   83ea6:	d1bb      	bne.n	83e20 <_fclose_r+0x28>
   83ea8:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83eaa:	f016 0601 	ands.w	r6, r6, #1
   83eae:	d1b1      	bne.n	83e14 <_fclose_r+0x1c>
   83eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83eb2:	f7ff f817 	bl	82ee4 <__retarget_lock_release_recursive>
   83eb6:	4630      	mov	r0, r6
   83eb8:	bd70      	pop	{r4, r5, r6, pc}
   83eba:	bf00      	nop

00083ebc <_fstat_r>:
   83ebc:	b570      	push	{r4, r5, r6, lr}
   83ebe:	460d      	mov	r5, r1
   83ec0:	2300      	movs	r3, #0
   83ec2:	4c07      	ldr	r4, [pc, #28]	; (83ee0 <_fstat_r+0x24>)
   83ec4:	4606      	mov	r6, r0
   83ec6:	4611      	mov	r1, r2
   83ec8:	4628      	mov	r0, r5
   83eca:	6023      	str	r3, [r4, #0]
   83ecc:	f7fc fe9f 	bl	80c0e <_fstat>
   83ed0:	1c43      	adds	r3, r0, #1
   83ed2:	d000      	beq.n	83ed6 <_fstat_r+0x1a>
   83ed4:	bd70      	pop	{r4, r5, r6, pc}
   83ed6:	6823      	ldr	r3, [r4, #0]
   83ed8:	2b00      	cmp	r3, #0
   83eda:	d0fb      	beq.n	83ed4 <_fstat_r+0x18>
   83edc:	6033      	str	r3, [r6, #0]
   83ede:	bd70      	pop	{r4, r5, r6, pc}
   83ee0:	20071c80 	.word	0x20071c80

00083ee4 <_isatty_r>:
   83ee4:	b538      	push	{r3, r4, r5, lr}
   83ee6:	2300      	movs	r3, #0
   83ee8:	4c06      	ldr	r4, [pc, #24]	; (83f04 <_isatty_r+0x20>)
   83eea:	4605      	mov	r5, r0
   83eec:	4608      	mov	r0, r1
   83eee:	6023      	str	r3, [r4, #0]
   83ef0:	f7fc fe92 	bl	80c18 <_isatty>
   83ef4:	1c43      	adds	r3, r0, #1
   83ef6:	d000      	beq.n	83efa <_isatty_r+0x16>
   83ef8:	bd38      	pop	{r3, r4, r5, pc}
   83efa:	6823      	ldr	r3, [r4, #0]
   83efc:	2b00      	cmp	r3, #0
   83efe:	d0fb      	beq.n	83ef8 <_isatty_r+0x14>
   83f00:	602b      	str	r3, [r5, #0]
   83f02:	bd38      	pop	{r3, r4, r5, pc}
   83f04:	20071c80 	.word	0x20071c80

00083f08 <_lseek_r>:
   83f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f0a:	460e      	mov	r6, r1
   83f0c:	2500      	movs	r5, #0
   83f0e:	4c08      	ldr	r4, [pc, #32]	; (83f30 <_lseek_r+0x28>)
   83f10:	4611      	mov	r1, r2
   83f12:	4607      	mov	r7, r0
   83f14:	461a      	mov	r2, r3
   83f16:	4630      	mov	r0, r6
   83f18:	6025      	str	r5, [r4, #0]
   83f1a:	f7fc fe7f 	bl	80c1c <_lseek>
   83f1e:	1c43      	adds	r3, r0, #1
   83f20:	d000      	beq.n	83f24 <_lseek_r+0x1c>
   83f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f24:	6823      	ldr	r3, [r4, #0]
   83f26:	2b00      	cmp	r3, #0
   83f28:	d0fb      	beq.n	83f22 <_lseek_r+0x1a>
   83f2a:	603b      	str	r3, [r7, #0]
   83f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f2e:	bf00      	nop
   83f30:	20071c80 	.word	0x20071c80

00083f34 <_read_r>:
   83f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f36:	460e      	mov	r6, r1
   83f38:	2500      	movs	r5, #0
   83f3a:	4c08      	ldr	r4, [pc, #32]	; (83f5c <_read_r+0x28>)
   83f3c:	4611      	mov	r1, r2
   83f3e:	4607      	mov	r7, r0
   83f40:	461a      	mov	r2, r3
   83f42:	4630      	mov	r0, r6
   83f44:	6025      	str	r5, [r4, #0]
   83f46:	f7fc f9dd 	bl	80304 <_read>
   83f4a:	1c43      	adds	r3, r0, #1
   83f4c:	d000      	beq.n	83f50 <_read_r+0x1c>
   83f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f50:	6823      	ldr	r3, [r4, #0]
   83f52:	2b00      	cmp	r3, #0
   83f54:	d0fb      	beq.n	83f4e <_read_r+0x1a>
   83f56:	603b      	str	r3, [r7, #0]
   83f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f5a:	bf00      	nop
   83f5c:	20071c80 	.word	0x20071c80

00083f60 <__aeabi_uldivmod>:
   83f60:	b953      	cbnz	r3, 83f78 <__aeabi_uldivmod+0x18>
   83f62:	b94a      	cbnz	r2, 83f78 <__aeabi_uldivmod+0x18>
   83f64:	2900      	cmp	r1, #0
   83f66:	bf08      	it	eq
   83f68:	2800      	cmpeq	r0, #0
   83f6a:	bf1c      	itt	ne
   83f6c:	f04f 31ff 	movne.w	r1, #4294967295
   83f70:	f04f 30ff 	movne.w	r0, #4294967295
   83f74:	f000 b97a 	b.w	8426c <__aeabi_idiv0>
   83f78:	f1ad 0c08 	sub.w	ip, sp, #8
   83f7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83f80:	f000 f806 	bl	83f90 <__udivmoddi4>
   83f84:	f8dd e004 	ldr.w	lr, [sp, #4]
   83f88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83f8c:	b004      	add	sp, #16
   83f8e:	4770      	bx	lr

00083f90 <__udivmoddi4>:
   83f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83f94:	468c      	mov	ip, r1
   83f96:	460e      	mov	r6, r1
   83f98:	4604      	mov	r4, r0
   83f9a:	9d08      	ldr	r5, [sp, #32]
   83f9c:	2b00      	cmp	r3, #0
   83f9e:	d150      	bne.n	84042 <__udivmoddi4+0xb2>
   83fa0:	428a      	cmp	r2, r1
   83fa2:	4617      	mov	r7, r2
   83fa4:	d96c      	bls.n	84080 <__udivmoddi4+0xf0>
   83fa6:	fab2 fe82 	clz	lr, r2
   83faa:	f1be 0f00 	cmp.w	lr, #0
   83fae:	d00b      	beq.n	83fc8 <__udivmoddi4+0x38>
   83fb0:	f1ce 0c20 	rsb	ip, lr, #32
   83fb4:	fa01 f60e 	lsl.w	r6, r1, lr
   83fb8:	fa20 fc0c 	lsr.w	ip, r0, ip
   83fbc:	fa02 f70e 	lsl.w	r7, r2, lr
   83fc0:	ea4c 0c06 	orr.w	ip, ip, r6
   83fc4:	fa00 f40e 	lsl.w	r4, r0, lr
   83fc8:	0c3a      	lsrs	r2, r7, #16
   83fca:	fbbc f9f2 	udiv	r9, ip, r2
   83fce:	b2bb      	uxth	r3, r7
   83fd0:	fb02 cc19 	mls	ip, r2, r9, ip
   83fd4:	fb09 fa03 	mul.w	sl, r9, r3
   83fd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83fdc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83fe0:	45b2      	cmp	sl, r6
   83fe2:	d90a      	bls.n	83ffa <__udivmoddi4+0x6a>
   83fe4:	19f6      	adds	r6, r6, r7
   83fe6:	f109 31ff 	add.w	r1, r9, #4294967295
   83fea:	f080 8125 	bcs.w	84238 <__udivmoddi4+0x2a8>
   83fee:	45b2      	cmp	sl, r6
   83ff0:	f240 8122 	bls.w	84238 <__udivmoddi4+0x2a8>
   83ff4:	f1a9 0902 	sub.w	r9, r9, #2
   83ff8:	443e      	add	r6, r7
   83ffa:	eba6 060a 	sub.w	r6, r6, sl
   83ffe:	fbb6 f0f2 	udiv	r0, r6, r2
   84002:	fb02 6610 	mls	r6, r2, r0, r6
   84006:	fb00 f303 	mul.w	r3, r0, r3
   8400a:	b2a4      	uxth	r4, r4
   8400c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   84010:	42a3      	cmp	r3, r4
   84012:	d909      	bls.n	84028 <__udivmoddi4+0x98>
   84014:	19e4      	adds	r4, r4, r7
   84016:	f100 32ff 	add.w	r2, r0, #4294967295
   8401a:	f080 810b 	bcs.w	84234 <__udivmoddi4+0x2a4>
   8401e:	42a3      	cmp	r3, r4
   84020:	f240 8108 	bls.w	84234 <__udivmoddi4+0x2a4>
   84024:	3802      	subs	r0, #2
   84026:	443c      	add	r4, r7
   84028:	2100      	movs	r1, #0
   8402a:	1ae4      	subs	r4, r4, r3
   8402c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84030:	2d00      	cmp	r5, #0
   84032:	d062      	beq.n	840fa <__udivmoddi4+0x16a>
   84034:	2300      	movs	r3, #0
   84036:	fa24 f40e 	lsr.w	r4, r4, lr
   8403a:	602c      	str	r4, [r5, #0]
   8403c:	606b      	str	r3, [r5, #4]
   8403e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84042:	428b      	cmp	r3, r1
   84044:	d907      	bls.n	84056 <__udivmoddi4+0xc6>
   84046:	2d00      	cmp	r5, #0
   84048:	d055      	beq.n	840f6 <__udivmoddi4+0x166>
   8404a:	2100      	movs	r1, #0
   8404c:	e885 0041 	stmia.w	r5, {r0, r6}
   84050:	4608      	mov	r0, r1
   84052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84056:	fab3 f183 	clz	r1, r3
   8405a:	2900      	cmp	r1, #0
   8405c:	f040 808f 	bne.w	8417e <__udivmoddi4+0x1ee>
   84060:	42b3      	cmp	r3, r6
   84062:	d302      	bcc.n	8406a <__udivmoddi4+0xda>
   84064:	4282      	cmp	r2, r0
   84066:	f200 80fc 	bhi.w	84262 <__udivmoddi4+0x2d2>
   8406a:	1a84      	subs	r4, r0, r2
   8406c:	eb66 0603 	sbc.w	r6, r6, r3
   84070:	2001      	movs	r0, #1
   84072:	46b4      	mov	ip, r6
   84074:	2d00      	cmp	r5, #0
   84076:	d040      	beq.n	840fa <__udivmoddi4+0x16a>
   84078:	e885 1010 	stmia.w	r5, {r4, ip}
   8407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84080:	b912      	cbnz	r2, 84088 <__udivmoddi4+0xf8>
   84082:	2701      	movs	r7, #1
   84084:	fbb7 f7f2 	udiv	r7, r7, r2
   84088:	fab7 fe87 	clz	lr, r7
   8408c:	f1be 0f00 	cmp.w	lr, #0
   84090:	d135      	bne.n	840fe <__udivmoddi4+0x16e>
   84092:	2101      	movs	r1, #1
   84094:	1bf6      	subs	r6, r6, r7
   84096:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8409a:	fa1f f887 	uxth.w	r8, r7
   8409e:	fbb6 f2fc 	udiv	r2, r6, ip
   840a2:	fb0c 6612 	mls	r6, ip, r2, r6
   840a6:	fb08 f002 	mul.w	r0, r8, r2
   840aa:	0c23      	lsrs	r3, r4, #16
   840ac:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   840b0:	42b0      	cmp	r0, r6
   840b2:	d907      	bls.n	840c4 <__udivmoddi4+0x134>
   840b4:	19f6      	adds	r6, r6, r7
   840b6:	f102 33ff 	add.w	r3, r2, #4294967295
   840ba:	d202      	bcs.n	840c2 <__udivmoddi4+0x132>
   840bc:	42b0      	cmp	r0, r6
   840be:	f200 80d2 	bhi.w	84266 <__udivmoddi4+0x2d6>
   840c2:	461a      	mov	r2, r3
   840c4:	1a36      	subs	r6, r6, r0
   840c6:	fbb6 f0fc 	udiv	r0, r6, ip
   840ca:	fb0c 6610 	mls	r6, ip, r0, r6
   840ce:	fb08 f800 	mul.w	r8, r8, r0
   840d2:	b2a3      	uxth	r3, r4
   840d4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   840d8:	45a0      	cmp	r8, r4
   840da:	d907      	bls.n	840ec <__udivmoddi4+0x15c>
   840dc:	19e4      	adds	r4, r4, r7
   840de:	f100 33ff 	add.w	r3, r0, #4294967295
   840e2:	d202      	bcs.n	840ea <__udivmoddi4+0x15a>
   840e4:	45a0      	cmp	r8, r4
   840e6:	f200 80b9 	bhi.w	8425c <__udivmoddi4+0x2cc>
   840ea:	4618      	mov	r0, r3
   840ec:	eba4 0408 	sub.w	r4, r4, r8
   840f0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   840f4:	e79c      	b.n	84030 <__udivmoddi4+0xa0>
   840f6:	4629      	mov	r1, r5
   840f8:	4628      	mov	r0, r5
   840fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   840fe:	fa07 f70e 	lsl.w	r7, r7, lr
   84102:	f1ce 0320 	rsb	r3, lr, #32
   84106:	fa26 f203 	lsr.w	r2, r6, r3
   8410a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8410e:	fbb2 f1fc 	udiv	r1, r2, ip
   84112:	fa1f f887 	uxth.w	r8, r7
   84116:	fb0c 2211 	mls	r2, ip, r1, r2
   8411a:	fa06 f60e 	lsl.w	r6, r6, lr
   8411e:	fa20 f303 	lsr.w	r3, r0, r3
   84122:	fb01 f908 	mul.w	r9, r1, r8
   84126:	4333      	orrs	r3, r6
   84128:	0c1e      	lsrs	r6, r3, #16
   8412a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8412e:	45b1      	cmp	r9, r6
   84130:	fa00 f40e 	lsl.w	r4, r0, lr
   84134:	d909      	bls.n	8414a <__udivmoddi4+0x1ba>
   84136:	19f6      	adds	r6, r6, r7
   84138:	f101 32ff 	add.w	r2, r1, #4294967295
   8413c:	f080 808c 	bcs.w	84258 <__udivmoddi4+0x2c8>
   84140:	45b1      	cmp	r9, r6
   84142:	f240 8089 	bls.w	84258 <__udivmoddi4+0x2c8>
   84146:	3902      	subs	r1, #2
   84148:	443e      	add	r6, r7
   8414a:	eba6 0609 	sub.w	r6, r6, r9
   8414e:	fbb6 f0fc 	udiv	r0, r6, ip
   84152:	fb0c 6210 	mls	r2, ip, r0, r6
   84156:	fb00 f908 	mul.w	r9, r0, r8
   8415a:	b29e      	uxth	r6, r3
   8415c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   84160:	45b1      	cmp	r9, r6
   84162:	d907      	bls.n	84174 <__udivmoddi4+0x1e4>
   84164:	19f6      	adds	r6, r6, r7
   84166:	f100 33ff 	add.w	r3, r0, #4294967295
   8416a:	d271      	bcs.n	84250 <__udivmoddi4+0x2c0>
   8416c:	45b1      	cmp	r9, r6
   8416e:	d96f      	bls.n	84250 <__udivmoddi4+0x2c0>
   84170:	3802      	subs	r0, #2
   84172:	443e      	add	r6, r7
   84174:	eba6 0609 	sub.w	r6, r6, r9
   84178:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   8417c:	e78f      	b.n	8409e <__udivmoddi4+0x10e>
   8417e:	f1c1 0720 	rsb	r7, r1, #32
   84182:	fa22 f807 	lsr.w	r8, r2, r7
   84186:	408b      	lsls	r3, r1
   84188:	ea48 0303 	orr.w	r3, r8, r3
   8418c:	fa26 f407 	lsr.w	r4, r6, r7
   84190:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   84194:	fbb4 f9fe 	udiv	r9, r4, lr
   84198:	fa1f fc83 	uxth.w	ip, r3
   8419c:	fb0e 4419 	mls	r4, lr, r9, r4
   841a0:	408e      	lsls	r6, r1
   841a2:	fa20 f807 	lsr.w	r8, r0, r7
   841a6:	fb09 fa0c 	mul.w	sl, r9, ip
   841aa:	ea48 0806 	orr.w	r8, r8, r6
   841ae:	ea4f 4618 	mov.w	r6, r8, lsr #16
   841b2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   841b6:	45a2      	cmp	sl, r4
   841b8:	fa02 f201 	lsl.w	r2, r2, r1
   841bc:	fa00 f601 	lsl.w	r6, r0, r1
   841c0:	d908      	bls.n	841d4 <__udivmoddi4+0x244>
   841c2:	18e4      	adds	r4, r4, r3
   841c4:	f109 30ff 	add.w	r0, r9, #4294967295
   841c8:	d244      	bcs.n	84254 <__udivmoddi4+0x2c4>
   841ca:	45a2      	cmp	sl, r4
   841cc:	d942      	bls.n	84254 <__udivmoddi4+0x2c4>
   841ce:	f1a9 0902 	sub.w	r9, r9, #2
   841d2:	441c      	add	r4, r3
   841d4:	eba4 040a 	sub.w	r4, r4, sl
   841d8:	fbb4 f0fe 	udiv	r0, r4, lr
   841dc:	fb0e 4410 	mls	r4, lr, r0, r4
   841e0:	fb00 fc0c 	mul.w	ip, r0, ip
   841e4:	fa1f f888 	uxth.w	r8, r8
   841e8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   841ec:	45a4      	cmp	ip, r4
   841ee:	d907      	bls.n	84200 <__udivmoddi4+0x270>
   841f0:	18e4      	adds	r4, r4, r3
   841f2:	f100 3eff 	add.w	lr, r0, #4294967295
   841f6:	d229      	bcs.n	8424c <__udivmoddi4+0x2bc>
   841f8:	45a4      	cmp	ip, r4
   841fa:	d927      	bls.n	8424c <__udivmoddi4+0x2bc>
   841fc:	3802      	subs	r0, #2
   841fe:	441c      	add	r4, r3
   84200:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84204:	fba0 8902 	umull	r8, r9, r0, r2
   84208:	eba4 0c0c 	sub.w	ip, r4, ip
   8420c:	45cc      	cmp	ip, r9
   8420e:	46c2      	mov	sl, r8
   84210:	46ce      	mov	lr, r9
   84212:	d315      	bcc.n	84240 <__udivmoddi4+0x2b0>
   84214:	d012      	beq.n	8423c <__udivmoddi4+0x2ac>
   84216:	b155      	cbz	r5, 8422e <__udivmoddi4+0x29e>
   84218:	ebb6 030a 	subs.w	r3, r6, sl
   8421c:	eb6c 060e 	sbc.w	r6, ip, lr
   84220:	fa06 f707 	lsl.w	r7, r6, r7
   84224:	40cb      	lsrs	r3, r1
   84226:	431f      	orrs	r7, r3
   84228:	40ce      	lsrs	r6, r1
   8422a:	602f      	str	r7, [r5, #0]
   8422c:	606e      	str	r6, [r5, #4]
   8422e:	2100      	movs	r1, #0
   84230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84234:	4610      	mov	r0, r2
   84236:	e6f7      	b.n	84028 <__udivmoddi4+0x98>
   84238:	4689      	mov	r9, r1
   8423a:	e6de      	b.n	83ffa <__udivmoddi4+0x6a>
   8423c:	4546      	cmp	r6, r8
   8423e:	d2ea      	bcs.n	84216 <__udivmoddi4+0x286>
   84240:	ebb8 0a02 	subs.w	sl, r8, r2
   84244:	eb69 0e03 	sbc.w	lr, r9, r3
   84248:	3801      	subs	r0, #1
   8424a:	e7e4      	b.n	84216 <__udivmoddi4+0x286>
   8424c:	4670      	mov	r0, lr
   8424e:	e7d7      	b.n	84200 <__udivmoddi4+0x270>
   84250:	4618      	mov	r0, r3
   84252:	e78f      	b.n	84174 <__udivmoddi4+0x1e4>
   84254:	4681      	mov	r9, r0
   84256:	e7bd      	b.n	841d4 <__udivmoddi4+0x244>
   84258:	4611      	mov	r1, r2
   8425a:	e776      	b.n	8414a <__udivmoddi4+0x1ba>
   8425c:	3802      	subs	r0, #2
   8425e:	443c      	add	r4, r7
   84260:	e744      	b.n	840ec <__udivmoddi4+0x15c>
   84262:	4608      	mov	r0, r1
   84264:	e706      	b.n	84074 <__udivmoddi4+0xe4>
   84266:	3a02      	subs	r2, #2
   84268:	443e      	add	r6, r7
   8426a:	e72b      	b.n	840c4 <__udivmoddi4+0x134>

0008426c <__aeabi_idiv0>:
   8426c:	4770      	bx	lr
   8426e:	bf00      	nop
   84270:	66667542 	.word	0x66667542
   84274:	76207265 	.word	0x76207265
   84278:	65756c61 	.word	0x65756c61
   8427c:	25203a73 	.word	0x25203a73
   84280:	69202c75 	.word	0x69202c75
   84284:	7865646e 	.word	0x7865646e
   84288:	7525203a 	.word	0x7525203a
   8428c:	0000000a 	.word	0x0000000a
   84290:	706d6554 	.word	0x706d6554
   84294:	66756220 	.word	0x66756220
   84298:	3a726566 	.word	0x3a726566
   8429c:	2c752520 	.word	0x2c752520
   842a0:	646e6920 	.word	0x646e6920
   842a4:	203a7865 	.word	0x203a7865
   842a8:	000a7525 	.word	0x000a7525
   842ac:	736e6f43 	.word	0x736e6f43
   842b0:	20656c6f 	.word	0x20656c6f
   842b4:	64616572 	.word	0x64616572
   842b8:	00000a79 	.word	0x00000a79
   842bc:	3d3d3d3d 	.word	0x3d3d3d3d
   842c0:	3d3d3d3d 	.word	0x3d3d3d3d
   842c4:	3d3d3d3d 	.word	0x3d3d3d3d
   842c8:	00000a3d 	.word	0x00000a3d
   842cc:	6c706d41 	.word	0x6c706d41
   842d0:	64757469 	.word	0x64757469
   842d4:	656c2065 	.word	0x656c2065
   842d8:	206c6576 	.word	0x206c6576
   842dc:	65746564 	.word	0x65746564
   842e0:	64657463 	.word	0x64657463
   842e4:	00000000 	.word	0x00000000
   842e8:	2d2d2d2d 	.word	0x2d2d2d2d
   842ec:	45204f4e 	.word	0x45204f4e
   842f0:	2d454744 	.word	0x2d454744
   842f4:	002d2d2d 	.word	0x002d2d2d

000842f8 <_global_impure_ptr>:
   842f8:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   84308:	46454443 00000000 33323130 37363534     CDEF....01234567
   84318:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84328:	0000296c                                l)..

0008432c <blanks.7217>:
   8432c:	20202020 20202020 20202020 20202020                     

0008433c <zeroes.7218>:
   8433c:	30303030 30303030 30303030 30303030     0000000000000000
   8434c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008435c <_ctype_>:
   8435c:	20202000 20202020 28282020 20282828     .         ((((( 
   8436c:	20202020 20202020 20202020 20202020                     
   8437c:	10108820 10101010 10101010 10101010      ...............
   8438c:	04040410 04040404 10040404 10101010     ................
   8439c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   843ac:	01010101 01010101 01010101 10101010     ................
   843bc:	42421010 42424242 02020202 02020202     ..BBBBBB........
   843cc:	02020202 02020202 02020202 10101010     ................
   843dc:	00000020 00000000 00000000 00000000      ...............
	...

00084460 <_init>:
   84460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84462:	bf00      	nop
   84464:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84466:	bc08      	pop	{r3}
   84468:	469e      	mov	lr, r3
   8446a:	4770      	bx	lr

0008446c <__init_array_start>:
   8446c:	00082559 	.word	0x00082559

00084470 <__frame_dummy_init_array_entry>:
   84470:	00080119                                ....

00084474 <_fini>:
   84474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84476:	bf00      	nop
   84478:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8447a:	bc08      	pop	{r3}
   8447c:	469e      	mov	lr, r3
   8447e:	4770      	bx	lr

00084480 <__fini_array_start>:
   84480:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20071c5c                                \.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00083ccd 0008352d 00000000 0008435c     .<..-5......\C..
20070654:	00084358 0008430c 0008430c 0008430c     XC...C...C...C..
20070664:	0008430c 0008430c 0008430c 0008430c     .C...C...C...C..
20070674:	0008430c 0008430c ffffffff ffffffff     .C...C..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
