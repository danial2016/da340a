
DueProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048b4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000848b4  000848b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  000848bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001204  20070ae0  0008539c  00020ae0  2**2
                  ALLOC
  4 .stack        00002004  20071ce4  000865a0  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c079  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003f92  00000000  00000000  0003cbdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000530e  00000000  00000000  00040b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c78  00000000  00000000  00045e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000bb0  00000000  00000000  00046af3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a2ab  00000000  00000000  000476a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000136ed  00000000  00000000  0005194e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00066183  00000000  00000000  0006503b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000287c  00000000  00000000  000cb1c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	e8 3c 07 20 31 0e 08 00 2d 0e 08 00 2d 0e 08 00     .<. 1...-...-...
   80010:	2d 0e 08 00 2d 0e 08 00 2d 0e 08 00 00 00 00 00     -...-...-.......
	...
   8002c:	2d 0e 08 00 2d 0e 08 00 00 00 00 00 2d 0e 08 00     -...-.......-...
   8003c:	2d 0e 08 00 2d 0e 08 00 2d 0e 08 00 2d 0e 08 00     -...-...-...-...
   8004c:	2d 0e 08 00 2d 0e 08 00 2d 0e 08 00 2d 0e 08 00     -...-...-...-...
   8005c:	2d 0e 08 00 2d 0e 08 00 2d 0e 08 00 00 00 00 00     -...-...-.......
   8006c:	a1 0c 08 00 b5 0c 08 00 c9 0c 08 00 dd 0c 08 00     ................
	...
   80084:	c9 06 08 00 2d 0e 08 00 2d 0e 08 00 2d 0e 08 00     ....-...-...-...
   80094:	2d 0e 08 00 2d 0e 08 00 2d 0e 08 00 2d 0e 08 00     -...-...-...-...
   800a4:	00 00 00 00 2d 0e 08 00 ed 01 08 00 2d 0e 08 00     ....-.......-...
   800b4:	2d 0e 08 00 2d 0e 08 00 2d 0e 08 00 2d 0e 08 00     -...-...-...-...
   800c4:	2d 0e 08 00 2d 0e 08 00 2d 0e 08 00 2d 0e 08 00     -...-...-...-...
   800d4:	f5 04 08 00 2d 0e 08 00 2d 0e 08 00 2d 0e 08 00     ....-...-...-...
   800e4:	2d 0e 08 00 2d 0e 08 00 2d 0e 08 00 2d 0e 08 00     -...-...-...-...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	000848bc 	.word	0x000848bc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000848bc 	.word	0x000848bc
   80154:	20070ae4 	.word	0x20070ae4
   80158:	000848bc 	.word	0x000848bc
   8015c:	00000000 	.word	0x00000000

00080160 <pin_high_pulse_handler>:
 * value of a cycle. The frequency is the inverse of a the length of period.
 */
void pin_high_pulse_handler(const uint32_t id, const uint32_t index)
{
	static uint32_t frequency = 0;
	if ((id == ID_PIOA) && (index == PIO_PA14)){
   80160:	280b      	cmp	r0, #11
   80162:	d000      	beq.n	80166 <pin_high_pulse_handler+0x6>
   80164:	4770      	bx	lr
   80166:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   8016a:	d1fb      	bne.n	80164 <pin_high_pulse_handler+0x4>
{
   8016c:	b510      	push	{r4, lr}
		if (pio_get(PIOA, PIO_TYPE_PIO_INPUT, PIO_PA14))
   8016e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80172:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80176:	4813      	ldr	r0, [pc, #76]	; (801c4 <pin_high_pulse_handler+0x64>)
   80178:	4b13      	ldr	r3, [pc, #76]	; (801c8 <pin_high_pulse_handler+0x68>)
   8017a:	4798      	blx	r3
   8017c:	b1a8      	cbz	r0, 801aa <pin_high_pulse_handler+0x4a>
		{
			if (edges < TC_VALUES)
   8017e:	4b13      	ldr	r3, [pc, #76]	; (801cc <pin_high_pulse_handler+0x6c>)
   80180:	681c      	ldr	r4, [r3, #0]
   80182:	2c0e      	cmp	r4, #14
   80184:	d912      	bls.n	801ac <pin_high_pulse_handler+0x4c>
				tc_values[edges] = tc_read_cv(TC1, 1);
				edges++;
			}
			else
			{
				uint32_t top_to_low = tc_values[TC_VALUES-1]-tc_values[0];
   80186:	4a12      	ldr	r2, [pc, #72]	; (801d0 <pin_high_pulse_handler+0x70>)
   80188:	6b93      	ldr	r3, [r2, #56]	; 0x38
   8018a:	6812      	ldr	r2, [r2, #0]
   8018c:	1a9b      	subs	r3, r3, r2
				edges = 0;
   8018e:	2100      	movs	r1, #0
   80190:	4a0e      	ldr	r2, [pc, #56]	; (801cc <pin_high_pulse_handler+0x6c>)
   80192:	6011      	str	r1, [r2, #0]
				frequency = 42000000/(top_to_low/(TC_VALUES-1));
   80194:	085b      	lsrs	r3, r3, #1
   80196:	490f      	ldr	r1, [pc, #60]	; (801d4 <pin_high_pulse_handler+0x74>)
   80198:	fba1 2303 	umull	r2, r3, r1, r3
   8019c:	089b      	lsrs	r3, r3, #2
				printf("Frequency: %lu Hz\n", frequency);
   8019e:	490e      	ldr	r1, [pc, #56]	; (801d8 <pin_high_pulse_handler+0x78>)
   801a0:	fbb1 f1f3 	udiv	r1, r1, r3
   801a4:	480d      	ldr	r0, [pc, #52]	; (801dc <pin_high_pulse_handler+0x7c>)
   801a6:	4b0e      	ldr	r3, [pc, #56]	; (801e0 <pin_high_pulse_handler+0x80>)
   801a8:	4798      	blx	r3
   801aa:	bd10      	pop	{r4, pc}
				tc_values[edges] = tc_read_cv(TC1, 1);
   801ac:	2101      	movs	r1, #1
   801ae:	480d      	ldr	r0, [pc, #52]	; (801e4 <pin_high_pulse_handler+0x84>)
   801b0:	4b0d      	ldr	r3, [pc, #52]	; (801e8 <pin_high_pulse_handler+0x88>)
   801b2:	4798      	blx	r3
   801b4:	4b06      	ldr	r3, [pc, #24]	; (801d0 <pin_high_pulse_handler+0x70>)
   801b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
				edges++;
   801ba:	4a04      	ldr	r2, [pc, #16]	; (801cc <pin_high_pulse_handler+0x6c>)
   801bc:	6813      	ldr	r3, [r2, #0]
   801be:	3301      	adds	r3, #1
   801c0:	6013      	str	r3, [r2, #0]
   801c2:	bd10      	pop	{r4, pc}
   801c4:	400e0e00 	.word	0x400e0e00
   801c8:	00080987 	.word	0x00080987
   801cc:	20070afc 	.word	0x20070afc
   801d0:	20070c60 	.word	0x20070c60
   801d4:	92492493 	.word	0x92492493
   801d8:	0280de80 	.word	0x0280de80
   801dc:	000846d0 	.word	0x000846d0
   801e0:	000817f5 	.word	0x000817f5
   801e4:	40084000 	.word	0x40084000
   801e8:	0008067b 	.word	0x0008067b

000801ec <TC0_Handler>:
{
   801ec:	b500      	push	{lr}
   801ee:	b083      	sub	sp, #12
	ul_dummy = tc_get_status(TC0, 0);	//The compare bit is cleared by reading the register, manual p. 915
   801f0:	2100      	movs	r1, #0
   801f2:	4805      	ldr	r0, [pc, #20]	; (80208 <TC0_Handler+0x1c>)
   801f4:	4b05      	ldr	r3, [pc, #20]	; (8020c <TC0_Handler+0x20>)
   801f6:	4798      	blx	r3
   801f8:	9001      	str	r0, [sp, #4]
	UNUSED(ul_dummy);
   801fa:	9b01      	ldr	r3, [sp, #4]
	adc_start(ADC);
   801fc:	4804      	ldr	r0, [pc, #16]	; (80210 <TC0_Handler+0x24>)
   801fe:	4b05      	ldr	r3, [pc, #20]	; (80214 <TC0_Handler+0x28>)
   80200:	4798      	blx	r3
}
   80202:	b003      	add	sp, #12
   80204:	f85d fb04 	ldr.w	pc, [sp], #4
   80208:	40080000 	.word	0x40080000
   8020c:	00080693 	.word	0x00080693
   80210:	400c0000 	.word	0x400c0000
   80214:	0008063b 	.word	0x0008063b

00080218 <init_pulse_pin>:
	}
}


void init_pulse_pin(void)
{
   80218:	b530      	push	{r4, r5, lr}
   8021a:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PIOA);
   8021c:	200b      	movs	r0, #11
   8021e:	4b11      	ldr	r3, [pc, #68]	; (80264 <init_pulse_pin+0x4c>)
   80220:	4798      	blx	r3
	pio_set_input(PIOA, PIO_PA14, PIO_PULLUP); // PA14 = pin 23
   80222:	4c11      	ldr	r4, [pc, #68]	; (80268 <init_pulse_pin+0x50>)
   80224:	2201      	movs	r2, #1
   80226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8022a:	4620      	mov	r0, r4
   8022c:	4b0f      	ldr	r3, [pc, #60]	; (8026c <init_pulse_pin+0x54>)
   8022e:	4798      	blx	r3
	pio_pull_up(PIOA, PIO_PA14, 0); //enable pull-down, when no input then input state is low
   80230:	2200      	movs	r2, #0
   80232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80236:	4620      	mov	r0, r4
   80238:	4b0d      	ldr	r3, [pc, #52]	; (80270 <init_pulse_pin+0x58>)
   8023a:	4798      	blx	r3
	pio_handler_set(PIOA, ID_PIOA, PIO_PA14, PIO_IT_EDGE, pin_high_pulse_handler);
   8023c:	4b0d      	ldr	r3, [pc, #52]	; (80274 <init_pulse_pin+0x5c>)
   8023e:	9300      	str	r3, [sp, #0]
   80240:	2340      	movs	r3, #64	; 0x40
   80242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80246:	210b      	movs	r1, #11
   80248:	4620      	mov	r0, r4
   8024a:	4d0b      	ldr	r5, [pc, #44]	; (80278 <init_pulse_pin+0x60>)
   8024c:	47a8      	blx	r5
	pio_enable_interrupt(PIOA, PIO_PA14);
   8024e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   80252:	4620      	mov	r0, r4
   80254:	4b09      	ldr	r3, [pc, #36]	; (8027c <init_pulse_pin+0x64>)
   80256:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80258:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8025c:	4b08      	ldr	r3, [pc, #32]	; (80280 <init_pulse_pin+0x68>)
   8025e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOA_IRQn);
}
   80260:	b003      	add	sp, #12
   80262:	bd30      	pop	{r4, r5, pc}
   80264:	00080dd9 	.word	0x00080dd9
   80268:	400e0e00 	.word	0x400e0e00
   8026c:	000809dd 	.word	0x000809dd
   80270:	0008097d 	.word	0x0008097d
   80274:	00080161 	.word	0x00080161
   80278:	00080c31 	.word	0x00080c31
   8027c:	00080a63 	.word	0x00080a63
   80280:	e000e100 	.word	0xe000e100

00080284 <TC1_init>:

void TC1_init(void)
{
   80284:	b510      	push	{r4, lr}
	/* Configure power management of timer clocks (ID_TC4 = channel 1 of TC1) */
	pmc_enable_periph_clk(ID_TC4);
   80286:	201f      	movs	r0, #31
   80288:	4b06      	ldr	r3, [pc, #24]	; (802a4 <TC1_init+0x20>)
   8028a:	4798      	blx	r3
	tc_init(TC1, 1, 0 | TC_CMR_CPCTRG);
   8028c:	4c06      	ldr	r4, [pc, #24]	; (802a8 <TC1_init+0x24>)
   8028e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80292:	2101      	movs	r1, #1
   80294:	4620      	mov	r0, r4
   80296:	4b05      	ldr	r3, [pc, #20]	; (802ac <TC1_init+0x28>)
   80298:	4798      	blx	r3
	tc_start(TC1, 1);
   8029a:	2101      	movs	r1, #1
   8029c:	4620      	mov	r0, r4
   8029e:	4b04      	ldr	r3, [pc, #16]	; (802b0 <TC1_init+0x2c>)
   802a0:	4798      	blx	r3
   802a2:	bd10      	pop	{r4, pc}
   802a4:	00080dd9 	.word	0x00080dd9
   802a8:	40084000 	.word	0x40084000
   802ac:	00080653 	.word	0x00080653
   802b0:	0008066b 	.word	0x0008066b

000802b4 <pin_edge_handler>:
#include "configure_tc.h"
#include "amplitude_trigger.h"

void pin_edge_handler(const uint32_t id, const uint32_t index)
{
	if ((id == ID_PIOB) && (index == PIO_PB26)){
   802b4:	280c      	cmp	r0, #12
   802b6:	d000      	beq.n	802ba <pin_edge_handler+0x6>
   802b8:	4770      	bx	lr
   802ba:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
   802be:	d1fb      	bne.n	802b8 <pin_edge_handler+0x4>
{
   802c0:	b508      	push	{r3, lr}
		if (pio_get(PIOB, PIO_TYPE_PIO_INPUT, PIO_PB26)){
   802c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   802c6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   802ca:	480b      	ldr	r0, [pc, #44]	; (802f8 <pin_edge_handler+0x44>)
   802cc:	4b0b      	ldr	r3, [pc, #44]	; (802fc <pin_edge_handler+0x48>)
   802ce:	4798      	blx	r3
   802d0:	b130      	cbz	r0, 802e0 <pin_edge_handler+0x2c>
			//puts("Amplitude level detected");
			
			if(configureDone == 1){ //access external variable, declaration has been done in the included h-file
   802d2:	4b0b      	ldr	r3, [pc, #44]	; (80300 <pin_edge_handler+0x4c>)
   802d4:	681b      	ldr	r3, [r3, #0]
   802d6:	2b01      	cmp	r3, #1
   802d8:	d003      	beq.n	802e2 <pin_edge_handler+0x2e>
				tc_start(TC0, 0);
				pio_disable_interrupt(PIOB, PIO_PB26); //disable interrupt for now
			}
			else{
				puts("Timer has not been configured!");
   802da:	480a      	ldr	r0, [pc, #40]	; (80304 <pin_edge_handler+0x50>)
   802dc:	4b0a      	ldr	r3, [pc, #40]	; (80308 <pin_edge_handler+0x54>)
   802de:	4798      	blx	r3
   802e0:	bd08      	pop	{r3, pc}
				tc_start(TC0, 0);
   802e2:	2100      	movs	r1, #0
   802e4:	4809      	ldr	r0, [pc, #36]	; (8030c <pin_edge_handler+0x58>)
   802e6:	4b0a      	ldr	r3, [pc, #40]	; (80310 <pin_edge_handler+0x5c>)
   802e8:	4798      	blx	r3
				pio_disable_interrupt(PIOB, PIO_PB26); //disable interrupt for now
   802ea:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   802ee:	4802      	ldr	r0, [pc, #8]	; (802f8 <pin_edge_handler+0x44>)
   802f0:	4b08      	ldr	r3, [pc, #32]	; (80314 <pin_edge_handler+0x60>)
   802f2:	4798      	blx	r3
   802f4:	bd08      	pop	{r3, pc}
   802f6:	bf00      	nop
   802f8:	400e1000 	.word	0x400e1000
   802fc:	00080987 	.word	0x00080987
   80300:	20070c24 	.word	0x20070c24
   80304:	000846e4 	.word	0x000846e4
   80308:	00081955 	.word	0x00081955
   8030c:	40080000 	.word	0x40080000
   80310:	0008066b 	.word	0x0008066b
   80314:	00080a67 	.word	0x00080a67

00080318 <init_amplitude_trigger>:
	}
	
}


void init_amplitude_trigger(void){
   80318:	b530      	push	{r4, r5, lr}
   8031a:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PIOB);
   8031c:	200c      	movs	r0, #12
   8031e:	4b11      	ldr	r3, [pc, #68]	; (80364 <init_amplitude_trigger+0x4c>)
   80320:	4798      	blx	r3
	pio_set_input(PIOB, PIO_PB26, PIO_PULLUP);
   80322:	4c11      	ldr	r4, [pc, #68]	; (80368 <init_amplitude_trigger+0x50>)
   80324:	2201      	movs	r2, #1
   80326:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   8032a:	4620      	mov	r0, r4
   8032c:	4b0f      	ldr	r3, [pc, #60]	; (8036c <init_amplitude_trigger+0x54>)
   8032e:	4798      	blx	r3
	pio_pull_up(PIOB, PIO_PB26, 0); //enable pull-down, when no input then input state is low
   80330:	2200      	movs	r2, #0
   80332:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80336:	4620      	mov	r0, r4
   80338:	4b0d      	ldr	r3, [pc, #52]	; (80370 <init_amplitude_trigger+0x58>)
   8033a:	4798      	blx	r3
	pio_handler_set(PIOB, ID_PIOB, PIO_PB26, PIO_IT_EDGE, pin_edge_handler);
   8033c:	4b0d      	ldr	r3, [pc, #52]	; (80374 <init_amplitude_trigger+0x5c>)
   8033e:	9300      	str	r3, [sp, #0]
   80340:	2340      	movs	r3, #64	; 0x40
   80342:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80346:	210c      	movs	r1, #12
   80348:	4620      	mov	r0, r4
   8034a:	4d0b      	ldr	r5, [pc, #44]	; (80378 <init_amplitude_trigger+0x60>)
   8034c:	47a8      	blx	r5
	pio_enable_interrupt(PIOB, PIO_PB26);
   8034e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80352:	4620      	mov	r0, r4
   80354:	4b09      	ldr	r3, [pc, #36]	; (8037c <init_amplitude_trigger+0x64>)
   80356:	4798      	blx	r3
   80358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8035c:	4b08      	ldr	r3, [pc, #32]	; (80380 <init_amplitude_trigger+0x68>)
   8035e:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOB_IRQn);
}
   80360:	b003      	add	sp, #12
   80362:	bd30      	pop	{r4, r5, pc}
   80364:	00080dd9 	.word	0x00080dd9
   80368:	400e1000 	.word	0x400e1000
   8036c:	000809dd 	.word	0x000809dd
   80370:	0008097d 	.word	0x0008097d
   80374:	000802b5 	.word	0x000802b5
   80378:	00080c31 	.word	0x00080c31
   8037c:	00080a63 	.word	0x00080a63
   80380:	e000e100 	.word	0xe000e100

00080384 <smooth_values>:
	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
}

static void smooth_values(uint16_t *buffer)
{
   80384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80388:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
   8038c:	b085      	sub	sp, #20
   8038e:	f1a0 0802 	sub.w	r8, r0, #2
   80392:	f10d 050e 	add.w	r5, sp, #14
   80396:	f50d 5b80 	add.w	fp, sp, #4096	; 0x1000
   8039a:	f10b 0b0e 	add.w	fp, fp, #14
   8039e:	4b20      	ldr	r3, [pc, #128]	; (80420 <smooth_values+0x9c>)
   803a0:	685a      	ldr	r2, [r3, #4]
   803a2:	9200      	str	r2, [sp, #0]
   803a4:	681b      	ldr	r3, [r3, #0]
		for(int k = M-1; k >= 0; k--)
		{
			xbuff[k+1] = xbuff[k];
		}
		invalue = buffer[i];
		xbuff[0] =(float)invalue;
   803a6:	462c      	mov	r4, r5
   803a8:	46c1      	mov	r9, r8
		float sum = 0;
		// Construct sum 
		for(int j = 0; j <= M; j++){
			sum += (xbuff[j]*b[j]);
   803aa:	4f1e      	ldr	r7, [pc, #120]	; (80424 <smooth_values+0xa0>)
   803ac:	4e1e      	ldr	r6, [pc, #120]	; (80428 <smooth_values+0xa4>)
		}
		outvalue = (uint16_t)sum;
   803ae:	f8df a084 	ldr.w	sl, [pc, #132]	; 80434 <smooth_values+0xb0>
   803b2:	9502      	str	r5, [sp, #8]
   803b4:	461d      	mov	r5, r3
   803b6:	f8cd 800c 	str.w	r8, [sp, #12]
   803ba:	e001      	b.n	803c0 <smooth_values+0x3c>
			xbuff[k+1] = xbuff[k];
   803bc:	9500      	str	r5, [sp, #0]
		xbuff[0] =(float)invalue;
   803be:	9d01      	ldr	r5, [sp, #4]
   803c0:	f839 0f02 	ldrh.w	r0, [r9, #2]!
   803c4:	4b19      	ldr	r3, [pc, #100]	; (8042c <smooth_values+0xa8>)
   803c6:	4798      	blx	r3
   803c8:	9001      	str	r0, [sp, #4]
			sum += (xbuff[j]*b[j]);
   803ca:	4919      	ldr	r1, [pc, #100]	; (80430 <smooth_values+0xac>)
   803cc:	47b8      	blx	r7
   803ce:	2100      	movs	r1, #0
   803d0:	47b0      	blx	r6
   803d2:	4680      	mov	r8, r0
   803d4:	4916      	ldr	r1, [pc, #88]	; (80430 <smooth_values+0xac>)
   803d6:	4628      	mov	r0, r5
   803d8:	47b8      	blx	r7
   803da:	4641      	mov	r1, r8
   803dc:	47b0      	blx	r6
   803de:	4680      	mov	r8, r0
   803e0:	4913      	ldr	r1, [pc, #76]	; (80430 <smooth_values+0xac>)
   803e2:	9800      	ldr	r0, [sp, #0]
   803e4:	47b8      	blx	r7
   803e6:	4641      	mov	r1, r8
   803e8:	47b0      	blx	r6
		outvalue = (uint16_t)sum;
   803ea:	47d0      	blx	sl
   803ec:	f824 0f02 	strh.w	r0, [r4, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   803f0:	455c      	cmp	r4, fp
   803f2:	d1e3      	bne.n	803bc <smooth_values+0x38>
   803f4:	462a      	mov	r2, r5
   803f6:	9d02      	ldr	r5, [sp, #8]
   803f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
   803fc:	4b08      	ldr	r3, [pc, #32]	; (80420 <smooth_values+0x9c>)
   803fe:	605a      	str	r2, [r3, #4]
   80400:	9a00      	ldr	r2, [sp, #0]
   80402:	609a      	str	r2, [r3, #8]
   80404:	9a01      	ldr	r2, [sp, #4]
   80406:	601a      	str	r2, [r3, #0]
	//Copy values of temp_buff into old buffer
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
	{
		uint16_t *ip;       /* ip is a pointer to uint16_t */
		ip = &buffer[i];    /* sets ip to point to element i of buffer (contains address of buffer[i]) */
		*ip = temp_buff[i]; /* *ip points to content of buffer[i], this will change content of buffer[i] */
   80408:	f835 3f02 	ldrh.w	r3, [r5, #2]!
   8040c:	f828 3f02 	strh.w	r3, [r8, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80410:	42ac      	cmp	r4, r5
   80412:	d1f9      	bne.n	80408 <smooth_values+0x84>
	}
}
   80414:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
   80418:	b005      	add	sp, #20
   8041a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8041e:	bf00      	nop
   80420:	20070b00 	.word	0x20070b00
   80424:	000814c5 	.word	0x000814c5
   80428:	000812b5 	.word	0x000812b5
   8042c:	00081415 	.word	0x00081415
   80430:	3eaaa64c 	.word	0x3eaaa64c
   80434:	00081765 	.word	0x00081765

00080438 <adc_setup>:
{
   80438:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
   8043a:	2025      	movs	r0, #37	; 0x25
   8043c:	4b21      	ldr	r3, [pc, #132]	; (804c4 <adc_setup+0x8c>)
   8043e:	4798      	blx	r3
	adc_init(ADC, sysclk_get_cpu_hz(), ADC_CLOCK, ADC_STARTUP_TIME_4);
   80440:	4c21      	ldr	r4, [pc, #132]	; (804c8 <adc_setup+0x90>)
   80442:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   80446:	4a21      	ldr	r2, [pc, #132]	; (804cc <adc_setup+0x94>)
   80448:	4921      	ldr	r1, [pc, #132]	; (804d0 <adc_setup+0x98>)
   8044a:	4620      	mov	r0, r4
   8044c:	4d21      	ldr	r5, [pc, #132]	; (804d4 <adc_setup+0x9c>)
   8044e:	47a8      	blx	r5
	adc_configure_timing(ADC, TRACKING_TIME, SETTLING_TIME, TRANSFER_TIME);
   80450:	2300      	movs	r3, #0
   80452:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80456:	4619      	mov	r1, r3
   80458:	4620      	mov	r0, r4
   8045a:	4d1f      	ldr	r5, [pc, #124]	; (804d8 <adc_setup+0xa0>)
   8045c:	47a8      	blx	r5
	adc_set_resolution(ADC, ADC_MR_LOWRES_BITS_12);
   8045e:	2100      	movs	r1, #0
   80460:	4620      	mov	r0, r4
   80462:	4b1e      	ldr	r3, [pc, #120]	; (804dc <adc_setup+0xa4>)
   80464:	4798      	blx	r3
	adc_enable_channel(ADC, ADC_CHANNEL_10);			//PB17 - AD8 for Arduino Due
   80466:	210a      	movs	r1, #10
   80468:	4620      	mov	r0, r4
   8046a:	4b1d      	ldr	r3, [pc, #116]	; (804e0 <adc_setup+0xa8>)
   8046c:	4798      	blx	r3
	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
   8046e:	2200      	movs	r2, #0
   80470:	4611      	mov	r1, r2
   80472:	4620      	mov	r0, r4
   80474:	4b1b      	ldr	r3, [pc, #108]	; (804e4 <adc_setup+0xac>)
   80476:	4798      	blx	r3
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
   80478:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   8047c:	b913      	cbnz	r3, 80484 <adc_setup+0x4c>
   8047e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   80482:	b1a3      	cbz	r3, 804ae <adc_setup+0x76>
		if (p_adc->ADC_RNCR == 0)
   80484:	4b10      	ldr	r3, [pc, #64]	; (804c8 <adc_setup+0x90>)
   80486:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   8048a:	b93b      	cbnz	r3, 8049c <adc_setup+0x64>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer; /* Receive Next Pointer Register */
   8048c:	4b0e      	ldr	r3, [pc, #56]	; (804c8 <adc_setup+0x90>)
   8048e:	4a16      	ldr	r2, [pc, #88]	; (804e8 <adc_setup+0xb0>)
   80490:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;               /* Receive Next Counter Register */
   80494:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80498:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	adc_enable_interrupt(ADC, ADC_IER_RXBUFF);
   8049c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804a0:	4809      	ldr	r0, [pc, #36]	; (804c8 <adc_setup+0x90>)
   804a2:	4b12      	ldr	r3, [pc, #72]	; (804ec <adc_setup+0xb4>)
   804a4:	4798      	blx	r3
   804a6:	2220      	movs	r2, #32
   804a8:	4b11      	ldr	r3, [pc, #68]	; (804f0 <adc_setup+0xb8>)
   804aa:	605a      	str	r2, [r3, #4]
   804ac:	bd38      	pop	{r3, r4, r5, pc}
		p_adc->ADC_RPR = (uint32_t) p_s_buffer; /* Receive Pointer Register */
   804ae:	4a0e      	ldr	r2, [pc, #56]	; (804e8 <adc_setup+0xb0>)
   804b0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;               /* Receive Counter Register */
   804b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   804b8:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN; /*ADC_PTCR = Transfer Control Register, RXTEN: Receiver Transfer Enable */
   804bc:	2201      	movs	r2, #1
   804be:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   804c2:	e7eb      	b.n	8049c <adc_setup+0x64>
   804c4:	00080dd9 	.word	0x00080dd9
   804c8:	400c0000 	.word	0x400c0000
   804cc:	0061a800 	.word	0x0061a800
   804d0:	0501bd00 	.word	0x0501bd00
   804d4:	000805cd 	.word	0x000805cd
   804d8:	0008061f 	.word	0x0008061f
   804dc:	00080601 	.word	0x00080601
   804e0:	00080641 	.word	0x00080641
   804e4:	00080611 	.word	0x00080611
   804e8:	20070cb0 	.word	0x20070cb0
   804ec:	0008064b 	.word	0x0008064b
   804f0:	e000e100 	.word	0xe000e100

000804f4 <ADC_Handler>:

void ADC_Handler(void){
   804f4:	b510      	push	{r4, lr}
	/* Data transfer has been stopped (is complete) and RXBUFF status flag is set because ADC_RCR
	* and the ADC_RNCR have reached zero. Buffer of sample values is full.
	*/
	if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF) {
   804f6:	481d      	ldr	r0, [pc, #116]	; (8056c <ADC_Handler+0x78>)
   804f8:	4b1d      	ldr	r3, [pc, #116]	; (80570 <ADC_Handler+0x7c>)
   804fa:	4798      	blx	r3
   804fc:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   80500:	d100      	bne.n	80504 <ADC_Handler+0x10>
   80502:	bd10      	pop	{r4, pc}
		tc_stop(TC0, 0);  
   80504:	2100      	movs	r1, #0
   80506:	481b      	ldr	r0, [pc, #108]	; (80574 <ADC_Handler+0x80>)
   80508:	4b1b      	ldr	r3, [pc, #108]	; (80578 <ADC_Handler+0x84>)
   8050a:	4798      	blx	r3
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
		{
			printf("Buffer values: %u, index: %u\n", adc_buffer_sample_values[i], i);
		}
		*/
		smooth_values(adc_buffer_sample_values);
   8050c:	4c1b      	ldr	r4, [pc, #108]	; (8057c <ADC_Handler+0x88>)
   8050e:	4620      	mov	r0, r4
   80510:	4b1b      	ldr	r3, [pc, #108]	; (80580 <ADC_Handler+0x8c>)
   80512:	4798      	blx	r3
	    pio_enable_interrupt(PIOB, PIO_PB26); //re-enable edge-level detection 
   80514:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80518:	481a      	ldr	r0, [pc, #104]	; (80584 <ADC_Handler+0x90>)
   8051a:	4b1b      	ldr	r3, [pc, #108]	; (80588 <ADC_Handler+0x94>)
   8051c:	4798      	blx	r3
		/* Clear sample buffer */
		memset((void *)&adc_buffer_sample_values, 0, sizeof(adc_buffer_sample_values));
   8051e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80522:	2100      	movs	r1, #0
   80524:	4620      	mov	r0, r4
   80526:	4b19      	ldr	r3, [pc, #100]	; (8058c <ADC_Handler+0x98>)
   80528:	4798      	blx	r3
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
   8052a:	4b10      	ldr	r3, [pc, #64]	; (8056c <ADC_Handler+0x78>)
   8052c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   80530:	b91b      	cbnz	r3, 8053a <ADC_Handler+0x46>
   80532:	4b0e      	ldr	r3, [pc, #56]	; (8056c <ADC_Handler+0x78>)
   80534:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   80538:	b16b      	cbz	r3, 80556 <ADC_Handler+0x62>
		if (p_adc->ADC_RNCR == 0)
   8053a:	4b0c      	ldr	r3, [pc, #48]	; (8056c <ADC_Handler+0x78>)
   8053c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   80540:	2b00      	cmp	r3, #0
   80542:	d1de      	bne.n	80502 <ADC_Handler+0xe>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer; /* Receive Next Pointer Register */
   80544:	4b09      	ldr	r3, [pc, #36]	; (8056c <ADC_Handler+0x78>)
   80546:	4a0d      	ldr	r2, [pc, #52]	; (8057c <ADC_Handler+0x88>)
   80548:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;               /* Receive Next Counter Register */
   8054c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80550:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		/* Read new buffer data. Necessary, otherwise buffer values are null/zero */
		adc_read_buffer(ADC, adc_buffer_sample_values, ADC_BUFFER_SIZE);
	}
}
   80554:	e7d5      	b.n	80502 <ADC_Handler+0xe>
		p_adc->ADC_RPR = (uint32_t) p_s_buffer; /* Receive Pointer Register */
   80556:	4b05      	ldr	r3, [pc, #20]	; (8056c <ADC_Handler+0x78>)
   80558:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;               /* Receive Counter Register */
   8055c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80560:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN; /*ADC_PTCR = Transfer Control Register, RXTEN: Receiver Transfer Enable */
   80564:	2201      	movs	r2, #1
   80566:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   8056a:	bd10      	pop	{r4, pc}
   8056c:	400c0000 	.word	0x400c0000
   80570:	0008064f 	.word	0x0008064f
   80574:	40080000 	.word	0x40080000
   80578:	00080673 	.word	0x00080673
   8057c:	20070cb0 	.word	0x20070cb0
   80580:	00080385 	.word	0x00080385
   80584:	400e1000 	.word	0x400e1000
   80588:	00080a63 	.word	0x00080a63
   8058c:	0008181d 	.word	0x0008181d

00080590 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80594:	b980      	cbnz	r0, 805b8 <_read+0x28>
   80596:	460c      	mov	r4, r1
   80598:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8059a:	2a00      	cmp	r2, #0
   8059c:	dd0f      	ble.n	805be <_read+0x2e>
   8059e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   805a0:	4e08      	ldr	r6, [pc, #32]	; (805c4 <_read+0x34>)
   805a2:	4d09      	ldr	r5, [pc, #36]	; (805c8 <_read+0x38>)
   805a4:	6830      	ldr	r0, [r6, #0]
   805a6:	4621      	mov	r1, r4
   805a8:	682b      	ldr	r3, [r5, #0]
   805aa:	4798      	blx	r3
		ptr++;
   805ac:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   805ae:	42bc      	cmp	r4, r7
   805b0:	d1f8      	bne.n	805a4 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   805b2:	4640      	mov	r0, r8
   805b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   805b8:	f04f 38ff 	mov.w	r8, #4294967295
   805bc:	e7f9      	b.n	805b2 <_read+0x22>
	for (; len > 0; --len) {
   805be:	4680      	mov	r8, r0
   805c0:	e7f7      	b.n	805b2 <_read+0x22>
   805c2:	bf00      	nop
   805c4:	20071cb8 	.word	0x20071cb8
   805c8:	20071cb0 	.word	0x20071cb0

000805cc <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
   805cc:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
   805ce:	2401      	movs	r4, #1
   805d0:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
   805d2:	2400      	movs	r4, #0
   805d4:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
   805d6:	f240 2502 	movw	r5, #514	; 0x202
   805da:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
   805de:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
   805e2:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   805e6:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
   805e8:	0052      	lsls	r2, r2, #1
   805ea:	fbb1 f2f2 	udiv	r2, r1, r2
   805ee:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
   805f0:	0212      	lsls	r2, r2, #8
   805f2:	b292      	uxth	r2, r2
   805f4:	432b      	orrs	r3, r5
   805f6:	431a      	orrs	r2, r3
   805f8:	6042      	str	r2, [r0, #4]
	return 0;
}
   805fa:	4620      	mov	r0, r4
   805fc:	bc30      	pop	{r4, r5}
   805fe:	4770      	bx	lr

00080600 <adc_set_resolution>:
		p_adc->ADC_MR &= ~ADC_MR_LOWRES;
		p_adc->ADC_EMR |= resolution;
		break;
	}
#else
	p_adc->ADC_MR &= ~ADC_MR_LOWRES;
   80600:	6843      	ldr	r3, [r0, #4]
   80602:	f023 0310 	bic.w	r3, r3, #16
   80606:	6043      	str	r3, [r0, #4]
	p_adc->ADC_MR |= resolution;
   80608:	6843      	ldr	r3, [r0, #4]
   8060a:	4319      	orrs	r1, r3
   8060c:	6041      	str	r1, [r0, #4]
   8060e:	4770      	bx	lr

00080610 <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
   80610:	6843      	ldr	r3, [r0, #4]
   80612:	01d2      	lsls	r2, r2, #7
   80614:	b2d2      	uxtb	r2, r2
   80616:	4319      	orrs	r1, r3
   80618:	430a      	orrs	r2, r1
   8061a:	6042      	str	r2, [r0, #4]
   8061c:	4770      	bx	lr

0008061e <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
   8061e:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80620:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
   80622:	0609      	lsls	r1, r1, #24
   80624:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
   80628:	4321      	orrs	r1, r4
   8062a:	430a      	orrs	r2, r1
   8062c:	0719      	lsls	r1, r3, #28
   8062e:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
   80632:	4311      	orrs	r1, r2
   80634:	6041      	str	r1, [r0, #4]
}
   80636:	bc10      	pop	{r4}
   80638:	4770      	bx	lr

0008063a <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   8063a:	2302      	movs	r3, #2
   8063c:	6003      	str	r3, [r0, #0]
   8063e:	4770      	bx	lr

00080640 <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
   80640:	2301      	movs	r3, #1
   80642:	fa03 f101 	lsl.w	r1, r3, r1
   80646:	6101      	str	r1, [r0, #16]
   80648:	4770      	bx	lr

0008064a <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
   8064a:	6241      	str	r1, [r0, #36]	; 0x24
   8064c:	4770      	bx	lr

0008064e <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   8064e:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80650:	4770      	bx	lr

00080652 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80652:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80654:	0189      	lsls	r1, r1, #6
   80656:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80658:	2402      	movs	r4, #2
   8065a:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8065c:	f04f 31ff 	mov.w	r1, #4294967295
   80660:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80662:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80664:	605a      	str	r2, [r3, #4]
}
   80666:	bc10      	pop	{r4}
   80668:	4770      	bx	lr

0008066a <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8066a:	0189      	lsls	r1, r1, #6
   8066c:	2305      	movs	r3, #5
   8066e:	5043      	str	r3, [r0, r1]
   80670:	4770      	bx	lr

00080672 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80672:	0189      	lsls	r1, r1, #6
   80674:	2302      	movs	r3, #2
   80676:	5043      	str	r3, [r0, r1]
   80678:	4770      	bx	lr

0008067a <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   8067a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   8067e:	6908      	ldr	r0, [r1, #16]
}
   80680:	4770      	bx	lr

00080682 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   80682:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80686:	61ca      	str	r2, [r1, #28]
   80688:	4770      	bx	lr

0008068a <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8068a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   8068e:	624a      	str	r2, [r1, #36]	; 0x24
   80690:	4770      	bx	lr

00080692 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80692:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80696:	6a08      	ldr	r0, [r1, #32]
}
   80698:	4770      	bx	lr

0008069a <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8069a:	6943      	ldr	r3, [r0, #20]
   8069c:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   806a0:	bf1d      	ittte	ne
   806a2:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   806a6:	61c1      	strne	r1, [r0, #28]
	return 0;
   806a8:	2000      	movne	r0, #0
		return 1;
   806aa:	2001      	moveq	r0, #1
}
   806ac:	4770      	bx	lr

000806ae <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   806ae:	6943      	ldr	r3, [r0, #20]
   806b0:	f013 0f01 	tst.w	r3, #1
   806b4:	d005      	beq.n	806c2 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   806b6:	6983      	ldr	r3, [r0, #24]
   806b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   806bc:	600b      	str	r3, [r1, #0]

	return 0;
   806be:	2000      	movs	r0, #0
   806c0:	4770      	bx	lr
		return 1;
   806c2:	2001      	movs	r0, #1
}
   806c4:	4770      	bx	lr
	...

000806c8 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   806c8:	b500      	push	{lr}
   806ca:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   806cc:	2201      	movs	r2, #1
   806ce:	f10d 0107 	add.w	r1, sp, #7
   806d2:	4810      	ldr	r0, [pc, #64]	; (80714 <USART0_Handler+0x4c>)
   806d4:	4b10      	ldr	r3, [pc, #64]	; (80718 <USART0_Handler+0x50>)
   806d6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   806d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   806da:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   806de:	2200      	movs	r2, #0
   806e0:	4b0e      	ldr	r3, [pc, #56]	; (8071c <USART0_Handler+0x54>)
   806e2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   806e4:	4b0e      	ldr	r3, [pc, #56]	; (80720 <USART0_Handler+0x58>)
   806e6:	781b      	ldrb	r3, [r3, #0]
   806e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   806ec:	4a0d      	ldr	r2, [pc, #52]	; (80724 <USART0_Handler+0x5c>)
   806ee:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   806f0:	2b9b      	cmp	r3, #155	; 0x9b
   806f2:	d00b      	beq.n	8070c <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   806f4:	3301      	adds	r3, #1
   806f6:	4a0a      	ldr	r2, [pc, #40]	; (80720 <USART0_Handler+0x58>)
   806f8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   806fa:	2201      	movs	r2, #1
   806fc:	4b07      	ldr	r3, [pc, #28]	; (8071c <USART0_Handler+0x54>)
   806fe:	701a      	strb	r2, [r3, #0]
   80700:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80704:	b662      	cpsie	i
}
   80706:	b003      	add	sp, #12
   80708:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   8070c:	2200      	movs	r2, #0
   8070e:	4b04      	ldr	r3, [pc, #16]	; (80720 <USART0_Handler+0x58>)
   80710:	701a      	strb	r2, [r3, #0]
   80712:	e7f2      	b.n	806fa <USART0_Handler+0x32>
   80714:	40098000 	.word	0x40098000
   80718:	00080779 	.word	0x00080779
   8071c:	2007012c 	.word	0x2007012c
   80720:	20070ba8 	.word	0x20070ba8
   80724:	20070b0c 	.word	0x20070b0c

00080728 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80728:	3801      	subs	r0, #1
   8072a:	2802      	cmp	r0, #2
   8072c:	d815      	bhi.n	8075a <_write+0x32>
{
   8072e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80732:	460e      	mov	r6, r1
   80734:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80736:	b19a      	cbz	r2, 80760 <_write+0x38>
   80738:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8073a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80774 <_write+0x4c>
   8073e:	4f0c      	ldr	r7, [pc, #48]	; (80770 <_write+0x48>)
   80740:	f8d8 0000 	ldr.w	r0, [r8]
   80744:	f815 1b01 	ldrb.w	r1, [r5], #1
   80748:	683b      	ldr	r3, [r7, #0]
   8074a:	4798      	blx	r3
   8074c:	2800      	cmp	r0, #0
   8074e:	db0a      	blt.n	80766 <_write+0x3e>
   80750:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   80752:	3c01      	subs	r4, #1
   80754:	d1f4      	bne.n	80740 <_write+0x18>
   80756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8075a:	f04f 30ff 	mov.w	r0, #4294967295
   8075e:	4770      	bx	lr
	for (; len != 0; --len) {
   80760:	4610      	mov	r0, r2
   80762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80766:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8076a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8076e:	bf00      	nop
   80770:	20071cb4 	.word	0x20071cb4
   80774:	20071cb8 	.word	0x20071cb8

00080778 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80778:	2a00      	cmp	r2, #0
   8077a:	d051      	beq.n	80820 <usart_serial_read_packet+0xa8>
{
   8077c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80780:	b083      	sub	sp, #12
   80782:	4605      	mov	r5, r0
   80784:	460c      	mov	r4, r1
   80786:	4692      	mov	sl, r2
   80788:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8078a:	4f26      	ldr	r7, [pc, #152]	; (80824 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   8078c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80838 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80790:	4e25      	ldr	r6, [pc, #148]	; (80828 <usart_serial_read_packet+0xb0>)
   80792:	e01d      	b.n	807d0 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   80794:	4621      	mov	r1, r4
   80796:	4638      	mov	r0, r7
   80798:	47c8      	blx	r9
   8079a:	2800      	cmp	r0, #0
   8079c:	d1fa      	bne.n	80794 <usart_serial_read_packet+0x1c>
   8079e:	e021      	b.n	807e4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   807a0:	469b      	mov	fp, r3
   807a2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8083c <usart_serial_read_packet+0xc4>
   807a6:	a901      	add	r1, sp, #4
   807a8:	4658      	mov	r0, fp
   807aa:	47c0      	blx	r8
   807ac:	2800      	cmp	r0, #0
   807ae:	d1fa      	bne.n	807a6 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   807b0:	9b01      	ldr	r3, [sp, #4]
   807b2:	7023      	strb	r3, [r4, #0]
   807b4:	e019      	b.n	807ea <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   807b6:	469b      	mov	fp, r3
   807b8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8083c <usart_serial_read_packet+0xc4>
   807bc:	a901      	add	r1, sp, #4
   807be:	4658      	mov	r0, fp
   807c0:	47c0      	blx	r8
   807c2:	2800      	cmp	r0, #0
   807c4:	d1fa      	bne.n	807bc <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   807c6:	9b01      	ldr	r3, [sp, #4]
   807c8:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   807ca:	3401      	adds	r4, #1
	while (len) {
   807cc:	4554      	cmp	r4, sl
   807ce:	d023      	beq.n	80818 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   807d0:	2300      	movs	r3, #0
   807d2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   807d4:	42bd      	cmp	r5, r7
   807d6:	d0dd      	beq.n	80794 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   807d8:	4b14      	ldr	r3, [pc, #80]	; (8082c <usart_serial_read_packet+0xb4>)
   807da:	429d      	cmp	r5, r3
   807dc:	d0e0      	beq.n	807a0 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   807de:	4b14      	ldr	r3, [pc, #80]	; (80830 <usart_serial_read_packet+0xb8>)
   807e0:	429d      	cmp	r5, r3
   807e2:	d0e8      	beq.n	807b6 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   807e4:	4b13      	ldr	r3, [pc, #76]	; (80834 <usart_serial_read_packet+0xbc>)
   807e6:	429d      	cmp	r5, r3
   807e8:	d00b      	beq.n	80802 <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   807ea:	42b5      	cmp	r5, r6
   807ec:	d1ed      	bne.n	807ca <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   807ee:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8083c <usart_serial_read_packet+0xc4>
   807f2:	a901      	add	r1, sp, #4
   807f4:	4630      	mov	r0, r6
   807f6:	47c0      	blx	r8
   807f8:	2800      	cmp	r0, #0
   807fa:	d1fa      	bne.n	807f2 <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   807fc:	9b01      	ldr	r3, [sp, #4]
   807fe:	7023      	strb	r3, [r4, #0]
   80800:	e7e3      	b.n	807ca <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80802:	469b      	mov	fp, r3
   80804:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8083c <usart_serial_read_packet+0xc4>
   80808:	a901      	add	r1, sp, #4
   8080a:	4658      	mov	r0, fp
   8080c:	47c0      	blx	r8
   8080e:	2800      	cmp	r0, #0
   80810:	d1fa      	bne.n	80808 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   80812:	9b01      	ldr	r3, [sp, #4]
   80814:	7023      	strb	r3, [r4, #0]
   80816:	e7d8      	b.n	807ca <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80818:	2000      	movs	r0, #0
   8081a:	b003      	add	sp, #12
   8081c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80820:	2000      	movs	r0, #0
   80822:	4770      	bx	lr
   80824:	400e0800 	.word	0x400e0800
   80828:	400a4000 	.word	0x400a4000
   8082c:	40098000 	.word	0x40098000
   80830:	4009c000 	.word	0x4009c000
   80834:	400a0000 	.word	0x400a0000
   80838:	00080887 	.word	0x00080887
   8083c:	000806af 	.word	0x000806af

00080840 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80840:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80842:	23ac      	movs	r3, #172	; 0xac
   80844:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80846:	680b      	ldr	r3, [r1, #0]
   80848:	684a      	ldr	r2, [r1, #4]
   8084a:	fbb3 f3f2 	udiv	r3, r3, r2
   8084e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80850:	1e5c      	subs	r4, r3, #1
   80852:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80856:	4294      	cmp	r4, r2
   80858:	d80b      	bhi.n	80872 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8085a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8085c:	688b      	ldr	r3, [r1, #8]
   8085e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80860:	f240 2302 	movw	r3, #514	; 0x202
   80864:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80868:	2350      	movs	r3, #80	; 0x50
   8086a:	6003      	str	r3, [r0, #0]

	return 0;
   8086c:	2000      	movs	r0, #0
}
   8086e:	bc10      	pop	{r4}
   80870:	4770      	bx	lr
		return 1;
   80872:	2001      	movs	r0, #1
   80874:	e7fb      	b.n	8086e <uart_init+0x2e>

00080876 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80876:	6943      	ldr	r3, [r0, #20]
   80878:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8087c:	bf1a      	itte	ne
   8087e:	61c1      	strne	r1, [r0, #28]
	return 0;
   80880:	2000      	movne	r0, #0
		return 1;
   80882:	2001      	moveq	r0, #1
}
   80884:	4770      	bx	lr

00080886 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80886:	6943      	ldr	r3, [r0, #20]
   80888:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8088c:	bf1d      	ittte	ne
   8088e:	6983      	ldrne	r3, [r0, #24]
   80890:	700b      	strbne	r3, [r1, #0]
	return 0;
   80892:	2000      	movne	r0, #0
		return 1;
   80894:	2001      	moveq	r0, #1
}
   80896:	4770      	bx	lr

00080898 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80898:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8089a:	480e      	ldr	r0, [pc, #56]	; (808d4 <sysclk_init+0x3c>)
   8089c:	4b0e      	ldr	r3, [pc, #56]	; (808d8 <sysclk_init+0x40>)
   8089e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   808a0:	213e      	movs	r1, #62	; 0x3e
   808a2:	2000      	movs	r0, #0
   808a4:	4b0d      	ldr	r3, [pc, #52]	; (808dc <sysclk_init+0x44>)
   808a6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   808a8:	4c0d      	ldr	r4, [pc, #52]	; (808e0 <sysclk_init+0x48>)
   808aa:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   808ac:	2800      	cmp	r0, #0
   808ae:	d0fc      	beq.n	808aa <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   808b0:	4b0c      	ldr	r3, [pc, #48]	; (808e4 <sysclk_init+0x4c>)
   808b2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   808b4:	4a0c      	ldr	r2, [pc, #48]	; (808e8 <sysclk_init+0x50>)
   808b6:	4b0d      	ldr	r3, [pc, #52]	; (808ec <sysclk_init+0x54>)
   808b8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   808ba:	4c0d      	ldr	r4, [pc, #52]	; (808f0 <sysclk_init+0x58>)
   808bc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   808be:	2800      	cmp	r0, #0
   808c0:	d0fc      	beq.n	808bc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   808c2:	2010      	movs	r0, #16
   808c4:	4b0b      	ldr	r3, [pc, #44]	; (808f4 <sysclk_init+0x5c>)
   808c6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   808c8:	4b0b      	ldr	r3, [pc, #44]	; (808f8 <sysclk_init+0x60>)
   808ca:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   808cc:	4801      	ldr	r0, [pc, #4]	; (808d4 <sysclk_init+0x3c>)
   808ce:	4b02      	ldr	r3, [pc, #8]	; (808d8 <sysclk_init+0x40>)
   808d0:	4798      	blx	r3
   808d2:	bd10      	pop	{r4, pc}
   808d4:	0501bd00 	.word	0x0501bd00
   808d8:	200700a5 	.word	0x200700a5
   808dc:	00080d55 	.word	0x00080d55
   808e0:	00080da9 	.word	0x00080da9
   808e4:	00080db9 	.word	0x00080db9
   808e8:	200d3f01 	.word	0x200d3f01
   808ec:	400e0600 	.word	0x400e0600
   808f0:	00080dc9 	.word	0x00080dc9
   808f4:	00080cf1 	.word	0x00080cf1
   808f8:	00080ec9 	.word	0x00080ec9

000808fc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   808fc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   808fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80902:	4b16      	ldr	r3, [pc, #88]	; (8095c <board_init+0x60>)
   80904:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80906:	200b      	movs	r0, #11
   80908:	4c15      	ldr	r4, [pc, #84]	; (80960 <board_init+0x64>)
   8090a:	47a0      	blx	r4
   8090c:	200c      	movs	r0, #12
   8090e:	47a0      	blx	r4
   80910:	200d      	movs	r0, #13
   80912:	47a0      	blx	r4
   80914:	200e      	movs	r0, #14
   80916:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80918:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8091c:	203b      	movs	r0, #59	; 0x3b
   8091e:	4c11      	ldr	r4, [pc, #68]	; (80964 <board_init+0x68>)
   80920:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80922:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80926:	2055      	movs	r0, #85	; 0x55
   80928:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8092a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8092e:	2056      	movs	r0, #86	; 0x56
   80930:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80932:	490d      	ldr	r1, [pc, #52]	; (80968 <board_init+0x6c>)
   80934:	2068      	movs	r0, #104	; 0x68
   80936:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80938:	490c      	ldr	r1, [pc, #48]	; (8096c <board_init+0x70>)
   8093a:	205c      	movs	r0, #92	; 0x5c
   8093c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8093e:	4a0c      	ldr	r2, [pc, #48]	; (80970 <board_init+0x74>)
   80940:	f44f 7140 	mov.w	r1, #768	; 0x300
   80944:	480b      	ldr	r0, [pc, #44]	; (80974 <board_init+0x78>)
   80946:	4b0c      	ldr	r3, [pc, #48]	; (80978 <board_init+0x7c>)
   80948:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8094a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8094e:	202b      	movs	r0, #43	; 0x2b
   80950:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80952:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80956:	202a      	movs	r0, #42	; 0x2a
   80958:	47a0      	blx	r4
   8095a:	bd10      	pop	{r4, pc}
   8095c:	400e1a50 	.word	0x400e1a50
   80960:	00080dd9 	.word	0x00080dd9
   80964:	00080a75 	.word	0x00080a75
   80968:	28000079 	.word	0x28000079
   8096c:	28000001 	.word	0x28000001
   80970:	08000001 	.word	0x08000001
   80974:	400e0e00 	.word	0x400e0e00
   80978:	00080b45 	.word	0x00080b45

0008097c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8097c:	b90a      	cbnz	r2, 80982 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8097e:	6601      	str	r1, [r0, #96]	; 0x60
   80980:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80982:	6641      	str	r1, [r0, #100]	; 0x64
   80984:	4770      	bx	lr

00080986 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   80986:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   8098a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   8098e:	bf0c      	ite	eq
   80990:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   80992:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   80994:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   80996:	bf14      	ite	ne
   80998:	2001      	movne	r0, #1
   8099a:	2000      	moveq	r0, #0
   8099c:	4770      	bx	lr

0008099e <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8099e:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   809a0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   809a4:	d016      	beq.n	809d4 <pio_set_peripheral+0x36>
   809a6:	d80b      	bhi.n	809c0 <pio_set_peripheral+0x22>
   809a8:	b149      	cbz	r1, 809be <pio_set_peripheral+0x20>
   809aa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   809ae:	d105      	bne.n	809bc <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   809b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   809b2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   809b4:	400b      	ands	r3, r1
   809b6:	ea23 0302 	bic.w	r3, r3, r2
   809ba:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   809bc:	6042      	str	r2, [r0, #4]
   809be:	4770      	bx	lr
	switch (ul_type) {
   809c0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   809c4:	d0fb      	beq.n	809be <pio_set_peripheral+0x20>
   809c6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   809ca:	d0f8      	beq.n	809be <pio_set_peripheral+0x20>
   809cc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   809d0:	d1f4      	bne.n	809bc <pio_set_peripheral+0x1e>
   809d2:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   809d4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   809d6:	4313      	orrs	r3, r2
   809d8:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   809da:	e7ef      	b.n	809bc <pio_set_peripheral+0x1e>

000809dc <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   809dc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   809de:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   809e2:	bf14      	ite	ne
   809e4:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   809e6:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   809e8:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   809ec:	bf14      	ite	ne
   809ee:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   809f0:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   809f2:	f012 0f02 	tst.w	r2, #2
   809f6:	d107      	bne.n	80a08 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   809f8:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   809fc:	bf18      	it	ne
   809fe:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80a02:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80a04:	6001      	str	r1, [r0, #0]
   80a06:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80a08:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80a0c:	e7f9      	b.n	80a02 <pio_set_input+0x26>

00080a0e <pio_set_output>:
{
   80a0e:	b410      	push	{r4}
   80a10:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80a12:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a14:	b944      	cbnz	r4, 80a28 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80a16:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80a18:	b143      	cbz	r3, 80a2c <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80a1a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80a1c:	b942      	cbnz	r2, 80a30 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80a1e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80a20:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80a22:	6001      	str	r1, [r0, #0]
}
   80a24:	bc10      	pop	{r4}
   80a26:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80a28:	6641      	str	r1, [r0, #100]	; 0x64
   80a2a:	e7f5      	b.n	80a18 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80a2c:	6541      	str	r1, [r0, #84]	; 0x54
   80a2e:	e7f5      	b.n	80a1c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80a30:	6301      	str	r1, [r0, #48]	; 0x30
   80a32:	e7f5      	b.n	80a20 <pio_set_output+0x12>

00080a34 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   80a34:	f012 0f10 	tst.w	r2, #16
   80a38:	d010      	beq.n	80a5c <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   80a3a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80a3e:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   80a42:	bf14      	ite	ne
   80a44:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   80a48:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   80a4c:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   80a50:	bf14      	ite	ne
   80a52:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   80a56:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80a5a:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   80a5c:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80a60:	4770      	bx	lr

00080a62 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   80a62:	6401      	str	r1, [r0, #64]	; 0x40
   80a64:	4770      	bx	lr

00080a66 <pio_disable_interrupt>:
	p_pio->PIO_IDR = ul_mask;
   80a66:	6441      	str	r1, [r0, #68]	; 0x44
   80a68:	4770      	bx	lr

00080a6a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80a6a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80a6c:	4770      	bx	lr

00080a6e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80a6e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80a70:	4770      	bx	lr
	...

00080a74 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80a74:	b570      	push	{r4, r5, r6, lr}
   80a76:	b082      	sub	sp, #8
   80a78:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80a7a:	0943      	lsrs	r3, r0, #5
   80a7c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80a80:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80a84:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80a86:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80a8a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80a8e:	d031      	beq.n	80af4 <pio_configure_pin+0x80>
   80a90:	d816      	bhi.n	80ac0 <pio_configure_pin+0x4c>
   80a92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80a96:	d01b      	beq.n	80ad0 <pio_configure_pin+0x5c>
   80a98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80a9c:	d116      	bne.n	80acc <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a9e:	f000 001f 	and.w	r0, r0, #31
   80aa2:	2601      	movs	r6, #1
   80aa4:	4086      	lsls	r6, r0
   80aa6:	4632      	mov	r2, r6
   80aa8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80aac:	4620      	mov	r0, r4
   80aae:	4b22      	ldr	r3, [pc, #136]	; (80b38 <pio_configure_pin+0xc4>)
   80ab0:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ab2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ab6:	bf14      	ite	ne
   80ab8:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80aba:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80abc:	2001      	movs	r0, #1
   80abe:	e017      	b.n	80af0 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ac4:	d021      	beq.n	80b0a <pio_configure_pin+0x96>
   80ac6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80aca:	d01e      	beq.n	80b0a <pio_configure_pin+0x96>
		return 0;
   80acc:	2000      	movs	r0, #0
   80ace:	e00f      	b.n	80af0 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80ad0:	f000 001f 	and.w	r0, r0, #31
   80ad4:	2601      	movs	r6, #1
   80ad6:	4086      	lsls	r6, r0
   80ad8:	4632      	mov	r2, r6
   80ada:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ade:	4620      	mov	r0, r4
   80ae0:	4b15      	ldr	r3, [pc, #84]	; (80b38 <pio_configure_pin+0xc4>)
   80ae2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ae4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ae8:	bf14      	ite	ne
   80aea:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80aec:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80aee:	2001      	movs	r0, #1
}
   80af0:	b002      	add	sp, #8
   80af2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80af4:	f000 011f 	and.w	r1, r0, #31
   80af8:	2601      	movs	r6, #1
   80afa:	462a      	mov	r2, r5
   80afc:	fa06 f101 	lsl.w	r1, r6, r1
   80b00:	4620      	mov	r0, r4
   80b02:	4b0e      	ldr	r3, [pc, #56]	; (80b3c <pio_configure_pin+0xc8>)
   80b04:	4798      	blx	r3
	return 1;
   80b06:	4630      	mov	r0, r6
		break;
   80b08:	e7f2      	b.n	80af0 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b0a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b0e:	f000 011f 	and.w	r1, r0, #31
   80b12:	2601      	movs	r6, #1
   80b14:	ea05 0306 	and.w	r3, r5, r6
   80b18:	9300      	str	r3, [sp, #0]
   80b1a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b1e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b22:	bf14      	ite	ne
   80b24:	2200      	movne	r2, #0
   80b26:	2201      	moveq	r2, #1
   80b28:	fa06 f101 	lsl.w	r1, r6, r1
   80b2c:	4620      	mov	r0, r4
   80b2e:	4c04      	ldr	r4, [pc, #16]	; (80b40 <pio_configure_pin+0xcc>)
   80b30:	47a0      	blx	r4
	return 1;
   80b32:	4630      	mov	r0, r6
		break;
   80b34:	e7dc      	b.n	80af0 <pio_configure_pin+0x7c>
   80b36:	bf00      	nop
   80b38:	0008099f 	.word	0x0008099f
   80b3c:	000809dd 	.word	0x000809dd
   80b40:	00080a0f 	.word	0x00080a0f

00080b44 <pio_configure_pin_group>:
{
   80b44:	b570      	push	{r4, r5, r6, lr}
   80b46:	b082      	sub	sp, #8
   80b48:	4605      	mov	r5, r0
   80b4a:	460e      	mov	r6, r1
   80b4c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80b4e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80b52:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80b56:	d027      	beq.n	80ba8 <pio_configure_pin_group+0x64>
   80b58:	d811      	bhi.n	80b7e <pio_configure_pin_group+0x3a>
   80b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80b5e:	d016      	beq.n	80b8e <pio_configure_pin_group+0x4a>
   80b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80b64:	d111      	bne.n	80b8a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b66:	460a      	mov	r2, r1
   80b68:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b6c:	4b19      	ldr	r3, [pc, #100]	; (80bd4 <pio_configure_pin_group+0x90>)
   80b6e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b70:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80b74:	bf14      	ite	ne
   80b76:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b78:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80b7a:	2001      	movs	r0, #1
   80b7c:	e012      	b.n	80ba4 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80b7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80b82:	d015      	beq.n	80bb0 <pio_configure_pin_group+0x6c>
   80b84:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80b88:	d012      	beq.n	80bb0 <pio_configure_pin_group+0x6c>
		return 0;
   80b8a:	2000      	movs	r0, #0
   80b8c:	e00a      	b.n	80ba4 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80b8e:	460a      	mov	r2, r1
   80b90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b94:	4b0f      	ldr	r3, [pc, #60]	; (80bd4 <pio_configure_pin_group+0x90>)
   80b96:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b98:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80b9c:	bf14      	ite	ne
   80b9e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ba0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80ba2:	2001      	movs	r0, #1
}
   80ba4:	b002      	add	sp, #8
   80ba6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80ba8:	4b0b      	ldr	r3, [pc, #44]	; (80bd8 <pio_configure_pin_group+0x94>)
   80baa:	4798      	blx	r3
	return 1;
   80bac:	2001      	movs	r0, #1
		break;
   80bae:	e7f9      	b.n	80ba4 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80bb0:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80bb4:	f004 0301 	and.w	r3, r4, #1
   80bb8:	9300      	str	r3, [sp, #0]
   80bba:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80bbe:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80bc2:	bf14      	ite	ne
   80bc4:	2200      	movne	r2, #0
   80bc6:	2201      	moveq	r2, #1
   80bc8:	4631      	mov	r1, r6
   80bca:	4628      	mov	r0, r5
   80bcc:	4c03      	ldr	r4, [pc, #12]	; (80bdc <pio_configure_pin_group+0x98>)
   80bce:	47a0      	blx	r4
	return 1;
   80bd0:	2001      	movs	r0, #1
		break;
   80bd2:	e7e7      	b.n	80ba4 <pio_configure_pin_group+0x60>
   80bd4:	0008099f 	.word	0x0008099f
   80bd8:	000809dd 	.word	0x000809dd
   80bdc:	00080a0f 	.word	0x00080a0f

00080be0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80be4:	4604      	mov	r4, r0
   80be6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80be8:	4b0e      	ldr	r3, [pc, #56]	; (80c24 <pio_handler_process+0x44>)
   80bea:	4798      	blx	r3
   80bec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80bee:	4620      	mov	r0, r4
   80bf0:	4b0d      	ldr	r3, [pc, #52]	; (80c28 <pio_handler_process+0x48>)
   80bf2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80bf4:	4005      	ands	r5, r0
   80bf6:	d013      	beq.n	80c20 <pio_handler_process+0x40>
   80bf8:	4c0c      	ldr	r4, [pc, #48]	; (80c2c <pio_handler_process+0x4c>)
   80bfa:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80bfe:	e003      	b.n	80c08 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80c00:	42b4      	cmp	r4, r6
   80c02:	d00d      	beq.n	80c20 <pio_handler_process+0x40>
   80c04:	3410      	adds	r4, #16
		while (status != 0) {
   80c06:	b15d      	cbz	r5, 80c20 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80c08:	6820      	ldr	r0, [r4, #0]
   80c0a:	4540      	cmp	r0, r8
   80c0c:	d1f8      	bne.n	80c00 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c0e:	6861      	ldr	r1, [r4, #4]
   80c10:	4229      	tst	r1, r5
   80c12:	d0f5      	beq.n	80c00 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c14:	68e3      	ldr	r3, [r4, #12]
   80c16:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80c18:	6863      	ldr	r3, [r4, #4]
   80c1a:	ea25 0503 	bic.w	r5, r5, r3
   80c1e:	e7ef      	b.n	80c00 <pio_handler_process+0x20>
   80c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c24:	00080a6b 	.word	0x00080a6b
   80c28:	00080a6f 	.word	0x00080a6f
   80c2c:	20070bac 	.word	0x20070bac

00080c30 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80c32:	4c18      	ldr	r4, [pc, #96]	; (80c94 <pio_handler_set+0x64>)
   80c34:	6826      	ldr	r6, [r4, #0]
   80c36:	2e06      	cmp	r6, #6
   80c38:	d829      	bhi.n	80c8e <pio_handler_set+0x5e>
   80c3a:	f04f 0c00 	mov.w	ip, #0
   80c3e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80c40:	4f15      	ldr	r7, [pc, #84]	; (80c98 <pio_handler_set+0x68>)
   80c42:	e004      	b.n	80c4e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   80c44:	3401      	adds	r4, #1
   80c46:	b2e4      	uxtb	r4, r4
   80c48:	46a4      	mov	ip, r4
   80c4a:	42a6      	cmp	r6, r4
   80c4c:	d309      	bcc.n	80c62 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80c4e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80c50:	0125      	lsls	r5, r4, #4
   80c52:	597d      	ldr	r5, [r7, r5]
   80c54:	428d      	cmp	r5, r1
   80c56:	d1f5      	bne.n	80c44 <pio_handler_set+0x14>
   80c58:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   80c5c:	686d      	ldr	r5, [r5, #4]
   80c5e:	4295      	cmp	r5, r2
   80c60:	d1f0      	bne.n	80c44 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   80c62:	4d0d      	ldr	r5, [pc, #52]	; (80c98 <pio_handler_set+0x68>)
   80c64:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   80c68:	eb05 040e 	add.w	r4, r5, lr
   80c6c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   80c70:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   80c72:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   80c74:	9906      	ldr	r1, [sp, #24]
   80c76:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   80c78:	3601      	adds	r6, #1
   80c7a:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   80c7c:	bf04      	itt	eq
   80c7e:	4905      	ldreq	r1, [pc, #20]	; (80c94 <pio_handler_set+0x64>)
   80c80:	600e      	streq	r6, [r1, #0]
   80c82:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80c84:	461a      	mov	r2, r3
   80c86:	4b05      	ldr	r3, [pc, #20]	; (80c9c <pio_handler_set+0x6c>)
   80c88:	4798      	blx	r3

	return 0;
   80c8a:	2000      	movs	r0, #0
   80c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   80c8e:	2001      	movs	r0, #1
}
   80c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c92:	bf00      	nop
   80c94:	20070c1c 	.word	0x20070c1c
   80c98:	20070bac 	.word	0x20070bac
   80c9c:	00080a35 	.word	0x00080a35

00080ca0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80ca0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80ca2:	210b      	movs	r1, #11
   80ca4:	4801      	ldr	r0, [pc, #4]	; (80cac <PIOA_Handler+0xc>)
   80ca6:	4b02      	ldr	r3, [pc, #8]	; (80cb0 <PIOA_Handler+0x10>)
   80ca8:	4798      	blx	r3
   80caa:	bd08      	pop	{r3, pc}
   80cac:	400e0e00 	.word	0x400e0e00
   80cb0:	00080be1 	.word	0x00080be1

00080cb4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80cb4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80cb6:	210c      	movs	r1, #12
   80cb8:	4801      	ldr	r0, [pc, #4]	; (80cc0 <PIOB_Handler+0xc>)
   80cba:	4b02      	ldr	r3, [pc, #8]	; (80cc4 <PIOB_Handler+0x10>)
   80cbc:	4798      	blx	r3
   80cbe:	bd08      	pop	{r3, pc}
   80cc0:	400e1000 	.word	0x400e1000
   80cc4:	00080be1 	.word	0x00080be1

00080cc8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80cc8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80cca:	210d      	movs	r1, #13
   80ccc:	4801      	ldr	r0, [pc, #4]	; (80cd4 <PIOC_Handler+0xc>)
   80cce:	4b02      	ldr	r3, [pc, #8]	; (80cd8 <PIOC_Handler+0x10>)
   80cd0:	4798      	blx	r3
   80cd2:	bd08      	pop	{r3, pc}
   80cd4:	400e1200 	.word	0x400e1200
   80cd8:	00080be1 	.word	0x00080be1

00080cdc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80cdc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80cde:	210e      	movs	r1, #14
   80ce0:	4801      	ldr	r0, [pc, #4]	; (80ce8 <PIOD_Handler+0xc>)
   80ce2:	4b02      	ldr	r3, [pc, #8]	; (80cec <PIOD_Handler+0x10>)
   80ce4:	4798      	blx	r3
   80ce6:	bd08      	pop	{r3, pc}
   80ce8:	400e1400 	.word	0x400e1400
   80cec:	00080be1 	.word	0x00080be1

00080cf0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80cf0:	4a17      	ldr	r2, [pc, #92]	; (80d50 <pmc_switch_mck_to_pllack+0x60>)
   80cf2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80cf8:	4318      	orrs	r0, r3
   80cfa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cfc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80cfe:	f013 0f08 	tst.w	r3, #8
   80d02:	d10a      	bne.n	80d1a <pmc_switch_mck_to_pllack+0x2a>
   80d04:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d08:	4911      	ldr	r1, [pc, #68]	; (80d50 <pmc_switch_mck_to_pllack+0x60>)
   80d0a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d0c:	f012 0f08 	tst.w	r2, #8
   80d10:	d103      	bne.n	80d1a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d12:	3b01      	subs	r3, #1
   80d14:	d1f9      	bne.n	80d0a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80d16:	2001      	movs	r0, #1
   80d18:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80d1a:	4a0d      	ldr	r2, [pc, #52]	; (80d50 <pmc_switch_mck_to_pllack+0x60>)
   80d1c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d1e:	f023 0303 	bic.w	r3, r3, #3
   80d22:	f043 0302 	orr.w	r3, r3, #2
   80d26:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d28:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d2a:	f013 0f08 	tst.w	r3, #8
   80d2e:	d10a      	bne.n	80d46 <pmc_switch_mck_to_pllack+0x56>
   80d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d34:	4906      	ldr	r1, [pc, #24]	; (80d50 <pmc_switch_mck_to_pllack+0x60>)
   80d36:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d38:	f012 0f08 	tst.w	r2, #8
   80d3c:	d105      	bne.n	80d4a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d3e:	3b01      	subs	r3, #1
   80d40:	d1f9      	bne.n	80d36 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80d42:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80d44:	4770      	bx	lr
	return 0;
   80d46:	2000      	movs	r0, #0
   80d48:	4770      	bx	lr
   80d4a:	2000      	movs	r0, #0
   80d4c:	4770      	bx	lr
   80d4e:	bf00      	nop
   80d50:	400e0600 	.word	0x400e0600

00080d54 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80d54:	b9c8      	cbnz	r0, 80d8a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d56:	4a11      	ldr	r2, [pc, #68]	; (80d9c <pmc_switch_mainck_to_xtal+0x48>)
   80d58:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80d5a:	0209      	lsls	r1, r1, #8
   80d5c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d5e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80d62:	f023 0303 	bic.w	r3, r3, #3
   80d66:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d6a:	f043 0301 	orr.w	r3, r3, #1
   80d6e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d70:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d72:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d74:	f013 0f01 	tst.w	r3, #1
   80d78:	d0fb      	beq.n	80d72 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80d7a:	4a08      	ldr	r2, [pc, #32]	; (80d9c <pmc_switch_mainck_to_xtal+0x48>)
   80d7c:	6a13      	ldr	r3, [r2, #32]
   80d7e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80d86:	6213      	str	r3, [r2, #32]
   80d88:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d8a:	4904      	ldr	r1, [pc, #16]	; (80d9c <pmc_switch_mainck_to_xtal+0x48>)
   80d8c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80d8e:	4a04      	ldr	r2, [pc, #16]	; (80da0 <pmc_switch_mainck_to_xtal+0x4c>)
   80d90:	401a      	ands	r2, r3
   80d92:	4b04      	ldr	r3, [pc, #16]	; (80da4 <pmc_switch_mainck_to_xtal+0x50>)
   80d94:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d96:	620b      	str	r3, [r1, #32]
   80d98:	4770      	bx	lr
   80d9a:	bf00      	nop
   80d9c:	400e0600 	.word	0x400e0600
   80da0:	fec8fffc 	.word	0xfec8fffc
   80da4:	01370002 	.word	0x01370002

00080da8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80da8:	4b02      	ldr	r3, [pc, #8]	; (80db4 <pmc_osc_is_ready_mainck+0xc>)
   80daa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80dac:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80db0:	4770      	bx	lr
   80db2:	bf00      	nop
   80db4:	400e0600 	.word	0x400e0600

00080db8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80db8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80dbc:	4b01      	ldr	r3, [pc, #4]	; (80dc4 <pmc_disable_pllack+0xc>)
   80dbe:	629a      	str	r2, [r3, #40]	; 0x28
   80dc0:	4770      	bx	lr
   80dc2:	bf00      	nop
   80dc4:	400e0600 	.word	0x400e0600

00080dc8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80dc8:	4b02      	ldr	r3, [pc, #8]	; (80dd4 <pmc_is_locked_pllack+0xc>)
   80dca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80dcc:	f000 0002 	and.w	r0, r0, #2
   80dd0:	4770      	bx	lr
   80dd2:	bf00      	nop
   80dd4:	400e0600 	.word	0x400e0600

00080dd8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80dd8:	282c      	cmp	r0, #44	; 0x2c
   80dda:	d81e      	bhi.n	80e1a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80ddc:	281f      	cmp	r0, #31
   80dde:	d80c      	bhi.n	80dfa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80de0:	4b11      	ldr	r3, [pc, #68]	; (80e28 <pmc_enable_periph_clk+0x50>)
   80de2:	699a      	ldr	r2, [r3, #24]
   80de4:	2301      	movs	r3, #1
   80de6:	4083      	lsls	r3, r0
   80de8:	4393      	bics	r3, r2
   80dea:	d018      	beq.n	80e1e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80dec:	2301      	movs	r3, #1
   80dee:	fa03 f000 	lsl.w	r0, r3, r0
   80df2:	4b0d      	ldr	r3, [pc, #52]	; (80e28 <pmc_enable_periph_clk+0x50>)
   80df4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80df6:	2000      	movs	r0, #0
   80df8:	4770      	bx	lr
		ul_id -= 32;
   80dfa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80dfc:	4b0a      	ldr	r3, [pc, #40]	; (80e28 <pmc_enable_periph_clk+0x50>)
   80dfe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80e02:	2301      	movs	r3, #1
   80e04:	4083      	lsls	r3, r0
   80e06:	4393      	bics	r3, r2
   80e08:	d00b      	beq.n	80e22 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80e0a:	2301      	movs	r3, #1
   80e0c:	fa03 f000 	lsl.w	r0, r3, r0
   80e10:	4b05      	ldr	r3, [pc, #20]	; (80e28 <pmc_enable_periph_clk+0x50>)
   80e12:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80e16:	2000      	movs	r0, #0
   80e18:	4770      	bx	lr
		return 1;
   80e1a:	2001      	movs	r0, #1
   80e1c:	4770      	bx	lr
	return 0;
   80e1e:	2000      	movs	r0, #0
   80e20:	4770      	bx	lr
   80e22:	2000      	movs	r0, #0
}
   80e24:	4770      	bx	lr
   80e26:	bf00      	nop
   80e28:	400e0600 	.word	0x400e0600

00080e2c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80e2c:	e7fe      	b.n	80e2c <Dummy_Handler>
	...

00080e30 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80e30:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80e32:	4b1c      	ldr	r3, [pc, #112]	; (80ea4 <Reset_Handler+0x74>)
   80e34:	4a1c      	ldr	r2, [pc, #112]	; (80ea8 <Reset_Handler+0x78>)
   80e36:	429a      	cmp	r2, r3
   80e38:	d010      	beq.n	80e5c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80e3a:	4b1c      	ldr	r3, [pc, #112]	; (80eac <Reset_Handler+0x7c>)
   80e3c:	4a19      	ldr	r2, [pc, #100]	; (80ea4 <Reset_Handler+0x74>)
   80e3e:	429a      	cmp	r2, r3
   80e40:	d20c      	bcs.n	80e5c <Reset_Handler+0x2c>
   80e42:	3b01      	subs	r3, #1
   80e44:	1a9b      	subs	r3, r3, r2
   80e46:	f023 0303 	bic.w	r3, r3, #3
   80e4a:	3304      	adds	r3, #4
   80e4c:	4413      	add	r3, r2
   80e4e:	4916      	ldr	r1, [pc, #88]	; (80ea8 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80e50:	f851 0b04 	ldr.w	r0, [r1], #4
   80e54:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80e58:	429a      	cmp	r2, r3
   80e5a:	d1f9      	bne.n	80e50 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e5c:	4b14      	ldr	r3, [pc, #80]	; (80eb0 <Reset_Handler+0x80>)
   80e5e:	4a15      	ldr	r2, [pc, #84]	; (80eb4 <Reset_Handler+0x84>)
   80e60:	429a      	cmp	r2, r3
   80e62:	d20a      	bcs.n	80e7a <Reset_Handler+0x4a>
   80e64:	3b01      	subs	r3, #1
   80e66:	1a9b      	subs	r3, r3, r2
   80e68:	f023 0303 	bic.w	r3, r3, #3
   80e6c:	3304      	adds	r3, #4
   80e6e:	4413      	add	r3, r2
		*pDest++ = 0;
   80e70:	2100      	movs	r1, #0
   80e72:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80e76:	4293      	cmp	r3, r2
   80e78:	d1fb      	bne.n	80e72 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e7a:	4b0f      	ldr	r3, [pc, #60]	; (80eb8 <Reset_Handler+0x88>)
   80e7c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80e80:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80e84:	490d      	ldr	r1, [pc, #52]	; (80ebc <Reset_Handler+0x8c>)
   80e86:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e88:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80e90:	d203      	bcs.n	80e9a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e92:	688b      	ldr	r3, [r1, #8]
   80e94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80e98:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e9a:	4b09      	ldr	r3, [pc, #36]	; (80ec0 <Reset_Handler+0x90>)
   80e9c:	4798      	blx	r3

	/* Branch to main function */
	main();
   80e9e:	4b09      	ldr	r3, [pc, #36]	; (80ec4 <Reset_Handler+0x94>)
   80ea0:	4798      	blx	r3
   80ea2:	e7fe      	b.n	80ea2 <Reset_Handler+0x72>
   80ea4:	20070000 	.word	0x20070000
   80ea8:	000848bc 	.word	0x000848bc
   80eac:	20070ae0 	.word	0x20070ae0
   80eb0:	20071ce4 	.word	0x20071ce4
   80eb4:	20070ae0 	.word	0x20070ae0
   80eb8:	00080000 	.word	0x00080000
   80ebc:	e000ed00 	.word	0xe000ed00
   80ec0:	000817a5 	.word	0x000817a5
   80ec4:	000811d1 	.word	0x000811d1

00080ec8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80ec8:	4b3d      	ldr	r3, [pc, #244]	; (80fc0 <SystemCoreClockUpdate+0xf8>)
   80eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ecc:	f003 0303 	and.w	r3, r3, #3
   80ed0:	2b03      	cmp	r3, #3
   80ed2:	d80e      	bhi.n	80ef2 <SystemCoreClockUpdate+0x2a>
   80ed4:	e8df f003 	tbb	[pc, r3]
   80ed8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80edc:	4b39      	ldr	r3, [pc, #228]	; (80fc4 <SystemCoreClockUpdate+0xfc>)
   80ede:	695b      	ldr	r3, [r3, #20]
   80ee0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80ee4:	bf14      	ite	ne
   80ee6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80eea:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80eee:	4b36      	ldr	r3, [pc, #216]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80ef0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80ef2:	4b33      	ldr	r3, [pc, #204]	; (80fc0 <SystemCoreClockUpdate+0xf8>)
   80ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80efa:	2b70      	cmp	r3, #112	; 0x70
   80efc:	d057      	beq.n	80fae <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80efe:	4b30      	ldr	r3, [pc, #192]	; (80fc0 <SystemCoreClockUpdate+0xf8>)
   80f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80f02:	4931      	ldr	r1, [pc, #196]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f04:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80f08:	680b      	ldr	r3, [r1, #0]
   80f0a:	40d3      	lsrs	r3, r2
   80f0c:	600b      	str	r3, [r1, #0]
   80f0e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f10:	4b2b      	ldr	r3, [pc, #172]	; (80fc0 <SystemCoreClockUpdate+0xf8>)
   80f12:	6a1b      	ldr	r3, [r3, #32]
   80f14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f18:	d003      	beq.n	80f22 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f1a:	4a2c      	ldr	r2, [pc, #176]	; (80fcc <SystemCoreClockUpdate+0x104>)
   80f1c:	4b2a      	ldr	r3, [pc, #168]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f1e:	601a      	str	r2, [r3, #0]
   80f20:	e7e7      	b.n	80ef2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f22:	4a2b      	ldr	r2, [pc, #172]	; (80fd0 <SystemCoreClockUpdate+0x108>)
   80f24:	4b28      	ldr	r3, [pc, #160]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f26:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f28:	4b25      	ldr	r3, [pc, #148]	; (80fc0 <SystemCoreClockUpdate+0xf8>)
   80f2a:	6a1b      	ldr	r3, [r3, #32]
   80f2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f30:	2b10      	cmp	r3, #16
   80f32:	d005      	beq.n	80f40 <SystemCoreClockUpdate+0x78>
   80f34:	2b20      	cmp	r3, #32
   80f36:	d1dc      	bne.n	80ef2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80f38:	4a24      	ldr	r2, [pc, #144]	; (80fcc <SystemCoreClockUpdate+0x104>)
   80f3a:	4b23      	ldr	r3, [pc, #140]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f3c:	601a      	str	r2, [r3, #0]
				break;
   80f3e:	e7d8      	b.n	80ef2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80f40:	4a24      	ldr	r2, [pc, #144]	; (80fd4 <SystemCoreClockUpdate+0x10c>)
   80f42:	4b21      	ldr	r3, [pc, #132]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f44:	601a      	str	r2, [r3, #0]
				break;
   80f46:	e7d4      	b.n	80ef2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f48:	4b1d      	ldr	r3, [pc, #116]	; (80fc0 <SystemCoreClockUpdate+0xf8>)
   80f4a:	6a1b      	ldr	r3, [r3, #32]
   80f4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f50:	d00c      	beq.n	80f6c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f52:	4a1e      	ldr	r2, [pc, #120]	; (80fcc <SystemCoreClockUpdate+0x104>)
   80f54:	4b1c      	ldr	r3, [pc, #112]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f56:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f58:	4b19      	ldr	r3, [pc, #100]	; (80fc0 <SystemCoreClockUpdate+0xf8>)
   80f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f5c:	f003 0303 	and.w	r3, r3, #3
   80f60:	2b02      	cmp	r3, #2
   80f62:	d016      	beq.n	80f92 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f64:	4a1c      	ldr	r2, [pc, #112]	; (80fd8 <SystemCoreClockUpdate+0x110>)
   80f66:	4b18      	ldr	r3, [pc, #96]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f68:	601a      	str	r2, [r3, #0]
   80f6a:	e7c2      	b.n	80ef2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f6c:	4a18      	ldr	r2, [pc, #96]	; (80fd0 <SystemCoreClockUpdate+0x108>)
   80f6e:	4b16      	ldr	r3, [pc, #88]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f70:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f72:	4b13      	ldr	r3, [pc, #76]	; (80fc0 <SystemCoreClockUpdate+0xf8>)
   80f74:	6a1b      	ldr	r3, [r3, #32]
   80f76:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f7a:	2b10      	cmp	r3, #16
   80f7c:	d005      	beq.n	80f8a <SystemCoreClockUpdate+0xc2>
   80f7e:	2b20      	cmp	r3, #32
   80f80:	d1ea      	bne.n	80f58 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80f82:	4a12      	ldr	r2, [pc, #72]	; (80fcc <SystemCoreClockUpdate+0x104>)
   80f84:	4b10      	ldr	r3, [pc, #64]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f86:	601a      	str	r2, [r3, #0]
				break;
   80f88:	e7e6      	b.n	80f58 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80f8a:	4a12      	ldr	r2, [pc, #72]	; (80fd4 <SystemCoreClockUpdate+0x10c>)
   80f8c:	4b0e      	ldr	r3, [pc, #56]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80f8e:	601a      	str	r2, [r3, #0]
				break;
   80f90:	e7e2      	b.n	80f58 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f92:	4a0b      	ldr	r2, [pc, #44]	; (80fc0 <SystemCoreClockUpdate+0xf8>)
   80f94:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f96:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80f98:	480b      	ldr	r0, [pc, #44]	; (80fc8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f9a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80f9e:	6803      	ldr	r3, [r0, #0]
   80fa0:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80fa4:	b2d2      	uxtb	r2, r2
   80fa6:	fbb3 f3f2 	udiv	r3, r3, r2
   80faa:	6003      	str	r3, [r0, #0]
   80fac:	e7a1      	b.n	80ef2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80fae:	4a06      	ldr	r2, [pc, #24]	; (80fc8 <SystemCoreClockUpdate+0x100>)
   80fb0:	6813      	ldr	r3, [r2, #0]
   80fb2:	490a      	ldr	r1, [pc, #40]	; (80fdc <SystemCoreClockUpdate+0x114>)
   80fb4:	fba1 1303 	umull	r1, r3, r1, r3
   80fb8:	085b      	lsrs	r3, r3, #1
   80fba:	6013      	str	r3, [r2, #0]
   80fbc:	4770      	bx	lr
   80fbe:	bf00      	nop
   80fc0:	400e0600 	.word	0x400e0600
   80fc4:	400e1a10 	.word	0x400e1a10
   80fc8:	20070130 	.word	0x20070130
   80fcc:	00b71b00 	.word	0x00b71b00
   80fd0:	003d0900 	.word	0x003d0900
   80fd4:	007a1200 	.word	0x007a1200
   80fd8:	0e4e1c00 	.word	0x0e4e1c00
   80fdc:	aaaaaaab 	.word	0xaaaaaaab

00080fe0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80fe0:	4b0a      	ldr	r3, [pc, #40]	; (8100c <_sbrk+0x2c>)
   80fe2:	681b      	ldr	r3, [r3, #0]
   80fe4:	b153      	cbz	r3, 80ffc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80fe6:	4b09      	ldr	r3, [pc, #36]	; (8100c <_sbrk+0x2c>)
   80fe8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80fea:	181a      	adds	r2, r3, r0
   80fec:	4908      	ldr	r1, [pc, #32]	; (81010 <_sbrk+0x30>)
   80fee:	4291      	cmp	r1, r2
   80ff0:	db08      	blt.n	81004 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80ff2:	4610      	mov	r0, r2
   80ff4:	4a05      	ldr	r2, [pc, #20]	; (8100c <_sbrk+0x2c>)
   80ff6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80ff8:	4618      	mov	r0, r3
   80ffa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80ffc:	4a05      	ldr	r2, [pc, #20]	; (81014 <_sbrk+0x34>)
   80ffe:	4b03      	ldr	r3, [pc, #12]	; (8100c <_sbrk+0x2c>)
   81000:	601a      	str	r2, [r3, #0]
   81002:	e7f0      	b.n	80fe6 <_sbrk+0x6>
		return (caddr_t) -1;	
   81004:	f04f 30ff 	mov.w	r0, #4294967295
}
   81008:	4770      	bx	lr
   8100a:	bf00      	nop
   8100c:	20070c20 	.word	0x20070c20
   81010:	20087ffc 	.word	0x20087ffc
   81014:	20073ce8 	.word	0x20073ce8

00081018 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81018:	f04f 30ff 	mov.w	r0, #4294967295
   8101c:	4770      	bx	lr

0008101e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8101e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81022:	604b      	str	r3, [r1, #4]

	return 0;
}
   81024:	2000      	movs	r0, #0
   81026:	4770      	bx	lr

00081028 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81028:	2001      	movs	r0, #1
   8102a:	4770      	bx	lr

0008102c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8102c:	2000      	movs	r0, #0
   8102e:	4770      	bx	lr

00081030 <configure_tc>:
int configureDone = 0; // define and initialize external variable
                       // initialization goes only with definition
					   // Only one source file may define the external variable, and definition is done only ONCE

void configure_tc(void)
{
   81030:	b510      	push	{r4, lr}
	/* Configure PMC */
	pmc_enable_periph_clk(ID_TC0);
   81032:	201b      	movs	r0, #27
   81034:	4b0d      	ldr	r3, [pc, #52]	; (8106c <configure_tc+0x3c>)
   81036:	4798      	blx	r3
	/* Configure TC for a 500 kHz frequency and trigger on RC compare. */
	tc_init(TC0, 0, 0 | TC_CMR_CPCTRG);			//Timer_clock_1 - MCK/2 - 42 MHz (internal clock signal)
   81038:	4c0d      	ldr	r4, [pc, #52]	; (81070 <configure_tc+0x40>)
   8103a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8103e:	2100      	movs	r1, #0
   81040:	4620      	mov	r0, r4
   81042:	4b0c      	ldr	r3, [pc, #48]	; (81074 <configure_tc+0x44>)
   81044:	4798      	blx	r3
	tc_write_rc(TC0, 0, 84);					//84 corresponds to fs = 500 kHz (42 MHz/84 = 500 kHz)
   81046:	2254      	movs	r2, #84	; 0x54
   81048:	2100      	movs	r1, #0
   8104a:	4620      	mov	r0, r4
   8104c:	4b0a      	ldr	r3, [pc, #40]	; (81078 <configure_tc+0x48>)
   8104e:	4798      	blx	r3
   81050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81054:	4b09      	ldr	r3, [pc, #36]	; (8107c <configure_tc+0x4c>)
   81056:	601a      	str	r2, [r3, #0]
	/* Configure and enable interrupt on RC compare:
	 * A trigger resets the counter and starts the counter clock. RC Compare Trigger is implemented 
	 * in each channel and can provide a trigger when the counter value matches the RC value.
	 */
	NVIC_EnableIRQ((IRQn_Type) ID_TC0);
	tc_enable_interrupt(TC0, 0, TC_IER_CPCS); //CPCS is 5th bit (nr 4) in  TC Interrupt Enable Register (TC_IER0, ch 0: 0x40080024)
   81058:	2210      	movs	r2, #16
   8105a:	2100      	movs	r1, #0
   8105c:	4620      	mov	r0, r4
   8105e:	4b08      	ldr	r3, [pc, #32]	; (81080 <configure_tc+0x50>)
   81060:	4798      	blx	r3

	configureDone = 1;
   81062:	2201      	movs	r2, #1
   81064:	4b07      	ldr	r3, [pc, #28]	; (81084 <configure_tc+0x54>)
   81066:	601a      	str	r2, [r3, #0]
   81068:	bd10      	pop	{r4, pc}
   8106a:	bf00      	nop
   8106c:	00080dd9 	.word	0x00080dd9
   81070:	40080000 	.word	0x40080000
   81074:	00080653 	.word	0x00080653
   81078:	00080683 	.word	0x00080683
   8107c:	e000e100 	.word	0xe000e100
   81080:	0008068b 	.word	0x0008068b
   81084:	20070c24 	.word	0x20070c24

00081088 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81088:	b5f0      	push	{r4, r5, r6, r7, lr}
   8108a:	b083      	sub	sp, #12
   8108c:	4604      	mov	r4, r0
   8108e:	460d      	mov	r5, r1
	uint32_t val = 0;
   81090:	2300      	movs	r3, #0
   81092:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81094:	4b20      	ldr	r3, [pc, #128]	; (81118 <usart_serial_getchar+0x90>)
   81096:	4298      	cmp	r0, r3
   81098:	d00d      	beq.n	810b6 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8109a:	4b20      	ldr	r3, [pc, #128]	; (8111c <usart_serial_getchar+0x94>)
   8109c:	4298      	cmp	r0, r3
   8109e:	d012      	beq.n	810c6 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   810a0:	4b1f      	ldr	r3, [pc, #124]	; (81120 <usart_serial_getchar+0x98>)
   810a2:	4298      	cmp	r0, r3
   810a4:	d019      	beq.n	810da <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   810a6:	4b1f      	ldr	r3, [pc, #124]	; (81124 <usart_serial_getchar+0x9c>)
   810a8:	429c      	cmp	r4, r3
   810aa:	d020      	beq.n	810ee <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   810ac:	4b1e      	ldr	r3, [pc, #120]	; (81128 <usart_serial_getchar+0xa0>)
   810ae:	429c      	cmp	r4, r3
   810b0:	d027      	beq.n	81102 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   810b2:	b003      	add	sp, #12
   810b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   810b6:	461f      	mov	r7, r3
   810b8:	4e1c      	ldr	r6, [pc, #112]	; (8112c <usart_serial_getchar+0xa4>)
   810ba:	4629      	mov	r1, r5
   810bc:	4638      	mov	r0, r7
   810be:	47b0      	blx	r6
   810c0:	2800      	cmp	r0, #0
   810c2:	d1fa      	bne.n	810ba <usart_serial_getchar+0x32>
   810c4:	e7ef      	b.n	810a6 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   810c6:	461f      	mov	r7, r3
   810c8:	4e19      	ldr	r6, [pc, #100]	; (81130 <usart_serial_getchar+0xa8>)
   810ca:	a901      	add	r1, sp, #4
   810cc:	4638      	mov	r0, r7
   810ce:	47b0      	blx	r6
   810d0:	2800      	cmp	r0, #0
   810d2:	d1fa      	bne.n	810ca <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   810d4:	9b01      	ldr	r3, [sp, #4]
   810d6:	702b      	strb	r3, [r5, #0]
   810d8:	e7e8      	b.n	810ac <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   810da:	461e      	mov	r6, r3
   810dc:	4c14      	ldr	r4, [pc, #80]	; (81130 <usart_serial_getchar+0xa8>)
   810de:	a901      	add	r1, sp, #4
   810e0:	4630      	mov	r0, r6
   810e2:	47a0      	blx	r4
   810e4:	2800      	cmp	r0, #0
   810e6:	d1fa      	bne.n	810de <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   810e8:	9b01      	ldr	r3, [sp, #4]
   810ea:	702b      	strb	r3, [r5, #0]
   810ec:	e7e1      	b.n	810b2 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   810ee:	461e      	mov	r6, r3
   810f0:	4c0f      	ldr	r4, [pc, #60]	; (81130 <usart_serial_getchar+0xa8>)
   810f2:	a901      	add	r1, sp, #4
   810f4:	4630      	mov	r0, r6
   810f6:	47a0      	blx	r4
   810f8:	2800      	cmp	r0, #0
   810fa:	d1fa      	bne.n	810f2 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   810fc:	9b01      	ldr	r3, [sp, #4]
   810fe:	702b      	strb	r3, [r5, #0]
   81100:	e7d7      	b.n	810b2 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   81102:	461e      	mov	r6, r3
   81104:	4c0a      	ldr	r4, [pc, #40]	; (81130 <usart_serial_getchar+0xa8>)
   81106:	a901      	add	r1, sp, #4
   81108:	4630      	mov	r0, r6
   8110a:	47a0      	blx	r4
   8110c:	2800      	cmp	r0, #0
   8110e:	d1fa      	bne.n	81106 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   81110:	9b01      	ldr	r3, [sp, #4]
   81112:	702b      	strb	r3, [r5, #0]
}
   81114:	e7cd      	b.n	810b2 <usart_serial_getchar+0x2a>
   81116:	bf00      	nop
   81118:	400e0800 	.word	0x400e0800
   8111c:	40098000 	.word	0x40098000
   81120:	4009c000 	.word	0x4009c000
   81124:	400a0000 	.word	0x400a0000
   81128:	400a4000 	.word	0x400a4000
   8112c:	00080887 	.word	0x00080887
   81130:	000806af 	.word	0x000806af

00081134 <usart_serial_putchar>:
{
   81134:	b570      	push	{r4, r5, r6, lr}
   81136:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   81138:	4b1e      	ldr	r3, [pc, #120]	; (811b4 <usart_serial_putchar+0x80>)
   8113a:	4298      	cmp	r0, r3
   8113c:	d00d      	beq.n	8115a <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   8113e:	4b1e      	ldr	r3, [pc, #120]	; (811b8 <usart_serial_putchar+0x84>)
   81140:	4298      	cmp	r0, r3
   81142:	d013      	beq.n	8116c <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   81144:	4b1d      	ldr	r3, [pc, #116]	; (811bc <usart_serial_putchar+0x88>)
   81146:	4298      	cmp	r0, r3
   81148:	d019      	beq.n	8117e <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   8114a:	4b1d      	ldr	r3, [pc, #116]	; (811c0 <usart_serial_putchar+0x8c>)
   8114c:	4298      	cmp	r0, r3
   8114e:	d01f      	beq.n	81190 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   81150:	4b1c      	ldr	r3, [pc, #112]	; (811c4 <usart_serial_putchar+0x90>)
   81152:	4298      	cmp	r0, r3
   81154:	d025      	beq.n	811a2 <usart_serial_putchar+0x6e>
	return 0;
   81156:	2000      	movs	r0, #0
}
   81158:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8115a:	461e      	mov	r6, r3
   8115c:	4d1a      	ldr	r5, [pc, #104]	; (811c8 <usart_serial_putchar+0x94>)
   8115e:	4621      	mov	r1, r4
   81160:	4630      	mov	r0, r6
   81162:	47a8      	blx	r5
   81164:	2800      	cmp	r0, #0
   81166:	d1fa      	bne.n	8115e <usart_serial_putchar+0x2a>
		return 1;
   81168:	2001      	movs	r0, #1
   8116a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8116c:	461e      	mov	r6, r3
   8116e:	4d17      	ldr	r5, [pc, #92]	; (811cc <usart_serial_putchar+0x98>)
   81170:	4621      	mov	r1, r4
   81172:	4630      	mov	r0, r6
   81174:	47a8      	blx	r5
   81176:	2800      	cmp	r0, #0
   81178:	d1fa      	bne.n	81170 <usart_serial_putchar+0x3c>
		return 1;
   8117a:	2001      	movs	r0, #1
   8117c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8117e:	461e      	mov	r6, r3
   81180:	4d12      	ldr	r5, [pc, #72]	; (811cc <usart_serial_putchar+0x98>)
   81182:	4621      	mov	r1, r4
   81184:	4630      	mov	r0, r6
   81186:	47a8      	blx	r5
   81188:	2800      	cmp	r0, #0
   8118a:	d1fa      	bne.n	81182 <usart_serial_putchar+0x4e>
		return 1;
   8118c:	2001      	movs	r0, #1
   8118e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81190:	461e      	mov	r6, r3
   81192:	4d0e      	ldr	r5, [pc, #56]	; (811cc <usart_serial_putchar+0x98>)
   81194:	4621      	mov	r1, r4
   81196:	4630      	mov	r0, r6
   81198:	47a8      	blx	r5
   8119a:	2800      	cmp	r0, #0
   8119c:	d1fa      	bne.n	81194 <usart_serial_putchar+0x60>
		return 1;
   8119e:	2001      	movs	r0, #1
   811a0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   811a2:	461e      	mov	r6, r3
   811a4:	4d09      	ldr	r5, [pc, #36]	; (811cc <usart_serial_putchar+0x98>)
   811a6:	4621      	mov	r1, r4
   811a8:	4630      	mov	r0, r6
   811aa:	47a8      	blx	r5
   811ac:	2800      	cmp	r0, #0
   811ae:	d1fa      	bne.n	811a6 <usart_serial_putchar+0x72>
		return 1;
   811b0:	2001      	movs	r0, #1
   811b2:	bd70      	pop	{r4, r5, r6, pc}
   811b4:	400e0800 	.word	0x400e0800
   811b8:	40098000 	.word	0x40098000
   811bc:	4009c000 	.word	0x4009c000
   811c0:	400a0000 	.word	0x400a0000
   811c4:	400a4000 	.word	0x400a4000
   811c8:	00080877 	.word	0x00080877
   811cc:	0008069b 	.word	0x0008069b

000811d0 <main>:
	printf("=============\n");
}


int main (void)
{
   811d0:	b500      	push	{lr}
   811d2:	b085      	sub	sp, #20
	sysclk_init();
   811d4:	4b1f      	ldr	r3, [pc, #124]	; (81254 <main+0x84>)
   811d6:	4798      	blx	r3
	board_init();
   811d8:	4b1f      	ldr	r3, [pc, #124]	; (81258 <main+0x88>)
   811da:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   811dc:	2008      	movs	r0, #8
   811de:	4c1f      	ldr	r4, [pc, #124]	; (8125c <main+0x8c>)
   811e0:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   811e2:	4d1f      	ldr	r5, [pc, #124]	; (81260 <main+0x90>)
   811e4:	4b1f      	ldr	r3, [pc, #124]	; (81264 <main+0x94>)
   811e6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   811e8:	4a1f      	ldr	r2, [pc, #124]	; (81268 <main+0x98>)
   811ea:	4b20      	ldr	r3, [pc, #128]	; (8126c <main+0x9c>)
   811ec:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   811ee:	4a20      	ldr	r2, [pc, #128]	; (81270 <main+0xa0>)
   811f0:	4b20      	ldr	r3, [pc, #128]	; (81274 <main+0xa4>)
   811f2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   811f4:	4b20      	ldr	r3, [pc, #128]	; (81278 <main+0xa8>)
   811f6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   811f8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   811fc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   811fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81202:	9303      	str	r3, [sp, #12]
   81204:	2008      	movs	r0, #8
   81206:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
   81208:	a901      	add	r1, sp, #4
   8120a:	4628      	mov	r0, r5
   8120c:	4b1b      	ldr	r3, [pc, #108]	; (8127c <main+0xac>)
   8120e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81210:	4e1b      	ldr	r6, [pc, #108]	; (81280 <main+0xb0>)
   81212:	6833      	ldr	r3, [r6, #0]
   81214:	2100      	movs	r1, #0
   81216:	6898      	ldr	r0, [r3, #8]
   81218:	4d1a      	ldr	r5, [pc, #104]	; (81284 <main+0xb4>)
   8121a:	47a8      	blx	r5
	setbuf(stdin, NULL);
   8121c:	6833      	ldr	r3, [r6, #0]
   8121e:	2100      	movs	r1, #0
   81220:	6858      	ldr	r0, [r3, #4]
   81222:	47a8      	blx	r5
	printf("Console ready\n");
   81224:	4818      	ldr	r0, [pc, #96]	; (81288 <main+0xb8>)
   81226:	4d19      	ldr	r5, [pc, #100]	; (8128c <main+0xbc>)
   81228:	47a8      	blx	r5
	printf("=============\n");
   8122a:	4819      	ldr	r0, [pc, #100]	; (81290 <main+0xc0>)
   8122c:	47a8      	blx	r5
   8122e:	200b      	movs	r0, #11
   81230:	47a0      	blx	r4
   81232:	200c      	movs	r0, #12
   81234:	47a0      	blx	r4
   81236:	200d      	movs	r0, #13
   81238:	47a0      	blx	r4
   8123a:	200e      	movs	r0, #14
   8123c:	47a0      	blx	r4
	configureConsole();
	
	ioport_init();
	adc_setup();
   8123e:	4b15      	ldr	r3, [pc, #84]	; (81294 <main+0xc4>)
   81240:	4798      	blx	r3
	configure_tc();
   81242:	4b15      	ldr	r3, [pc, #84]	; (81298 <main+0xc8>)
   81244:	4798      	blx	r3
	init_amplitude_trigger();
   81246:	4b15      	ldr	r3, [pc, #84]	; (8129c <main+0xcc>)
   81248:	4798      	blx	r3
	init_pulse_pin();
   8124a:	4b15      	ldr	r3, [pc, #84]	; (812a0 <main+0xd0>)
   8124c:	4798      	blx	r3
	TC1_init();
   8124e:	4b15      	ldr	r3, [pc, #84]	; (812a4 <main+0xd4>)
   81250:	4798      	blx	r3
   81252:	e7fe      	b.n	81252 <main+0x82>
   81254:	00080899 	.word	0x00080899
   81258:	000808fd 	.word	0x000808fd
   8125c:	00080dd9 	.word	0x00080dd9
   81260:	400e0800 	.word	0x400e0800
   81264:	20071cb8 	.word	0x20071cb8
   81268:	00081135 	.word	0x00081135
   8126c:	20071cb4 	.word	0x20071cb4
   81270:	00081089 	.word	0x00081089
   81274:	20071cb0 	.word	0x20071cb0
   81278:	0501bd00 	.word	0x0501bd00
   8127c:	00080841 	.word	0x00080841
   81280:	20070134 	.word	0x20070134
   81284:	00081965 	.word	0x00081965
   81288:	00084704 	.word	0x00084704
   8128c:	000817f5 	.word	0x000817f5
   81290:	00084714 	.word	0x00084714
   81294:	00080439 	.word	0x00080439
   81298:	00081031 	.word	0x00081031
   8129c:	00080319 	.word	0x00080319
   812a0:	00080219 	.word	0x00080219
   812a4:	00080285 	.word	0x00080285

000812a8 <__aeabi_frsub>:
   812a8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   812ac:	e002      	b.n	812b4 <__addsf3>
   812ae:	bf00      	nop

000812b0 <__aeabi_fsub>:
   812b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000812b4 <__addsf3>:
   812b4:	0042      	lsls	r2, r0, #1
   812b6:	bf1f      	itttt	ne
   812b8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   812bc:	ea92 0f03 	teqne	r2, r3
   812c0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   812c4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   812c8:	d06a      	beq.n	813a0 <__addsf3+0xec>
   812ca:	ea4f 6212 	mov.w	r2, r2, lsr #24
   812ce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   812d2:	bfc1      	itttt	gt
   812d4:	18d2      	addgt	r2, r2, r3
   812d6:	4041      	eorgt	r1, r0
   812d8:	4048      	eorgt	r0, r1
   812da:	4041      	eorgt	r1, r0
   812dc:	bfb8      	it	lt
   812de:	425b      	neglt	r3, r3
   812e0:	2b19      	cmp	r3, #25
   812e2:	bf88      	it	hi
   812e4:	4770      	bxhi	lr
   812e6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   812ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   812ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   812f2:	bf18      	it	ne
   812f4:	4240      	negne	r0, r0
   812f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   812fa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   812fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   81302:	bf18      	it	ne
   81304:	4249      	negne	r1, r1
   81306:	ea92 0f03 	teq	r2, r3
   8130a:	d03f      	beq.n	8138c <__addsf3+0xd8>
   8130c:	f1a2 0201 	sub.w	r2, r2, #1
   81310:	fa41 fc03 	asr.w	ip, r1, r3
   81314:	eb10 000c 	adds.w	r0, r0, ip
   81318:	f1c3 0320 	rsb	r3, r3, #32
   8131c:	fa01 f103 	lsl.w	r1, r1, r3
   81320:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   81324:	d502      	bpl.n	8132c <__addsf3+0x78>
   81326:	4249      	negs	r1, r1
   81328:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   8132c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   81330:	d313      	bcc.n	8135a <__addsf3+0xa6>
   81332:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   81336:	d306      	bcc.n	81346 <__addsf3+0x92>
   81338:	0840      	lsrs	r0, r0, #1
   8133a:	ea4f 0131 	mov.w	r1, r1, rrx
   8133e:	f102 0201 	add.w	r2, r2, #1
   81342:	2afe      	cmp	r2, #254	; 0xfe
   81344:	d251      	bcs.n	813ea <__addsf3+0x136>
   81346:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   8134a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8134e:	bf08      	it	eq
   81350:	f020 0001 	biceq.w	r0, r0, #1
   81354:	ea40 0003 	orr.w	r0, r0, r3
   81358:	4770      	bx	lr
   8135a:	0049      	lsls	r1, r1, #1
   8135c:	eb40 0000 	adc.w	r0, r0, r0
   81360:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   81364:	f1a2 0201 	sub.w	r2, r2, #1
   81368:	d1ed      	bne.n	81346 <__addsf3+0x92>
   8136a:	fab0 fc80 	clz	ip, r0
   8136e:	f1ac 0c08 	sub.w	ip, ip, #8
   81372:	ebb2 020c 	subs.w	r2, r2, ip
   81376:	fa00 f00c 	lsl.w	r0, r0, ip
   8137a:	bfaa      	itet	ge
   8137c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   81380:	4252      	neglt	r2, r2
   81382:	4318      	orrge	r0, r3
   81384:	bfbc      	itt	lt
   81386:	40d0      	lsrlt	r0, r2
   81388:	4318      	orrlt	r0, r3
   8138a:	4770      	bx	lr
   8138c:	f092 0f00 	teq	r2, #0
   81390:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   81394:	bf06      	itte	eq
   81396:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8139a:	3201      	addeq	r2, #1
   8139c:	3b01      	subne	r3, #1
   8139e:	e7b5      	b.n	8130c <__addsf3+0x58>
   813a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   813a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   813a8:	bf18      	it	ne
   813aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   813ae:	d021      	beq.n	813f4 <__addsf3+0x140>
   813b0:	ea92 0f03 	teq	r2, r3
   813b4:	d004      	beq.n	813c0 <__addsf3+0x10c>
   813b6:	f092 0f00 	teq	r2, #0
   813ba:	bf08      	it	eq
   813bc:	4608      	moveq	r0, r1
   813be:	4770      	bx	lr
   813c0:	ea90 0f01 	teq	r0, r1
   813c4:	bf1c      	itt	ne
   813c6:	2000      	movne	r0, #0
   813c8:	4770      	bxne	lr
   813ca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   813ce:	d104      	bne.n	813da <__addsf3+0x126>
   813d0:	0040      	lsls	r0, r0, #1
   813d2:	bf28      	it	cs
   813d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   813d8:	4770      	bx	lr
   813da:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   813de:	bf3c      	itt	cc
   813e0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   813e4:	4770      	bxcc	lr
   813e6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   813ea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   813ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   813f2:	4770      	bx	lr
   813f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   813f8:	bf16      	itet	ne
   813fa:	4608      	movne	r0, r1
   813fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81400:	4601      	movne	r1, r0
   81402:	0242      	lsls	r2, r0, #9
   81404:	bf06      	itte	eq
   81406:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8140a:	ea90 0f01 	teqeq	r0, r1
   8140e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81412:	4770      	bx	lr

00081414 <__aeabi_ui2f>:
   81414:	f04f 0300 	mov.w	r3, #0
   81418:	e004      	b.n	81424 <__aeabi_i2f+0x8>
   8141a:	bf00      	nop

0008141c <__aeabi_i2f>:
   8141c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81420:	bf48      	it	mi
   81422:	4240      	negmi	r0, r0
   81424:	ea5f 0c00 	movs.w	ip, r0
   81428:	bf08      	it	eq
   8142a:	4770      	bxeq	lr
   8142c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81430:	4601      	mov	r1, r0
   81432:	f04f 0000 	mov.w	r0, #0
   81436:	e01c      	b.n	81472 <__aeabi_l2f+0x2a>

00081438 <__aeabi_ul2f>:
   81438:	ea50 0201 	orrs.w	r2, r0, r1
   8143c:	bf08      	it	eq
   8143e:	4770      	bxeq	lr
   81440:	f04f 0300 	mov.w	r3, #0
   81444:	e00a      	b.n	8145c <__aeabi_l2f+0x14>
   81446:	bf00      	nop

00081448 <__aeabi_l2f>:
   81448:	ea50 0201 	orrs.w	r2, r0, r1
   8144c:	bf08      	it	eq
   8144e:	4770      	bxeq	lr
   81450:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81454:	d502      	bpl.n	8145c <__aeabi_l2f+0x14>
   81456:	4240      	negs	r0, r0
   81458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8145c:	ea5f 0c01 	movs.w	ip, r1
   81460:	bf02      	ittt	eq
   81462:	4684      	moveq	ip, r0
   81464:	4601      	moveq	r1, r0
   81466:	2000      	moveq	r0, #0
   81468:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   8146c:	bf08      	it	eq
   8146e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81472:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   81476:	fabc f28c 	clz	r2, ip
   8147a:	3a08      	subs	r2, #8
   8147c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81480:	db10      	blt.n	814a4 <__aeabi_l2f+0x5c>
   81482:	fa01 fc02 	lsl.w	ip, r1, r2
   81486:	4463      	add	r3, ip
   81488:	fa00 fc02 	lsl.w	ip, r0, r2
   8148c:	f1c2 0220 	rsb	r2, r2, #32
   81490:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81494:	fa20 f202 	lsr.w	r2, r0, r2
   81498:	eb43 0002 	adc.w	r0, r3, r2
   8149c:	bf08      	it	eq
   8149e:	f020 0001 	biceq.w	r0, r0, #1
   814a2:	4770      	bx	lr
   814a4:	f102 0220 	add.w	r2, r2, #32
   814a8:	fa01 fc02 	lsl.w	ip, r1, r2
   814ac:	f1c2 0220 	rsb	r2, r2, #32
   814b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   814b4:	fa21 f202 	lsr.w	r2, r1, r2
   814b8:	eb43 0002 	adc.w	r0, r3, r2
   814bc:	bf08      	it	eq
   814be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   814c2:	4770      	bx	lr

000814c4 <__aeabi_fmul>:
   814c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
   814c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   814cc:	bf1e      	ittt	ne
   814ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   814d2:	ea92 0f0c 	teqne	r2, ip
   814d6:	ea93 0f0c 	teqne	r3, ip
   814da:	d06f      	beq.n	815bc <__aeabi_fmul+0xf8>
   814dc:	441a      	add	r2, r3
   814de:	ea80 0c01 	eor.w	ip, r0, r1
   814e2:	0240      	lsls	r0, r0, #9
   814e4:	bf18      	it	ne
   814e6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   814ea:	d01e      	beq.n	8152a <__aeabi_fmul+0x66>
   814ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   814f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   814f4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   814f8:	fba0 3101 	umull	r3, r1, r0, r1
   814fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81500:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81504:	bf3e      	ittt	cc
   81506:	0049      	lslcc	r1, r1, #1
   81508:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   8150c:	005b      	lslcc	r3, r3, #1
   8150e:	ea40 0001 	orr.w	r0, r0, r1
   81512:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   81516:	2afd      	cmp	r2, #253	; 0xfd
   81518:	d81d      	bhi.n	81556 <__aeabi_fmul+0x92>
   8151a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8151e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81522:	bf08      	it	eq
   81524:	f020 0001 	biceq.w	r0, r0, #1
   81528:	4770      	bx	lr
   8152a:	f090 0f00 	teq	r0, #0
   8152e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81532:	bf08      	it	eq
   81534:	0249      	lsleq	r1, r1, #9
   81536:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8153a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8153e:	3a7f      	subs	r2, #127	; 0x7f
   81540:	bfc2      	ittt	gt
   81542:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81546:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8154a:	4770      	bxgt	lr
   8154c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81550:	f04f 0300 	mov.w	r3, #0
   81554:	3a01      	subs	r2, #1
   81556:	dc5d      	bgt.n	81614 <__aeabi_fmul+0x150>
   81558:	f112 0f19 	cmn.w	r2, #25
   8155c:	bfdc      	itt	le
   8155e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81562:	4770      	bxle	lr
   81564:	f1c2 0200 	rsb	r2, r2, #0
   81568:	0041      	lsls	r1, r0, #1
   8156a:	fa21 f102 	lsr.w	r1, r1, r2
   8156e:	f1c2 0220 	rsb	r2, r2, #32
   81572:	fa00 fc02 	lsl.w	ip, r0, r2
   81576:	ea5f 0031 	movs.w	r0, r1, rrx
   8157a:	f140 0000 	adc.w	r0, r0, #0
   8157e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81582:	bf08      	it	eq
   81584:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81588:	4770      	bx	lr
   8158a:	f092 0f00 	teq	r2, #0
   8158e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81592:	bf02      	ittt	eq
   81594:	0040      	lsleq	r0, r0, #1
   81596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8159a:	3a01      	subeq	r2, #1
   8159c:	d0f9      	beq.n	81592 <__aeabi_fmul+0xce>
   8159e:	ea40 000c 	orr.w	r0, r0, ip
   815a2:	f093 0f00 	teq	r3, #0
   815a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   815aa:	bf02      	ittt	eq
   815ac:	0049      	lsleq	r1, r1, #1
   815ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   815b2:	3b01      	subeq	r3, #1
   815b4:	d0f9      	beq.n	815aa <__aeabi_fmul+0xe6>
   815b6:	ea41 010c 	orr.w	r1, r1, ip
   815ba:	e78f      	b.n	814dc <__aeabi_fmul+0x18>
   815bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   815c0:	ea92 0f0c 	teq	r2, ip
   815c4:	bf18      	it	ne
   815c6:	ea93 0f0c 	teqne	r3, ip
   815ca:	d00a      	beq.n	815e2 <__aeabi_fmul+0x11e>
   815cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   815d0:	bf18      	it	ne
   815d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   815d6:	d1d8      	bne.n	8158a <__aeabi_fmul+0xc6>
   815d8:	ea80 0001 	eor.w	r0, r0, r1
   815dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   815e0:	4770      	bx	lr
   815e2:	f090 0f00 	teq	r0, #0
   815e6:	bf17      	itett	ne
   815e8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   815ec:	4608      	moveq	r0, r1
   815ee:	f091 0f00 	teqne	r1, #0
   815f2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   815f6:	d014      	beq.n	81622 <__aeabi_fmul+0x15e>
   815f8:	ea92 0f0c 	teq	r2, ip
   815fc:	d101      	bne.n	81602 <__aeabi_fmul+0x13e>
   815fe:	0242      	lsls	r2, r0, #9
   81600:	d10f      	bne.n	81622 <__aeabi_fmul+0x15e>
   81602:	ea93 0f0c 	teq	r3, ip
   81606:	d103      	bne.n	81610 <__aeabi_fmul+0x14c>
   81608:	024b      	lsls	r3, r1, #9
   8160a:	bf18      	it	ne
   8160c:	4608      	movne	r0, r1
   8160e:	d108      	bne.n	81622 <__aeabi_fmul+0x15e>
   81610:	ea80 0001 	eor.w	r0, r0, r1
   81614:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   81618:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8161c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81620:	4770      	bx	lr
   81622:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81626:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8162a:	4770      	bx	lr

0008162c <__aeabi_fdiv>:
   8162c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81630:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81634:	bf1e      	ittt	ne
   81636:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8163a:	ea92 0f0c 	teqne	r2, ip
   8163e:	ea93 0f0c 	teqne	r3, ip
   81642:	d069      	beq.n	81718 <__aeabi_fdiv+0xec>
   81644:	eba2 0203 	sub.w	r2, r2, r3
   81648:	ea80 0c01 	eor.w	ip, r0, r1
   8164c:	0249      	lsls	r1, r1, #9
   8164e:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81652:	d037      	beq.n	816c4 <__aeabi_fdiv+0x98>
   81654:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81658:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   8165c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81660:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81664:	428b      	cmp	r3, r1
   81666:	bf38      	it	cc
   81668:	005b      	lslcc	r3, r3, #1
   8166a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8166e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81672:	428b      	cmp	r3, r1
   81674:	bf24      	itt	cs
   81676:	1a5b      	subcs	r3, r3, r1
   81678:	ea40 000c 	orrcs.w	r0, r0, ip
   8167c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81680:	bf24      	itt	cs
   81682:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   81686:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8168a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8168e:	bf24      	itt	cs
   81690:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81694:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81698:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   8169c:	bf24      	itt	cs
   8169e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   816a2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   816a6:	011b      	lsls	r3, r3, #4
   816a8:	bf18      	it	ne
   816aa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   816ae:	d1e0      	bne.n	81672 <__aeabi_fdiv+0x46>
   816b0:	2afd      	cmp	r2, #253	; 0xfd
   816b2:	f63f af50 	bhi.w	81556 <__aeabi_fmul+0x92>
   816b6:	428b      	cmp	r3, r1
   816b8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   816bc:	bf08      	it	eq
   816be:	f020 0001 	biceq.w	r0, r0, #1
   816c2:	4770      	bx	lr
   816c4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   816c8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   816cc:	327f      	adds	r2, #127	; 0x7f
   816ce:	bfc2      	ittt	gt
   816d0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   816d4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   816d8:	4770      	bxgt	lr
   816da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   816de:	f04f 0300 	mov.w	r3, #0
   816e2:	3a01      	subs	r2, #1
   816e4:	e737      	b.n	81556 <__aeabi_fmul+0x92>
   816e6:	f092 0f00 	teq	r2, #0
   816ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   816ee:	bf02      	ittt	eq
   816f0:	0040      	lsleq	r0, r0, #1
   816f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   816f6:	3a01      	subeq	r2, #1
   816f8:	d0f9      	beq.n	816ee <__aeabi_fdiv+0xc2>
   816fa:	ea40 000c 	orr.w	r0, r0, ip
   816fe:	f093 0f00 	teq	r3, #0
   81702:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   81706:	bf02      	ittt	eq
   81708:	0049      	lsleq	r1, r1, #1
   8170a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8170e:	3b01      	subeq	r3, #1
   81710:	d0f9      	beq.n	81706 <__aeabi_fdiv+0xda>
   81712:	ea41 010c 	orr.w	r1, r1, ip
   81716:	e795      	b.n	81644 <__aeabi_fdiv+0x18>
   81718:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8171c:	ea92 0f0c 	teq	r2, ip
   81720:	d108      	bne.n	81734 <__aeabi_fdiv+0x108>
   81722:	0242      	lsls	r2, r0, #9
   81724:	f47f af7d 	bne.w	81622 <__aeabi_fmul+0x15e>
   81728:	ea93 0f0c 	teq	r3, ip
   8172c:	f47f af70 	bne.w	81610 <__aeabi_fmul+0x14c>
   81730:	4608      	mov	r0, r1
   81732:	e776      	b.n	81622 <__aeabi_fmul+0x15e>
   81734:	ea93 0f0c 	teq	r3, ip
   81738:	d104      	bne.n	81744 <__aeabi_fdiv+0x118>
   8173a:	024b      	lsls	r3, r1, #9
   8173c:	f43f af4c 	beq.w	815d8 <__aeabi_fmul+0x114>
   81740:	4608      	mov	r0, r1
   81742:	e76e      	b.n	81622 <__aeabi_fmul+0x15e>
   81744:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81748:	bf18      	it	ne
   8174a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8174e:	d1ca      	bne.n	816e6 <__aeabi_fdiv+0xba>
   81750:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81754:	f47f af5c 	bne.w	81610 <__aeabi_fmul+0x14c>
   81758:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   8175c:	f47f af3c 	bne.w	815d8 <__aeabi_fmul+0x114>
   81760:	e75f      	b.n	81622 <__aeabi_fmul+0x15e>
   81762:	bf00      	nop

00081764 <__aeabi_f2uiz>:
   81764:	0042      	lsls	r2, r0, #1
   81766:	d20e      	bcs.n	81786 <__aeabi_f2uiz+0x22>
   81768:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8176c:	d30b      	bcc.n	81786 <__aeabi_f2uiz+0x22>
   8176e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81772:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   81776:	d409      	bmi.n	8178c <__aeabi_f2uiz+0x28>
   81778:	ea4f 2300 	mov.w	r3, r0, lsl #8
   8177c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81780:	fa23 f002 	lsr.w	r0, r3, r2
   81784:	4770      	bx	lr
   81786:	f04f 0000 	mov.w	r0, #0
   8178a:	4770      	bx	lr
   8178c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81790:	d101      	bne.n	81796 <__aeabi_f2uiz+0x32>
   81792:	0242      	lsls	r2, r0, #9
   81794:	d102      	bne.n	8179c <__aeabi_f2uiz+0x38>
   81796:	f04f 30ff 	mov.w	r0, #4294967295
   8179a:	4770      	bx	lr
   8179c:	f04f 0000 	mov.w	r0, #0
   817a0:	4770      	bx	lr
   817a2:	bf00      	nop

000817a4 <__libc_init_array>:
   817a4:	b570      	push	{r4, r5, r6, lr}
   817a6:	4e0f      	ldr	r6, [pc, #60]	; (817e4 <__libc_init_array+0x40>)
   817a8:	4d0f      	ldr	r5, [pc, #60]	; (817e8 <__libc_init_array+0x44>)
   817aa:	1b76      	subs	r6, r6, r5
   817ac:	10b6      	asrs	r6, r6, #2
   817ae:	bf18      	it	ne
   817b0:	2400      	movne	r4, #0
   817b2:	d005      	beq.n	817c0 <__libc_init_array+0x1c>
   817b4:	3401      	adds	r4, #1
   817b6:	f855 3b04 	ldr.w	r3, [r5], #4
   817ba:	4798      	blx	r3
   817bc:	42a6      	cmp	r6, r4
   817be:	d1f9      	bne.n	817b4 <__libc_init_array+0x10>
   817c0:	4e0a      	ldr	r6, [pc, #40]	; (817ec <__libc_init_array+0x48>)
   817c2:	4d0b      	ldr	r5, [pc, #44]	; (817f0 <__libc_init_array+0x4c>)
   817c4:	f003 f864 	bl	84890 <_init>
   817c8:	1b76      	subs	r6, r6, r5
   817ca:	10b6      	asrs	r6, r6, #2
   817cc:	bf18      	it	ne
   817ce:	2400      	movne	r4, #0
   817d0:	d006      	beq.n	817e0 <__libc_init_array+0x3c>
   817d2:	3401      	adds	r4, #1
   817d4:	f855 3b04 	ldr.w	r3, [r5], #4
   817d8:	4798      	blx	r3
   817da:	42a6      	cmp	r6, r4
   817dc:	d1f9      	bne.n	817d2 <__libc_init_array+0x2e>
   817de:	bd70      	pop	{r4, r5, r6, pc}
   817e0:	bd70      	pop	{r4, r5, r6, pc}
   817e2:	bf00      	nop
   817e4:	0008489c 	.word	0x0008489c
   817e8:	0008489c 	.word	0x0008489c
   817ec:	000848a4 	.word	0x000848a4
   817f0:	0008489c 	.word	0x0008489c

000817f4 <iprintf>:
   817f4:	b40f      	push	{r0, r1, r2, r3}
   817f6:	b510      	push	{r4, lr}
   817f8:	4b07      	ldr	r3, [pc, #28]	; (81818 <iprintf+0x24>)
   817fa:	b082      	sub	sp, #8
   817fc:	ac04      	add	r4, sp, #16
   817fe:	f854 2b04 	ldr.w	r2, [r4], #4
   81802:	6818      	ldr	r0, [r3, #0]
   81804:	4623      	mov	r3, r4
   81806:	6881      	ldr	r1, [r0, #8]
   81808:	9401      	str	r4, [sp, #4]
   8180a:	f000 f9e9 	bl	81be0 <_vfiprintf_r>
   8180e:	b002      	add	sp, #8
   81810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81814:	b004      	add	sp, #16
   81816:	4770      	bx	lr
   81818:	20070134 	.word	0x20070134

0008181c <memset>:
   8181c:	b470      	push	{r4, r5, r6}
   8181e:	0786      	lsls	r6, r0, #30
   81820:	d046      	beq.n	818b0 <memset+0x94>
   81822:	1e54      	subs	r4, r2, #1
   81824:	2a00      	cmp	r2, #0
   81826:	d041      	beq.n	818ac <memset+0x90>
   81828:	b2ca      	uxtb	r2, r1
   8182a:	4603      	mov	r3, r0
   8182c:	e002      	b.n	81834 <memset+0x18>
   8182e:	f114 34ff 	adds.w	r4, r4, #4294967295
   81832:	d33b      	bcc.n	818ac <memset+0x90>
   81834:	f803 2b01 	strb.w	r2, [r3], #1
   81838:	079d      	lsls	r5, r3, #30
   8183a:	d1f8      	bne.n	8182e <memset+0x12>
   8183c:	2c03      	cmp	r4, #3
   8183e:	d92e      	bls.n	8189e <memset+0x82>
   81840:	b2cd      	uxtb	r5, r1
   81842:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81846:	2c0f      	cmp	r4, #15
   81848:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8184c:	d919      	bls.n	81882 <memset+0x66>
   8184e:	4626      	mov	r6, r4
   81850:	f103 0210 	add.w	r2, r3, #16
   81854:	3e10      	subs	r6, #16
   81856:	2e0f      	cmp	r6, #15
   81858:	f842 5c10 	str.w	r5, [r2, #-16]
   8185c:	f842 5c0c 	str.w	r5, [r2, #-12]
   81860:	f842 5c08 	str.w	r5, [r2, #-8]
   81864:	f842 5c04 	str.w	r5, [r2, #-4]
   81868:	f102 0210 	add.w	r2, r2, #16
   8186c:	d8f2      	bhi.n	81854 <memset+0x38>
   8186e:	f1a4 0210 	sub.w	r2, r4, #16
   81872:	f022 020f 	bic.w	r2, r2, #15
   81876:	f004 040f 	and.w	r4, r4, #15
   8187a:	3210      	adds	r2, #16
   8187c:	2c03      	cmp	r4, #3
   8187e:	4413      	add	r3, r2
   81880:	d90d      	bls.n	8189e <memset+0x82>
   81882:	461e      	mov	r6, r3
   81884:	4622      	mov	r2, r4
   81886:	3a04      	subs	r2, #4
   81888:	2a03      	cmp	r2, #3
   8188a:	f846 5b04 	str.w	r5, [r6], #4
   8188e:	d8fa      	bhi.n	81886 <memset+0x6a>
   81890:	1f22      	subs	r2, r4, #4
   81892:	f022 0203 	bic.w	r2, r2, #3
   81896:	3204      	adds	r2, #4
   81898:	4413      	add	r3, r2
   8189a:	f004 0403 	and.w	r4, r4, #3
   8189e:	b12c      	cbz	r4, 818ac <memset+0x90>
   818a0:	b2c9      	uxtb	r1, r1
   818a2:	441c      	add	r4, r3
   818a4:	f803 1b01 	strb.w	r1, [r3], #1
   818a8:	429c      	cmp	r4, r3
   818aa:	d1fb      	bne.n	818a4 <memset+0x88>
   818ac:	bc70      	pop	{r4, r5, r6}
   818ae:	4770      	bx	lr
   818b0:	4614      	mov	r4, r2
   818b2:	4603      	mov	r3, r0
   818b4:	e7c2      	b.n	8183c <memset+0x20>
   818b6:	bf00      	nop

000818b8 <_puts_r>:
   818b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   818ba:	4605      	mov	r5, r0
   818bc:	b089      	sub	sp, #36	; 0x24
   818be:	4608      	mov	r0, r1
   818c0:	460c      	mov	r4, r1
   818c2:	2701      	movs	r7, #1
   818c4:	f000 f91e 	bl	81b04 <strlen>
   818c8:	2602      	movs	r6, #2
   818ca:	19c3      	adds	r3, r0, r7
   818cc:	4920      	ldr	r1, [pc, #128]	; (81950 <_puts_r+0x98>)
   818ce:	9303      	str	r3, [sp, #12]
   818d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   818d2:	aa04      	add	r2, sp, #16
   818d4:	9404      	str	r4, [sp, #16]
   818d6:	9005      	str	r0, [sp, #20]
   818d8:	68ac      	ldr	r4, [r5, #8]
   818da:	9707      	str	r7, [sp, #28]
   818dc:	9602      	str	r6, [sp, #8]
   818de:	9106      	str	r1, [sp, #24]
   818e0:	9201      	str	r2, [sp, #4]
   818e2:	b353      	cbz	r3, 8193a <_puts_r+0x82>
   818e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   818e6:	f013 0f01 	tst.w	r3, #1
   818ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   818ee:	b29a      	uxth	r2, r3
   818f0:	d101      	bne.n	818f6 <_puts_r+0x3e>
   818f2:	0590      	lsls	r0, r2, #22
   818f4:	d525      	bpl.n	81942 <_puts_r+0x8a>
   818f6:	0491      	lsls	r1, r2, #18
   818f8:	d406      	bmi.n	81908 <_puts_r+0x50>
   818fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
   818fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   81900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   81904:	81a3      	strh	r3, [r4, #12]
   81906:	6662      	str	r2, [r4, #100]	; 0x64
   81908:	4628      	mov	r0, r5
   8190a:	aa01      	add	r2, sp, #4
   8190c:	4621      	mov	r1, r4
   8190e:	f001 fb63 	bl	82fd8 <__sfvwrite_r>
   81912:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81914:	2800      	cmp	r0, #0
   81916:	bf0c      	ite	eq
   81918:	250a      	moveq	r5, #10
   8191a:	f04f 35ff 	movne.w	r5, #4294967295
   8191e:	07da      	lsls	r2, r3, #31
   81920:	d402      	bmi.n	81928 <_puts_r+0x70>
   81922:	89a3      	ldrh	r3, [r4, #12]
   81924:	059b      	lsls	r3, r3, #22
   81926:	d502      	bpl.n	8192e <_puts_r+0x76>
   81928:	4628      	mov	r0, r5
   8192a:	b009      	add	sp, #36	; 0x24
   8192c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8192e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81930:	f001 fd08 	bl	83344 <__retarget_lock_release_recursive>
   81934:	4628      	mov	r0, r5
   81936:	b009      	add	sp, #36	; 0x24
   81938:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8193a:	4628      	mov	r0, r5
   8193c:	f001 f940 	bl	82bc0 <__sinit>
   81940:	e7d0      	b.n	818e4 <_puts_r+0x2c>
   81942:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81944:	f001 fcfc 	bl	83340 <__retarget_lock_acquire_recursive>
   81948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8194c:	b29a      	uxth	r2, r3
   8194e:	e7d2      	b.n	818f6 <_puts_r+0x3e>
   81950:	00084728 	.word	0x00084728

00081954 <puts>:
   81954:	4b02      	ldr	r3, [pc, #8]	; (81960 <puts+0xc>)
   81956:	4601      	mov	r1, r0
   81958:	6818      	ldr	r0, [r3, #0]
   8195a:	f7ff bfad 	b.w	818b8 <_puts_r>
   8195e:	bf00      	nop
   81960:	20070134 	.word	0x20070134

00081964 <setbuf>:
   81964:	2900      	cmp	r1, #0
   81966:	bf0c      	ite	eq
   81968:	2202      	moveq	r2, #2
   8196a:	2200      	movne	r2, #0
   8196c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81970:	f000 b800 	b.w	81974 <setvbuf>

00081974 <setvbuf>:
   81974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81978:	4d61      	ldr	r5, [pc, #388]	; (81b00 <setvbuf+0x18c>)
   8197a:	b083      	sub	sp, #12
   8197c:	682d      	ldr	r5, [r5, #0]
   8197e:	4604      	mov	r4, r0
   81980:	460f      	mov	r7, r1
   81982:	4690      	mov	r8, r2
   81984:	461e      	mov	r6, r3
   81986:	b115      	cbz	r5, 8198e <setvbuf+0x1a>
   81988:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8198a:	2b00      	cmp	r3, #0
   8198c:	d064      	beq.n	81a58 <setvbuf+0xe4>
   8198e:	f1b8 0f02 	cmp.w	r8, #2
   81992:	d006      	beq.n	819a2 <setvbuf+0x2e>
   81994:	f1b8 0f01 	cmp.w	r8, #1
   81998:	f200 809f 	bhi.w	81ada <setvbuf+0x166>
   8199c:	2e00      	cmp	r6, #0
   8199e:	f2c0 809c 	blt.w	81ada <setvbuf+0x166>
   819a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   819a4:	07d8      	lsls	r0, r3, #31
   819a6:	d534      	bpl.n	81a12 <setvbuf+0x9e>
   819a8:	4621      	mov	r1, r4
   819aa:	4628      	mov	r0, r5
   819ac:	f001 f8b0 	bl	82b10 <_fflush_r>
   819b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   819b2:	b141      	cbz	r1, 819c6 <setvbuf+0x52>
   819b4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   819b8:	4299      	cmp	r1, r3
   819ba:	d002      	beq.n	819c2 <setvbuf+0x4e>
   819bc:	4628      	mov	r0, r5
   819be:	f001 fa25 	bl	82e0c <_free_r>
   819c2:	2300      	movs	r3, #0
   819c4:	6323      	str	r3, [r4, #48]	; 0x30
   819c6:	2200      	movs	r2, #0
   819c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   819cc:	61a2      	str	r2, [r4, #24]
   819ce:	6062      	str	r2, [r4, #4]
   819d0:	061a      	lsls	r2, r3, #24
   819d2:	d43a      	bmi.n	81a4a <setvbuf+0xd6>
   819d4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   819d8:	f023 0303 	bic.w	r3, r3, #3
   819dc:	f1b8 0f02 	cmp.w	r8, #2
   819e0:	81a3      	strh	r3, [r4, #12]
   819e2:	d01d      	beq.n	81a20 <setvbuf+0xac>
   819e4:	ab01      	add	r3, sp, #4
   819e6:	466a      	mov	r2, sp
   819e8:	4621      	mov	r1, r4
   819ea:	4628      	mov	r0, r5
   819ec:	f001 fcac 	bl	83348 <__swhatbuf_r>
   819f0:	89a3      	ldrh	r3, [r4, #12]
   819f2:	4318      	orrs	r0, r3
   819f4:	81a0      	strh	r0, [r4, #12]
   819f6:	2e00      	cmp	r6, #0
   819f8:	d132      	bne.n	81a60 <setvbuf+0xec>
   819fa:	9e00      	ldr	r6, [sp, #0]
   819fc:	4630      	mov	r0, r6
   819fe:	f001 fd1b 	bl	83438 <malloc>
   81a02:	4607      	mov	r7, r0
   81a04:	2800      	cmp	r0, #0
   81a06:	d06b      	beq.n	81ae0 <setvbuf+0x16c>
   81a08:	89a3      	ldrh	r3, [r4, #12]
   81a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81a0e:	81a3      	strh	r3, [r4, #12]
   81a10:	e028      	b.n	81a64 <setvbuf+0xf0>
   81a12:	89a3      	ldrh	r3, [r4, #12]
   81a14:	0599      	lsls	r1, r3, #22
   81a16:	d4c7      	bmi.n	819a8 <setvbuf+0x34>
   81a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81a1a:	f001 fc91 	bl	83340 <__retarget_lock_acquire_recursive>
   81a1e:	e7c3      	b.n	819a8 <setvbuf+0x34>
   81a20:	2500      	movs	r5, #0
   81a22:	2600      	movs	r6, #0
   81a24:	2001      	movs	r0, #1
   81a26:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81a2c:	f043 0302 	orr.w	r3, r3, #2
   81a30:	60a6      	str	r6, [r4, #8]
   81a32:	07ce      	lsls	r6, r1, #31
   81a34:	81a3      	strh	r3, [r4, #12]
   81a36:	6160      	str	r0, [r4, #20]
   81a38:	6022      	str	r2, [r4, #0]
   81a3a:	6122      	str	r2, [r4, #16]
   81a3c:	d401      	bmi.n	81a42 <setvbuf+0xce>
   81a3e:	0598      	lsls	r0, r3, #22
   81a40:	d53e      	bpl.n	81ac0 <setvbuf+0x14c>
   81a42:	4628      	mov	r0, r5
   81a44:	b003      	add	sp, #12
   81a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81a4a:	6921      	ldr	r1, [r4, #16]
   81a4c:	4628      	mov	r0, r5
   81a4e:	f001 f9dd 	bl	82e0c <_free_r>
   81a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81a56:	e7bd      	b.n	819d4 <setvbuf+0x60>
   81a58:	4628      	mov	r0, r5
   81a5a:	f001 f8b1 	bl	82bc0 <__sinit>
   81a5e:	e796      	b.n	8198e <setvbuf+0x1a>
   81a60:	2f00      	cmp	r7, #0
   81a62:	d0cb      	beq.n	819fc <setvbuf+0x88>
   81a64:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81a66:	2b00      	cmp	r3, #0
   81a68:	d033      	beq.n	81ad2 <setvbuf+0x15e>
   81a6a:	9b00      	ldr	r3, [sp, #0]
   81a6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81a70:	429e      	cmp	r6, r3
   81a72:	bf1c      	itt	ne
   81a74:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81a78:	81a2      	strhne	r2, [r4, #12]
   81a7a:	f1b8 0f01 	cmp.w	r8, #1
   81a7e:	bf04      	itt	eq
   81a80:	f042 0201 	orreq.w	r2, r2, #1
   81a84:	81a2      	strheq	r2, [r4, #12]
   81a86:	b292      	uxth	r2, r2
   81a88:	f012 0308 	ands.w	r3, r2, #8
   81a8c:	6027      	str	r7, [r4, #0]
   81a8e:	6127      	str	r7, [r4, #16]
   81a90:	6166      	str	r6, [r4, #20]
   81a92:	d00e      	beq.n	81ab2 <setvbuf+0x13e>
   81a94:	07d1      	lsls	r1, r2, #31
   81a96:	d51a      	bpl.n	81ace <setvbuf+0x15a>
   81a98:	2300      	movs	r3, #0
   81a9a:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81a9c:	4276      	negs	r6, r6
   81a9e:	f015 0501 	ands.w	r5, r5, #1
   81aa2:	61a6      	str	r6, [r4, #24]
   81aa4:	60a3      	str	r3, [r4, #8]
   81aa6:	d009      	beq.n	81abc <setvbuf+0x148>
   81aa8:	2500      	movs	r5, #0
   81aaa:	4628      	mov	r0, r5
   81aac:	b003      	add	sp, #12
   81aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81ab2:	60a3      	str	r3, [r4, #8]
   81ab4:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81ab6:	f015 0501 	ands.w	r5, r5, #1
   81aba:	d1f5      	bne.n	81aa8 <setvbuf+0x134>
   81abc:	0593      	lsls	r3, r2, #22
   81abe:	d4c0      	bmi.n	81a42 <setvbuf+0xce>
   81ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81ac2:	f001 fc3f 	bl	83344 <__retarget_lock_release_recursive>
   81ac6:	4628      	mov	r0, r5
   81ac8:	b003      	add	sp, #12
   81aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81ace:	60a6      	str	r6, [r4, #8]
   81ad0:	e7f0      	b.n	81ab4 <setvbuf+0x140>
   81ad2:	4628      	mov	r0, r5
   81ad4:	f001 f874 	bl	82bc0 <__sinit>
   81ad8:	e7c7      	b.n	81a6a <setvbuf+0xf6>
   81ada:	f04f 35ff 	mov.w	r5, #4294967295
   81ade:	e7b0      	b.n	81a42 <setvbuf+0xce>
   81ae0:	f8dd 9000 	ldr.w	r9, [sp]
   81ae4:	45b1      	cmp	r9, r6
   81ae6:	d004      	beq.n	81af2 <setvbuf+0x17e>
   81ae8:	4648      	mov	r0, r9
   81aea:	f001 fca5 	bl	83438 <malloc>
   81aee:	4607      	mov	r7, r0
   81af0:	b920      	cbnz	r0, 81afc <setvbuf+0x188>
   81af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81af6:	f04f 35ff 	mov.w	r5, #4294967295
   81afa:	e792      	b.n	81a22 <setvbuf+0xae>
   81afc:	464e      	mov	r6, r9
   81afe:	e783      	b.n	81a08 <setvbuf+0x94>
   81b00:	20070134 	.word	0x20070134

00081b04 <strlen>:
   81b04:	f020 0103 	bic.w	r1, r0, #3
   81b08:	f010 0003 	ands.w	r0, r0, #3
   81b0c:	f1c0 0000 	rsb	r0, r0, #0
   81b10:	f851 3b04 	ldr.w	r3, [r1], #4
   81b14:	f100 0c04 	add.w	ip, r0, #4
   81b18:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81b1c:	f06f 0200 	mvn.w	r2, #0
   81b20:	bf1c      	itt	ne
   81b22:	fa22 f20c 	lsrne.w	r2, r2, ip
   81b26:	4313      	orrne	r3, r2
   81b28:	f04f 0c01 	mov.w	ip, #1
   81b2c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81b30:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81b34:	eba3 020c 	sub.w	r2, r3, ip
   81b38:	ea22 0203 	bic.w	r2, r2, r3
   81b3c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81b40:	bf04      	itt	eq
   81b42:	f851 3b04 	ldreq.w	r3, [r1], #4
   81b46:	3004      	addeq	r0, #4
   81b48:	d0f4      	beq.n	81b34 <strlen+0x30>
   81b4a:	f1c2 0100 	rsb	r1, r2, #0
   81b4e:	ea02 0201 	and.w	r2, r2, r1
   81b52:	fab2 f282 	clz	r2, r2
   81b56:	f1c2 021f 	rsb	r2, r2, #31
   81b5a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   81b5e:	4770      	bx	lr

00081b60 <__sprint_r.part.0>:
   81b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81b64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81b66:	4693      	mov	fp, r2
   81b68:	049c      	lsls	r4, r3, #18
   81b6a:	d52f      	bpl.n	81bcc <__sprint_r.part.0+0x6c>
   81b6c:	6893      	ldr	r3, [r2, #8]
   81b6e:	6812      	ldr	r2, [r2, #0]
   81b70:	b353      	cbz	r3, 81bc8 <__sprint_r.part.0+0x68>
   81b72:	460e      	mov	r6, r1
   81b74:	4607      	mov	r7, r0
   81b76:	f102 0908 	add.w	r9, r2, #8
   81b7a:	e919 0420 	ldmdb	r9, {r5, sl}
   81b7e:	ea5f 089a 	movs.w	r8, sl, lsr #2
   81b82:	d017      	beq.n	81bb4 <__sprint_r.part.0+0x54>
   81b84:	2400      	movs	r4, #0
   81b86:	3d04      	subs	r5, #4
   81b88:	e001      	b.n	81b8e <__sprint_r.part.0+0x2e>
   81b8a:	45a0      	cmp	r8, r4
   81b8c:	d010      	beq.n	81bb0 <__sprint_r.part.0+0x50>
   81b8e:	4632      	mov	r2, r6
   81b90:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81b94:	4638      	mov	r0, r7
   81b96:	f001 f8b5 	bl	82d04 <_fputwc_r>
   81b9a:	1c43      	adds	r3, r0, #1
   81b9c:	f104 0401 	add.w	r4, r4, #1
   81ba0:	d1f3      	bne.n	81b8a <__sprint_r.part.0+0x2a>
   81ba2:	2300      	movs	r3, #0
   81ba4:	f8cb 3008 	str.w	r3, [fp, #8]
   81ba8:	f8cb 3004 	str.w	r3, [fp, #4]
   81bac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bb0:	f8db 3008 	ldr.w	r3, [fp, #8]
   81bb4:	f02a 0a03 	bic.w	sl, sl, #3
   81bb8:	eba3 030a 	sub.w	r3, r3, sl
   81bbc:	f8cb 3008 	str.w	r3, [fp, #8]
   81bc0:	f109 0908 	add.w	r9, r9, #8
   81bc4:	2b00      	cmp	r3, #0
   81bc6:	d1d8      	bne.n	81b7a <__sprint_r.part.0+0x1a>
   81bc8:	2000      	movs	r0, #0
   81bca:	e7ea      	b.n	81ba2 <__sprint_r.part.0+0x42>
   81bcc:	f001 fa04 	bl	82fd8 <__sfvwrite_r>
   81bd0:	2300      	movs	r3, #0
   81bd2:	f8cb 3008 	str.w	r3, [fp, #8]
   81bd6:	f8cb 3004 	str.w	r3, [fp, #4]
   81bda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81bde:	bf00      	nop

00081be0 <_vfiprintf_r>:
   81be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81be4:	b0ad      	sub	sp, #180	; 0xb4
   81be6:	461d      	mov	r5, r3
   81be8:	468b      	mov	fp, r1
   81bea:	4690      	mov	r8, r2
   81bec:	9307      	str	r3, [sp, #28]
   81bee:	9006      	str	r0, [sp, #24]
   81bf0:	b118      	cbz	r0, 81bfa <_vfiprintf_r+0x1a>
   81bf2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81bf4:	2b00      	cmp	r3, #0
   81bf6:	f000 80f3 	beq.w	81de0 <_vfiprintf_r+0x200>
   81bfa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81bfe:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81c02:	07df      	lsls	r7, r3, #31
   81c04:	b281      	uxth	r1, r0
   81c06:	d402      	bmi.n	81c0e <_vfiprintf_r+0x2e>
   81c08:	058e      	lsls	r6, r1, #22
   81c0a:	f140 80fc 	bpl.w	81e06 <_vfiprintf_r+0x226>
   81c0e:	048c      	lsls	r4, r1, #18
   81c10:	d40a      	bmi.n	81c28 <_vfiprintf_r+0x48>
   81c12:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81c16:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81c1e:	f8ab 100c 	strh.w	r1, [fp, #12]
   81c22:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   81c26:	b289      	uxth	r1, r1
   81c28:	0708      	lsls	r0, r1, #28
   81c2a:	f140 80b3 	bpl.w	81d94 <_vfiprintf_r+0x1b4>
   81c2e:	f8db 3010 	ldr.w	r3, [fp, #16]
   81c32:	2b00      	cmp	r3, #0
   81c34:	f000 80ae 	beq.w	81d94 <_vfiprintf_r+0x1b4>
   81c38:	f001 031a 	and.w	r3, r1, #26
   81c3c:	2b0a      	cmp	r3, #10
   81c3e:	f000 80b5 	beq.w	81dac <_vfiprintf_r+0x1cc>
   81c42:	2300      	movs	r3, #0
   81c44:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81c48:	46d1      	mov	r9, sl
   81c4a:	930b      	str	r3, [sp, #44]	; 0x2c
   81c4c:	9303      	str	r3, [sp, #12]
   81c4e:	9311      	str	r3, [sp, #68]	; 0x44
   81c50:	9310      	str	r3, [sp, #64]	; 0x40
   81c52:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   81c56:	f8cd b010 	str.w	fp, [sp, #16]
   81c5a:	f898 3000 	ldrb.w	r3, [r8]
   81c5e:	4644      	mov	r4, r8
   81c60:	b1fb      	cbz	r3, 81ca2 <_vfiprintf_r+0xc2>
   81c62:	2b25      	cmp	r3, #37	; 0x25
   81c64:	d102      	bne.n	81c6c <_vfiprintf_r+0x8c>
   81c66:	e01c      	b.n	81ca2 <_vfiprintf_r+0xc2>
   81c68:	2b25      	cmp	r3, #37	; 0x25
   81c6a:	d003      	beq.n	81c74 <_vfiprintf_r+0x94>
   81c6c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81c70:	2b00      	cmp	r3, #0
   81c72:	d1f9      	bne.n	81c68 <_vfiprintf_r+0x88>
   81c74:	eba4 0508 	sub.w	r5, r4, r8
   81c78:	b19d      	cbz	r5, 81ca2 <_vfiprintf_r+0xc2>
   81c7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81c7e:	3301      	adds	r3, #1
   81c80:	442a      	add	r2, r5
   81c82:	2b07      	cmp	r3, #7
   81c84:	f8c9 8000 	str.w	r8, [r9]
   81c88:	f8c9 5004 	str.w	r5, [r9, #4]
   81c8c:	9211      	str	r2, [sp, #68]	; 0x44
   81c8e:	9310      	str	r3, [sp, #64]	; 0x40
   81c90:	dd7a      	ble.n	81d88 <_vfiprintf_r+0x1a8>
   81c92:	2a00      	cmp	r2, #0
   81c94:	f040 84b5 	bne.w	82602 <_vfiprintf_r+0xa22>
   81c98:	46d1      	mov	r9, sl
   81c9a:	9b03      	ldr	r3, [sp, #12]
   81c9c:	9210      	str	r2, [sp, #64]	; 0x40
   81c9e:	442b      	add	r3, r5
   81ca0:	9303      	str	r3, [sp, #12]
   81ca2:	7823      	ldrb	r3, [r4, #0]
   81ca4:	2b00      	cmp	r3, #0
   81ca6:	f000 83e5 	beq.w	82474 <_vfiprintf_r+0x894>
   81caa:	2000      	movs	r0, #0
   81cac:	f04f 0300 	mov.w	r3, #0
   81cb0:	f104 0801 	add.w	r8, r4, #1
   81cb4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81cb8:	7862      	ldrb	r2, [r4, #1]
   81cba:	4606      	mov	r6, r0
   81cbc:	4605      	mov	r5, r0
   81cbe:	4603      	mov	r3, r0
   81cc0:	f04f 34ff 	mov.w	r4, #4294967295
   81cc4:	f108 0801 	add.w	r8, r8, #1
   81cc8:	f1a2 0120 	sub.w	r1, r2, #32
   81ccc:	2958      	cmp	r1, #88	; 0x58
   81cce:	f200 82d9 	bhi.w	82284 <_vfiprintf_r+0x6a4>
   81cd2:	e8df f011 	tbh	[pc, r1, lsl #1]
   81cd6:	0228      	.short	0x0228
   81cd8:	02d702d7 	.word	0x02d702d7
   81cdc:	02d70230 	.word	0x02d70230
   81ce0:	02d702d7 	.word	0x02d702d7
   81ce4:	02d702d7 	.word	0x02d702d7
   81ce8:	00a002d7 	.word	0x00a002d7
   81cec:	02d70288 	.word	0x02d70288
   81cf0:	02b800a8 	.word	0x02b800a8
   81cf4:	01a602d7 	.word	0x01a602d7
   81cf8:	01ab01ab 	.word	0x01ab01ab
   81cfc:	01ab01ab 	.word	0x01ab01ab
   81d00:	01ab01ab 	.word	0x01ab01ab
   81d04:	01ab01ab 	.word	0x01ab01ab
   81d08:	02d701ab 	.word	0x02d701ab
   81d0c:	02d702d7 	.word	0x02d702d7
   81d10:	02d702d7 	.word	0x02d702d7
   81d14:	02d702d7 	.word	0x02d702d7
   81d18:	02d702d7 	.word	0x02d702d7
   81d1c:	01b902d7 	.word	0x01b902d7
   81d20:	02d702d7 	.word	0x02d702d7
   81d24:	02d702d7 	.word	0x02d702d7
   81d28:	02d702d7 	.word	0x02d702d7
   81d2c:	02d702d7 	.word	0x02d702d7
   81d30:	02d702d7 	.word	0x02d702d7
   81d34:	02d7019e 	.word	0x02d7019e
   81d38:	02d702d7 	.word	0x02d702d7
   81d3c:	02d702d7 	.word	0x02d702d7
   81d40:	02d701a2 	.word	0x02d701a2
   81d44:	025a02d7 	.word	0x025a02d7
   81d48:	02d702d7 	.word	0x02d702d7
   81d4c:	02d702d7 	.word	0x02d702d7
   81d50:	02d702d7 	.word	0x02d702d7
   81d54:	02d702d7 	.word	0x02d702d7
   81d58:	02d702d7 	.word	0x02d702d7
   81d5c:	02220261 	.word	0x02220261
   81d60:	02d702d7 	.word	0x02d702d7
   81d64:	027602d7 	.word	0x027602d7
   81d68:	02d70222 	.word	0x02d70222
   81d6c:	027b02d7 	.word	0x027b02d7
   81d70:	01fc02d7 	.word	0x01fc02d7
   81d74:	02100189 	.word	0x02100189
   81d78:	02d702d2 	.word	0x02d702d2
   81d7c:	02d70295 	.word	0x02d70295
   81d80:	02d700ad 	.word	0x02d700ad
   81d84:	023502d7 	.word	0x023502d7
   81d88:	f109 0908 	add.w	r9, r9, #8
   81d8c:	9b03      	ldr	r3, [sp, #12]
   81d8e:	442b      	add	r3, r5
   81d90:	9303      	str	r3, [sp, #12]
   81d92:	e786      	b.n	81ca2 <_vfiprintf_r+0xc2>
   81d94:	4659      	mov	r1, fp
   81d96:	9806      	ldr	r0, [sp, #24]
   81d98:	f000 fdaa 	bl	828f0 <__swsetup_r>
   81d9c:	bb18      	cbnz	r0, 81de6 <_vfiprintf_r+0x206>
   81d9e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   81da2:	f001 031a 	and.w	r3, r1, #26
   81da6:	2b0a      	cmp	r3, #10
   81da8:	f47f af4b 	bne.w	81c42 <_vfiprintf_r+0x62>
   81dac:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81db0:	2b00      	cmp	r3, #0
   81db2:	f6ff af46 	blt.w	81c42 <_vfiprintf_r+0x62>
   81db6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81dba:	07db      	lsls	r3, r3, #31
   81dbc:	d405      	bmi.n	81dca <_vfiprintf_r+0x1ea>
   81dbe:	058f      	lsls	r7, r1, #22
   81dc0:	d403      	bmi.n	81dca <_vfiprintf_r+0x1ea>
   81dc2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81dc6:	f001 fabd 	bl	83344 <__retarget_lock_release_recursive>
   81dca:	462b      	mov	r3, r5
   81dcc:	4642      	mov	r2, r8
   81dce:	4659      	mov	r1, fp
   81dd0:	9806      	ldr	r0, [sp, #24]
   81dd2:	f000 fd49 	bl	82868 <__sbprintf>
   81dd6:	9003      	str	r0, [sp, #12]
   81dd8:	9803      	ldr	r0, [sp, #12]
   81dda:	b02d      	add	sp, #180	; 0xb4
   81ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81de0:	f000 feee 	bl	82bc0 <__sinit>
   81de4:	e709      	b.n	81bfa <_vfiprintf_r+0x1a>
   81de6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81dea:	07d9      	lsls	r1, r3, #31
   81dec:	d404      	bmi.n	81df8 <_vfiprintf_r+0x218>
   81dee:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81df2:	059a      	lsls	r2, r3, #22
   81df4:	f140 84ae 	bpl.w	82754 <_vfiprintf_r+0xb74>
   81df8:	f04f 33ff 	mov.w	r3, #4294967295
   81dfc:	9303      	str	r3, [sp, #12]
   81dfe:	9803      	ldr	r0, [sp, #12]
   81e00:	b02d      	add	sp, #180	; 0xb4
   81e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81e06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81e0a:	f001 fa99 	bl	83340 <__retarget_lock_acquire_recursive>
   81e0e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81e12:	b281      	uxth	r1, r0
   81e14:	e6fb      	b.n	81c0e <_vfiprintf_r+0x2e>
   81e16:	9907      	ldr	r1, [sp, #28]
   81e18:	460a      	mov	r2, r1
   81e1a:	680d      	ldr	r5, [r1, #0]
   81e1c:	3204      	adds	r2, #4
   81e1e:	2d00      	cmp	r5, #0
   81e20:	9207      	str	r2, [sp, #28]
   81e22:	da02      	bge.n	81e2a <_vfiprintf_r+0x24a>
   81e24:	426d      	negs	r5, r5
   81e26:	f043 0304 	orr.w	r3, r3, #4
   81e2a:	f898 2000 	ldrb.w	r2, [r8]
   81e2e:	e749      	b.n	81cc4 <_vfiprintf_r+0xe4>
   81e30:	9508      	str	r5, [sp, #32]
   81e32:	069e      	lsls	r6, r3, #26
   81e34:	f100 845a 	bmi.w	826ec <_vfiprintf_r+0xb0c>
   81e38:	9907      	ldr	r1, [sp, #28]
   81e3a:	06dd      	lsls	r5, r3, #27
   81e3c:	460a      	mov	r2, r1
   81e3e:	f100 83ef 	bmi.w	82620 <_vfiprintf_r+0xa40>
   81e42:	0658      	lsls	r0, r3, #25
   81e44:	f140 83ec 	bpl.w	82620 <_vfiprintf_r+0xa40>
   81e48:	2700      	movs	r7, #0
   81e4a:	2201      	movs	r2, #1
   81e4c:	880e      	ldrh	r6, [r1, #0]
   81e4e:	3104      	adds	r1, #4
   81e50:	9107      	str	r1, [sp, #28]
   81e52:	f04f 0100 	mov.w	r1, #0
   81e56:	2500      	movs	r5, #0
   81e58:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81e5c:	1c61      	adds	r1, r4, #1
   81e5e:	f000 8117 	beq.w	82090 <_vfiprintf_r+0x4b0>
   81e62:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81e66:	9102      	str	r1, [sp, #8]
   81e68:	ea56 0107 	orrs.w	r1, r6, r7
   81e6c:	f040 8115 	bne.w	8209a <_vfiprintf_r+0x4ba>
   81e70:	2c00      	cmp	r4, #0
   81e72:	f040 835b 	bne.w	8252c <_vfiprintf_r+0x94c>
   81e76:	2a00      	cmp	r2, #0
   81e78:	f040 83b6 	bne.w	825e8 <_vfiprintf_r+0xa08>
   81e7c:	f013 0301 	ands.w	r3, r3, #1
   81e80:	9305      	str	r3, [sp, #20]
   81e82:	f000 8455 	beq.w	82730 <_vfiprintf_r+0xb50>
   81e86:	2330      	movs	r3, #48	; 0x30
   81e88:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81e8c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81e90:	9b05      	ldr	r3, [sp, #20]
   81e92:	42a3      	cmp	r3, r4
   81e94:	bfb8      	it	lt
   81e96:	4623      	movlt	r3, r4
   81e98:	9301      	str	r3, [sp, #4]
   81e9a:	b10d      	cbz	r5, 81ea0 <_vfiprintf_r+0x2c0>
   81e9c:	3301      	adds	r3, #1
   81e9e:	9301      	str	r3, [sp, #4]
   81ea0:	9b02      	ldr	r3, [sp, #8]
   81ea2:	f013 0302 	ands.w	r3, r3, #2
   81ea6:	9309      	str	r3, [sp, #36]	; 0x24
   81ea8:	d002      	beq.n	81eb0 <_vfiprintf_r+0x2d0>
   81eaa:	9b01      	ldr	r3, [sp, #4]
   81eac:	3302      	adds	r3, #2
   81eae:	9301      	str	r3, [sp, #4]
   81eb0:	9b02      	ldr	r3, [sp, #8]
   81eb2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81eb6:	930a      	str	r3, [sp, #40]	; 0x28
   81eb8:	f040 8215 	bne.w	822e6 <_vfiprintf_r+0x706>
   81ebc:	9b08      	ldr	r3, [sp, #32]
   81ebe:	9a01      	ldr	r2, [sp, #4]
   81ec0:	1a9d      	subs	r5, r3, r2
   81ec2:	2d00      	cmp	r5, #0
   81ec4:	f340 820f 	ble.w	822e6 <_vfiprintf_r+0x706>
   81ec8:	2d10      	cmp	r5, #16
   81eca:	f340 8484 	ble.w	827d6 <_vfiprintf_r+0xbf6>
   81ece:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81ed0:	46ce      	mov	lr, r9
   81ed2:	2710      	movs	r7, #16
   81ed4:	46a1      	mov	r9, r4
   81ed6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ed8:	4ec5      	ldr	r6, [pc, #788]	; (821f0 <_vfiprintf_r+0x610>)
   81eda:	4619      	mov	r1, r3
   81edc:	9c06      	ldr	r4, [sp, #24]
   81ede:	e007      	b.n	81ef0 <_vfiprintf_r+0x310>
   81ee0:	f101 0c02 	add.w	ip, r1, #2
   81ee4:	4601      	mov	r1, r0
   81ee6:	f10e 0e08 	add.w	lr, lr, #8
   81eea:	3d10      	subs	r5, #16
   81eec:	2d10      	cmp	r5, #16
   81eee:	dd11      	ble.n	81f14 <_vfiprintf_r+0x334>
   81ef0:	1c48      	adds	r0, r1, #1
   81ef2:	3210      	adds	r2, #16
   81ef4:	2807      	cmp	r0, #7
   81ef6:	9211      	str	r2, [sp, #68]	; 0x44
   81ef8:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81efc:	9010      	str	r0, [sp, #64]	; 0x40
   81efe:	ddef      	ble.n	81ee0 <_vfiprintf_r+0x300>
   81f00:	2a00      	cmp	r2, #0
   81f02:	f040 81d9 	bne.w	822b8 <_vfiprintf_r+0x6d8>
   81f06:	3d10      	subs	r5, #16
   81f08:	2d10      	cmp	r5, #16
   81f0a:	4611      	mov	r1, r2
   81f0c:	f04f 0c01 	mov.w	ip, #1
   81f10:	46d6      	mov	lr, sl
   81f12:	dced      	bgt.n	81ef0 <_vfiprintf_r+0x310>
   81f14:	464c      	mov	r4, r9
   81f16:	4661      	mov	r1, ip
   81f18:	46f1      	mov	r9, lr
   81f1a:	442a      	add	r2, r5
   81f1c:	2907      	cmp	r1, #7
   81f1e:	9211      	str	r2, [sp, #68]	; 0x44
   81f20:	f8c9 6000 	str.w	r6, [r9]
   81f24:	f8c9 5004 	str.w	r5, [r9, #4]
   81f28:	9110      	str	r1, [sp, #64]	; 0x40
   81f2a:	f300 82eb 	bgt.w	82504 <_vfiprintf_r+0x924>
   81f2e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81f32:	f109 0908 	add.w	r9, r9, #8
   81f36:	1c48      	adds	r0, r1, #1
   81f38:	2d00      	cmp	r5, #0
   81f3a:	f040 81dc 	bne.w	822f6 <_vfiprintf_r+0x716>
   81f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81f40:	2b00      	cmp	r3, #0
   81f42:	f000 81f6 	beq.w	82332 <_vfiprintf_r+0x752>
   81f46:	2102      	movs	r1, #2
   81f48:	ab0e      	add	r3, sp, #56	; 0x38
   81f4a:	440a      	add	r2, r1
   81f4c:	2807      	cmp	r0, #7
   81f4e:	9211      	str	r2, [sp, #68]	; 0x44
   81f50:	9010      	str	r0, [sp, #64]	; 0x40
   81f52:	f8c9 1004 	str.w	r1, [r9, #4]
   81f56:	f8c9 3000 	str.w	r3, [r9]
   81f5a:	f340 81e6 	ble.w	8232a <_vfiprintf_r+0x74a>
   81f5e:	2a00      	cmp	r2, #0
   81f60:	f040 8395 	bne.w	8268e <_vfiprintf_r+0xaae>
   81f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81f66:	2001      	movs	r0, #1
   81f68:	2b80      	cmp	r3, #128	; 0x80
   81f6a:	4611      	mov	r1, r2
   81f6c:	46d1      	mov	r9, sl
   81f6e:	f040 81e4 	bne.w	8233a <_vfiprintf_r+0x75a>
   81f72:	9b08      	ldr	r3, [sp, #32]
   81f74:	9d01      	ldr	r5, [sp, #4]
   81f76:	1b5e      	subs	r6, r3, r5
   81f78:	2e00      	cmp	r6, #0
   81f7a:	f340 81de 	ble.w	8233a <_vfiprintf_r+0x75a>
   81f7e:	2e10      	cmp	r6, #16
   81f80:	f340 843c 	ble.w	827fc <_vfiprintf_r+0xc1c>
   81f84:	46cc      	mov	ip, r9
   81f86:	2710      	movs	r7, #16
   81f88:	46a1      	mov	r9, r4
   81f8a:	4d9a      	ldr	r5, [pc, #616]	; (821f4 <_vfiprintf_r+0x614>)
   81f8c:	9c06      	ldr	r4, [sp, #24]
   81f8e:	e007      	b.n	81fa0 <_vfiprintf_r+0x3c0>
   81f90:	f101 0e02 	add.w	lr, r1, #2
   81f94:	4601      	mov	r1, r0
   81f96:	f10c 0c08 	add.w	ip, ip, #8
   81f9a:	3e10      	subs	r6, #16
   81f9c:	2e10      	cmp	r6, #16
   81f9e:	dd11      	ble.n	81fc4 <_vfiprintf_r+0x3e4>
   81fa0:	1c48      	adds	r0, r1, #1
   81fa2:	3210      	adds	r2, #16
   81fa4:	2807      	cmp	r0, #7
   81fa6:	9211      	str	r2, [sp, #68]	; 0x44
   81fa8:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81fac:	9010      	str	r0, [sp, #64]	; 0x40
   81fae:	ddef      	ble.n	81f90 <_vfiprintf_r+0x3b0>
   81fb0:	2a00      	cmp	r2, #0
   81fb2:	f040 829b 	bne.w	824ec <_vfiprintf_r+0x90c>
   81fb6:	3e10      	subs	r6, #16
   81fb8:	2e10      	cmp	r6, #16
   81fba:	f04f 0e01 	mov.w	lr, #1
   81fbe:	4611      	mov	r1, r2
   81fc0:	46d4      	mov	ip, sl
   81fc2:	dced      	bgt.n	81fa0 <_vfiprintf_r+0x3c0>
   81fc4:	464c      	mov	r4, r9
   81fc6:	46e1      	mov	r9, ip
   81fc8:	4432      	add	r2, r6
   81fca:	f1be 0f07 	cmp.w	lr, #7
   81fce:	9211      	str	r2, [sp, #68]	; 0x44
   81fd0:	e889 0060 	stmia.w	r9, {r5, r6}
   81fd4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81fd8:	f300 8366 	bgt.w	826a8 <_vfiprintf_r+0xac8>
   81fdc:	f109 0908 	add.w	r9, r9, #8
   81fe0:	f10e 0001 	add.w	r0, lr, #1
   81fe4:	4671      	mov	r1, lr
   81fe6:	e1a8      	b.n	8233a <_vfiprintf_r+0x75a>
   81fe8:	9508      	str	r5, [sp, #32]
   81fea:	f013 0220 	ands.w	r2, r3, #32
   81fee:	f040 8389 	bne.w	82704 <_vfiprintf_r+0xb24>
   81ff2:	f013 0110 	ands.w	r1, r3, #16
   81ff6:	f040 8319 	bne.w	8262c <_vfiprintf_r+0xa4c>
   81ffa:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   81ffe:	f000 8315 	beq.w	8262c <_vfiprintf_r+0xa4c>
   82002:	9807      	ldr	r0, [sp, #28]
   82004:	460a      	mov	r2, r1
   82006:	4601      	mov	r1, r0
   82008:	3104      	adds	r1, #4
   8200a:	8806      	ldrh	r6, [r0, #0]
   8200c:	2700      	movs	r7, #0
   8200e:	9107      	str	r1, [sp, #28]
   82010:	e71f      	b.n	81e52 <_vfiprintf_r+0x272>
   82012:	9508      	str	r5, [sp, #32]
   82014:	f043 0310 	orr.w	r3, r3, #16
   82018:	e7e7      	b.n	81fea <_vfiprintf_r+0x40a>
   8201a:	9508      	str	r5, [sp, #32]
   8201c:	f043 0310 	orr.w	r3, r3, #16
   82020:	e707      	b.n	81e32 <_vfiprintf_r+0x252>
   82022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82026:	f898 2000 	ldrb.w	r2, [r8]
   8202a:	e64b      	b.n	81cc4 <_vfiprintf_r+0xe4>
   8202c:	2500      	movs	r5, #0
   8202e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82032:	f818 2b01 	ldrb.w	r2, [r8], #1
   82036:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8203a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   8203e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82042:	2909      	cmp	r1, #9
   82044:	d9f5      	bls.n	82032 <_vfiprintf_r+0x452>
   82046:	e63f      	b.n	81cc8 <_vfiprintf_r+0xe8>
   82048:	9508      	str	r5, [sp, #32]
   8204a:	2800      	cmp	r0, #0
   8204c:	f040 8402 	bne.w	82854 <_vfiprintf_r+0xc74>
   82050:	f043 0310 	orr.w	r3, r3, #16
   82054:	069e      	lsls	r6, r3, #26
   82056:	f100 833d 	bmi.w	826d4 <_vfiprintf_r+0xaf4>
   8205a:	9907      	ldr	r1, [sp, #28]
   8205c:	06dd      	lsls	r5, r3, #27
   8205e:	460a      	mov	r2, r1
   82060:	f100 82f0 	bmi.w	82644 <_vfiprintf_r+0xa64>
   82064:	0658      	lsls	r0, r3, #25
   82066:	f140 82ed 	bpl.w	82644 <_vfiprintf_r+0xa64>
   8206a:	f9b1 6000 	ldrsh.w	r6, [r1]
   8206e:	3204      	adds	r2, #4
   82070:	17f7      	asrs	r7, r6, #31
   82072:	4630      	mov	r0, r6
   82074:	4639      	mov	r1, r7
   82076:	9207      	str	r2, [sp, #28]
   82078:	2800      	cmp	r0, #0
   8207a:	f171 0200 	sbcs.w	r2, r1, #0
   8207e:	f2c0 835a 	blt.w	82736 <_vfiprintf_r+0xb56>
   82082:	1c61      	adds	r1, r4, #1
   82084:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82088:	f04f 0201 	mov.w	r2, #1
   8208c:	f47f aee9 	bne.w	81e62 <_vfiprintf_r+0x282>
   82090:	ea56 0107 	orrs.w	r1, r6, r7
   82094:	f000 824b 	beq.w	8252e <_vfiprintf_r+0x94e>
   82098:	9302      	str	r3, [sp, #8]
   8209a:	2a01      	cmp	r2, #1
   8209c:	f000 828a 	beq.w	825b4 <_vfiprintf_r+0x9d4>
   820a0:	2a02      	cmp	r2, #2
   820a2:	f040 825a 	bne.w	8255a <_vfiprintf_r+0x97a>
   820a6:	46d3      	mov	fp, sl
   820a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   820aa:	0933      	lsrs	r3, r6, #4
   820ac:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   820b0:	0939      	lsrs	r1, r7, #4
   820b2:	f006 020f 	and.w	r2, r6, #15
   820b6:	460f      	mov	r7, r1
   820b8:	461e      	mov	r6, r3
   820ba:	5c83      	ldrb	r3, [r0, r2]
   820bc:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   820c0:	ea56 0307 	orrs.w	r3, r6, r7
   820c4:	d1f1      	bne.n	820aa <_vfiprintf_r+0x4ca>
   820c6:	ebaa 030b 	sub.w	r3, sl, fp
   820ca:	9305      	str	r3, [sp, #20]
   820cc:	e6e0      	b.n	81e90 <_vfiprintf_r+0x2b0>
   820ce:	2800      	cmp	r0, #0
   820d0:	f040 83bd 	bne.w	8284e <_vfiprintf_r+0xc6e>
   820d4:	0699      	lsls	r1, r3, #26
   820d6:	f100 8359 	bmi.w	8278c <_vfiprintf_r+0xbac>
   820da:	06da      	lsls	r2, r3, #27
   820dc:	f100 80e5 	bmi.w	822aa <_vfiprintf_r+0x6ca>
   820e0:	065b      	lsls	r3, r3, #25
   820e2:	f140 80e2 	bpl.w	822aa <_vfiprintf_r+0x6ca>
   820e6:	9a07      	ldr	r2, [sp, #28]
   820e8:	6813      	ldr	r3, [r2, #0]
   820ea:	3204      	adds	r2, #4
   820ec:	9207      	str	r2, [sp, #28]
   820ee:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   820f2:	801a      	strh	r2, [r3, #0]
   820f4:	e5b1      	b.n	81c5a <_vfiprintf_r+0x7a>
   820f6:	2278      	movs	r2, #120	; 0x78
   820f8:	2130      	movs	r1, #48	; 0x30
   820fa:	9508      	str	r5, [sp, #32]
   820fc:	9d07      	ldr	r5, [sp, #28]
   820fe:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82102:	1d2a      	adds	r2, r5, #4
   82104:	9207      	str	r2, [sp, #28]
   82106:	4a3c      	ldr	r2, [pc, #240]	; (821f8 <_vfiprintf_r+0x618>)
   82108:	682e      	ldr	r6, [r5, #0]
   8210a:	920b      	str	r2, [sp, #44]	; 0x2c
   8210c:	f043 0302 	orr.w	r3, r3, #2
   82110:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82114:	2700      	movs	r7, #0
   82116:	2202      	movs	r2, #2
   82118:	e69b      	b.n	81e52 <_vfiprintf_r+0x272>
   8211a:	9508      	str	r5, [sp, #32]
   8211c:	2800      	cmp	r0, #0
   8211e:	d099      	beq.n	82054 <_vfiprintf_r+0x474>
   82120:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82124:	e796      	b.n	82054 <_vfiprintf_r+0x474>
   82126:	f898 2000 	ldrb.w	r2, [r8]
   8212a:	2e00      	cmp	r6, #0
   8212c:	f47f adca 	bne.w	81cc4 <_vfiprintf_r+0xe4>
   82130:	2001      	movs	r0, #1
   82132:	2620      	movs	r6, #32
   82134:	e5c6      	b.n	81cc4 <_vfiprintf_r+0xe4>
   82136:	f043 0301 	orr.w	r3, r3, #1
   8213a:	f898 2000 	ldrb.w	r2, [r8]
   8213e:	e5c1      	b.n	81cc4 <_vfiprintf_r+0xe4>
   82140:	9508      	str	r5, [sp, #32]
   82142:	2800      	cmp	r0, #0
   82144:	f040 8380 	bne.w	82848 <_vfiprintf_r+0xc68>
   82148:	492b      	ldr	r1, [pc, #172]	; (821f8 <_vfiprintf_r+0x618>)
   8214a:	910b      	str	r1, [sp, #44]	; 0x2c
   8214c:	069f      	lsls	r7, r3, #26
   8214e:	f100 82e5 	bmi.w	8271c <_vfiprintf_r+0xb3c>
   82152:	9807      	ldr	r0, [sp, #28]
   82154:	06de      	lsls	r6, r3, #27
   82156:	4601      	mov	r1, r0
   82158:	f100 826f 	bmi.w	8263a <_vfiprintf_r+0xa5a>
   8215c:	065d      	lsls	r5, r3, #25
   8215e:	f140 826c 	bpl.w	8263a <_vfiprintf_r+0xa5a>
   82162:	2700      	movs	r7, #0
   82164:	3104      	adds	r1, #4
   82166:	8806      	ldrh	r6, [r0, #0]
   82168:	9107      	str	r1, [sp, #28]
   8216a:	07d8      	lsls	r0, r3, #31
   8216c:	f140 8220 	bpl.w	825b0 <_vfiprintf_r+0x9d0>
   82170:	ea56 0107 	orrs.w	r1, r6, r7
   82174:	f000 821c 	beq.w	825b0 <_vfiprintf_r+0x9d0>
   82178:	2130      	movs	r1, #48	; 0x30
   8217a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8217e:	f043 0302 	orr.w	r3, r3, #2
   82182:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82186:	2202      	movs	r2, #2
   82188:	e663      	b.n	81e52 <_vfiprintf_r+0x272>
   8218a:	9508      	str	r5, [sp, #32]
   8218c:	2800      	cmp	r0, #0
   8218e:	f040 8355 	bne.w	8283c <_vfiprintf_r+0xc5c>
   82192:	491a      	ldr	r1, [pc, #104]	; (821fc <_vfiprintf_r+0x61c>)
   82194:	910b      	str	r1, [sp, #44]	; 0x2c
   82196:	e7d9      	b.n	8214c <_vfiprintf_r+0x56c>
   82198:	2201      	movs	r2, #1
   8219a:	9807      	ldr	r0, [sp, #28]
   8219c:	4611      	mov	r1, r2
   8219e:	9201      	str	r2, [sp, #4]
   821a0:	6802      	ldr	r2, [r0, #0]
   821a2:	f04f 0400 	mov.w	r4, #0
   821a6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   821aa:	4602      	mov	r2, r0
   821ac:	3204      	adds	r2, #4
   821ae:	9508      	str	r5, [sp, #32]
   821b0:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   821b4:	9105      	str	r1, [sp, #20]
   821b6:	9207      	str	r2, [sp, #28]
   821b8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   821bc:	9302      	str	r3, [sp, #8]
   821be:	2400      	movs	r4, #0
   821c0:	e66e      	b.n	81ea0 <_vfiprintf_r+0x2c0>
   821c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821c6:	f898 2000 	ldrb.w	r2, [r8]
   821ca:	e57b      	b.n	81cc4 <_vfiprintf_r+0xe4>
   821cc:	f898 2000 	ldrb.w	r2, [r8]
   821d0:	2a6c      	cmp	r2, #108	; 0x6c
   821d2:	bf03      	ittte	eq
   821d4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   821d8:	f043 0320 	orreq.w	r3, r3, #32
   821dc:	f108 0801 	addeq.w	r8, r8, #1
   821e0:	f043 0310 	orrne.w	r3, r3, #16
   821e4:	e56e      	b.n	81cc4 <_vfiprintf_r+0xe4>
   821e6:	f898 2000 	ldrb.w	r2, [r8]
   821ea:	2001      	movs	r0, #1
   821ec:	262b      	movs	r6, #43	; 0x2b
   821ee:	e569      	b.n	81cc4 <_vfiprintf_r+0xe4>
   821f0:	0008475c 	.word	0x0008475c
   821f4:	0008476c 	.word	0x0008476c
   821f8:	00084740 	.word	0x00084740
   821fc:	0008472c 	.word	0x0008472c
   82200:	f04f 0200 	mov.w	r2, #0
   82204:	9907      	ldr	r1, [sp, #28]
   82206:	9508      	str	r5, [sp, #32]
   82208:	f8d1 b000 	ldr.w	fp, [r1]
   8220c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82210:	1d0d      	adds	r5, r1, #4
   82212:	f1bb 0f00 	cmp.w	fp, #0
   82216:	f000 82e4 	beq.w	827e2 <_vfiprintf_r+0xc02>
   8221a:	1c67      	adds	r7, r4, #1
   8221c:	f000 82c3 	beq.w	827a6 <_vfiprintf_r+0xbc6>
   82220:	4622      	mov	r2, r4
   82222:	2100      	movs	r1, #0
   82224:	4658      	mov	r0, fp
   82226:	9301      	str	r3, [sp, #4]
   82228:	f001 fbc6 	bl	839b8 <memchr>
   8222c:	9b01      	ldr	r3, [sp, #4]
   8222e:	2800      	cmp	r0, #0
   82230:	f000 82e8 	beq.w	82804 <_vfiprintf_r+0xc24>
   82234:	eba0 020b 	sub.w	r2, r0, fp
   82238:	9507      	str	r5, [sp, #28]
   8223a:	9205      	str	r2, [sp, #20]
   8223c:	9302      	str	r3, [sp, #8]
   8223e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82242:	2400      	movs	r4, #0
   82244:	e624      	b.n	81e90 <_vfiprintf_r+0x2b0>
   82246:	f898 2000 	ldrb.w	r2, [r8]
   8224a:	f108 0701 	add.w	r7, r8, #1
   8224e:	2a2a      	cmp	r2, #42	; 0x2a
   82250:	f000 82e9 	beq.w	82826 <_vfiprintf_r+0xc46>
   82254:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82258:	2909      	cmp	r1, #9
   8225a:	46b8      	mov	r8, r7
   8225c:	f04f 0400 	mov.w	r4, #0
   82260:	f63f ad32 	bhi.w	81cc8 <_vfiprintf_r+0xe8>
   82264:	f818 2b01 	ldrb.w	r2, [r8], #1
   82268:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8226c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   82270:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82274:	2909      	cmp	r1, #9
   82276:	d9f5      	bls.n	82264 <_vfiprintf_r+0x684>
   82278:	e526      	b.n	81cc8 <_vfiprintf_r+0xe8>
   8227a:	f043 0320 	orr.w	r3, r3, #32
   8227e:	f898 2000 	ldrb.w	r2, [r8]
   82282:	e51f      	b.n	81cc4 <_vfiprintf_r+0xe4>
   82284:	9508      	str	r5, [sp, #32]
   82286:	2800      	cmp	r0, #0
   82288:	f040 82db 	bne.w	82842 <_vfiprintf_r+0xc62>
   8228c:	2a00      	cmp	r2, #0
   8228e:	f000 80f1 	beq.w	82474 <_vfiprintf_r+0x894>
   82292:	2101      	movs	r1, #1
   82294:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82298:	f04f 0200 	mov.w	r2, #0
   8229c:	9101      	str	r1, [sp, #4]
   8229e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   822a2:	9105      	str	r1, [sp, #20]
   822a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   822a8:	e788      	b.n	821bc <_vfiprintf_r+0x5dc>
   822aa:	9a07      	ldr	r2, [sp, #28]
   822ac:	6813      	ldr	r3, [r2, #0]
   822ae:	3204      	adds	r2, #4
   822b0:	9207      	str	r2, [sp, #28]
   822b2:	9a03      	ldr	r2, [sp, #12]
   822b4:	601a      	str	r2, [r3, #0]
   822b6:	e4d0      	b.n	81c5a <_vfiprintf_r+0x7a>
   822b8:	aa0f      	add	r2, sp, #60	; 0x3c
   822ba:	9904      	ldr	r1, [sp, #16]
   822bc:	4620      	mov	r0, r4
   822be:	f7ff fc4f 	bl	81b60 <__sprint_r.part.0>
   822c2:	2800      	cmp	r0, #0
   822c4:	f040 8143 	bne.w	8254e <_vfiprintf_r+0x96e>
   822c8:	9910      	ldr	r1, [sp, #64]	; 0x40
   822ca:	46d6      	mov	lr, sl
   822cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   822ce:	f101 0c01 	add.w	ip, r1, #1
   822d2:	e60a      	b.n	81eea <_vfiprintf_r+0x30a>
   822d4:	aa0f      	add	r2, sp, #60	; 0x3c
   822d6:	9904      	ldr	r1, [sp, #16]
   822d8:	9806      	ldr	r0, [sp, #24]
   822da:	f7ff fc41 	bl	81b60 <__sprint_r.part.0>
   822de:	2800      	cmp	r0, #0
   822e0:	f040 8135 	bne.w	8254e <_vfiprintf_r+0x96e>
   822e4:	46d1      	mov	r9, sl
   822e6:	9910      	ldr	r1, [sp, #64]	; 0x40
   822e8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   822ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   822ee:	1c48      	adds	r0, r1, #1
   822f0:	2d00      	cmp	r5, #0
   822f2:	f43f ae24 	beq.w	81f3e <_vfiprintf_r+0x35e>
   822f6:	2101      	movs	r1, #1
   822f8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   822fc:	440a      	add	r2, r1
   822fe:	2807      	cmp	r0, #7
   82300:	9211      	str	r2, [sp, #68]	; 0x44
   82302:	9010      	str	r0, [sp, #64]	; 0x40
   82304:	f8c9 1004 	str.w	r1, [r9, #4]
   82308:	f8c9 5000 	str.w	r5, [r9]
   8230c:	f340 8109 	ble.w	82522 <_vfiprintf_r+0x942>
   82310:	2a00      	cmp	r2, #0
   82312:	f040 81af 	bne.w	82674 <_vfiprintf_r+0xa94>
   82316:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82318:	2b00      	cmp	r3, #0
   8231a:	f43f ae23 	beq.w	81f64 <_vfiprintf_r+0x384>
   8231e:	2202      	movs	r2, #2
   82320:	4608      	mov	r0, r1
   82322:	46d1      	mov	r9, sl
   82324:	ab0e      	add	r3, sp, #56	; 0x38
   82326:	921d      	str	r2, [sp, #116]	; 0x74
   82328:	931c      	str	r3, [sp, #112]	; 0x70
   8232a:	4601      	mov	r1, r0
   8232c:	f109 0908 	add.w	r9, r9, #8
   82330:	3001      	adds	r0, #1
   82332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82334:	2b80      	cmp	r3, #128	; 0x80
   82336:	f43f ae1c 	beq.w	81f72 <_vfiprintf_r+0x392>
   8233a:	9b05      	ldr	r3, [sp, #20]
   8233c:	1ae4      	subs	r4, r4, r3
   8233e:	2c00      	cmp	r4, #0
   82340:	dd2f      	ble.n	823a2 <_vfiprintf_r+0x7c2>
   82342:	2c10      	cmp	r4, #16
   82344:	f340 8220 	ble.w	82788 <_vfiprintf_r+0xba8>
   82348:	46ce      	mov	lr, r9
   8234a:	2610      	movs	r6, #16
   8234c:	4db2      	ldr	r5, [pc, #712]	; (82618 <_vfiprintf_r+0xa38>)
   8234e:	9f06      	ldr	r7, [sp, #24]
   82350:	f8dd 9010 	ldr.w	r9, [sp, #16]
   82354:	e006      	b.n	82364 <_vfiprintf_r+0x784>
   82356:	1c88      	adds	r0, r1, #2
   82358:	4619      	mov	r1, r3
   8235a:	f10e 0e08 	add.w	lr, lr, #8
   8235e:	3c10      	subs	r4, #16
   82360:	2c10      	cmp	r4, #16
   82362:	dd10      	ble.n	82386 <_vfiprintf_r+0x7a6>
   82364:	1c4b      	adds	r3, r1, #1
   82366:	3210      	adds	r2, #16
   82368:	2b07      	cmp	r3, #7
   8236a:	9211      	str	r2, [sp, #68]	; 0x44
   8236c:	e88e 0060 	stmia.w	lr, {r5, r6}
   82370:	9310      	str	r3, [sp, #64]	; 0x40
   82372:	ddf0      	ble.n	82356 <_vfiprintf_r+0x776>
   82374:	2a00      	cmp	r2, #0
   82376:	d165      	bne.n	82444 <_vfiprintf_r+0x864>
   82378:	3c10      	subs	r4, #16
   8237a:	2c10      	cmp	r4, #16
   8237c:	f04f 0001 	mov.w	r0, #1
   82380:	4611      	mov	r1, r2
   82382:	46d6      	mov	lr, sl
   82384:	dcee      	bgt.n	82364 <_vfiprintf_r+0x784>
   82386:	46f1      	mov	r9, lr
   82388:	4422      	add	r2, r4
   8238a:	2807      	cmp	r0, #7
   8238c:	9211      	str	r2, [sp, #68]	; 0x44
   8238e:	f8c9 5000 	str.w	r5, [r9]
   82392:	f8c9 4004 	str.w	r4, [r9, #4]
   82396:	9010      	str	r0, [sp, #64]	; 0x40
   82398:	f300 8085 	bgt.w	824a6 <_vfiprintf_r+0x8c6>
   8239c:	f109 0908 	add.w	r9, r9, #8
   823a0:	3001      	adds	r0, #1
   823a2:	9905      	ldr	r1, [sp, #20]
   823a4:	2807      	cmp	r0, #7
   823a6:	440a      	add	r2, r1
   823a8:	9211      	str	r2, [sp, #68]	; 0x44
   823aa:	f8c9 b000 	str.w	fp, [r9]
   823ae:	f8c9 1004 	str.w	r1, [r9, #4]
   823b2:	9010      	str	r0, [sp, #64]	; 0x40
   823b4:	f340 8082 	ble.w	824bc <_vfiprintf_r+0x8dc>
   823b8:	2a00      	cmp	r2, #0
   823ba:	f040 8118 	bne.w	825ee <_vfiprintf_r+0xa0e>
   823be:	9b02      	ldr	r3, [sp, #8]
   823c0:	9210      	str	r2, [sp, #64]	; 0x40
   823c2:	0758      	lsls	r0, r3, #29
   823c4:	d535      	bpl.n	82432 <_vfiprintf_r+0x852>
   823c6:	9b08      	ldr	r3, [sp, #32]
   823c8:	9901      	ldr	r1, [sp, #4]
   823ca:	1a5c      	subs	r4, r3, r1
   823cc:	2c00      	cmp	r4, #0
   823ce:	f340 80e7 	ble.w	825a0 <_vfiprintf_r+0x9c0>
   823d2:	46d1      	mov	r9, sl
   823d4:	2c10      	cmp	r4, #16
   823d6:	f340 820d 	ble.w	827f4 <_vfiprintf_r+0xc14>
   823da:	2510      	movs	r5, #16
   823dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   823de:	4e8f      	ldr	r6, [pc, #572]	; (8261c <_vfiprintf_r+0xa3c>)
   823e0:	9f06      	ldr	r7, [sp, #24]
   823e2:	f8dd b010 	ldr.w	fp, [sp, #16]
   823e6:	e006      	b.n	823f6 <_vfiprintf_r+0x816>
   823e8:	1c88      	adds	r0, r1, #2
   823ea:	4619      	mov	r1, r3
   823ec:	f109 0908 	add.w	r9, r9, #8
   823f0:	3c10      	subs	r4, #16
   823f2:	2c10      	cmp	r4, #16
   823f4:	dd11      	ble.n	8241a <_vfiprintf_r+0x83a>
   823f6:	1c4b      	adds	r3, r1, #1
   823f8:	3210      	adds	r2, #16
   823fa:	2b07      	cmp	r3, #7
   823fc:	9211      	str	r2, [sp, #68]	; 0x44
   823fe:	f8c9 6000 	str.w	r6, [r9]
   82402:	f8c9 5004 	str.w	r5, [r9, #4]
   82406:	9310      	str	r3, [sp, #64]	; 0x40
   82408:	ddee      	ble.n	823e8 <_vfiprintf_r+0x808>
   8240a:	bb42      	cbnz	r2, 8245e <_vfiprintf_r+0x87e>
   8240c:	3c10      	subs	r4, #16
   8240e:	2c10      	cmp	r4, #16
   82410:	f04f 0001 	mov.w	r0, #1
   82414:	4611      	mov	r1, r2
   82416:	46d1      	mov	r9, sl
   82418:	dced      	bgt.n	823f6 <_vfiprintf_r+0x816>
   8241a:	4422      	add	r2, r4
   8241c:	2807      	cmp	r0, #7
   8241e:	9211      	str	r2, [sp, #68]	; 0x44
   82420:	f8c9 6000 	str.w	r6, [r9]
   82424:	f8c9 4004 	str.w	r4, [r9, #4]
   82428:	9010      	str	r0, [sp, #64]	; 0x40
   8242a:	dd51      	ble.n	824d0 <_vfiprintf_r+0x8f0>
   8242c:	2a00      	cmp	r2, #0
   8242e:	f040 819a 	bne.w	82766 <_vfiprintf_r+0xb86>
   82432:	9b03      	ldr	r3, [sp, #12]
   82434:	9a08      	ldr	r2, [sp, #32]
   82436:	9901      	ldr	r1, [sp, #4]
   82438:	428a      	cmp	r2, r1
   8243a:	bfac      	ite	ge
   8243c:	189b      	addge	r3, r3, r2
   8243e:	185b      	addlt	r3, r3, r1
   82440:	9303      	str	r3, [sp, #12]
   82442:	e04e      	b.n	824e2 <_vfiprintf_r+0x902>
   82444:	aa0f      	add	r2, sp, #60	; 0x3c
   82446:	4649      	mov	r1, r9
   82448:	4638      	mov	r0, r7
   8244a:	f7ff fb89 	bl	81b60 <__sprint_r.part.0>
   8244e:	2800      	cmp	r0, #0
   82450:	f040 813e 	bne.w	826d0 <_vfiprintf_r+0xaf0>
   82454:	9910      	ldr	r1, [sp, #64]	; 0x40
   82456:	46d6      	mov	lr, sl
   82458:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8245a:	1c48      	adds	r0, r1, #1
   8245c:	e77f      	b.n	8235e <_vfiprintf_r+0x77e>
   8245e:	aa0f      	add	r2, sp, #60	; 0x3c
   82460:	4659      	mov	r1, fp
   82462:	4638      	mov	r0, r7
   82464:	f7ff fb7c 	bl	81b60 <__sprint_r.part.0>
   82468:	b960      	cbnz	r0, 82484 <_vfiprintf_r+0x8a4>
   8246a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8246c:	46d1      	mov	r9, sl
   8246e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82470:	1c48      	adds	r0, r1, #1
   82472:	e7bd      	b.n	823f0 <_vfiprintf_r+0x810>
   82474:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82476:	f8dd b010 	ldr.w	fp, [sp, #16]
   8247a:	2b00      	cmp	r3, #0
   8247c:	f040 81ca 	bne.w	82814 <_vfiprintf_r+0xc34>
   82480:	2300      	movs	r3, #0
   82482:	9310      	str	r3, [sp, #64]	; 0x40
   82484:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82488:	f013 0f01 	tst.w	r3, #1
   8248c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82490:	d102      	bne.n	82498 <_vfiprintf_r+0x8b8>
   82492:	059a      	lsls	r2, r3, #22
   82494:	f140 80dd 	bpl.w	82652 <_vfiprintf_r+0xa72>
   82498:	065b      	lsls	r3, r3, #25
   8249a:	f53f acad 	bmi.w	81df8 <_vfiprintf_r+0x218>
   8249e:	9803      	ldr	r0, [sp, #12]
   824a0:	b02d      	add	sp, #180	; 0xb4
   824a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824a6:	2a00      	cmp	r2, #0
   824a8:	f040 8105 	bne.w	826b6 <_vfiprintf_r+0xad6>
   824ac:	2301      	movs	r3, #1
   824ae:	46d1      	mov	r9, sl
   824b0:	9a05      	ldr	r2, [sp, #20]
   824b2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   824b6:	921d      	str	r2, [sp, #116]	; 0x74
   824b8:	9211      	str	r2, [sp, #68]	; 0x44
   824ba:	9310      	str	r3, [sp, #64]	; 0x40
   824bc:	f109 0908 	add.w	r9, r9, #8
   824c0:	9b02      	ldr	r3, [sp, #8]
   824c2:	0759      	lsls	r1, r3, #29
   824c4:	d504      	bpl.n	824d0 <_vfiprintf_r+0x8f0>
   824c6:	9b08      	ldr	r3, [sp, #32]
   824c8:	9901      	ldr	r1, [sp, #4]
   824ca:	1a5c      	subs	r4, r3, r1
   824cc:	2c00      	cmp	r4, #0
   824ce:	dc81      	bgt.n	823d4 <_vfiprintf_r+0x7f4>
   824d0:	9b03      	ldr	r3, [sp, #12]
   824d2:	9908      	ldr	r1, [sp, #32]
   824d4:	9801      	ldr	r0, [sp, #4]
   824d6:	4281      	cmp	r1, r0
   824d8:	bfac      	ite	ge
   824da:	185b      	addge	r3, r3, r1
   824dc:	181b      	addlt	r3, r3, r0
   824de:	9303      	str	r3, [sp, #12]
   824e0:	bb72      	cbnz	r2, 82540 <_vfiprintf_r+0x960>
   824e2:	2300      	movs	r3, #0
   824e4:	46d1      	mov	r9, sl
   824e6:	9310      	str	r3, [sp, #64]	; 0x40
   824e8:	f7ff bbb7 	b.w	81c5a <_vfiprintf_r+0x7a>
   824ec:	aa0f      	add	r2, sp, #60	; 0x3c
   824ee:	9904      	ldr	r1, [sp, #16]
   824f0:	4620      	mov	r0, r4
   824f2:	f7ff fb35 	bl	81b60 <__sprint_r.part.0>
   824f6:	bb50      	cbnz	r0, 8254e <_vfiprintf_r+0x96e>
   824f8:	9910      	ldr	r1, [sp, #64]	; 0x40
   824fa:	46d4      	mov	ip, sl
   824fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   824fe:	f101 0e01 	add.w	lr, r1, #1
   82502:	e54a      	b.n	81f9a <_vfiprintf_r+0x3ba>
   82504:	2a00      	cmp	r2, #0
   82506:	f47f aee5 	bne.w	822d4 <_vfiprintf_r+0x6f4>
   8250a:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   8250e:	2900      	cmp	r1, #0
   82510:	f000 811a 	beq.w	82748 <_vfiprintf_r+0xb68>
   82514:	2201      	movs	r2, #1
   82516:	46d1      	mov	r9, sl
   82518:	4610      	mov	r0, r2
   8251a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   8251e:	921d      	str	r2, [sp, #116]	; 0x74
   82520:	911c      	str	r1, [sp, #112]	; 0x70
   82522:	4601      	mov	r1, r0
   82524:	f109 0908 	add.w	r9, r9, #8
   82528:	3001      	adds	r0, #1
   8252a:	e508      	b.n	81f3e <_vfiprintf_r+0x35e>
   8252c:	9b02      	ldr	r3, [sp, #8]
   8252e:	2a01      	cmp	r2, #1
   82530:	f000 8097 	beq.w	82662 <_vfiprintf_r+0xa82>
   82534:	2a02      	cmp	r2, #2
   82536:	d10d      	bne.n	82554 <_vfiprintf_r+0x974>
   82538:	9302      	str	r3, [sp, #8]
   8253a:	2600      	movs	r6, #0
   8253c:	2700      	movs	r7, #0
   8253e:	e5b2      	b.n	820a6 <_vfiprintf_r+0x4c6>
   82540:	aa0f      	add	r2, sp, #60	; 0x3c
   82542:	9904      	ldr	r1, [sp, #16]
   82544:	9806      	ldr	r0, [sp, #24]
   82546:	f7ff fb0b 	bl	81b60 <__sprint_r.part.0>
   8254a:	2800      	cmp	r0, #0
   8254c:	d0c9      	beq.n	824e2 <_vfiprintf_r+0x902>
   8254e:	f8dd b010 	ldr.w	fp, [sp, #16]
   82552:	e797      	b.n	82484 <_vfiprintf_r+0x8a4>
   82554:	2600      	movs	r6, #0
   82556:	2700      	movs	r7, #0
   82558:	9302      	str	r3, [sp, #8]
   8255a:	4651      	mov	r1, sl
   8255c:	e000      	b.n	82560 <_vfiprintf_r+0x980>
   8255e:	4659      	mov	r1, fp
   82560:	08f2      	lsrs	r2, r6, #3
   82562:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   82566:	08f8      	lsrs	r0, r7, #3
   82568:	f006 0307 	and.w	r3, r6, #7
   8256c:	4607      	mov	r7, r0
   8256e:	4616      	mov	r6, r2
   82570:	3330      	adds	r3, #48	; 0x30
   82572:	ea56 0207 	orrs.w	r2, r6, r7
   82576:	f801 3c01 	strb.w	r3, [r1, #-1]
   8257a:	f101 3bff 	add.w	fp, r1, #4294967295
   8257e:	d1ee      	bne.n	8255e <_vfiprintf_r+0x97e>
   82580:	9a02      	ldr	r2, [sp, #8]
   82582:	07d6      	lsls	r6, r2, #31
   82584:	f57f ad9f 	bpl.w	820c6 <_vfiprintf_r+0x4e6>
   82588:	2b30      	cmp	r3, #48	; 0x30
   8258a:	f43f ad9c 	beq.w	820c6 <_vfiprintf_r+0x4e6>
   8258e:	2330      	movs	r3, #48	; 0x30
   82590:	3902      	subs	r1, #2
   82592:	f80b 3c01 	strb.w	r3, [fp, #-1]
   82596:	ebaa 0301 	sub.w	r3, sl, r1
   8259a:	9305      	str	r3, [sp, #20]
   8259c:	468b      	mov	fp, r1
   8259e:	e477      	b.n	81e90 <_vfiprintf_r+0x2b0>
   825a0:	9b03      	ldr	r3, [sp, #12]
   825a2:	9a08      	ldr	r2, [sp, #32]
   825a4:	428a      	cmp	r2, r1
   825a6:	bfac      	ite	ge
   825a8:	189b      	addge	r3, r3, r2
   825aa:	185b      	addlt	r3, r3, r1
   825ac:	9303      	str	r3, [sp, #12]
   825ae:	e798      	b.n	824e2 <_vfiprintf_r+0x902>
   825b0:	2202      	movs	r2, #2
   825b2:	e44e      	b.n	81e52 <_vfiprintf_r+0x272>
   825b4:	2f00      	cmp	r7, #0
   825b6:	bf08      	it	eq
   825b8:	2e0a      	cmpeq	r6, #10
   825ba:	d351      	bcc.n	82660 <_vfiprintf_r+0xa80>
   825bc:	46d3      	mov	fp, sl
   825be:	4630      	mov	r0, r6
   825c0:	4639      	mov	r1, r7
   825c2:	220a      	movs	r2, #10
   825c4:	2300      	movs	r3, #0
   825c6:	f001 fefb 	bl	843c0 <__aeabi_uldivmod>
   825ca:	3230      	adds	r2, #48	; 0x30
   825cc:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   825d0:	4630      	mov	r0, r6
   825d2:	4639      	mov	r1, r7
   825d4:	2300      	movs	r3, #0
   825d6:	220a      	movs	r2, #10
   825d8:	f001 fef2 	bl	843c0 <__aeabi_uldivmod>
   825dc:	4606      	mov	r6, r0
   825de:	460f      	mov	r7, r1
   825e0:	ea56 0307 	orrs.w	r3, r6, r7
   825e4:	d1eb      	bne.n	825be <_vfiprintf_r+0x9de>
   825e6:	e56e      	b.n	820c6 <_vfiprintf_r+0x4e6>
   825e8:	9405      	str	r4, [sp, #20]
   825ea:	46d3      	mov	fp, sl
   825ec:	e450      	b.n	81e90 <_vfiprintf_r+0x2b0>
   825ee:	aa0f      	add	r2, sp, #60	; 0x3c
   825f0:	9904      	ldr	r1, [sp, #16]
   825f2:	9806      	ldr	r0, [sp, #24]
   825f4:	f7ff fab4 	bl	81b60 <__sprint_r.part.0>
   825f8:	2800      	cmp	r0, #0
   825fa:	d1a8      	bne.n	8254e <_vfiprintf_r+0x96e>
   825fc:	46d1      	mov	r9, sl
   825fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82600:	e75e      	b.n	824c0 <_vfiprintf_r+0x8e0>
   82602:	aa0f      	add	r2, sp, #60	; 0x3c
   82604:	9904      	ldr	r1, [sp, #16]
   82606:	9806      	ldr	r0, [sp, #24]
   82608:	f7ff faaa 	bl	81b60 <__sprint_r.part.0>
   8260c:	2800      	cmp	r0, #0
   8260e:	d19e      	bne.n	8254e <_vfiprintf_r+0x96e>
   82610:	46d1      	mov	r9, sl
   82612:	f7ff bbbb 	b.w	81d8c <_vfiprintf_r+0x1ac>
   82616:	bf00      	nop
   82618:	0008476c 	.word	0x0008476c
   8261c:	0008475c 	.word	0x0008475c
   82620:	3104      	adds	r1, #4
   82622:	6816      	ldr	r6, [r2, #0]
   82624:	2700      	movs	r7, #0
   82626:	2201      	movs	r2, #1
   82628:	9107      	str	r1, [sp, #28]
   8262a:	e412      	b.n	81e52 <_vfiprintf_r+0x272>
   8262c:	9807      	ldr	r0, [sp, #28]
   8262e:	2700      	movs	r7, #0
   82630:	4601      	mov	r1, r0
   82632:	3104      	adds	r1, #4
   82634:	6806      	ldr	r6, [r0, #0]
   82636:	9107      	str	r1, [sp, #28]
   82638:	e40b      	b.n	81e52 <_vfiprintf_r+0x272>
   8263a:	680e      	ldr	r6, [r1, #0]
   8263c:	3104      	adds	r1, #4
   8263e:	9107      	str	r1, [sp, #28]
   82640:	2700      	movs	r7, #0
   82642:	e592      	b.n	8216a <_vfiprintf_r+0x58a>
   82644:	6816      	ldr	r6, [r2, #0]
   82646:	3204      	adds	r2, #4
   82648:	17f7      	asrs	r7, r6, #31
   8264a:	9207      	str	r2, [sp, #28]
   8264c:	4630      	mov	r0, r6
   8264e:	4639      	mov	r1, r7
   82650:	e512      	b.n	82078 <_vfiprintf_r+0x498>
   82652:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82656:	f000 fe75 	bl	83344 <__retarget_lock_release_recursive>
   8265a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8265e:	e71b      	b.n	82498 <_vfiprintf_r+0x8b8>
   82660:	9b02      	ldr	r3, [sp, #8]
   82662:	9302      	str	r3, [sp, #8]
   82664:	2301      	movs	r3, #1
   82666:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8266a:	3630      	adds	r6, #48	; 0x30
   8266c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   82670:	9305      	str	r3, [sp, #20]
   82672:	e40d      	b.n	81e90 <_vfiprintf_r+0x2b0>
   82674:	aa0f      	add	r2, sp, #60	; 0x3c
   82676:	9904      	ldr	r1, [sp, #16]
   82678:	9806      	ldr	r0, [sp, #24]
   8267a:	f7ff fa71 	bl	81b60 <__sprint_r.part.0>
   8267e:	2800      	cmp	r0, #0
   82680:	f47f af65 	bne.w	8254e <_vfiprintf_r+0x96e>
   82684:	9910      	ldr	r1, [sp, #64]	; 0x40
   82686:	46d1      	mov	r9, sl
   82688:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8268a:	1c48      	adds	r0, r1, #1
   8268c:	e457      	b.n	81f3e <_vfiprintf_r+0x35e>
   8268e:	aa0f      	add	r2, sp, #60	; 0x3c
   82690:	9904      	ldr	r1, [sp, #16]
   82692:	9806      	ldr	r0, [sp, #24]
   82694:	f7ff fa64 	bl	81b60 <__sprint_r.part.0>
   82698:	2800      	cmp	r0, #0
   8269a:	f47f af58 	bne.w	8254e <_vfiprintf_r+0x96e>
   8269e:	9910      	ldr	r1, [sp, #64]	; 0x40
   826a0:	46d1      	mov	r9, sl
   826a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   826a4:	1c48      	adds	r0, r1, #1
   826a6:	e644      	b.n	82332 <_vfiprintf_r+0x752>
   826a8:	2a00      	cmp	r2, #0
   826aa:	f040 8087 	bne.w	827bc <_vfiprintf_r+0xbdc>
   826ae:	2001      	movs	r0, #1
   826b0:	4611      	mov	r1, r2
   826b2:	46d1      	mov	r9, sl
   826b4:	e641      	b.n	8233a <_vfiprintf_r+0x75a>
   826b6:	aa0f      	add	r2, sp, #60	; 0x3c
   826b8:	9904      	ldr	r1, [sp, #16]
   826ba:	9806      	ldr	r0, [sp, #24]
   826bc:	f7ff fa50 	bl	81b60 <__sprint_r.part.0>
   826c0:	2800      	cmp	r0, #0
   826c2:	f47f af44 	bne.w	8254e <_vfiprintf_r+0x96e>
   826c6:	9810      	ldr	r0, [sp, #64]	; 0x40
   826c8:	46d1      	mov	r9, sl
   826ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   826cc:	3001      	adds	r0, #1
   826ce:	e668      	b.n	823a2 <_vfiprintf_r+0x7c2>
   826d0:	46cb      	mov	fp, r9
   826d2:	e6d7      	b.n	82484 <_vfiprintf_r+0x8a4>
   826d4:	9d07      	ldr	r5, [sp, #28]
   826d6:	3507      	adds	r5, #7
   826d8:	f025 0507 	bic.w	r5, r5, #7
   826dc:	f105 0208 	add.w	r2, r5, #8
   826e0:	e9d5 0100 	ldrd	r0, r1, [r5]
   826e4:	9207      	str	r2, [sp, #28]
   826e6:	4606      	mov	r6, r0
   826e8:	460f      	mov	r7, r1
   826ea:	e4c5      	b.n	82078 <_vfiprintf_r+0x498>
   826ec:	9d07      	ldr	r5, [sp, #28]
   826ee:	3507      	adds	r5, #7
   826f0:	f025 0207 	bic.w	r2, r5, #7
   826f4:	f102 0108 	add.w	r1, r2, #8
   826f8:	e9d2 6700 	ldrd	r6, r7, [r2]
   826fc:	9107      	str	r1, [sp, #28]
   826fe:	2201      	movs	r2, #1
   82700:	f7ff bba7 	b.w	81e52 <_vfiprintf_r+0x272>
   82704:	9d07      	ldr	r5, [sp, #28]
   82706:	3507      	adds	r5, #7
   82708:	f025 0207 	bic.w	r2, r5, #7
   8270c:	f102 0108 	add.w	r1, r2, #8
   82710:	e9d2 6700 	ldrd	r6, r7, [r2]
   82714:	9107      	str	r1, [sp, #28]
   82716:	2200      	movs	r2, #0
   82718:	f7ff bb9b 	b.w	81e52 <_vfiprintf_r+0x272>
   8271c:	9d07      	ldr	r5, [sp, #28]
   8271e:	3507      	adds	r5, #7
   82720:	f025 0107 	bic.w	r1, r5, #7
   82724:	f101 0008 	add.w	r0, r1, #8
   82728:	9007      	str	r0, [sp, #28]
   8272a:	e9d1 6700 	ldrd	r6, r7, [r1]
   8272e:	e51c      	b.n	8216a <_vfiprintf_r+0x58a>
   82730:	46d3      	mov	fp, sl
   82732:	f7ff bbad 	b.w	81e90 <_vfiprintf_r+0x2b0>
   82736:	252d      	movs	r5, #45	; 0x2d
   82738:	4276      	negs	r6, r6
   8273a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   8273e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82742:	2201      	movs	r2, #1
   82744:	f7ff bb8a 	b.w	81e5c <_vfiprintf_r+0x27c>
   82748:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8274a:	b9b3      	cbnz	r3, 8277a <_vfiprintf_r+0xb9a>
   8274c:	4611      	mov	r1, r2
   8274e:	2001      	movs	r0, #1
   82750:	46d1      	mov	r9, sl
   82752:	e5f2      	b.n	8233a <_vfiprintf_r+0x75a>
   82754:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82758:	f000 fdf4 	bl	83344 <__retarget_lock_release_recursive>
   8275c:	f04f 33ff 	mov.w	r3, #4294967295
   82760:	9303      	str	r3, [sp, #12]
   82762:	f7ff bb4c 	b.w	81dfe <_vfiprintf_r+0x21e>
   82766:	aa0f      	add	r2, sp, #60	; 0x3c
   82768:	9904      	ldr	r1, [sp, #16]
   8276a:	9806      	ldr	r0, [sp, #24]
   8276c:	f7ff f9f8 	bl	81b60 <__sprint_r.part.0>
   82770:	2800      	cmp	r0, #0
   82772:	f47f aeec 	bne.w	8254e <_vfiprintf_r+0x96e>
   82776:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82778:	e6aa      	b.n	824d0 <_vfiprintf_r+0x8f0>
   8277a:	2202      	movs	r2, #2
   8277c:	ab0e      	add	r3, sp, #56	; 0x38
   8277e:	921d      	str	r2, [sp, #116]	; 0x74
   82780:	931c      	str	r3, [sp, #112]	; 0x70
   82782:	2001      	movs	r0, #1
   82784:	46d1      	mov	r9, sl
   82786:	e5d0      	b.n	8232a <_vfiprintf_r+0x74a>
   82788:	4d34      	ldr	r5, [pc, #208]	; (8285c <_vfiprintf_r+0xc7c>)
   8278a:	e5fd      	b.n	82388 <_vfiprintf_r+0x7a8>
   8278c:	9a07      	ldr	r2, [sp, #28]
   8278e:	4613      	mov	r3, r2
   82790:	3304      	adds	r3, #4
   82792:	9307      	str	r3, [sp, #28]
   82794:	9b03      	ldr	r3, [sp, #12]
   82796:	6811      	ldr	r1, [r2, #0]
   82798:	17dd      	asrs	r5, r3, #31
   8279a:	461a      	mov	r2, r3
   8279c:	462b      	mov	r3, r5
   8279e:	e9c1 2300 	strd	r2, r3, [r1]
   827a2:	f7ff ba5a 	b.w	81c5a <_vfiprintf_r+0x7a>
   827a6:	4658      	mov	r0, fp
   827a8:	9507      	str	r5, [sp, #28]
   827aa:	9302      	str	r3, [sp, #8]
   827ac:	f7ff f9aa 	bl	81b04 <strlen>
   827b0:	2400      	movs	r4, #0
   827b2:	9005      	str	r0, [sp, #20]
   827b4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   827b8:	f7ff bb6a 	b.w	81e90 <_vfiprintf_r+0x2b0>
   827bc:	aa0f      	add	r2, sp, #60	; 0x3c
   827be:	9904      	ldr	r1, [sp, #16]
   827c0:	9806      	ldr	r0, [sp, #24]
   827c2:	f7ff f9cd 	bl	81b60 <__sprint_r.part.0>
   827c6:	2800      	cmp	r0, #0
   827c8:	f47f aec1 	bne.w	8254e <_vfiprintf_r+0x96e>
   827cc:	9910      	ldr	r1, [sp, #64]	; 0x40
   827ce:	46d1      	mov	r9, sl
   827d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   827d2:	1c48      	adds	r0, r1, #1
   827d4:	e5b1      	b.n	8233a <_vfiprintf_r+0x75a>
   827d6:	9910      	ldr	r1, [sp, #64]	; 0x40
   827d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   827da:	3101      	adds	r1, #1
   827dc:	4e20      	ldr	r6, [pc, #128]	; (82860 <_vfiprintf_r+0xc80>)
   827de:	f7ff bb9c 	b.w	81f1a <_vfiprintf_r+0x33a>
   827e2:	2c06      	cmp	r4, #6
   827e4:	bf28      	it	cs
   827e6:	2406      	movcs	r4, #6
   827e8:	9507      	str	r5, [sp, #28]
   827ea:	9405      	str	r4, [sp, #20]
   827ec:	9401      	str	r4, [sp, #4]
   827ee:	f8df b074 	ldr.w	fp, [pc, #116]	; 82864 <_vfiprintf_r+0xc84>
   827f2:	e4e3      	b.n	821bc <_vfiprintf_r+0x5dc>
   827f4:	9810      	ldr	r0, [sp, #64]	; 0x40
   827f6:	4e1a      	ldr	r6, [pc, #104]	; (82860 <_vfiprintf_r+0xc80>)
   827f8:	3001      	adds	r0, #1
   827fa:	e60e      	b.n	8241a <_vfiprintf_r+0x83a>
   827fc:	4686      	mov	lr, r0
   827fe:	4d17      	ldr	r5, [pc, #92]	; (8285c <_vfiprintf_r+0xc7c>)
   82800:	f7ff bbe2 	b.w	81fc8 <_vfiprintf_r+0x3e8>
   82804:	9405      	str	r4, [sp, #20]
   82806:	9507      	str	r5, [sp, #28]
   82808:	9302      	str	r3, [sp, #8]
   8280a:	4604      	mov	r4, r0
   8280c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82810:	f7ff bb3e 	b.w	81e90 <_vfiprintf_r+0x2b0>
   82814:	9806      	ldr	r0, [sp, #24]
   82816:	aa0f      	add	r2, sp, #60	; 0x3c
   82818:	4659      	mov	r1, fp
   8281a:	f7ff f9a1 	bl	81b60 <__sprint_r.part.0>
   8281e:	2800      	cmp	r0, #0
   82820:	f43f ae2e 	beq.w	82480 <_vfiprintf_r+0x8a0>
   82824:	e62e      	b.n	82484 <_vfiprintf_r+0x8a4>
   82826:	9907      	ldr	r1, [sp, #28]
   82828:	f898 2001 	ldrb.w	r2, [r8, #1]
   8282c:	680c      	ldr	r4, [r1, #0]
   8282e:	3104      	adds	r1, #4
   82830:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   82834:	46b8      	mov	r8, r7
   82836:	9107      	str	r1, [sp, #28]
   82838:	f7ff ba44 	b.w	81cc4 <_vfiprintf_r+0xe4>
   8283c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82840:	e4a7      	b.n	82192 <_vfiprintf_r+0x5b2>
   82842:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82846:	e521      	b.n	8228c <_vfiprintf_r+0x6ac>
   82848:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8284c:	e47c      	b.n	82148 <_vfiprintf_r+0x568>
   8284e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82852:	e43f      	b.n	820d4 <_vfiprintf_r+0x4f4>
   82854:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82858:	f7ff bbfa 	b.w	82050 <_vfiprintf_r+0x470>
   8285c:	0008476c 	.word	0x0008476c
   82860:	0008475c 	.word	0x0008475c
   82864:	00084754 	.word	0x00084754

00082868 <__sbprintf>:
   82868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8286c:	460c      	mov	r4, r1
   8286e:	f04f 0e00 	mov.w	lr, #0
   82872:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82876:	4606      	mov	r6, r0
   82878:	4617      	mov	r7, r2
   8287a:	4698      	mov	r8, r3
   8287c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8287e:	89e3      	ldrh	r3, [r4, #14]
   82880:	8989      	ldrh	r1, [r1, #12]
   82882:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82886:	f021 0102 	bic.w	r1, r1, #2
   8288a:	9219      	str	r2, [sp, #100]	; 0x64
   8288c:	f8ad 300e 	strh.w	r3, [sp, #14]
   82890:	69e2      	ldr	r2, [r4, #28]
   82892:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82894:	f8ad 100c 	strh.w	r1, [sp, #12]
   82898:	a816      	add	r0, sp, #88	; 0x58
   8289a:	a91a      	add	r1, sp, #104	; 0x68
   8289c:	f8cd e018 	str.w	lr, [sp, #24]
   828a0:	9207      	str	r2, [sp, #28]
   828a2:	9309      	str	r3, [sp, #36]	; 0x24
   828a4:	9100      	str	r1, [sp, #0]
   828a6:	9104      	str	r1, [sp, #16]
   828a8:	9502      	str	r5, [sp, #8]
   828aa:	9505      	str	r5, [sp, #20]
   828ac:	f000 fd44 	bl	83338 <__retarget_lock_init_recursive>
   828b0:	4643      	mov	r3, r8
   828b2:	463a      	mov	r2, r7
   828b4:	4669      	mov	r1, sp
   828b6:	4630      	mov	r0, r6
   828b8:	f7ff f992 	bl	81be0 <_vfiprintf_r>
   828bc:	1e05      	subs	r5, r0, #0
   828be:	db07      	blt.n	828d0 <__sbprintf+0x68>
   828c0:	4630      	mov	r0, r6
   828c2:	4669      	mov	r1, sp
   828c4:	f000 f924 	bl	82b10 <_fflush_r>
   828c8:	2800      	cmp	r0, #0
   828ca:	bf18      	it	ne
   828cc:	f04f 35ff 	movne.w	r5, #4294967295
   828d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   828d4:	065b      	lsls	r3, r3, #25
   828d6:	d503      	bpl.n	828e0 <__sbprintf+0x78>
   828d8:	89a3      	ldrh	r3, [r4, #12]
   828da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   828de:	81a3      	strh	r3, [r4, #12]
   828e0:	9816      	ldr	r0, [sp, #88]	; 0x58
   828e2:	f000 fd2b 	bl	8333c <__retarget_lock_close_recursive>
   828e6:	4628      	mov	r0, r5
   828e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   828ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000828f0 <__swsetup_r>:
   828f0:	b538      	push	{r3, r4, r5, lr}
   828f2:	4b30      	ldr	r3, [pc, #192]	; (829b4 <__swsetup_r+0xc4>)
   828f4:	4605      	mov	r5, r0
   828f6:	6818      	ldr	r0, [r3, #0]
   828f8:	460c      	mov	r4, r1
   828fa:	b110      	cbz	r0, 82902 <__swsetup_r+0x12>
   828fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   828fe:	2b00      	cmp	r3, #0
   82900:	d038      	beq.n	82974 <__swsetup_r+0x84>
   82902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82906:	b293      	uxth	r3, r2
   82908:	0718      	lsls	r0, r3, #28
   8290a:	d50c      	bpl.n	82926 <__swsetup_r+0x36>
   8290c:	6920      	ldr	r0, [r4, #16]
   8290e:	b1a8      	cbz	r0, 8293c <__swsetup_r+0x4c>
   82910:	f013 0201 	ands.w	r2, r3, #1
   82914:	d01e      	beq.n	82954 <__swsetup_r+0x64>
   82916:	2200      	movs	r2, #0
   82918:	6963      	ldr	r3, [r4, #20]
   8291a:	60a2      	str	r2, [r4, #8]
   8291c:	425b      	negs	r3, r3
   8291e:	61a3      	str	r3, [r4, #24]
   82920:	b1f0      	cbz	r0, 82960 <__swsetup_r+0x70>
   82922:	2000      	movs	r0, #0
   82924:	bd38      	pop	{r3, r4, r5, pc}
   82926:	06d9      	lsls	r1, r3, #27
   82928:	d53b      	bpl.n	829a2 <__swsetup_r+0xb2>
   8292a:	0758      	lsls	r0, r3, #29
   8292c:	d425      	bmi.n	8297a <__swsetup_r+0x8a>
   8292e:	6920      	ldr	r0, [r4, #16]
   82930:	f042 0308 	orr.w	r3, r2, #8
   82934:	81a3      	strh	r3, [r4, #12]
   82936:	b29b      	uxth	r3, r3
   82938:	2800      	cmp	r0, #0
   8293a:	d1e9      	bne.n	82910 <__swsetup_r+0x20>
   8293c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82940:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82944:	d0e4      	beq.n	82910 <__swsetup_r+0x20>
   82946:	4628      	mov	r0, r5
   82948:	4621      	mov	r1, r4
   8294a:	f000 fd2b 	bl	833a4 <__smakebuf_r>
   8294e:	89a3      	ldrh	r3, [r4, #12]
   82950:	6920      	ldr	r0, [r4, #16]
   82952:	e7dd      	b.n	82910 <__swsetup_r+0x20>
   82954:	0799      	lsls	r1, r3, #30
   82956:	bf58      	it	pl
   82958:	6962      	ldrpl	r2, [r4, #20]
   8295a:	60a2      	str	r2, [r4, #8]
   8295c:	2800      	cmp	r0, #0
   8295e:	d1e0      	bne.n	82922 <__swsetup_r+0x32>
   82960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82964:	061a      	lsls	r2, r3, #24
   82966:	d5dd      	bpl.n	82924 <__swsetup_r+0x34>
   82968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8296c:	81a3      	strh	r3, [r4, #12]
   8296e:	f04f 30ff 	mov.w	r0, #4294967295
   82972:	bd38      	pop	{r3, r4, r5, pc}
   82974:	f000 f924 	bl	82bc0 <__sinit>
   82978:	e7c3      	b.n	82902 <__swsetup_r+0x12>
   8297a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8297c:	b151      	cbz	r1, 82994 <__swsetup_r+0xa4>
   8297e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82982:	4299      	cmp	r1, r3
   82984:	d004      	beq.n	82990 <__swsetup_r+0xa0>
   82986:	4628      	mov	r0, r5
   82988:	f000 fa40 	bl	82e0c <_free_r>
   8298c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82990:	2300      	movs	r3, #0
   82992:	6323      	str	r3, [r4, #48]	; 0x30
   82994:	2300      	movs	r3, #0
   82996:	6920      	ldr	r0, [r4, #16]
   82998:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8299c:	e884 0009 	stmia.w	r4, {r0, r3}
   829a0:	e7c6      	b.n	82930 <__swsetup_r+0x40>
   829a2:	2309      	movs	r3, #9
   829a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   829a8:	602b      	str	r3, [r5, #0]
   829aa:	f04f 30ff 	mov.w	r0, #4294967295
   829ae:	81a2      	strh	r2, [r4, #12]
   829b0:	bd38      	pop	{r3, r4, r5, pc}
   829b2:	bf00      	nop
   829b4:	20070134 	.word	0x20070134

000829b8 <register_fini>:
   829b8:	4b02      	ldr	r3, [pc, #8]	; (829c4 <register_fini+0xc>)
   829ba:	b113      	cbz	r3, 829c2 <register_fini+0xa>
   829bc:	4802      	ldr	r0, [pc, #8]	; (829c8 <register_fini+0x10>)
   829be:	f000 b805 	b.w	829cc <atexit>
   829c2:	4770      	bx	lr
   829c4:	00000000 	.word	0x00000000
   829c8:	00082c39 	.word	0x00082c39

000829cc <atexit>:
   829cc:	2300      	movs	r3, #0
   829ce:	4601      	mov	r1, r0
   829d0:	461a      	mov	r2, r3
   829d2:	4618      	mov	r0, r3
   829d4:	f001 bbcc 	b.w	84170 <__register_exitproc>

000829d8 <__sflush_r>:
   829d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   829dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   829e0:	b29a      	uxth	r2, r3
   829e2:	460d      	mov	r5, r1
   829e4:	0711      	lsls	r1, r2, #28
   829e6:	4680      	mov	r8, r0
   829e8:	d43a      	bmi.n	82a60 <__sflush_r+0x88>
   829ea:	686a      	ldr	r2, [r5, #4]
   829ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   829f0:	2a00      	cmp	r2, #0
   829f2:	81ab      	strh	r3, [r5, #12]
   829f4:	dd70      	ble.n	82ad8 <__sflush_r+0x100>
   829f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
   829f8:	2c00      	cmp	r4, #0
   829fa:	d04a      	beq.n	82a92 <__sflush_r+0xba>
   829fc:	2200      	movs	r2, #0
   829fe:	b29b      	uxth	r3, r3
   82a00:	f8d8 6000 	ldr.w	r6, [r8]
   82a04:	f8c8 2000 	str.w	r2, [r8]
   82a08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82a0c:	d068      	beq.n	82ae0 <__sflush_r+0x108>
   82a0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82a10:	075f      	lsls	r7, r3, #29
   82a12:	d505      	bpl.n	82a20 <__sflush_r+0x48>
   82a14:	6869      	ldr	r1, [r5, #4]
   82a16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82a18:	1a52      	subs	r2, r2, r1
   82a1a:	b10b      	cbz	r3, 82a20 <__sflush_r+0x48>
   82a1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82a1e:	1ad2      	subs	r2, r2, r3
   82a20:	2300      	movs	r3, #0
   82a22:	69e9      	ldr	r1, [r5, #28]
   82a24:	4640      	mov	r0, r8
   82a26:	47a0      	blx	r4
   82a28:	1c44      	adds	r4, r0, #1
   82a2a:	d03d      	beq.n	82aa8 <__sflush_r+0xd0>
   82a2c:	2100      	movs	r1, #0
   82a2e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82a32:	692a      	ldr	r2, [r5, #16]
   82a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82a38:	81ab      	strh	r3, [r5, #12]
   82a3a:	04db      	lsls	r3, r3, #19
   82a3c:	6069      	str	r1, [r5, #4]
   82a3e:	602a      	str	r2, [r5, #0]
   82a40:	d448      	bmi.n	82ad4 <__sflush_r+0xfc>
   82a42:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82a44:	f8c8 6000 	str.w	r6, [r8]
   82a48:	b319      	cbz	r1, 82a92 <__sflush_r+0xba>
   82a4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82a4e:	4299      	cmp	r1, r3
   82a50:	d002      	beq.n	82a58 <__sflush_r+0x80>
   82a52:	4640      	mov	r0, r8
   82a54:	f000 f9da 	bl	82e0c <_free_r>
   82a58:	2000      	movs	r0, #0
   82a5a:	6328      	str	r0, [r5, #48]	; 0x30
   82a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a60:	692e      	ldr	r6, [r5, #16]
   82a62:	b1b6      	cbz	r6, 82a92 <__sflush_r+0xba>
   82a64:	0791      	lsls	r1, r2, #30
   82a66:	bf18      	it	ne
   82a68:	2300      	movne	r3, #0
   82a6a:	682c      	ldr	r4, [r5, #0]
   82a6c:	bf08      	it	eq
   82a6e:	696b      	ldreq	r3, [r5, #20]
   82a70:	602e      	str	r6, [r5, #0]
   82a72:	1ba4      	subs	r4, r4, r6
   82a74:	60ab      	str	r3, [r5, #8]
   82a76:	e00a      	b.n	82a8e <__sflush_r+0xb6>
   82a78:	4623      	mov	r3, r4
   82a7a:	4632      	mov	r2, r6
   82a7c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82a7e:	69e9      	ldr	r1, [r5, #28]
   82a80:	4640      	mov	r0, r8
   82a82:	47b8      	blx	r7
   82a84:	2800      	cmp	r0, #0
   82a86:	eba4 0400 	sub.w	r4, r4, r0
   82a8a:	4406      	add	r6, r0
   82a8c:	dd04      	ble.n	82a98 <__sflush_r+0xc0>
   82a8e:	2c00      	cmp	r4, #0
   82a90:	dcf2      	bgt.n	82a78 <__sflush_r+0xa0>
   82a92:	2000      	movs	r0, #0
   82a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82a98:	89ab      	ldrh	r3, [r5, #12]
   82a9a:	f04f 30ff 	mov.w	r0, #4294967295
   82a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82aa2:	81ab      	strh	r3, [r5, #12]
   82aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82aa8:	f8d8 4000 	ldr.w	r4, [r8]
   82aac:	2c1d      	cmp	r4, #29
   82aae:	d8f3      	bhi.n	82a98 <__sflush_r+0xc0>
   82ab0:	4b16      	ldr	r3, [pc, #88]	; (82b0c <__sflush_r+0x134>)
   82ab2:	40e3      	lsrs	r3, r4
   82ab4:	43db      	mvns	r3, r3
   82ab6:	f013 0301 	ands.w	r3, r3, #1
   82aba:	d1ed      	bne.n	82a98 <__sflush_r+0xc0>
   82abc:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82ac0:	6929      	ldr	r1, [r5, #16]
   82ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82ac6:	81aa      	strh	r2, [r5, #12]
   82ac8:	04d2      	lsls	r2, r2, #19
   82aca:	606b      	str	r3, [r5, #4]
   82acc:	6029      	str	r1, [r5, #0]
   82ace:	d5b8      	bpl.n	82a42 <__sflush_r+0x6a>
   82ad0:	2c00      	cmp	r4, #0
   82ad2:	d1b6      	bne.n	82a42 <__sflush_r+0x6a>
   82ad4:	6528      	str	r0, [r5, #80]	; 0x50
   82ad6:	e7b4      	b.n	82a42 <__sflush_r+0x6a>
   82ad8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82ada:	2a00      	cmp	r2, #0
   82adc:	dc8b      	bgt.n	829f6 <__sflush_r+0x1e>
   82ade:	e7d8      	b.n	82a92 <__sflush_r+0xba>
   82ae0:	2301      	movs	r3, #1
   82ae2:	69e9      	ldr	r1, [r5, #28]
   82ae4:	4640      	mov	r0, r8
   82ae6:	47a0      	blx	r4
   82ae8:	1c43      	adds	r3, r0, #1
   82aea:	4602      	mov	r2, r0
   82aec:	d002      	beq.n	82af4 <__sflush_r+0x11c>
   82aee:	89ab      	ldrh	r3, [r5, #12]
   82af0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82af2:	e78d      	b.n	82a10 <__sflush_r+0x38>
   82af4:	f8d8 3000 	ldr.w	r3, [r8]
   82af8:	2b00      	cmp	r3, #0
   82afa:	d0f8      	beq.n	82aee <__sflush_r+0x116>
   82afc:	2b1d      	cmp	r3, #29
   82afe:	d001      	beq.n	82b04 <__sflush_r+0x12c>
   82b00:	2b16      	cmp	r3, #22
   82b02:	d1c9      	bne.n	82a98 <__sflush_r+0xc0>
   82b04:	f8c8 6000 	str.w	r6, [r8]
   82b08:	e7c3      	b.n	82a92 <__sflush_r+0xba>
   82b0a:	bf00      	nop
   82b0c:	20400001 	.word	0x20400001

00082b10 <_fflush_r>:
   82b10:	b538      	push	{r3, r4, r5, lr}
   82b12:	460d      	mov	r5, r1
   82b14:	4604      	mov	r4, r0
   82b16:	b108      	cbz	r0, 82b1c <_fflush_r+0xc>
   82b18:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82b1a:	b1bb      	cbz	r3, 82b4c <_fflush_r+0x3c>
   82b1c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82b20:	b188      	cbz	r0, 82b46 <_fflush_r+0x36>
   82b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82b24:	07db      	lsls	r3, r3, #31
   82b26:	d401      	bmi.n	82b2c <_fflush_r+0x1c>
   82b28:	0581      	lsls	r1, r0, #22
   82b2a:	d517      	bpl.n	82b5c <_fflush_r+0x4c>
   82b2c:	4620      	mov	r0, r4
   82b2e:	4629      	mov	r1, r5
   82b30:	f7ff ff52 	bl	829d8 <__sflush_r>
   82b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82b36:	4604      	mov	r4, r0
   82b38:	07da      	lsls	r2, r3, #31
   82b3a:	d402      	bmi.n	82b42 <_fflush_r+0x32>
   82b3c:	89ab      	ldrh	r3, [r5, #12]
   82b3e:	059b      	lsls	r3, r3, #22
   82b40:	d507      	bpl.n	82b52 <_fflush_r+0x42>
   82b42:	4620      	mov	r0, r4
   82b44:	bd38      	pop	{r3, r4, r5, pc}
   82b46:	4604      	mov	r4, r0
   82b48:	4620      	mov	r0, r4
   82b4a:	bd38      	pop	{r3, r4, r5, pc}
   82b4c:	f000 f838 	bl	82bc0 <__sinit>
   82b50:	e7e4      	b.n	82b1c <_fflush_r+0xc>
   82b52:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82b54:	f000 fbf6 	bl	83344 <__retarget_lock_release_recursive>
   82b58:	4620      	mov	r0, r4
   82b5a:	bd38      	pop	{r3, r4, r5, pc}
   82b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82b5e:	f000 fbef 	bl	83340 <__retarget_lock_acquire_recursive>
   82b62:	e7e3      	b.n	82b2c <_fflush_r+0x1c>

00082b64 <_cleanup_r>:
   82b64:	4901      	ldr	r1, [pc, #4]	; (82b6c <_cleanup_r+0x8>)
   82b66:	f000 bbb1 	b.w	832cc <_fwalk_reent>
   82b6a:	bf00      	nop
   82b6c:	00084259 	.word	0x00084259

00082b70 <std.isra.0>:
   82b70:	2300      	movs	r3, #0
   82b72:	b510      	push	{r4, lr}
   82b74:	4604      	mov	r4, r0
   82b76:	8181      	strh	r1, [r0, #12]
   82b78:	81c2      	strh	r2, [r0, #14]
   82b7a:	6003      	str	r3, [r0, #0]
   82b7c:	6043      	str	r3, [r0, #4]
   82b7e:	6083      	str	r3, [r0, #8]
   82b80:	6643      	str	r3, [r0, #100]	; 0x64
   82b82:	6103      	str	r3, [r0, #16]
   82b84:	6143      	str	r3, [r0, #20]
   82b86:	6183      	str	r3, [r0, #24]
   82b88:	4619      	mov	r1, r3
   82b8a:	2208      	movs	r2, #8
   82b8c:	305c      	adds	r0, #92	; 0x5c
   82b8e:	f7fe fe45 	bl	8181c <memset>
   82b92:	4807      	ldr	r0, [pc, #28]	; (82bb0 <std.isra.0+0x40>)
   82b94:	4907      	ldr	r1, [pc, #28]	; (82bb4 <std.isra.0+0x44>)
   82b96:	4a08      	ldr	r2, [pc, #32]	; (82bb8 <std.isra.0+0x48>)
   82b98:	4b08      	ldr	r3, [pc, #32]	; (82bbc <std.isra.0+0x4c>)
   82b9a:	6220      	str	r0, [r4, #32]
   82b9c:	61e4      	str	r4, [r4, #28]
   82b9e:	6261      	str	r1, [r4, #36]	; 0x24
   82ba0:	62a2      	str	r2, [r4, #40]	; 0x28
   82ba2:	62e3      	str	r3, [r4, #44]	; 0x2c
   82ba4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82bac:	f000 bbc4 	b.w	83338 <__retarget_lock_init_recursive>
   82bb0:	00083fa1 	.word	0x00083fa1
   82bb4:	00083fc5 	.word	0x00083fc5
   82bb8:	00084001 	.word	0x00084001
   82bbc:	00084021 	.word	0x00084021

00082bc0 <__sinit>:
   82bc0:	b510      	push	{r4, lr}
   82bc2:	4604      	mov	r4, r0
   82bc4:	4814      	ldr	r0, [pc, #80]	; (82c18 <__sinit+0x58>)
   82bc6:	f000 fbbb 	bl	83340 <__retarget_lock_acquire_recursive>
   82bca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82bcc:	b9fa      	cbnz	r2, 82c0e <__sinit+0x4e>
   82bce:	2003      	movs	r0, #3
   82bd0:	4912      	ldr	r1, [pc, #72]	; (82c1c <__sinit+0x5c>)
   82bd2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   82bd6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   82bda:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82bde:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82be2:	63e1      	str	r1, [r4, #60]	; 0x3c
   82be4:	6860      	ldr	r0, [r4, #4]
   82be6:	2104      	movs	r1, #4
   82be8:	f7ff ffc2 	bl	82b70 <std.isra.0>
   82bec:	68a0      	ldr	r0, [r4, #8]
   82bee:	2201      	movs	r2, #1
   82bf0:	2109      	movs	r1, #9
   82bf2:	f7ff ffbd 	bl	82b70 <std.isra.0>
   82bf6:	68e0      	ldr	r0, [r4, #12]
   82bf8:	2202      	movs	r2, #2
   82bfa:	2112      	movs	r1, #18
   82bfc:	f7ff ffb8 	bl	82b70 <std.isra.0>
   82c00:	2301      	movs	r3, #1
   82c02:	4805      	ldr	r0, [pc, #20]	; (82c18 <__sinit+0x58>)
   82c04:	63a3      	str	r3, [r4, #56]	; 0x38
   82c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82c0a:	f000 bb9b 	b.w	83344 <__retarget_lock_release_recursive>
   82c0e:	4802      	ldr	r0, [pc, #8]	; (82c18 <__sinit+0x58>)
   82c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82c14:	f000 bb96 	b.w	83344 <__retarget_lock_release_recursive>
   82c18:	20071cc8 	.word	0x20071cc8
   82c1c:	00082b65 	.word	0x00082b65

00082c20 <__sfp_lock_acquire>:
   82c20:	4801      	ldr	r0, [pc, #4]	; (82c28 <__sfp_lock_acquire+0x8>)
   82c22:	f000 bb8d 	b.w	83340 <__retarget_lock_acquire_recursive>
   82c26:	bf00      	nop
   82c28:	20071cdc 	.word	0x20071cdc

00082c2c <__sfp_lock_release>:
   82c2c:	4801      	ldr	r0, [pc, #4]	; (82c34 <__sfp_lock_release+0x8>)
   82c2e:	f000 bb89 	b.w	83344 <__retarget_lock_release_recursive>
   82c32:	bf00      	nop
   82c34:	20071cdc 	.word	0x20071cdc

00082c38 <__libc_fini_array>:
   82c38:	b538      	push	{r3, r4, r5, lr}
   82c3a:	4c0a      	ldr	r4, [pc, #40]	; (82c64 <__libc_fini_array+0x2c>)
   82c3c:	4d0a      	ldr	r5, [pc, #40]	; (82c68 <__libc_fini_array+0x30>)
   82c3e:	1b64      	subs	r4, r4, r5
   82c40:	10a4      	asrs	r4, r4, #2
   82c42:	d00a      	beq.n	82c5a <__libc_fini_array+0x22>
   82c44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82c48:	3b01      	subs	r3, #1
   82c4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82c4e:	3c01      	subs	r4, #1
   82c50:	f855 3904 	ldr.w	r3, [r5], #-4
   82c54:	4798      	blx	r3
   82c56:	2c00      	cmp	r4, #0
   82c58:	d1f9      	bne.n	82c4e <__libc_fini_array+0x16>
   82c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82c5e:	f001 be21 	b.w	848a4 <_fini>
   82c62:	bf00      	nop
   82c64:	000848b4 	.word	0x000848b4
   82c68:	000848b0 	.word	0x000848b0

00082c6c <__fputwc>:
   82c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82c70:	b083      	sub	sp, #12
   82c72:	4607      	mov	r7, r0
   82c74:	4688      	mov	r8, r1
   82c76:	4614      	mov	r4, r2
   82c78:	f000 fb50 	bl	8331c <__locale_mb_cur_max>
   82c7c:	2801      	cmp	r0, #1
   82c7e:	d033      	beq.n	82ce8 <__fputwc+0x7c>
   82c80:	4642      	mov	r2, r8
   82c82:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82c86:	a901      	add	r1, sp, #4
   82c88:	4638      	mov	r0, r7
   82c8a:	f001 fa25 	bl	840d8 <_wcrtomb_r>
   82c8e:	1c42      	adds	r2, r0, #1
   82c90:	4606      	mov	r6, r0
   82c92:	d022      	beq.n	82cda <__fputwc+0x6e>
   82c94:	b390      	cbz	r0, 82cfc <__fputwc+0x90>
   82c96:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82c9a:	2500      	movs	r5, #0
   82c9c:	f10d 0904 	add.w	r9, sp, #4
   82ca0:	e008      	b.n	82cb4 <__fputwc+0x48>
   82ca2:	6823      	ldr	r3, [r4, #0]
   82ca4:	1c5a      	adds	r2, r3, #1
   82ca6:	6022      	str	r2, [r4, #0]
   82ca8:	7019      	strb	r1, [r3, #0]
   82caa:	3501      	adds	r5, #1
   82cac:	42b5      	cmp	r5, r6
   82cae:	d225      	bcs.n	82cfc <__fputwc+0x90>
   82cb0:	f815 1009 	ldrb.w	r1, [r5, r9]
   82cb4:	68a3      	ldr	r3, [r4, #8]
   82cb6:	3b01      	subs	r3, #1
   82cb8:	2b00      	cmp	r3, #0
   82cba:	60a3      	str	r3, [r4, #8]
   82cbc:	daf1      	bge.n	82ca2 <__fputwc+0x36>
   82cbe:	69a2      	ldr	r2, [r4, #24]
   82cc0:	4293      	cmp	r3, r2
   82cc2:	db01      	blt.n	82cc8 <__fputwc+0x5c>
   82cc4:	290a      	cmp	r1, #10
   82cc6:	d1ec      	bne.n	82ca2 <__fputwc+0x36>
   82cc8:	4622      	mov	r2, r4
   82cca:	4638      	mov	r0, r7
   82ccc:	f001 f9ac 	bl	84028 <__swbuf_r>
   82cd0:	1c43      	adds	r3, r0, #1
   82cd2:	d1ea      	bne.n	82caa <__fputwc+0x3e>
   82cd4:	b003      	add	sp, #12
   82cd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82cda:	89a3      	ldrh	r3, [r4, #12]
   82cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ce0:	81a3      	strh	r3, [r4, #12]
   82ce2:	b003      	add	sp, #12
   82ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82ce8:	f108 33ff 	add.w	r3, r8, #4294967295
   82cec:	2bfe      	cmp	r3, #254	; 0xfe
   82cee:	d8c7      	bhi.n	82c80 <__fputwc+0x14>
   82cf0:	fa5f f188 	uxtb.w	r1, r8
   82cf4:	4606      	mov	r6, r0
   82cf6:	f88d 1004 	strb.w	r1, [sp, #4]
   82cfa:	e7ce      	b.n	82c9a <__fputwc+0x2e>
   82cfc:	4640      	mov	r0, r8
   82cfe:	b003      	add	sp, #12
   82d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00082d04 <_fputwc_r>:
   82d04:	b530      	push	{r4, r5, lr}
   82d06:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82d08:	4614      	mov	r4, r2
   82d0a:	f013 0f01 	tst.w	r3, #1
   82d0e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   82d12:	b083      	sub	sp, #12
   82d14:	4605      	mov	r5, r0
   82d16:	b29a      	uxth	r2, r3
   82d18:	d101      	bne.n	82d1e <_fputwc_r+0x1a>
   82d1a:	0590      	lsls	r0, r2, #22
   82d1c:	d51c      	bpl.n	82d58 <_fputwc_r+0x54>
   82d1e:	0490      	lsls	r0, r2, #18
   82d20:	d406      	bmi.n	82d30 <_fputwc_r+0x2c>
   82d22:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82d24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82d2c:	81a3      	strh	r3, [r4, #12]
   82d2e:	6662      	str	r2, [r4, #100]	; 0x64
   82d30:	4628      	mov	r0, r5
   82d32:	4622      	mov	r2, r4
   82d34:	f7ff ff9a 	bl	82c6c <__fputwc>
   82d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82d3a:	4605      	mov	r5, r0
   82d3c:	07da      	lsls	r2, r3, #31
   82d3e:	d402      	bmi.n	82d46 <_fputwc_r+0x42>
   82d40:	89a3      	ldrh	r3, [r4, #12]
   82d42:	059b      	lsls	r3, r3, #22
   82d44:	d502      	bpl.n	82d4c <_fputwc_r+0x48>
   82d46:	4628      	mov	r0, r5
   82d48:	b003      	add	sp, #12
   82d4a:	bd30      	pop	{r4, r5, pc}
   82d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82d4e:	f000 faf9 	bl	83344 <__retarget_lock_release_recursive>
   82d52:	4628      	mov	r0, r5
   82d54:	b003      	add	sp, #12
   82d56:	bd30      	pop	{r4, r5, pc}
   82d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82d5a:	9101      	str	r1, [sp, #4]
   82d5c:	f000 faf0 	bl	83340 <__retarget_lock_acquire_recursive>
   82d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82d64:	9901      	ldr	r1, [sp, #4]
   82d66:	b29a      	uxth	r2, r3
   82d68:	e7d9      	b.n	82d1e <_fputwc_r+0x1a>
   82d6a:	bf00      	nop

00082d6c <_malloc_trim_r>:
   82d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d6e:	460c      	mov	r4, r1
   82d70:	4f23      	ldr	r7, [pc, #140]	; (82e00 <_malloc_trim_r+0x94>)
   82d72:	4606      	mov	r6, r0
   82d74:	f000 ff40 	bl	83bf8 <__malloc_lock>
   82d78:	68bb      	ldr	r3, [r7, #8]
   82d7a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82d7e:	685d      	ldr	r5, [r3, #4]
   82d80:	310f      	adds	r1, #15
   82d82:	f025 0503 	bic.w	r5, r5, #3
   82d86:	4429      	add	r1, r5
   82d88:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82d8c:	f021 010f 	bic.w	r1, r1, #15
   82d90:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82d94:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82d98:	db07      	blt.n	82daa <_malloc_trim_r+0x3e>
   82d9a:	2100      	movs	r1, #0
   82d9c:	4630      	mov	r0, r6
   82d9e:	f001 f8ed 	bl	83f7c <_sbrk_r>
   82da2:	68bb      	ldr	r3, [r7, #8]
   82da4:	442b      	add	r3, r5
   82da6:	4298      	cmp	r0, r3
   82da8:	d004      	beq.n	82db4 <_malloc_trim_r+0x48>
   82daa:	4630      	mov	r0, r6
   82dac:	f000 ff2a 	bl	83c04 <__malloc_unlock>
   82db0:	2000      	movs	r0, #0
   82db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82db4:	4261      	negs	r1, r4
   82db6:	4630      	mov	r0, r6
   82db8:	f001 f8e0 	bl	83f7c <_sbrk_r>
   82dbc:	3001      	adds	r0, #1
   82dbe:	d00d      	beq.n	82ddc <_malloc_trim_r+0x70>
   82dc0:	4b10      	ldr	r3, [pc, #64]	; (82e04 <_malloc_trim_r+0x98>)
   82dc2:	68ba      	ldr	r2, [r7, #8]
   82dc4:	6819      	ldr	r1, [r3, #0]
   82dc6:	1b2d      	subs	r5, r5, r4
   82dc8:	f045 0501 	orr.w	r5, r5, #1
   82dcc:	4630      	mov	r0, r6
   82dce:	1b09      	subs	r1, r1, r4
   82dd0:	6055      	str	r5, [r2, #4]
   82dd2:	6019      	str	r1, [r3, #0]
   82dd4:	f000 ff16 	bl	83c04 <__malloc_unlock>
   82dd8:	2001      	movs	r0, #1
   82dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82ddc:	2100      	movs	r1, #0
   82dde:	4630      	mov	r0, r6
   82de0:	f001 f8cc 	bl	83f7c <_sbrk_r>
   82de4:	68ba      	ldr	r2, [r7, #8]
   82de6:	1a83      	subs	r3, r0, r2
   82de8:	2b0f      	cmp	r3, #15
   82dea:	ddde      	ble.n	82daa <_malloc_trim_r+0x3e>
   82dec:	4c06      	ldr	r4, [pc, #24]	; (82e08 <_malloc_trim_r+0x9c>)
   82dee:	4905      	ldr	r1, [pc, #20]	; (82e04 <_malloc_trim_r+0x98>)
   82df0:	6824      	ldr	r4, [r4, #0]
   82df2:	f043 0301 	orr.w	r3, r3, #1
   82df6:	1b00      	subs	r0, r0, r4
   82df8:	6053      	str	r3, [r2, #4]
   82dfa:	6008      	str	r0, [r1, #0]
   82dfc:	e7d5      	b.n	82daa <_malloc_trim_r+0x3e>
   82dfe:	bf00      	nop
   82e00:	200706d0 	.word	0x200706d0
   82e04:	20070c28 	.word	0x20070c28
   82e08:	20070ad8 	.word	0x20070ad8

00082e0c <_free_r>:
   82e0c:	2900      	cmp	r1, #0
   82e0e:	d044      	beq.n	82e9a <_free_r+0x8e>
   82e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e14:	460d      	mov	r5, r1
   82e16:	4680      	mov	r8, r0
   82e18:	f000 feee 	bl	83bf8 <__malloc_lock>
   82e1c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82e20:	4969      	ldr	r1, [pc, #420]	; (82fc8 <_free_r+0x1bc>)
   82e22:	f1a5 0408 	sub.w	r4, r5, #8
   82e26:	f027 0301 	bic.w	r3, r7, #1
   82e2a:	18e2      	adds	r2, r4, r3
   82e2c:	688e      	ldr	r6, [r1, #8]
   82e2e:	6850      	ldr	r0, [r2, #4]
   82e30:	42b2      	cmp	r2, r6
   82e32:	f020 0003 	bic.w	r0, r0, #3
   82e36:	d05e      	beq.n	82ef6 <_free_r+0xea>
   82e38:	07fe      	lsls	r6, r7, #31
   82e3a:	6050      	str	r0, [r2, #4]
   82e3c:	d40b      	bmi.n	82e56 <_free_r+0x4a>
   82e3e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   82e42:	f101 0e08 	add.w	lr, r1, #8
   82e46:	1be4      	subs	r4, r4, r7
   82e48:	68a5      	ldr	r5, [r4, #8]
   82e4a:	443b      	add	r3, r7
   82e4c:	4575      	cmp	r5, lr
   82e4e:	d06d      	beq.n	82f2c <_free_r+0x120>
   82e50:	68e7      	ldr	r7, [r4, #12]
   82e52:	60ef      	str	r7, [r5, #12]
   82e54:	60bd      	str	r5, [r7, #8]
   82e56:	1815      	adds	r5, r2, r0
   82e58:	686d      	ldr	r5, [r5, #4]
   82e5a:	07ed      	lsls	r5, r5, #31
   82e5c:	d53e      	bpl.n	82edc <_free_r+0xd0>
   82e5e:	f043 0201 	orr.w	r2, r3, #1
   82e62:	6062      	str	r2, [r4, #4]
   82e64:	50e3      	str	r3, [r4, r3]
   82e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82e6a:	d217      	bcs.n	82e9c <_free_r+0x90>
   82e6c:	2201      	movs	r2, #1
   82e6e:	08db      	lsrs	r3, r3, #3
   82e70:	1098      	asrs	r0, r3, #2
   82e72:	684d      	ldr	r5, [r1, #4]
   82e74:	4413      	add	r3, r2
   82e76:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82e7a:	4082      	lsls	r2, r0
   82e7c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82e80:	432a      	orrs	r2, r5
   82e82:	3808      	subs	r0, #8
   82e84:	60e0      	str	r0, [r4, #12]
   82e86:	60a7      	str	r7, [r4, #8]
   82e88:	604a      	str	r2, [r1, #4]
   82e8a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82e8e:	60fc      	str	r4, [r7, #12]
   82e90:	4640      	mov	r0, r8
   82e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82e96:	f000 beb5 	b.w	83c04 <__malloc_unlock>
   82e9a:	4770      	bx	lr
   82e9c:	0a5a      	lsrs	r2, r3, #9
   82e9e:	2a04      	cmp	r2, #4
   82ea0:	d852      	bhi.n	82f48 <_free_r+0x13c>
   82ea2:	099a      	lsrs	r2, r3, #6
   82ea4:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82ea8:	00ff      	lsls	r7, r7, #3
   82eaa:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82eae:	19c8      	adds	r0, r1, r7
   82eb0:	59ca      	ldr	r2, [r1, r7]
   82eb2:	3808      	subs	r0, #8
   82eb4:	4290      	cmp	r0, r2
   82eb6:	d04f      	beq.n	82f58 <_free_r+0x14c>
   82eb8:	6851      	ldr	r1, [r2, #4]
   82eba:	f021 0103 	bic.w	r1, r1, #3
   82ebe:	428b      	cmp	r3, r1
   82ec0:	d232      	bcs.n	82f28 <_free_r+0x11c>
   82ec2:	6892      	ldr	r2, [r2, #8]
   82ec4:	4290      	cmp	r0, r2
   82ec6:	d1f7      	bne.n	82eb8 <_free_r+0xac>
   82ec8:	68c3      	ldr	r3, [r0, #12]
   82eca:	60a0      	str	r0, [r4, #8]
   82ecc:	60e3      	str	r3, [r4, #12]
   82ece:	609c      	str	r4, [r3, #8]
   82ed0:	60c4      	str	r4, [r0, #12]
   82ed2:	4640      	mov	r0, r8
   82ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82ed8:	f000 be94 	b.w	83c04 <__malloc_unlock>
   82edc:	6895      	ldr	r5, [r2, #8]
   82ede:	4f3b      	ldr	r7, [pc, #236]	; (82fcc <_free_r+0x1c0>)
   82ee0:	4403      	add	r3, r0
   82ee2:	42bd      	cmp	r5, r7
   82ee4:	d040      	beq.n	82f68 <_free_r+0x15c>
   82ee6:	68d0      	ldr	r0, [r2, #12]
   82ee8:	f043 0201 	orr.w	r2, r3, #1
   82eec:	60e8      	str	r0, [r5, #12]
   82eee:	6085      	str	r5, [r0, #8]
   82ef0:	6062      	str	r2, [r4, #4]
   82ef2:	50e3      	str	r3, [r4, r3]
   82ef4:	e7b7      	b.n	82e66 <_free_r+0x5a>
   82ef6:	07ff      	lsls	r7, r7, #31
   82ef8:	4403      	add	r3, r0
   82efa:	d407      	bmi.n	82f0c <_free_r+0x100>
   82efc:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82f00:	1b64      	subs	r4, r4, r5
   82f02:	68e2      	ldr	r2, [r4, #12]
   82f04:	68a0      	ldr	r0, [r4, #8]
   82f06:	442b      	add	r3, r5
   82f08:	60c2      	str	r2, [r0, #12]
   82f0a:	6090      	str	r0, [r2, #8]
   82f0c:	4a30      	ldr	r2, [pc, #192]	; (82fd0 <_free_r+0x1c4>)
   82f0e:	f043 0001 	orr.w	r0, r3, #1
   82f12:	6812      	ldr	r2, [r2, #0]
   82f14:	6060      	str	r0, [r4, #4]
   82f16:	4293      	cmp	r3, r2
   82f18:	608c      	str	r4, [r1, #8]
   82f1a:	d3b9      	bcc.n	82e90 <_free_r+0x84>
   82f1c:	4b2d      	ldr	r3, [pc, #180]	; (82fd4 <_free_r+0x1c8>)
   82f1e:	4640      	mov	r0, r8
   82f20:	6819      	ldr	r1, [r3, #0]
   82f22:	f7ff ff23 	bl	82d6c <_malloc_trim_r>
   82f26:	e7b3      	b.n	82e90 <_free_r+0x84>
   82f28:	4610      	mov	r0, r2
   82f2a:	e7cd      	b.n	82ec8 <_free_r+0xbc>
   82f2c:	1811      	adds	r1, r2, r0
   82f2e:	6849      	ldr	r1, [r1, #4]
   82f30:	07c9      	lsls	r1, r1, #31
   82f32:	d444      	bmi.n	82fbe <_free_r+0x1b2>
   82f34:	6891      	ldr	r1, [r2, #8]
   82f36:	4403      	add	r3, r0
   82f38:	68d2      	ldr	r2, [r2, #12]
   82f3a:	f043 0001 	orr.w	r0, r3, #1
   82f3e:	60ca      	str	r2, [r1, #12]
   82f40:	6091      	str	r1, [r2, #8]
   82f42:	6060      	str	r0, [r4, #4]
   82f44:	50e3      	str	r3, [r4, r3]
   82f46:	e7a3      	b.n	82e90 <_free_r+0x84>
   82f48:	2a14      	cmp	r2, #20
   82f4a:	d816      	bhi.n	82f7a <_free_r+0x16e>
   82f4c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82f50:	00ff      	lsls	r7, r7, #3
   82f52:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82f56:	e7aa      	b.n	82eae <_free_r+0xa2>
   82f58:	2301      	movs	r3, #1
   82f5a:	10aa      	asrs	r2, r5, #2
   82f5c:	684d      	ldr	r5, [r1, #4]
   82f5e:	4093      	lsls	r3, r2
   82f60:	432b      	orrs	r3, r5
   82f62:	604b      	str	r3, [r1, #4]
   82f64:	4603      	mov	r3, r0
   82f66:	e7b0      	b.n	82eca <_free_r+0xbe>
   82f68:	f043 0201 	orr.w	r2, r3, #1
   82f6c:	614c      	str	r4, [r1, #20]
   82f6e:	610c      	str	r4, [r1, #16]
   82f70:	60e5      	str	r5, [r4, #12]
   82f72:	60a5      	str	r5, [r4, #8]
   82f74:	6062      	str	r2, [r4, #4]
   82f76:	50e3      	str	r3, [r4, r3]
   82f78:	e78a      	b.n	82e90 <_free_r+0x84>
   82f7a:	2a54      	cmp	r2, #84	; 0x54
   82f7c:	d806      	bhi.n	82f8c <_free_r+0x180>
   82f7e:	0b1a      	lsrs	r2, r3, #12
   82f80:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82f84:	00ff      	lsls	r7, r7, #3
   82f86:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82f8a:	e790      	b.n	82eae <_free_r+0xa2>
   82f8c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82f90:	d806      	bhi.n	82fa0 <_free_r+0x194>
   82f92:	0bda      	lsrs	r2, r3, #15
   82f94:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82f98:	00ff      	lsls	r7, r7, #3
   82f9a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82f9e:	e786      	b.n	82eae <_free_r+0xa2>
   82fa0:	f240 5054 	movw	r0, #1364	; 0x554
   82fa4:	4282      	cmp	r2, r0
   82fa6:	d806      	bhi.n	82fb6 <_free_r+0x1aa>
   82fa8:	0c9a      	lsrs	r2, r3, #18
   82faa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82fae:	00ff      	lsls	r7, r7, #3
   82fb0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82fb4:	e77b      	b.n	82eae <_free_r+0xa2>
   82fb6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82fba:	257e      	movs	r5, #126	; 0x7e
   82fbc:	e777      	b.n	82eae <_free_r+0xa2>
   82fbe:	f043 0101 	orr.w	r1, r3, #1
   82fc2:	6061      	str	r1, [r4, #4]
   82fc4:	6013      	str	r3, [r2, #0]
   82fc6:	e763      	b.n	82e90 <_free_r+0x84>
   82fc8:	200706d0 	.word	0x200706d0
   82fcc:	200706d8 	.word	0x200706d8
   82fd0:	20070adc 	.word	0x20070adc
   82fd4:	20070c58 	.word	0x20070c58

00082fd8 <__sfvwrite_r>:
   82fd8:	6893      	ldr	r3, [r2, #8]
   82fda:	2b00      	cmp	r3, #0
   82fdc:	d071      	beq.n	830c2 <__sfvwrite_r+0xea>
   82fde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82fe2:	898b      	ldrh	r3, [r1, #12]
   82fe4:	b083      	sub	sp, #12
   82fe6:	460c      	mov	r4, r1
   82fe8:	0719      	lsls	r1, r3, #28
   82fea:	9000      	str	r0, [sp, #0]
   82fec:	4616      	mov	r6, r2
   82fee:	d525      	bpl.n	8303c <__sfvwrite_r+0x64>
   82ff0:	6922      	ldr	r2, [r4, #16]
   82ff2:	b31a      	cbz	r2, 8303c <__sfvwrite_r+0x64>
   82ff4:	f013 0002 	ands.w	r0, r3, #2
   82ff8:	6835      	ldr	r5, [r6, #0]
   82ffa:	d02b      	beq.n	83054 <__sfvwrite_r+0x7c>
   82ffc:	f04f 0900 	mov.w	r9, #0
   83000:	46b0      	mov	r8, r6
   83002:	464f      	mov	r7, r9
   83004:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 832c8 <__sfvwrite_r+0x2f0>
   83008:	2f00      	cmp	r7, #0
   8300a:	d055      	beq.n	830b8 <__sfvwrite_r+0xe0>
   8300c:	4557      	cmp	r7, sl
   8300e:	463b      	mov	r3, r7
   83010:	464a      	mov	r2, r9
   83012:	bf28      	it	cs
   83014:	4653      	movcs	r3, sl
   83016:	69e1      	ldr	r1, [r4, #28]
   83018:	9800      	ldr	r0, [sp, #0]
   8301a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8301c:	47b0      	blx	r6
   8301e:	2800      	cmp	r0, #0
   83020:	dd56      	ble.n	830d0 <__sfvwrite_r+0xf8>
   83022:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83026:	4481      	add	r9, r0
   83028:	1a1b      	subs	r3, r3, r0
   8302a:	1a3f      	subs	r7, r7, r0
   8302c:	f8c8 3008 	str.w	r3, [r8, #8]
   83030:	2b00      	cmp	r3, #0
   83032:	d1e9      	bne.n	83008 <__sfvwrite_r+0x30>
   83034:	2000      	movs	r0, #0
   83036:	b003      	add	sp, #12
   83038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8303c:	4621      	mov	r1, r4
   8303e:	9800      	ldr	r0, [sp, #0]
   83040:	f7ff fc56 	bl	828f0 <__swsetup_r>
   83044:	2800      	cmp	r0, #0
   83046:	f040 8135 	bne.w	832b4 <__sfvwrite_r+0x2dc>
   8304a:	89a3      	ldrh	r3, [r4, #12]
   8304c:	6835      	ldr	r5, [r6, #0]
   8304e:	f013 0002 	ands.w	r0, r3, #2
   83052:	d1d3      	bne.n	82ffc <__sfvwrite_r+0x24>
   83054:	f013 0901 	ands.w	r9, r3, #1
   83058:	d144      	bne.n	830e4 <__sfvwrite_r+0x10c>
   8305a:	464f      	mov	r7, r9
   8305c:	9601      	str	r6, [sp, #4]
   8305e:	b337      	cbz	r7, 830ae <__sfvwrite_r+0xd6>
   83060:	059a      	lsls	r2, r3, #22
   83062:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83066:	f140 8085 	bpl.w	83174 <__sfvwrite_r+0x19c>
   8306a:	4547      	cmp	r7, r8
   8306c:	46c3      	mov	fp, r8
   8306e:	f0c0 80ad 	bcc.w	831cc <__sfvwrite_r+0x1f4>
   83072:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83076:	f040 80ae 	bne.w	831d6 <__sfvwrite_r+0x1fe>
   8307a:	46ba      	mov	sl, r7
   8307c:	6820      	ldr	r0, [r4, #0]
   8307e:	465a      	mov	r2, fp
   83080:	4649      	mov	r1, r9
   83082:	f000 fd55 	bl	83b30 <memmove>
   83086:	68a2      	ldr	r2, [r4, #8]
   83088:	6823      	ldr	r3, [r4, #0]
   8308a:	eba2 0208 	sub.w	r2, r2, r8
   8308e:	445b      	add	r3, fp
   83090:	60a2      	str	r2, [r4, #8]
   83092:	6023      	str	r3, [r4, #0]
   83094:	9a01      	ldr	r2, [sp, #4]
   83096:	44d1      	add	r9, sl
   83098:	6893      	ldr	r3, [r2, #8]
   8309a:	eba7 070a 	sub.w	r7, r7, sl
   8309e:	eba3 030a 	sub.w	r3, r3, sl
   830a2:	6093      	str	r3, [r2, #8]
   830a4:	2b00      	cmp	r3, #0
   830a6:	d0c5      	beq.n	83034 <__sfvwrite_r+0x5c>
   830a8:	89a3      	ldrh	r3, [r4, #12]
   830aa:	2f00      	cmp	r7, #0
   830ac:	d1d8      	bne.n	83060 <__sfvwrite_r+0x88>
   830ae:	f8d5 9000 	ldr.w	r9, [r5]
   830b2:	686f      	ldr	r7, [r5, #4]
   830b4:	3508      	adds	r5, #8
   830b6:	e7d2      	b.n	8305e <__sfvwrite_r+0x86>
   830b8:	f8d5 9000 	ldr.w	r9, [r5]
   830bc:	686f      	ldr	r7, [r5, #4]
   830be:	3508      	adds	r5, #8
   830c0:	e7a2      	b.n	83008 <__sfvwrite_r+0x30>
   830c2:	2000      	movs	r0, #0
   830c4:	4770      	bx	lr
   830c6:	4621      	mov	r1, r4
   830c8:	9800      	ldr	r0, [sp, #0]
   830ca:	f7ff fd21 	bl	82b10 <_fflush_r>
   830ce:	b378      	cbz	r0, 83130 <__sfvwrite_r+0x158>
   830d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   830d4:	f04f 30ff 	mov.w	r0, #4294967295
   830d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   830dc:	81a3      	strh	r3, [r4, #12]
   830de:	b003      	add	sp, #12
   830e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830e4:	4681      	mov	r9, r0
   830e6:	4633      	mov	r3, r6
   830e8:	464e      	mov	r6, r9
   830ea:	46a8      	mov	r8, r5
   830ec:	469a      	mov	sl, r3
   830ee:	464d      	mov	r5, r9
   830f0:	b356      	cbz	r6, 83148 <__sfvwrite_r+0x170>
   830f2:	2800      	cmp	r0, #0
   830f4:	d032      	beq.n	8315c <__sfvwrite_r+0x184>
   830f6:	45b1      	cmp	r9, r6
   830f8:	46cb      	mov	fp, r9
   830fa:	bf28      	it	cs
   830fc:	46b3      	movcs	fp, r6
   830fe:	6820      	ldr	r0, [r4, #0]
   83100:	6923      	ldr	r3, [r4, #16]
   83102:	465f      	mov	r7, fp
   83104:	4298      	cmp	r0, r3
   83106:	6962      	ldr	r2, [r4, #20]
   83108:	d904      	bls.n	83114 <__sfvwrite_r+0x13c>
   8310a:	68a3      	ldr	r3, [r4, #8]
   8310c:	4413      	add	r3, r2
   8310e:	459b      	cmp	fp, r3
   83110:	f300 80a8 	bgt.w	83264 <__sfvwrite_r+0x28c>
   83114:	4593      	cmp	fp, r2
   83116:	db4d      	blt.n	831b4 <__sfvwrite_r+0x1dc>
   83118:	4613      	mov	r3, r2
   8311a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8311c:	462a      	mov	r2, r5
   8311e:	69e1      	ldr	r1, [r4, #28]
   83120:	9800      	ldr	r0, [sp, #0]
   83122:	47b8      	blx	r7
   83124:	1e07      	subs	r7, r0, #0
   83126:	ddd3      	ble.n	830d0 <__sfvwrite_r+0xf8>
   83128:	ebb9 0907 	subs.w	r9, r9, r7
   8312c:	d0cb      	beq.n	830c6 <__sfvwrite_r+0xee>
   8312e:	2001      	movs	r0, #1
   83130:	f8da 3008 	ldr.w	r3, [sl, #8]
   83134:	443d      	add	r5, r7
   83136:	1bdb      	subs	r3, r3, r7
   83138:	1bf6      	subs	r6, r6, r7
   8313a:	f8ca 3008 	str.w	r3, [sl, #8]
   8313e:	2b00      	cmp	r3, #0
   83140:	f43f af78 	beq.w	83034 <__sfvwrite_r+0x5c>
   83144:	2e00      	cmp	r6, #0
   83146:	d1d4      	bne.n	830f2 <__sfvwrite_r+0x11a>
   83148:	f108 0308 	add.w	r3, r8, #8
   8314c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83150:	4698      	mov	r8, r3
   83152:	f853 5c08 	ldr.w	r5, [r3, #-8]
   83156:	3308      	adds	r3, #8
   83158:	2e00      	cmp	r6, #0
   8315a:	d0f7      	beq.n	8314c <__sfvwrite_r+0x174>
   8315c:	4632      	mov	r2, r6
   8315e:	210a      	movs	r1, #10
   83160:	4628      	mov	r0, r5
   83162:	f000 fc29 	bl	839b8 <memchr>
   83166:	2800      	cmp	r0, #0
   83168:	f000 80a1 	beq.w	832ae <__sfvwrite_r+0x2d6>
   8316c:	3001      	adds	r0, #1
   8316e:	eba0 0905 	sub.w	r9, r0, r5
   83172:	e7c0      	b.n	830f6 <__sfvwrite_r+0x11e>
   83174:	6820      	ldr	r0, [r4, #0]
   83176:	6923      	ldr	r3, [r4, #16]
   83178:	4298      	cmp	r0, r3
   8317a:	d802      	bhi.n	83182 <__sfvwrite_r+0x1aa>
   8317c:	6963      	ldr	r3, [r4, #20]
   8317e:	429f      	cmp	r7, r3
   83180:	d25d      	bcs.n	8323e <__sfvwrite_r+0x266>
   83182:	45b8      	cmp	r8, r7
   83184:	bf28      	it	cs
   83186:	46b8      	movcs	r8, r7
   83188:	4649      	mov	r1, r9
   8318a:	4642      	mov	r2, r8
   8318c:	f000 fcd0 	bl	83b30 <memmove>
   83190:	68a3      	ldr	r3, [r4, #8]
   83192:	6822      	ldr	r2, [r4, #0]
   83194:	eba3 0308 	sub.w	r3, r3, r8
   83198:	4442      	add	r2, r8
   8319a:	60a3      	str	r3, [r4, #8]
   8319c:	6022      	str	r2, [r4, #0]
   8319e:	b10b      	cbz	r3, 831a4 <__sfvwrite_r+0x1cc>
   831a0:	46c2      	mov	sl, r8
   831a2:	e777      	b.n	83094 <__sfvwrite_r+0xbc>
   831a4:	4621      	mov	r1, r4
   831a6:	9800      	ldr	r0, [sp, #0]
   831a8:	f7ff fcb2 	bl	82b10 <_fflush_r>
   831ac:	2800      	cmp	r0, #0
   831ae:	d18f      	bne.n	830d0 <__sfvwrite_r+0xf8>
   831b0:	46c2      	mov	sl, r8
   831b2:	e76f      	b.n	83094 <__sfvwrite_r+0xbc>
   831b4:	465a      	mov	r2, fp
   831b6:	4629      	mov	r1, r5
   831b8:	f000 fcba 	bl	83b30 <memmove>
   831bc:	68a2      	ldr	r2, [r4, #8]
   831be:	6823      	ldr	r3, [r4, #0]
   831c0:	eba2 020b 	sub.w	r2, r2, fp
   831c4:	445b      	add	r3, fp
   831c6:	60a2      	str	r2, [r4, #8]
   831c8:	6023      	str	r3, [r4, #0]
   831ca:	e7ad      	b.n	83128 <__sfvwrite_r+0x150>
   831cc:	46b8      	mov	r8, r7
   831ce:	46ba      	mov	sl, r7
   831d0:	46bb      	mov	fp, r7
   831d2:	6820      	ldr	r0, [r4, #0]
   831d4:	e753      	b.n	8307e <__sfvwrite_r+0xa6>
   831d6:	6962      	ldr	r2, [r4, #20]
   831d8:	6820      	ldr	r0, [r4, #0]
   831da:	6921      	ldr	r1, [r4, #16]
   831dc:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   831e0:	eba0 0a01 	sub.w	sl, r0, r1
   831e4:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   831e8:	f10a 0001 	add.w	r0, sl, #1
   831ec:	ea4f 0868 	mov.w	r8, r8, asr #1
   831f0:	4438      	add	r0, r7
   831f2:	4540      	cmp	r0, r8
   831f4:	4642      	mov	r2, r8
   831f6:	bf84      	itt	hi
   831f8:	4680      	movhi	r8, r0
   831fa:	4642      	movhi	r2, r8
   831fc:	055b      	lsls	r3, r3, #21
   831fe:	d544      	bpl.n	8328a <__sfvwrite_r+0x2b2>
   83200:	4611      	mov	r1, r2
   83202:	9800      	ldr	r0, [sp, #0]
   83204:	f000 f920 	bl	83448 <_malloc_r>
   83208:	4683      	mov	fp, r0
   8320a:	2800      	cmp	r0, #0
   8320c:	d055      	beq.n	832ba <__sfvwrite_r+0x2e2>
   8320e:	4652      	mov	r2, sl
   83210:	6921      	ldr	r1, [r4, #16]
   83212:	f000 fc17 	bl	83a44 <memcpy>
   83216:	89a3      	ldrh	r3, [r4, #12]
   83218:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   8321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83220:	81a3      	strh	r3, [r4, #12]
   83222:	eb0b 000a 	add.w	r0, fp, sl
   83226:	eba8 030a 	sub.w	r3, r8, sl
   8322a:	f8c4 b010 	str.w	fp, [r4, #16]
   8322e:	f8c4 8014 	str.w	r8, [r4, #20]
   83232:	6020      	str	r0, [r4, #0]
   83234:	60a3      	str	r3, [r4, #8]
   83236:	46b8      	mov	r8, r7
   83238:	46ba      	mov	sl, r7
   8323a:	46bb      	mov	fp, r7
   8323c:	e71f      	b.n	8307e <__sfvwrite_r+0xa6>
   8323e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83242:	42ba      	cmp	r2, r7
   83244:	bf28      	it	cs
   83246:	463a      	movcs	r2, r7
   83248:	fb92 f2f3 	sdiv	r2, r2, r3
   8324c:	69e1      	ldr	r1, [r4, #28]
   8324e:	fb03 f302 	mul.w	r3, r3, r2
   83252:	9800      	ldr	r0, [sp, #0]
   83254:	464a      	mov	r2, r9
   83256:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83258:	47b0      	blx	r6
   8325a:	f1b0 0a00 	subs.w	sl, r0, #0
   8325e:	f73f af19 	bgt.w	83094 <__sfvwrite_r+0xbc>
   83262:	e735      	b.n	830d0 <__sfvwrite_r+0xf8>
   83264:	461a      	mov	r2, r3
   83266:	4629      	mov	r1, r5
   83268:	9301      	str	r3, [sp, #4]
   8326a:	f000 fc61 	bl	83b30 <memmove>
   8326e:	6822      	ldr	r2, [r4, #0]
   83270:	9b01      	ldr	r3, [sp, #4]
   83272:	4621      	mov	r1, r4
   83274:	441a      	add	r2, r3
   83276:	6022      	str	r2, [r4, #0]
   83278:	9800      	ldr	r0, [sp, #0]
   8327a:	f7ff fc49 	bl	82b10 <_fflush_r>
   8327e:	9b01      	ldr	r3, [sp, #4]
   83280:	2800      	cmp	r0, #0
   83282:	f47f af25 	bne.w	830d0 <__sfvwrite_r+0xf8>
   83286:	461f      	mov	r7, r3
   83288:	e74e      	b.n	83128 <__sfvwrite_r+0x150>
   8328a:	9800      	ldr	r0, [sp, #0]
   8328c:	f000 fcc0 	bl	83c10 <_realloc_r>
   83290:	4683      	mov	fp, r0
   83292:	2800      	cmp	r0, #0
   83294:	d1c5      	bne.n	83222 <__sfvwrite_r+0x24a>
   83296:	9d00      	ldr	r5, [sp, #0]
   83298:	6921      	ldr	r1, [r4, #16]
   8329a:	4628      	mov	r0, r5
   8329c:	f7ff fdb6 	bl	82e0c <_free_r>
   832a0:	220c      	movs	r2, #12
   832a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   832a6:	602a      	str	r2, [r5, #0]
   832a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   832ac:	e712      	b.n	830d4 <__sfvwrite_r+0xfc>
   832ae:	f106 0901 	add.w	r9, r6, #1
   832b2:	e720      	b.n	830f6 <__sfvwrite_r+0x11e>
   832b4:	f04f 30ff 	mov.w	r0, #4294967295
   832b8:	e6bd      	b.n	83036 <__sfvwrite_r+0x5e>
   832ba:	220c      	movs	r2, #12
   832bc:	9900      	ldr	r1, [sp, #0]
   832be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   832c2:	600a      	str	r2, [r1, #0]
   832c4:	e706      	b.n	830d4 <__sfvwrite_r+0xfc>
   832c6:	bf00      	nop
   832c8:	7ffffc00 	.word	0x7ffffc00

000832cc <_fwalk_reent>:
   832cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   832d0:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   832d4:	d01e      	beq.n	83314 <_fwalk_reent+0x48>
   832d6:	4688      	mov	r8, r1
   832d8:	4607      	mov	r7, r0
   832da:	f04f 0900 	mov.w	r9, #0
   832de:	6875      	ldr	r5, [r6, #4]
   832e0:	68b4      	ldr	r4, [r6, #8]
   832e2:	3d01      	subs	r5, #1
   832e4:	d410      	bmi.n	83308 <_fwalk_reent+0x3c>
   832e6:	89a3      	ldrh	r3, [r4, #12]
   832e8:	3d01      	subs	r5, #1
   832ea:	2b01      	cmp	r3, #1
   832ec:	d908      	bls.n	83300 <_fwalk_reent+0x34>
   832ee:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   832f2:	3301      	adds	r3, #1
   832f4:	d004      	beq.n	83300 <_fwalk_reent+0x34>
   832f6:	4621      	mov	r1, r4
   832f8:	4638      	mov	r0, r7
   832fa:	47c0      	blx	r8
   832fc:	ea49 0900 	orr.w	r9, r9, r0
   83300:	1c6b      	adds	r3, r5, #1
   83302:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83306:	d1ee      	bne.n	832e6 <_fwalk_reent+0x1a>
   83308:	6836      	ldr	r6, [r6, #0]
   8330a:	2e00      	cmp	r6, #0
   8330c:	d1e7      	bne.n	832de <_fwalk_reent+0x12>
   8330e:	4648      	mov	r0, r9
   83310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83314:	46b1      	mov	r9, r6
   83316:	4648      	mov	r0, r9
   83318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008331c <__locale_mb_cur_max>:
   8331c:	4b04      	ldr	r3, [pc, #16]	; (83330 <__locale_mb_cur_max+0x14>)
   8331e:	4a05      	ldr	r2, [pc, #20]	; (83334 <__locale_mb_cur_max+0x18>)
   83320:	681b      	ldr	r3, [r3, #0]
   83322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   83324:	2b00      	cmp	r3, #0
   83326:	bf08      	it	eq
   83328:	4613      	moveq	r3, r2
   8332a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8332e:	4770      	bx	lr
   83330:	20070134 	.word	0x20070134
   83334:	20070564 	.word	0x20070564

00083338 <__retarget_lock_init_recursive>:
   83338:	4770      	bx	lr
   8333a:	bf00      	nop

0008333c <__retarget_lock_close_recursive>:
   8333c:	4770      	bx	lr
   8333e:	bf00      	nop

00083340 <__retarget_lock_acquire_recursive>:
   83340:	4770      	bx	lr
   83342:	bf00      	nop

00083344 <__retarget_lock_release_recursive>:
   83344:	4770      	bx	lr
   83346:	bf00      	nop

00083348 <__swhatbuf_r>:
   83348:	b570      	push	{r4, r5, r6, lr}
   8334a:	460c      	mov	r4, r1
   8334c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83350:	b090      	sub	sp, #64	; 0x40
   83352:	2900      	cmp	r1, #0
   83354:	4615      	mov	r5, r2
   83356:	461e      	mov	r6, r3
   83358:	db14      	blt.n	83384 <__swhatbuf_r+0x3c>
   8335a:	aa01      	add	r2, sp, #4
   8335c:	f000 ffde 	bl	8431c <_fstat_r>
   83360:	2800      	cmp	r0, #0
   83362:	db0f      	blt.n	83384 <__swhatbuf_r+0x3c>
   83364:	9a02      	ldr	r2, [sp, #8]
   83366:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8336a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8336e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   83372:	fab2 f282 	clz	r2, r2
   83376:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8337a:	0952      	lsrs	r2, r2, #5
   8337c:	6032      	str	r2, [r6, #0]
   8337e:	602b      	str	r3, [r5, #0]
   83380:	b010      	add	sp, #64	; 0x40
   83382:	bd70      	pop	{r4, r5, r6, pc}
   83384:	2300      	movs	r3, #0
   83386:	89a2      	ldrh	r2, [r4, #12]
   83388:	6033      	str	r3, [r6, #0]
   8338a:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8338e:	d004      	beq.n	8339a <__swhatbuf_r+0x52>
   83390:	2240      	movs	r2, #64	; 0x40
   83392:	4618      	mov	r0, r3
   83394:	602a      	str	r2, [r5, #0]
   83396:	b010      	add	sp, #64	; 0x40
   83398:	bd70      	pop	{r4, r5, r6, pc}
   8339a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8339e:	602b      	str	r3, [r5, #0]
   833a0:	b010      	add	sp, #64	; 0x40
   833a2:	bd70      	pop	{r4, r5, r6, pc}

000833a4 <__smakebuf_r>:
   833a4:	898a      	ldrh	r2, [r1, #12]
   833a6:	460b      	mov	r3, r1
   833a8:	0792      	lsls	r2, r2, #30
   833aa:	d506      	bpl.n	833ba <__smakebuf_r+0x16>
   833ac:	2101      	movs	r1, #1
   833ae:	f103 0243 	add.w	r2, r3, #67	; 0x43
   833b2:	6159      	str	r1, [r3, #20]
   833b4:	601a      	str	r2, [r3, #0]
   833b6:	611a      	str	r2, [r3, #16]
   833b8:	4770      	bx	lr
   833ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   833bc:	b083      	sub	sp, #12
   833be:	ab01      	add	r3, sp, #4
   833c0:	466a      	mov	r2, sp
   833c2:	460c      	mov	r4, r1
   833c4:	4606      	mov	r6, r0
   833c6:	f7ff ffbf 	bl	83348 <__swhatbuf_r>
   833ca:	9900      	ldr	r1, [sp, #0]
   833cc:	4605      	mov	r5, r0
   833ce:	4630      	mov	r0, r6
   833d0:	f000 f83a 	bl	83448 <_malloc_r>
   833d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   833d8:	b1d8      	cbz	r0, 83412 <__smakebuf_r+0x6e>
   833da:	e89d 0006 	ldmia.w	sp, {r1, r2}
   833de:	4f15      	ldr	r7, [pc, #84]	; (83434 <__smakebuf_r+0x90>)
   833e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   833e4:	63f7      	str	r7, [r6, #60]	; 0x3c
   833e6:	81a3      	strh	r3, [r4, #12]
   833e8:	6020      	str	r0, [r4, #0]
   833ea:	6120      	str	r0, [r4, #16]
   833ec:	6161      	str	r1, [r4, #20]
   833ee:	b91a      	cbnz	r2, 833f8 <__smakebuf_r+0x54>
   833f0:	432b      	orrs	r3, r5
   833f2:	81a3      	strh	r3, [r4, #12]
   833f4:	b003      	add	sp, #12
   833f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   833f8:	4630      	mov	r0, r6
   833fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   833fe:	f000 ffa1 	bl	84344 <_isatty_r>
   83402:	b1a0      	cbz	r0, 8342e <__smakebuf_r+0x8a>
   83404:	89a3      	ldrh	r3, [r4, #12]
   83406:	f023 0303 	bic.w	r3, r3, #3
   8340a:	f043 0301 	orr.w	r3, r3, #1
   8340e:	b21b      	sxth	r3, r3
   83410:	e7ee      	b.n	833f0 <__smakebuf_r+0x4c>
   83412:	059a      	lsls	r2, r3, #22
   83414:	d4ee      	bmi.n	833f4 <__smakebuf_r+0x50>
   83416:	2101      	movs	r1, #1
   83418:	f023 0303 	bic.w	r3, r3, #3
   8341c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83420:	f043 0302 	orr.w	r3, r3, #2
   83424:	81a3      	strh	r3, [r4, #12]
   83426:	6161      	str	r1, [r4, #20]
   83428:	6022      	str	r2, [r4, #0]
   8342a:	6122      	str	r2, [r4, #16]
   8342c:	e7e2      	b.n	833f4 <__smakebuf_r+0x50>
   8342e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83432:	e7dd      	b.n	833f0 <__smakebuf_r+0x4c>
   83434:	00082b65 	.word	0x00082b65

00083438 <malloc>:
   83438:	4b02      	ldr	r3, [pc, #8]	; (83444 <malloc+0xc>)
   8343a:	4601      	mov	r1, r0
   8343c:	6818      	ldr	r0, [r3, #0]
   8343e:	f000 b803 	b.w	83448 <_malloc_r>
   83442:	bf00      	nop
   83444:	20070134 	.word	0x20070134

00083448 <_malloc_r>:
   83448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8344c:	f101 060b 	add.w	r6, r1, #11
   83450:	2e16      	cmp	r6, #22
   83452:	b083      	sub	sp, #12
   83454:	4605      	mov	r5, r0
   83456:	f240 809e 	bls.w	83596 <_malloc_r+0x14e>
   8345a:	f036 0607 	bics.w	r6, r6, #7
   8345e:	f100 80bd 	bmi.w	835dc <_malloc_r+0x194>
   83462:	42b1      	cmp	r1, r6
   83464:	f200 80ba 	bhi.w	835dc <_malloc_r+0x194>
   83468:	f000 fbc6 	bl	83bf8 <__malloc_lock>
   8346c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   83470:	f0c0 8285 	bcc.w	8397e <_malloc_r+0x536>
   83474:	0a73      	lsrs	r3, r6, #9
   83476:	f000 80b8 	beq.w	835ea <_malloc_r+0x1a2>
   8347a:	2b04      	cmp	r3, #4
   8347c:	f200 816c 	bhi.w	83758 <_malloc_r+0x310>
   83480:	09b3      	lsrs	r3, r6, #6
   83482:	f103 0039 	add.w	r0, r3, #57	; 0x39
   83486:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8348a:	00c1      	lsls	r1, r0, #3
   8348c:	4fb8      	ldr	r7, [pc, #736]	; (83770 <_malloc_r+0x328>)
   8348e:	4439      	add	r1, r7
   83490:	684c      	ldr	r4, [r1, #4]
   83492:	3908      	subs	r1, #8
   83494:	42a1      	cmp	r1, r4
   83496:	d106      	bne.n	834a6 <_malloc_r+0x5e>
   83498:	e00c      	b.n	834b4 <_malloc_r+0x6c>
   8349a:	2a00      	cmp	r2, #0
   8349c:	f280 80ab 	bge.w	835f6 <_malloc_r+0x1ae>
   834a0:	68e4      	ldr	r4, [r4, #12]
   834a2:	42a1      	cmp	r1, r4
   834a4:	d006      	beq.n	834b4 <_malloc_r+0x6c>
   834a6:	6863      	ldr	r3, [r4, #4]
   834a8:	f023 0303 	bic.w	r3, r3, #3
   834ac:	1b9a      	subs	r2, r3, r6
   834ae:	2a0f      	cmp	r2, #15
   834b0:	ddf3      	ble.n	8349a <_malloc_r+0x52>
   834b2:	4670      	mov	r0, lr
   834b4:	693c      	ldr	r4, [r7, #16]
   834b6:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83784 <_malloc_r+0x33c>
   834ba:	4574      	cmp	r4, lr
   834bc:	f000 819e 	beq.w	837fc <_malloc_r+0x3b4>
   834c0:	6863      	ldr	r3, [r4, #4]
   834c2:	f023 0303 	bic.w	r3, r3, #3
   834c6:	1b9a      	subs	r2, r3, r6
   834c8:	2a0f      	cmp	r2, #15
   834ca:	f300 8183 	bgt.w	837d4 <_malloc_r+0x38c>
   834ce:	2a00      	cmp	r2, #0
   834d0:	f8c7 e014 	str.w	lr, [r7, #20]
   834d4:	f8c7 e010 	str.w	lr, [r7, #16]
   834d8:	f280 8091 	bge.w	835fe <_malloc_r+0x1b6>
   834dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   834e0:	f080 8154 	bcs.w	8378c <_malloc_r+0x344>
   834e4:	2201      	movs	r2, #1
   834e6:	08db      	lsrs	r3, r3, #3
   834e8:	6879      	ldr	r1, [r7, #4]
   834ea:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   834ee:	4413      	add	r3, r2
   834f0:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   834f4:	fa02 f20c 	lsl.w	r2, r2, ip
   834f8:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   834fc:	430a      	orrs	r2, r1
   834fe:	f1ac 0108 	sub.w	r1, ip, #8
   83502:	60e1      	str	r1, [r4, #12]
   83504:	f8c4 8008 	str.w	r8, [r4, #8]
   83508:	607a      	str	r2, [r7, #4]
   8350a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8350e:	f8c8 400c 	str.w	r4, [r8, #12]
   83512:	2401      	movs	r4, #1
   83514:	1083      	asrs	r3, r0, #2
   83516:	409c      	lsls	r4, r3
   83518:	4294      	cmp	r4, r2
   8351a:	d87d      	bhi.n	83618 <_malloc_r+0x1d0>
   8351c:	4214      	tst	r4, r2
   8351e:	d106      	bne.n	8352e <_malloc_r+0xe6>
   83520:	f020 0003 	bic.w	r0, r0, #3
   83524:	0064      	lsls	r4, r4, #1
   83526:	4214      	tst	r4, r2
   83528:	f100 0004 	add.w	r0, r0, #4
   8352c:	d0fa      	beq.n	83524 <_malloc_r+0xdc>
   8352e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   83532:	46cc      	mov	ip, r9
   83534:	4680      	mov	r8, r0
   83536:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8353a:	459c      	cmp	ip, r3
   8353c:	d107      	bne.n	8354e <_malloc_r+0x106>
   8353e:	e15f      	b.n	83800 <_malloc_r+0x3b8>
   83540:	2a00      	cmp	r2, #0
   83542:	f280 816d 	bge.w	83820 <_malloc_r+0x3d8>
   83546:	68db      	ldr	r3, [r3, #12]
   83548:	459c      	cmp	ip, r3
   8354a:	f000 8159 	beq.w	83800 <_malloc_r+0x3b8>
   8354e:	6859      	ldr	r1, [r3, #4]
   83550:	f021 0103 	bic.w	r1, r1, #3
   83554:	1b8a      	subs	r2, r1, r6
   83556:	2a0f      	cmp	r2, #15
   83558:	ddf2      	ble.n	83540 <_malloc_r+0xf8>
   8355a:	68dc      	ldr	r4, [r3, #12]
   8355c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   83560:	f046 0801 	orr.w	r8, r6, #1
   83564:	4628      	mov	r0, r5
   83566:	441e      	add	r6, r3
   83568:	f042 0501 	orr.w	r5, r2, #1
   8356c:	f8c3 8004 	str.w	r8, [r3, #4]
   83570:	f8cc 400c 	str.w	r4, [ip, #12]
   83574:	f8c4 c008 	str.w	ip, [r4, #8]
   83578:	617e      	str	r6, [r7, #20]
   8357a:	613e      	str	r6, [r7, #16]
   8357c:	f8c6 e00c 	str.w	lr, [r6, #12]
   83580:	f8c6 e008 	str.w	lr, [r6, #8]
   83584:	6075      	str	r5, [r6, #4]
   83586:	505a      	str	r2, [r3, r1]
   83588:	9300      	str	r3, [sp, #0]
   8358a:	f000 fb3b 	bl	83c04 <__malloc_unlock>
   8358e:	9b00      	ldr	r3, [sp, #0]
   83590:	f103 0408 	add.w	r4, r3, #8
   83594:	e01e      	b.n	835d4 <_malloc_r+0x18c>
   83596:	2910      	cmp	r1, #16
   83598:	d820      	bhi.n	835dc <_malloc_r+0x194>
   8359a:	f000 fb2d 	bl	83bf8 <__malloc_lock>
   8359e:	2610      	movs	r6, #16
   835a0:	2318      	movs	r3, #24
   835a2:	2002      	movs	r0, #2
   835a4:	4f72      	ldr	r7, [pc, #456]	; (83770 <_malloc_r+0x328>)
   835a6:	443b      	add	r3, r7
   835a8:	685c      	ldr	r4, [r3, #4]
   835aa:	f1a3 0208 	sub.w	r2, r3, #8
   835ae:	4294      	cmp	r4, r2
   835b0:	f000 812f 	beq.w	83812 <_malloc_r+0x3ca>
   835b4:	6863      	ldr	r3, [r4, #4]
   835b6:	68e1      	ldr	r1, [r4, #12]
   835b8:	f023 0303 	bic.w	r3, r3, #3
   835bc:	4423      	add	r3, r4
   835be:	685a      	ldr	r2, [r3, #4]
   835c0:	68a6      	ldr	r6, [r4, #8]
   835c2:	f042 0201 	orr.w	r2, r2, #1
   835c6:	60f1      	str	r1, [r6, #12]
   835c8:	4628      	mov	r0, r5
   835ca:	608e      	str	r6, [r1, #8]
   835cc:	605a      	str	r2, [r3, #4]
   835ce:	f000 fb19 	bl	83c04 <__malloc_unlock>
   835d2:	3408      	adds	r4, #8
   835d4:	4620      	mov	r0, r4
   835d6:	b003      	add	sp, #12
   835d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835dc:	2400      	movs	r4, #0
   835de:	230c      	movs	r3, #12
   835e0:	4620      	mov	r0, r4
   835e2:	602b      	str	r3, [r5, #0]
   835e4:	b003      	add	sp, #12
   835e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835ea:	2040      	movs	r0, #64	; 0x40
   835ec:	f44f 7100 	mov.w	r1, #512	; 0x200
   835f0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   835f4:	e74a      	b.n	8348c <_malloc_r+0x44>
   835f6:	4423      	add	r3, r4
   835f8:	685a      	ldr	r2, [r3, #4]
   835fa:	68e1      	ldr	r1, [r4, #12]
   835fc:	e7e0      	b.n	835c0 <_malloc_r+0x178>
   835fe:	4423      	add	r3, r4
   83600:	685a      	ldr	r2, [r3, #4]
   83602:	4628      	mov	r0, r5
   83604:	f042 0201 	orr.w	r2, r2, #1
   83608:	605a      	str	r2, [r3, #4]
   8360a:	3408      	adds	r4, #8
   8360c:	f000 fafa 	bl	83c04 <__malloc_unlock>
   83610:	4620      	mov	r0, r4
   83612:	b003      	add	sp, #12
   83614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83618:	68bc      	ldr	r4, [r7, #8]
   8361a:	6863      	ldr	r3, [r4, #4]
   8361c:	f023 0803 	bic.w	r8, r3, #3
   83620:	45b0      	cmp	r8, r6
   83622:	d304      	bcc.n	8362e <_malloc_r+0x1e6>
   83624:	eba8 0306 	sub.w	r3, r8, r6
   83628:	2b0f      	cmp	r3, #15
   8362a:	f300 8085 	bgt.w	83738 <_malloc_r+0x2f0>
   8362e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83788 <_malloc_r+0x340>
   83632:	4b50      	ldr	r3, [pc, #320]	; (83774 <_malloc_r+0x32c>)
   83634:	f8d9 2000 	ldr.w	r2, [r9]
   83638:	681b      	ldr	r3, [r3, #0]
   8363a:	3201      	adds	r2, #1
   8363c:	4433      	add	r3, r6
   8363e:	eb04 0a08 	add.w	sl, r4, r8
   83642:	f000 8154 	beq.w	838ee <_malloc_r+0x4a6>
   83646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8364a:	330f      	adds	r3, #15
   8364c:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83650:	f02b 0b0f 	bic.w	fp, fp, #15
   83654:	4659      	mov	r1, fp
   83656:	4628      	mov	r0, r5
   83658:	f000 fc90 	bl	83f7c <_sbrk_r>
   8365c:	1c41      	adds	r1, r0, #1
   8365e:	4602      	mov	r2, r0
   83660:	f000 80fb 	beq.w	8385a <_malloc_r+0x412>
   83664:	4582      	cmp	sl, r0
   83666:	f200 80f6 	bhi.w	83856 <_malloc_r+0x40e>
   8366a:	4b43      	ldr	r3, [pc, #268]	; (83778 <_malloc_r+0x330>)
   8366c:	6819      	ldr	r1, [r3, #0]
   8366e:	4459      	add	r1, fp
   83670:	6019      	str	r1, [r3, #0]
   83672:	f000 814c 	beq.w	8390e <_malloc_r+0x4c6>
   83676:	f8d9 0000 	ldr.w	r0, [r9]
   8367a:	3001      	adds	r0, #1
   8367c:	bf1b      	ittet	ne
   8367e:	eba2 0a0a 	subne.w	sl, r2, sl
   83682:	4451      	addne	r1, sl
   83684:	f8c9 2000 	streq.w	r2, [r9]
   83688:	6019      	strne	r1, [r3, #0]
   8368a:	f012 0107 	ands.w	r1, r2, #7
   8368e:	f000 8114 	beq.w	838ba <_malloc_r+0x472>
   83692:	f1c1 0008 	rsb	r0, r1, #8
   83696:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8369a:	4402      	add	r2, r0
   8369c:	3108      	adds	r1, #8
   8369e:	eb02 090b 	add.w	r9, r2, fp
   836a2:	f3c9 090b 	ubfx	r9, r9, #0, #12
   836a6:	eba1 0909 	sub.w	r9, r1, r9
   836aa:	4649      	mov	r1, r9
   836ac:	4628      	mov	r0, r5
   836ae:	9301      	str	r3, [sp, #4]
   836b0:	9200      	str	r2, [sp, #0]
   836b2:	f000 fc63 	bl	83f7c <_sbrk_r>
   836b6:	1c43      	adds	r3, r0, #1
   836b8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   836bc:	f000 8142 	beq.w	83944 <_malloc_r+0x4fc>
   836c0:	1a80      	subs	r0, r0, r2
   836c2:	4448      	add	r0, r9
   836c4:	f040 0001 	orr.w	r0, r0, #1
   836c8:	6819      	ldr	r1, [r3, #0]
   836ca:	42bc      	cmp	r4, r7
   836cc:	4449      	add	r1, r9
   836ce:	60ba      	str	r2, [r7, #8]
   836d0:	6019      	str	r1, [r3, #0]
   836d2:	6050      	str	r0, [r2, #4]
   836d4:	d017      	beq.n	83706 <_malloc_r+0x2be>
   836d6:	f1b8 0f0f 	cmp.w	r8, #15
   836da:	f240 80fa 	bls.w	838d2 <_malloc_r+0x48a>
   836de:	f04f 0c05 	mov.w	ip, #5
   836e2:	6862      	ldr	r2, [r4, #4]
   836e4:	f1a8 000c 	sub.w	r0, r8, #12
   836e8:	f020 0007 	bic.w	r0, r0, #7
   836ec:	f002 0201 	and.w	r2, r2, #1
   836f0:	eb04 0e00 	add.w	lr, r4, r0
   836f4:	4302      	orrs	r2, r0
   836f6:	280f      	cmp	r0, #15
   836f8:	6062      	str	r2, [r4, #4]
   836fa:	f8ce c004 	str.w	ip, [lr, #4]
   836fe:	f8ce c008 	str.w	ip, [lr, #8]
   83702:	f200 8116 	bhi.w	83932 <_malloc_r+0x4ea>
   83706:	4b1d      	ldr	r3, [pc, #116]	; (8377c <_malloc_r+0x334>)
   83708:	68bc      	ldr	r4, [r7, #8]
   8370a:	681a      	ldr	r2, [r3, #0]
   8370c:	4291      	cmp	r1, r2
   8370e:	bf88      	it	hi
   83710:	6019      	strhi	r1, [r3, #0]
   83712:	4b1b      	ldr	r3, [pc, #108]	; (83780 <_malloc_r+0x338>)
   83714:	681a      	ldr	r2, [r3, #0]
   83716:	4291      	cmp	r1, r2
   83718:	6862      	ldr	r2, [r4, #4]
   8371a:	bf88      	it	hi
   8371c:	6019      	strhi	r1, [r3, #0]
   8371e:	f022 0203 	bic.w	r2, r2, #3
   83722:	4296      	cmp	r6, r2
   83724:	eba2 0306 	sub.w	r3, r2, r6
   83728:	d801      	bhi.n	8372e <_malloc_r+0x2e6>
   8372a:	2b0f      	cmp	r3, #15
   8372c:	dc04      	bgt.n	83738 <_malloc_r+0x2f0>
   8372e:	4628      	mov	r0, r5
   83730:	f000 fa68 	bl	83c04 <__malloc_unlock>
   83734:	2400      	movs	r4, #0
   83736:	e74d      	b.n	835d4 <_malloc_r+0x18c>
   83738:	f046 0201 	orr.w	r2, r6, #1
   8373c:	f043 0301 	orr.w	r3, r3, #1
   83740:	4426      	add	r6, r4
   83742:	6062      	str	r2, [r4, #4]
   83744:	4628      	mov	r0, r5
   83746:	60be      	str	r6, [r7, #8]
   83748:	3408      	adds	r4, #8
   8374a:	6073      	str	r3, [r6, #4]
   8374c:	f000 fa5a 	bl	83c04 <__malloc_unlock>
   83750:	4620      	mov	r0, r4
   83752:	b003      	add	sp, #12
   83754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83758:	2b14      	cmp	r3, #20
   8375a:	d970      	bls.n	8383e <_malloc_r+0x3f6>
   8375c:	2b54      	cmp	r3, #84	; 0x54
   8375e:	f200 80a2 	bhi.w	838a6 <_malloc_r+0x45e>
   83762:	0b33      	lsrs	r3, r6, #12
   83764:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83768:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8376c:	00c1      	lsls	r1, r0, #3
   8376e:	e68d      	b.n	8348c <_malloc_r+0x44>
   83770:	200706d0 	.word	0x200706d0
   83774:	20070c58 	.word	0x20070c58
   83778:	20070c28 	.word	0x20070c28
   8377c:	20070c50 	.word	0x20070c50
   83780:	20070c54 	.word	0x20070c54
   83784:	200706d8 	.word	0x200706d8
   83788:	20070ad8 	.word	0x20070ad8
   8378c:	0a5a      	lsrs	r2, r3, #9
   8378e:	2a04      	cmp	r2, #4
   83790:	d95b      	bls.n	8384a <_malloc_r+0x402>
   83792:	2a14      	cmp	r2, #20
   83794:	f200 80ae 	bhi.w	838f4 <_malloc_r+0x4ac>
   83798:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8379c:	00c9      	lsls	r1, r1, #3
   8379e:	325b      	adds	r2, #91	; 0x5b
   837a0:	eb07 0c01 	add.w	ip, r7, r1
   837a4:	5879      	ldr	r1, [r7, r1]
   837a6:	f1ac 0c08 	sub.w	ip, ip, #8
   837aa:	458c      	cmp	ip, r1
   837ac:	f000 8088 	beq.w	838c0 <_malloc_r+0x478>
   837b0:	684a      	ldr	r2, [r1, #4]
   837b2:	f022 0203 	bic.w	r2, r2, #3
   837b6:	4293      	cmp	r3, r2
   837b8:	d273      	bcs.n	838a2 <_malloc_r+0x45a>
   837ba:	6889      	ldr	r1, [r1, #8]
   837bc:	458c      	cmp	ip, r1
   837be:	d1f7      	bne.n	837b0 <_malloc_r+0x368>
   837c0:	f8dc 300c 	ldr.w	r3, [ip, #12]
   837c4:	687a      	ldr	r2, [r7, #4]
   837c6:	60e3      	str	r3, [r4, #12]
   837c8:	f8c4 c008 	str.w	ip, [r4, #8]
   837cc:	609c      	str	r4, [r3, #8]
   837ce:	f8cc 400c 	str.w	r4, [ip, #12]
   837d2:	e69e      	b.n	83512 <_malloc_r+0xca>
   837d4:	f046 0c01 	orr.w	ip, r6, #1
   837d8:	f042 0101 	orr.w	r1, r2, #1
   837dc:	4426      	add	r6, r4
   837de:	f8c4 c004 	str.w	ip, [r4, #4]
   837e2:	4628      	mov	r0, r5
   837e4:	617e      	str	r6, [r7, #20]
   837e6:	613e      	str	r6, [r7, #16]
   837e8:	f8c6 e00c 	str.w	lr, [r6, #12]
   837ec:	f8c6 e008 	str.w	lr, [r6, #8]
   837f0:	6071      	str	r1, [r6, #4]
   837f2:	50e2      	str	r2, [r4, r3]
   837f4:	f000 fa06 	bl	83c04 <__malloc_unlock>
   837f8:	3408      	adds	r4, #8
   837fa:	e6eb      	b.n	835d4 <_malloc_r+0x18c>
   837fc:	687a      	ldr	r2, [r7, #4]
   837fe:	e688      	b.n	83512 <_malloc_r+0xca>
   83800:	f108 0801 	add.w	r8, r8, #1
   83804:	f018 0f03 	tst.w	r8, #3
   83808:	f10c 0c08 	add.w	ip, ip, #8
   8380c:	f47f ae93 	bne.w	83536 <_malloc_r+0xee>
   83810:	e02d      	b.n	8386e <_malloc_r+0x426>
   83812:	68dc      	ldr	r4, [r3, #12]
   83814:	42a3      	cmp	r3, r4
   83816:	bf08      	it	eq
   83818:	3002      	addeq	r0, #2
   8381a:	f43f ae4b 	beq.w	834b4 <_malloc_r+0x6c>
   8381e:	e6c9      	b.n	835b4 <_malloc_r+0x16c>
   83820:	461c      	mov	r4, r3
   83822:	4419      	add	r1, r3
   83824:	684a      	ldr	r2, [r1, #4]
   83826:	68db      	ldr	r3, [r3, #12]
   83828:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8382c:	f042 0201 	orr.w	r2, r2, #1
   83830:	604a      	str	r2, [r1, #4]
   83832:	4628      	mov	r0, r5
   83834:	60f3      	str	r3, [r6, #12]
   83836:	609e      	str	r6, [r3, #8]
   83838:	f000 f9e4 	bl	83c04 <__malloc_unlock>
   8383c:	e6ca      	b.n	835d4 <_malloc_r+0x18c>
   8383e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   83842:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   83846:	00c1      	lsls	r1, r0, #3
   83848:	e620      	b.n	8348c <_malloc_r+0x44>
   8384a:	099a      	lsrs	r2, r3, #6
   8384c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   83850:	00c9      	lsls	r1, r1, #3
   83852:	3238      	adds	r2, #56	; 0x38
   83854:	e7a4      	b.n	837a0 <_malloc_r+0x358>
   83856:	42bc      	cmp	r4, r7
   83858:	d054      	beq.n	83904 <_malloc_r+0x4bc>
   8385a:	68bc      	ldr	r4, [r7, #8]
   8385c:	6862      	ldr	r2, [r4, #4]
   8385e:	f022 0203 	bic.w	r2, r2, #3
   83862:	e75e      	b.n	83722 <_malloc_r+0x2da>
   83864:	f859 3908 	ldr.w	r3, [r9], #-8
   83868:	4599      	cmp	r9, r3
   8386a:	f040 8086 	bne.w	8397a <_malloc_r+0x532>
   8386e:	f010 0f03 	tst.w	r0, #3
   83872:	f100 30ff 	add.w	r0, r0, #4294967295
   83876:	d1f5      	bne.n	83864 <_malloc_r+0x41c>
   83878:	687b      	ldr	r3, [r7, #4]
   8387a:	ea23 0304 	bic.w	r3, r3, r4
   8387e:	607b      	str	r3, [r7, #4]
   83880:	0064      	lsls	r4, r4, #1
   83882:	429c      	cmp	r4, r3
   83884:	f63f aec8 	bhi.w	83618 <_malloc_r+0x1d0>
   83888:	2c00      	cmp	r4, #0
   8388a:	f43f aec5 	beq.w	83618 <_malloc_r+0x1d0>
   8388e:	421c      	tst	r4, r3
   83890:	4640      	mov	r0, r8
   83892:	f47f ae4c 	bne.w	8352e <_malloc_r+0xe6>
   83896:	0064      	lsls	r4, r4, #1
   83898:	421c      	tst	r4, r3
   8389a:	f100 0004 	add.w	r0, r0, #4
   8389e:	d0fa      	beq.n	83896 <_malloc_r+0x44e>
   838a0:	e645      	b.n	8352e <_malloc_r+0xe6>
   838a2:	468c      	mov	ip, r1
   838a4:	e78c      	b.n	837c0 <_malloc_r+0x378>
   838a6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   838aa:	d815      	bhi.n	838d8 <_malloc_r+0x490>
   838ac:	0bf3      	lsrs	r3, r6, #15
   838ae:	f103 0078 	add.w	r0, r3, #120	; 0x78
   838b2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   838b6:	00c1      	lsls	r1, r0, #3
   838b8:	e5e8      	b.n	8348c <_malloc_r+0x44>
   838ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   838be:	e6ee      	b.n	8369e <_malloc_r+0x256>
   838c0:	2101      	movs	r1, #1
   838c2:	687b      	ldr	r3, [r7, #4]
   838c4:	1092      	asrs	r2, r2, #2
   838c6:	fa01 f202 	lsl.w	r2, r1, r2
   838ca:	431a      	orrs	r2, r3
   838cc:	607a      	str	r2, [r7, #4]
   838ce:	4663      	mov	r3, ip
   838d0:	e779      	b.n	837c6 <_malloc_r+0x37e>
   838d2:	2301      	movs	r3, #1
   838d4:	6053      	str	r3, [r2, #4]
   838d6:	e72a      	b.n	8372e <_malloc_r+0x2e6>
   838d8:	f240 5254 	movw	r2, #1364	; 0x554
   838dc:	4293      	cmp	r3, r2
   838de:	d822      	bhi.n	83926 <_malloc_r+0x4de>
   838e0:	0cb3      	lsrs	r3, r6, #18
   838e2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   838e6:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   838ea:	00c1      	lsls	r1, r0, #3
   838ec:	e5ce      	b.n	8348c <_malloc_r+0x44>
   838ee:	f103 0b10 	add.w	fp, r3, #16
   838f2:	e6af      	b.n	83654 <_malloc_r+0x20c>
   838f4:	2a54      	cmp	r2, #84	; 0x54
   838f6:	d829      	bhi.n	8394c <_malloc_r+0x504>
   838f8:	0b1a      	lsrs	r2, r3, #12
   838fa:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   838fe:	00c9      	lsls	r1, r1, #3
   83900:	326e      	adds	r2, #110	; 0x6e
   83902:	e74d      	b.n	837a0 <_malloc_r+0x358>
   83904:	4b20      	ldr	r3, [pc, #128]	; (83988 <_malloc_r+0x540>)
   83906:	6819      	ldr	r1, [r3, #0]
   83908:	4459      	add	r1, fp
   8390a:	6019      	str	r1, [r3, #0]
   8390c:	e6b3      	b.n	83676 <_malloc_r+0x22e>
   8390e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   83912:	2800      	cmp	r0, #0
   83914:	f47f aeaf 	bne.w	83676 <_malloc_r+0x22e>
   83918:	eb08 030b 	add.w	r3, r8, fp
   8391c:	68ba      	ldr	r2, [r7, #8]
   8391e:	f043 0301 	orr.w	r3, r3, #1
   83922:	6053      	str	r3, [r2, #4]
   83924:	e6ef      	b.n	83706 <_malloc_r+0x2be>
   83926:	207f      	movs	r0, #127	; 0x7f
   83928:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8392c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83930:	e5ac      	b.n	8348c <_malloc_r+0x44>
   83932:	f104 0108 	add.w	r1, r4, #8
   83936:	4628      	mov	r0, r5
   83938:	9300      	str	r3, [sp, #0]
   8393a:	f7ff fa67 	bl	82e0c <_free_r>
   8393e:	9b00      	ldr	r3, [sp, #0]
   83940:	6819      	ldr	r1, [r3, #0]
   83942:	e6e0      	b.n	83706 <_malloc_r+0x2be>
   83944:	2001      	movs	r0, #1
   83946:	f04f 0900 	mov.w	r9, #0
   8394a:	e6bd      	b.n	836c8 <_malloc_r+0x280>
   8394c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83950:	d805      	bhi.n	8395e <_malloc_r+0x516>
   83952:	0bda      	lsrs	r2, r3, #15
   83954:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83958:	00c9      	lsls	r1, r1, #3
   8395a:	3277      	adds	r2, #119	; 0x77
   8395c:	e720      	b.n	837a0 <_malloc_r+0x358>
   8395e:	f240 5154 	movw	r1, #1364	; 0x554
   83962:	428a      	cmp	r2, r1
   83964:	d805      	bhi.n	83972 <_malloc_r+0x52a>
   83966:	0c9a      	lsrs	r2, r3, #18
   83968:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8396c:	00c9      	lsls	r1, r1, #3
   8396e:	327c      	adds	r2, #124	; 0x7c
   83970:	e716      	b.n	837a0 <_malloc_r+0x358>
   83972:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83976:	227e      	movs	r2, #126	; 0x7e
   83978:	e712      	b.n	837a0 <_malloc_r+0x358>
   8397a:	687b      	ldr	r3, [r7, #4]
   8397c:	e780      	b.n	83880 <_malloc_r+0x438>
   8397e:	08f0      	lsrs	r0, r6, #3
   83980:	f106 0308 	add.w	r3, r6, #8
   83984:	e60e      	b.n	835a4 <_malloc_r+0x15c>
   83986:	bf00      	nop
   83988:	20070c28 	.word	0x20070c28

0008398c <__ascii_mbtowc>:
   8398c:	b082      	sub	sp, #8
   8398e:	b149      	cbz	r1, 839a4 <__ascii_mbtowc+0x18>
   83990:	b15a      	cbz	r2, 839aa <__ascii_mbtowc+0x1e>
   83992:	b16b      	cbz	r3, 839b0 <__ascii_mbtowc+0x24>
   83994:	7813      	ldrb	r3, [r2, #0]
   83996:	600b      	str	r3, [r1, #0]
   83998:	7812      	ldrb	r2, [r2, #0]
   8399a:	1c10      	adds	r0, r2, #0
   8399c:	bf18      	it	ne
   8399e:	2001      	movne	r0, #1
   839a0:	b002      	add	sp, #8
   839a2:	4770      	bx	lr
   839a4:	a901      	add	r1, sp, #4
   839a6:	2a00      	cmp	r2, #0
   839a8:	d1f3      	bne.n	83992 <__ascii_mbtowc+0x6>
   839aa:	4610      	mov	r0, r2
   839ac:	b002      	add	sp, #8
   839ae:	4770      	bx	lr
   839b0:	f06f 0001 	mvn.w	r0, #1
   839b4:	e7f4      	b.n	839a0 <__ascii_mbtowc+0x14>
   839b6:	bf00      	nop

000839b8 <memchr>:
   839b8:	0783      	lsls	r3, r0, #30
   839ba:	b470      	push	{r4, r5, r6}
   839bc:	b2cd      	uxtb	r5, r1
   839be:	d03d      	beq.n	83a3c <memchr+0x84>
   839c0:	1e54      	subs	r4, r2, #1
   839c2:	b30a      	cbz	r2, 83a08 <memchr+0x50>
   839c4:	7803      	ldrb	r3, [r0, #0]
   839c6:	42ab      	cmp	r3, r5
   839c8:	d01f      	beq.n	83a0a <memchr+0x52>
   839ca:	1c43      	adds	r3, r0, #1
   839cc:	e005      	b.n	839da <memchr+0x22>
   839ce:	f114 34ff 	adds.w	r4, r4, #4294967295
   839d2:	d319      	bcc.n	83a08 <memchr+0x50>
   839d4:	7802      	ldrb	r2, [r0, #0]
   839d6:	42aa      	cmp	r2, r5
   839d8:	d017      	beq.n	83a0a <memchr+0x52>
   839da:	f013 0f03 	tst.w	r3, #3
   839de:	4618      	mov	r0, r3
   839e0:	f103 0301 	add.w	r3, r3, #1
   839e4:	d1f3      	bne.n	839ce <memchr+0x16>
   839e6:	2c03      	cmp	r4, #3
   839e8:	d811      	bhi.n	83a0e <memchr+0x56>
   839ea:	b34c      	cbz	r4, 83a40 <memchr+0x88>
   839ec:	7803      	ldrb	r3, [r0, #0]
   839ee:	42ab      	cmp	r3, r5
   839f0:	d00b      	beq.n	83a0a <memchr+0x52>
   839f2:	4404      	add	r4, r0
   839f4:	1c43      	adds	r3, r0, #1
   839f6:	e002      	b.n	839fe <memchr+0x46>
   839f8:	7802      	ldrb	r2, [r0, #0]
   839fa:	42aa      	cmp	r2, r5
   839fc:	d005      	beq.n	83a0a <memchr+0x52>
   839fe:	429c      	cmp	r4, r3
   83a00:	4618      	mov	r0, r3
   83a02:	f103 0301 	add.w	r3, r3, #1
   83a06:	d1f7      	bne.n	839f8 <memchr+0x40>
   83a08:	2000      	movs	r0, #0
   83a0a:	bc70      	pop	{r4, r5, r6}
   83a0c:	4770      	bx	lr
   83a0e:	0209      	lsls	r1, r1, #8
   83a10:	b289      	uxth	r1, r1
   83a12:	4329      	orrs	r1, r5
   83a14:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83a18:	6803      	ldr	r3, [r0, #0]
   83a1a:	4606      	mov	r6, r0
   83a1c:	404b      	eors	r3, r1
   83a1e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   83a22:	ea22 0303 	bic.w	r3, r2, r3
   83a26:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83a2a:	f100 0004 	add.w	r0, r0, #4
   83a2e:	d103      	bne.n	83a38 <memchr+0x80>
   83a30:	3c04      	subs	r4, #4
   83a32:	2c03      	cmp	r4, #3
   83a34:	d8f0      	bhi.n	83a18 <memchr+0x60>
   83a36:	e7d8      	b.n	839ea <memchr+0x32>
   83a38:	4630      	mov	r0, r6
   83a3a:	e7d7      	b.n	839ec <memchr+0x34>
   83a3c:	4614      	mov	r4, r2
   83a3e:	e7d2      	b.n	839e6 <memchr+0x2e>
   83a40:	4620      	mov	r0, r4
   83a42:	e7e2      	b.n	83a0a <memchr+0x52>

00083a44 <memcpy>:
   83a44:	4684      	mov	ip, r0
   83a46:	ea41 0300 	orr.w	r3, r1, r0
   83a4a:	f013 0303 	ands.w	r3, r3, #3
   83a4e:	d149      	bne.n	83ae4 <memcpy+0xa0>
   83a50:	3a40      	subs	r2, #64	; 0x40
   83a52:	d323      	bcc.n	83a9c <memcpy+0x58>
   83a54:	680b      	ldr	r3, [r1, #0]
   83a56:	6003      	str	r3, [r0, #0]
   83a58:	684b      	ldr	r3, [r1, #4]
   83a5a:	6043      	str	r3, [r0, #4]
   83a5c:	688b      	ldr	r3, [r1, #8]
   83a5e:	6083      	str	r3, [r0, #8]
   83a60:	68cb      	ldr	r3, [r1, #12]
   83a62:	60c3      	str	r3, [r0, #12]
   83a64:	690b      	ldr	r3, [r1, #16]
   83a66:	6103      	str	r3, [r0, #16]
   83a68:	694b      	ldr	r3, [r1, #20]
   83a6a:	6143      	str	r3, [r0, #20]
   83a6c:	698b      	ldr	r3, [r1, #24]
   83a6e:	6183      	str	r3, [r0, #24]
   83a70:	69cb      	ldr	r3, [r1, #28]
   83a72:	61c3      	str	r3, [r0, #28]
   83a74:	6a0b      	ldr	r3, [r1, #32]
   83a76:	6203      	str	r3, [r0, #32]
   83a78:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83a7a:	6243      	str	r3, [r0, #36]	; 0x24
   83a7c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83a7e:	6283      	str	r3, [r0, #40]	; 0x28
   83a80:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83a82:	62c3      	str	r3, [r0, #44]	; 0x2c
   83a84:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83a86:	6303      	str	r3, [r0, #48]	; 0x30
   83a88:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83a8a:	6343      	str	r3, [r0, #52]	; 0x34
   83a8c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83a8e:	6383      	str	r3, [r0, #56]	; 0x38
   83a90:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83a92:	63c3      	str	r3, [r0, #60]	; 0x3c
   83a94:	3040      	adds	r0, #64	; 0x40
   83a96:	3140      	adds	r1, #64	; 0x40
   83a98:	3a40      	subs	r2, #64	; 0x40
   83a9a:	d2db      	bcs.n	83a54 <memcpy+0x10>
   83a9c:	3230      	adds	r2, #48	; 0x30
   83a9e:	d30b      	bcc.n	83ab8 <memcpy+0x74>
   83aa0:	680b      	ldr	r3, [r1, #0]
   83aa2:	6003      	str	r3, [r0, #0]
   83aa4:	684b      	ldr	r3, [r1, #4]
   83aa6:	6043      	str	r3, [r0, #4]
   83aa8:	688b      	ldr	r3, [r1, #8]
   83aaa:	6083      	str	r3, [r0, #8]
   83aac:	68cb      	ldr	r3, [r1, #12]
   83aae:	60c3      	str	r3, [r0, #12]
   83ab0:	3010      	adds	r0, #16
   83ab2:	3110      	adds	r1, #16
   83ab4:	3a10      	subs	r2, #16
   83ab6:	d2f3      	bcs.n	83aa0 <memcpy+0x5c>
   83ab8:	320c      	adds	r2, #12
   83aba:	d305      	bcc.n	83ac8 <memcpy+0x84>
   83abc:	f851 3b04 	ldr.w	r3, [r1], #4
   83ac0:	f840 3b04 	str.w	r3, [r0], #4
   83ac4:	3a04      	subs	r2, #4
   83ac6:	d2f9      	bcs.n	83abc <memcpy+0x78>
   83ac8:	3204      	adds	r2, #4
   83aca:	d008      	beq.n	83ade <memcpy+0x9a>
   83acc:	07d2      	lsls	r2, r2, #31
   83ace:	bf1c      	itt	ne
   83ad0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83ad4:	f800 3b01 	strbne.w	r3, [r0], #1
   83ad8:	d301      	bcc.n	83ade <memcpy+0x9a>
   83ada:	880b      	ldrh	r3, [r1, #0]
   83adc:	8003      	strh	r3, [r0, #0]
   83ade:	4660      	mov	r0, ip
   83ae0:	4770      	bx	lr
   83ae2:	bf00      	nop
   83ae4:	2a08      	cmp	r2, #8
   83ae6:	d313      	bcc.n	83b10 <memcpy+0xcc>
   83ae8:	078b      	lsls	r3, r1, #30
   83aea:	d0b1      	beq.n	83a50 <memcpy+0xc>
   83aec:	f010 0303 	ands.w	r3, r0, #3
   83af0:	d0ae      	beq.n	83a50 <memcpy+0xc>
   83af2:	f1c3 0304 	rsb	r3, r3, #4
   83af6:	1ad2      	subs	r2, r2, r3
   83af8:	07db      	lsls	r3, r3, #31
   83afa:	bf1c      	itt	ne
   83afc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83b00:	f800 3b01 	strbne.w	r3, [r0], #1
   83b04:	d3a4      	bcc.n	83a50 <memcpy+0xc>
   83b06:	f831 3b02 	ldrh.w	r3, [r1], #2
   83b0a:	f820 3b02 	strh.w	r3, [r0], #2
   83b0e:	e79f      	b.n	83a50 <memcpy+0xc>
   83b10:	3a04      	subs	r2, #4
   83b12:	d3d9      	bcc.n	83ac8 <memcpy+0x84>
   83b14:	3a01      	subs	r2, #1
   83b16:	f811 3b01 	ldrb.w	r3, [r1], #1
   83b1a:	f800 3b01 	strb.w	r3, [r0], #1
   83b1e:	d2f9      	bcs.n	83b14 <memcpy+0xd0>
   83b20:	780b      	ldrb	r3, [r1, #0]
   83b22:	7003      	strb	r3, [r0, #0]
   83b24:	784b      	ldrb	r3, [r1, #1]
   83b26:	7043      	strb	r3, [r0, #1]
   83b28:	788b      	ldrb	r3, [r1, #2]
   83b2a:	7083      	strb	r3, [r0, #2]
   83b2c:	4660      	mov	r0, ip
   83b2e:	4770      	bx	lr

00083b30 <memmove>:
   83b30:	4288      	cmp	r0, r1
   83b32:	b5f0      	push	{r4, r5, r6, r7, lr}
   83b34:	d90d      	bls.n	83b52 <memmove+0x22>
   83b36:	188b      	adds	r3, r1, r2
   83b38:	4298      	cmp	r0, r3
   83b3a:	d20a      	bcs.n	83b52 <memmove+0x22>
   83b3c:	1884      	adds	r4, r0, r2
   83b3e:	2a00      	cmp	r2, #0
   83b40:	d051      	beq.n	83be6 <memmove+0xb6>
   83b42:	4622      	mov	r2, r4
   83b44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83b48:	4299      	cmp	r1, r3
   83b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83b4e:	d1f9      	bne.n	83b44 <memmove+0x14>
   83b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83b52:	2a0f      	cmp	r2, #15
   83b54:	d948      	bls.n	83be8 <memmove+0xb8>
   83b56:	ea41 0300 	orr.w	r3, r1, r0
   83b5a:	079b      	lsls	r3, r3, #30
   83b5c:	d146      	bne.n	83bec <memmove+0xbc>
   83b5e:	4615      	mov	r5, r2
   83b60:	f100 0410 	add.w	r4, r0, #16
   83b64:	f101 0310 	add.w	r3, r1, #16
   83b68:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83b6c:	3d10      	subs	r5, #16
   83b6e:	f844 6c10 	str.w	r6, [r4, #-16]
   83b72:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83b76:	2d0f      	cmp	r5, #15
   83b78:	f844 6c0c 	str.w	r6, [r4, #-12]
   83b7c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83b80:	f104 0410 	add.w	r4, r4, #16
   83b84:	f844 6c18 	str.w	r6, [r4, #-24]
   83b88:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83b8c:	f103 0310 	add.w	r3, r3, #16
   83b90:	f844 6c14 	str.w	r6, [r4, #-20]
   83b94:	d8e8      	bhi.n	83b68 <memmove+0x38>
   83b96:	f1a2 0310 	sub.w	r3, r2, #16
   83b9a:	f023 030f 	bic.w	r3, r3, #15
   83b9e:	f002 0e0f 	and.w	lr, r2, #15
   83ba2:	3310      	adds	r3, #16
   83ba4:	f1be 0f03 	cmp.w	lr, #3
   83ba8:	4419      	add	r1, r3
   83baa:	4403      	add	r3, r0
   83bac:	d921      	bls.n	83bf2 <memmove+0xc2>
   83bae:	460e      	mov	r6, r1
   83bb0:	4674      	mov	r4, lr
   83bb2:	1f1d      	subs	r5, r3, #4
   83bb4:	f856 7b04 	ldr.w	r7, [r6], #4
   83bb8:	3c04      	subs	r4, #4
   83bba:	2c03      	cmp	r4, #3
   83bbc:	f845 7f04 	str.w	r7, [r5, #4]!
   83bc0:	d8f8      	bhi.n	83bb4 <memmove+0x84>
   83bc2:	f1ae 0404 	sub.w	r4, lr, #4
   83bc6:	f024 0403 	bic.w	r4, r4, #3
   83bca:	3404      	adds	r4, #4
   83bcc:	4421      	add	r1, r4
   83bce:	4423      	add	r3, r4
   83bd0:	f002 0203 	and.w	r2, r2, #3
   83bd4:	b162      	cbz	r2, 83bf0 <memmove+0xc0>
   83bd6:	3b01      	subs	r3, #1
   83bd8:	440a      	add	r2, r1
   83bda:	f811 4b01 	ldrb.w	r4, [r1], #1
   83bde:	428a      	cmp	r2, r1
   83be0:	f803 4f01 	strb.w	r4, [r3, #1]!
   83be4:	d1f9      	bne.n	83bda <memmove+0xaa>
   83be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83be8:	4603      	mov	r3, r0
   83bea:	e7f3      	b.n	83bd4 <memmove+0xa4>
   83bec:	4603      	mov	r3, r0
   83bee:	e7f2      	b.n	83bd6 <memmove+0xa6>
   83bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83bf2:	4672      	mov	r2, lr
   83bf4:	e7ee      	b.n	83bd4 <memmove+0xa4>
   83bf6:	bf00      	nop

00083bf8 <__malloc_lock>:
   83bf8:	4801      	ldr	r0, [pc, #4]	; (83c00 <__malloc_lock+0x8>)
   83bfa:	f7ff bba1 	b.w	83340 <__retarget_lock_acquire_recursive>
   83bfe:	bf00      	nop
   83c00:	20071ccc 	.word	0x20071ccc

00083c04 <__malloc_unlock>:
   83c04:	4801      	ldr	r0, [pc, #4]	; (83c0c <__malloc_unlock+0x8>)
   83c06:	f7ff bb9d 	b.w	83344 <__retarget_lock_release_recursive>
   83c0a:	bf00      	nop
   83c0c:	20071ccc 	.word	0x20071ccc

00083c10 <_realloc_r>:
   83c10:	2900      	cmp	r1, #0
   83c12:	f000 8094 	beq.w	83d3e <_realloc_r+0x12e>
   83c16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83c1a:	460c      	mov	r4, r1
   83c1c:	4615      	mov	r5, r2
   83c1e:	b083      	sub	sp, #12
   83c20:	4680      	mov	r8, r0
   83c22:	f105 060b 	add.w	r6, r5, #11
   83c26:	f7ff ffe7 	bl	83bf8 <__malloc_lock>
   83c2a:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83c2e:	2e16      	cmp	r6, #22
   83c30:	f02e 0703 	bic.w	r7, lr, #3
   83c34:	f1a4 0908 	sub.w	r9, r4, #8
   83c38:	d83c      	bhi.n	83cb4 <_realloc_r+0xa4>
   83c3a:	2210      	movs	r2, #16
   83c3c:	4616      	mov	r6, r2
   83c3e:	42b5      	cmp	r5, r6
   83c40:	d83d      	bhi.n	83cbe <_realloc_r+0xae>
   83c42:	4297      	cmp	r7, r2
   83c44:	da43      	bge.n	83cce <_realloc_r+0xbe>
   83c46:	4bc6      	ldr	r3, [pc, #792]	; (83f60 <_realloc_r+0x350>)
   83c48:	eb09 0007 	add.w	r0, r9, r7
   83c4c:	6899      	ldr	r1, [r3, #8]
   83c4e:	4288      	cmp	r0, r1
   83c50:	f000 80c3 	beq.w	83dda <_realloc_r+0x1ca>
   83c54:	6843      	ldr	r3, [r0, #4]
   83c56:	f023 0101 	bic.w	r1, r3, #1
   83c5a:	4401      	add	r1, r0
   83c5c:	6849      	ldr	r1, [r1, #4]
   83c5e:	07c9      	lsls	r1, r1, #31
   83c60:	d54d      	bpl.n	83cfe <_realloc_r+0xee>
   83c62:	f01e 0f01 	tst.w	lr, #1
   83c66:	f000 809b 	beq.w	83da0 <_realloc_r+0x190>
   83c6a:	4629      	mov	r1, r5
   83c6c:	4640      	mov	r0, r8
   83c6e:	f7ff fbeb 	bl	83448 <_malloc_r>
   83c72:	4605      	mov	r5, r0
   83c74:	2800      	cmp	r0, #0
   83c76:	d03b      	beq.n	83cf0 <_realloc_r+0xe0>
   83c78:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83c7c:	f1a0 0208 	sub.w	r2, r0, #8
   83c80:	f023 0301 	bic.w	r3, r3, #1
   83c84:	444b      	add	r3, r9
   83c86:	429a      	cmp	r2, r3
   83c88:	f000 812b 	beq.w	83ee2 <_realloc_r+0x2d2>
   83c8c:	1f3a      	subs	r2, r7, #4
   83c8e:	2a24      	cmp	r2, #36	; 0x24
   83c90:	f200 8118 	bhi.w	83ec4 <_realloc_r+0x2b4>
   83c94:	2a13      	cmp	r2, #19
   83c96:	f200 80eb 	bhi.w	83e70 <_realloc_r+0x260>
   83c9a:	4603      	mov	r3, r0
   83c9c:	4622      	mov	r2, r4
   83c9e:	6811      	ldr	r1, [r2, #0]
   83ca0:	6019      	str	r1, [r3, #0]
   83ca2:	6851      	ldr	r1, [r2, #4]
   83ca4:	6059      	str	r1, [r3, #4]
   83ca6:	6892      	ldr	r2, [r2, #8]
   83ca8:	609a      	str	r2, [r3, #8]
   83caa:	4621      	mov	r1, r4
   83cac:	4640      	mov	r0, r8
   83cae:	f7ff f8ad 	bl	82e0c <_free_r>
   83cb2:	e01d      	b.n	83cf0 <_realloc_r+0xe0>
   83cb4:	f026 0607 	bic.w	r6, r6, #7
   83cb8:	2e00      	cmp	r6, #0
   83cba:	4632      	mov	r2, r6
   83cbc:	dabf      	bge.n	83c3e <_realloc_r+0x2e>
   83cbe:	2500      	movs	r5, #0
   83cc0:	230c      	movs	r3, #12
   83cc2:	4628      	mov	r0, r5
   83cc4:	f8c8 3000 	str.w	r3, [r8]
   83cc8:	b003      	add	sp, #12
   83cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83cce:	4625      	mov	r5, r4
   83cd0:	1bbb      	subs	r3, r7, r6
   83cd2:	2b0f      	cmp	r3, #15
   83cd4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83cd8:	d81d      	bhi.n	83d16 <_realloc_r+0x106>
   83cda:	f002 0201 	and.w	r2, r2, #1
   83cde:	433a      	orrs	r2, r7
   83ce0:	eb09 0107 	add.w	r1, r9, r7
   83ce4:	f8c9 2004 	str.w	r2, [r9, #4]
   83ce8:	684b      	ldr	r3, [r1, #4]
   83cea:	f043 0301 	orr.w	r3, r3, #1
   83cee:	604b      	str	r3, [r1, #4]
   83cf0:	4640      	mov	r0, r8
   83cf2:	f7ff ff87 	bl	83c04 <__malloc_unlock>
   83cf6:	4628      	mov	r0, r5
   83cf8:	b003      	add	sp, #12
   83cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83cfe:	f023 0303 	bic.w	r3, r3, #3
   83d02:	18f9      	adds	r1, r7, r3
   83d04:	4291      	cmp	r1, r2
   83d06:	db1d      	blt.n	83d44 <_realloc_r+0x134>
   83d08:	68c3      	ldr	r3, [r0, #12]
   83d0a:	6882      	ldr	r2, [r0, #8]
   83d0c:	4625      	mov	r5, r4
   83d0e:	60d3      	str	r3, [r2, #12]
   83d10:	460f      	mov	r7, r1
   83d12:	609a      	str	r2, [r3, #8]
   83d14:	e7dc      	b.n	83cd0 <_realloc_r+0xc0>
   83d16:	f002 0201 	and.w	r2, r2, #1
   83d1a:	eb09 0106 	add.w	r1, r9, r6
   83d1e:	f043 0301 	orr.w	r3, r3, #1
   83d22:	4332      	orrs	r2, r6
   83d24:	f8c9 2004 	str.w	r2, [r9, #4]
   83d28:	444f      	add	r7, r9
   83d2a:	604b      	str	r3, [r1, #4]
   83d2c:	687b      	ldr	r3, [r7, #4]
   83d2e:	3108      	adds	r1, #8
   83d30:	f043 0301 	orr.w	r3, r3, #1
   83d34:	607b      	str	r3, [r7, #4]
   83d36:	4640      	mov	r0, r8
   83d38:	f7ff f868 	bl	82e0c <_free_r>
   83d3c:	e7d8      	b.n	83cf0 <_realloc_r+0xe0>
   83d3e:	4611      	mov	r1, r2
   83d40:	f7ff bb82 	b.w	83448 <_malloc_r>
   83d44:	f01e 0f01 	tst.w	lr, #1
   83d48:	d18f      	bne.n	83c6a <_realloc_r+0x5a>
   83d4a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83d4e:	eba9 0a01 	sub.w	sl, r9, r1
   83d52:	f8da 1004 	ldr.w	r1, [sl, #4]
   83d56:	f021 0103 	bic.w	r1, r1, #3
   83d5a:	440b      	add	r3, r1
   83d5c:	443b      	add	r3, r7
   83d5e:	4293      	cmp	r3, r2
   83d60:	db26      	blt.n	83db0 <_realloc_r+0x1a0>
   83d62:	4655      	mov	r5, sl
   83d64:	68c1      	ldr	r1, [r0, #12]
   83d66:	6880      	ldr	r0, [r0, #8]
   83d68:	1f3a      	subs	r2, r7, #4
   83d6a:	60c1      	str	r1, [r0, #12]
   83d6c:	6088      	str	r0, [r1, #8]
   83d6e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83d72:	f8da 100c 	ldr.w	r1, [sl, #12]
   83d76:	2a24      	cmp	r2, #36	; 0x24
   83d78:	60c1      	str	r1, [r0, #12]
   83d7a:	6088      	str	r0, [r1, #8]
   83d7c:	d826      	bhi.n	83dcc <_realloc_r+0x1bc>
   83d7e:	2a13      	cmp	r2, #19
   83d80:	f240 8081 	bls.w	83e86 <_realloc_r+0x276>
   83d84:	6821      	ldr	r1, [r4, #0]
   83d86:	2a1b      	cmp	r2, #27
   83d88:	f8ca 1008 	str.w	r1, [sl, #8]
   83d8c:	6861      	ldr	r1, [r4, #4]
   83d8e:	f8ca 100c 	str.w	r1, [sl, #12]
   83d92:	f200 80ad 	bhi.w	83ef0 <_realloc_r+0x2e0>
   83d96:	f104 0008 	add.w	r0, r4, #8
   83d9a:	f10a 0210 	add.w	r2, sl, #16
   83d9e:	e074      	b.n	83e8a <_realloc_r+0x27a>
   83da0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83da4:	eba9 0a03 	sub.w	sl, r9, r3
   83da8:	f8da 1004 	ldr.w	r1, [sl, #4]
   83dac:	f021 0103 	bic.w	r1, r1, #3
   83db0:	187b      	adds	r3, r7, r1
   83db2:	4293      	cmp	r3, r2
   83db4:	f6ff af59 	blt.w	83c6a <_realloc_r+0x5a>
   83db8:	4655      	mov	r5, sl
   83dba:	f8da 100c 	ldr.w	r1, [sl, #12]
   83dbe:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83dc2:	1f3a      	subs	r2, r7, #4
   83dc4:	2a24      	cmp	r2, #36	; 0x24
   83dc6:	60c1      	str	r1, [r0, #12]
   83dc8:	6088      	str	r0, [r1, #8]
   83dca:	d9d8      	bls.n	83d7e <_realloc_r+0x16e>
   83dcc:	4621      	mov	r1, r4
   83dce:	4628      	mov	r0, r5
   83dd0:	461f      	mov	r7, r3
   83dd2:	46d1      	mov	r9, sl
   83dd4:	f7ff feac 	bl	83b30 <memmove>
   83dd8:	e77a      	b.n	83cd0 <_realloc_r+0xc0>
   83dda:	6841      	ldr	r1, [r0, #4]
   83ddc:	f106 0010 	add.w	r0, r6, #16
   83de0:	f021 0b03 	bic.w	fp, r1, #3
   83de4:	44bb      	add	fp, r7
   83de6:	4583      	cmp	fp, r0
   83de8:	da58      	bge.n	83e9c <_realloc_r+0x28c>
   83dea:	f01e 0f01 	tst.w	lr, #1
   83dee:	f47f af3c 	bne.w	83c6a <_realloc_r+0x5a>
   83df2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83df6:	eba9 0a01 	sub.w	sl, r9, r1
   83dfa:	f8da 1004 	ldr.w	r1, [sl, #4]
   83dfe:	f021 0103 	bic.w	r1, r1, #3
   83e02:	448b      	add	fp, r1
   83e04:	4558      	cmp	r0, fp
   83e06:	dcd3      	bgt.n	83db0 <_realloc_r+0x1a0>
   83e08:	4655      	mov	r5, sl
   83e0a:	f8da 100c 	ldr.w	r1, [sl, #12]
   83e0e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83e12:	1f3a      	subs	r2, r7, #4
   83e14:	2a24      	cmp	r2, #36	; 0x24
   83e16:	60c1      	str	r1, [r0, #12]
   83e18:	6088      	str	r0, [r1, #8]
   83e1a:	f200 808d 	bhi.w	83f38 <_realloc_r+0x328>
   83e1e:	2a13      	cmp	r2, #19
   83e20:	f240 8087 	bls.w	83f32 <_realloc_r+0x322>
   83e24:	6821      	ldr	r1, [r4, #0]
   83e26:	2a1b      	cmp	r2, #27
   83e28:	f8ca 1008 	str.w	r1, [sl, #8]
   83e2c:	6861      	ldr	r1, [r4, #4]
   83e2e:	f8ca 100c 	str.w	r1, [sl, #12]
   83e32:	f200 8088 	bhi.w	83f46 <_realloc_r+0x336>
   83e36:	f104 0108 	add.w	r1, r4, #8
   83e3a:	f10a 0210 	add.w	r2, sl, #16
   83e3e:	6808      	ldr	r0, [r1, #0]
   83e40:	6010      	str	r0, [r2, #0]
   83e42:	6848      	ldr	r0, [r1, #4]
   83e44:	6050      	str	r0, [r2, #4]
   83e46:	6889      	ldr	r1, [r1, #8]
   83e48:	6091      	str	r1, [r2, #8]
   83e4a:	ebab 0206 	sub.w	r2, fp, r6
   83e4e:	eb0a 0106 	add.w	r1, sl, r6
   83e52:	f042 0201 	orr.w	r2, r2, #1
   83e56:	6099      	str	r1, [r3, #8]
   83e58:	604a      	str	r2, [r1, #4]
   83e5a:	f8da 3004 	ldr.w	r3, [sl, #4]
   83e5e:	4640      	mov	r0, r8
   83e60:	f003 0301 	and.w	r3, r3, #1
   83e64:	431e      	orrs	r6, r3
   83e66:	f8ca 6004 	str.w	r6, [sl, #4]
   83e6a:	f7ff fecb 	bl	83c04 <__malloc_unlock>
   83e6e:	e742      	b.n	83cf6 <_realloc_r+0xe6>
   83e70:	6823      	ldr	r3, [r4, #0]
   83e72:	2a1b      	cmp	r2, #27
   83e74:	6003      	str	r3, [r0, #0]
   83e76:	6863      	ldr	r3, [r4, #4]
   83e78:	6043      	str	r3, [r0, #4]
   83e7a:	d827      	bhi.n	83ecc <_realloc_r+0x2bc>
   83e7c:	f100 0308 	add.w	r3, r0, #8
   83e80:	f104 0208 	add.w	r2, r4, #8
   83e84:	e70b      	b.n	83c9e <_realloc_r+0x8e>
   83e86:	4620      	mov	r0, r4
   83e88:	462a      	mov	r2, r5
   83e8a:	6801      	ldr	r1, [r0, #0]
   83e8c:	461f      	mov	r7, r3
   83e8e:	6011      	str	r1, [r2, #0]
   83e90:	6841      	ldr	r1, [r0, #4]
   83e92:	46d1      	mov	r9, sl
   83e94:	6051      	str	r1, [r2, #4]
   83e96:	6883      	ldr	r3, [r0, #8]
   83e98:	6093      	str	r3, [r2, #8]
   83e9a:	e719      	b.n	83cd0 <_realloc_r+0xc0>
   83e9c:	ebab 0b06 	sub.w	fp, fp, r6
   83ea0:	eb09 0106 	add.w	r1, r9, r6
   83ea4:	f04b 0201 	orr.w	r2, fp, #1
   83ea8:	6099      	str	r1, [r3, #8]
   83eaa:	604a      	str	r2, [r1, #4]
   83eac:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83eb0:	4640      	mov	r0, r8
   83eb2:	f003 0301 	and.w	r3, r3, #1
   83eb6:	431e      	orrs	r6, r3
   83eb8:	f844 6c04 	str.w	r6, [r4, #-4]
   83ebc:	f7ff fea2 	bl	83c04 <__malloc_unlock>
   83ec0:	4625      	mov	r5, r4
   83ec2:	e718      	b.n	83cf6 <_realloc_r+0xe6>
   83ec4:	4621      	mov	r1, r4
   83ec6:	f7ff fe33 	bl	83b30 <memmove>
   83eca:	e6ee      	b.n	83caa <_realloc_r+0x9a>
   83ecc:	68a3      	ldr	r3, [r4, #8]
   83ece:	2a24      	cmp	r2, #36	; 0x24
   83ed0:	6083      	str	r3, [r0, #8]
   83ed2:	68e3      	ldr	r3, [r4, #12]
   83ed4:	60c3      	str	r3, [r0, #12]
   83ed6:	d018      	beq.n	83f0a <_realloc_r+0x2fa>
   83ed8:	f100 0310 	add.w	r3, r0, #16
   83edc:	f104 0210 	add.w	r2, r4, #16
   83ee0:	e6dd      	b.n	83c9e <_realloc_r+0x8e>
   83ee2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83ee6:	4625      	mov	r5, r4
   83ee8:	f023 0303 	bic.w	r3, r3, #3
   83eec:	441f      	add	r7, r3
   83eee:	e6ef      	b.n	83cd0 <_realloc_r+0xc0>
   83ef0:	68a1      	ldr	r1, [r4, #8]
   83ef2:	2a24      	cmp	r2, #36	; 0x24
   83ef4:	f8ca 1010 	str.w	r1, [sl, #16]
   83ef8:	68e1      	ldr	r1, [r4, #12]
   83efa:	f8ca 1014 	str.w	r1, [sl, #20]
   83efe:	d00d      	beq.n	83f1c <_realloc_r+0x30c>
   83f00:	f104 0010 	add.w	r0, r4, #16
   83f04:	f10a 0218 	add.w	r2, sl, #24
   83f08:	e7bf      	b.n	83e8a <_realloc_r+0x27a>
   83f0a:	6922      	ldr	r2, [r4, #16]
   83f0c:	f100 0318 	add.w	r3, r0, #24
   83f10:	6102      	str	r2, [r0, #16]
   83f12:	6961      	ldr	r1, [r4, #20]
   83f14:	f104 0218 	add.w	r2, r4, #24
   83f18:	6141      	str	r1, [r0, #20]
   83f1a:	e6c0      	b.n	83c9e <_realloc_r+0x8e>
   83f1c:	6922      	ldr	r2, [r4, #16]
   83f1e:	f104 0018 	add.w	r0, r4, #24
   83f22:	f8ca 2018 	str.w	r2, [sl, #24]
   83f26:	6961      	ldr	r1, [r4, #20]
   83f28:	f10a 0220 	add.w	r2, sl, #32
   83f2c:	f8ca 101c 	str.w	r1, [sl, #28]
   83f30:	e7ab      	b.n	83e8a <_realloc_r+0x27a>
   83f32:	4621      	mov	r1, r4
   83f34:	462a      	mov	r2, r5
   83f36:	e782      	b.n	83e3e <_realloc_r+0x22e>
   83f38:	4621      	mov	r1, r4
   83f3a:	4628      	mov	r0, r5
   83f3c:	9301      	str	r3, [sp, #4]
   83f3e:	f7ff fdf7 	bl	83b30 <memmove>
   83f42:	9b01      	ldr	r3, [sp, #4]
   83f44:	e781      	b.n	83e4a <_realloc_r+0x23a>
   83f46:	68a1      	ldr	r1, [r4, #8]
   83f48:	2a24      	cmp	r2, #36	; 0x24
   83f4a:	f8ca 1010 	str.w	r1, [sl, #16]
   83f4e:	68e1      	ldr	r1, [r4, #12]
   83f50:	f8ca 1014 	str.w	r1, [sl, #20]
   83f54:	d006      	beq.n	83f64 <_realloc_r+0x354>
   83f56:	f104 0110 	add.w	r1, r4, #16
   83f5a:	f10a 0218 	add.w	r2, sl, #24
   83f5e:	e76e      	b.n	83e3e <_realloc_r+0x22e>
   83f60:	200706d0 	.word	0x200706d0
   83f64:	6922      	ldr	r2, [r4, #16]
   83f66:	f104 0118 	add.w	r1, r4, #24
   83f6a:	f8ca 2018 	str.w	r2, [sl, #24]
   83f6e:	6960      	ldr	r0, [r4, #20]
   83f70:	f10a 0220 	add.w	r2, sl, #32
   83f74:	f8ca 001c 	str.w	r0, [sl, #28]
   83f78:	e761      	b.n	83e3e <_realloc_r+0x22e>
   83f7a:	bf00      	nop

00083f7c <_sbrk_r>:
   83f7c:	b538      	push	{r3, r4, r5, lr}
   83f7e:	2300      	movs	r3, #0
   83f80:	4c06      	ldr	r4, [pc, #24]	; (83f9c <_sbrk_r+0x20>)
   83f82:	4605      	mov	r5, r0
   83f84:	4608      	mov	r0, r1
   83f86:	6023      	str	r3, [r4, #0]
   83f88:	f7fd f82a 	bl	80fe0 <_sbrk>
   83f8c:	1c43      	adds	r3, r0, #1
   83f8e:	d000      	beq.n	83f92 <_sbrk_r+0x16>
   83f90:	bd38      	pop	{r3, r4, r5, pc}
   83f92:	6823      	ldr	r3, [r4, #0]
   83f94:	2b00      	cmp	r3, #0
   83f96:	d0fb      	beq.n	83f90 <_sbrk_r+0x14>
   83f98:	602b      	str	r3, [r5, #0]
   83f9a:	bd38      	pop	{r3, r4, r5, pc}
   83f9c:	20071ce0 	.word	0x20071ce0

00083fa0 <__sread>:
   83fa0:	b510      	push	{r4, lr}
   83fa2:	460c      	mov	r4, r1
   83fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83fa8:	f000 f9f4 	bl	84394 <_read_r>
   83fac:	2800      	cmp	r0, #0
   83fae:	db03      	blt.n	83fb8 <__sread+0x18>
   83fb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83fb2:	4403      	add	r3, r0
   83fb4:	6523      	str	r3, [r4, #80]	; 0x50
   83fb6:	bd10      	pop	{r4, pc}
   83fb8:	89a3      	ldrh	r3, [r4, #12]
   83fba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83fbe:	81a3      	strh	r3, [r4, #12]
   83fc0:	bd10      	pop	{r4, pc}
   83fc2:	bf00      	nop

00083fc4 <__swrite>:
   83fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83fc8:	460c      	mov	r4, r1
   83fca:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83fce:	461f      	mov	r7, r3
   83fd0:	05cb      	lsls	r3, r1, #23
   83fd2:	4616      	mov	r6, r2
   83fd4:	4605      	mov	r5, r0
   83fd6:	d507      	bpl.n	83fe8 <__swrite+0x24>
   83fd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83fdc:	2302      	movs	r3, #2
   83fde:	2200      	movs	r2, #0
   83fe0:	f000 f9c2 	bl	84368 <_lseek_r>
   83fe4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83fe8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83fec:	81a1      	strh	r1, [r4, #12]
   83fee:	463b      	mov	r3, r7
   83ff0:	4632      	mov	r2, r6
   83ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83ff6:	4628      	mov	r0, r5
   83ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83ffc:	f000 b8a2 	b.w	84144 <_write_r>

00084000 <__sseek>:
   84000:	b510      	push	{r4, lr}
   84002:	460c      	mov	r4, r1
   84004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84008:	f000 f9ae 	bl	84368 <_lseek_r>
   8400c:	89a3      	ldrh	r3, [r4, #12]
   8400e:	1c42      	adds	r2, r0, #1
   84010:	bf0e      	itee	eq
   84012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8401a:	6520      	strne	r0, [r4, #80]	; 0x50
   8401c:	81a3      	strh	r3, [r4, #12]
   8401e:	bd10      	pop	{r4, pc}

00084020 <__sclose>:
   84020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84024:	f000 b906 	b.w	84234 <_close_r>

00084028 <__swbuf_r>:
   84028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8402a:	460d      	mov	r5, r1
   8402c:	4614      	mov	r4, r2
   8402e:	4606      	mov	r6, r0
   84030:	b110      	cbz	r0, 84038 <__swbuf_r+0x10>
   84032:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84034:	2b00      	cmp	r3, #0
   84036:	d04b      	beq.n	840d0 <__swbuf_r+0xa8>
   84038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8403c:	69a3      	ldr	r3, [r4, #24]
   8403e:	b291      	uxth	r1, r2
   84040:	0708      	lsls	r0, r1, #28
   84042:	60a3      	str	r3, [r4, #8]
   84044:	d539      	bpl.n	840ba <__swbuf_r+0x92>
   84046:	6923      	ldr	r3, [r4, #16]
   84048:	2b00      	cmp	r3, #0
   8404a:	d036      	beq.n	840ba <__swbuf_r+0x92>
   8404c:	b2ed      	uxtb	r5, r5
   8404e:	0489      	lsls	r1, r1, #18
   84050:	462f      	mov	r7, r5
   84052:	d515      	bpl.n	84080 <__swbuf_r+0x58>
   84054:	6822      	ldr	r2, [r4, #0]
   84056:	6961      	ldr	r1, [r4, #20]
   84058:	1ad3      	subs	r3, r2, r3
   8405a:	428b      	cmp	r3, r1
   8405c:	da1c      	bge.n	84098 <__swbuf_r+0x70>
   8405e:	3301      	adds	r3, #1
   84060:	68a1      	ldr	r1, [r4, #8]
   84062:	1c50      	adds	r0, r2, #1
   84064:	3901      	subs	r1, #1
   84066:	60a1      	str	r1, [r4, #8]
   84068:	6020      	str	r0, [r4, #0]
   8406a:	7015      	strb	r5, [r2, #0]
   8406c:	6962      	ldr	r2, [r4, #20]
   8406e:	429a      	cmp	r2, r3
   84070:	d01a      	beq.n	840a8 <__swbuf_r+0x80>
   84072:	89a3      	ldrh	r3, [r4, #12]
   84074:	07db      	lsls	r3, r3, #31
   84076:	d501      	bpl.n	8407c <__swbuf_r+0x54>
   84078:	2d0a      	cmp	r5, #10
   8407a:	d015      	beq.n	840a8 <__swbuf_r+0x80>
   8407c:	4638      	mov	r0, r7
   8407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84080:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84086:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   8408a:	81a2      	strh	r2, [r4, #12]
   8408c:	6822      	ldr	r2, [r4, #0]
   8408e:	6661      	str	r1, [r4, #100]	; 0x64
   84090:	6961      	ldr	r1, [r4, #20]
   84092:	1ad3      	subs	r3, r2, r3
   84094:	428b      	cmp	r3, r1
   84096:	dbe2      	blt.n	8405e <__swbuf_r+0x36>
   84098:	4621      	mov	r1, r4
   8409a:	4630      	mov	r0, r6
   8409c:	f7fe fd38 	bl	82b10 <_fflush_r>
   840a0:	b940      	cbnz	r0, 840b4 <__swbuf_r+0x8c>
   840a2:	2301      	movs	r3, #1
   840a4:	6822      	ldr	r2, [r4, #0]
   840a6:	e7db      	b.n	84060 <__swbuf_r+0x38>
   840a8:	4621      	mov	r1, r4
   840aa:	4630      	mov	r0, r6
   840ac:	f7fe fd30 	bl	82b10 <_fflush_r>
   840b0:	2800      	cmp	r0, #0
   840b2:	d0e3      	beq.n	8407c <__swbuf_r+0x54>
   840b4:	f04f 37ff 	mov.w	r7, #4294967295
   840b8:	e7e0      	b.n	8407c <__swbuf_r+0x54>
   840ba:	4621      	mov	r1, r4
   840bc:	4630      	mov	r0, r6
   840be:	f7fe fc17 	bl	828f0 <__swsetup_r>
   840c2:	2800      	cmp	r0, #0
   840c4:	d1f6      	bne.n	840b4 <__swbuf_r+0x8c>
   840c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   840ca:	6923      	ldr	r3, [r4, #16]
   840cc:	b291      	uxth	r1, r2
   840ce:	e7bd      	b.n	8404c <__swbuf_r+0x24>
   840d0:	f7fe fd76 	bl	82bc0 <__sinit>
   840d4:	e7b0      	b.n	84038 <__swbuf_r+0x10>
   840d6:	bf00      	nop

000840d8 <_wcrtomb_r>:
   840d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   840da:	4606      	mov	r6, r0
   840dc:	b085      	sub	sp, #20
   840de:	461f      	mov	r7, r3
   840e0:	b189      	cbz	r1, 84106 <_wcrtomb_r+0x2e>
   840e2:	4c10      	ldr	r4, [pc, #64]	; (84124 <_wcrtomb_r+0x4c>)
   840e4:	4d10      	ldr	r5, [pc, #64]	; (84128 <_wcrtomb_r+0x50>)
   840e6:	6824      	ldr	r4, [r4, #0]
   840e8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   840ea:	2c00      	cmp	r4, #0
   840ec:	bf08      	it	eq
   840ee:	462c      	moveq	r4, r5
   840f0:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   840f4:	47a0      	blx	r4
   840f6:	1c43      	adds	r3, r0, #1
   840f8:	d103      	bne.n	84102 <_wcrtomb_r+0x2a>
   840fa:	2200      	movs	r2, #0
   840fc:	238a      	movs	r3, #138	; 0x8a
   840fe:	603a      	str	r2, [r7, #0]
   84100:	6033      	str	r3, [r6, #0]
   84102:	b005      	add	sp, #20
   84104:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84106:	460c      	mov	r4, r1
   84108:	4a06      	ldr	r2, [pc, #24]	; (84124 <_wcrtomb_r+0x4c>)
   8410a:	4d07      	ldr	r5, [pc, #28]	; (84128 <_wcrtomb_r+0x50>)
   8410c:	6811      	ldr	r1, [r2, #0]
   8410e:	4622      	mov	r2, r4
   84110:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   84112:	a901      	add	r1, sp, #4
   84114:	2c00      	cmp	r4, #0
   84116:	bf08      	it	eq
   84118:	462c      	moveq	r4, r5
   8411a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8411e:	47a0      	blx	r4
   84120:	e7e9      	b.n	840f6 <_wcrtomb_r+0x1e>
   84122:	bf00      	nop
   84124:	20070134 	.word	0x20070134
   84128:	20070564 	.word	0x20070564

0008412c <__ascii_wctomb>:
   8412c:	b119      	cbz	r1, 84136 <__ascii_wctomb+0xa>
   8412e:	2aff      	cmp	r2, #255	; 0xff
   84130:	d803      	bhi.n	8413a <__ascii_wctomb+0xe>
   84132:	700a      	strb	r2, [r1, #0]
   84134:	2101      	movs	r1, #1
   84136:	4608      	mov	r0, r1
   84138:	4770      	bx	lr
   8413a:	238a      	movs	r3, #138	; 0x8a
   8413c:	f04f 31ff 	mov.w	r1, #4294967295
   84140:	6003      	str	r3, [r0, #0]
   84142:	e7f8      	b.n	84136 <__ascii_wctomb+0xa>

00084144 <_write_r>:
   84144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84146:	460e      	mov	r6, r1
   84148:	2500      	movs	r5, #0
   8414a:	4c08      	ldr	r4, [pc, #32]	; (8416c <_write_r+0x28>)
   8414c:	4611      	mov	r1, r2
   8414e:	4607      	mov	r7, r0
   84150:	461a      	mov	r2, r3
   84152:	4630      	mov	r0, r6
   84154:	6025      	str	r5, [r4, #0]
   84156:	f7fc fae7 	bl	80728 <_write>
   8415a:	1c43      	adds	r3, r0, #1
   8415c:	d000      	beq.n	84160 <_write_r+0x1c>
   8415e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84160:	6823      	ldr	r3, [r4, #0]
   84162:	2b00      	cmp	r3, #0
   84164:	d0fb      	beq.n	8415e <_write_r+0x1a>
   84166:	603b      	str	r3, [r7, #0]
   84168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8416a:	bf00      	nop
   8416c:	20071ce0 	.word	0x20071ce0

00084170 <__register_exitproc>:
   84170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84174:	4d2c      	ldr	r5, [pc, #176]	; (84228 <__register_exitproc+0xb8>)
   84176:	4606      	mov	r6, r0
   84178:	6828      	ldr	r0, [r5, #0]
   8417a:	4698      	mov	r8, r3
   8417c:	460f      	mov	r7, r1
   8417e:	4691      	mov	r9, r2
   84180:	f7ff f8de 	bl	83340 <__retarget_lock_acquire_recursive>
   84184:	4b29      	ldr	r3, [pc, #164]	; (8422c <__register_exitproc+0xbc>)
   84186:	681c      	ldr	r4, [r3, #0]
   84188:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8418c:	2b00      	cmp	r3, #0
   8418e:	d03e      	beq.n	8420e <__register_exitproc+0x9e>
   84190:	685a      	ldr	r2, [r3, #4]
   84192:	2a1f      	cmp	r2, #31
   84194:	dc1c      	bgt.n	841d0 <__register_exitproc+0x60>
   84196:	f102 0e01 	add.w	lr, r2, #1
   8419a:	b176      	cbz	r6, 841ba <__register_exitproc+0x4a>
   8419c:	2101      	movs	r1, #1
   8419e:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   841a2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   841a6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   841aa:	4091      	lsls	r1, r2
   841ac:	4308      	orrs	r0, r1
   841ae:	2e02      	cmp	r6, #2
   841b0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   841b4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   841b8:	d023      	beq.n	84202 <__register_exitproc+0x92>
   841ba:	3202      	adds	r2, #2
   841bc:	f8c3 e004 	str.w	lr, [r3, #4]
   841c0:	6828      	ldr	r0, [r5, #0]
   841c2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   841c6:	f7ff f8bd 	bl	83344 <__retarget_lock_release_recursive>
   841ca:	2000      	movs	r0, #0
   841cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   841d0:	4b17      	ldr	r3, [pc, #92]	; (84230 <__register_exitproc+0xc0>)
   841d2:	b30b      	cbz	r3, 84218 <__register_exitproc+0xa8>
   841d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   841d8:	f7ff f92e 	bl	83438 <malloc>
   841dc:	4603      	mov	r3, r0
   841de:	b1d8      	cbz	r0, 84218 <__register_exitproc+0xa8>
   841e0:	2000      	movs	r0, #0
   841e2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   841e6:	f04f 0e01 	mov.w	lr, #1
   841ea:	6058      	str	r0, [r3, #4]
   841ec:	6019      	str	r1, [r3, #0]
   841ee:	4602      	mov	r2, r0
   841f0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   841f4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   841f8:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   841fc:	2e00      	cmp	r6, #0
   841fe:	d0dc      	beq.n	841ba <__register_exitproc+0x4a>
   84200:	e7cc      	b.n	8419c <__register_exitproc+0x2c>
   84202:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84206:	4301      	orrs	r1, r0
   84208:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8420c:	e7d5      	b.n	841ba <__register_exitproc+0x4a>
   8420e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84212:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84216:	e7bb      	b.n	84190 <__register_exitproc+0x20>
   84218:	6828      	ldr	r0, [r5, #0]
   8421a:	f7ff f893 	bl	83344 <__retarget_lock_release_recursive>
   8421e:	f04f 30ff 	mov.w	r0, #4294967295
   84222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84226:	bf00      	nop
   84228:	20070560 	.word	0x20070560
   8422c:	00084724 	.word	0x00084724
   84230:	00083439 	.word	0x00083439

00084234 <_close_r>:
   84234:	b538      	push	{r3, r4, r5, lr}
   84236:	2300      	movs	r3, #0
   84238:	4c06      	ldr	r4, [pc, #24]	; (84254 <_close_r+0x20>)
   8423a:	4605      	mov	r5, r0
   8423c:	4608      	mov	r0, r1
   8423e:	6023      	str	r3, [r4, #0]
   84240:	f7fc feea 	bl	81018 <_close>
   84244:	1c43      	adds	r3, r0, #1
   84246:	d000      	beq.n	8424a <_close_r+0x16>
   84248:	bd38      	pop	{r3, r4, r5, pc}
   8424a:	6823      	ldr	r3, [r4, #0]
   8424c:	2b00      	cmp	r3, #0
   8424e:	d0fb      	beq.n	84248 <_close_r+0x14>
   84250:	602b      	str	r3, [r5, #0]
   84252:	bd38      	pop	{r3, r4, r5, pc}
   84254:	20071ce0 	.word	0x20071ce0

00084258 <_fclose_r>:
   84258:	b570      	push	{r4, r5, r6, lr}
   8425a:	b159      	cbz	r1, 84274 <_fclose_r+0x1c>
   8425c:	4605      	mov	r5, r0
   8425e:	460c      	mov	r4, r1
   84260:	b110      	cbz	r0, 84268 <_fclose_r+0x10>
   84262:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84264:	2b00      	cmp	r3, #0
   84266:	d03c      	beq.n	842e2 <_fclose_r+0x8a>
   84268:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8426a:	07d8      	lsls	r0, r3, #31
   8426c:	d505      	bpl.n	8427a <_fclose_r+0x22>
   8426e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84272:	b92b      	cbnz	r3, 84280 <_fclose_r+0x28>
   84274:	2600      	movs	r6, #0
   84276:	4630      	mov	r0, r6
   84278:	bd70      	pop	{r4, r5, r6, pc}
   8427a:	89a3      	ldrh	r3, [r4, #12]
   8427c:	0599      	lsls	r1, r3, #22
   8427e:	d53c      	bpl.n	842fa <_fclose_r+0xa2>
   84280:	4621      	mov	r1, r4
   84282:	4628      	mov	r0, r5
   84284:	f7fe fba8 	bl	829d8 <__sflush_r>
   84288:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8428a:	4606      	mov	r6, r0
   8428c:	b133      	cbz	r3, 8429c <_fclose_r+0x44>
   8428e:	69e1      	ldr	r1, [r4, #28]
   84290:	4628      	mov	r0, r5
   84292:	4798      	blx	r3
   84294:	2800      	cmp	r0, #0
   84296:	bfb8      	it	lt
   84298:	f04f 36ff 	movlt.w	r6, #4294967295
   8429c:	89a3      	ldrh	r3, [r4, #12]
   8429e:	061a      	lsls	r2, r3, #24
   842a0:	d422      	bmi.n	842e8 <_fclose_r+0x90>
   842a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   842a4:	b141      	cbz	r1, 842b8 <_fclose_r+0x60>
   842a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   842aa:	4299      	cmp	r1, r3
   842ac:	d002      	beq.n	842b4 <_fclose_r+0x5c>
   842ae:	4628      	mov	r0, r5
   842b0:	f7fe fdac 	bl	82e0c <_free_r>
   842b4:	2300      	movs	r3, #0
   842b6:	6323      	str	r3, [r4, #48]	; 0x30
   842b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   842ba:	b121      	cbz	r1, 842c6 <_fclose_r+0x6e>
   842bc:	4628      	mov	r0, r5
   842be:	f7fe fda5 	bl	82e0c <_free_r>
   842c2:	2300      	movs	r3, #0
   842c4:	6463      	str	r3, [r4, #68]	; 0x44
   842c6:	f7fe fcab 	bl	82c20 <__sfp_lock_acquire>
   842ca:	2200      	movs	r2, #0
   842cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   842ce:	81a2      	strh	r2, [r4, #12]
   842d0:	07db      	lsls	r3, r3, #31
   842d2:	d50e      	bpl.n	842f2 <_fclose_r+0x9a>
   842d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   842d6:	f7ff f831 	bl	8333c <__retarget_lock_close_recursive>
   842da:	f7fe fca7 	bl	82c2c <__sfp_lock_release>
   842de:	4630      	mov	r0, r6
   842e0:	bd70      	pop	{r4, r5, r6, pc}
   842e2:	f7fe fc6d 	bl	82bc0 <__sinit>
   842e6:	e7bf      	b.n	84268 <_fclose_r+0x10>
   842e8:	6921      	ldr	r1, [r4, #16]
   842ea:	4628      	mov	r0, r5
   842ec:	f7fe fd8e 	bl	82e0c <_free_r>
   842f0:	e7d7      	b.n	842a2 <_fclose_r+0x4a>
   842f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   842f4:	f7ff f826 	bl	83344 <__retarget_lock_release_recursive>
   842f8:	e7ec      	b.n	842d4 <_fclose_r+0x7c>
   842fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   842fc:	f7ff f820 	bl	83340 <__retarget_lock_acquire_recursive>
   84300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84304:	2b00      	cmp	r3, #0
   84306:	d1bb      	bne.n	84280 <_fclose_r+0x28>
   84308:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8430a:	f016 0601 	ands.w	r6, r6, #1
   8430e:	d1b1      	bne.n	84274 <_fclose_r+0x1c>
   84310:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84312:	f7ff f817 	bl	83344 <__retarget_lock_release_recursive>
   84316:	4630      	mov	r0, r6
   84318:	bd70      	pop	{r4, r5, r6, pc}
   8431a:	bf00      	nop

0008431c <_fstat_r>:
   8431c:	b570      	push	{r4, r5, r6, lr}
   8431e:	460d      	mov	r5, r1
   84320:	2300      	movs	r3, #0
   84322:	4c07      	ldr	r4, [pc, #28]	; (84340 <_fstat_r+0x24>)
   84324:	4606      	mov	r6, r0
   84326:	4611      	mov	r1, r2
   84328:	4628      	mov	r0, r5
   8432a:	6023      	str	r3, [r4, #0]
   8432c:	f7fc fe77 	bl	8101e <_fstat>
   84330:	1c43      	adds	r3, r0, #1
   84332:	d000      	beq.n	84336 <_fstat_r+0x1a>
   84334:	bd70      	pop	{r4, r5, r6, pc}
   84336:	6823      	ldr	r3, [r4, #0]
   84338:	2b00      	cmp	r3, #0
   8433a:	d0fb      	beq.n	84334 <_fstat_r+0x18>
   8433c:	6033      	str	r3, [r6, #0]
   8433e:	bd70      	pop	{r4, r5, r6, pc}
   84340:	20071ce0 	.word	0x20071ce0

00084344 <_isatty_r>:
   84344:	b538      	push	{r3, r4, r5, lr}
   84346:	2300      	movs	r3, #0
   84348:	4c06      	ldr	r4, [pc, #24]	; (84364 <_isatty_r+0x20>)
   8434a:	4605      	mov	r5, r0
   8434c:	4608      	mov	r0, r1
   8434e:	6023      	str	r3, [r4, #0]
   84350:	f7fc fe6a 	bl	81028 <_isatty>
   84354:	1c43      	adds	r3, r0, #1
   84356:	d000      	beq.n	8435a <_isatty_r+0x16>
   84358:	bd38      	pop	{r3, r4, r5, pc}
   8435a:	6823      	ldr	r3, [r4, #0]
   8435c:	2b00      	cmp	r3, #0
   8435e:	d0fb      	beq.n	84358 <_isatty_r+0x14>
   84360:	602b      	str	r3, [r5, #0]
   84362:	bd38      	pop	{r3, r4, r5, pc}
   84364:	20071ce0 	.word	0x20071ce0

00084368 <_lseek_r>:
   84368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8436a:	460e      	mov	r6, r1
   8436c:	2500      	movs	r5, #0
   8436e:	4c08      	ldr	r4, [pc, #32]	; (84390 <_lseek_r+0x28>)
   84370:	4611      	mov	r1, r2
   84372:	4607      	mov	r7, r0
   84374:	461a      	mov	r2, r3
   84376:	4630      	mov	r0, r6
   84378:	6025      	str	r5, [r4, #0]
   8437a:	f7fc fe57 	bl	8102c <_lseek>
   8437e:	1c43      	adds	r3, r0, #1
   84380:	d000      	beq.n	84384 <_lseek_r+0x1c>
   84382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84384:	6823      	ldr	r3, [r4, #0]
   84386:	2b00      	cmp	r3, #0
   84388:	d0fb      	beq.n	84382 <_lseek_r+0x1a>
   8438a:	603b      	str	r3, [r7, #0]
   8438c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8438e:	bf00      	nop
   84390:	20071ce0 	.word	0x20071ce0

00084394 <_read_r>:
   84394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84396:	460e      	mov	r6, r1
   84398:	2500      	movs	r5, #0
   8439a:	4c08      	ldr	r4, [pc, #32]	; (843bc <_read_r+0x28>)
   8439c:	4611      	mov	r1, r2
   8439e:	4607      	mov	r7, r0
   843a0:	461a      	mov	r2, r3
   843a2:	4630      	mov	r0, r6
   843a4:	6025      	str	r5, [r4, #0]
   843a6:	f7fc f8f3 	bl	80590 <_read>
   843aa:	1c43      	adds	r3, r0, #1
   843ac:	d000      	beq.n	843b0 <_read_r+0x1c>
   843ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   843b0:	6823      	ldr	r3, [r4, #0]
   843b2:	2b00      	cmp	r3, #0
   843b4:	d0fb      	beq.n	843ae <_read_r+0x1a>
   843b6:	603b      	str	r3, [r7, #0]
   843b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   843ba:	bf00      	nop
   843bc:	20071ce0 	.word	0x20071ce0

000843c0 <__aeabi_uldivmod>:
   843c0:	b953      	cbnz	r3, 843d8 <__aeabi_uldivmod+0x18>
   843c2:	b94a      	cbnz	r2, 843d8 <__aeabi_uldivmod+0x18>
   843c4:	2900      	cmp	r1, #0
   843c6:	bf08      	it	eq
   843c8:	2800      	cmpeq	r0, #0
   843ca:	bf1c      	itt	ne
   843cc:	f04f 31ff 	movne.w	r1, #4294967295
   843d0:	f04f 30ff 	movne.w	r0, #4294967295
   843d4:	f000 b97a 	b.w	846cc <__aeabi_idiv0>
   843d8:	f1ad 0c08 	sub.w	ip, sp, #8
   843dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   843e0:	f000 f806 	bl	843f0 <__udivmoddi4>
   843e4:	f8dd e004 	ldr.w	lr, [sp, #4]
   843e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   843ec:	b004      	add	sp, #16
   843ee:	4770      	bx	lr

000843f0 <__udivmoddi4>:
   843f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   843f4:	468c      	mov	ip, r1
   843f6:	460e      	mov	r6, r1
   843f8:	4604      	mov	r4, r0
   843fa:	9d08      	ldr	r5, [sp, #32]
   843fc:	2b00      	cmp	r3, #0
   843fe:	d150      	bne.n	844a2 <__udivmoddi4+0xb2>
   84400:	428a      	cmp	r2, r1
   84402:	4617      	mov	r7, r2
   84404:	d96c      	bls.n	844e0 <__udivmoddi4+0xf0>
   84406:	fab2 fe82 	clz	lr, r2
   8440a:	f1be 0f00 	cmp.w	lr, #0
   8440e:	d00b      	beq.n	84428 <__udivmoddi4+0x38>
   84410:	f1ce 0c20 	rsb	ip, lr, #32
   84414:	fa01 f60e 	lsl.w	r6, r1, lr
   84418:	fa20 fc0c 	lsr.w	ip, r0, ip
   8441c:	fa02 f70e 	lsl.w	r7, r2, lr
   84420:	ea4c 0c06 	orr.w	ip, ip, r6
   84424:	fa00 f40e 	lsl.w	r4, r0, lr
   84428:	0c3a      	lsrs	r2, r7, #16
   8442a:	fbbc f9f2 	udiv	r9, ip, r2
   8442e:	b2bb      	uxth	r3, r7
   84430:	fb02 cc19 	mls	ip, r2, r9, ip
   84434:	fb09 fa03 	mul.w	sl, r9, r3
   84438:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8443c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   84440:	45b2      	cmp	sl, r6
   84442:	d90a      	bls.n	8445a <__udivmoddi4+0x6a>
   84444:	19f6      	adds	r6, r6, r7
   84446:	f109 31ff 	add.w	r1, r9, #4294967295
   8444a:	f080 8125 	bcs.w	84698 <__udivmoddi4+0x2a8>
   8444e:	45b2      	cmp	sl, r6
   84450:	f240 8122 	bls.w	84698 <__udivmoddi4+0x2a8>
   84454:	f1a9 0902 	sub.w	r9, r9, #2
   84458:	443e      	add	r6, r7
   8445a:	eba6 060a 	sub.w	r6, r6, sl
   8445e:	fbb6 f0f2 	udiv	r0, r6, r2
   84462:	fb02 6610 	mls	r6, r2, r0, r6
   84466:	fb00 f303 	mul.w	r3, r0, r3
   8446a:	b2a4      	uxth	r4, r4
   8446c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   84470:	42a3      	cmp	r3, r4
   84472:	d909      	bls.n	84488 <__udivmoddi4+0x98>
   84474:	19e4      	adds	r4, r4, r7
   84476:	f100 32ff 	add.w	r2, r0, #4294967295
   8447a:	f080 810b 	bcs.w	84694 <__udivmoddi4+0x2a4>
   8447e:	42a3      	cmp	r3, r4
   84480:	f240 8108 	bls.w	84694 <__udivmoddi4+0x2a4>
   84484:	3802      	subs	r0, #2
   84486:	443c      	add	r4, r7
   84488:	2100      	movs	r1, #0
   8448a:	1ae4      	subs	r4, r4, r3
   8448c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84490:	2d00      	cmp	r5, #0
   84492:	d062      	beq.n	8455a <__udivmoddi4+0x16a>
   84494:	2300      	movs	r3, #0
   84496:	fa24 f40e 	lsr.w	r4, r4, lr
   8449a:	602c      	str	r4, [r5, #0]
   8449c:	606b      	str	r3, [r5, #4]
   8449e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   844a2:	428b      	cmp	r3, r1
   844a4:	d907      	bls.n	844b6 <__udivmoddi4+0xc6>
   844a6:	2d00      	cmp	r5, #0
   844a8:	d055      	beq.n	84556 <__udivmoddi4+0x166>
   844aa:	2100      	movs	r1, #0
   844ac:	e885 0041 	stmia.w	r5, {r0, r6}
   844b0:	4608      	mov	r0, r1
   844b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   844b6:	fab3 f183 	clz	r1, r3
   844ba:	2900      	cmp	r1, #0
   844bc:	f040 808f 	bne.w	845de <__udivmoddi4+0x1ee>
   844c0:	42b3      	cmp	r3, r6
   844c2:	d302      	bcc.n	844ca <__udivmoddi4+0xda>
   844c4:	4282      	cmp	r2, r0
   844c6:	f200 80fc 	bhi.w	846c2 <__udivmoddi4+0x2d2>
   844ca:	1a84      	subs	r4, r0, r2
   844cc:	eb66 0603 	sbc.w	r6, r6, r3
   844d0:	2001      	movs	r0, #1
   844d2:	46b4      	mov	ip, r6
   844d4:	2d00      	cmp	r5, #0
   844d6:	d040      	beq.n	8455a <__udivmoddi4+0x16a>
   844d8:	e885 1010 	stmia.w	r5, {r4, ip}
   844dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   844e0:	b912      	cbnz	r2, 844e8 <__udivmoddi4+0xf8>
   844e2:	2701      	movs	r7, #1
   844e4:	fbb7 f7f2 	udiv	r7, r7, r2
   844e8:	fab7 fe87 	clz	lr, r7
   844ec:	f1be 0f00 	cmp.w	lr, #0
   844f0:	d135      	bne.n	8455e <__udivmoddi4+0x16e>
   844f2:	2101      	movs	r1, #1
   844f4:	1bf6      	subs	r6, r6, r7
   844f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   844fa:	fa1f f887 	uxth.w	r8, r7
   844fe:	fbb6 f2fc 	udiv	r2, r6, ip
   84502:	fb0c 6612 	mls	r6, ip, r2, r6
   84506:	fb08 f002 	mul.w	r0, r8, r2
   8450a:	0c23      	lsrs	r3, r4, #16
   8450c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   84510:	42b0      	cmp	r0, r6
   84512:	d907      	bls.n	84524 <__udivmoddi4+0x134>
   84514:	19f6      	adds	r6, r6, r7
   84516:	f102 33ff 	add.w	r3, r2, #4294967295
   8451a:	d202      	bcs.n	84522 <__udivmoddi4+0x132>
   8451c:	42b0      	cmp	r0, r6
   8451e:	f200 80d2 	bhi.w	846c6 <__udivmoddi4+0x2d6>
   84522:	461a      	mov	r2, r3
   84524:	1a36      	subs	r6, r6, r0
   84526:	fbb6 f0fc 	udiv	r0, r6, ip
   8452a:	fb0c 6610 	mls	r6, ip, r0, r6
   8452e:	fb08 f800 	mul.w	r8, r8, r0
   84532:	b2a3      	uxth	r3, r4
   84534:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   84538:	45a0      	cmp	r8, r4
   8453a:	d907      	bls.n	8454c <__udivmoddi4+0x15c>
   8453c:	19e4      	adds	r4, r4, r7
   8453e:	f100 33ff 	add.w	r3, r0, #4294967295
   84542:	d202      	bcs.n	8454a <__udivmoddi4+0x15a>
   84544:	45a0      	cmp	r8, r4
   84546:	f200 80b9 	bhi.w	846bc <__udivmoddi4+0x2cc>
   8454a:	4618      	mov	r0, r3
   8454c:	eba4 0408 	sub.w	r4, r4, r8
   84550:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   84554:	e79c      	b.n	84490 <__udivmoddi4+0xa0>
   84556:	4629      	mov	r1, r5
   84558:	4628      	mov	r0, r5
   8455a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8455e:	fa07 f70e 	lsl.w	r7, r7, lr
   84562:	f1ce 0320 	rsb	r3, lr, #32
   84566:	fa26 f203 	lsr.w	r2, r6, r3
   8456a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8456e:	fbb2 f1fc 	udiv	r1, r2, ip
   84572:	fa1f f887 	uxth.w	r8, r7
   84576:	fb0c 2211 	mls	r2, ip, r1, r2
   8457a:	fa06 f60e 	lsl.w	r6, r6, lr
   8457e:	fa20 f303 	lsr.w	r3, r0, r3
   84582:	fb01 f908 	mul.w	r9, r1, r8
   84586:	4333      	orrs	r3, r6
   84588:	0c1e      	lsrs	r6, r3, #16
   8458a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8458e:	45b1      	cmp	r9, r6
   84590:	fa00 f40e 	lsl.w	r4, r0, lr
   84594:	d909      	bls.n	845aa <__udivmoddi4+0x1ba>
   84596:	19f6      	adds	r6, r6, r7
   84598:	f101 32ff 	add.w	r2, r1, #4294967295
   8459c:	f080 808c 	bcs.w	846b8 <__udivmoddi4+0x2c8>
   845a0:	45b1      	cmp	r9, r6
   845a2:	f240 8089 	bls.w	846b8 <__udivmoddi4+0x2c8>
   845a6:	3902      	subs	r1, #2
   845a8:	443e      	add	r6, r7
   845aa:	eba6 0609 	sub.w	r6, r6, r9
   845ae:	fbb6 f0fc 	udiv	r0, r6, ip
   845b2:	fb0c 6210 	mls	r2, ip, r0, r6
   845b6:	fb00 f908 	mul.w	r9, r0, r8
   845ba:	b29e      	uxth	r6, r3
   845bc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   845c0:	45b1      	cmp	r9, r6
   845c2:	d907      	bls.n	845d4 <__udivmoddi4+0x1e4>
   845c4:	19f6      	adds	r6, r6, r7
   845c6:	f100 33ff 	add.w	r3, r0, #4294967295
   845ca:	d271      	bcs.n	846b0 <__udivmoddi4+0x2c0>
   845cc:	45b1      	cmp	r9, r6
   845ce:	d96f      	bls.n	846b0 <__udivmoddi4+0x2c0>
   845d0:	3802      	subs	r0, #2
   845d2:	443e      	add	r6, r7
   845d4:	eba6 0609 	sub.w	r6, r6, r9
   845d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   845dc:	e78f      	b.n	844fe <__udivmoddi4+0x10e>
   845de:	f1c1 0720 	rsb	r7, r1, #32
   845e2:	fa22 f807 	lsr.w	r8, r2, r7
   845e6:	408b      	lsls	r3, r1
   845e8:	ea48 0303 	orr.w	r3, r8, r3
   845ec:	fa26 f407 	lsr.w	r4, r6, r7
   845f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   845f4:	fbb4 f9fe 	udiv	r9, r4, lr
   845f8:	fa1f fc83 	uxth.w	ip, r3
   845fc:	fb0e 4419 	mls	r4, lr, r9, r4
   84600:	408e      	lsls	r6, r1
   84602:	fa20 f807 	lsr.w	r8, r0, r7
   84606:	fb09 fa0c 	mul.w	sl, r9, ip
   8460a:	ea48 0806 	orr.w	r8, r8, r6
   8460e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   84612:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   84616:	45a2      	cmp	sl, r4
   84618:	fa02 f201 	lsl.w	r2, r2, r1
   8461c:	fa00 f601 	lsl.w	r6, r0, r1
   84620:	d908      	bls.n	84634 <__udivmoddi4+0x244>
   84622:	18e4      	adds	r4, r4, r3
   84624:	f109 30ff 	add.w	r0, r9, #4294967295
   84628:	d244      	bcs.n	846b4 <__udivmoddi4+0x2c4>
   8462a:	45a2      	cmp	sl, r4
   8462c:	d942      	bls.n	846b4 <__udivmoddi4+0x2c4>
   8462e:	f1a9 0902 	sub.w	r9, r9, #2
   84632:	441c      	add	r4, r3
   84634:	eba4 040a 	sub.w	r4, r4, sl
   84638:	fbb4 f0fe 	udiv	r0, r4, lr
   8463c:	fb0e 4410 	mls	r4, lr, r0, r4
   84640:	fb00 fc0c 	mul.w	ip, r0, ip
   84644:	fa1f f888 	uxth.w	r8, r8
   84648:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   8464c:	45a4      	cmp	ip, r4
   8464e:	d907      	bls.n	84660 <__udivmoddi4+0x270>
   84650:	18e4      	adds	r4, r4, r3
   84652:	f100 3eff 	add.w	lr, r0, #4294967295
   84656:	d229      	bcs.n	846ac <__udivmoddi4+0x2bc>
   84658:	45a4      	cmp	ip, r4
   8465a:	d927      	bls.n	846ac <__udivmoddi4+0x2bc>
   8465c:	3802      	subs	r0, #2
   8465e:	441c      	add	r4, r3
   84660:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   84664:	fba0 8902 	umull	r8, r9, r0, r2
   84668:	eba4 0c0c 	sub.w	ip, r4, ip
   8466c:	45cc      	cmp	ip, r9
   8466e:	46c2      	mov	sl, r8
   84670:	46ce      	mov	lr, r9
   84672:	d315      	bcc.n	846a0 <__udivmoddi4+0x2b0>
   84674:	d012      	beq.n	8469c <__udivmoddi4+0x2ac>
   84676:	b155      	cbz	r5, 8468e <__udivmoddi4+0x29e>
   84678:	ebb6 030a 	subs.w	r3, r6, sl
   8467c:	eb6c 060e 	sbc.w	r6, ip, lr
   84680:	fa06 f707 	lsl.w	r7, r6, r7
   84684:	40cb      	lsrs	r3, r1
   84686:	431f      	orrs	r7, r3
   84688:	40ce      	lsrs	r6, r1
   8468a:	602f      	str	r7, [r5, #0]
   8468c:	606e      	str	r6, [r5, #4]
   8468e:	2100      	movs	r1, #0
   84690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84694:	4610      	mov	r0, r2
   84696:	e6f7      	b.n	84488 <__udivmoddi4+0x98>
   84698:	4689      	mov	r9, r1
   8469a:	e6de      	b.n	8445a <__udivmoddi4+0x6a>
   8469c:	4546      	cmp	r6, r8
   8469e:	d2ea      	bcs.n	84676 <__udivmoddi4+0x286>
   846a0:	ebb8 0a02 	subs.w	sl, r8, r2
   846a4:	eb69 0e03 	sbc.w	lr, r9, r3
   846a8:	3801      	subs	r0, #1
   846aa:	e7e4      	b.n	84676 <__udivmoddi4+0x286>
   846ac:	4670      	mov	r0, lr
   846ae:	e7d7      	b.n	84660 <__udivmoddi4+0x270>
   846b0:	4618      	mov	r0, r3
   846b2:	e78f      	b.n	845d4 <__udivmoddi4+0x1e4>
   846b4:	4681      	mov	r9, r0
   846b6:	e7bd      	b.n	84634 <__udivmoddi4+0x244>
   846b8:	4611      	mov	r1, r2
   846ba:	e776      	b.n	845aa <__udivmoddi4+0x1ba>
   846bc:	3802      	subs	r0, #2
   846be:	443c      	add	r4, r7
   846c0:	e744      	b.n	8454c <__udivmoddi4+0x15c>
   846c2:	4608      	mov	r0, r1
   846c4:	e706      	b.n	844d4 <__udivmoddi4+0xe4>
   846c6:	3a02      	subs	r2, #2
   846c8:	443e      	add	r6, r7
   846ca:	e72b      	b.n	84524 <__udivmoddi4+0x134>

000846cc <__aeabi_idiv0>:
   846cc:	4770      	bx	lr
   846ce:	bf00      	nop
   846d0:	71657246 	.word	0x71657246
   846d4:	636e6575 	.word	0x636e6575
   846d8:	25203a79 	.word	0x25203a79
   846dc:	4820756c 	.word	0x4820756c
   846e0:	00000a7a 	.word	0x00000a7a
   846e4:	656d6954 	.word	0x656d6954
   846e8:	61682072 	.word	0x61682072
   846ec:	6f6e2073 	.word	0x6f6e2073
   846f0:	65622074 	.word	0x65622074
   846f4:	63206e65 	.word	0x63206e65
   846f8:	69666e6f 	.word	0x69666e6f
   846fc:	65727567 	.word	0x65727567
   84700:	00002164 	.word	0x00002164
   84704:	736e6f43 	.word	0x736e6f43
   84708:	20656c6f 	.word	0x20656c6f
   8470c:	64616572 	.word	0x64616572
   84710:	00000a79 	.word	0x00000a79
   84714:	3d3d3d3d 	.word	0x3d3d3d3d
   84718:	3d3d3d3d 	.word	0x3d3d3d3d
   8471c:	3d3d3d3d 	.word	0x3d3d3d3d
   84720:	00000a3d 	.word	0x00000a3d

00084724 <_global_impure_ptr>:
   84724:	20070138 0000000a 33323130 37363534     8.. ....01234567
   84734:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   84744:	37363534 62613938 66656463 00000000     456789abcdef....
   84754:	6c756e28 0000296c                       (null)..

0008475c <blanks.7217>:
   8475c:	20202020 20202020 20202020 20202020                     

0008476c <zeroes.7218>:
   8476c:	30303030 30303030 30303030 30303030     0000000000000000
   8477c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008478c <_ctype_>:
   8478c:	20202000 20202020 28282020 20282828     .         ((((( 
   8479c:	20202020 20202020 20202020 20202020                     
   847ac:	10108820 10101010 10101010 10101010      ...............
   847bc:	04040410 04040404 10040404 10101010     ................
   847cc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   847dc:	01010101 01010101 01010101 10101010     ................
   847ec:	42421010 42424242 02020202 02020202     ..BBBBBB........
   847fc:	02020202 02020202 02020202 10101010     ................
   8480c:	00000020 00000000 00000000 00000000      ...............
	...

00084890 <_init>:
   84890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84892:	bf00      	nop
   84894:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84896:	bc08      	pop	{r3}
   84898:	469e      	mov	lr, r3
   8489a:	4770      	bx	lr

0008489c <__init_array_start>:
   8489c:	000829b9 	.word	0x000829b9

000848a0 <__frame_dummy_init_array_entry>:
   848a0:	00080119                                ....

000848a4 <_fini>:
   848a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   848a6:	bf00      	nop
   848a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   848aa:	bc08      	pop	{r3}
   848ac:	469e      	mov	lr, r3
   848ae:	4770      	bx	lr

000848b0 <__fini_array_start>:
   848b0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20071cbc                                ... 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	0008412d 0008398d 00000000 0008478c     -A...9.......G..
20070654:	00084788 0008473c 0008473c 0008473c     .G..<G..<G..<G..
20070664:	0008473c 0008473c 0008473c 0008473c     <G..<G..<G..<G..
20070674:	0008473c 0008473c ffffffff ffffffff     <G..<G..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
