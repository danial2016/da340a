
DueProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004410  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084410  00084410  00014410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  00084418  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000011a8  20070ae0  00084ef8  00020ae0  2**2
                  ALLOC
  4 .stack        00002000  20071c88  000860a0  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019e23  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003bee  00000000  00000000  0003a985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005146  00000000  00000000  0003e573  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c40  00000000  00000000  000436b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ba0  00000000  00000000  000442f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000961a  00000000  00000000  00044e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000126ef  00000000  00000000  0004e4b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006632c  00000000  00000000  00060ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000027a8  00000000  00000000  000c6ed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	88 3c 07 20 a9 0a 08 00 a5 0a 08 00 a5 0a 08 00     .<. ............
   80010:	a5 0a 08 00 a5 0a 08 00 a5 0a 08 00 00 00 00 00     ................
	...
   8002c:	a5 0a 08 00 a5 0a 08 00 00 00 00 00 a5 0a 08 00     ................
   8003c:	a5 0a 08 00 a5 0a 08 00 a5 0a 08 00 a5 0a 08 00     ................
   8004c:	a5 0a 08 00 a5 0a 08 00 a5 0a 08 00 a5 0a 08 00     ................
   8005c:	a5 0a 08 00 a5 0a 08 00 a5 0a 08 00 00 00 00 00     ................
   8006c:	19 09 08 00 2d 09 08 00 41 09 08 00 55 09 08 00     ....-...A...U...
	...
   80084:	05 04 08 00 a5 0a 08 00 a5 0a 08 00 a5 0a 08 00     ................
   80094:	a5 0a 08 00 a5 0a 08 00 a5 0a 08 00 a5 0a 08 00     ................
   800a4:	00 00 00 00 a5 0a 08 00 61 01 08 00 a5 0a 08 00     ........a.......
   800b4:	a5 0a 08 00 a5 0a 08 00 a5 0a 08 00 a5 0a 08 00     ................
   800c4:	a5 0a 08 00 a5 0a 08 00 a5 0a 08 00 a5 0a 08 00     ................
   800d4:	bd 02 08 00 a5 0a 08 00 a5 0a 08 00 a5 0a 08 00     ................
   800e4:	a5 0a 08 00 a5 0a 08 00 a5 0a 08 00 a5 0a 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	00084418 	.word	0x00084418

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00084418 	.word	0x00084418
   80154:	20070ae4 	.word	0x20070ae4
   80158:	00084418 	.word	0x00084418
   8015c:	00000000 	.word	0x00000000

00080160 <TC0_Handler>:

/**
 *  Interrupt handler for TC0 interrupt.
 */
void TC0_Handler(void)
{
   80160:	b500      	push	{lr}
   80162:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);	//The compare bit is cleared by reading the register, manual p. 915
   80164:	2100      	movs	r1, #0
   80166:	4805      	ldr	r0, [pc, #20]	; (8017c <TC0_Handler+0x1c>)
   80168:	4b05      	ldr	r3, [pc, #20]	; (80180 <TC0_Handler+0x20>)
   8016a:	4798      	blx	r3
   8016c:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   8016e:	9b01      	ldr	r3, [sp, #4]
	
	/* Start sampling (i.e. convert one sample value) */
	adc_start(ADC);
   80170:	4804      	ldr	r0, [pc, #16]	; (80184 <TC0_Handler+0x24>)
   80172:	4b05      	ldr	r3, [pc, #20]	; (80188 <TC0_Handler+0x28>)
   80174:	4798      	blx	r3
	
}
   80176:	b003      	add	sp, #12
   80178:	f85d fb04 	ldr.w	pc, [sp], #4
   8017c:	40080000 	.word	0x40080000
   80180:	000803cf 	.word	0x000803cf
   80184:	400c0000 	.word	0x400c0000
   80188:	000803bd 	.word	0x000803bd

0008018c <read_counter_value>:
	if((*p_TC_SR0 & (1 << COVFS)) == (1 << COVFS)){ // check if overflow has occurred
		start_clock(); // resets the counter and starts the counter clock anew
		*p_TC_CV = 0;
	}
	*/
	counterValue = *p_TC1_CV;
   8018c:	4b02      	ldr	r3, [pc, #8]	; (80198 <read_counter_value+0xc>)
   8018e:	6818      	ldr	r0, [r3, #0]
   80190:	4b02      	ldr	r3, [pc, #8]	; (8019c <read_counter_value+0x10>)
   80192:	6018      	str	r0, [r3, #0]
	return counterValue;
}
   80194:	4770      	bx	lr
   80196:	bf00      	nop
   80198:	40084050 	.word	0x40084050
   8019c:	20070afc 	.word	0x20070afc

000801a0 <TC1CH1_setup_and_kickoff>:
		*p_PMC_WPMR &= 0x11111100;      // then clear WPEN bit, mask upper bytes
   801a0:	4a13      	ldr	r2, [pc, #76]	; (801f0 <TC1CH1_setup_and_kickoff+0x50>)
   801a2:	4b14      	ldr	r3, [pc, #80]	; (801f4 <TC1CH1_setup_and_kickoff+0x54>)
   801a4:	601a      	str	r2, [r3, #0]
	*p_TC1_CCR |= (1 << CLKEN);   // set enable bit
   801a6:	4914      	ldr	r1, [pc, #80]	; (801f8 <TC1CH1_setup_and_kickoff+0x58>)
	*p_TC1_CCR &= ~(1 << CLKDIS); // clear disable bit
   801a8:	680b      	ldr	r3, [r1, #0]
   801aa:	f023 0302 	bic.w	r3, r3, #2
	*p_TC1_CCR |= (1 << CLKEN);   // set enable bit
   801ae:	f043 0301 	orr.w	r3, r3, #1
   801b2:	600b      	str	r3, [r1, #0]
		*p_TC1_WPMR &= 0x11111100; // disable Write Protect by clearing WPEN bit, mask upper bytes
   801b4:	4b11      	ldr	r3, [pc, #68]	; (801fc <TC1CH1_setup_and_kickoff+0x5c>)
   801b6:	601a      	str	r2, [r3, #0]
		if((*p_PMC_PCSR0 & (1<<PERIPH_ID_TCC1)) != (1<<PERIPH_ID_TCC1)){  /* check status of peripheral clock corresponding to Timer Counter Channel 0 (if enabled) */
   801b8:	f503 23b8 	add.w	r3, r3, #376832	; 0x5c000
   801bc:	f203 5334 	addw	r3, r3, #1332	; 0x534
   801c0:	681b      	ldr	r3, [r3, #0]
   801c2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
   801c6:	d103      	bne.n	801d0 <TC1CH1_setup_and_kickoff+0x30>
			*p_PMC_PCER0 = (1 << PERIPH_ID_TCC1);                         /* enable peripheral clock corresponding to Timer Counter Channel 0 */
   801c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   801cc:	4b0c      	ldr	r3, [pc, #48]	; (80200 <TC1CH1_setup_and_kickoff+0x60>)
   801ce:	601a      	str	r2, [r3, #0]
	*p_TC_CMR1 &= 0x11111110;
   801d0:	4a0c      	ldr	r2, [pc, #48]	; (80204 <TC1CH1_setup_and_kickoff+0x64>)
   801d2:	6813      	ldr	r3, [r2, #0]
   801d4:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
   801d8:	f023 0301 	bic.w	r3, r3, #1
   801dc:	6013      	str	r3, [r2, #0]
	*p_TC1_CCR |= (1 << SWTRG); 
   801de:	3a04      	subs	r2, #4
	*p_TC1_CCR &= ~(1 << CLKDIS); // clear disable bit
   801e0:	6813      	ldr	r3, [r2, #0]
   801e2:	f023 0302 	bic.w	r3, r3, #2
	*p_TC1_CCR |= (1 << SWTRG); 
   801e6:	f043 0305 	orr.w	r3, r3, #5
   801ea:	6013      	str	r3, [r2, #0]
   801ec:	4770      	bx	lr
   801ee:	bf00      	nop
   801f0:	00100100 	.word	0x00100100
   801f4:	400e06e4 	.word	0x400e06e4
   801f8:	40084040 	.word	0x40084040
   801fc:	400840e4 	.word	0x400840e4
   80200:	400e0610 	.word	0x400e0610
   80204:	40084044 	.word	0x40084044

00080208 <smooth_values>:
	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
}

static void smooth_values(uint16_t *buffer)
{
   80208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8020c:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
   80210:	b085      	sub	sp, #20
   80212:	f1a0 0802 	sub.w	r8, r0, #2
   80216:	f10d 050e 	add.w	r5, sp, #14
   8021a:	f50d 5b80 	add.w	fp, sp, #4096	; 0x1000
   8021e:	f10b 0b0e 	add.w	fp, fp, #14
   80222:	4b20      	ldr	r3, [pc, #128]	; (802a4 <smooth_values+0x9c>)
   80224:	685a      	ldr	r2, [r3, #4]
   80226:	9200      	str	r2, [sp, #0]
   80228:	681b      	ldr	r3, [r3, #0]
		for(int k = M-1; k >= 0; k--)
		{
			xbuff[k+1] = xbuff[k];
		}
		invalue = buffer[i];
		xbuff[0] =(float)invalue;
   8022a:	462c      	mov	r4, r5
   8022c:	46c1      	mov	r9, r8
		float sum = 0;
		// Construct sum 
		for(int j = 0; j <= M; j++){
			sum += (xbuff[j]*b[j]);
   8022e:	4f1e      	ldr	r7, [pc, #120]	; (802a8 <smooth_values+0xa0>)
   80230:	4e1e      	ldr	r6, [pc, #120]	; (802ac <smooth_values+0xa4>)
		}
		outvalue = (uint16_t)sum;
   80232:	f8df a084 	ldr.w	sl, [pc, #132]	; 802b8 <smooth_values+0xb0>
   80236:	9502      	str	r5, [sp, #8]
   80238:	461d      	mov	r5, r3
   8023a:	f8cd 800c 	str.w	r8, [sp, #12]
   8023e:	e001      	b.n	80244 <smooth_values+0x3c>
			xbuff[k+1] = xbuff[k];
   80240:	9500      	str	r5, [sp, #0]
		xbuff[0] =(float)invalue;
   80242:	9d01      	ldr	r5, [sp, #4]
   80244:	f839 0f02 	ldrh.w	r0, [r9, #2]!
   80248:	4b19      	ldr	r3, [pc, #100]	; (802b0 <smooth_values+0xa8>)
   8024a:	4798      	blx	r3
   8024c:	9001      	str	r0, [sp, #4]
			sum += (xbuff[j]*b[j]);
   8024e:	4919      	ldr	r1, [pc, #100]	; (802b4 <smooth_values+0xac>)
   80250:	47b8      	blx	r7
   80252:	2100      	movs	r1, #0
   80254:	47b0      	blx	r6
   80256:	4680      	mov	r8, r0
   80258:	4916      	ldr	r1, [pc, #88]	; (802b4 <smooth_values+0xac>)
   8025a:	4628      	mov	r0, r5
   8025c:	47b8      	blx	r7
   8025e:	4641      	mov	r1, r8
   80260:	47b0      	blx	r6
   80262:	4680      	mov	r8, r0
   80264:	4913      	ldr	r1, [pc, #76]	; (802b4 <smooth_values+0xac>)
   80266:	9800      	ldr	r0, [sp, #0]
   80268:	47b8      	blx	r7
   8026a:	4641      	mov	r1, r8
   8026c:	47b0      	blx	r6
		outvalue = (uint16_t)sum;
   8026e:	47d0      	blx	sl
   80270:	f824 0f02 	strh.w	r0, [r4, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80274:	455c      	cmp	r4, fp
   80276:	d1e3      	bne.n	80240 <smooth_values+0x38>
   80278:	462a      	mov	r2, r5
   8027a:	9d02      	ldr	r5, [sp, #8]
   8027c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   80280:	4b08      	ldr	r3, [pc, #32]	; (802a4 <smooth_values+0x9c>)
   80282:	605a      	str	r2, [r3, #4]
   80284:	9a00      	ldr	r2, [sp, #0]
   80286:	609a      	str	r2, [r3, #8]
   80288:	9a01      	ldr	r2, [sp, #4]
   8028a:	601a      	str	r2, [r3, #0]
	//Copy values of temp_buff into old buffer
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
	{
		uint16_t *ip;       /* ip is a pointer to uint16_t */
		ip = &buffer[i];    /* sets ip to point to element i of buffer (contains address of buffer[i]) */
		*ip = temp_buff[i]; /* *ip points to content of buffer[i], this will change content of buffer[i] */
   8028c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
   80290:	f828 3f02 	strh.w	r3, [r8, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80294:	42ac      	cmp	r4, r5
   80296:	d1f9      	bne.n	8028c <smooth_values+0x84>
	}
}
   80298:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
   8029c:	b005      	add	sp, #20
   8029e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   802a2:	bf00      	nop
   802a4:	20070b00 	.word	0x20070b00
   802a8:	000810c9 	.word	0x000810c9
   802ac:	00080eb9 	.word	0x00080eb9
   802b0:	00081019 	.word	0x00081019
   802b4:	3eaaa64c 	.word	0x3eaaa64c
   802b8:	00081369 	.word	0x00081369

000802bc <ADC_Handler>:

void ADC_Handler(void){
   802bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Data transfer has been stopped (is complete) and RXBUFF status flag is set because ADC_RCR
	* and the ADC_RNCR have reached zero. Buffer of sample values is full.
	*/
	if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF) {
   802be:	4824      	ldr	r0, [pc, #144]	; (80350 <ADC_Handler+0x94>)
   802c0:	4b24      	ldr	r3, [pc, #144]	; (80354 <ADC_Handler+0x98>)
   802c2:	4798      	blx	r3
   802c4:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   802c8:	d100      	bne.n	802cc <ADC_Handler+0x10>
   802ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tc_stop(TC0, 0);  
   802cc:	2100      	movs	r1, #0
   802ce:	4822      	ldr	r0, [pc, #136]	; (80358 <ADC_Handler+0x9c>)
   802d0:	4b22      	ldr	r3, [pc, #136]	; (8035c <ADC_Handler+0xa0>)
   802d2:	4798      	blx	r3
   802d4:	4d22      	ldr	r5, [pc, #136]	; (80360 <ADC_Handler+0xa4>)
		
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   802d6:	2400      	movs	r4, #0
		{
			printf("Buffer values: %u, index: %u\n", adc_buffer_sample_values[i], i);
   802d8:	4f22      	ldr	r7, [pc, #136]	; (80364 <ADC_Handler+0xa8>)
   802da:	4e23      	ldr	r6, [pc, #140]	; (80368 <ADC_Handler+0xac>)
   802dc:	4622      	mov	r2, r4
   802de:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   802e2:	4638      	mov	r0, r7
   802e4:	47b0      	blx	r6
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   802e6:	3401      	adds	r4, #1
   802e8:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   802ec:	d1f6      	bne.n	802dc <ADC_Handler+0x20>
		}
		smooth_values(adc_buffer_sample_values);
   802ee:	4c1f      	ldr	r4, [pc, #124]	; (8036c <ADC_Handler+0xb0>)
   802f0:	4620      	mov	r0, r4
   802f2:	4b1f      	ldr	r3, [pc, #124]	; (80370 <ADC_Handler+0xb4>)
   802f4:	4798      	blx	r3
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
		{
			printf("Temp buffer: %u, index: %u\n", adc_buffer_sample_values[i], i);
		}
		*/
	    pio_enable_interrupt(PIOB, PIO_PB26); //re-enable edge-level detection 
   802f6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   802fa:	481e      	ldr	r0, [pc, #120]	; (80374 <ADC_Handler+0xb8>)
   802fc:	4b1e      	ldr	r3, [pc, #120]	; (80378 <ADC_Handler+0xbc>)
   802fe:	4798      	blx	r3
		/* Clear sample buffer */
		memset((void *)&adc_buffer_sample_values, 0, sizeof(adc_buffer_sample_values));
   80300:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80304:	2100      	movs	r1, #0
   80306:	4620      	mov	r0, r4
   80308:	4b1c      	ldr	r3, [pc, #112]	; (8037c <ADC_Handler+0xc0>)
   8030a:	4798      	blx	r3
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
   8030c:	4b10      	ldr	r3, [pc, #64]	; (80350 <ADC_Handler+0x94>)
   8030e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   80312:	b91b      	cbnz	r3, 8031c <ADC_Handler+0x60>
   80314:	4b0e      	ldr	r3, [pc, #56]	; (80350 <ADC_Handler+0x94>)
   80316:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   8031a:	b16b      	cbz	r3, 80338 <ADC_Handler+0x7c>
		if (p_adc->ADC_RNCR == 0)
   8031c:	4b0c      	ldr	r3, [pc, #48]	; (80350 <ADC_Handler+0x94>)
   8031e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   80322:	2b00      	cmp	r3, #0
   80324:	d1d1      	bne.n	802ca <ADC_Handler+0xe>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer; /* Receive Next Pointer Register */
   80326:	4b0a      	ldr	r3, [pc, #40]	; (80350 <ADC_Handler+0x94>)
   80328:	4a10      	ldr	r2, [pc, #64]	; (8036c <ADC_Handler+0xb0>)
   8032a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;               /* Receive Next Counter Register */
   8032e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80332:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		/* Read new buffer data. Necessary, otherwise buffer values are null/zero */
		adc_read_buffer(ADC, adc_buffer_sample_values, ADC_BUFFER_SIZE);
	}
}
   80336:	e7c8      	b.n	802ca <ADC_Handler+0xe>
		p_adc->ADC_RPR = (uint32_t) p_s_buffer; /* Receive Pointer Register */
   80338:	4b05      	ldr	r3, [pc, #20]	; (80350 <ADC_Handler+0x94>)
   8033a:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;               /* Receive Counter Register */
   8033e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80342:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN; /*ADC_PTCR = Transfer Control Register, RXTEN: Receiver Transfer Enable */
   80346:	2201      	movs	r2, #1
   80348:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   8034c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8034e:	bf00      	nop
   80350:	400c0000 	.word	0x400c0000
   80354:	000803c3 	.word	0x000803c3
   80358:	40080000 	.word	0x40080000
   8035c:	000803c7 	.word	0x000803c7
   80360:	20070c52 	.word	0x20070c52
   80364:	00084228 	.word	0x00084228
   80368:	000813f9 	.word	0x000813f9
   8036c:	20070c54 	.word	0x20070c54
   80370:	00080209 	.word	0x00080209
   80374:	400e1000 	.word	0x400e1000
   80378:	0008074f 	.word	0x0008074f
   8037c:	00081421 	.word	0x00081421

00080380 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80384:	b980      	cbnz	r0, 803a8 <_read+0x28>
   80386:	460c      	mov	r4, r1
   80388:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8038a:	2a00      	cmp	r2, #0
   8038c:	dd0f      	ble.n	803ae <_read+0x2e>
   8038e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80390:	4e08      	ldr	r6, [pc, #32]	; (803b4 <_read+0x34>)
   80392:	4d09      	ldr	r5, [pc, #36]	; (803b8 <_read+0x38>)
   80394:	6830      	ldr	r0, [r6, #0]
   80396:	4621      	mov	r1, r4
   80398:	682b      	ldr	r3, [r5, #0]
   8039a:	4798      	blx	r3
		ptr++;
   8039c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8039e:	42bc      	cmp	r4, r7
   803a0:	d1f8      	bne.n	80394 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   803a2:	4640      	mov	r0, r8
   803a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   803a8:	f04f 38ff 	mov.w	r8, #4294967295
   803ac:	e7f9      	b.n	803a2 <_read+0x22>
	for (; len > 0; --len) {
   803ae:	4680      	mov	r8, r0
   803b0:	e7f7      	b.n	803a2 <_read+0x22>
   803b2:	bf00      	nop
   803b4:	20071c5c 	.word	0x20071c5c
   803b8:	20071c54 	.word	0x20071c54

000803bc <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   803bc:	2302      	movs	r3, #2
   803be:	6003      	str	r3, [r0, #0]
   803c0:	4770      	bx	lr

000803c2 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   803c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   803c4:	4770      	bx	lr

000803c6 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   803c6:	0189      	lsls	r1, r1, #6
   803c8:	2302      	movs	r3, #2
   803ca:	5043      	str	r3, [r0, r1]
   803cc:	4770      	bx	lr

000803ce <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   803ce:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   803d2:	6a08      	ldr	r0, [r1, #32]
}
   803d4:	4770      	bx	lr

000803d6 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   803d6:	6943      	ldr	r3, [r0, #20]
   803d8:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   803dc:	bf1d      	ittte	ne
   803de:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   803e2:	61c1      	strne	r1, [r0, #28]
	return 0;
   803e4:	2000      	movne	r0, #0
		return 1;
   803e6:	2001      	moveq	r0, #1
}
   803e8:	4770      	bx	lr

000803ea <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   803ea:	6943      	ldr	r3, [r0, #20]
   803ec:	f013 0f01 	tst.w	r3, #1
   803f0:	d005      	beq.n	803fe <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   803f2:	6983      	ldr	r3, [r0, #24]
   803f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   803f8:	600b      	str	r3, [r1, #0]

	return 0;
   803fa:	2000      	movs	r0, #0
   803fc:	4770      	bx	lr
		return 1;
   803fe:	2001      	movs	r0, #1
}
   80400:	4770      	bx	lr
	...

00080404 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80404:	b500      	push	{lr}
   80406:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   80408:	2201      	movs	r2, #1
   8040a:	f10d 0107 	add.w	r1, sp, #7
   8040e:	4810      	ldr	r0, [pc, #64]	; (80450 <USART0_Handler+0x4c>)
   80410:	4b10      	ldr	r3, [pc, #64]	; (80454 <USART0_Handler+0x50>)
   80412:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80414:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80416:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8041a:	2200      	movs	r2, #0
   8041c:	4b0e      	ldr	r3, [pc, #56]	; (80458 <USART0_Handler+0x54>)
   8041e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80420:	4b0e      	ldr	r3, [pc, #56]	; (8045c <USART0_Handler+0x58>)
   80422:	781b      	ldrb	r3, [r3, #0]
   80424:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80428:	4a0d      	ldr	r2, [pc, #52]	; (80460 <USART0_Handler+0x5c>)
   8042a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   8042c:	2b9b      	cmp	r3, #155	; 0x9b
   8042e:	d00b      	beq.n	80448 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   80430:	3301      	adds	r3, #1
   80432:	4a0a      	ldr	r2, [pc, #40]	; (8045c <USART0_Handler+0x58>)
   80434:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   80436:	2201      	movs	r2, #1
   80438:	4b07      	ldr	r3, [pc, #28]	; (80458 <USART0_Handler+0x54>)
   8043a:	701a      	strb	r2, [r3, #0]
   8043c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80440:	b662      	cpsie	i
}
   80442:	b003      	add	sp, #12
   80444:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   80448:	2200      	movs	r2, #0
   8044a:	4b04      	ldr	r3, [pc, #16]	; (8045c <USART0_Handler+0x58>)
   8044c:	701a      	strb	r2, [r3, #0]
   8044e:	e7f2      	b.n	80436 <USART0_Handler+0x32>
   80450:	40098000 	.word	0x40098000
   80454:	000804b5 	.word	0x000804b5
   80458:	2007012c 	.word	0x2007012c
   8045c:	20070ba8 	.word	0x20070ba8
   80460:	20070b0c 	.word	0x20070b0c

00080464 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80464:	3801      	subs	r0, #1
   80466:	2802      	cmp	r0, #2
   80468:	d815      	bhi.n	80496 <_write+0x32>
{
   8046a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8046e:	460e      	mov	r6, r1
   80470:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80472:	b19a      	cbz	r2, 8049c <_write+0x38>
   80474:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80476:	f8df 8038 	ldr.w	r8, [pc, #56]	; 804b0 <_write+0x4c>
   8047a:	4f0c      	ldr	r7, [pc, #48]	; (804ac <_write+0x48>)
   8047c:	f8d8 0000 	ldr.w	r0, [r8]
   80480:	f815 1b01 	ldrb.w	r1, [r5], #1
   80484:	683b      	ldr	r3, [r7, #0]
   80486:	4798      	blx	r3
   80488:	2800      	cmp	r0, #0
   8048a:	db0a      	blt.n	804a2 <_write+0x3e>
   8048c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8048e:	3c01      	subs	r4, #1
   80490:	d1f4      	bne.n	8047c <_write+0x18>
   80492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80496:	f04f 30ff 	mov.w	r0, #4294967295
   8049a:	4770      	bx	lr
	for (; len != 0; --len) {
   8049c:	4610      	mov	r0, r2
   8049e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   804a2:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   804a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804aa:	bf00      	nop
   804ac:	20071c58 	.word	0x20071c58
   804b0:	20071c5c 	.word	0x20071c5c

000804b4 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   804b4:	2a00      	cmp	r2, #0
   804b6:	d051      	beq.n	8055c <usart_serial_read_packet+0xa8>
{
   804b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   804bc:	b083      	sub	sp, #12
   804be:	4605      	mov	r5, r0
   804c0:	460c      	mov	r4, r1
   804c2:	4692      	mov	sl, r2
   804c4:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   804c6:	4f26      	ldr	r7, [pc, #152]	; (80560 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   804c8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80574 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   804cc:	4e25      	ldr	r6, [pc, #148]	; (80564 <usart_serial_read_packet+0xb0>)
   804ce:	e01d      	b.n	8050c <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   804d0:	4621      	mov	r1, r4
   804d2:	4638      	mov	r0, r7
   804d4:	47c8      	blx	r9
   804d6:	2800      	cmp	r0, #0
   804d8:	d1fa      	bne.n	804d0 <usart_serial_read_packet+0x1c>
   804da:	e021      	b.n	80520 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   804dc:	469b      	mov	fp, r3
   804de:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80578 <usart_serial_read_packet+0xc4>
   804e2:	a901      	add	r1, sp, #4
   804e4:	4658      	mov	r0, fp
   804e6:	47c0      	blx	r8
   804e8:	2800      	cmp	r0, #0
   804ea:	d1fa      	bne.n	804e2 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   804ec:	9b01      	ldr	r3, [sp, #4]
   804ee:	7023      	strb	r3, [r4, #0]
   804f0:	e019      	b.n	80526 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   804f2:	469b      	mov	fp, r3
   804f4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80578 <usart_serial_read_packet+0xc4>
   804f8:	a901      	add	r1, sp, #4
   804fa:	4658      	mov	r0, fp
   804fc:	47c0      	blx	r8
   804fe:	2800      	cmp	r0, #0
   80500:	d1fa      	bne.n	804f8 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   80502:	9b01      	ldr	r3, [sp, #4]
   80504:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   80506:	3401      	adds	r4, #1
	while (len) {
   80508:	4554      	cmp	r4, sl
   8050a:	d023      	beq.n	80554 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   8050c:	2300      	movs	r3, #0
   8050e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80510:	42bd      	cmp	r5, r7
   80512:	d0dd      	beq.n	804d0 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   80514:	4b14      	ldr	r3, [pc, #80]	; (80568 <usart_serial_read_packet+0xb4>)
   80516:	429d      	cmp	r5, r3
   80518:	d0e0      	beq.n	804dc <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   8051a:	4b14      	ldr	r3, [pc, #80]	; (8056c <usart_serial_read_packet+0xb8>)
   8051c:	429d      	cmp	r5, r3
   8051e:	d0e8      	beq.n	804f2 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   80520:	4b13      	ldr	r3, [pc, #76]	; (80570 <usart_serial_read_packet+0xbc>)
   80522:	429d      	cmp	r5, r3
   80524:	d00b      	beq.n	8053e <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   80526:	42b5      	cmp	r5, r6
   80528:	d1ed      	bne.n	80506 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8052a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80578 <usart_serial_read_packet+0xc4>
   8052e:	a901      	add	r1, sp, #4
   80530:	4630      	mov	r0, r6
   80532:	47c0      	blx	r8
   80534:	2800      	cmp	r0, #0
   80536:	d1fa      	bne.n	8052e <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80538:	9b01      	ldr	r3, [sp, #4]
   8053a:	7023      	strb	r3, [r4, #0]
   8053c:	e7e3      	b.n	80506 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8053e:	469b      	mov	fp, r3
   80540:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80578 <usart_serial_read_packet+0xc4>
   80544:	a901      	add	r1, sp, #4
   80546:	4658      	mov	r0, fp
   80548:	47c0      	blx	r8
   8054a:	2800      	cmp	r0, #0
   8054c:	d1fa      	bne.n	80544 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   8054e:	9b01      	ldr	r3, [sp, #4]
   80550:	7023      	strb	r3, [r4, #0]
   80552:	e7d8      	b.n	80506 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80554:	2000      	movs	r0, #0
   80556:	b003      	add	sp, #12
   80558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8055c:	2000      	movs	r0, #0
   8055e:	4770      	bx	lr
   80560:	400e0800 	.word	0x400e0800
   80564:	400a4000 	.word	0x400a4000
   80568:	40098000 	.word	0x40098000
   8056c:	4009c000 	.word	0x4009c000
   80570:	400a0000 	.word	0x400a0000
   80574:	000805c3 	.word	0x000805c3
   80578:	000803eb 	.word	0x000803eb

0008057c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8057c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8057e:	23ac      	movs	r3, #172	; 0xac
   80580:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80582:	680b      	ldr	r3, [r1, #0]
   80584:	684a      	ldr	r2, [r1, #4]
   80586:	fbb3 f3f2 	udiv	r3, r3, r2
   8058a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8058c:	1e5c      	subs	r4, r3, #1
   8058e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80592:	4294      	cmp	r4, r2
   80594:	d80b      	bhi.n	805ae <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80596:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80598:	688b      	ldr	r3, [r1, #8]
   8059a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8059c:	f240 2302 	movw	r3, #514	; 0x202
   805a0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   805a4:	2350      	movs	r3, #80	; 0x50
   805a6:	6003      	str	r3, [r0, #0]

	return 0;
   805a8:	2000      	movs	r0, #0
}
   805aa:	bc10      	pop	{r4}
   805ac:	4770      	bx	lr
		return 1;
   805ae:	2001      	movs	r0, #1
   805b0:	e7fb      	b.n	805aa <uart_init+0x2e>

000805b2 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   805b2:	6943      	ldr	r3, [r0, #20]
   805b4:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   805b8:	bf1a      	itte	ne
   805ba:	61c1      	strne	r1, [r0, #28]
	return 0;
   805bc:	2000      	movne	r0, #0
		return 1;
   805be:	2001      	moveq	r0, #1
}
   805c0:	4770      	bx	lr

000805c2 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   805c2:	6943      	ldr	r3, [r0, #20]
   805c4:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   805c8:	bf1d      	ittte	ne
   805ca:	6983      	ldrne	r3, [r0, #24]
   805cc:	700b      	strbne	r3, [r1, #0]
	return 0;
   805ce:	2000      	movne	r0, #0
		return 1;
   805d0:	2001      	moveq	r0, #1
}
   805d2:	4770      	bx	lr

000805d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   805d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   805d6:	480e      	ldr	r0, [pc, #56]	; (80610 <sysclk_init+0x3c>)
   805d8:	4b0e      	ldr	r3, [pc, #56]	; (80614 <sysclk_init+0x40>)
   805da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   805dc:	213e      	movs	r1, #62	; 0x3e
   805de:	2000      	movs	r0, #0
   805e0:	4b0d      	ldr	r3, [pc, #52]	; (80618 <sysclk_init+0x44>)
   805e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   805e4:	4c0d      	ldr	r4, [pc, #52]	; (8061c <sysclk_init+0x48>)
   805e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   805e8:	2800      	cmp	r0, #0
   805ea:	d0fc      	beq.n	805e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   805ec:	4b0c      	ldr	r3, [pc, #48]	; (80620 <sysclk_init+0x4c>)
   805ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   805f0:	4a0c      	ldr	r2, [pc, #48]	; (80624 <sysclk_init+0x50>)
   805f2:	4b0d      	ldr	r3, [pc, #52]	; (80628 <sysclk_init+0x54>)
   805f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   805f6:	4c0d      	ldr	r4, [pc, #52]	; (8062c <sysclk_init+0x58>)
   805f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   805fa:	2800      	cmp	r0, #0
   805fc:	d0fc      	beq.n	805f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   805fe:	2010      	movs	r0, #16
   80600:	4b0b      	ldr	r3, [pc, #44]	; (80630 <sysclk_init+0x5c>)
   80602:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80604:	4b0b      	ldr	r3, [pc, #44]	; (80634 <sysclk_init+0x60>)
   80606:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80608:	4801      	ldr	r0, [pc, #4]	; (80610 <sysclk_init+0x3c>)
   8060a:	4b02      	ldr	r3, [pc, #8]	; (80614 <sysclk_init+0x40>)
   8060c:	4798      	blx	r3
   8060e:	bd10      	pop	{r4, pc}
   80610:	0501bd00 	.word	0x0501bd00
   80614:	200700a5 	.word	0x200700a5
   80618:	000809cd 	.word	0x000809cd
   8061c:	00080a21 	.word	0x00080a21
   80620:	00080a31 	.word	0x00080a31
   80624:	200d3f01 	.word	0x200d3f01
   80628:	400e0600 	.word	0x400e0600
   8062c:	00080a41 	.word	0x00080a41
   80630:	00080969 	.word	0x00080969
   80634:	00080b41 	.word	0x00080b41

00080638 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80638:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8063a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8063e:	4b16      	ldr	r3, [pc, #88]	; (80698 <board_init+0x60>)
   80640:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80642:	200b      	movs	r0, #11
   80644:	4c15      	ldr	r4, [pc, #84]	; (8069c <board_init+0x64>)
   80646:	47a0      	blx	r4
   80648:	200c      	movs	r0, #12
   8064a:	47a0      	blx	r4
   8064c:	200d      	movs	r0, #13
   8064e:	47a0      	blx	r4
   80650:	200e      	movs	r0, #14
   80652:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80654:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80658:	203b      	movs	r0, #59	; 0x3b
   8065a:	4c11      	ldr	r4, [pc, #68]	; (806a0 <board_init+0x68>)
   8065c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8065e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80662:	2055      	movs	r0, #85	; 0x55
   80664:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80666:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8066a:	2056      	movs	r0, #86	; 0x56
   8066c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8066e:	490d      	ldr	r1, [pc, #52]	; (806a4 <board_init+0x6c>)
   80670:	2068      	movs	r0, #104	; 0x68
   80672:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80674:	490c      	ldr	r1, [pc, #48]	; (806a8 <board_init+0x70>)
   80676:	205c      	movs	r0, #92	; 0x5c
   80678:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8067a:	4a0c      	ldr	r2, [pc, #48]	; (806ac <board_init+0x74>)
   8067c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80680:	480b      	ldr	r0, [pc, #44]	; (806b0 <board_init+0x78>)
   80682:	4b0c      	ldr	r3, [pc, #48]	; (806b4 <board_init+0x7c>)
   80684:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80686:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8068a:	202b      	movs	r0, #43	; 0x2b
   8068c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8068e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80692:	202a      	movs	r0, #42	; 0x2a
   80694:	47a0      	blx	r4
   80696:	bd10      	pop	{r4, pc}
   80698:	400e1a50 	.word	0x400e1a50
   8069c:	00080a51 	.word	0x00080a51
   806a0:	0008075d 	.word	0x0008075d
   806a4:	28000079 	.word	0x28000079
   806a8:	28000001 	.word	0x28000001
   806ac:	08000001 	.word	0x08000001
   806b0:	400e0e00 	.word	0x400e0e00
   806b4:	0008082d 	.word	0x0008082d

000806b8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   806b8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   806ba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   806be:	d016      	beq.n	806ee <pio_set_peripheral+0x36>
   806c0:	d80b      	bhi.n	806da <pio_set_peripheral+0x22>
   806c2:	b149      	cbz	r1, 806d8 <pio_set_peripheral+0x20>
   806c4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   806c8:	d105      	bne.n	806d6 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   806ca:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   806cc:	6f01      	ldr	r1, [r0, #112]	; 0x70
   806ce:	400b      	ands	r3, r1
   806d0:	ea23 0302 	bic.w	r3, r3, r2
   806d4:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   806d6:	6042      	str	r2, [r0, #4]
   806d8:	4770      	bx	lr
	switch (ul_type) {
   806da:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   806de:	d0fb      	beq.n	806d8 <pio_set_peripheral+0x20>
   806e0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   806e4:	d0f8      	beq.n	806d8 <pio_set_peripheral+0x20>
   806e6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   806ea:	d1f4      	bne.n	806d6 <pio_set_peripheral+0x1e>
   806ec:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   806ee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   806f0:	4313      	orrs	r3, r2
   806f2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   806f4:	e7ef      	b.n	806d6 <pio_set_peripheral+0x1e>

000806f6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   806f6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   806f8:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   806fc:	bf14      	ite	ne
   806fe:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80700:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80702:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80706:	bf14      	ite	ne
   80708:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8070a:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   8070c:	f012 0f02 	tst.w	r2, #2
   80710:	d107      	bne.n	80722 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80712:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80716:	bf18      	it	ne
   80718:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   8071c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8071e:	6001      	str	r1, [r0, #0]
   80720:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80722:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80726:	e7f9      	b.n	8071c <pio_set_input+0x26>

00080728 <pio_set_output>:
{
   80728:	b410      	push	{r4}
   8072a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   8072c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8072e:	b944      	cbnz	r4, 80742 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80730:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80732:	b143      	cbz	r3, 80746 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80734:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80736:	b942      	cbnz	r2, 8074a <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80738:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8073a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8073c:	6001      	str	r1, [r0, #0]
}
   8073e:	bc10      	pop	{r4}
   80740:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80742:	6641      	str	r1, [r0, #100]	; 0x64
   80744:	e7f5      	b.n	80732 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80746:	6541      	str	r1, [r0, #84]	; 0x54
   80748:	e7f5      	b.n	80736 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8074a:	6301      	str	r1, [r0, #48]	; 0x30
   8074c:	e7f5      	b.n	8073a <pio_set_output+0x12>

0008074e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   8074e:	6401      	str	r1, [r0, #64]	; 0x40
   80750:	4770      	bx	lr

00080752 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80752:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80754:	4770      	bx	lr

00080756 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80756:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80758:	4770      	bx	lr
	...

0008075c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8075c:	b570      	push	{r4, r5, r6, lr}
   8075e:	b082      	sub	sp, #8
   80760:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80762:	0943      	lsrs	r3, r0, #5
   80764:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80768:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8076c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8076e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80772:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80776:	d031      	beq.n	807dc <pio_configure_pin+0x80>
   80778:	d816      	bhi.n	807a8 <pio_configure_pin+0x4c>
   8077a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8077e:	d01b      	beq.n	807b8 <pio_configure_pin+0x5c>
   80780:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80784:	d116      	bne.n	807b4 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80786:	f000 001f 	and.w	r0, r0, #31
   8078a:	2601      	movs	r6, #1
   8078c:	4086      	lsls	r6, r0
   8078e:	4632      	mov	r2, r6
   80790:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80794:	4620      	mov	r0, r4
   80796:	4b22      	ldr	r3, [pc, #136]	; (80820 <pio_configure_pin+0xc4>)
   80798:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8079a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8079e:	bf14      	ite	ne
   807a0:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807a2:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   807a4:	2001      	movs	r0, #1
   807a6:	e017      	b.n	807d8 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   807a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   807ac:	d021      	beq.n	807f2 <pio_configure_pin+0x96>
   807ae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   807b2:	d01e      	beq.n	807f2 <pio_configure_pin+0x96>
		return 0;
   807b4:	2000      	movs	r0, #0
   807b6:	e00f      	b.n	807d8 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   807b8:	f000 001f 	and.w	r0, r0, #31
   807bc:	2601      	movs	r6, #1
   807be:	4086      	lsls	r6, r0
   807c0:	4632      	mov	r2, r6
   807c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   807c6:	4620      	mov	r0, r4
   807c8:	4b15      	ldr	r3, [pc, #84]	; (80820 <pio_configure_pin+0xc4>)
   807ca:	4798      	blx	r3
	if (ul_pull_up_enable) {
   807cc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   807d0:	bf14      	ite	ne
   807d2:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807d4:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   807d6:	2001      	movs	r0, #1
}
   807d8:	b002      	add	sp, #8
   807da:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   807dc:	f000 011f 	and.w	r1, r0, #31
   807e0:	2601      	movs	r6, #1
   807e2:	462a      	mov	r2, r5
   807e4:	fa06 f101 	lsl.w	r1, r6, r1
   807e8:	4620      	mov	r0, r4
   807ea:	4b0e      	ldr	r3, [pc, #56]	; (80824 <pio_configure_pin+0xc8>)
   807ec:	4798      	blx	r3
	return 1;
   807ee:	4630      	mov	r0, r6
		break;
   807f0:	e7f2      	b.n	807d8 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   807f2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   807f6:	f000 011f 	and.w	r1, r0, #31
   807fa:	2601      	movs	r6, #1
   807fc:	ea05 0306 	and.w	r3, r5, r6
   80800:	9300      	str	r3, [sp, #0]
   80802:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80806:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8080a:	bf14      	ite	ne
   8080c:	2200      	movne	r2, #0
   8080e:	2201      	moveq	r2, #1
   80810:	fa06 f101 	lsl.w	r1, r6, r1
   80814:	4620      	mov	r0, r4
   80816:	4c04      	ldr	r4, [pc, #16]	; (80828 <pio_configure_pin+0xcc>)
   80818:	47a0      	blx	r4
	return 1;
   8081a:	4630      	mov	r0, r6
		break;
   8081c:	e7dc      	b.n	807d8 <pio_configure_pin+0x7c>
   8081e:	bf00      	nop
   80820:	000806b9 	.word	0x000806b9
   80824:	000806f7 	.word	0x000806f7
   80828:	00080729 	.word	0x00080729

0008082c <pio_configure_pin_group>:
{
   8082c:	b570      	push	{r4, r5, r6, lr}
   8082e:	b082      	sub	sp, #8
   80830:	4605      	mov	r5, r0
   80832:	460e      	mov	r6, r1
   80834:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80836:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8083a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8083e:	d027      	beq.n	80890 <pio_configure_pin_group+0x64>
   80840:	d811      	bhi.n	80866 <pio_configure_pin_group+0x3a>
   80842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80846:	d016      	beq.n	80876 <pio_configure_pin_group+0x4a>
   80848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8084c:	d111      	bne.n	80872 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8084e:	460a      	mov	r2, r1
   80850:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80854:	4b19      	ldr	r3, [pc, #100]	; (808bc <pio_configure_pin_group+0x90>)
   80856:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80858:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8085c:	bf14      	ite	ne
   8085e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80860:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80862:	2001      	movs	r0, #1
   80864:	e012      	b.n	8088c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80866:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8086a:	d015      	beq.n	80898 <pio_configure_pin_group+0x6c>
   8086c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80870:	d012      	beq.n	80898 <pio_configure_pin_group+0x6c>
		return 0;
   80872:	2000      	movs	r0, #0
   80874:	e00a      	b.n	8088c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80876:	460a      	mov	r2, r1
   80878:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8087c:	4b0f      	ldr	r3, [pc, #60]	; (808bc <pio_configure_pin_group+0x90>)
   8087e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80880:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80884:	bf14      	ite	ne
   80886:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80888:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8088a:	2001      	movs	r0, #1
}
   8088c:	b002      	add	sp, #8
   8088e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80890:	4b0b      	ldr	r3, [pc, #44]	; (808c0 <pio_configure_pin_group+0x94>)
   80892:	4798      	blx	r3
	return 1;
   80894:	2001      	movs	r0, #1
		break;
   80896:	e7f9      	b.n	8088c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80898:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8089c:	f004 0301 	and.w	r3, r4, #1
   808a0:	9300      	str	r3, [sp, #0]
   808a2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   808a6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   808aa:	bf14      	ite	ne
   808ac:	2200      	movne	r2, #0
   808ae:	2201      	moveq	r2, #1
   808b0:	4631      	mov	r1, r6
   808b2:	4628      	mov	r0, r5
   808b4:	4c03      	ldr	r4, [pc, #12]	; (808c4 <pio_configure_pin_group+0x98>)
   808b6:	47a0      	blx	r4
	return 1;
   808b8:	2001      	movs	r0, #1
		break;
   808ba:	e7e7      	b.n	8088c <pio_configure_pin_group+0x60>
   808bc:	000806b9 	.word	0x000806b9
   808c0:	000806f7 	.word	0x000806f7
   808c4:	00080729 	.word	0x00080729

000808c8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   808c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   808cc:	4604      	mov	r4, r0
   808ce:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   808d0:	4b0e      	ldr	r3, [pc, #56]	; (8090c <pio_handler_process+0x44>)
   808d2:	4798      	blx	r3
   808d4:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   808d6:	4620      	mov	r0, r4
   808d8:	4b0d      	ldr	r3, [pc, #52]	; (80910 <pio_handler_process+0x48>)
   808da:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   808dc:	4005      	ands	r5, r0
   808de:	d013      	beq.n	80908 <pio_handler_process+0x40>
   808e0:	4c0c      	ldr	r4, [pc, #48]	; (80914 <pio_handler_process+0x4c>)
   808e2:	f104 0660 	add.w	r6, r4, #96	; 0x60
   808e6:	e003      	b.n	808f0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   808e8:	42b4      	cmp	r4, r6
   808ea:	d00d      	beq.n	80908 <pio_handler_process+0x40>
   808ec:	3410      	adds	r4, #16
		while (status != 0) {
   808ee:	b15d      	cbz	r5, 80908 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   808f0:	6820      	ldr	r0, [r4, #0]
   808f2:	4540      	cmp	r0, r8
   808f4:	d1f8      	bne.n	808e8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   808f6:	6861      	ldr	r1, [r4, #4]
   808f8:	4229      	tst	r1, r5
   808fa:	d0f5      	beq.n	808e8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   808fc:	68e3      	ldr	r3, [r4, #12]
   808fe:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80900:	6863      	ldr	r3, [r4, #4]
   80902:	ea25 0503 	bic.w	r5, r5, r3
   80906:	e7ef      	b.n	808e8 <pio_handler_process+0x20>
   80908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8090c:	00080753 	.word	0x00080753
   80910:	00080757 	.word	0x00080757
   80914:	20070bac 	.word	0x20070bac

00080918 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80918:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8091a:	210b      	movs	r1, #11
   8091c:	4801      	ldr	r0, [pc, #4]	; (80924 <PIOA_Handler+0xc>)
   8091e:	4b02      	ldr	r3, [pc, #8]	; (80928 <PIOA_Handler+0x10>)
   80920:	4798      	blx	r3
   80922:	bd08      	pop	{r3, pc}
   80924:	400e0e00 	.word	0x400e0e00
   80928:	000808c9 	.word	0x000808c9

0008092c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8092c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8092e:	210c      	movs	r1, #12
   80930:	4801      	ldr	r0, [pc, #4]	; (80938 <PIOB_Handler+0xc>)
   80932:	4b02      	ldr	r3, [pc, #8]	; (8093c <PIOB_Handler+0x10>)
   80934:	4798      	blx	r3
   80936:	bd08      	pop	{r3, pc}
   80938:	400e1000 	.word	0x400e1000
   8093c:	000808c9 	.word	0x000808c9

00080940 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80940:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80942:	210d      	movs	r1, #13
   80944:	4801      	ldr	r0, [pc, #4]	; (8094c <PIOC_Handler+0xc>)
   80946:	4b02      	ldr	r3, [pc, #8]	; (80950 <PIOC_Handler+0x10>)
   80948:	4798      	blx	r3
   8094a:	bd08      	pop	{r3, pc}
   8094c:	400e1200 	.word	0x400e1200
   80950:	000808c9 	.word	0x000808c9

00080954 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80954:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80956:	210e      	movs	r1, #14
   80958:	4801      	ldr	r0, [pc, #4]	; (80960 <PIOD_Handler+0xc>)
   8095a:	4b02      	ldr	r3, [pc, #8]	; (80964 <PIOD_Handler+0x10>)
   8095c:	4798      	blx	r3
   8095e:	bd08      	pop	{r3, pc}
   80960:	400e1400 	.word	0x400e1400
   80964:	000808c9 	.word	0x000808c9

00080968 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80968:	4a17      	ldr	r2, [pc, #92]	; (809c8 <pmc_switch_mck_to_pllack+0x60>)
   8096a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8096c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80970:	4318      	orrs	r0, r3
   80972:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80974:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80976:	f013 0f08 	tst.w	r3, #8
   8097a:	d10a      	bne.n	80992 <pmc_switch_mck_to_pllack+0x2a>
   8097c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80980:	4911      	ldr	r1, [pc, #68]	; (809c8 <pmc_switch_mck_to_pllack+0x60>)
   80982:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80984:	f012 0f08 	tst.w	r2, #8
   80988:	d103      	bne.n	80992 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8098a:	3b01      	subs	r3, #1
   8098c:	d1f9      	bne.n	80982 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8098e:	2001      	movs	r0, #1
   80990:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80992:	4a0d      	ldr	r2, [pc, #52]	; (809c8 <pmc_switch_mck_to_pllack+0x60>)
   80994:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80996:	f023 0303 	bic.w	r3, r3, #3
   8099a:	f043 0302 	orr.w	r3, r3, #2
   8099e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   809a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   809a2:	f013 0f08 	tst.w	r3, #8
   809a6:	d10a      	bne.n	809be <pmc_switch_mck_to_pllack+0x56>
   809a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   809ac:	4906      	ldr	r1, [pc, #24]	; (809c8 <pmc_switch_mck_to_pllack+0x60>)
   809ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   809b0:	f012 0f08 	tst.w	r2, #8
   809b4:	d105      	bne.n	809c2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   809b6:	3b01      	subs	r3, #1
   809b8:	d1f9      	bne.n	809ae <pmc_switch_mck_to_pllack+0x46>
			return 1;
   809ba:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   809bc:	4770      	bx	lr
	return 0;
   809be:	2000      	movs	r0, #0
   809c0:	4770      	bx	lr
   809c2:	2000      	movs	r0, #0
   809c4:	4770      	bx	lr
   809c6:	bf00      	nop
   809c8:	400e0600 	.word	0x400e0600

000809cc <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   809cc:	b9c8      	cbnz	r0, 80a02 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809ce:	4a11      	ldr	r2, [pc, #68]	; (80a14 <pmc_switch_mainck_to_xtal+0x48>)
   809d0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   809d2:	0209      	lsls	r1, r1, #8
   809d4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   809d6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   809da:	f023 0303 	bic.w	r3, r3, #3
   809de:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   809e2:	f043 0301 	orr.w	r3, r3, #1
   809e6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809e8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   809ea:	6e93      	ldr	r3, [r2, #104]	; 0x68
   809ec:	f013 0f01 	tst.w	r3, #1
   809f0:	d0fb      	beq.n	809ea <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   809f2:	4a08      	ldr	r2, [pc, #32]	; (80a14 <pmc_switch_mainck_to_xtal+0x48>)
   809f4:	6a13      	ldr	r3, [r2, #32]
   809f6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   809fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   809fe:	6213      	str	r3, [r2, #32]
   80a00:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80a02:	4904      	ldr	r1, [pc, #16]	; (80a14 <pmc_switch_mainck_to_xtal+0x48>)
   80a04:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80a06:	4a04      	ldr	r2, [pc, #16]	; (80a18 <pmc_switch_mainck_to_xtal+0x4c>)
   80a08:	401a      	ands	r2, r3
   80a0a:	4b04      	ldr	r3, [pc, #16]	; (80a1c <pmc_switch_mainck_to_xtal+0x50>)
   80a0c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80a0e:	620b      	str	r3, [r1, #32]
   80a10:	4770      	bx	lr
   80a12:	bf00      	nop
   80a14:	400e0600 	.word	0x400e0600
   80a18:	fec8fffc 	.word	0xfec8fffc
   80a1c:	01370002 	.word	0x01370002

00080a20 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80a20:	4b02      	ldr	r3, [pc, #8]	; (80a2c <pmc_osc_is_ready_mainck+0xc>)
   80a22:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a24:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80a28:	4770      	bx	lr
   80a2a:	bf00      	nop
   80a2c:	400e0600 	.word	0x400e0600

00080a30 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80a30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80a34:	4b01      	ldr	r3, [pc, #4]	; (80a3c <pmc_disable_pllack+0xc>)
   80a36:	629a      	str	r2, [r3, #40]	; 0x28
   80a38:	4770      	bx	lr
   80a3a:	bf00      	nop
   80a3c:	400e0600 	.word	0x400e0600

00080a40 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80a40:	4b02      	ldr	r3, [pc, #8]	; (80a4c <pmc_is_locked_pllack+0xc>)
   80a42:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a44:	f000 0002 	and.w	r0, r0, #2
   80a48:	4770      	bx	lr
   80a4a:	bf00      	nop
   80a4c:	400e0600 	.word	0x400e0600

00080a50 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80a50:	282c      	cmp	r0, #44	; 0x2c
   80a52:	d81e      	bhi.n	80a92 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80a54:	281f      	cmp	r0, #31
   80a56:	d80c      	bhi.n	80a72 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80a58:	4b11      	ldr	r3, [pc, #68]	; (80aa0 <pmc_enable_periph_clk+0x50>)
   80a5a:	699a      	ldr	r2, [r3, #24]
   80a5c:	2301      	movs	r3, #1
   80a5e:	4083      	lsls	r3, r0
   80a60:	4393      	bics	r3, r2
   80a62:	d018      	beq.n	80a96 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80a64:	2301      	movs	r3, #1
   80a66:	fa03 f000 	lsl.w	r0, r3, r0
   80a6a:	4b0d      	ldr	r3, [pc, #52]	; (80aa0 <pmc_enable_periph_clk+0x50>)
   80a6c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80a6e:	2000      	movs	r0, #0
   80a70:	4770      	bx	lr
		ul_id -= 32;
   80a72:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80a74:	4b0a      	ldr	r3, [pc, #40]	; (80aa0 <pmc_enable_periph_clk+0x50>)
   80a76:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80a7a:	2301      	movs	r3, #1
   80a7c:	4083      	lsls	r3, r0
   80a7e:	4393      	bics	r3, r2
   80a80:	d00b      	beq.n	80a9a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80a82:	2301      	movs	r3, #1
   80a84:	fa03 f000 	lsl.w	r0, r3, r0
   80a88:	4b05      	ldr	r3, [pc, #20]	; (80aa0 <pmc_enable_periph_clk+0x50>)
   80a8a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80a8e:	2000      	movs	r0, #0
   80a90:	4770      	bx	lr
		return 1;
   80a92:	2001      	movs	r0, #1
   80a94:	4770      	bx	lr
	return 0;
   80a96:	2000      	movs	r0, #0
   80a98:	4770      	bx	lr
   80a9a:	2000      	movs	r0, #0
}
   80a9c:	4770      	bx	lr
   80a9e:	bf00      	nop
   80aa0:	400e0600 	.word	0x400e0600

00080aa4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80aa4:	e7fe      	b.n	80aa4 <Dummy_Handler>
	...

00080aa8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80aa8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80aaa:	4b1c      	ldr	r3, [pc, #112]	; (80b1c <Reset_Handler+0x74>)
   80aac:	4a1c      	ldr	r2, [pc, #112]	; (80b20 <Reset_Handler+0x78>)
   80aae:	429a      	cmp	r2, r3
   80ab0:	d010      	beq.n	80ad4 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80ab2:	4b1c      	ldr	r3, [pc, #112]	; (80b24 <Reset_Handler+0x7c>)
   80ab4:	4a19      	ldr	r2, [pc, #100]	; (80b1c <Reset_Handler+0x74>)
   80ab6:	429a      	cmp	r2, r3
   80ab8:	d20c      	bcs.n	80ad4 <Reset_Handler+0x2c>
   80aba:	3b01      	subs	r3, #1
   80abc:	1a9b      	subs	r3, r3, r2
   80abe:	f023 0303 	bic.w	r3, r3, #3
   80ac2:	3304      	adds	r3, #4
   80ac4:	4413      	add	r3, r2
   80ac6:	4916      	ldr	r1, [pc, #88]	; (80b20 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80ac8:	f851 0b04 	ldr.w	r0, [r1], #4
   80acc:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80ad0:	429a      	cmp	r2, r3
   80ad2:	d1f9      	bne.n	80ac8 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ad4:	4b14      	ldr	r3, [pc, #80]	; (80b28 <Reset_Handler+0x80>)
   80ad6:	4a15      	ldr	r2, [pc, #84]	; (80b2c <Reset_Handler+0x84>)
   80ad8:	429a      	cmp	r2, r3
   80ada:	d20a      	bcs.n	80af2 <Reset_Handler+0x4a>
   80adc:	3b01      	subs	r3, #1
   80ade:	1a9b      	subs	r3, r3, r2
   80ae0:	f023 0303 	bic.w	r3, r3, #3
   80ae4:	3304      	adds	r3, #4
   80ae6:	4413      	add	r3, r2
		*pDest++ = 0;
   80ae8:	2100      	movs	r1, #0
   80aea:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80aee:	4293      	cmp	r3, r2
   80af0:	d1fb      	bne.n	80aea <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80af2:	4b0f      	ldr	r3, [pc, #60]	; (80b30 <Reset_Handler+0x88>)
   80af4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80af8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80afc:	490d      	ldr	r1, [pc, #52]	; (80b34 <Reset_Handler+0x8c>)
   80afe:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80b00:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80b04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80b08:	d203      	bcs.n	80b12 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80b0a:	688b      	ldr	r3, [r1, #8]
   80b0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80b10:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80b12:	4b09      	ldr	r3, [pc, #36]	; (80b38 <Reset_Handler+0x90>)
   80b14:	4798      	blx	r3

	/* Branch to main function */
	main();
   80b16:	4b09      	ldr	r3, [pc, #36]	; (80b3c <Reset_Handler+0x94>)
   80b18:	4798      	blx	r3
   80b1a:	e7fe      	b.n	80b1a <Reset_Handler+0x72>
   80b1c:	20070000 	.word	0x20070000
   80b20:	00084418 	.word	0x00084418
   80b24:	20070ae0 	.word	0x20070ae0
   80b28:	20071c88 	.word	0x20071c88
   80b2c:	20070ae0 	.word	0x20070ae0
   80b30:	00080000 	.word	0x00080000
   80b34:	e000ed00 	.word	0xe000ed00
   80b38:	000813a9 	.word	0x000813a9
   80b3c:	00080df1 	.word	0x00080df1

00080b40 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80b40:	4b3d      	ldr	r3, [pc, #244]	; (80c38 <SystemCoreClockUpdate+0xf8>)
   80b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b44:	f003 0303 	and.w	r3, r3, #3
   80b48:	2b03      	cmp	r3, #3
   80b4a:	d80e      	bhi.n	80b6a <SystemCoreClockUpdate+0x2a>
   80b4c:	e8df f003 	tbb	[pc, r3]
   80b50:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80b54:	4b39      	ldr	r3, [pc, #228]	; (80c3c <SystemCoreClockUpdate+0xfc>)
   80b56:	695b      	ldr	r3, [r3, #20]
   80b58:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80b5c:	bf14      	ite	ne
   80b5e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80b62:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80b66:	4b36      	ldr	r3, [pc, #216]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80b68:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80b6a:	4b33      	ldr	r3, [pc, #204]	; (80c38 <SystemCoreClockUpdate+0xf8>)
   80b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b72:	2b70      	cmp	r3, #112	; 0x70
   80b74:	d057      	beq.n	80c26 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80b76:	4b30      	ldr	r3, [pc, #192]	; (80c38 <SystemCoreClockUpdate+0xf8>)
   80b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b7a:	4931      	ldr	r1, [pc, #196]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80b7c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80b80:	680b      	ldr	r3, [r1, #0]
   80b82:	40d3      	lsrs	r3, r2
   80b84:	600b      	str	r3, [r1, #0]
   80b86:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b88:	4b2b      	ldr	r3, [pc, #172]	; (80c38 <SystemCoreClockUpdate+0xf8>)
   80b8a:	6a1b      	ldr	r3, [r3, #32]
   80b8c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b90:	d003      	beq.n	80b9a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b92:	4a2c      	ldr	r2, [pc, #176]	; (80c44 <SystemCoreClockUpdate+0x104>)
   80b94:	4b2a      	ldr	r3, [pc, #168]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80b96:	601a      	str	r2, [r3, #0]
   80b98:	e7e7      	b.n	80b6a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b9a:	4a2b      	ldr	r2, [pc, #172]	; (80c48 <SystemCoreClockUpdate+0x108>)
   80b9c:	4b28      	ldr	r3, [pc, #160]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80b9e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ba0:	4b25      	ldr	r3, [pc, #148]	; (80c38 <SystemCoreClockUpdate+0xf8>)
   80ba2:	6a1b      	ldr	r3, [r3, #32]
   80ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ba8:	2b10      	cmp	r3, #16
   80baa:	d005      	beq.n	80bb8 <SystemCoreClockUpdate+0x78>
   80bac:	2b20      	cmp	r3, #32
   80bae:	d1dc      	bne.n	80b6a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80bb0:	4a24      	ldr	r2, [pc, #144]	; (80c44 <SystemCoreClockUpdate+0x104>)
   80bb2:	4b23      	ldr	r3, [pc, #140]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80bb4:	601a      	str	r2, [r3, #0]
				break;
   80bb6:	e7d8      	b.n	80b6a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80bb8:	4a24      	ldr	r2, [pc, #144]	; (80c4c <SystemCoreClockUpdate+0x10c>)
   80bba:	4b21      	ldr	r3, [pc, #132]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80bbc:	601a      	str	r2, [r3, #0]
				break;
   80bbe:	e7d4      	b.n	80b6a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80bc0:	4b1d      	ldr	r3, [pc, #116]	; (80c38 <SystemCoreClockUpdate+0xf8>)
   80bc2:	6a1b      	ldr	r3, [r3, #32]
   80bc4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80bc8:	d00c      	beq.n	80be4 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80bca:	4a1e      	ldr	r2, [pc, #120]	; (80c44 <SystemCoreClockUpdate+0x104>)
   80bcc:	4b1c      	ldr	r3, [pc, #112]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80bce:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80bd0:	4b19      	ldr	r3, [pc, #100]	; (80c38 <SystemCoreClockUpdate+0xf8>)
   80bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80bd4:	f003 0303 	and.w	r3, r3, #3
   80bd8:	2b02      	cmp	r3, #2
   80bda:	d016      	beq.n	80c0a <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80bdc:	4a1c      	ldr	r2, [pc, #112]	; (80c50 <SystemCoreClockUpdate+0x110>)
   80bde:	4b18      	ldr	r3, [pc, #96]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80be0:	601a      	str	r2, [r3, #0]
   80be2:	e7c2      	b.n	80b6a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80be4:	4a18      	ldr	r2, [pc, #96]	; (80c48 <SystemCoreClockUpdate+0x108>)
   80be6:	4b16      	ldr	r3, [pc, #88]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80be8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80bea:	4b13      	ldr	r3, [pc, #76]	; (80c38 <SystemCoreClockUpdate+0xf8>)
   80bec:	6a1b      	ldr	r3, [r3, #32]
   80bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80bf2:	2b10      	cmp	r3, #16
   80bf4:	d005      	beq.n	80c02 <SystemCoreClockUpdate+0xc2>
   80bf6:	2b20      	cmp	r3, #32
   80bf8:	d1ea      	bne.n	80bd0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80bfa:	4a12      	ldr	r2, [pc, #72]	; (80c44 <SystemCoreClockUpdate+0x104>)
   80bfc:	4b10      	ldr	r3, [pc, #64]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80bfe:	601a      	str	r2, [r3, #0]
				break;
   80c00:	e7e6      	b.n	80bd0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80c02:	4a12      	ldr	r2, [pc, #72]	; (80c4c <SystemCoreClockUpdate+0x10c>)
   80c04:	4b0e      	ldr	r3, [pc, #56]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80c06:	601a      	str	r2, [r3, #0]
				break;
   80c08:	e7e2      	b.n	80bd0 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80c0a:	4a0b      	ldr	r2, [pc, #44]	; (80c38 <SystemCoreClockUpdate+0xf8>)
   80c0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80c0e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80c10:	480b      	ldr	r0, [pc, #44]	; (80c40 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80c12:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80c16:	6803      	ldr	r3, [r0, #0]
   80c18:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80c1c:	b2d2      	uxtb	r2, r2
   80c1e:	fbb3 f3f2 	udiv	r3, r3, r2
   80c22:	6003      	str	r3, [r0, #0]
   80c24:	e7a1      	b.n	80b6a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80c26:	4a06      	ldr	r2, [pc, #24]	; (80c40 <SystemCoreClockUpdate+0x100>)
   80c28:	6813      	ldr	r3, [r2, #0]
   80c2a:	490a      	ldr	r1, [pc, #40]	; (80c54 <SystemCoreClockUpdate+0x114>)
   80c2c:	fba1 1303 	umull	r1, r3, r1, r3
   80c30:	085b      	lsrs	r3, r3, #1
   80c32:	6013      	str	r3, [r2, #0]
   80c34:	4770      	bx	lr
   80c36:	bf00      	nop
   80c38:	400e0600 	.word	0x400e0600
   80c3c:	400e1a10 	.word	0x400e1a10
   80c40:	20070130 	.word	0x20070130
   80c44:	00b71b00 	.word	0x00b71b00
   80c48:	003d0900 	.word	0x003d0900
   80c4c:	007a1200 	.word	0x007a1200
   80c50:	0e4e1c00 	.word	0x0e4e1c00
   80c54:	aaaaaaab 	.word	0xaaaaaaab

00080c58 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80c58:	4b0a      	ldr	r3, [pc, #40]	; (80c84 <_sbrk+0x2c>)
   80c5a:	681b      	ldr	r3, [r3, #0]
   80c5c:	b153      	cbz	r3, 80c74 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80c5e:	4b09      	ldr	r3, [pc, #36]	; (80c84 <_sbrk+0x2c>)
   80c60:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80c62:	181a      	adds	r2, r3, r0
   80c64:	4908      	ldr	r1, [pc, #32]	; (80c88 <_sbrk+0x30>)
   80c66:	4291      	cmp	r1, r2
   80c68:	db08      	blt.n	80c7c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80c6a:	4610      	mov	r0, r2
   80c6c:	4a05      	ldr	r2, [pc, #20]	; (80c84 <_sbrk+0x2c>)
   80c6e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80c70:	4618      	mov	r0, r3
   80c72:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80c74:	4a05      	ldr	r2, [pc, #20]	; (80c8c <_sbrk+0x34>)
   80c76:	4b03      	ldr	r3, [pc, #12]	; (80c84 <_sbrk+0x2c>)
   80c78:	601a      	str	r2, [r3, #0]
   80c7a:	e7f0      	b.n	80c5e <_sbrk+0x6>
		return (caddr_t) -1;	
   80c7c:	f04f 30ff 	mov.w	r0, #4294967295
}
   80c80:	4770      	bx	lr
   80c82:	bf00      	nop
   80c84:	20070c1c 	.word	0x20070c1c
   80c88:	20087ffc 	.word	0x20087ffc
   80c8c:	20073c88 	.word	0x20073c88

00080c90 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80c90:	f04f 30ff 	mov.w	r0, #4294967295
   80c94:	4770      	bx	lr

00080c96 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80c9a:	604b      	str	r3, [r1, #4]

	return 0;
}
   80c9c:	2000      	movs	r0, #0
   80c9e:	4770      	bx	lr

00080ca0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80ca0:	2001      	movs	r0, #1
   80ca2:	4770      	bx	lr

00080ca4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80ca4:	2000      	movs	r0, #0
   80ca6:	4770      	bx	lr

00080ca8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   80caa:	b083      	sub	sp, #12
   80cac:	4604      	mov	r4, r0
   80cae:	460d      	mov	r5, r1
	uint32_t val = 0;
   80cb0:	2300      	movs	r3, #0
   80cb2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80cb4:	4b20      	ldr	r3, [pc, #128]	; (80d38 <usart_serial_getchar+0x90>)
   80cb6:	4298      	cmp	r0, r3
   80cb8:	d00d      	beq.n	80cd6 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80cba:	4b20      	ldr	r3, [pc, #128]	; (80d3c <usart_serial_getchar+0x94>)
   80cbc:	4298      	cmp	r0, r3
   80cbe:	d012      	beq.n	80ce6 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80cc0:	4b1f      	ldr	r3, [pc, #124]	; (80d40 <usart_serial_getchar+0x98>)
   80cc2:	4298      	cmp	r0, r3
   80cc4:	d019      	beq.n	80cfa <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80cc6:	4b1f      	ldr	r3, [pc, #124]	; (80d44 <usart_serial_getchar+0x9c>)
   80cc8:	429c      	cmp	r4, r3
   80cca:	d020      	beq.n	80d0e <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80ccc:	4b1e      	ldr	r3, [pc, #120]	; (80d48 <usart_serial_getchar+0xa0>)
   80cce:	429c      	cmp	r4, r3
   80cd0:	d027      	beq.n	80d22 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80cd2:	b003      	add	sp, #12
   80cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80cd6:	461f      	mov	r7, r3
   80cd8:	4e1c      	ldr	r6, [pc, #112]	; (80d4c <usart_serial_getchar+0xa4>)
   80cda:	4629      	mov	r1, r5
   80cdc:	4638      	mov	r0, r7
   80cde:	47b0      	blx	r6
   80ce0:	2800      	cmp	r0, #0
   80ce2:	d1fa      	bne.n	80cda <usart_serial_getchar+0x32>
   80ce4:	e7ef      	b.n	80cc6 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80ce6:	461f      	mov	r7, r3
   80ce8:	4e19      	ldr	r6, [pc, #100]	; (80d50 <usart_serial_getchar+0xa8>)
   80cea:	a901      	add	r1, sp, #4
   80cec:	4638      	mov	r0, r7
   80cee:	47b0      	blx	r6
   80cf0:	2800      	cmp	r0, #0
   80cf2:	d1fa      	bne.n	80cea <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80cf4:	9b01      	ldr	r3, [sp, #4]
   80cf6:	702b      	strb	r3, [r5, #0]
   80cf8:	e7e8      	b.n	80ccc <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80cfa:	461e      	mov	r6, r3
   80cfc:	4c14      	ldr	r4, [pc, #80]	; (80d50 <usart_serial_getchar+0xa8>)
   80cfe:	a901      	add	r1, sp, #4
   80d00:	4630      	mov	r0, r6
   80d02:	47a0      	blx	r4
   80d04:	2800      	cmp	r0, #0
   80d06:	d1fa      	bne.n	80cfe <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80d08:	9b01      	ldr	r3, [sp, #4]
   80d0a:	702b      	strb	r3, [r5, #0]
   80d0c:	e7e1      	b.n	80cd2 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80d0e:	461e      	mov	r6, r3
   80d10:	4c0f      	ldr	r4, [pc, #60]	; (80d50 <usart_serial_getchar+0xa8>)
   80d12:	a901      	add	r1, sp, #4
   80d14:	4630      	mov	r0, r6
   80d16:	47a0      	blx	r4
   80d18:	2800      	cmp	r0, #0
   80d1a:	d1fa      	bne.n	80d12 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80d1c:	9b01      	ldr	r3, [sp, #4]
   80d1e:	702b      	strb	r3, [r5, #0]
   80d20:	e7d7      	b.n	80cd2 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80d22:	461e      	mov	r6, r3
   80d24:	4c0a      	ldr	r4, [pc, #40]	; (80d50 <usart_serial_getchar+0xa8>)
   80d26:	a901      	add	r1, sp, #4
   80d28:	4630      	mov	r0, r6
   80d2a:	47a0      	blx	r4
   80d2c:	2800      	cmp	r0, #0
   80d2e:	d1fa      	bne.n	80d26 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80d30:	9b01      	ldr	r3, [sp, #4]
   80d32:	702b      	strb	r3, [r5, #0]
}
   80d34:	e7cd      	b.n	80cd2 <usart_serial_getchar+0x2a>
   80d36:	bf00      	nop
   80d38:	400e0800 	.word	0x400e0800
   80d3c:	40098000 	.word	0x40098000
   80d40:	4009c000 	.word	0x4009c000
   80d44:	400a0000 	.word	0x400a0000
   80d48:	400a4000 	.word	0x400a4000
   80d4c:	000805c3 	.word	0x000805c3
   80d50:	000803eb 	.word	0x000803eb

00080d54 <usart_serial_putchar>:
{
   80d54:	b570      	push	{r4, r5, r6, lr}
   80d56:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80d58:	4b1e      	ldr	r3, [pc, #120]	; (80dd4 <usart_serial_putchar+0x80>)
   80d5a:	4298      	cmp	r0, r3
   80d5c:	d00d      	beq.n	80d7a <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80d5e:	4b1e      	ldr	r3, [pc, #120]	; (80dd8 <usart_serial_putchar+0x84>)
   80d60:	4298      	cmp	r0, r3
   80d62:	d013      	beq.n	80d8c <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80d64:	4b1d      	ldr	r3, [pc, #116]	; (80ddc <usart_serial_putchar+0x88>)
   80d66:	4298      	cmp	r0, r3
   80d68:	d019      	beq.n	80d9e <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80d6a:	4b1d      	ldr	r3, [pc, #116]	; (80de0 <usart_serial_putchar+0x8c>)
   80d6c:	4298      	cmp	r0, r3
   80d6e:	d01f      	beq.n	80db0 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80d70:	4b1c      	ldr	r3, [pc, #112]	; (80de4 <usart_serial_putchar+0x90>)
   80d72:	4298      	cmp	r0, r3
   80d74:	d025      	beq.n	80dc2 <usart_serial_putchar+0x6e>
	return 0;
   80d76:	2000      	movs	r0, #0
}
   80d78:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80d7a:	461e      	mov	r6, r3
   80d7c:	4d1a      	ldr	r5, [pc, #104]	; (80de8 <usart_serial_putchar+0x94>)
   80d7e:	4621      	mov	r1, r4
   80d80:	4630      	mov	r0, r6
   80d82:	47a8      	blx	r5
   80d84:	2800      	cmp	r0, #0
   80d86:	d1fa      	bne.n	80d7e <usart_serial_putchar+0x2a>
		return 1;
   80d88:	2001      	movs	r0, #1
   80d8a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d8c:	461e      	mov	r6, r3
   80d8e:	4d17      	ldr	r5, [pc, #92]	; (80dec <usart_serial_putchar+0x98>)
   80d90:	4621      	mov	r1, r4
   80d92:	4630      	mov	r0, r6
   80d94:	47a8      	blx	r5
   80d96:	2800      	cmp	r0, #0
   80d98:	d1fa      	bne.n	80d90 <usart_serial_putchar+0x3c>
		return 1;
   80d9a:	2001      	movs	r0, #1
   80d9c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d9e:	461e      	mov	r6, r3
   80da0:	4d12      	ldr	r5, [pc, #72]	; (80dec <usart_serial_putchar+0x98>)
   80da2:	4621      	mov	r1, r4
   80da4:	4630      	mov	r0, r6
   80da6:	47a8      	blx	r5
   80da8:	2800      	cmp	r0, #0
   80daa:	d1fa      	bne.n	80da2 <usart_serial_putchar+0x4e>
		return 1;
   80dac:	2001      	movs	r0, #1
   80dae:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80db0:	461e      	mov	r6, r3
   80db2:	4d0e      	ldr	r5, [pc, #56]	; (80dec <usart_serial_putchar+0x98>)
   80db4:	4621      	mov	r1, r4
   80db6:	4630      	mov	r0, r6
   80db8:	47a8      	blx	r5
   80dba:	2800      	cmp	r0, #0
   80dbc:	d1fa      	bne.n	80db4 <usart_serial_putchar+0x60>
		return 1;
   80dbe:	2001      	movs	r0, #1
   80dc0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80dc2:	461e      	mov	r6, r3
   80dc4:	4d09      	ldr	r5, [pc, #36]	; (80dec <usart_serial_putchar+0x98>)
   80dc6:	4621      	mov	r1, r4
   80dc8:	4630      	mov	r0, r6
   80dca:	47a8      	blx	r5
   80dcc:	2800      	cmp	r0, #0
   80dce:	d1fa      	bne.n	80dc6 <usart_serial_putchar+0x72>
		return 1;
   80dd0:	2001      	movs	r0, #1
   80dd2:	bd70      	pop	{r4, r5, r6, pc}
   80dd4:	400e0800 	.word	0x400e0800
   80dd8:	40098000 	.word	0x40098000
   80ddc:	4009c000 	.word	0x4009c000
   80de0:	400a0000 	.word	0x400a0000
   80de4:	400a4000 	.word	0x400a4000
   80de8:	000805b3 	.word	0x000805b3
   80dec:	000803d7 	.word	0x000803d7

00080df0 <main>:
	printf("=============\n");
}


int main (void)
{
   80df0:	b500      	push	{lr}
   80df2:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   80df4:	4b1a      	ldr	r3, [pc, #104]	; (80e60 <main+0x70>)
   80df6:	4798      	blx	r3
	board_init();
   80df8:	4b1a      	ldr	r3, [pc, #104]	; (80e64 <main+0x74>)
   80dfa:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80dfc:	2008      	movs	r0, #8
   80dfe:	4d1a      	ldr	r5, [pc, #104]	; (80e68 <main+0x78>)
   80e00:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80e02:	4c1a      	ldr	r4, [pc, #104]	; (80e6c <main+0x7c>)
   80e04:	4b1a      	ldr	r3, [pc, #104]	; (80e70 <main+0x80>)
   80e06:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80e08:	4a1a      	ldr	r2, [pc, #104]	; (80e74 <main+0x84>)
   80e0a:	4b1b      	ldr	r3, [pc, #108]	; (80e78 <main+0x88>)
   80e0c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80e0e:	4a1b      	ldr	r2, [pc, #108]	; (80e7c <main+0x8c>)
   80e10:	4b1b      	ldr	r3, [pc, #108]	; (80e80 <main+0x90>)
   80e12:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80e14:	4b1b      	ldr	r3, [pc, #108]	; (80e84 <main+0x94>)
   80e16:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80e18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80e1c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80e22:	9303      	str	r3, [sp, #12]
   80e24:	2008      	movs	r0, #8
   80e26:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80e28:	a901      	add	r1, sp, #4
   80e2a:	4620      	mov	r0, r4
   80e2c:	4b16      	ldr	r3, [pc, #88]	; (80e88 <main+0x98>)
   80e2e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80e30:	4d16      	ldr	r5, [pc, #88]	; (80e8c <main+0x9c>)
   80e32:	682b      	ldr	r3, [r5, #0]
   80e34:	2100      	movs	r1, #0
   80e36:	6898      	ldr	r0, [r3, #8]
   80e38:	4c15      	ldr	r4, [pc, #84]	; (80e90 <main+0xa0>)
   80e3a:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80e3c:	682b      	ldr	r3, [r5, #0]
   80e3e:	2100      	movs	r1, #0
   80e40:	6858      	ldr	r0, [r3, #4]
   80e42:	47a0      	blx	r4
	printf("Console ready\n");
   80e44:	4813      	ldr	r0, [pc, #76]	; (80e94 <main+0xa4>)
   80e46:	4c14      	ldr	r4, [pc, #80]	; (80e98 <main+0xa8>)
   80e48:	47a0      	blx	r4
	printf("=============\n");
   80e4a:	4814      	ldr	r0, [pc, #80]	; (80e9c <main+0xac>)
   80e4c:	47a0      	blx	r4
	ioport_init();
	adc_setup();
	configure_tc();
	init_amplitude_trigger();
	*/
	TC1CH1_setup_and_kickoff();
   80e4e:	4b14      	ldr	r3, [pc, #80]	; (80ea0 <main+0xb0>)
   80e50:	4798      	blx	r3
	
	
	//do nothing in main()-loop
	while (1)
	{
		printf("Timer Counter value: %u\n", read_counter_value());
   80e52:	4e14      	ldr	r6, [pc, #80]	; (80ea4 <main+0xb4>)
   80e54:	4d14      	ldr	r5, [pc, #80]	; (80ea8 <main+0xb8>)
   80e56:	47b0      	blx	r6
   80e58:	4601      	mov	r1, r0
   80e5a:	4628      	mov	r0, r5
   80e5c:	47a0      	blx	r4
   80e5e:	e7fa      	b.n	80e56 <main+0x66>
   80e60:	000805d5 	.word	0x000805d5
   80e64:	00080639 	.word	0x00080639
   80e68:	00080a51 	.word	0x00080a51
   80e6c:	400e0800 	.word	0x400e0800
   80e70:	20071c5c 	.word	0x20071c5c
   80e74:	00080d55 	.word	0x00080d55
   80e78:	20071c58 	.word	0x20071c58
   80e7c:	00080ca9 	.word	0x00080ca9
   80e80:	20071c54 	.word	0x20071c54
   80e84:	0501bd00 	.word	0x0501bd00
   80e88:	0008057d 	.word	0x0008057d
   80e8c:	20070134 	.word	0x20070134
   80e90:	000814bd 	.word	0x000814bd
   80e94:	00084248 	.word	0x00084248
   80e98:	000813f9 	.word	0x000813f9
   80e9c:	00084258 	.word	0x00084258
   80ea0:	000801a1 	.word	0x000801a1
   80ea4:	0008018d 	.word	0x0008018d
   80ea8:	00084268 	.word	0x00084268

00080eac <__aeabi_frsub>:
   80eac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   80eb0:	e002      	b.n	80eb8 <__addsf3>
   80eb2:	bf00      	nop

00080eb4 <__aeabi_fsub>:
   80eb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00080eb8 <__addsf3>:
   80eb8:	0042      	lsls	r2, r0, #1
   80eba:	bf1f      	itttt	ne
   80ebc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   80ec0:	ea92 0f03 	teqne	r2, r3
   80ec4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   80ec8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80ecc:	d06a      	beq.n	80fa4 <__addsf3+0xec>
   80ece:	ea4f 6212 	mov.w	r2, r2, lsr #24
   80ed2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   80ed6:	bfc1      	itttt	gt
   80ed8:	18d2      	addgt	r2, r2, r3
   80eda:	4041      	eorgt	r1, r0
   80edc:	4048      	eorgt	r0, r1
   80ede:	4041      	eorgt	r1, r0
   80ee0:	bfb8      	it	lt
   80ee2:	425b      	neglt	r3, r3
   80ee4:	2b19      	cmp	r3, #25
   80ee6:	bf88      	it	hi
   80ee8:	4770      	bxhi	lr
   80eea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   80eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80ef2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80ef6:	bf18      	it	ne
   80ef8:	4240      	negne	r0, r0
   80efa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80efe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80f02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   80f06:	bf18      	it	ne
   80f08:	4249      	negne	r1, r1
   80f0a:	ea92 0f03 	teq	r2, r3
   80f0e:	d03f      	beq.n	80f90 <__addsf3+0xd8>
   80f10:	f1a2 0201 	sub.w	r2, r2, #1
   80f14:	fa41 fc03 	asr.w	ip, r1, r3
   80f18:	eb10 000c 	adds.w	r0, r0, ip
   80f1c:	f1c3 0320 	rsb	r3, r3, #32
   80f20:	fa01 f103 	lsl.w	r1, r1, r3
   80f24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80f28:	d502      	bpl.n	80f30 <__addsf3+0x78>
   80f2a:	4249      	negs	r1, r1
   80f2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   80f30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   80f34:	d313      	bcc.n	80f5e <__addsf3+0xa6>
   80f36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80f3a:	d306      	bcc.n	80f4a <__addsf3+0x92>
   80f3c:	0840      	lsrs	r0, r0, #1
   80f3e:	ea4f 0131 	mov.w	r1, r1, rrx
   80f42:	f102 0201 	add.w	r2, r2, #1
   80f46:	2afe      	cmp	r2, #254	; 0xfe
   80f48:	d251      	bcs.n	80fee <__addsf3+0x136>
   80f4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   80f4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80f52:	bf08      	it	eq
   80f54:	f020 0001 	biceq.w	r0, r0, #1
   80f58:	ea40 0003 	orr.w	r0, r0, r3
   80f5c:	4770      	bx	lr
   80f5e:	0049      	lsls	r1, r1, #1
   80f60:	eb40 0000 	adc.w	r0, r0, r0
   80f64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   80f68:	f1a2 0201 	sub.w	r2, r2, #1
   80f6c:	d1ed      	bne.n	80f4a <__addsf3+0x92>
   80f6e:	fab0 fc80 	clz	ip, r0
   80f72:	f1ac 0c08 	sub.w	ip, ip, #8
   80f76:	ebb2 020c 	subs.w	r2, r2, ip
   80f7a:	fa00 f00c 	lsl.w	r0, r0, ip
   80f7e:	bfaa      	itet	ge
   80f80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   80f84:	4252      	neglt	r2, r2
   80f86:	4318      	orrge	r0, r3
   80f88:	bfbc      	itt	lt
   80f8a:	40d0      	lsrlt	r0, r2
   80f8c:	4318      	orrlt	r0, r3
   80f8e:	4770      	bx	lr
   80f90:	f092 0f00 	teq	r2, #0
   80f94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   80f98:	bf06      	itte	eq
   80f9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   80f9e:	3201      	addeq	r2, #1
   80fa0:	3b01      	subne	r3, #1
   80fa2:	e7b5      	b.n	80f10 <__addsf3+0x58>
   80fa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   80fac:	bf18      	it	ne
   80fae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80fb2:	d021      	beq.n	80ff8 <__addsf3+0x140>
   80fb4:	ea92 0f03 	teq	r2, r3
   80fb8:	d004      	beq.n	80fc4 <__addsf3+0x10c>
   80fba:	f092 0f00 	teq	r2, #0
   80fbe:	bf08      	it	eq
   80fc0:	4608      	moveq	r0, r1
   80fc2:	4770      	bx	lr
   80fc4:	ea90 0f01 	teq	r0, r1
   80fc8:	bf1c      	itt	ne
   80fca:	2000      	movne	r0, #0
   80fcc:	4770      	bxne	lr
   80fce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   80fd2:	d104      	bne.n	80fde <__addsf3+0x126>
   80fd4:	0040      	lsls	r0, r0, #1
   80fd6:	bf28      	it	cs
   80fd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   80fdc:	4770      	bx	lr
   80fde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   80fe2:	bf3c      	itt	cc
   80fe4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   80fe8:	4770      	bxcc	lr
   80fea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80fee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   80ff2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80ff6:	4770      	bx	lr
   80ff8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   80ffc:	bf16      	itet	ne
   80ffe:	4608      	movne	r0, r1
   81000:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   81004:	4601      	movne	r1, r0
   81006:	0242      	lsls	r2, r0, #9
   81008:	bf06      	itte	eq
   8100a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8100e:	ea90 0f01 	teqeq	r0, r1
   81012:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   81016:	4770      	bx	lr

00081018 <__aeabi_ui2f>:
   81018:	f04f 0300 	mov.w	r3, #0
   8101c:	e004      	b.n	81028 <__aeabi_i2f+0x8>
   8101e:	bf00      	nop

00081020 <__aeabi_i2f>:
   81020:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   81024:	bf48      	it	mi
   81026:	4240      	negmi	r0, r0
   81028:	ea5f 0c00 	movs.w	ip, r0
   8102c:	bf08      	it	eq
   8102e:	4770      	bxeq	lr
   81030:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   81034:	4601      	mov	r1, r0
   81036:	f04f 0000 	mov.w	r0, #0
   8103a:	e01c      	b.n	81076 <__aeabi_l2f+0x2a>

0008103c <__aeabi_ul2f>:
   8103c:	ea50 0201 	orrs.w	r2, r0, r1
   81040:	bf08      	it	eq
   81042:	4770      	bxeq	lr
   81044:	f04f 0300 	mov.w	r3, #0
   81048:	e00a      	b.n	81060 <__aeabi_l2f+0x14>
   8104a:	bf00      	nop

0008104c <__aeabi_l2f>:
   8104c:	ea50 0201 	orrs.w	r2, r0, r1
   81050:	bf08      	it	eq
   81052:	4770      	bxeq	lr
   81054:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81058:	d502      	bpl.n	81060 <__aeabi_l2f+0x14>
   8105a:	4240      	negs	r0, r0
   8105c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81060:	ea5f 0c01 	movs.w	ip, r1
   81064:	bf02      	ittt	eq
   81066:	4684      	moveq	ip, r0
   81068:	4601      	moveq	r1, r0
   8106a:	2000      	moveq	r0, #0
   8106c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81070:	bf08      	it	eq
   81072:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81076:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8107a:	fabc f28c 	clz	r2, ip
   8107e:	3a08      	subs	r2, #8
   81080:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81084:	db10      	blt.n	810a8 <__aeabi_l2f+0x5c>
   81086:	fa01 fc02 	lsl.w	ip, r1, r2
   8108a:	4463      	add	r3, ip
   8108c:	fa00 fc02 	lsl.w	ip, r0, r2
   81090:	f1c2 0220 	rsb	r2, r2, #32
   81094:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81098:	fa20 f202 	lsr.w	r2, r0, r2
   8109c:	eb43 0002 	adc.w	r0, r3, r2
   810a0:	bf08      	it	eq
   810a2:	f020 0001 	biceq.w	r0, r0, #1
   810a6:	4770      	bx	lr
   810a8:	f102 0220 	add.w	r2, r2, #32
   810ac:	fa01 fc02 	lsl.w	ip, r1, r2
   810b0:	f1c2 0220 	rsb	r2, r2, #32
   810b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   810b8:	fa21 f202 	lsr.w	r2, r1, r2
   810bc:	eb43 0002 	adc.w	r0, r3, r2
   810c0:	bf08      	it	eq
   810c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   810c6:	4770      	bx	lr

000810c8 <__aeabi_fmul>:
   810c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   810cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   810d0:	bf1e      	ittt	ne
   810d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   810d6:	ea92 0f0c 	teqne	r2, ip
   810da:	ea93 0f0c 	teqne	r3, ip
   810de:	d06f      	beq.n	811c0 <__aeabi_fmul+0xf8>
   810e0:	441a      	add	r2, r3
   810e2:	ea80 0c01 	eor.w	ip, r0, r1
   810e6:	0240      	lsls	r0, r0, #9
   810e8:	bf18      	it	ne
   810ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   810ee:	d01e      	beq.n	8112e <__aeabi_fmul+0x66>
   810f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   810f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   810f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   810fc:	fba0 3101 	umull	r3, r1, r0, r1
   81100:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81104:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   81108:	bf3e      	ittt	cc
   8110a:	0049      	lslcc	r1, r1, #1
   8110c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   81110:	005b      	lslcc	r3, r3, #1
   81112:	ea40 0001 	orr.w	r0, r0, r1
   81116:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8111a:	2afd      	cmp	r2, #253	; 0xfd
   8111c:	d81d      	bhi.n	8115a <__aeabi_fmul+0x92>
   8111e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   81122:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81126:	bf08      	it	eq
   81128:	f020 0001 	biceq.w	r0, r0, #1
   8112c:	4770      	bx	lr
   8112e:	f090 0f00 	teq	r0, #0
   81132:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   81136:	bf08      	it	eq
   81138:	0249      	lsleq	r1, r1, #9
   8113a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8113e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81142:	3a7f      	subs	r2, #127	; 0x7f
   81144:	bfc2      	ittt	gt
   81146:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8114a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8114e:	4770      	bxgt	lr
   81150:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81154:	f04f 0300 	mov.w	r3, #0
   81158:	3a01      	subs	r2, #1
   8115a:	dc5d      	bgt.n	81218 <__aeabi_fmul+0x150>
   8115c:	f112 0f19 	cmn.w	r2, #25
   81160:	bfdc      	itt	le
   81162:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81166:	4770      	bxle	lr
   81168:	f1c2 0200 	rsb	r2, r2, #0
   8116c:	0041      	lsls	r1, r0, #1
   8116e:	fa21 f102 	lsr.w	r1, r1, r2
   81172:	f1c2 0220 	rsb	r2, r2, #32
   81176:	fa00 fc02 	lsl.w	ip, r0, r2
   8117a:	ea5f 0031 	movs.w	r0, r1, rrx
   8117e:	f140 0000 	adc.w	r0, r0, #0
   81182:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81186:	bf08      	it	eq
   81188:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8118c:	4770      	bx	lr
   8118e:	f092 0f00 	teq	r2, #0
   81192:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81196:	bf02      	ittt	eq
   81198:	0040      	lsleq	r0, r0, #1
   8119a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8119e:	3a01      	subeq	r2, #1
   811a0:	d0f9      	beq.n	81196 <__aeabi_fmul+0xce>
   811a2:	ea40 000c 	orr.w	r0, r0, ip
   811a6:	f093 0f00 	teq	r3, #0
   811aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   811ae:	bf02      	ittt	eq
   811b0:	0049      	lsleq	r1, r1, #1
   811b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   811b6:	3b01      	subeq	r3, #1
   811b8:	d0f9      	beq.n	811ae <__aeabi_fmul+0xe6>
   811ba:	ea41 010c 	orr.w	r1, r1, ip
   811be:	e78f      	b.n	810e0 <__aeabi_fmul+0x18>
   811c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   811c4:	ea92 0f0c 	teq	r2, ip
   811c8:	bf18      	it	ne
   811ca:	ea93 0f0c 	teqne	r3, ip
   811ce:	d00a      	beq.n	811e6 <__aeabi_fmul+0x11e>
   811d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   811d4:	bf18      	it	ne
   811d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   811da:	d1d8      	bne.n	8118e <__aeabi_fmul+0xc6>
   811dc:	ea80 0001 	eor.w	r0, r0, r1
   811e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   811e4:	4770      	bx	lr
   811e6:	f090 0f00 	teq	r0, #0
   811ea:	bf17      	itett	ne
   811ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   811f0:	4608      	moveq	r0, r1
   811f2:	f091 0f00 	teqne	r1, #0
   811f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   811fa:	d014      	beq.n	81226 <__aeabi_fmul+0x15e>
   811fc:	ea92 0f0c 	teq	r2, ip
   81200:	d101      	bne.n	81206 <__aeabi_fmul+0x13e>
   81202:	0242      	lsls	r2, r0, #9
   81204:	d10f      	bne.n	81226 <__aeabi_fmul+0x15e>
   81206:	ea93 0f0c 	teq	r3, ip
   8120a:	d103      	bne.n	81214 <__aeabi_fmul+0x14c>
   8120c:	024b      	lsls	r3, r1, #9
   8120e:	bf18      	it	ne
   81210:	4608      	movne	r0, r1
   81212:	d108      	bne.n	81226 <__aeabi_fmul+0x15e>
   81214:	ea80 0001 	eor.w	r0, r0, r1
   81218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8121c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   81220:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81224:	4770      	bx	lr
   81226:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8122a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8122e:	4770      	bx	lr

00081230 <__aeabi_fdiv>:
   81230:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81238:	bf1e      	ittt	ne
   8123a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8123e:	ea92 0f0c 	teqne	r2, ip
   81242:	ea93 0f0c 	teqne	r3, ip
   81246:	d069      	beq.n	8131c <__aeabi_fdiv+0xec>
   81248:	eba2 0203 	sub.w	r2, r2, r3
   8124c:	ea80 0c01 	eor.w	ip, r0, r1
   81250:	0249      	lsls	r1, r1, #9
   81252:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81256:	d037      	beq.n	812c8 <__aeabi_fdiv+0x98>
   81258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8125c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81260:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81264:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81268:	428b      	cmp	r3, r1
   8126a:	bf38      	it	cc
   8126c:	005b      	lslcc	r3, r3, #1
   8126e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81272:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81276:	428b      	cmp	r3, r1
   81278:	bf24      	itt	cs
   8127a:	1a5b      	subcs	r3, r3, r1
   8127c:	ea40 000c 	orrcs.w	r0, r0, ip
   81280:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81284:	bf24      	itt	cs
   81286:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8128a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8128e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81292:	bf24      	itt	cs
   81294:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81298:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8129c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   812a0:	bf24      	itt	cs
   812a2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   812a6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   812aa:	011b      	lsls	r3, r3, #4
   812ac:	bf18      	it	ne
   812ae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   812b2:	d1e0      	bne.n	81276 <__aeabi_fdiv+0x46>
   812b4:	2afd      	cmp	r2, #253	; 0xfd
   812b6:	f63f af50 	bhi.w	8115a <__aeabi_fmul+0x92>
   812ba:	428b      	cmp	r3, r1
   812bc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   812c0:	bf08      	it	eq
   812c2:	f020 0001 	biceq.w	r0, r0, #1
   812c6:	4770      	bx	lr
   812c8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   812cc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   812d0:	327f      	adds	r2, #127	; 0x7f
   812d2:	bfc2      	ittt	gt
   812d4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   812d8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   812dc:	4770      	bxgt	lr
   812de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   812e2:	f04f 0300 	mov.w	r3, #0
   812e6:	3a01      	subs	r2, #1
   812e8:	e737      	b.n	8115a <__aeabi_fmul+0x92>
   812ea:	f092 0f00 	teq	r2, #0
   812ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   812f2:	bf02      	ittt	eq
   812f4:	0040      	lsleq	r0, r0, #1
   812f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   812fa:	3a01      	subeq	r2, #1
   812fc:	d0f9      	beq.n	812f2 <__aeabi_fdiv+0xc2>
   812fe:	ea40 000c 	orr.w	r0, r0, ip
   81302:	f093 0f00 	teq	r3, #0
   81306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8130a:	bf02      	ittt	eq
   8130c:	0049      	lsleq	r1, r1, #1
   8130e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81312:	3b01      	subeq	r3, #1
   81314:	d0f9      	beq.n	8130a <__aeabi_fdiv+0xda>
   81316:	ea41 010c 	orr.w	r1, r1, ip
   8131a:	e795      	b.n	81248 <__aeabi_fdiv+0x18>
   8131c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81320:	ea92 0f0c 	teq	r2, ip
   81324:	d108      	bne.n	81338 <__aeabi_fdiv+0x108>
   81326:	0242      	lsls	r2, r0, #9
   81328:	f47f af7d 	bne.w	81226 <__aeabi_fmul+0x15e>
   8132c:	ea93 0f0c 	teq	r3, ip
   81330:	f47f af70 	bne.w	81214 <__aeabi_fmul+0x14c>
   81334:	4608      	mov	r0, r1
   81336:	e776      	b.n	81226 <__aeabi_fmul+0x15e>
   81338:	ea93 0f0c 	teq	r3, ip
   8133c:	d104      	bne.n	81348 <__aeabi_fdiv+0x118>
   8133e:	024b      	lsls	r3, r1, #9
   81340:	f43f af4c 	beq.w	811dc <__aeabi_fmul+0x114>
   81344:	4608      	mov	r0, r1
   81346:	e76e      	b.n	81226 <__aeabi_fmul+0x15e>
   81348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8134c:	bf18      	it	ne
   8134e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81352:	d1ca      	bne.n	812ea <__aeabi_fdiv+0xba>
   81354:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81358:	f47f af5c 	bne.w	81214 <__aeabi_fmul+0x14c>
   8135c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81360:	f47f af3c 	bne.w	811dc <__aeabi_fmul+0x114>
   81364:	e75f      	b.n	81226 <__aeabi_fmul+0x15e>
   81366:	bf00      	nop

00081368 <__aeabi_f2uiz>:
   81368:	0042      	lsls	r2, r0, #1
   8136a:	d20e      	bcs.n	8138a <__aeabi_f2uiz+0x22>
   8136c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81370:	d30b      	bcc.n	8138a <__aeabi_f2uiz+0x22>
   81372:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81376:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8137a:	d409      	bmi.n	81390 <__aeabi_f2uiz+0x28>
   8137c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81380:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81384:	fa23 f002 	lsr.w	r0, r3, r2
   81388:	4770      	bx	lr
   8138a:	f04f 0000 	mov.w	r0, #0
   8138e:	4770      	bx	lr
   81390:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81394:	d101      	bne.n	8139a <__aeabi_f2uiz+0x32>
   81396:	0242      	lsls	r2, r0, #9
   81398:	d102      	bne.n	813a0 <__aeabi_f2uiz+0x38>
   8139a:	f04f 30ff 	mov.w	r0, #4294967295
   8139e:	4770      	bx	lr
   813a0:	f04f 0000 	mov.w	r0, #0
   813a4:	4770      	bx	lr
   813a6:	bf00      	nop

000813a8 <__libc_init_array>:
   813a8:	b570      	push	{r4, r5, r6, lr}
   813aa:	4e0f      	ldr	r6, [pc, #60]	; (813e8 <__libc_init_array+0x40>)
   813ac:	4d0f      	ldr	r5, [pc, #60]	; (813ec <__libc_init_array+0x44>)
   813ae:	1b76      	subs	r6, r6, r5
   813b0:	10b6      	asrs	r6, r6, #2
   813b2:	bf18      	it	ne
   813b4:	2400      	movne	r4, #0
   813b6:	d005      	beq.n	813c4 <__libc_init_array+0x1c>
   813b8:	3401      	adds	r4, #1
   813ba:	f855 3b04 	ldr.w	r3, [r5], #4
   813be:	4798      	blx	r3
   813c0:	42a6      	cmp	r6, r4
   813c2:	d1f9      	bne.n	813b8 <__libc_init_array+0x10>
   813c4:	4e0a      	ldr	r6, [pc, #40]	; (813f0 <__libc_init_array+0x48>)
   813c6:	4d0b      	ldr	r5, [pc, #44]	; (813f4 <__libc_init_array+0x4c>)
   813c8:	f003 f810 	bl	843ec <_init>
   813cc:	1b76      	subs	r6, r6, r5
   813ce:	10b6      	asrs	r6, r6, #2
   813d0:	bf18      	it	ne
   813d2:	2400      	movne	r4, #0
   813d4:	d006      	beq.n	813e4 <__libc_init_array+0x3c>
   813d6:	3401      	adds	r4, #1
   813d8:	f855 3b04 	ldr.w	r3, [r5], #4
   813dc:	4798      	blx	r3
   813de:	42a6      	cmp	r6, r4
   813e0:	d1f9      	bne.n	813d6 <__libc_init_array+0x2e>
   813e2:	bd70      	pop	{r4, r5, r6, pc}
   813e4:	bd70      	pop	{r4, r5, r6, pc}
   813e6:	bf00      	nop
   813e8:	000843f8 	.word	0x000843f8
   813ec:	000843f8 	.word	0x000843f8
   813f0:	00084400 	.word	0x00084400
   813f4:	000843f8 	.word	0x000843f8

000813f8 <iprintf>:
   813f8:	b40f      	push	{r0, r1, r2, r3}
   813fa:	b510      	push	{r4, lr}
   813fc:	4b07      	ldr	r3, [pc, #28]	; (8141c <iprintf+0x24>)
   813fe:	b082      	sub	sp, #8
   81400:	ac04      	add	r4, sp, #16
   81402:	f854 2b04 	ldr.w	r2, [r4], #4
   81406:	6818      	ldr	r0, [r3, #0]
   81408:	4623      	mov	r3, r4
   8140a:	6881      	ldr	r1, [r0, #8]
   8140c:	9401      	str	r4, [sp, #4]
   8140e:	f000 f993 	bl	81738 <_vfiprintf_r>
   81412:	b002      	add	sp, #8
   81414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81418:	b004      	add	sp, #16
   8141a:	4770      	bx	lr
   8141c:	20070134 	.word	0x20070134

00081420 <memset>:
   81420:	b470      	push	{r4, r5, r6}
   81422:	0786      	lsls	r6, r0, #30
   81424:	d046      	beq.n	814b4 <memset+0x94>
   81426:	1e54      	subs	r4, r2, #1
   81428:	2a00      	cmp	r2, #0
   8142a:	d041      	beq.n	814b0 <memset+0x90>
   8142c:	b2ca      	uxtb	r2, r1
   8142e:	4603      	mov	r3, r0
   81430:	e002      	b.n	81438 <memset+0x18>
   81432:	f114 34ff 	adds.w	r4, r4, #4294967295
   81436:	d33b      	bcc.n	814b0 <memset+0x90>
   81438:	f803 2b01 	strb.w	r2, [r3], #1
   8143c:	079d      	lsls	r5, r3, #30
   8143e:	d1f8      	bne.n	81432 <memset+0x12>
   81440:	2c03      	cmp	r4, #3
   81442:	d92e      	bls.n	814a2 <memset+0x82>
   81444:	b2cd      	uxtb	r5, r1
   81446:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8144a:	2c0f      	cmp	r4, #15
   8144c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81450:	d919      	bls.n	81486 <memset+0x66>
   81452:	4626      	mov	r6, r4
   81454:	f103 0210 	add.w	r2, r3, #16
   81458:	3e10      	subs	r6, #16
   8145a:	2e0f      	cmp	r6, #15
   8145c:	f842 5c10 	str.w	r5, [r2, #-16]
   81460:	f842 5c0c 	str.w	r5, [r2, #-12]
   81464:	f842 5c08 	str.w	r5, [r2, #-8]
   81468:	f842 5c04 	str.w	r5, [r2, #-4]
   8146c:	f102 0210 	add.w	r2, r2, #16
   81470:	d8f2      	bhi.n	81458 <memset+0x38>
   81472:	f1a4 0210 	sub.w	r2, r4, #16
   81476:	f022 020f 	bic.w	r2, r2, #15
   8147a:	f004 040f 	and.w	r4, r4, #15
   8147e:	3210      	adds	r2, #16
   81480:	2c03      	cmp	r4, #3
   81482:	4413      	add	r3, r2
   81484:	d90d      	bls.n	814a2 <memset+0x82>
   81486:	461e      	mov	r6, r3
   81488:	4622      	mov	r2, r4
   8148a:	3a04      	subs	r2, #4
   8148c:	2a03      	cmp	r2, #3
   8148e:	f846 5b04 	str.w	r5, [r6], #4
   81492:	d8fa      	bhi.n	8148a <memset+0x6a>
   81494:	1f22      	subs	r2, r4, #4
   81496:	f022 0203 	bic.w	r2, r2, #3
   8149a:	3204      	adds	r2, #4
   8149c:	4413      	add	r3, r2
   8149e:	f004 0403 	and.w	r4, r4, #3
   814a2:	b12c      	cbz	r4, 814b0 <memset+0x90>
   814a4:	b2c9      	uxtb	r1, r1
   814a6:	441c      	add	r4, r3
   814a8:	f803 1b01 	strb.w	r1, [r3], #1
   814ac:	429c      	cmp	r4, r3
   814ae:	d1fb      	bne.n	814a8 <memset+0x88>
   814b0:	bc70      	pop	{r4, r5, r6}
   814b2:	4770      	bx	lr
   814b4:	4614      	mov	r4, r2
   814b6:	4603      	mov	r3, r0
   814b8:	e7c2      	b.n	81440 <memset+0x20>
   814ba:	bf00      	nop

000814bc <setbuf>:
   814bc:	2900      	cmp	r1, #0
   814be:	bf0c      	ite	eq
   814c0:	2202      	moveq	r2, #2
   814c2:	2200      	movne	r2, #0
   814c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   814c8:	f000 b800 	b.w	814cc <setvbuf>

000814cc <setvbuf>:
   814cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   814d0:	4d61      	ldr	r5, [pc, #388]	; (81658 <setvbuf+0x18c>)
   814d2:	b083      	sub	sp, #12
   814d4:	682d      	ldr	r5, [r5, #0]
   814d6:	4604      	mov	r4, r0
   814d8:	460f      	mov	r7, r1
   814da:	4690      	mov	r8, r2
   814dc:	461e      	mov	r6, r3
   814de:	b115      	cbz	r5, 814e6 <setvbuf+0x1a>
   814e0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   814e2:	2b00      	cmp	r3, #0
   814e4:	d064      	beq.n	815b0 <setvbuf+0xe4>
   814e6:	f1b8 0f02 	cmp.w	r8, #2
   814ea:	d006      	beq.n	814fa <setvbuf+0x2e>
   814ec:	f1b8 0f01 	cmp.w	r8, #1
   814f0:	f200 809f 	bhi.w	81632 <setvbuf+0x166>
   814f4:	2e00      	cmp	r6, #0
   814f6:	f2c0 809c 	blt.w	81632 <setvbuf+0x166>
   814fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   814fc:	07d8      	lsls	r0, r3, #31
   814fe:	d534      	bpl.n	8156a <setvbuf+0x9e>
   81500:	4621      	mov	r1, r4
   81502:	4628      	mov	r0, r5
   81504:	f001 f8b0 	bl	82668 <_fflush_r>
   81508:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8150a:	b141      	cbz	r1, 8151e <setvbuf+0x52>
   8150c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81510:	4299      	cmp	r1, r3
   81512:	d002      	beq.n	8151a <setvbuf+0x4e>
   81514:	4628      	mov	r0, r5
   81516:	f001 fa25 	bl	82964 <_free_r>
   8151a:	2300      	movs	r3, #0
   8151c:	6323      	str	r3, [r4, #48]	; 0x30
   8151e:	2200      	movs	r2, #0
   81520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81524:	61a2      	str	r2, [r4, #24]
   81526:	6062      	str	r2, [r4, #4]
   81528:	061a      	lsls	r2, r3, #24
   8152a:	d43a      	bmi.n	815a2 <setvbuf+0xd6>
   8152c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81530:	f023 0303 	bic.w	r3, r3, #3
   81534:	f1b8 0f02 	cmp.w	r8, #2
   81538:	81a3      	strh	r3, [r4, #12]
   8153a:	d01d      	beq.n	81578 <setvbuf+0xac>
   8153c:	ab01      	add	r3, sp, #4
   8153e:	466a      	mov	r2, sp
   81540:	4621      	mov	r1, r4
   81542:	4628      	mov	r0, r5
   81544:	f001 fcac 	bl	82ea0 <__swhatbuf_r>
   81548:	89a3      	ldrh	r3, [r4, #12]
   8154a:	4318      	orrs	r0, r3
   8154c:	81a0      	strh	r0, [r4, #12]
   8154e:	2e00      	cmp	r6, #0
   81550:	d132      	bne.n	815b8 <setvbuf+0xec>
   81552:	9e00      	ldr	r6, [sp, #0]
   81554:	4630      	mov	r0, r6
   81556:	f001 fd1b 	bl	82f90 <malloc>
   8155a:	4607      	mov	r7, r0
   8155c:	2800      	cmp	r0, #0
   8155e:	d06b      	beq.n	81638 <setvbuf+0x16c>
   81560:	89a3      	ldrh	r3, [r4, #12]
   81562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81566:	81a3      	strh	r3, [r4, #12]
   81568:	e028      	b.n	815bc <setvbuf+0xf0>
   8156a:	89a3      	ldrh	r3, [r4, #12]
   8156c:	0599      	lsls	r1, r3, #22
   8156e:	d4c7      	bmi.n	81500 <setvbuf+0x34>
   81570:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81572:	f001 fc91 	bl	82e98 <__retarget_lock_acquire_recursive>
   81576:	e7c3      	b.n	81500 <setvbuf+0x34>
   81578:	2500      	movs	r5, #0
   8157a:	2600      	movs	r6, #0
   8157c:	2001      	movs	r0, #1
   8157e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81580:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81584:	f043 0302 	orr.w	r3, r3, #2
   81588:	60a6      	str	r6, [r4, #8]
   8158a:	07ce      	lsls	r6, r1, #31
   8158c:	81a3      	strh	r3, [r4, #12]
   8158e:	6160      	str	r0, [r4, #20]
   81590:	6022      	str	r2, [r4, #0]
   81592:	6122      	str	r2, [r4, #16]
   81594:	d401      	bmi.n	8159a <setvbuf+0xce>
   81596:	0598      	lsls	r0, r3, #22
   81598:	d53e      	bpl.n	81618 <setvbuf+0x14c>
   8159a:	4628      	mov	r0, r5
   8159c:	b003      	add	sp, #12
   8159e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   815a2:	6921      	ldr	r1, [r4, #16]
   815a4:	4628      	mov	r0, r5
   815a6:	f001 f9dd 	bl	82964 <_free_r>
   815aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   815ae:	e7bd      	b.n	8152c <setvbuf+0x60>
   815b0:	4628      	mov	r0, r5
   815b2:	f001 f8b1 	bl	82718 <__sinit>
   815b6:	e796      	b.n	814e6 <setvbuf+0x1a>
   815b8:	2f00      	cmp	r7, #0
   815ba:	d0cb      	beq.n	81554 <setvbuf+0x88>
   815bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   815be:	2b00      	cmp	r3, #0
   815c0:	d033      	beq.n	8162a <setvbuf+0x15e>
   815c2:	9b00      	ldr	r3, [sp, #0]
   815c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   815c8:	429e      	cmp	r6, r3
   815ca:	bf1c      	itt	ne
   815cc:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   815d0:	81a2      	strhne	r2, [r4, #12]
   815d2:	f1b8 0f01 	cmp.w	r8, #1
   815d6:	bf04      	itt	eq
   815d8:	f042 0201 	orreq.w	r2, r2, #1
   815dc:	81a2      	strheq	r2, [r4, #12]
   815de:	b292      	uxth	r2, r2
   815e0:	f012 0308 	ands.w	r3, r2, #8
   815e4:	6027      	str	r7, [r4, #0]
   815e6:	6127      	str	r7, [r4, #16]
   815e8:	6166      	str	r6, [r4, #20]
   815ea:	d00e      	beq.n	8160a <setvbuf+0x13e>
   815ec:	07d1      	lsls	r1, r2, #31
   815ee:	d51a      	bpl.n	81626 <setvbuf+0x15a>
   815f0:	2300      	movs	r3, #0
   815f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   815f4:	4276      	negs	r6, r6
   815f6:	f015 0501 	ands.w	r5, r5, #1
   815fa:	61a6      	str	r6, [r4, #24]
   815fc:	60a3      	str	r3, [r4, #8]
   815fe:	d009      	beq.n	81614 <setvbuf+0x148>
   81600:	2500      	movs	r5, #0
   81602:	4628      	mov	r0, r5
   81604:	b003      	add	sp, #12
   81606:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8160a:	60a3      	str	r3, [r4, #8]
   8160c:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8160e:	f015 0501 	ands.w	r5, r5, #1
   81612:	d1f5      	bne.n	81600 <setvbuf+0x134>
   81614:	0593      	lsls	r3, r2, #22
   81616:	d4c0      	bmi.n	8159a <setvbuf+0xce>
   81618:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8161a:	f001 fc3f 	bl	82e9c <__retarget_lock_release_recursive>
   8161e:	4628      	mov	r0, r5
   81620:	b003      	add	sp, #12
   81622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81626:	60a6      	str	r6, [r4, #8]
   81628:	e7f0      	b.n	8160c <setvbuf+0x140>
   8162a:	4628      	mov	r0, r5
   8162c:	f001 f874 	bl	82718 <__sinit>
   81630:	e7c7      	b.n	815c2 <setvbuf+0xf6>
   81632:	f04f 35ff 	mov.w	r5, #4294967295
   81636:	e7b0      	b.n	8159a <setvbuf+0xce>
   81638:	f8dd 9000 	ldr.w	r9, [sp]
   8163c:	45b1      	cmp	r9, r6
   8163e:	d004      	beq.n	8164a <setvbuf+0x17e>
   81640:	4648      	mov	r0, r9
   81642:	f001 fca5 	bl	82f90 <malloc>
   81646:	4607      	mov	r7, r0
   81648:	b920      	cbnz	r0, 81654 <setvbuf+0x188>
   8164a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8164e:	f04f 35ff 	mov.w	r5, #4294967295
   81652:	e792      	b.n	8157a <setvbuf+0xae>
   81654:	464e      	mov	r6, r9
   81656:	e783      	b.n	81560 <setvbuf+0x94>
   81658:	20070134 	.word	0x20070134

0008165c <strlen>:
   8165c:	f020 0103 	bic.w	r1, r0, #3
   81660:	f010 0003 	ands.w	r0, r0, #3
   81664:	f1c0 0000 	rsb	r0, r0, #0
   81668:	f851 3b04 	ldr.w	r3, [r1], #4
   8166c:	f100 0c04 	add.w	ip, r0, #4
   81670:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81674:	f06f 0200 	mvn.w	r2, #0
   81678:	bf1c      	itt	ne
   8167a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8167e:	4313      	orrne	r3, r2
   81680:	f04f 0c01 	mov.w	ip, #1
   81684:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81688:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8168c:	eba3 020c 	sub.w	r2, r3, ip
   81690:	ea22 0203 	bic.w	r2, r2, r3
   81694:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81698:	bf04      	itt	eq
   8169a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8169e:	3004      	addeq	r0, #4
   816a0:	d0f4      	beq.n	8168c <strlen+0x30>
   816a2:	f1c2 0100 	rsb	r1, r2, #0
   816a6:	ea02 0201 	and.w	r2, r2, r1
   816aa:	fab2 f282 	clz	r2, r2
   816ae:	f1c2 021f 	rsb	r2, r2, #31
   816b2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   816b6:	4770      	bx	lr

000816b8 <__sprint_r.part.0>:
   816b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   816bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   816be:	4693      	mov	fp, r2
   816c0:	049c      	lsls	r4, r3, #18
   816c2:	d52f      	bpl.n	81724 <__sprint_r.part.0+0x6c>
   816c4:	6893      	ldr	r3, [r2, #8]
   816c6:	6812      	ldr	r2, [r2, #0]
   816c8:	b353      	cbz	r3, 81720 <__sprint_r.part.0+0x68>
   816ca:	460e      	mov	r6, r1
   816cc:	4607      	mov	r7, r0
   816ce:	f102 0908 	add.w	r9, r2, #8
   816d2:	e919 0420 	ldmdb	r9, {r5, sl}
   816d6:	ea5f 089a 	movs.w	r8, sl, lsr #2
   816da:	d017      	beq.n	8170c <__sprint_r.part.0+0x54>
   816dc:	2400      	movs	r4, #0
   816de:	3d04      	subs	r5, #4
   816e0:	e001      	b.n	816e6 <__sprint_r.part.0+0x2e>
   816e2:	45a0      	cmp	r8, r4
   816e4:	d010      	beq.n	81708 <__sprint_r.part.0+0x50>
   816e6:	4632      	mov	r2, r6
   816e8:	f855 1f04 	ldr.w	r1, [r5, #4]!
   816ec:	4638      	mov	r0, r7
   816ee:	f001 f8b5 	bl	8285c <_fputwc_r>
   816f2:	1c43      	adds	r3, r0, #1
   816f4:	f104 0401 	add.w	r4, r4, #1
   816f8:	d1f3      	bne.n	816e2 <__sprint_r.part.0+0x2a>
   816fa:	2300      	movs	r3, #0
   816fc:	f8cb 3008 	str.w	r3, [fp, #8]
   81700:	f8cb 3004 	str.w	r3, [fp, #4]
   81704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81708:	f8db 3008 	ldr.w	r3, [fp, #8]
   8170c:	f02a 0a03 	bic.w	sl, sl, #3
   81710:	eba3 030a 	sub.w	r3, r3, sl
   81714:	f8cb 3008 	str.w	r3, [fp, #8]
   81718:	f109 0908 	add.w	r9, r9, #8
   8171c:	2b00      	cmp	r3, #0
   8171e:	d1d8      	bne.n	816d2 <__sprint_r.part.0+0x1a>
   81720:	2000      	movs	r0, #0
   81722:	e7ea      	b.n	816fa <__sprint_r.part.0+0x42>
   81724:	f001 fa04 	bl	82b30 <__sfvwrite_r>
   81728:	2300      	movs	r3, #0
   8172a:	f8cb 3008 	str.w	r3, [fp, #8]
   8172e:	f8cb 3004 	str.w	r3, [fp, #4]
   81732:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81736:	bf00      	nop

00081738 <_vfiprintf_r>:
   81738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8173c:	b0ad      	sub	sp, #180	; 0xb4
   8173e:	461d      	mov	r5, r3
   81740:	468b      	mov	fp, r1
   81742:	4690      	mov	r8, r2
   81744:	9307      	str	r3, [sp, #28]
   81746:	9006      	str	r0, [sp, #24]
   81748:	b118      	cbz	r0, 81752 <_vfiprintf_r+0x1a>
   8174a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8174c:	2b00      	cmp	r3, #0
   8174e:	f000 80f3 	beq.w	81938 <_vfiprintf_r+0x200>
   81752:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81756:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8175a:	07df      	lsls	r7, r3, #31
   8175c:	b281      	uxth	r1, r0
   8175e:	d402      	bmi.n	81766 <_vfiprintf_r+0x2e>
   81760:	058e      	lsls	r6, r1, #22
   81762:	f140 80fc 	bpl.w	8195e <_vfiprintf_r+0x226>
   81766:	048c      	lsls	r4, r1, #18
   81768:	d40a      	bmi.n	81780 <_vfiprintf_r+0x48>
   8176a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8176e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81772:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81776:	f8ab 100c 	strh.w	r1, [fp, #12]
   8177a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8177e:	b289      	uxth	r1, r1
   81780:	0708      	lsls	r0, r1, #28
   81782:	f140 80b3 	bpl.w	818ec <_vfiprintf_r+0x1b4>
   81786:	f8db 3010 	ldr.w	r3, [fp, #16]
   8178a:	2b00      	cmp	r3, #0
   8178c:	f000 80ae 	beq.w	818ec <_vfiprintf_r+0x1b4>
   81790:	f001 031a 	and.w	r3, r1, #26
   81794:	2b0a      	cmp	r3, #10
   81796:	f000 80b5 	beq.w	81904 <_vfiprintf_r+0x1cc>
   8179a:	2300      	movs	r3, #0
   8179c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   817a0:	46d1      	mov	r9, sl
   817a2:	930b      	str	r3, [sp, #44]	; 0x2c
   817a4:	9303      	str	r3, [sp, #12]
   817a6:	9311      	str	r3, [sp, #68]	; 0x44
   817a8:	9310      	str	r3, [sp, #64]	; 0x40
   817aa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   817ae:	f8cd b010 	str.w	fp, [sp, #16]
   817b2:	f898 3000 	ldrb.w	r3, [r8]
   817b6:	4644      	mov	r4, r8
   817b8:	b1fb      	cbz	r3, 817fa <_vfiprintf_r+0xc2>
   817ba:	2b25      	cmp	r3, #37	; 0x25
   817bc:	d102      	bne.n	817c4 <_vfiprintf_r+0x8c>
   817be:	e01c      	b.n	817fa <_vfiprintf_r+0xc2>
   817c0:	2b25      	cmp	r3, #37	; 0x25
   817c2:	d003      	beq.n	817cc <_vfiprintf_r+0x94>
   817c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   817c8:	2b00      	cmp	r3, #0
   817ca:	d1f9      	bne.n	817c0 <_vfiprintf_r+0x88>
   817cc:	eba4 0508 	sub.w	r5, r4, r8
   817d0:	b19d      	cbz	r5, 817fa <_vfiprintf_r+0xc2>
   817d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   817d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   817d6:	3301      	adds	r3, #1
   817d8:	442a      	add	r2, r5
   817da:	2b07      	cmp	r3, #7
   817dc:	f8c9 8000 	str.w	r8, [r9]
   817e0:	f8c9 5004 	str.w	r5, [r9, #4]
   817e4:	9211      	str	r2, [sp, #68]	; 0x44
   817e6:	9310      	str	r3, [sp, #64]	; 0x40
   817e8:	dd7a      	ble.n	818e0 <_vfiprintf_r+0x1a8>
   817ea:	2a00      	cmp	r2, #0
   817ec:	f040 84b5 	bne.w	8215a <_vfiprintf_r+0xa22>
   817f0:	46d1      	mov	r9, sl
   817f2:	9b03      	ldr	r3, [sp, #12]
   817f4:	9210      	str	r2, [sp, #64]	; 0x40
   817f6:	442b      	add	r3, r5
   817f8:	9303      	str	r3, [sp, #12]
   817fa:	7823      	ldrb	r3, [r4, #0]
   817fc:	2b00      	cmp	r3, #0
   817fe:	f000 83e5 	beq.w	81fcc <_vfiprintf_r+0x894>
   81802:	2000      	movs	r0, #0
   81804:	f04f 0300 	mov.w	r3, #0
   81808:	f104 0801 	add.w	r8, r4, #1
   8180c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81810:	7862      	ldrb	r2, [r4, #1]
   81812:	4606      	mov	r6, r0
   81814:	4605      	mov	r5, r0
   81816:	4603      	mov	r3, r0
   81818:	f04f 34ff 	mov.w	r4, #4294967295
   8181c:	f108 0801 	add.w	r8, r8, #1
   81820:	f1a2 0120 	sub.w	r1, r2, #32
   81824:	2958      	cmp	r1, #88	; 0x58
   81826:	f200 82d9 	bhi.w	81ddc <_vfiprintf_r+0x6a4>
   8182a:	e8df f011 	tbh	[pc, r1, lsl #1]
   8182e:	0228      	.short	0x0228
   81830:	02d702d7 	.word	0x02d702d7
   81834:	02d70230 	.word	0x02d70230
   81838:	02d702d7 	.word	0x02d702d7
   8183c:	02d702d7 	.word	0x02d702d7
   81840:	00a002d7 	.word	0x00a002d7
   81844:	02d70288 	.word	0x02d70288
   81848:	02b800a8 	.word	0x02b800a8
   8184c:	01a602d7 	.word	0x01a602d7
   81850:	01ab01ab 	.word	0x01ab01ab
   81854:	01ab01ab 	.word	0x01ab01ab
   81858:	01ab01ab 	.word	0x01ab01ab
   8185c:	01ab01ab 	.word	0x01ab01ab
   81860:	02d701ab 	.word	0x02d701ab
   81864:	02d702d7 	.word	0x02d702d7
   81868:	02d702d7 	.word	0x02d702d7
   8186c:	02d702d7 	.word	0x02d702d7
   81870:	02d702d7 	.word	0x02d702d7
   81874:	01b902d7 	.word	0x01b902d7
   81878:	02d702d7 	.word	0x02d702d7
   8187c:	02d702d7 	.word	0x02d702d7
   81880:	02d702d7 	.word	0x02d702d7
   81884:	02d702d7 	.word	0x02d702d7
   81888:	02d702d7 	.word	0x02d702d7
   8188c:	02d7019e 	.word	0x02d7019e
   81890:	02d702d7 	.word	0x02d702d7
   81894:	02d702d7 	.word	0x02d702d7
   81898:	02d701a2 	.word	0x02d701a2
   8189c:	025a02d7 	.word	0x025a02d7
   818a0:	02d702d7 	.word	0x02d702d7
   818a4:	02d702d7 	.word	0x02d702d7
   818a8:	02d702d7 	.word	0x02d702d7
   818ac:	02d702d7 	.word	0x02d702d7
   818b0:	02d702d7 	.word	0x02d702d7
   818b4:	02220261 	.word	0x02220261
   818b8:	02d702d7 	.word	0x02d702d7
   818bc:	027602d7 	.word	0x027602d7
   818c0:	02d70222 	.word	0x02d70222
   818c4:	027b02d7 	.word	0x027b02d7
   818c8:	01fc02d7 	.word	0x01fc02d7
   818cc:	02100189 	.word	0x02100189
   818d0:	02d702d2 	.word	0x02d702d2
   818d4:	02d70295 	.word	0x02d70295
   818d8:	02d700ad 	.word	0x02d700ad
   818dc:	023502d7 	.word	0x023502d7
   818e0:	f109 0908 	add.w	r9, r9, #8
   818e4:	9b03      	ldr	r3, [sp, #12]
   818e6:	442b      	add	r3, r5
   818e8:	9303      	str	r3, [sp, #12]
   818ea:	e786      	b.n	817fa <_vfiprintf_r+0xc2>
   818ec:	4659      	mov	r1, fp
   818ee:	9806      	ldr	r0, [sp, #24]
   818f0:	f000 fdaa 	bl	82448 <__swsetup_r>
   818f4:	bb18      	cbnz	r0, 8193e <_vfiprintf_r+0x206>
   818f6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   818fa:	f001 031a 	and.w	r3, r1, #26
   818fe:	2b0a      	cmp	r3, #10
   81900:	f47f af4b 	bne.w	8179a <_vfiprintf_r+0x62>
   81904:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81908:	2b00      	cmp	r3, #0
   8190a:	f6ff af46 	blt.w	8179a <_vfiprintf_r+0x62>
   8190e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81912:	07db      	lsls	r3, r3, #31
   81914:	d405      	bmi.n	81922 <_vfiprintf_r+0x1ea>
   81916:	058f      	lsls	r7, r1, #22
   81918:	d403      	bmi.n	81922 <_vfiprintf_r+0x1ea>
   8191a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8191e:	f001 fabd 	bl	82e9c <__retarget_lock_release_recursive>
   81922:	462b      	mov	r3, r5
   81924:	4642      	mov	r2, r8
   81926:	4659      	mov	r1, fp
   81928:	9806      	ldr	r0, [sp, #24]
   8192a:	f000 fd49 	bl	823c0 <__sbprintf>
   8192e:	9003      	str	r0, [sp, #12]
   81930:	9803      	ldr	r0, [sp, #12]
   81932:	b02d      	add	sp, #180	; 0xb4
   81934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81938:	f000 feee 	bl	82718 <__sinit>
   8193c:	e709      	b.n	81752 <_vfiprintf_r+0x1a>
   8193e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81942:	07d9      	lsls	r1, r3, #31
   81944:	d404      	bmi.n	81950 <_vfiprintf_r+0x218>
   81946:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8194a:	059a      	lsls	r2, r3, #22
   8194c:	f140 84ae 	bpl.w	822ac <_vfiprintf_r+0xb74>
   81950:	f04f 33ff 	mov.w	r3, #4294967295
   81954:	9303      	str	r3, [sp, #12]
   81956:	9803      	ldr	r0, [sp, #12]
   81958:	b02d      	add	sp, #180	; 0xb4
   8195a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8195e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81962:	f001 fa99 	bl	82e98 <__retarget_lock_acquire_recursive>
   81966:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8196a:	b281      	uxth	r1, r0
   8196c:	e6fb      	b.n	81766 <_vfiprintf_r+0x2e>
   8196e:	9907      	ldr	r1, [sp, #28]
   81970:	460a      	mov	r2, r1
   81972:	680d      	ldr	r5, [r1, #0]
   81974:	3204      	adds	r2, #4
   81976:	2d00      	cmp	r5, #0
   81978:	9207      	str	r2, [sp, #28]
   8197a:	da02      	bge.n	81982 <_vfiprintf_r+0x24a>
   8197c:	426d      	negs	r5, r5
   8197e:	f043 0304 	orr.w	r3, r3, #4
   81982:	f898 2000 	ldrb.w	r2, [r8]
   81986:	e749      	b.n	8181c <_vfiprintf_r+0xe4>
   81988:	9508      	str	r5, [sp, #32]
   8198a:	069e      	lsls	r6, r3, #26
   8198c:	f100 845a 	bmi.w	82244 <_vfiprintf_r+0xb0c>
   81990:	9907      	ldr	r1, [sp, #28]
   81992:	06dd      	lsls	r5, r3, #27
   81994:	460a      	mov	r2, r1
   81996:	f100 83ef 	bmi.w	82178 <_vfiprintf_r+0xa40>
   8199a:	0658      	lsls	r0, r3, #25
   8199c:	f140 83ec 	bpl.w	82178 <_vfiprintf_r+0xa40>
   819a0:	2700      	movs	r7, #0
   819a2:	2201      	movs	r2, #1
   819a4:	880e      	ldrh	r6, [r1, #0]
   819a6:	3104      	adds	r1, #4
   819a8:	9107      	str	r1, [sp, #28]
   819aa:	f04f 0100 	mov.w	r1, #0
   819ae:	2500      	movs	r5, #0
   819b0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   819b4:	1c61      	adds	r1, r4, #1
   819b6:	f000 8117 	beq.w	81be8 <_vfiprintf_r+0x4b0>
   819ba:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   819be:	9102      	str	r1, [sp, #8]
   819c0:	ea56 0107 	orrs.w	r1, r6, r7
   819c4:	f040 8115 	bne.w	81bf2 <_vfiprintf_r+0x4ba>
   819c8:	2c00      	cmp	r4, #0
   819ca:	f040 835b 	bne.w	82084 <_vfiprintf_r+0x94c>
   819ce:	2a00      	cmp	r2, #0
   819d0:	f040 83b6 	bne.w	82140 <_vfiprintf_r+0xa08>
   819d4:	f013 0301 	ands.w	r3, r3, #1
   819d8:	9305      	str	r3, [sp, #20]
   819da:	f000 8455 	beq.w	82288 <_vfiprintf_r+0xb50>
   819de:	2330      	movs	r3, #48	; 0x30
   819e0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   819e4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   819e8:	9b05      	ldr	r3, [sp, #20]
   819ea:	42a3      	cmp	r3, r4
   819ec:	bfb8      	it	lt
   819ee:	4623      	movlt	r3, r4
   819f0:	9301      	str	r3, [sp, #4]
   819f2:	b10d      	cbz	r5, 819f8 <_vfiprintf_r+0x2c0>
   819f4:	3301      	adds	r3, #1
   819f6:	9301      	str	r3, [sp, #4]
   819f8:	9b02      	ldr	r3, [sp, #8]
   819fa:	f013 0302 	ands.w	r3, r3, #2
   819fe:	9309      	str	r3, [sp, #36]	; 0x24
   81a00:	d002      	beq.n	81a08 <_vfiprintf_r+0x2d0>
   81a02:	9b01      	ldr	r3, [sp, #4]
   81a04:	3302      	adds	r3, #2
   81a06:	9301      	str	r3, [sp, #4]
   81a08:	9b02      	ldr	r3, [sp, #8]
   81a0a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81a0e:	930a      	str	r3, [sp, #40]	; 0x28
   81a10:	f040 8215 	bne.w	81e3e <_vfiprintf_r+0x706>
   81a14:	9b08      	ldr	r3, [sp, #32]
   81a16:	9a01      	ldr	r2, [sp, #4]
   81a18:	1a9d      	subs	r5, r3, r2
   81a1a:	2d00      	cmp	r5, #0
   81a1c:	f340 820f 	ble.w	81e3e <_vfiprintf_r+0x706>
   81a20:	2d10      	cmp	r5, #16
   81a22:	f340 8484 	ble.w	8232e <_vfiprintf_r+0xbf6>
   81a26:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81a28:	46ce      	mov	lr, r9
   81a2a:	2710      	movs	r7, #16
   81a2c:	46a1      	mov	r9, r4
   81a2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81a30:	4ec5      	ldr	r6, [pc, #788]	; (81d48 <_vfiprintf_r+0x610>)
   81a32:	4619      	mov	r1, r3
   81a34:	9c06      	ldr	r4, [sp, #24]
   81a36:	e007      	b.n	81a48 <_vfiprintf_r+0x310>
   81a38:	f101 0c02 	add.w	ip, r1, #2
   81a3c:	4601      	mov	r1, r0
   81a3e:	f10e 0e08 	add.w	lr, lr, #8
   81a42:	3d10      	subs	r5, #16
   81a44:	2d10      	cmp	r5, #16
   81a46:	dd11      	ble.n	81a6c <_vfiprintf_r+0x334>
   81a48:	1c48      	adds	r0, r1, #1
   81a4a:	3210      	adds	r2, #16
   81a4c:	2807      	cmp	r0, #7
   81a4e:	9211      	str	r2, [sp, #68]	; 0x44
   81a50:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81a54:	9010      	str	r0, [sp, #64]	; 0x40
   81a56:	ddef      	ble.n	81a38 <_vfiprintf_r+0x300>
   81a58:	2a00      	cmp	r2, #0
   81a5a:	f040 81d9 	bne.w	81e10 <_vfiprintf_r+0x6d8>
   81a5e:	3d10      	subs	r5, #16
   81a60:	2d10      	cmp	r5, #16
   81a62:	4611      	mov	r1, r2
   81a64:	f04f 0c01 	mov.w	ip, #1
   81a68:	46d6      	mov	lr, sl
   81a6a:	dced      	bgt.n	81a48 <_vfiprintf_r+0x310>
   81a6c:	464c      	mov	r4, r9
   81a6e:	4661      	mov	r1, ip
   81a70:	46f1      	mov	r9, lr
   81a72:	442a      	add	r2, r5
   81a74:	2907      	cmp	r1, #7
   81a76:	9211      	str	r2, [sp, #68]	; 0x44
   81a78:	f8c9 6000 	str.w	r6, [r9]
   81a7c:	f8c9 5004 	str.w	r5, [r9, #4]
   81a80:	9110      	str	r1, [sp, #64]	; 0x40
   81a82:	f300 82eb 	bgt.w	8205c <_vfiprintf_r+0x924>
   81a86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81a8a:	f109 0908 	add.w	r9, r9, #8
   81a8e:	1c48      	adds	r0, r1, #1
   81a90:	2d00      	cmp	r5, #0
   81a92:	f040 81dc 	bne.w	81e4e <_vfiprintf_r+0x716>
   81a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81a98:	2b00      	cmp	r3, #0
   81a9a:	f000 81f6 	beq.w	81e8a <_vfiprintf_r+0x752>
   81a9e:	2102      	movs	r1, #2
   81aa0:	ab0e      	add	r3, sp, #56	; 0x38
   81aa2:	440a      	add	r2, r1
   81aa4:	2807      	cmp	r0, #7
   81aa6:	9211      	str	r2, [sp, #68]	; 0x44
   81aa8:	9010      	str	r0, [sp, #64]	; 0x40
   81aaa:	f8c9 1004 	str.w	r1, [r9, #4]
   81aae:	f8c9 3000 	str.w	r3, [r9]
   81ab2:	f340 81e6 	ble.w	81e82 <_vfiprintf_r+0x74a>
   81ab6:	2a00      	cmp	r2, #0
   81ab8:	f040 8395 	bne.w	821e6 <_vfiprintf_r+0xaae>
   81abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81abe:	2001      	movs	r0, #1
   81ac0:	2b80      	cmp	r3, #128	; 0x80
   81ac2:	4611      	mov	r1, r2
   81ac4:	46d1      	mov	r9, sl
   81ac6:	f040 81e4 	bne.w	81e92 <_vfiprintf_r+0x75a>
   81aca:	9b08      	ldr	r3, [sp, #32]
   81acc:	9d01      	ldr	r5, [sp, #4]
   81ace:	1b5e      	subs	r6, r3, r5
   81ad0:	2e00      	cmp	r6, #0
   81ad2:	f340 81de 	ble.w	81e92 <_vfiprintf_r+0x75a>
   81ad6:	2e10      	cmp	r6, #16
   81ad8:	f340 843c 	ble.w	82354 <_vfiprintf_r+0xc1c>
   81adc:	46cc      	mov	ip, r9
   81ade:	2710      	movs	r7, #16
   81ae0:	46a1      	mov	r9, r4
   81ae2:	4d9a      	ldr	r5, [pc, #616]	; (81d4c <_vfiprintf_r+0x614>)
   81ae4:	9c06      	ldr	r4, [sp, #24]
   81ae6:	e007      	b.n	81af8 <_vfiprintf_r+0x3c0>
   81ae8:	f101 0e02 	add.w	lr, r1, #2
   81aec:	4601      	mov	r1, r0
   81aee:	f10c 0c08 	add.w	ip, ip, #8
   81af2:	3e10      	subs	r6, #16
   81af4:	2e10      	cmp	r6, #16
   81af6:	dd11      	ble.n	81b1c <_vfiprintf_r+0x3e4>
   81af8:	1c48      	adds	r0, r1, #1
   81afa:	3210      	adds	r2, #16
   81afc:	2807      	cmp	r0, #7
   81afe:	9211      	str	r2, [sp, #68]	; 0x44
   81b00:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81b04:	9010      	str	r0, [sp, #64]	; 0x40
   81b06:	ddef      	ble.n	81ae8 <_vfiprintf_r+0x3b0>
   81b08:	2a00      	cmp	r2, #0
   81b0a:	f040 829b 	bne.w	82044 <_vfiprintf_r+0x90c>
   81b0e:	3e10      	subs	r6, #16
   81b10:	2e10      	cmp	r6, #16
   81b12:	f04f 0e01 	mov.w	lr, #1
   81b16:	4611      	mov	r1, r2
   81b18:	46d4      	mov	ip, sl
   81b1a:	dced      	bgt.n	81af8 <_vfiprintf_r+0x3c0>
   81b1c:	464c      	mov	r4, r9
   81b1e:	46e1      	mov	r9, ip
   81b20:	4432      	add	r2, r6
   81b22:	f1be 0f07 	cmp.w	lr, #7
   81b26:	9211      	str	r2, [sp, #68]	; 0x44
   81b28:	e889 0060 	stmia.w	r9, {r5, r6}
   81b2c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81b30:	f300 8366 	bgt.w	82200 <_vfiprintf_r+0xac8>
   81b34:	f109 0908 	add.w	r9, r9, #8
   81b38:	f10e 0001 	add.w	r0, lr, #1
   81b3c:	4671      	mov	r1, lr
   81b3e:	e1a8      	b.n	81e92 <_vfiprintf_r+0x75a>
   81b40:	9508      	str	r5, [sp, #32]
   81b42:	f013 0220 	ands.w	r2, r3, #32
   81b46:	f040 8389 	bne.w	8225c <_vfiprintf_r+0xb24>
   81b4a:	f013 0110 	ands.w	r1, r3, #16
   81b4e:	f040 8319 	bne.w	82184 <_vfiprintf_r+0xa4c>
   81b52:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   81b56:	f000 8315 	beq.w	82184 <_vfiprintf_r+0xa4c>
   81b5a:	9807      	ldr	r0, [sp, #28]
   81b5c:	460a      	mov	r2, r1
   81b5e:	4601      	mov	r1, r0
   81b60:	3104      	adds	r1, #4
   81b62:	8806      	ldrh	r6, [r0, #0]
   81b64:	2700      	movs	r7, #0
   81b66:	9107      	str	r1, [sp, #28]
   81b68:	e71f      	b.n	819aa <_vfiprintf_r+0x272>
   81b6a:	9508      	str	r5, [sp, #32]
   81b6c:	f043 0310 	orr.w	r3, r3, #16
   81b70:	e7e7      	b.n	81b42 <_vfiprintf_r+0x40a>
   81b72:	9508      	str	r5, [sp, #32]
   81b74:	f043 0310 	orr.w	r3, r3, #16
   81b78:	e707      	b.n	8198a <_vfiprintf_r+0x252>
   81b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81b7e:	f898 2000 	ldrb.w	r2, [r8]
   81b82:	e64b      	b.n	8181c <_vfiprintf_r+0xe4>
   81b84:	2500      	movs	r5, #0
   81b86:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81b8a:	f818 2b01 	ldrb.w	r2, [r8], #1
   81b8e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81b92:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   81b96:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81b9a:	2909      	cmp	r1, #9
   81b9c:	d9f5      	bls.n	81b8a <_vfiprintf_r+0x452>
   81b9e:	e63f      	b.n	81820 <_vfiprintf_r+0xe8>
   81ba0:	9508      	str	r5, [sp, #32]
   81ba2:	2800      	cmp	r0, #0
   81ba4:	f040 8402 	bne.w	823ac <_vfiprintf_r+0xc74>
   81ba8:	f043 0310 	orr.w	r3, r3, #16
   81bac:	069e      	lsls	r6, r3, #26
   81bae:	f100 833d 	bmi.w	8222c <_vfiprintf_r+0xaf4>
   81bb2:	9907      	ldr	r1, [sp, #28]
   81bb4:	06dd      	lsls	r5, r3, #27
   81bb6:	460a      	mov	r2, r1
   81bb8:	f100 82f0 	bmi.w	8219c <_vfiprintf_r+0xa64>
   81bbc:	0658      	lsls	r0, r3, #25
   81bbe:	f140 82ed 	bpl.w	8219c <_vfiprintf_r+0xa64>
   81bc2:	f9b1 6000 	ldrsh.w	r6, [r1]
   81bc6:	3204      	adds	r2, #4
   81bc8:	17f7      	asrs	r7, r6, #31
   81bca:	4630      	mov	r0, r6
   81bcc:	4639      	mov	r1, r7
   81bce:	9207      	str	r2, [sp, #28]
   81bd0:	2800      	cmp	r0, #0
   81bd2:	f171 0200 	sbcs.w	r2, r1, #0
   81bd6:	f2c0 835a 	blt.w	8228e <_vfiprintf_r+0xb56>
   81bda:	1c61      	adds	r1, r4, #1
   81bdc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81be0:	f04f 0201 	mov.w	r2, #1
   81be4:	f47f aee9 	bne.w	819ba <_vfiprintf_r+0x282>
   81be8:	ea56 0107 	orrs.w	r1, r6, r7
   81bec:	f000 824b 	beq.w	82086 <_vfiprintf_r+0x94e>
   81bf0:	9302      	str	r3, [sp, #8]
   81bf2:	2a01      	cmp	r2, #1
   81bf4:	f000 828a 	beq.w	8210c <_vfiprintf_r+0x9d4>
   81bf8:	2a02      	cmp	r2, #2
   81bfa:	f040 825a 	bne.w	820b2 <_vfiprintf_r+0x97a>
   81bfe:	46d3      	mov	fp, sl
   81c00:	980b      	ldr	r0, [sp, #44]	; 0x2c
   81c02:	0933      	lsrs	r3, r6, #4
   81c04:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81c08:	0939      	lsrs	r1, r7, #4
   81c0a:	f006 020f 	and.w	r2, r6, #15
   81c0e:	460f      	mov	r7, r1
   81c10:	461e      	mov	r6, r3
   81c12:	5c83      	ldrb	r3, [r0, r2]
   81c14:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81c18:	ea56 0307 	orrs.w	r3, r6, r7
   81c1c:	d1f1      	bne.n	81c02 <_vfiprintf_r+0x4ca>
   81c1e:	ebaa 030b 	sub.w	r3, sl, fp
   81c22:	9305      	str	r3, [sp, #20]
   81c24:	e6e0      	b.n	819e8 <_vfiprintf_r+0x2b0>
   81c26:	2800      	cmp	r0, #0
   81c28:	f040 83bd 	bne.w	823a6 <_vfiprintf_r+0xc6e>
   81c2c:	0699      	lsls	r1, r3, #26
   81c2e:	f100 8359 	bmi.w	822e4 <_vfiprintf_r+0xbac>
   81c32:	06da      	lsls	r2, r3, #27
   81c34:	f100 80e5 	bmi.w	81e02 <_vfiprintf_r+0x6ca>
   81c38:	065b      	lsls	r3, r3, #25
   81c3a:	f140 80e2 	bpl.w	81e02 <_vfiprintf_r+0x6ca>
   81c3e:	9a07      	ldr	r2, [sp, #28]
   81c40:	6813      	ldr	r3, [r2, #0]
   81c42:	3204      	adds	r2, #4
   81c44:	9207      	str	r2, [sp, #28]
   81c46:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   81c4a:	801a      	strh	r2, [r3, #0]
   81c4c:	e5b1      	b.n	817b2 <_vfiprintf_r+0x7a>
   81c4e:	2278      	movs	r2, #120	; 0x78
   81c50:	2130      	movs	r1, #48	; 0x30
   81c52:	9508      	str	r5, [sp, #32]
   81c54:	9d07      	ldr	r5, [sp, #28]
   81c56:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81c5a:	1d2a      	adds	r2, r5, #4
   81c5c:	9207      	str	r2, [sp, #28]
   81c5e:	4a3c      	ldr	r2, [pc, #240]	; (81d50 <_vfiprintf_r+0x618>)
   81c60:	682e      	ldr	r6, [r5, #0]
   81c62:	920b      	str	r2, [sp, #44]	; 0x2c
   81c64:	f043 0302 	orr.w	r3, r3, #2
   81c68:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81c6c:	2700      	movs	r7, #0
   81c6e:	2202      	movs	r2, #2
   81c70:	e69b      	b.n	819aa <_vfiprintf_r+0x272>
   81c72:	9508      	str	r5, [sp, #32]
   81c74:	2800      	cmp	r0, #0
   81c76:	d099      	beq.n	81bac <_vfiprintf_r+0x474>
   81c78:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81c7c:	e796      	b.n	81bac <_vfiprintf_r+0x474>
   81c7e:	f898 2000 	ldrb.w	r2, [r8]
   81c82:	2e00      	cmp	r6, #0
   81c84:	f47f adca 	bne.w	8181c <_vfiprintf_r+0xe4>
   81c88:	2001      	movs	r0, #1
   81c8a:	2620      	movs	r6, #32
   81c8c:	e5c6      	b.n	8181c <_vfiprintf_r+0xe4>
   81c8e:	f043 0301 	orr.w	r3, r3, #1
   81c92:	f898 2000 	ldrb.w	r2, [r8]
   81c96:	e5c1      	b.n	8181c <_vfiprintf_r+0xe4>
   81c98:	9508      	str	r5, [sp, #32]
   81c9a:	2800      	cmp	r0, #0
   81c9c:	f040 8380 	bne.w	823a0 <_vfiprintf_r+0xc68>
   81ca0:	492b      	ldr	r1, [pc, #172]	; (81d50 <_vfiprintf_r+0x618>)
   81ca2:	910b      	str	r1, [sp, #44]	; 0x2c
   81ca4:	069f      	lsls	r7, r3, #26
   81ca6:	f100 82e5 	bmi.w	82274 <_vfiprintf_r+0xb3c>
   81caa:	9807      	ldr	r0, [sp, #28]
   81cac:	06de      	lsls	r6, r3, #27
   81cae:	4601      	mov	r1, r0
   81cb0:	f100 826f 	bmi.w	82192 <_vfiprintf_r+0xa5a>
   81cb4:	065d      	lsls	r5, r3, #25
   81cb6:	f140 826c 	bpl.w	82192 <_vfiprintf_r+0xa5a>
   81cba:	2700      	movs	r7, #0
   81cbc:	3104      	adds	r1, #4
   81cbe:	8806      	ldrh	r6, [r0, #0]
   81cc0:	9107      	str	r1, [sp, #28]
   81cc2:	07d8      	lsls	r0, r3, #31
   81cc4:	f140 8220 	bpl.w	82108 <_vfiprintf_r+0x9d0>
   81cc8:	ea56 0107 	orrs.w	r1, r6, r7
   81ccc:	f000 821c 	beq.w	82108 <_vfiprintf_r+0x9d0>
   81cd0:	2130      	movs	r1, #48	; 0x30
   81cd2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81cd6:	f043 0302 	orr.w	r3, r3, #2
   81cda:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81cde:	2202      	movs	r2, #2
   81ce0:	e663      	b.n	819aa <_vfiprintf_r+0x272>
   81ce2:	9508      	str	r5, [sp, #32]
   81ce4:	2800      	cmp	r0, #0
   81ce6:	f040 8355 	bne.w	82394 <_vfiprintf_r+0xc5c>
   81cea:	491a      	ldr	r1, [pc, #104]	; (81d54 <_vfiprintf_r+0x61c>)
   81cec:	910b      	str	r1, [sp, #44]	; 0x2c
   81cee:	e7d9      	b.n	81ca4 <_vfiprintf_r+0x56c>
   81cf0:	2201      	movs	r2, #1
   81cf2:	9807      	ldr	r0, [sp, #28]
   81cf4:	4611      	mov	r1, r2
   81cf6:	9201      	str	r2, [sp, #4]
   81cf8:	6802      	ldr	r2, [r0, #0]
   81cfa:	f04f 0400 	mov.w	r4, #0
   81cfe:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81d02:	4602      	mov	r2, r0
   81d04:	3204      	adds	r2, #4
   81d06:	9508      	str	r5, [sp, #32]
   81d08:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81d0c:	9105      	str	r1, [sp, #20]
   81d0e:	9207      	str	r2, [sp, #28]
   81d10:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81d14:	9302      	str	r3, [sp, #8]
   81d16:	2400      	movs	r4, #0
   81d18:	e66e      	b.n	819f8 <_vfiprintf_r+0x2c0>
   81d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d1e:	f898 2000 	ldrb.w	r2, [r8]
   81d22:	e57b      	b.n	8181c <_vfiprintf_r+0xe4>
   81d24:	f898 2000 	ldrb.w	r2, [r8]
   81d28:	2a6c      	cmp	r2, #108	; 0x6c
   81d2a:	bf03      	ittte	eq
   81d2c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81d30:	f043 0320 	orreq.w	r3, r3, #32
   81d34:	f108 0801 	addeq.w	r8, r8, #1
   81d38:	f043 0310 	orrne.w	r3, r3, #16
   81d3c:	e56e      	b.n	8181c <_vfiprintf_r+0xe4>
   81d3e:	f898 2000 	ldrb.w	r2, [r8]
   81d42:	2001      	movs	r0, #1
   81d44:	262b      	movs	r6, #43	; 0x2b
   81d46:	e569      	b.n	8181c <_vfiprintf_r+0xe4>
   81d48:	000842b8 	.word	0x000842b8
   81d4c:	000842c8 	.word	0x000842c8
   81d50:	0008429c 	.word	0x0008429c
   81d54:	00084288 	.word	0x00084288
   81d58:	f04f 0200 	mov.w	r2, #0
   81d5c:	9907      	ldr	r1, [sp, #28]
   81d5e:	9508      	str	r5, [sp, #32]
   81d60:	f8d1 b000 	ldr.w	fp, [r1]
   81d64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81d68:	1d0d      	adds	r5, r1, #4
   81d6a:	f1bb 0f00 	cmp.w	fp, #0
   81d6e:	f000 82e4 	beq.w	8233a <_vfiprintf_r+0xc02>
   81d72:	1c67      	adds	r7, r4, #1
   81d74:	f000 82c3 	beq.w	822fe <_vfiprintf_r+0xbc6>
   81d78:	4622      	mov	r2, r4
   81d7a:	2100      	movs	r1, #0
   81d7c:	4658      	mov	r0, fp
   81d7e:	9301      	str	r3, [sp, #4]
   81d80:	f001 fbc6 	bl	83510 <memchr>
   81d84:	9b01      	ldr	r3, [sp, #4]
   81d86:	2800      	cmp	r0, #0
   81d88:	f000 82e8 	beq.w	8235c <_vfiprintf_r+0xc24>
   81d8c:	eba0 020b 	sub.w	r2, r0, fp
   81d90:	9507      	str	r5, [sp, #28]
   81d92:	9205      	str	r2, [sp, #20]
   81d94:	9302      	str	r3, [sp, #8]
   81d96:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81d9a:	2400      	movs	r4, #0
   81d9c:	e624      	b.n	819e8 <_vfiprintf_r+0x2b0>
   81d9e:	f898 2000 	ldrb.w	r2, [r8]
   81da2:	f108 0701 	add.w	r7, r8, #1
   81da6:	2a2a      	cmp	r2, #42	; 0x2a
   81da8:	f000 82e9 	beq.w	8237e <_vfiprintf_r+0xc46>
   81dac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81db0:	2909      	cmp	r1, #9
   81db2:	46b8      	mov	r8, r7
   81db4:	f04f 0400 	mov.w	r4, #0
   81db8:	f63f ad32 	bhi.w	81820 <_vfiprintf_r+0xe8>
   81dbc:	f818 2b01 	ldrb.w	r2, [r8], #1
   81dc0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81dc4:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81dc8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81dcc:	2909      	cmp	r1, #9
   81dce:	d9f5      	bls.n	81dbc <_vfiprintf_r+0x684>
   81dd0:	e526      	b.n	81820 <_vfiprintf_r+0xe8>
   81dd2:	f043 0320 	orr.w	r3, r3, #32
   81dd6:	f898 2000 	ldrb.w	r2, [r8]
   81dda:	e51f      	b.n	8181c <_vfiprintf_r+0xe4>
   81ddc:	9508      	str	r5, [sp, #32]
   81dde:	2800      	cmp	r0, #0
   81de0:	f040 82db 	bne.w	8239a <_vfiprintf_r+0xc62>
   81de4:	2a00      	cmp	r2, #0
   81de6:	f000 80f1 	beq.w	81fcc <_vfiprintf_r+0x894>
   81dea:	2101      	movs	r1, #1
   81dec:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81df0:	f04f 0200 	mov.w	r2, #0
   81df4:	9101      	str	r1, [sp, #4]
   81df6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81dfa:	9105      	str	r1, [sp, #20]
   81dfc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81e00:	e788      	b.n	81d14 <_vfiprintf_r+0x5dc>
   81e02:	9a07      	ldr	r2, [sp, #28]
   81e04:	6813      	ldr	r3, [r2, #0]
   81e06:	3204      	adds	r2, #4
   81e08:	9207      	str	r2, [sp, #28]
   81e0a:	9a03      	ldr	r2, [sp, #12]
   81e0c:	601a      	str	r2, [r3, #0]
   81e0e:	e4d0      	b.n	817b2 <_vfiprintf_r+0x7a>
   81e10:	aa0f      	add	r2, sp, #60	; 0x3c
   81e12:	9904      	ldr	r1, [sp, #16]
   81e14:	4620      	mov	r0, r4
   81e16:	f7ff fc4f 	bl	816b8 <__sprint_r.part.0>
   81e1a:	2800      	cmp	r0, #0
   81e1c:	f040 8143 	bne.w	820a6 <_vfiprintf_r+0x96e>
   81e20:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e22:	46d6      	mov	lr, sl
   81e24:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e26:	f101 0c01 	add.w	ip, r1, #1
   81e2a:	e60a      	b.n	81a42 <_vfiprintf_r+0x30a>
   81e2c:	aa0f      	add	r2, sp, #60	; 0x3c
   81e2e:	9904      	ldr	r1, [sp, #16]
   81e30:	9806      	ldr	r0, [sp, #24]
   81e32:	f7ff fc41 	bl	816b8 <__sprint_r.part.0>
   81e36:	2800      	cmp	r0, #0
   81e38:	f040 8135 	bne.w	820a6 <_vfiprintf_r+0x96e>
   81e3c:	46d1      	mov	r9, sl
   81e3e:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e40:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e44:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e46:	1c48      	adds	r0, r1, #1
   81e48:	2d00      	cmp	r5, #0
   81e4a:	f43f ae24 	beq.w	81a96 <_vfiprintf_r+0x35e>
   81e4e:	2101      	movs	r1, #1
   81e50:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81e54:	440a      	add	r2, r1
   81e56:	2807      	cmp	r0, #7
   81e58:	9211      	str	r2, [sp, #68]	; 0x44
   81e5a:	9010      	str	r0, [sp, #64]	; 0x40
   81e5c:	f8c9 1004 	str.w	r1, [r9, #4]
   81e60:	f8c9 5000 	str.w	r5, [r9]
   81e64:	f340 8109 	ble.w	8207a <_vfiprintf_r+0x942>
   81e68:	2a00      	cmp	r2, #0
   81e6a:	f040 81af 	bne.w	821cc <_vfiprintf_r+0xa94>
   81e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81e70:	2b00      	cmp	r3, #0
   81e72:	f43f ae23 	beq.w	81abc <_vfiprintf_r+0x384>
   81e76:	2202      	movs	r2, #2
   81e78:	4608      	mov	r0, r1
   81e7a:	46d1      	mov	r9, sl
   81e7c:	ab0e      	add	r3, sp, #56	; 0x38
   81e7e:	921d      	str	r2, [sp, #116]	; 0x74
   81e80:	931c      	str	r3, [sp, #112]	; 0x70
   81e82:	4601      	mov	r1, r0
   81e84:	f109 0908 	add.w	r9, r9, #8
   81e88:	3001      	adds	r0, #1
   81e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81e8c:	2b80      	cmp	r3, #128	; 0x80
   81e8e:	f43f ae1c 	beq.w	81aca <_vfiprintf_r+0x392>
   81e92:	9b05      	ldr	r3, [sp, #20]
   81e94:	1ae4      	subs	r4, r4, r3
   81e96:	2c00      	cmp	r4, #0
   81e98:	dd2f      	ble.n	81efa <_vfiprintf_r+0x7c2>
   81e9a:	2c10      	cmp	r4, #16
   81e9c:	f340 8220 	ble.w	822e0 <_vfiprintf_r+0xba8>
   81ea0:	46ce      	mov	lr, r9
   81ea2:	2610      	movs	r6, #16
   81ea4:	4db2      	ldr	r5, [pc, #712]	; (82170 <_vfiprintf_r+0xa38>)
   81ea6:	9f06      	ldr	r7, [sp, #24]
   81ea8:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81eac:	e006      	b.n	81ebc <_vfiprintf_r+0x784>
   81eae:	1c88      	adds	r0, r1, #2
   81eb0:	4619      	mov	r1, r3
   81eb2:	f10e 0e08 	add.w	lr, lr, #8
   81eb6:	3c10      	subs	r4, #16
   81eb8:	2c10      	cmp	r4, #16
   81eba:	dd10      	ble.n	81ede <_vfiprintf_r+0x7a6>
   81ebc:	1c4b      	adds	r3, r1, #1
   81ebe:	3210      	adds	r2, #16
   81ec0:	2b07      	cmp	r3, #7
   81ec2:	9211      	str	r2, [sp, #68]	; 0x44
   81ec4:	e88e 0060 	stmia.w	lr, {r5, r6}
   81ec8:	9310      	str	r3, [sp, #64]	; 0x40
   81eca:	ddf0      	ble.n	81eae <_vfiprintf_r+0x776>
   81ecc:	2a00      	cmp	r2, #0
   81ece:	d165      	bne.n	81f9c <_vfiprintf_r+0x864>
   81ed0:	3c10      	subs	r4, #16
   81ed2:	2c10      	cmp	r4, #16
   81ed4:	f04f 0001 	mov.w	r0, #1
   81ed8:	4611      	mov	r1, r2
   81eda:	46d6      	mov	lr, sl
   81edc:	dcee      	bgt.n	81ebc <_vfiprintf_r+0x784>
   81ede:	46f1      	mov	r9, lr
   81ee0:	4422      	add	r2, r4
   81ee2:	2807      	cmp	r0, #7
   81ee4:	9211      	str	r2, [sp, #68]	; 0x44
   81ee6:	f8c9 5000 	str.w	r5, [r9]
   81eea:	f8c9 4004 	str.w	r4, [r9, #4]
   81eee:	9010      	str	r0, [sp, #64]	; 0x40
   81ef0:	f300 8085 	bgt.w	81ffe <_vfiprintf_r+0x8c6>
   81ef4:	f109 0908 	add.w	r9, r9, #8
   81ef8:	3001      	adds	r0, #1
   81efa:	9905      	ldr	r1, [sp, #20]
   81efc:	2807      	cmp	r0, #7
   81efe:	440a      	add	r2, r1
   81f00:	9211      	str	r2, [sp, #68]	; 0x44
   81f02:	f8c9 b000 	str.w	fp, [r9]
   81f06:	f8c9 1004 	str.w	r1, [r9, #4]
   81f0a:	9010      	str	r0, [sp, #64]	; 0x40
   81f0c:	f340 8082 	ble.w	82014 <_vfiprintf_r+0x8dc>
   81f10:	2a00      	cmp	r2, #0
   81f12:	f040 8118 	bne.w	82146 <_vfiprintf_r+0xa0e>
   81f16:	9b02      	ldr	r3, [sp, #8]
   81f18:	9210      	str	r2, [sp, #64]	; 0x40
   81f1a:	0758      	lsls	r0, r3, #29
   81f1c:	d535      	bpl.n	81f8a <_vfiprintf_r+0x852>
   81f1e:	9b08      	ldr	r3, [sp, #32]
   81f20:	9901      	ldr	r1, [sp, #4]
   81f22:	1a5c      	subs	r4, r3, r1
   81f24:	2c00      	cmp	r4, #0
   81f26:	f340 80e7 	ble.w	820f8 <_vfiprintf_r+0x9c0>
   81f2a:	46d1      	mov	r9, sl
   81f2c:	2c10      	cmp	r4, #16
   81f2e:	f340 820d 	ble.w	8234c <_vfiprintf_r+0xc14>
   81f32:	2510      	movs	r5, #16
   81f34:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f36:	4e8f      	ldr	r6, [pc, #572]	; (82174 <_vfiprintf_r+0xa3c>)
   81f38:	9f06      	ldr	r7, [sp, #24]
   81f3a:	f8dd b010 	ldr.w	fp, [sp, #16]
   81f3e:	e006      	b.n	81f4e <_vfiprintf_r+0x816>
   81f40:	1c88      	adds	r0, r1, #2
   81f42:	4619      	mov	r1, r3
   81f44:	f109 0908 	add.w	r9, r9, #8
   81f48:	3c10      	subs	r4, #16
   81f4a:	2c10      	cmp	r4, #16
   81f4c:	dd11      	ble.n	81f72 <_vfiprintf_r+0x83a>
   81f4e:	1c4b      	adds	r3, r1, #1
   81f50:	3210      	adds	r2, #16
   81f52:	2b07      	cmp	r3, #7
   81f54:	9211      	str	r2, [sp, #68]	; 0x44
   81f56:	f8c9 6000 	str.w	r6, [r9]
   81f5a:	f8c9 5004 	str.w	r5, [r9, #4]
   81f5e:	9310      	str	r3, [sp, #64]	; 0x40
   81f60:	ddee      	ble.n	81f40 <_vfiprintf_r+0x808>
   81f62:	bb42      	cbnz	r2, 81fb6 <_vfiprintf_r+0x87e>
   81f64:	3c10      	subs	r4, #16
   81f66:	2c10      	cmp	r4, #16
   81f68:	f04f 0001 	mov.w	r0, #1
   81f6c:	4611      	mov	r1, r2
   81f6e:	46d1      	mov	r9, sl
   81f70:	dced      	bgt.n	81f4e <_vfiprintf_r+0x816>
   81f72:	4422      	add	r2, r4
   81f74:	2807      	cmp	r0, #7
   81f76:	9211      	str	r2, [sp, #68]	; 0x44
   81f78:	f8c9 6000 	str.w	r6, [r9]
   81f7c:	f8c9 4004 	str.w	r4, [r9, #4]
   81f80:	9010      	str	r0, [sp, #64]	; 0x40
   81f82:	dd51      	ble.n	82028 <_vfiprintf_r+0x8f0>
   81f84:	2a00      	cmp	r2, #0
   81f86:	f040 819a 	bne.w	822be <_vfiprintf_r+0xb86>
   81f8a:	9b03      	ldr	r3, [sp, #12]
   81f8c:	9a08      	ldr	r2, [sp, #32]
   81f8e:	9901      	ldr	r1, [sp, #4]
   81f90:	428a      	cmp	r2, r1
   81f92:	bfac      	ite	ge
   81f94:	189b      	addge	r3, r3, r2
   81f96:	185b      	addlt	r3, r3, r1
   81f98:	9303      	str	r3, [sp, #12]
   81f9a:	e04e      	b.n	8203a <_vfiprintf_r+0x902>
   81f9c:	aa0f      	add	r2, sp, #60	; 0x3c
   81f9e:	4649      	mov	r1, r9
   81fa0:	4638      	mov	r0, r7
   81fa2:	f7ff fb89 	bl	816b8 <__sprint_r.part.0>
   81fa6:	2800      	cmp	r0, #0
   81fa8:	f040 813e 	bne.w	82228 <_vfiprintf_r+0xaf0>
   81fac:	9910      	ldr	r1, [sp, #64]	; 0x40
   81fae:	46d6      	mov	lr, sl
   81fb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81fb2:	1c48      	adds	r0, r1, #1
   81fb4:	e77f      	b.n	81eb6 <_vfiprintf_r+0x77e>
   81fb6:	aa0f      	add	r2, sp, #60	; 0x3c
   81fb8:	4659      	mov	r1, fp
   81fba:	4638      	mov	r0, r7
   81fbc:	f7ff fb7c 	bl	816b8 <__sprint_r.part.0>
   81fc0:	b960      	cbnz	r0, 81fdc <_vfiprintf_r+0x8a4>
   81fc2:	9910      	ldr	r1, [sp, #64]	; 0x40
   81fc4:	46d1      	mov	r9, sl
   81fc6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81fc8:	1c48      	adds	r0, r1, #1
   81fca:	e7bd      	b.n	81f48 <_vfiprintf_r+0x810>
   81fcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81fce:	f8dd b010 	ldr.w	fp, [sp, #16]
   81fd2:	2b00      	cmp	r3, #0
   81fd4:	f040 81ca 	bne.w	8236c <_vfiprintf_r+0xc34>
   81fd8:	2300      	movs	r3, #0
   81fda:	9310      	str	r3, [sp, #64]	; 0x40
   81fdc:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81fe0:	f013 0f01 	tst.w	r3, #1
   81fe4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81fe8:	d102      	bne.n	81ff0 <_vfiprintf_r+0x8b8>
   81fea:	059a      	lsls	r2, r3, #22
   81fec:	f140 80dd 	bpl.w	821aa <_vfiprintf_r+0xa72>
   81ff0:	065b      	lsls	r3, r3, #25
   81ff2:	f53f acad 	bmi.w	81950 <_vfiprintf_r+0x218>
   81ff6:	9803      	ldr	r0, [sp, #12]
   81ff8:	b02d      	add	sp, #180	; 0xb4
   81ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81ffe:	2a00      	cmp	r2, #0
   82000:	f040 8105 	bne.w	8220e <_vfiprintf_r+0xad6>
   82004:	2301      	movs	r3, #1
   82006:	46d1      	mov	r9, sl
   82008:	9a05      	ldr	r2, [sp, #20]
   8200a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8200e:	921d      	str	r2, [sp, #116]	; 0x74
   82010:	9211      	str	r2, [sp, #68]	; 0x44
   82012:	9310      	str	r3, [sp, #64]	; 0x40
   82014:	f109 0908 	add.w	r9, r9, #8
   82018:	9b02      	ldr	r3, [sp, #8]
   8201a:	0759      	lsls	r1, r3, #29
   8201c:	d504      	bpl.n	82028 <_vfiprintf_r+0x8f0>
   8201e:	9b08      	ldr	r3, [sp, #32]
   82020:	9901      	ldr	r1, [sp, #4]
   82022:	1a5c      	subs	r4, r3, r1
   82024:	2c00      	cmp	r4, #0
   82026:	dc81      	bgt.n	81f2c <_vfiprintf_r+0x7f4>
   82028:	9b03      	ldr	r3, [sp, #12]
   8202a:	9908      	ldr	r1, [sp, #32]
   8202c:	9801      	ldr	r0, [sp, #4]
   8202e:	4281      	cmp	r1, r0
   82030:	bfac      	ite	ge
   82032:	185b      	addge	r3, r3, r1
   82034:	181b      	addlt	r3, r3, r0
   82036:	9303      	str	r3, [sp, #12]
   82038:	bb72      	cbnz	r2, 82098 <_vfiprintf_r+0x960>
   8203a:	2300      	movs	r3, #0
   8203c:	46d1      	mov	r9, sl
   8203e:	9310      	str	r3, [sp, #64]	; 0x40
   82040:	f7ff bbb7 	b.w	817b2 <_vfiprintf_r+0x7a>
   82044:	aa0f      	add	r2, sp, #60	; 0x3c
   82046:	9904      	ldr	r1, [sp, #16]
   82048:	4620      	mov	r0, r4
   8204a:	f7ff fb35 	bl	816b8 <__sprint_r.part.0>
   8204e:	bb50      	cbnz	r0, 820a6 <_vfiprintf_r+0x96e>
   82050:	9910      	ldr	r1, [sp, #64]	; 0x40
   82052:	46d4      	mov	ip, sl
   82054:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82056:	f101 0e01 	add.w	lr, r1, #1
   8205a:	e54a      	b.n	81af2 <_vfiprintf_r+0x3ba>
   8205c:	2a00      	cmp	r2, #0
   8205e:	f47f aee5 	bne.w	81e2c <_vfiprintf_r+0x6f4>
   82062:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82066:	2900      	cmp	r1, #0
   82068:	f000 811a 	beq.w	822a0 <_vfiprintf_r+0xb68>
   8206c:	2201      	movs	r2, #1
   8206e:	46d1      	mov	r9, sl
   82070:	4610      	mov	r0, r2
   82072:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82076:	921d      	str	r2, [sp, #116]	; 0x74
   82078:	911c      	str	r1, [sp, #112]	; 0x70
   8207a:	4601      	mov	r1, r0
   8207c:	f109 0908 	add.w	r9, r9, #8
   82080:	3001      	adds	r0, #1
   82082:	e508      	b.n	81a96 <_vfiprintf_r+0x35e>
   82084:	9b02      	ldr	r3, [sp, #8]
   82086:	2a01      	cmp	r2, #1
   82088:	f000 8097 	beq.w	821ba <_vfiprintf_r+0xa82>
   8208c:	2a02      	cmp	r2, #2
   8208e:	d10d      	bne.n	820ac <_vfiprintf_r+0x974>
   82090:	9302      	str	r3, [sp, #8]
   82092:	2600      	movs	r6, #0
   82094:	2700      	movs	r7, #0
   82096:	e5b2      	b.n	81bfe <_vfiprintf_r+0x4c6>
   82098:	aa0f      	add	r2, sp, #60	; 0x3c
   8209a:	9904      	ldr	r1, [sp, #16]
   8209c:	9806      	ldr	r0, [sp, #24]
   8209e:	f7ff fb0b 	bl	816b8 <__sprint_r.part.0>
   820a2:	2800      	cmp	r0, #0
   820a4:	d0c9      	beq.n	8203a <_vfiprintf_r+0x902>
   820a6:	f8dd b010 	ldr.w	fp, [sp, #16]
   820aa:	e797      	b.n	81fdc <_vfiprintf_r+0x8a4>
   820ac:	2600      	movs	r6, #0
   820ae:	2700      	movs	r7, #0
   820b0:	9302      	str	r3, [sp, #8]
   820b2:	4651      	mov	r1, sl
   820b4:	e000      	b.n	820b8 <_vfiprintf_r+0x980>
   820b6:	4659      	mov	r1, fp
   820b8:	08f2      	lsrs	r2, r6, #3
   820ba:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   820be:	08f8      	lsrs	r0, r7, #3
   820c0:	f006 0307 	and.w	r3, r6, #7
   820c4:	4607      	mov	r7, r0
   820c6:	4616      	mov	r6, r2
   820c8:	3330      	adds	r3, #48	; 0x30
   820ca:	ea56 0207 	orrs.w	r2, r6, r7
   820ce:	f801 3c01 	strb.w	r3, [r1, #-1]
   820d2:	f101 3bff 	add.w	fp, r1, #4294967295
   820d6:	d1ee      	bne.n	820b6 <_vfiprintf_r+0x97e>
   820d8:	9a02      	ldr	r2, [sp, #8]
   820da:	07d6      	lsls	r6, r2, #31
   820dc:	f57f ad9f 	bpl.w	81c1e <_vfiprintf_r+0x4e6>
   820e0:	2b30      	cmp	r3, #48	; 0x30
   820e2:	f43f ad9c 	beq.w	81c1e <_vfiprintf_r+0x4e6>
   820e6:	2330      	movs	r3, #48	; 0x30
   820e8:	3902      	subs	r1, #2
   820ea:	f80b 3c01 	strb.w	r3, [fp, #-1]
   820ee:	ebaa 0301 	sub.w	r3, sl, r1
   820f2:	9305      	str	r3, [sp, #20]
   820f4:	468b      	mov	fp, r1
   820f6:	e477      	b.n	819e8 <_vfiprintf_r+0x2b0>
   820f8:	9b03      	ldr	r3, [sp, #12]
   820fa:	9a08      	ldr	r2, [sp, #32]
   820fc:	428a      	cmp	r2, r1
   820fe:	bfac      	ite	ge
   82100:	189b      	addge	r3, r3, r2
   82102:	185b      	addlt	r3, r3, r1
   82104:	9303      	str	r3, [sp, #12]
   82106:	e798      	b.n	8203a <_vfiprintf_r+0x902>
   82108:	2202      	movs	r2, #2
   8210a:	e44e      	b.n	819aa <_vfiprintf_r+0x272>
   8210c:	2f00      	cmp	r7, #0
   8210e:	bf08      	it	eq
   82110:	2e0a      	cmpeq	r6, #10
   82112:	d351      	bcc.n	821b8 <_vfiprintf_r+0xa80>
   82114:	46d3      	mov	fp, sl
   82116:	4630      	mov	r0, r6
   82118:	4639      	mov	r1, r7
   8211a:	220a      	movs	r2, #10
   8211c:	2300      	movs	r3, #0
   8211e:	f001 fefb 	bl	83f18 <__aeabi_uldivmod>
   82122:	3230      	adds	r2, #48	; 0x30
   82124:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   82128:	4630      	mov	r0, r6
   8212a:	4639      	mov	r1, r7
   8212c:	2300      	movs	r3, #0
   8212e:	220a      	movs	r2, #10
   82130:	f001 fef2 	bl	83f18 <__aeabi_uldivmod>
   82134:	4606      	mov	r6, r0
   82136:	460f      	mov	r7, r1
   82138:	ea56 0307 	orrs.w	r3, r6, r7
   8213c:	d1eb      	bne.n	82116 <_vfiprintf_r+0x9de>
   8213e:	e56e      	b.n	81c1e <_vfiprintf_r+0x4e6>
   82140:	9405      	str	r4, [sp, #20]
   82142:	46d3      	mov	fp, sl
   82144:	e450      	b.n	819e8 <_vfiprintf_r+0x2b0>
   82146:	aa0f      	add	r2, sp, #60	; 0x3c
   82148:	9904      	ldr	r1, [sp, #16]
   8214a:	9806      	ldr	r0, [sp, #24]
   8214c:	f7ff fab4 	bl	816b8 <__sprint_r.part.0>
   82150:	2800      	cmp	r0, #0
   82152:	d1a8      	bne.n	820a6 <_vfiprintf_r+0x96e>
   82154:	46d1      	mov	r9, sl
   82156:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82158:	e75e      	b.n	82018 <_vfiprintf_r+0x8e0>
   8215a:	aa0f      	add	r2, sp, #60	; 0x3c
   8215c:	9904      	ldr	r1, [sp, #16]
   8215e:	9806      	ldr	r0, [sp, #24]
   82160:	f7ff faaa 	bl	816b8 <__sprint_r.part.0>
   82164:	2800      	cmp	r0, #0
   82166:	d19e      	bne.n	820a6 <_vfiprintf_r+0x96e>
   82168:	46d1      	mov	r9, sl
   8216a:	f7ff bbbb 	b.w	818e4 <_vfiprintf_r+0x1ac>
   8216e:	bf00      	nop
   82170:	000842c8 	.word	0x000842c8
   82174:	000842b8 	.word	0x000842b8
   82178:	3104      	adds	r1, #4
   8217a:	6816      	ldr	r6, [r2, #0]
   8217c:	2700      	movs	r7, #0
   8217e:	2201      	movs	r2, #1
   82180:	9107      	str	r1, [sp, #28]
   82182:	e412      	b.n	819aa <_vfiprintf_r+0x272>
   82184:	9807      	ldr	r0, [sp, #28]
   82186:	2700      	movs	r7, #0
   82188:	4601      	mov	r1, r0
   8218a:	3104      	adds	r1, #4
   8218c:	6806      	ldr	r6, [r0, #0]
   8218e:	9107      	str	r1, [sp, #28]
   82190:	e40b      	b.n	819aa <_vfiprintf_r+0x272>
   82192:	680e      	ldr	r6, [r1, #0]
   82194:	3104      	adds	r1, #4
   82196:	9107      	str	r1, [sp, #28]
   82198:	2700      	movs	r7, #0
   8219a:	e592      	b.n	81cc2 <_vfiprintf_r+0x58a>
   8219c:	6816      	ldr	r6, [r2, #0]
   8219e:	3204      	adds	r2, #4
   821a0:	17f7      	asrs	r7, r6, #31
   821a2:	9207      	str	r2, [sp, #28]
   821a4:	4630      	mov	r0, r6
   821a6:	4639      	mov	r1, r7
   821a8:	e512      	b.n	81bd0 <_vfiprintf_r+0x498>
   821aa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   821ae:	f000 fe75 	bl	82e9c <__retarget_lock_release_recursive>
   821b2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   821b6:	e71b      	b.n	81ff0 <_vfiprintf_r+0x8b8>
   821b8:	9b02      	ldr	r3, [sp, #8]
   821ba:	9302      	str	r3, [sp, #8]
   821bc:	2301      	movs	r3, #1
   821be:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   821c2:	3630      	adds	r6, #48	; 0x30
   821c4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   821c8:	9305      	str	r3, [sp, #20]
   821ca:	e40d      	b.n	819e8 <_vfiprintf_r+0x2b0>
   821cc:	aa0f      	add	r2, sp, #60	; 0x3c
   821ce:	9904      	ldr	r1, [sp, #16]
   821d0:	9806      	ldr	r0, [sp, #24]
   821d2:	f7ff fa71 	bl	816b8 <__sprint_r.part.0>
   821d6:	2800      	cmp	r0, #0
   821d8:	f47f af65 	bne.w	820a6 <_vfiprintf_r+0x96e>
   821dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   821de:	46d1      	mov	r9, sl
   821e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821e2:	1c48      	adds	r0, r1, #1
   821e4:	e457      	b.n	81a96 <_vfiprintf_r+0x35e>
   821e6:	aa0f      	add	r2, sp, #60	; 0x3c
   821e8:	9904      	ldr	r1, [sp, #16]
   821ea:	9806      	ldr	r0, [sp, #24]
   821ec:	f7ff fa64 	bl	816b8 <__sprint_r.part.0>
   821f0:	2800      	cmp	r0, #0
   821f2:	f47f af58 	bne.w	820a6 <_vfiprintf_r+0x96e>
   821f6:	9910      	ldr	r1, [sp, #64]	; 0x40
   821f8:	46d1      	mov	r9, sl
   821fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821fc:	1c48      	adds	r0, r1, #1
   821fe:	e644      	b.n	81e8a <_vfiprintf_r+0x752>
   82200:	2a00      	cmp	r2, #0
   82202:	f040 8087 	bne.w	82314 <_vfiprintf_r+0xbdc>
   82206:	2001      	movs	r0, #1
   82208:	4611      	mov	r1, r2
   8220a:	46d1      	mov	r9, sl
   8220c:	e641      	b.n	81e92 <_vfiprintf_r+0x75a>
   8220e:	aa0f      	add	r2, sp, #60	; 0x3c
   82210:	9904      	ldr	r1, [sp, #16]
   82212:	9806      	ldr	r0, [sp, #24]
   82214:	f7ff fa50 	bl	816b8 <__sprint_r.part.0>
   82218:	2800      	cmp	r0, #0
   8221a:	f47f af44 	bne.w	820a6 <_vfiprintf_r+0x96e>
   8221e:	9810      	ldr	r0, [sp, #64]	; 0x40
   82220:	46d1      	mov	r9, sl
   82222:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82224:	3001      	adds	r0, #1
   82226:	e668      	b.n	81efa <_vfiprintf_r+0x7c2>
   82228:	46cb      	mov	fp, r9
   8222a:	e6d7      	b.n	81fdc <_vfiprintf_r+0x8a4>
   8222c:	9d07      	ldr	r5, [sp, #28]
   8222e:	3507      	adds	r5, #7
   82230:	f025 0507 	bic.w	r5, r5, #7
   82234:	f105 0208 	add.w	r2, r5, #8
   82238:	e9d5 0100 	ldrd	r0, r1, [r5]
   8223c:	9207      	str	r2, [sp, #28]
   8223e:	4606      	mov	r6, r0
   82240:	460f      	mov	r7, r1
   82242:	e4c5      	b.n	81bd0 <_vfiprintf_r+0x498>
   82244:	9d07      	ldr	r5, [sp, #28]
   82246:	3507      	adds	r5, #7
   82248:	f025 0207 	bic.w	r2, r5, #7
   8224c:	f102 0108 	add.w	r1, r2, #8
   82250:	e9d2 6700 	ldrd	r6, r7, [r2]
   82254:	9107      	str	r1, [sp, #28]
   82256:	2201      	movs	r2, #1
   82258:	f7ff bba7 	b.w	819aa <_vfiprintf_r+0x272>
   8225c:	9d07      	ldr	r5, [sp, #28]
   8225e:	3507      	adds	r5, #7
   82260:	f025 0207 	bic.w	r2, r5, #7
   82264:	f102 0108 	add.w	r1, r2, #8
   82268:	e9d2 6700 	ldrd	r6, r7, [r2]
   8226c:	9107      	str	r1, [sp, #28]
   8226e:	2200      	movs	r2, #0
   82270:	f7ff bb9b 	b.w	819aa <_vfiprintf_r+0x272>
   82274:	9d07      	ldr	r5, [sp, #28]
   82276:	3507      	adds	r5, #7
   82278:	f025 0107 	bic.w	r1, r5, #7
   8227c:	f101 0008 	add.w	r0, r1, #8
   82280:	9007      	str	r0, [sp, #28]
   82282:	e9d1 6700 	ldrd	r6, r7, [r1]
   82286:	e51c      	b.n	81cc2 <_vfiprintf_r+0x58a>
   82288:	46d3      	mov	fp, sl
   8228a:	f7ff bbad 	b.w	819e8 <_vfiprintf_r+0x2b0>
   8228e:	252d      	movs	r5, #45	; 0x2d
   82290:	4276      	negs	r6, r6
   82292:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82296:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8229a:	2201      	movs	r2, #1
   8229c:	f7ff bb8a 	b.w	819b4 <_vfiprintf_r+0x27c>
   822a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   822a2:	b9b3      	cbnz	r3, 822d2 <_vfiprintf_r+0xb9a>
   822a4:	4611      	mov	r1, r2
   822a6:	2001      	movs	r0, #1
   822a8:	46d1      	mov	r9, sl
   822aa:	e5f2      	b.n	81e92 <_vfiprintf_r+0x75a>
   822ac:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   822b0:	f000 fdf4 	bl	82e9c <__retarget_lock_release_recursive>
   822b4:	f04f 33ff 	mov.w	r3, #4294967295
   822b8:	9303      	str	r3, [sp, #12]
   822ba:	f7ff bb4c 	b.w	81956 <_vfiprintf_r+0x21e>
   822be:	aa0f      	add	r2, sp, #60	; 0x3c
   822c0:	9904      	ldr	r1, [sp, #16]
   822c2:	9806      	ldr	r0, [sp, #24]
   822c4:	f7ff f9f8 	bl	816b8 <__sprint_r.part.0>
   822c8:	2800      	cmp	r0, #0
   822ca:	f47f aeec 	bne.w	820a6 <_vfiprintf_r+0x96e>
   822ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   822d0:	e6aa      	b.n	82028 <_vfiprintf_r+0x8f0>
   822d2:	2202      	movs	r2, #2
   822d4:	ab0e      	add	r3, sp, #56	; 0x38
   822d6:	921d      	str	r2, [sp, #116]	; 0x74
   822d8:	931c      	str	r3, [sp, #112]	; 0x70
   822da:	2001      	movs	r0, #1
   822dc:	46d1      	mov	r9, sl
   822de:	e5d0      	b.n	81e82 <_vfiprintf_r+0x74a>
   822e0:	4d34      	ldr	r5, [pc, #208]	; (823b4 <_vfiprintf_r+0xc7c>)
   822e2:	e5fd      	b.n	81ee0 <_vfiprintf_r+0x7a8>
   822e4:	9a07      	ldr	r2, [sp, #28]
   822e6:	4613      	mov	r3, r2
   822e8:	3304      	adds	r3, #4
   822ea:	9307      	str	r3, [sp, #28]
   822ec:	9b03      	ldr	r3, [sp, #12]
   822ee:	6811      	ldr	r1, [r2, #0]
   822f0:	17dd      	asrs	r5, r3, #31
   822f2:	461a      	mov	r2, r3
   822f4:	462b      	mov	r3, r5
   822f6:	e9c1 2300 	strd	r2, r3, [r1]
   822fa:	f7ff ba5a 	b.w	817b2 <_vfiprintf_r+0x7a>
   822fe:	4658      	mov	r0, fp
   82300:	9507      	str	r5, [sp, #28]
   82302:	9302      	str	r3, [sp, #8]
   82304:	f7ff f9aa 	bl	8165c <strlen>
   82308:	2400      	movs	r4, #0
   8230a:	9005      	str	r0, [sp, #20]
   8230c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82310:	f7ff bb6a 	b.w	819e8 <_vfiprintf_r+0x2b0>
   82314:	aa0f      	add	r2, sp, #60	; 0x3c
   82316:	9904      	ldr	r1, [sp, #16]
   82318:	9806      	ldr	r0, [sp, #24]
   8231a:	f7ff f9cd 	bl	816b8 <__sprint_r.part.0>
   8231e:	2800      	cmp	r0, #0
   82320:	f47f aec1 	bne.w	820a6 <_vfiprintf_r+0x96e>
   82324:	9910      	ldr	r1, [sp, #64]	; 0x40
   82326:	46d1      	mov	r9, sl
   82328:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8232a:	1c48      	adds	r0, r1, #1
   8232c:	e5b1      	b.n	81e92 <_vfiprintf_r+0x75a>
   8232e:	9910      	ldr	r1, [sp, #64]	; 0x40
   82330:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82332:	3101      	adds	r1, #1
   82334:	4e20      	ldr	r6, [pc, #128]	; (823b8 <_vfiprintf_r+0xc80>)
   82336:	f7ff bb9c 	b.w	81a72 <_vfiprintf_r+0x33a>
   8233a:	2c06      	cmp	r4, #6
   8233c:	bf28      	it	cs
   8233e:	2406      	movcs	r4, #6
   82340:	9507      	str	r5, [sp, #28]
   82342:	9405      	str	r4, [sp, #20]
   82344:	9401      	str	r4, [sp, #4]
   82346:	f8df b074 	ldr.w	fp, [pc, #116]	; 823bc <_vfiprintf_r+0xc84>
   8234a:	e4e3      	b.n	81d14 <_vfiprintf_r+0x5dc>
   8234c:	9810      	ldr	r0, [sp, #64]	; 0x40
   8234e:	4e1a      	ldr	r6, [pc, #104]	; (823b8 <_vfiprintf_r+0xc80>)
   82350:	3001      	adds	r0, #1
   82352:	e60e      	b.n	81f72 <_vfiprintf_r+0x83a>
   82354:	4686      	mov	lr, r0
   82356:	4d17      	ldr	r5, [pc, #92]	; (823b4 <_vfiprintf_r+0xc7c>)
   82358:	f7ff bbe2 	b.w	81b20 <_vfiprintf_r+0x3e8>
   8235c:	9405      	str	r4, [sp, #20]
   8235e:	9507      	str	r5, [sp, #28]
   82360:	9302      	str	r3, [sp, #8]
   82362:	4604      	mov	r4, r0
   82364:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82368:	f7ff bb3e 	b.w	819e8 <_vfiprintf_r+0x2b0>
   8236c:	9806      	ldr	r0, [sp, #24]
   8236e:	aa0f      	add	r2, sp, #60	; 0x3c
   82370:	4659      	mov	r1, fp
   82372:	f7ff f9a1 	bl	816b8 <__sprint_r.part.0>
   82376:	2800      	cmp	r0, #0
   82378:	f43f ae2e 	beq.w	81fd8 <_vfiprintf_r+0x8a0>
   8237c:	e62e      	b.n	81fdc <_vfiprintf_r+0x8a4>
   8237e:	9907      	ldr	r1, [sp, #28]
   82380:	f898 2001 	ldrb.w	r2, [r8, #1]
   82384:	680c      	ldr	r4, [r1, #0]
   82386:	3104      	adds	r1, #4
   82388:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   8238c:	46b8      	mov	r8, r7
   8238e:	9107      	str	r1, [sp, #28]
   82390:	f7ff ba44 	b.w	8181c <_vfiprintf_r+0xe4>
   82394:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82398:	e4a7      	b.n	81cea <_vfiprintf_r+0x5b2>
   8239a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8239e:	e521      	b.n	81de4 <_vfiprintf_r+0x6ac>
   823a0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   823a4:	e47c      	b.n	81ca0 <_vfiprintf_r+0x568>
   823a6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   823aa:	e43f      	b.n	81c2c <_vfiprintf_r+0x4f4>
   823ac:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   823b0:	f7ff bbfa 	b.w	81ba8 <_vfiprintf_r+0x470>
   823b4:	000842c8 	.word	0x000842c8
   823b8:	000842b8 	.word	0x000842b8
   823bc:	000842b0 	.word	0x000842b0

000823c0 <__sbprintf>:
   823c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823c4:	460c      	mov	r4, r1
   823c6:	f04f 0e00 	mov.w	lr, #0
   823ca:	f44f 6580 	mov.w	r5, #1024	; 0x400
   823ce:	4606      	mov	r6, r0
   823d0:	4617      	mov	r7, r2
   823d2:	4698      	mov	r8, r3
   823d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   823d6:	89e3      	ldrh	r3, [r4, #14]
   823d8:	8989      	ldrh	r1, [r1, #12]
   823da:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   823de:	f021 0102 	bic.w	r1, r1, #2
   823e2:	9219      	str	r2, [sp, #100]	; 0x64
   823e4:	f8ad 300e 	strh.w	r3, [sp, #14]
   823e8:	69e2      	ldr	r2, [r4, #28]
   823ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   823ec:	f8ad 100c 	strh.w	r1, [sp, #12]
   823f0:	a816      	add	r0, sp, #88	; 0x58
   823f2:	a91a      	add	r1, sp, #104	; 0x68
   823f4:	f8cd e018 	str.w	lr, [sp, #24]
   823f8:	9207      	str	r2, [sp, #28]
   823fa:	9309      	str	r3, [sp, #36]	; 0x24
   823fc:	9100      	str	r1, [sp, #0]
   823fe:	9104      	str	r1, [sp, #16]
   82400:	9502      	str	r5, [sp, #8]
   82402:	9505      	str	r5, [sp, #20]
   82404:	f000 fd44 	bl	82e90 <__retarget_lock_init_recursive>
   82408:	4643      	mov	r3, r8
   8240a:	463a      	mov	r2, r7
   8240c:	4669      	mov	r1, sp
   8240e:	4630      	mov	r0, r6
   82410:	f7ff f992 	bl	81738 <_vfiprintf_r>
   82414:	1e05      	subs	r5, r0, #0
   82416:	db07      	blt.n	82428 <__sbprintf+0x68>
   82418:	4630      	mov	r0, r6
   8241a:	4669      	mov	r1, sp
   8241c:	f000 f924 	bl	82668 <_fflush_r>
   82420:	2800      	cmp	r0, #0
   82422:	bf18      	it	ne
   82424:	f04f 35ff 	movne.w	r5, #4294967295
   82428:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8242c:	065b      	lsls	r3, r3, #25
   8242e:	d503      	bpl.n	82438 <__sbprintf+0x78>
   82430:	89a3      	ldrh	r3, [r4, #12]
   82432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82436:	81a3      	strh	r3, [r4, #12]
   82438:	9816      	ldr	r0, [sp, #88]	; 0x58
   8243a:	f000 fd2b 	bl	82e94 <__retarget_lock_close_recursive>
   8243e:	4628      	mov	r0, r5
   82440:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082448 <__swsetup_r>:
   82448:	b538      	push	{r3, r4, r5, lr}
   8244a:	4b30      	ldr	r3, [pc, #192]	; (8250c <__swsetup_r+0xc4>)
   8244c:	4605      	mov	r5, r0
   8244e:	6818      	ldr	r0, [r3, #0]
   82450:	460c      	mov	r4, r1
   82452:	b110      	cbz	r0, 8245a <__swsetup_r+0x12>
   82454:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82456:	2b00      	cmp	r3, #0
   82458:	d038      	beq.n	824cc <__swsetup_r+0x84>
   8245a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8245e:	b293      	uxth	r3, r2
   82460:	0718      	lsls	r0, r3, #28
   82462:	d50c      	bpl.n	8247e <__swsetup_r+0x36>
   82464:	6920      	ldr	r0, [r4, #16]
   82466:	b1a8      	cbz	r0, 82494 <__swsetup_r+0x4c>
   82468:	f013 0201 	ands.w	r2, r3, #1
   8246c:	d01e      	beq.n	824ac <__swsetup_r+0x64>
   8246e:	2200      	movs	r2, #0
   82470:	6963      	ldr	r3, [r4, #20]
   82472:	60a2      	str	r2, [r4, #8]
   82474:	425b      	negs	r3, r3
   82476:	61a3      	str	r3, [r4, #24]
   82478:	b1f0      	cbz	r0, 824b8 <__swsetup_r+0x70>
   8247a:	2000      	movs	r0, #0
   8247c:	bd38      	pop	{r3, r4, r5, pc}
   8247e:	06d9      	lsls	r1, r3, #27
   82480:	d53b      	bpl.n	824fa <__swsetup_r+0xb2>
   82482:	0758      	lsls	r0, r3, #29
   82484:	d425      	bmi.n	824d2 <__swsetup_r+0x8a>
   82486:	6920      	ldr	r0, [r4, #16]
   82488:	f042 0308 	orr.w	r3, r2, #8
   8248c:	81a3      	strh	r3, [r4, #12]
   8248e:	b29b      	uxth	r3, r3
   82490:	2800      	cmp	r0, #0
   82492:	d1e9      	bne.n	82468 <__swsetup_r+0x20>
   82494:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82498:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8249c:	d0e4      	beq.n	82468 <__swsetup_r+0x20>
   8249e:	4628      	mov	r0, r5
   824a0:	4621      	mov	r1, r4
   824a2:	f000 fd2b 	bl	82efc <__smakebuf_r>
   824a6:	89a3      	ldrh	r3, [r4, #12]
   824a8:	6920      	ldr	r0, [r4, #16]
   824aa:	e7dd      	b.n	82468 <__swsetup_r+0x20>
   824ac:	0799      	lsls	r1, r3, #30
   824ae:	bf58      	it	pl
   824b0:	6962      	ldrpl	r2, [r4, #20]
   824b2:	60a2      	str	r2, [r4, #8]
   824b4:	2800      	cmp	r0, #0
   824b6:	d1e0      	bne.n	8247a <__swsetup_r+0x32>
   824b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   824bc:	061a      	lsls	r2, r3, #24
   824be:	d5dd      	bpl.n	8247c <__swsetup_r+0x34>
   824c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   824c4:	81a3      	strh	r3, [r4, #12]
   824c6:	f04f 30ff 	mov.w	r0, #4294967295
   824ca:	bd38      	pop	{r3, r4, r5, pc}
   824cc:	f000 f924 	bl	82718 <__sinit>
   824d0:	e7c3      	b.n	8245a <__swsetup_r+0x12>
   824d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   824d4:	b151      	cbz	r1, 824ec <__swsetup_r+0xa4>
   824d6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   824da:	4299      	cmp	r1, r3
   824dc:	d004      	beq.n	824e8 <__swsetup_r+0xa0>
   824de:	4628      	mov	r0, r5
   824e0:	f000 fa40 	bl	82964 <_free_r>
   824e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   824e8:	2300      	movs	r3, #0
   824ea:	6323      	str	r3, [r4, #48]	; 0x30
   824ec:	2300      	movs	r3, #0
   824ee:	6920      	ldr	r0, [r4, #16]
   824f0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   824f4:	e884 0009 	stmia.w	r4, {r0, r3}
   824f8:	e7c6      	b.n	82488 <__swsetup_r+0x40>
   824fa:	2309      	movs	r3, #9
   824fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82500:	602b      	str	r3, [r5, #0]
   82502:	f04f 30ff 	mov.w	r0, #4294967295
   82506:	81a2      	strh	r2, [r4, #12]
   82508:	bd38      	pop	{r3, r4, r5, pc}
   8250a:	bf00      	nop
   8250c:	20070134 	.word	0x20070134

00082510 <register_fini>:
   82510:	4b02      	ldr	r3, [pc, #8]	; (8251c <register_fini+0xc>)
   82512:	b113      	cbz	r3, 8251a <register_fini+0xa>
   82514:	4802      	ldr	r0, [pc, #8]	; (82520 <register_fini+0x10>)
   82516:	f000 b805 	b.w	82524 <atexit>
   8251a:	4770      	bx	lr
   8251c:	00000000 	.word	0x00000000
   82520:	00082791 	.word	0x00082791

00082524 <atexit>:
   82524:	2300      	movs	r3, #0
   82526:	4601      	mov	r1, r0
   82528:	461a      	mov	r2, r3
   8252a:	4618      	mov	r0, r3
   8252c:	f001 bbcc 	b.w	83cc8 <__register_exitproc>

00082530 <__sflush_r>:
   82530:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82538:	b29a      	uxth	r2, r3
   8253a:	460d      	mov	r5, r1
   8253c:	0711      	lsls	r1, r2, #28
   8253e:	4680      	mov	r8, r0
   82540:	d43a      	bmi.n	825b8 <__sflush_r+0x88>
   82542:	686a      	ldr	r2, [r5, #4]
   82544:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82548:	2a00      	cmp	r2, #0
   8254a:	81ab      	strh	r3, [r5, #12]
   8254c:	dd70      	ble.n	82630 <__sflush_r+0x100>
   8254e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82550:	2c00      	cmp	r4, #0
   82552:	d04a      	beq.n	825ea <__sflush_r+0xba>
   82554:	2200      	movs	r2, #0
   82556:	b29b      	uxth	r3, r3
   82558:	f8d8 6000 	ldr.w	r6, [r8]
   8255c:	f8c8 2000 	str.w	r2, [r8]
   82560:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82564:	d068      	beq.n	82638 <__sflush_r+0x108>
   82566:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82568:	075f      	lsls	r7, r3, #29
   8256a:	d505      	bpl.n	82578 <__sflush_r+0x48>
   8256c:	6869      	ldr	r1, [r5, #4]
   8256e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82570:	1a52      	subs	r2, r2, r1
   82572:	b10b      	cbz	r3, 82578 <__sflush_r+0x48>
   82574:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82576:	1ad2      	subs	r2, r2, r3
   82578:	2300      	movs	r3, #0
   8257a:	69e9      	ldr	r1, [r5, #28]
   8257c:	4640      	mov	r0, r8
   8257e:	47a0      	blx	r4
   82580:	1c44      	adds	r4, r0, #1
   82582:	d03d      	beq.n	82600 <__sflush_r+0xd0>
   82584:	2100      	movs	r1, #0
   82586:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8258a:	692a      	ldr	r2, [r5, #16]
   8258c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82590:	81ab      	strh	r3, [r5, #12]
   82592:	04db      	lsls	r3, r3, #19
   82594:	6069      	str	r1, [r5, #4]
   82596:	602a      	str	r2, [r5, #0]
   82598:	d448      	bmi.n	8262c <__sflush_r+0xfc>
   8259a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8259c:	f8c8 6000 	str.w	r6, [r8]
   825a0:	b319      	cbz	r1, 825ea <__sflush_r+0xba>
   825a2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   825a6:	4299      	cmp	r1, r3
   825a8:	d002      	beq.n	825b0 <__sflush_r+0x80>
   825aa:	4640      	mov	r0, r8
   825ac:	f000 f9da 	bl	82964 <_free_r>
   825b0:	2000      	movs	r0, #0
   825b2:	6328      	str	r0, [r5, #48]	; 0x30
   825b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825b8:	692e      	ldr	r6, [r5, #16]
   825ba:	b1b6      	cbz	r6, 825ea <__sflush_r+0xba>
   825bc:	0791      	lsls	r1, r2, #30
   825be:	bf18      	it	ne
   825c0:	2300      	movne	r3, #0
   825c2:	682c      	ldr	r4, [r5, #0]
   825c4:	bf08      	it	eq
   825c6:	696b      	ldreq	r3, [r5, #20]
   825c8:	602e      	str	r6, [r5, #0]
   825ca:	1ba4      	subs	r4, r4, r6
   825cc:	60ab      	str	r3, [r5, #8]
   825ce:	e00a      	b.n	825e6 <__sflush_r+0xb6>
   825d0:	4623      	mov	r3, r4
   825d2:	4632      	mov	r2, r6
   825d4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   825d6:	69e9      	ldr	r1, [r5, #28]
   825d8:	4640      	mov	r0, r8
   825da:	47b8      	blx	r7
   825dc:	2800      	cmp	r0, #0
   825de:	eba4 0400 	sub.w	r4, r4, r0
   825e2:	4406      	add	r6, r0
   825e4:	dd04      	ble.n	825f0 <__sflush_r+0xc0>
   825e6:	2c00      	cmp	r4, #0
   825e8:	dcf2      	bgt.n	825d0 <__sflush_r+0xa0>
   825ea:	2000      	movs	r0, #0
   825ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825f0:	89ab      	ldrh	r3, [r5, #12]
   825f2:	f04f 30ff 	mov.w	r0, #4294967295
   825f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825fa:	81ab      	strh	r3, [r5, #12]
   825fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82600:	f8d8 4000 	ldr.w	r4, [r8]
   82604:	2c1d      	cmp	r4, #29
   82606:	d8f3      	bhi.n	825f0 <__sflush_r+0xc0>
   82608:	4b16      	ldr	r3, [pc, #88]	; (82664 <__sflush_r+0x134>)
   8260a:	40e3      	lsrs	r3, r4
   8260c:	43db      	mvns	r3, r3
   8260e:	f013 0301 	ands.w	r3, r3, #1
   82612:	d1ed      	bne.n	825f0 <__sflush_r+0xc0>
   82614:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82618:	6929      	ldr	r1, [r5, #16]
   8261a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8261e:	81aa      	strh	r2, [r5, #12]
   82620:	04d2      	lsls	r2, r2, #19
   82622:	606b      	str	r3, [r5, #4]
   82624:	6029      	str	r1, [r5, #0]
   82626:	d5b8      	bpl.n	8259a <__sflush_r+0x6a>
   82628:	2c00      	cmp	r4, #0
   8262a:	d1b6      	bne.n	8259a <__sflush_r+0x6a>
   8262c:	6528      	str	r0, [r5, #80]	; 0x50
   8262e:	e7b4      	b.n	8259a <__sflush_r+0x6a>
   82630:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82632:	2a00      	cmp	r2, #0
   82634:	dc8b      	bgt.n	8254e <__sflush_r+0x1e>
   82636:	e7d8      	b.n	825ea <__sflush_r+0xba>
   82638:	2301      	movs	r3, #1
   8263a:	69e9      	ldr	r1, [r5, #28]
   8263c:	4640      	mov	r0, r8
   8263e:	47a0      	blx	r4
   82640:	1c43      	adds	r3, r0, #1
   82642:	4602      	mov	r2, r0
   82644:	d002      	beq.n	8264c <__sflush_r+0x11c>
   82646:	89ab      	ldrh	r3, [r5, #12]
   82648:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8264a:	e78d      	b.n	82568 <__sflush_r+0x38>
   8264c:	f8d8 3000 	ldr.w	r3, [r8]
   82650:	2b00      	cmp	r3, #0
   82652:	d0f8      	beq.n	82646 <__sflush_r+0x116>
   82654:	2b1d      	cmp	r3, #29
   82656:	d001      	beq.n	8265c <__sflush_r+0x12c>
   82658:	2b16      	cmp	r3, #22
   8265a:	d1c9      	bne.n	825f0 <__sflush_r+0xc0>
   8265c:	f8c8 6000 	str.w	r6, [r8]
   82660:	e7c3      	b.n	825ea <__sflush_r+0xba>
   82662:	bf00      	nop
   82664:	20400001 	.word	0x20400001

00082668 <_fflush_r>:
   82668:	b538      	push	{r3, r4, r5, lr}
   8266a:	460d      	mov	r5, r1
   8266c:	4604      	mov	r4, r0
   8266e:	b108      	cbz	r0, 82674 <_fflush_r+0xc>
   82670:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82672:	b1bb      	cbz	r3, 826a4 <_fflush_r+0x3c>
   82674:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82678:	b188      	cbz	r0, 8269e <_fflush_r+0x36>
   8267a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8267c:	07db      	lsls	r3, r3, #31
   8267e:	d401      	bmi.n	82684 <_fflush_r+0x1c>
   82680:	0581      	lsls	r1, r0, #22
   82682:	d517      	bpl.n	826b4 <_fflush_r+0x4c>
   82684:	4620      	mov	r0, r4
   82686:	4629      	mov	r1, r5
   82688:	f7ff ff52 	bl	82530 <__sflush_r>
   8268c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8268e:	4604      	mov	r4, r0
   82690:	07da      	lsls	r2, r3, #31
   82692:	d402      	bmi.n	8269a <_fflush_r+0x32>
   82694:	89ab      	ldrh	r3, [r5, #12]
   82696:	059b      	lsls	r3, r3, #22
   82698:	d507      	bpl.n	826aa <_fflush_r+0x42>
   8269a:	4620      	mov	r0, r4
   8269c:	bd38      	pop	{r3, r4, r5, pc}
   8269e:	4604      	mov	r4, r0
   826a0:	4620      	mov	r0, r4
   826a2:	bd38      	pop	{r3, r4, r5, pc}
   826a4:	f000 f838 	bl	82718 <__sinit>
   826a8:	e7e4      	b.n	82674 <_fflush_r+0xc>
   826aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
   826ac:	f000 fbf6 	bl	82e9c <__retarget_lock_release_recursive>
   826b0:	4620      	mov	r0, r4
   826b2:	bd38      	pop	{r3, r4, r5, pc}
   826b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   826b6:	f000 fbef 	bl	82e98 <__retarget_lock_acquire_recursive>
   826ba:	e7e3      	b.n	82684 <_fflush_r+0x1c>

000826bc <_cleanup_r>:
   826bc:	4901      	ldr	r1, [pc, #4]	; (826c4 <_cleanup_r+0x8>)
   826be:	f000 bbb1 	b.w	82e24 <_fwalk_reent>
   826c2:	bf00      	nop
   826c4:	00083db1 	.word	0x00083db1

000826c8 <std.isra.0>:
   826c8:	2300      	movs	r3, #0
   826ca:	b510      	push	{r4, lr}
   826cc:	4604      	mov	r4, r0
   826ce:	8181      	strh	r1, [r0, #12]
   826d0:	81c2      	strh	r2, [r0, #14]
   826d2:	6003      	str	r3, [r0, #0]
   826d4:	6043      	str	r3, [r0, #4]
   826d6:	6083      	str	r3, [r0, #8]
   826d8:	6643      	str	r3, [r0, #100]	; 0x64
   826da:	6103      	str	r3, [r0, #16]
   826dc:	6143      	str	r3, [r0, #20]
   826de:	6183      	str	r3, [r0, #24]
   826e0:	4619      	mov	r1, r3
   826e2:	2208      	movs	r2, #8
   826e4:	305c      	adds	r0, #92	; 0x5c
   826e6:	f7fe fe9b 	bl	81420 <memset>
   826ea:	4807      	ldr	r0, [pc, #28]	; (82708 <std.isra.0+0x40>)
   826ec:	4907      	ldr	r1, [pc, #28]	; (8270c <std.isra.0+0x44>)
   826ee:	4a08      	ldr	r2, [pc, #32]	; (82710 <std.isra.0+0x48>)
   826f0:	4b08      	ldr	r3, [pc, #32]	; (82714 <std.isra.0+0x4c>)
   826f2:	6220      	str	r0, [r4, #32]
   826f4:	61e4      	str	r4, [r4, #28]
   826f6:	6261      	str	r1, [r4, #36]	; 0x24
   826f8:	62a2      	str	r2, [r4, #40]	; 0x28
   826fa:	62e3      	str	r3, [r4, #44]	; 0x2c
   826fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82704:	f000 bbc4 	b.w	82e90 <__retarget_lock_init_recursive>
   82708:	00083af9 	.word	0x00083af9
   8270c:	00083b1d 	.word	0x00083b1d
   82710:	00083b59 	.word	0x00083b59
   82714:	00083b79 	.word	0x00083b79

00082718 <__sinit>:
   82718:	b510      	push	{r4, lr}
   8271a:	4604      	mov	r4, r0
   8271c:	4814      	ldr	r0, [pc, #80]	; (82770 <__sinit+0x58>)
   8271e:	f000 fbbb 	bl	82e98 <__retarget_lock_acquire_recursive>
   82722:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82724:	b9fa      	cbnz	r2, 82766 <__sinit+0x4e>
   82726:	2003      	movs	r0, #3
   82728:	4912      	ldr	r1, [pc, #72]	; (82774 <__sinit+0x5c>)
   8272a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8272e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   82732:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82736:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8273a:	63e1      	str	r1, [r4, #60]	; 0x3c
   8273c:	6860      	ldr	r0, [r4, #4]
   8273e:	2104      	movs	r1, #4
   82740:	f7ff ffc2 	bl	826c8 <std.isra.0>
   82744:	68a0      	ldr	r0, [r4, #8]
   82746:	2201      	movs	r2, #1
   82748:	2109      	movs	r1, #9
   8274a:	f7ff ffbd 	bl	826c8 <std.isra.0>
   8274e:	68e0      	ldr	r0, [r4, #12]
   82750:	2202      	movs	r2, #2
   82752:	2112      	movs	r1, #18
   82754:	f7ff ffb8 	bl	826c8 <std.isra.0>
   82758:	2301      	movs	r3, #1
   8275a:	4805      	ldr	r0, [pc, #20]	; (82770 <__sinit+0x58>)
   8275c:	63a3      	str	r3, [r4, #56]	; 0x38
   8275e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82762:	f000 bb9b 	b.w	82e9c <__retarget_lock_release_recursive>
   82766:	4802      	ldr	r0, [pc, #8]	; (82770 <__sinit+0x58>)
   82768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8276c:	f000 bb96 	b.w	82e9c <__retarget_lock_release_recursive>
   82770:	20071c6c 	.word	0x20071c6c
   82774:	000826bd 	.word	0x000826bd

00082778 <__sfp_lock_acquire>:
   82778:	4801      	ldr	r0, [pc, #4]	; (82780 <__sfp_lock_acquire+0x8>)
   8277a:	f000 bb8d 	b.w	82e98 <__retarget_lock_acquire_recursive>
   8277e:	bf00      	nop
   82780:	20071c80 	.word	0x20071c80

00082784 <__sfp_lock_release>:
   82784:	4801      	ldr	r0, [pc, #4]	; (8278c <__sfp_lock_release+0x8>)
   82786:	f000 bb89 	b.w	82e9c <__retarget_lock_release_recursive>
   8278a:	bf00      	nop
   8278c:	20071c80 	.word	0x20071c80

00082790 <__libc_fini_array>:
   82790:	b538      	push	{r3, r4, r5, lr}
   82792:	4c0a      	ldr	r4, [pc, #40]	; (827bc <__libc_fini_array+0x2c>)
   82794:	4d0a      	ldr	r5, [pc, #40]	; (827c0 <__libc_fini_array+0x30>)
   82796:	1b64      	subs	r4, r4, r5
   82798:	10a4      	asrs	r4, r4, #2
   8279a:	d00a      	beq.n	827b2 <__libc_fini_array+0x22>
   8279c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   827a0:	3b01      	subs	r3, #1
   827a2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   827a6:	3c01      	subs	r4, #1
   827a8:	f855 3904 	ldr.w	r3, [r5], #-4
   827ac:	4798      	blx	r3
   827ae:	2c00      	cmp	r4, #0
   827b0:	d1f9      	bne.n	827a6 <__libc_fini_array+0x16>
   827b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   827b6:	f001 be23 	b.w	84400 <_fini>
   827ba:	bf00      	nop
   827bc:	00084410 	.word	0x00084410
   827c0:	0008440c 	.word	0x0008440c

000827c4 <__fputwc>:
   827c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   827c8:	b083      	sub	sp, #12
   827ca:	4607      	mov	r7, r0
   827cc:	4688      	mov	r8, r1
   827ce:	4614      	mov	r4, r2
   827d0:	f000 fb50 	bl	82e74 <__locale_mb_cur_max>
   827d4:	2801      	cmp	r0, #1
   827d6:	d033      	beq.n	82840 <__fputwc+0x7c>
   827d8:	4642      	mov	r2, r8
   827da:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   827de:	a901      	add	r1, sp, #4
   827e0:	4638      	mov	r0, r7
   827e2:	f001 fa25 	bl	83c30 <_wcrtomb_r>
   827e6:	1c42      	adds	r2, r0, #1
   827e8:	4606      	mov	r6, r0
   827ea:	d022      	beq.n	82832 <__fputwc+0x6e>
   827ec:	b390      	cbz	r0, 82854 <__fputwc+0x90>
   827ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
   827f2:	2500      	movs	r5, #0
   827f4:	f10d 0904 	add.w	r9, sp, #4
   827f8:	e008      	b.n	8280c <__fputwc+0x48>
   827fa:	6823      	ldr	r3, [r4, #0]
   827fc:	1c5a      	adds	r2, r3, #1
   827fe:	6022      	str	r2, [r4, #0]
   82800:	7019      	strb	r1, [r3, #0]
   82802:	3501      	adds	r5, #1
   82804:	42b5      	cmp	r5, r6
   82806:	d225      	bcs.n	82854 <__fputwc+0x90>
   82808:	f815 1009 	ldrb.w	r1, [r5, r9]
   8280c:	68a3      	ldr	r3, [r4, #8]
   8280e:	3b01      	subs	r3, #1
   82810:	2b00      	cmp	r3, #0
   82812:	60a3      	str	r3, [r4, #8]
   82814:	daf1      	bge.n	827fa <__fputwc+0x36>
   82816:	69a2      	ldr	r2, [r4, #24]
   82818:	4293      	cmp	r3, r2
   8281a:	db01      	blt.n	82820 <__fputwc+0x5c>
   8281c:	290a      	cmp	r1, #10
   8281e:	d1ec      	bne.n	827fa <__fputwc+0x36>
   82820:	4622      	mov	r2, r4
   82822:	4638      	mov	r0, r7
   82824:	f001 f9ac 	bl	83b80 <__swbuf_r>
   82828:	1c43      	adds	r3, r0, #1
   8282a:	d1ea      	bne.n	82802 <__fputwc+0x3e>
   8282c:	b003      	add	sp, #12
   8282e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82832:	89a3      	ldrh	r3, [r4, #12]
   82834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82838:	81a3      	strh	r3, [r4, #12]
   8283a:	b003      	add	sp, #12
   8283c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82840:	f108 33ff 	add.w	r3, r8, #4294967295
   82844:	2bfe      	cmp	r3, #254	; 0xfe
   82846:	d8c7      	bhi.n	827d8 <__fputwc+0x14>
   82848:	fa5f f188 	uxtb.w	r1, r8
   8284c:	4606      	mov	r6, r0
   8284e:	f88d 1004 	strb.w	r1, [sp, #4]
   82852:	e7ce      	b.n	827f2 <__fputwc+0x2e>
   82854:	4640      	mov	r0, r8
   82856:	b003      	add	sp, #12
   82858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008285c <_fputwc_r>:
   8285c:	b530      	push	{r4, r5, lr}
   8285e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82860:	4614      	mov	r4, r2
   82862:	f013 0f01 	tst.w	r3, #1
   82866:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8286a:	b083      	sub	sp, #12
   8286c:	4605      	mov	r5, r0
   8286e:	b29a      	uxth	r2, r3
   82870:	d101      	bne.n	82876 <_fputwc_r+0x1a>
   82872:	0590      	lsls	r0, r2, #22
   82874:	d51c      	bpl.n	828b0 <_fputwc_r+0x54>
   82876:	0490      	lsls	r0, r2, #18
   82878:	d406      	bmi.n	82888 <_fputwc_r+0x2c>
   8287a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8287c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82884:	81a3      	strh	r3, [r4, #12]
   82886:	6662      	str	r2, [r4, #100]	; 0x64
   82888:	4628      	mov	r0, r5
   8288a:	4622      	mov	r2, r4
   8288c:	f7ff ff9a 	bl	827c4 <__fputwc>
   82890:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82892:	4605      	mov	r5, r0
   82894:	07da      	lsls	r2, r3, #31
   82896:	d402      	bmi.n	8289e <_fputwc_r+0x42>
   82898:	89a3      	ldrh	r3, [r4, #12]
   8289a:	059b      	lsls	r3, r3, #22
   8289c:	d502      	bpl.n	828a4 <_fputwc_r+0x48>
   8289e:	4628      	mov	r0, r5
   828a0:	b003      	add	sp, #12
   828a2:	bd30      	pop	{r4, r5, pc}
   828a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   828a6:	f000 faf9 	bl	82e9c <__retarget_lock_release_recursive>
   828aa:	4628      	mov	r0, r5
   828ac:	b003      	add	sp, #12
   828ae:	bd30      	pop	{r4, r5, pc}
   828b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   828b2:	9101      	str	r1, [sp, #4]
   828b4:	f000 faf0 	bl	82e98 <__retarget_lock_acquire_recursive>
   828b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   828bc:	9901      	ldr	r1, [sp, #4]
   828be:	b29a      	uxth	r2, r3
   828c0:	e7d9      	b.n	82876 <_fputwc_r+0x1a>
   828c2:	bf00      	nop

000828c4 <_malloc_trim_r>:
   828c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   828c6:	460c      	mov	r4, r1
   828c8:	4f23      	ldr	r7, [pc, #140]	; (82958 <_malloc_trim_r+0x94>)
   828ca:	4606      	mov	r6, r0
   828cc:	f000 ff40 	bl	83750 <__malloc_lock>
   828d0:	68bb      	ldr	r3, [r7, #8]
   828d2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   828d6:	685d      	ldr	r5, [r3, #4]
   828d8:	310f      	adds	r1, #15
   828da:	f025 0503 	bic.w	r5, r5, #3
   828de:	4429      	add	r1, r5
   828e0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   828e4:	f021 010f 	bic.w	r1, r1, #15
   828e8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   828ec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   828f0:	db07      	blt.n	82902 <_malloc_trim_r+0x3e>
   828f2:	2100      	movs	r1, #0
   828f4:	4630      	mov	r0, r6
   828f6:	f001 f8ed 	bl	83ad4 <_sbrk_r>
   828fa:	68bb      	ldr	r3, [r7, #8]
   828fc:	442b      	add	r3, r5
   828fe:	4298      	cmp	r0, r3
   82900:	d004      	beq.n	8290c <_malloc_trim_r+0x48>
   82902:	4630      	mov	r0, r6
   82904:	f000 ff2a 	bl	8375c <__malloc_unlock>
   82908:	2000      	movs	r0, #0
   8290a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8290c:	4261      	negs	r1, r4
   8290e:	4630      	mov	r0, r6
   82910:	f001 f8e0 	bl	83ad4 <_sbrk_r>
   82914:	3001      	adds	r0, #1
   82916:	d00d      	beq.n	82934 <_malloc_trim_r+0x70>
   82918:	4b10      	ldr	r3, [pc, #64]	; (8295c <_malloc_trim_r+0x98>)
   8291a:	68ba      	ldr	r2, [r7, #8]
   8291c:	6819      	ldr	r1, [r3, #0]
   8291e:	1b2d      	subs	r5, r5, r4
   82920:	f045 0501 	orr.w	r5, r5, #1
   82924:	4630      	mov	r0, r6
   82926:	1b09      	subs	r1, r1, r4
   82928:	6055      	str	r5, [r2, #4]
   8292a:	6019      	str	r1, [r3, #0]
   8292c:	f000 ff16 	bl	8375c <__malloc_unlock>
   82930:	2001      	movs	r0, #1
   82932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82934:	2100      	movs	r1, #0
   82936:	4630      	mov	r0, r6
   82938:	f001 f8cc 	bl	83ad4 <_sbrk_r>
   8293c:	68ba      	ldr	r2, [r7, #8]
   8293e:	1a83      	subs	r3, r0, r2
   82940:	2b0f      	cmp	r3, #15
   82942:	ddde      	ble.n	82902 <_malloc_trim_r+0x3e>
   82944:	4c06      	ldr	r4, [pc, #24]	; (82960 <_malloc_trim_r+0x9c>)
   82946:	4905      	ldr	r1, [pc, #20]	; (8295c <_malloc_trim_r+0x98>)
   82948:	6824      	ldr	r4, [r4, #0]
   8294a:	f043 0301 	orr.w	r3, r3, #1
   8294e:	1b00      	subs	r0, r0, r4
   82950:	6053      	str	r3, [r2, #4]
   82952:	6008      	str	r0, [r1, #0]
   82954:	e7d5      	b.n	82902 <_malloc_trim_r+0x3e>
   82956:	bf00      	nop
   82958:	200706d0 	.word	0x200706d0
   8295c:	20070c20 	.word	0x20070c20
   82960:	20070ad8 	.word	0x20070ad8

00082964 <_free_r>:
   82964:	2900      	cmp	r1, #0
   82966:	d044      	beq.n	829f2 <_free_r+0x8e>
   82968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8296c:	460d      	mov	r5, r1
   8296e:	4680      	mov	r8, r0
   82970:	f000 feee 	bl	83750 <__malloc_lock>
   82974:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82978:	4969      	ldr	r1, [pc, #420]	; (82b20 <_free_r+0x1bc>)
   8297a:	f1a5 0408 	sub.w	r4, r5, #8
   8297e:	f027 0301 	bic.w	r3, r7, #1
   82982:	18e2      	adds	r2, r4, r3
   82984:	688e      	ldr	r6, [r1, #8]
   82986:	6850      	ldr	r0, [r2, #4]
   82988:	42b2      	cmp	r2, r6
   8298a:	f020 0003 	bic.w	r0, r0, #3
   8298e:	d05e      	beq.n	82a4e <_free_r+0xea>
   82990:	07fe      	lsls	r6, r7, #31
   82992:	6050      	str	r0, [r2, #4]
   82994:	d40b      	bmi.n	829ae <_free_r+0x4a>
   82996:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8299a:	f101 0e08 	add.w	lr, r1, #8
   8299e:	1be4      	subs	r4, r4, r7
   829a0:	68a5      	ldr	r5, [r4, #8]
   829a2:	443b      	add	r3, r7
   829a4:	4575      	cmp	r5, lr
   829a6:	d06d      	beq.n	82a84 <_free_r+0x120>
   829a8:	68e7      	ldr	r7, [r4, #12]
   829aa:	60ef      	str	r7, [r5, #12]
   829ac:	60bd      	str	r5, [r7, #8]
   829ae:	1815      	adds	r5, r2, r0
   829b0:	686d      	ldr	r5, [r5, #4]
   829b2:	07ed      	lsls	r5, r5, #31
   829b4:	d53e      	bpl.n	82a34 <_free_r+0xd0>
   829b6:	f043 0201 	orr.w	r2, r3, #1
   829ba:	6062      	str	r2, [r4, #4]
   829bc:	50e3      	str	r3, [r4, r3]
   829be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   829c2:	d217      	bcs.n	829f4 <_free_r+0x90>
   829c4:	2201      	movs	r2, #1
   829c6:	08db      	lsrs	r3, r3, #3
   829c8:	1098      	asrs	r0, r3, #2
   829ca:	684d      	ldr	r5, [r1, #4]
   829cc:	4413      	add	r3, r2
   829ce:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   829d2:	4082      	lsls	r2, r0
   829d4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   829d8:	432a      	orrs	r2, r5
   829da:	3808      	subs	r0, #8
   829dc:	60e0      	str	r0, [r4, #12]
   829de:	60a7      	str	r7, [r4, #8]
   829e0:	604a      	str	r2, [r1, #4]
   829e2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   829e6:	60fc      	str	r4, [r7, #12]
   829e8:	4640      	mov	r0, r8
   829ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   829ee:	f000 beb5 	b.w	8375c <__malloc_unlock>
   829f2:	4770      	bx	lr
   829f4:	0a5a      	lsrs	r2, r3, #9
   829f6:	2a04      	cmp	r2, #4
   829f8:	d852      	bhi.n	82aa0 <_free_r+0x13c>
   829fa:	099a      	lsrs	r2, r3, #6
   829fc:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82a00:	00ff      	lsls	r7, r7, #3
   82a02:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82a06:	19c8      	adds	r0, r1, r7
   82a08:	59ca      	ldr	r2, [r1, r7]
   82a0a:	3808      	subs	r0, #8
   82a0c:	4290      	cmp	r0, r2
   82a0e:	d04f      	beq.n	82ab0 <_free_r+0x14c>
   82a10:	6851      	ldr	r1, [r2, #4]
   82a12:	f021 0103 	bic.w	r1, r1, #3
   82a16:	428b      	cmp	r3, r1
   82a18:	d232      	bcs.n	82a80 <_free_r+0x11c>
   82a1a:	6892      	ldr	r2, [r2, #8]
   82a1c:	4290      	cmp	r0, r2
   82a1e:	d1f7      	bne.n	82a10 <_free_r+0xac>
   82a20:	68c3      	ldr	r3, [r0, #12]
   82a22:	60a0      	str	r0, [r4, #8]
   82a24:	60e3      	str	r3, [r4, #12]
   82a26:	609c      	str	r4, [r3, #8]
   82a28:	60c4      	str	r4, [r0, #12]
   82a2a:	4640      	mov	r0, r8
   82a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82a30:	f000 be94 	b.w	8375c <__malloc_unlock>
   82a34:	6895      	ldr	r5, [r2, #8]
   82a36:	4f3b      	ldr	r7, [pc, #236]	; (82b24 <_free_r+0x1c0>)
   82a38:	4403      	add	r3, r0
   82a3a:	42bd      	cmp	r5, r7
   82a3c:	d040      	beq.n	82ac0 <_free_r+0x15c>
   82a3e:	68d0      	ldr	r0, [r2, #12]
   82a40:	f043 0201 	orr.w	r2, r3, #1
   82a44:	60e8      	str	r0, [r5, #12]
   82a46:	6085      	str	r5, [r0, #8]
   82a48:	6062      	str	r2, [r4, #4]
   82a4a:	50e3      	str	r3, [r4, r3]
   82a4c:	e7b7      	b.n	829be <_free_r+0x5a>
   82a4e:	07ff      	lsls	r7, r7, #31
   82a50:	4403      	add	r3, r0
   82a52:	d407      	bmi.n	82a64 <_free_r+0x100>
   82a54:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82a58:	1b64      	subs	r4, r4, r5
   82a5a:	68e2      	ldr	r2, [r4, #12]
   82a5c:	68a0      	ldr	r0, [r4, #8]
   82a5e:	442b      	add	r3, r5
   82a60:	60c2      	str	r2, [r0, #12]
   82a62:	6090      	str	r0, [r2, #8]
   82a64:	4a30      	ldr	r2, [pc, #192]	; (82b28 <_free_r+0x1c4>)
   82a66:	f043 0001 	orr.w	r0, r3, #1
   82a6a:	6812      	ldr	r2, [r2, #0]
   82a6c:	6060      	str	r0, [r4, #4]
   82a6e:	4293      	cmp	r3, r2
   82a70:	608c      	str	r4, [r1, #8]
   82a72:	d3b9      	bcc.n	829e8 <_free_r+0x84>
   82a74:	4b2d      	ldr	r3, [pc, #180]	; (82b2c <_free_r+0x1c8>)
   82a76:	4640      	mov	r0, r8
   82a78:	6819      	ldr	r1, [r3, #0]
   82a7a:	f7ff ff23 	bl	828c4 <_malloc_trim_r>
   82a7e:	e7b3      	b.n	829e8 <_free_r+0x84>
   82a80:	4610      	mov	r0, r2
   82a82:	e7cd      	b.n	82a20 <_free_r+0xbc>
   82a84:	1811      	adds	r1, r2, r0
   82a86:	6849      	ldr	r1, [r1, #4]
   82a88:	07c9      	lsls	r1, r1, #31
   82a8a:	d444      	bmi.n	82b16 <_free_r+0x1b2>
   82a8c:	6891      	ldr	r1, [r2, #8]
   82a8e:	4403      	add	r3, r0
   82a90:	68d2      	ldr	r2, [r2, #12]
   82a92:	f043 0001 	orr.w	r0, r3, #1
   82a96:	60ca      	str	r2, [r1, #12]
   82a98:	6091      	str	r1, [r2, #8]
   82a9a:	6060      	str	r0, [r4, #4]
   82a9c:	50e3      	str	r3, [r4, r3]
   82a9e:	e7a3      	b.n	829e8 <_free_r+0x84>
   82aa0:	2a14      	cmp	r2, #20
   82aa2:	d816      	bhi.n	82ad2 <_free_r+0x16e>
   82aa4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82aa8:	00ff      	lsls	r7, r7, #3
   82aaa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82aae:	e7aa      	b.n	82a06 <_free_r+0xa2>
   82ab0:	2301      	movs	r3, #1
   82ab2:	10aa      	asrs	r2, r5, #2
   82ab4:	684d      	ldr	r5, [r1, #4]
   82ab6:	4093      	lsls	r3, r2
   82ab8:	432b      	orrs	r3, r5
   82aba:	604b      	str	r3, [r1, #4]
   82abc:	4603      	mov	r3, r0
   82abe:	e7b0      	b.n	82a22 <_free_r+0xbe>
   82ac0:	f043 0201 	orr.w	r2, r3, #1
   82ac4:	614c      	str	r4, [r1, #20]
   82ac6:	610c      	str	r4, [r1, #16]
   82ac8:	60e5      	str	r5, [r4, #12]
   82aca:	60a5      	str	r5, [r4, #8]
   82acc:	6062      	str	r2, [r4, #4]
   82ace:	50e3      	str	r3, [r4, r3]
   82ad0:	e78a      	b.n	829e8 <_free_r+0x84>
   82ad2:	2a54      	cmp	r2, #84	; 0x54
   82ad4:	d806      	bhi.n	82ae4 <_free_r+0x180>
   82ad6:	0b1a      	lsrs	r2, r3, #12
   82ad8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82adc:	00ff      	lsls	r7, r7, #3
   82ade:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82ae2:	e790      	b.n	82a06 <_free_r+0xa2>
   82ae4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82ae8:	d806      	bhi.n	82af8 <_free_r+0x194>
   82aea:	0bda      	lsrs	r2, r3, #15
   82aec:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82af0:	00ff      	lsls	r7, r7, #3
   82af2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82af6:	e786      	b.n	82a06 <_free_r+0xa2>
   82af8:	f240 5054 	movw	r0, #1364	; 0x554
   82afc:	4282      	cmp	r2, r0
   82afe:	d806      	bhi.n	82b0e <_free_r+0x1aa>
   82b00:	0c9a      	lsrs	r2, r3, #18
   82b02:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82b06:	00ff      	lsls	r7, r7, #3
   82b08:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82b0c:	e77b      	b.n	82a06 <_free_r+0xa2>
   82b0e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82b12:	257e      	movs	r5, #126	; 0x7e
   82b14:	e777      	b.n	82a06 <_free_r+0xa2>
   82b16:	f043 0101 	orr.w	r1, r3, #1
   82b1a:	6061      	str	r1, [r4, #4]
   82b1c:	6013      	str	r3, [r2, #0]
   82b1e:	e763      	b.n	829e8 <_free_r+0x84>
   82b20:	200706d0 	.word	0x200706d0
   82b24:	200706d8 	.word	0x200706d8
   82b28:	20070adc 	.word	0x20070adc
   82b2c:	20070c50 	.word	0x20070c50

00082b30 <__sfvwrite_r>:
   82b30:	6893      	ldr	r3, [r2, #8]
   82b32:	2b00      	cmp	r3, #0
   82b34:	d071      	beq.n	82c1a <__sfvwrite_r+0xea>
   82b36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b3a:	898b      	ldrh	r3, [r1, #12]
   82b3c:	b083      	sub	sp, #12
   82b3e:	460c      	mov	r4, r1
   82b40:	0719      	lsls	r1, r3, #28
   82b42:	9000      	str	r0, [sp, #0]
   82b44:	4616      	mov	r6, r2
   82b46:	d525      	bpl.n	82b94 <__sfvwrite_r+0x64>
   82b48:	6922      	ldr	r2, [r4, #16]
   82b4a:	b31a      	cbz	r2, 82b94 <__sfvwrite_r+0x64>
   82b4c:	f013 0002 	ands.w	r0, r3, #2
   82b50:	6835      	ldr	r5, [r6, #0]
   82b52:	d02b      	beq.n	82bac <__sfvwrite_r+0x7c>
   82b54:	f04f 0900 	mov.w	r9, #0
   82b58:	46b0      	mov	r8, r6
   82b5a:	464f      	mov	r7, r9
   82b5c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82e20 <__sfvwrite_r+0x2f0>
   82b60:	2f00      	cmp	r7, #0
   82b62:	d055      	beq.n	82c10 <__sfvwrite_r+0xe0>
   82b64:	4557      	cmp	r7, sl
   82b66:	463b      	mov	r3, r7
   82b68:	464a      	mov	r2, r9
   82b6a:	bf28      	it	cs
   82b6c:	4653      	movcs	r3, sl
   82b6e:	69e1      	ldr	r1, [r4, #28]
   82b70:	9800      	ldr	r0, [sp, #0]
   82b72:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82b74:	47b0      	blx	r6
   82b76:	2800      	cmp	r0, #0
   82b78:	dd56      	ble.n	82c28 <__sfvwrite_r+0xf8>
   82b7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   82b7e:	4481      	add	r9, r0
   82b80:	1a1b      	subs	r3, r3, r0
   82b82:	1a3f      	subs	r7, r7, r0
   82b84:	f8c8 3008 	str.w	r3, [r8, #8]
   82b88:	2b00      	cmp	r3, #0
   82b8a:	d1e9      	bne.n	82b60 <__sfvwrite_r+0x30>
   82b8c:	2000      	movs	r0, #0
   82b8e:	b003      	add	sp, #12
   82b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b94:	4621      	mov	r1, r4
   82b96:	9800      	ldr	r0, [sp, #0]
   82b98:	f7ff fc56 	bl	82448 <__swsetup_r>
   82b9c:	2800      	cmp	r0, #0
   82b9e:	f040 8135 	bne.w	82e0c <__sfvwrite_r+0x2dc>
   82ba2:	89a3      	ldrh	r3, [r4, #12]
   82ba4:	6835      	ldr	r5, [r6, #0]
   82ba6:	f013 0002 	ands.w	r0, r3, #2
   82baa:	d1d3      	bne.n	82b54 <__sfvwrite_r+0x24>
   82bac:	f013 0901 	ands.w	r9, r3, #1
   82bb0:	d144      	bne.n	82c3c <__sfvwrite_r+0x10c>
   82bb2:	464f      	mov	r7, r9
   82bb4:	9601      	str	r6, [sp, #4]
   82bb6:	b337      	cbz	r7, 82c06 <__sfvwrite_r+0xd6>
   82bb8:	059a      	lsls	r2, r3, #22
   82bba:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82bbe:	f140 8085 	bpl.w	82ccc <__sfvwrite_r+0x19c>
   82bc2:	4547      	cmp	r7, r8
   82bc4:	46c3      	mov	fp, r8
   82bc6:	f0c0 80ad 	bcc.w	82d24 <__sfvwrite_r+0x1f4>
   82bca:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82bce:	f040 80ae 	bne.w	82d2e <__sfvwrite_r+0x1fe>
   82bd2:	46ba      	mov	sl, r7
   82bd4:	6820      	ldr	r0, [r4, #0]
   82bd6:	465a      	mov	r2, fp
   82bd8:	4649      	mov	r1, r9
   82bda:	f000 fd55 	bl	83688 <memmove>
   82bde:	68a2      	ldr	r2, [r4, #8]
   82be0:	6823      	ldr	r3, [r4, #0]
   82be2:	eba2 0208 	sub.w	r2, r2, r8
   82be6:	445b      	add	r3, fp
   82be8:	60a2      	str	r2, [r4, #8]
   82bea:	6023      	str	r3, [r4, #0]
   82bec:	9a01      	ldr	r2, [sp, #4]
   82bee:	44d1      	add	r9, sl
   82bf0:	6893      	ldr	r3, [r2, #8]
   82bf2:	eba7 070a 	sub.w	r7, r7, sl
   82bf6:	eba3 030a 	sub.w	r3, r3, sl
   82bfa:	6093      	str	r3, [r2, #8]
   82bfc:	2b00      	cmp	r3, #0
   82bfe:	d0c5      	beq.n	82b8c <__sfvwrite_r+0x5c>
   82c00:	89a3      	ldrh	r3, [r4, #12]
   82c02:	2f00      	cmp	r7, #0
   82c04:	d1d8      	bne.n	82bb8 <__sfvwrite_r+0x88>
   82c06:	f8d5 9000 	ldr.w	r9, [r5]
   82c0a:	686f      	ldr	r7, [r5, #4]
   82c0c:	3508      	adds	r5, #8
   82c0e:	e7d2      	b.n	82bb6 <__sfvwrite_r+0x86>
   82c10:	f8d5 9000 	ldr.w	r9, [r5]
   82c14:	686f      	ldr	r7, [r5, #4]
   82c16:	3508      	adds	r5, #8
   82c18:	e7a2      	b.n	82b60 <__sfvwrite_r+0x30>
   82c1a:	2000      	movs	r0, #0
   82c1c:	4770      	bx	lr
   82c1e:	4621      	mov	r1, r4
   82c20:	9800      	ldr	r0, [sp, #0]
   82c22:	f7ff fd21 	bl	82668 <_fflush_r>
   82c26:	b378      	cbz	r0, 82c88 <__sfvwrite_r+0x158>
   82c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c2c:	f04f 30ff 	mov.w	r0, #4294967295
   82c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82c34:	81a3      	strh	r3, [r4, #12]
   82c36:	b003      	add	sp, #12
   82c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c3c:	4681      	mov	r9, r0
   82c3e:	4633      	mov	r3, r6
   82c40:	464e      	mov	r6, r9
   82c42:	46a8      	mov	r8, r5
   82c44:	469a      	mov	sl, r3
   82c46:	464d      	mov	r5, r9
   82c48:	b356      	cbz	r6, 82ca0 <__sfvwrite_r+0x170>
   82c4a:	2800      	cmp	r0, #0
   82c4c:	d032      	beq.n	82cb4 <__sfvwrite_r+0x184>
   82c4e:	45b1      	cmp	r9, r6
   82c50:	46cb      	mov	fp, r9
   82c52:	bf28      	it	cs
   82c54:	46b3      	movcs	fp, r6
   82c56:	6820      	ldr	r0, [r4, #0]
   82c58:	6923      	ldr	r3, [r4, #16]
   82c5a:	465f      	mov	r7, fp
   82c5c:	4298      	cmp	r0, r3
   82c5e:	6962      	ldr	r2, [r4, #20]
   82c60:	d904      	bls.n	82c6c <__sfvwrite_r+0x13c>
   82c62:	68a3      	ldr	r3, [r4, #8]
   82c64:	4413      	add	r3, r2
   82c66:	459b      	cmp	fp, r3
   82c68:	f300 80a8 	bgt.w	82dbc <__sfvwrite_r+0x28c>
   82c6c:	4593      	cmp	fp, r2
   82c6e:	db4d      	blt.n	82d0c <__sfvwrite_r+0x1dc>
   82c70:	4613      	mov	r3, r2
   82c72:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82c74:	462a      	mov	r2, r5
   82c76:	69e1      	ldr	r1, [r4, #28]
   82c78:	9800      	ldr	r0, [sp, #0]
   82c7a:	47b8      	blx	r7
   82c7c:	1e07      	subs	r7, r0, #0
   82c7e:	ddd3      	ble.n	82c28 <__sfvwrite_r+0xf8>
   82c80:	ebb9 0907 	subs.w	r9, r9, r7
   82c84:	d0cb      	beq.n	82c1e <__sfvwrite_r+0xee>
   82c86:	2001      	movs	r0, #1
   82c88:	f8da 3008 	ldr.w	r3, [sl, #8]
   82c8c:	443d      	add	r5, r7
   82c8e:	1bdb      	subs	r3, r3, r7
   82c90:	1bf6      	subs	r6, r6, r7
   82c92:	f8ca 3008 	str.w	r3, [sl, #8]
   82c96:	2b00      	cmp	r3, #0
   82c98:	f43f af78 	beq.w	82b8c <__sfvwrite_r+0x5c>
   82c9c:	2e00      	cmp	r6, #0
   82c9e:	d1d4      	bne.n	82c4a <__sfvwrite_r+0x11a>
   82ca0:	f108 0308 	add.w	r3, r8, #8
   82ca4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82ca8:	4698      	mov	r8, r3
   82caa:	f853 5c08 	ldr.w	r5, [r3, #-8]
   82cae:	3308      	adds	r3, #8
   82cb0:	2e00      	cmp	r6, #0
   82cb2:	d0f7      	beq.n	82ca4 <__sfvwrite_r+0x174>
   82cb4:	4632      	mov	r2, r6
   82cb6:	210a      	movs	r1, #10
   82cb8:	4628      	mov	r0, r5
   82cba:	f000 fc29 	bl	83510 <memchr>
   82cbe:	2800      	cmp	r0, #0
   82cc0:	f000 80a1 	beq.w	82e06 <__sfvwrite_r+0x2d6>
   82cc4:	3001      	adds	r0, #1
   82cc6:	eba0 0905 	sub.w	r9, r0, r5
   82cca:	e7c0      	b.n	82c4e <__sfvwrite_r+0x11e>
   82ccc:	6820      	ldr	r0, [r4, #0]
   82cce:	6923      	ldr	r3, [r4, #16]
   82cd0:	4298      	cmp	r0, r3
   82cd2:	d802      	bhi.n	82cda <__sfvwrite_r+0x1aa>
   82cd4:	6963      	ldr	r3, [r4, #20]
   82cd6:	429f      	cmp	r7, r3
   82cd8:	d25d      	bcs.n	82d96 <__sfvwrite_r+0x266>
   82cda:	45b8      	cmp	r8, r7
   82cdc:	bf28      	it	cs
   82cde:	46b8      	movcs	r8, r7
   82ce0:	4649      	mov	r1, r9
   82ce2:	4642      	mov	r2, r8
   82ce4:	f000 fcd0 	bl	83688 <memmove>
   82ce8:	68a3      	ldr	r3, [r4, #8]
   82cea:	6822      	ldr	r2, [r4, #0]
   82cec:	eba3 0308 	sub.w	r3, r3, r8
   82cf0:	4442      	add	r2, r8
   82cf2:	60a3      	str	r3, [r4, #8]
   82cf4:	6022      	str	r2, [r4, #0]
   82cf6:	b10b      	cbz	r3, 82cfc <__sfvwrite_r+0x1cc>
   82cf8:	46c2      	mov	sl, r8
   82cfa:	e777      	b.n	82bec <__sfvwrite_r+0xbc>
   82cfc:	4621      	mov	r1, r4
   82cfe:	9800      	ldr	r0, [sp, #0]
   82d00:	f7ff fcb2 	bl	82668 <_fflush_r>
   82d04:	2800      	cmp	r0, #0
   82d06:	d18f      	bne.n	82c28 <__sfvwrite_r+0xf8>
   82d08:	46c2      	mov	sl, r8
   82d0a:	e76f      	b.n	82bec <__sfvwrite_r+0xbc>
   82d0c:	465a      	mov	r2, fp
   82d0e:	4629      	mov	r1, r5
   82d10:	f000 fcba 	bl	83688 <memmove>
   82d14:	68a2      	ldr	r2, [r4, #8]
   82d16:	6823      	ldr	r3, [r4, #0]
   82d18:	eba2 020b 	sub.w	r2, r2, fp
   82d1c:	445b      	add	r3, fp
   82d1e:	60a2      	str	r2, [r4, #8]
   82d20:	6023      	str	r3, [r4, #0]
   82d22:	e7ad      	b.n	82c80 <__sfvwrite_r+0x150>
   82d24:	46b8      	mov	r8, r7
   82d26:	46ba      	mov	sl, r7
   82d28:	46bb      	mov	fp, r7
   82d2a:	6820      	ldr	r0, [r4, #0]
   82d2c:	e753      	b.n	82bd6 <__sfvwrite_r+0xa6>
   82d2e:	6962      	ldr	r2, [r4, #20]
   82d30:	6820      	ldr	r0, [r4, #0]
   82d32:	6921      	ldr	r1, [r4, #16]
   82d34:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82d38:	eba0 0a01 	sub.w	sl, r0, r1
   82d3c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82d40:	f10a 0001 	add.w	r0, sl, #1
   82d44:	ea4f 0868 	mov.w	r8, r8, asr #1
   82d48:	4438      	add	r0, r7
   82d4a:	4540      	cmp	r0, r8
   82d4c:	4642      	mov	r2, r8
   82d4e:	bf84      	itt	hi
   82d50:	4680      	movhi	r8, r0
   82d52:	4642      	movhi	r2, r8
   82d54:	055b      	lsls	r3, r3, #21
   82d56:	d544      	bpl.n	82de2 <__sfvwrite_r+0x2b2>
   82d58:	4611      	mov	r1, r2
   82d5a:	9800      	ldr	r0, [sp, #0]
   82d5c:	f000 f920 	bl	82fa0 <_malloc_r>
   82d60:	4683      	mov	fp, r0
   82d62:	2800      	cmp	r0, #0
   82d64:	d055      	beq.n	82e12 <__sfvwrite_r+0x2e2>
   82d66:	4652      	mov	r2, sl
   82d68:	6921      	ldr	r1, [r4, #16]
   82d6a:	f000 fc17 	bl	8359c <memcpy>
   82d6e:	89a3      	ldrh	r3, [r4, #12]
   82d70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82d78:	81a3      	strh	r3, [r4, #12]
   82d7a:	eb0b 000a 	add.w	r0, fp, sl
   82d7e:	eba8 030a 	sub.w	r3, r8, sl
   82d82:	f8c4 b010 	str.w	fp, [r4, #16]
   82d86:	f8c4 8014 	str.w	r8, [r4, #20]
   82d8a:	6020      	str	r0, [r4, #0]
   82d8c:	60a3      	str	r3, [r4, #8]
   82d8e:	46b8      	mov	r8, r7
   82d90:	46ba      	mov	sl, r7
   82d92:	46bb      	mov	fp, r7
   82d94:	e71f      	b.n	82bd6 <__sfvwrite_r+0xa6>
   82d96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82d9a:	42ba      	cmp	r2, r7
   82d9c:	bf28      	it	cs
   82d9e:	463a      	movcs	r2, r7
   82da0:	fb92 f2f3 	sdiv	r2, r2, r3
   82da4:	69e1      	ldr	r1, [r4, #28]
   82da6:	fb03 f302 	mul.w	r3, r3, r2
   82daa:	9800      	ldr	r0, [sp, #0]
   82dac:	464a      	mov	r2, r9
   82dae:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82db0:	47b0      	blx	r6
   82db2:	f1b0 0a00 	subs.w	sl, r0, #0
   82db6:	f73f af19 	bgt.w	82bec <__sfvwrite_r+0xbc>
   82dba:	e735      	b.n	82c28 <__sfvwrite_r+0xf8>
   82dbc:	461a      	mov	r2, r3
   82dbe:	4629      	mov	r1, r5
   82dc0:	9301      	str	r3, [sp, #4]
   82dc2:	f000 fc61 	bl	83688 <memmove>
   82dc6:	6822      	ldr	r2, [r4, #0]
   82dc8:	9b01      	ldr	r3, [sp, #4]
   82dca:	4621      	mov	r1, r4
   82dcc:	441a      	add	r2, r3
   82dce:	6022      	str	r2, [r4, #0]
   82dd0:	9800      	ldr	r0, [sp, #0]
   82dd2:	f7ff fc49 	bl	82668 <_fflush_r>
   82dd6:	9b01      	ldr	r3, [sp, #4]
   82dd8:	2800      	cmp	r0, #0
   82dda:	f47f af25 	bne.w	82c28 <__sfvwrite_r+0xf8>
   82dde:	461f      	mov	r7, r3
   82de0:	e74e      	b.n	82c80 <__sfvwrite_r+0x150>
   82de2:	9800      	ldr	r0, [sp, #0]
   82de4:	f000 fcc0 	bl	83768 <_realloc_r>
   82de8:	4683      	mov	fp, r0
   82dea:	2800      	cmp	r0, #0
   82dec:	d1c5      	bne.n	82d7a <__sfvwrite_r+0x24a>
   82dee:	9d00      	ldr	r5, [sp, #0]
   82df0:	6921      	ldr	r1, [r4, #16]
   82df2:	4628      	mov	r0, r5
   82df4:	f7ff fdb6 	bl	82964 <_free_r>
   82df8:	220c      	movs	r2, #12
   82dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82dfe:	602a      	str	r2, [r5, #0]
   82e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82e04:	e712      	b.n	82c2c <__sfvwrite_r+0xfc>
   82e06:	f106 0901 	add.w	r9, r6, #1
   82e0a:	e720      	b.n	82c4e <__sfvwrite_r+0x11e>
   82e0c:	f04f 30ff 	mov.w	r0, #4294967295
   82e10:	e6bd      	b.n	82b8e <__sfvwrite_r+0x5e>
   82e12:	220c      	movs	r2, #12
   82e14:	9900      	ldr	r1, [sp, #0]
   82e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82e1a:	600a      	str	r2, [r1, #0]
   82e1c:	e706      	b.n	82c2c <__sfvwrite_r+0xfc>
   82e1e:	bf00      	nop
   82e20:	7ffffc00 	.word	0x7ffffc00

00082e24 <_fwalk_reent>:
   82e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82e28:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82e2c:	d01e      	beq.n	82e6c <_fwalk_reent+0x48>
   82e2e:	4688      	mov	r8, r1
   82e30:	4607      	mov	r7, r0
   82e32:	f04f 0900 	mov.w	r9, #0
   82e36:	6875      	ldr	r5, [r6, #4]
   82e38:	68b4      	ldr	r4, [r6, #8]
   82e3a:	3d01      	subs	r5, #1
   82e3c:	d410      	bmi.n	82e60 <_fwalk_reent+0x3c>
   82e3e:	89a3      	ldrh	r3, [r4, #12]
   82e40:	3d01      	subs	r5, #1
   82e42:	2b01      	cmp	r3, #1
   82e44:	d908      	bls.n	82e58 <_fwalk_reent+0x34>
   82e46:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82e4a:	3301      	adds	r3, #1
   82e4c:	d004      	beq.n	82e58 <_fwalk_reent+0x34>
   82e4e:	4621      	mov	r1, r4
   82e50:	4638      	mov	r0, r7
   82e52:	47c0      	blx	r8
   82e54:	ea49 0900 	orr.w	r9, r9, r0
   82e58:	1c6b      	adds	r3, r5, #1
   82e5a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82e5e:	d1ee      	bne.n	82e3e <_fwalk_reent+0x1a>
   82e60:	6836      	ldr	r6, [r6, #0]
   82e62:	2e00      	cmp	r6, #0
   82e64:	d1e7      	bne.n	82e36 <_fwalk_reent+0x12>
   82e66:	4648      	mov	r0, r9
   82e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82e6c:	46b1      	mov	r9, r6
   82e6e:	4648      	mov	r0, r9
   82e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082e74 <__locale_mb_cur_max>:
   82e74:	4b04      	ldr	r3, [pc, #16]	; (82e88 <__locale_mb_cur_max+0x14>)
   82e76:	4a05      	ldr	r2, [pc, #20]	; (82e8c <__locale_mb_cur_max+0x18>)
   82e78:	681b      	ldr	r3, [r3, #0]
   82e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82e7c:	2b00      	cmp	r3, #0
   82e7e:	bf08      	it	eq
   82e80:	4613      	moveq	r3, r2
   82e82:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82e86:	4770      	bx	lr
   82e88:	20070134 	.word	0x20070134
   82e8c:	20070564 	.word	0x20070564

00082e90 <__retarget_lock_init_recursive>:
   82e90:	4770      	bx	lr
   82e92:	bf00      	nop

00082e94 <__retarget_lock_close_recursive>:
   82e94:	4770      	bx	lr
   82e96:	bf00      	nop

00082e98 <__retarget_lock_acquire_recursive>:
   82e98:	4770      	bx	lr
   82e9a:	bf00      	nop

00082e9c <__retarget_lock_release_recursive>:
   82e9c:	4770      	bx	lr
   82e9e:	bf00      	nop

00082ea0 <__swhatbuf_r>:
   82ea0:	b570      	push	{r4, r5, r6, lr}
   82ea2:	460c      	mov	r4, r1
   82ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82ea8:	b090      	sub	sp, #64	; 0x40
   82eaa:	2900      	cmp	r1, #0
   82eac:	4615      	mov	r5, r2
   82eae:	461e      	mov	r6, r3
   82eb0:	db14      	blt.n	82edc <__swhatbuf_r+0x3c>
   82eb2:	aa01      	add	r2, sp, #4
   82eb4:	f000 ffde 	bl	83e74 <_fstat_r>
   82eb8:	2800      	cmp	r0, #0
   82eba:	db0f      	blt.n	82edc <__swhatbuf_r+0x3c>
   82ebc:	9a02      	ldr	r2, [sp, #8]
   82ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82ec2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82ec6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82eca:	fab2 f282 	clz	r2, r2
   82ece:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82ed2:	0952      	lsrs	r2, r2, #5
   82ed4:	6032      	str	r2, [r6, #0]
   82ed6:	602b      	str	r3, [r5, #0]
   82ed8:	b010      	add	sp, #64	; 0x40
   82eda:	bd70      	pop	{r4, r5, r6, pc}
   82edc:	2300      	movs	r3, #0
   82ede:	89a2      	ldrh	r2, [r4, #12]
   82ee0:	6033      	str	r3, [r6, #0]
   82ee2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82ee6:	d004      	beq.n	82ef2 <__swhatbuf_r+0x52>
   82ee8:	2240      	movs	r2, #64	; 0x40
   82eea:	4618      	mov	r0, r3
   82eec:	602a      	str	r2, [r5, #0]
   82eee:	b010      	add	sp, #64	; 0x40
   82ef0:	bd70      	pop	{r4, r5, r6, pc}
   82ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82ef6:	602b      	str	r3, [r5, #0]
   82ef8:	b010      	add	sp, #64	; 0x40
   82efa:	bd70      	pop	{r4, r5, r6, pc}

00082efc <__smakebuf_r>:
   82efc:	898a      	ldrh	r2, [r1, #12]
   82efe:	460b      	mov	r3, r1
   82f00:	0792      	lsls	r2, r2, #30
   82f02:	d506      	bpl.n	82f12 <__smakebuf_r+0x16>
   82f04:	2101      	movs	r1, #1
   82f06:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82f0a:	6159      	str	r1, [r3, #20]
   82f0c:	601a      	str	r2, [r3, #0]
   82f0e:	611a      	str	r2, [r3, #16]
   82f10:	4770      	bx	lr
   82f12:	b5f0      	push	{r4, r5, r6, r7, lr}
   82f14:	b083      	sub	sp, #12
   82f16:	ab01      	add	r3, sp, #4
   82f18:	466a      	mov	r2, sp
   82f1a:	460c      	mov	r4, r1
   82f1c:	4606      	mov	r6, r0
   82f1e:	f7ff ffbf 	bl	82ea0 <__swhatbuf_r>
   82f22:	9900      	ldr	r1, [sp, #0]
   82f24:	4605      	mov	r5, r0
   82f26:	4630      	mov	r0, r6
   82f28:	f000 f83a 	bl	82fa0 <_malloc_r>
   82f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82f30:	b1d8      	cbz	r0, 82f6a <__smakebuf_r+0x6e>
   82f32:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82f36:	4f15      	ldr	r7, [pc, #84]	; (82f8c <__smakebuf_r+0x90>)
   82f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82f3c:	63f7      	str	r7, [r6, #60]	; 0x3c
   82f3e:	81a3      	strh	r3, [r4, #12]
   82f40:	6020      	str	r0, [r4, #0]
   82f42:	6120      	str	r0, [r4, #16]
   82f44:	6161      	str	r1, [r4, #20]
   82f46:	b91a      	cbnz	r2, 82f50 <__smakebuf_r+0x54>
   82f48:	432b      	orrs	r3, r5
   82f4a:	81a3      	strh	r3, [r4, #12]
   82f4c:	b003      	add	sp, #12
   82f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82f50:	4630      	mov	r0, r6
   82f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82f56:	f000 ffa1 	bl	83e9c <_isatty_r>
   82f5a:	b1a0      	cbz	r0, 82f86 <__smakebuf_r+0x8a>
   82f5c:	89a3      	ldrh	r3, [r4, #12]
   82f5e:	f023 0303 	bic.w	r3, r3, #3
   82f62:	f043 0301 	orr.w	r3, r3, #1
   82f66:	b21b      	sxth	r3, r3
   82f68:	e7ee      	b.n	82f48 <__smakebuf_r+0x4c>
   82f6a:	059a      	lsls	r2, r3, #22
   82f6c:	d4ee      	bmi.n	82f4c <__smakebuf_r+0x50>
   82f6e:	2101      	movs	r1, #1
   82f70:	f023 0303 	bic.w	r3, r3, #3
   82f74:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82f78:	f043 0302 	orr.w	r3, r3, #2
   82f7c:	81a3      	strh	r3, [r4, #12]
   82f7e:	6161      	str	r1, [r4, #20]
   82f80:	6022      	str	r2, [r4, #0]
   82f82:	6122      	str	r2, [r4, #16]
   82f84:	e7e2      	b.n	82f4c <__smakebuf_r+0x50>
   82f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82f8a:	e7dd      	b.n	82f48 <__smakebuf_r+0x4c>
   82f8c:	000826bd 	.word	0x000826bd

00082f90 <malloc>:
   82f90:	4b02      	ldr	r3, [pc, #8]	; (82f9c <malloc+0xc>)
   82f92:	4601      	mov	r1, r0
   82f94:	6818      	ldr	r0, [r3, #0]
   82f96:	f000 b803 	b.w	82fa0 <_malloc_r>
   82f9a:	bf00      	nop
   82f9c:	20070134 	.word	0x20070134

00082fa0 <_malloc_r>:
   82fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82fa4:	f101 060b 	add.w	r6, r1, #11
   82fa8:	2e16      	cmp	r6, #22
   82faa:	b083      	sub	sp, #12
   82fac:	4605      	mov	r5, r0
   82fae:	f240 809e 	bls.w	830ee <_malloc_r+0x14e>
   82fb2:	f036 0607 	bics.w	r6, r6, #7
   82fb6:	f100 80bd 	bmi.w	83134 <_malloc_r+0x194>
   82fba:	42b1      	cmp	r1, r6
   82fbc:	f200 80ba 	bhi.w	83134 <_malloc_r+0x194>
   82fc0:	f000 fbc6 	bl	83750 <__malloc_lock>
   82fc4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82fc8:	f0c0 8285 	bcc.w	834d6 <_malloc_r+0x536>
   82fcc:	0a73      	lsrs	r3, r6, #9
   82fce:	f000 80b8 	beq.w	83142 <_malloc_r+0x1a2>
   82fd2:	2b04      	cmp	r3, #4
   82fd4:	f200 816c 	bhi.w	832b0 <_malloc_r+0x310>
   82fd8:	09b3      	lsrs	r3, r6, #6
   82fda:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82fde:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82fe2:	00c1      	lsls	r1, r0, #3
   82fe4:	4fb8      	ldr	r7, [pc, #736]	; (832c8 <_malloc_r+0x328>)
   82fe6:	4439      	add	r1, r7
   82fe8:	684c      	ldr	r4, [r1, #4]
   82fea:	3908      	subs	r1, #8
   82fec:	42a1      	cmp	r1, r4
   82fee:	d106      	bne.n	82ffe <_malloc_r+0x5e>
   82ff0:	e00c      	b.n	8300c <_malloc_r+0x6c>
   82ff2:	2a00      	cmp	r2, #0
   82ff4:	f280 80ab 	bge.w	8314e <_malloc_r+0x1ae>
   82ff8:	68e4      	ldr	r4, [r4, #12]
   82ffa:	42a1      	cmp	r1, r4
   82ffc:	d006      	beq.n	8300c <_malloc_r+0x6c>
   82ffe:	6863      	ldr	r3, [r4, #4]
   83000:	f023 0303 	bic.w	r3, r3, #3
   83004:	1b9a      	subs	r2, r3, r6
   83006:	2a0f      	cmp	r2, #15
   83008:	ddf3      	ble.n	82ff2 <_malloc_r+0x52>
   8300a:	4670      	mov	r0, lr
   8300c:	693c      	ldr	r4, [r7, #16]
   8300e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 832dc <_malloc_r+0x33c>
   83012:	4574      	cmp	r4, lr
   83014:	f000 819e 	beq.w	83354 <_malloc_r+0x3b4>
   83018:	6863      	ldr	r3, [r4, #4]
   8301a:	f023 0303 	bic.w	r3, r3, #3
   8301e:	1b9a      	subs	r2, r3, r6
   83020:	2a0f      	cmp	r2, #15
   83022:	f300 8183 	bgt.w	8332c <_malloc_r+0x38c>
   83026:	2a00      	cmp	r2, #0
   83028:	f8c7 e014 	str.w	lr, [r7, #20]
   8302c:	f8c7 e010 	str.w	lr, [r7, #16]
   83030:	f280 8091 	bge.w	83156 <_malloc_r+0x1b6>
   83034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83038:	f080 8154 	bcs.w	832e4 <_malloc_r+0x344>
   8303c:	2201      	movs	r2, #1
   8303e:	08db      	lsrs	r3, r3, #3
   83040:	6879      	ldr	r1, [r7, #4]
   83042:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83046:	4413      	add	r3, r2
   83048:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8304c:	fa02 f20c 	lsl.w	r2, r2, ip
   83050:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83054:	430a      	orrs	r2, r1
   83056:	f1ac 0108 	sub.w	r1, ip, #8
   8305a:	60e1      	str	r1, [r4, #12]
   8305c:	f8c4 8008 	str.w	r8, [r4, #8]
   83060:	607a      	str	r2, [r7, #4]
   83062:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83066:	f8c8 400c 	str.w	r4, [r8, #12]
   8306a:	2401      	movs	r4, #1
   8306c:	1083      	asrs	r3, r0, #2
   8306e:	409c      	lsls	r4, r3
   83070:	4294      	cmp	r4, r2
   83072:	d87d      	bhi.n	83170 <_malloc_r+0x1d0>
   83074:	4214      	tst	r4, r2
   83076:	d106      	bne.n	83086 <_malloc_r+0xe6>
   83078:	f020 0003 	bic.w	r0, r0, #3
   8307c:	0064      	lsls	r4, r4, #1
   8307e:	4214      	tst	r4, r2
   83080:	f100 0004 	add.w	r0, r0, #4
   83084:	d0fa      	beq.n	8307c <_malloc_r+0xdc>
   83086:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8308a:	46cc      	mov	ip, r9
   8308c:	4680      	mov	r8, r0
   8308e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83092:	459c      	cmp	ip, r3
   83094:	d107      	bne.n	830a6 <_malloc_r+0x106>
   83096:	e15f      	b.n	83358 <_malloc_r+0x3b8>
   83098:	2a00      	cmp	r2, #0
   8309a:	f280 816d 	bge.w	83378 <_malloc_r+0x3d8>
   8309e:	68db      	ldr	r3, [r3, #12]
   830a0:	459c      	cmp	ip, r3
   830a2:	f000 8159 	beq.w	83358 <_malloc_r+0x3b8>
   830a6:	6859      	ldr	r1, [r3, #4]
   830a8:	f021 0103 	bic.w	r1, r1, #3
   830ac:	1b8a      	subs	r2, r1, r6
   830ae:	2a0f      	cmp	r2, #15
   830b0:	ddf2      	ble.n	83098 <_malloc_r+0xf8>
   830b2:	68dc      	ldr	r4, [r3, #12]
   830b4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   830b8:	f046 0801 	orr.w	r8, r6, #1
   830bc:	4628      	mov	r0, r5
   830be:	441e      	add	r6, r3
   830c0:	f042 0501 	orr.w	r5, r2, #1
   830c4:	f8c3 8004 	str.w	r8, [r3, #4]
   830c8:	f8cc 400c 	str.w	r4, [ip, #12]
   830cc:	f8c4 c008 	str.w	ip, [r4, #8]
   830d0:	617e      	str	r6, [r7, #20]
   830d2:	613e      	str	r6, [r7, #16]
   830d4:	f8c6 e00c 	str.w	lr, [r6, #12]
   830d8:	f8c6 e008 	str.w	lr, [r6, #8]
   830dc:	6075      	str	r5, [r6, #4]
   830de:	505a      	str	r2, [r3, r1]
   830e0:	9300      	str	r3, [sp, #0]
   830e2:	f000 fb3b 	bl	8375c <__malloc_unlock>
   830e6:	9b00      	ldr	r3, [sp, #0]
   830e8:	f103 0408 	add.w	r4, r3, #8
   830ec:	e01e      	b.n	8312c <_malloc_r+0x18c>
   830ee:	2910      	cmp	r1, #16
   830f0:	d820      	bhi.n	83134 <_malloc_r+0x194>
   830f2:	f000 fb2d 	bl	83750 <__malloc_lock>
   830f6:	2610      	movs	r6, #16
   830f8:	2318      	movs	r3, #24
   830fa:	2002      	movs	r0, #2
   830fc:	4f72      	ldr	r7, [pc, #456]	; (832c8 <_malloc_r+0x328>)
   830fe:	443b      	add	r3, r7
   83100:	685c      	ldr	r4, [r3, #4]
   83102:	f1a3 0208 	sub.w	r2, r3, #8
   83106:	4294      	cmp	r4, r2
   83108:	f000 812f 	beq.w	8336a <_malloc_r+0x3ca>
   8310c:	6863      	ldr	r3, [r4, #4]
   8310e:	68e1      	ldr	r1, [r4, #12]
   83110:	f023 0303 	bic.w	r3, r3, #3
   83114:	4423      	add	r3, r4
   83116:	685a      	ldr	r2, [r3, #4]
   83118:	68a6      	ldr	r6, [r4, #8]
   8311a:	f042 0201 	orr.w	r2, r2, #1
   8311e:	60f1      	str	r1, [r6, #12]
   83120:	4628      	mov	r0, r5
   83122:	608e      	str	r6, [r1, #8]
   83124:	605a      	str	r2, [r3, #4]
   83126:	f000 fb19 	bl	8375c <__malloc_unlock>
   8312a:	3408      	adds	r4, #8
   8312c:	4620      	mov	r0, r4
   8312e:	b003      	add	sp, #12
   83130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83134:	2400      	movs	r4, #0
   83136:	230c      	movs	r3, #12
   83138:	4620      	mov	r0, r4
   8313a:	602b      	str	r3, [r5, #0]
   8313c:	b003      	add	sp, #12
   8313e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83142:	2040      	movs	r0, #64	; 0x40
   83144:	f44f 7100 	mov.w	r1, #512	; 0x200
   83148:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8314c:	e74a      	b.n	82fe4 <_malloc_r+0x44>
   8314e:	4423      	add	r3, r4
   83150:	685a      	ldr	r2, [r3, #4]
   83152:	68e1      	ldr	r1, [r4, #12]
   83154:	e7e0      	b.n	83118 <_malloc_r+0x178>
   83156:	4423      	add	r3, r4
   83158:	685a      	ldr	r2, [r3, #4]
   8315a:	4628      	mov	r0, r5
   8315c:	f042 0201 	orr.w	r2, r2, #1
   83160:	605a      	str	r2, [r3, #4]
   83162:	3408      	adds	r4, #8
   83164:	f000 fafa 	bl	8375c <__malloc_unlock>
   83168:	4620      	mov	r0, r4
   8316a:	b003      	add	sp, #12
   8316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83170:	68bc      	ldr	r4, [r7, #8]
   83172:	6863      	ldr	r3, [r4, #4]
   83174:	f023 0803 	bic.w	r8, r3, #3
   83178:	45b0      	cmp	r8, r6
   8317a:	d304      	bcc.n	83186 <_malloc_r+0x1e6>
   8317c:	eba8 0306 	sub.w	r3, r8, r6
   83180:	2b0f      	cmp	r3, #15
   83182:	f300 8085 	bgt.w	83290 <_malloc_r+0x2f0>
   83186:	f8df 9158 	ldr.w	r9, [pc, #344]	; 832e0 <_malloc_r+0x340>
   8318a:	4b50      	ldr	r3, [pc, #320]	; (832cc <_malloc_r+0x32c>)
   8318c:	f8d9 2000 	ldr.w	r2, [r9]
   83190:	681b      	ldr	r3, [r3, #0]
   83192:	3201      	adds	r2, #1
   83194:	4433      	add	r3, r6
   83196:	eb04 0a08 	add.w	sl, r4, r8
   8319a:	f000 8154 	beq.w	83446 <_malloc_r+0x4a6>
   8319e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   831a2:	330f      	adds	r3, #15
   831a4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   831a8:	f02b 0b0f 	bic.w	fp, fp, #15
   831ac:	4659      	mov	r1, fp
   831ae:	4628      	mov	r0, r5
   831b0:	f000 fc90 	bl	83ad4 <_sbrk_r>
   831b4:	1c41      	adds	r1, r0, #1
   831b6:	4602      	mov	r2, r0
   831b8:	f000 80fb 	beq.w	833b2 <_malloc_r+0x412>
   831bc:	4582      	cmp	sl, r0
   831be:	f200 80f6 	bhi.w	833ae <_malloc_r+0x40e>
   831c2:	4b43      	ldr	r3, [pc, #268]	; (832d0 <_malloc_r+0x330>)
   831c4:	6819      	ldr	r1, [r3, #0]
   831c6:	4459      	add	r1, fp
   831c8:	6019      	str	r1, [r3, #0]
   831ca:	f000 814c 	beq.w	83466 <_malloc_r+0x4c6>
   831ce:	f8d9 0000 	ldr.w	r0, [r9]
   831d2:	3001      	adds	r0, #1
   831d4:	bf1b      	ittet	ne
   831d6:	eba2 0a0a 	subne.w	sl, r2, sl
   831da:	4451      	addne	r1, sl
   831dc:	f8c9 2000 	streq.w	r2, [r9]
   831e0:	6019      	strne	r1, [r3, #0]
   831e2:	f012 0107 	ands.w	r1, r2, #7
   831e6:	f000 8114 	beq.w	83412 <_malloc_r+0x472>
   831ea:	f1c1 0008 	rsb	r0, r1, #8
   831ee:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   831f2:	4402      	add	r2, r0
   831f4:	3108      	adds	r1, #8
   831f6:	eb02 090b 	add.w	r9, r2, fp
   831fa:	f3c9 090b 	ubfx	r9, r9, #0, #12
   831fe:	eba1 0909 	sub.w	r9, r1, r9
   83202:	4649      	mov	r1, r9
   83204:	4628      	mov	r0, r5
   83206:	9301      	str	r3, [sp, #4]
   83208:	9200      	str	r2, [sp, #0]
   8320a:	f000 fc63 	bl	83ad4 <_sbrk_r>
   8320e:	1c43      	adds	r3, r0, #1
   83210:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83214:	f000 8142 	beq.w	8349c <_malloc_r+0x4fc>
   83218:	1a80      	subs	r0, r0, r2
   8321a:	4448      	add	r0, r9
   8321c:	f040 0001 	orr.w	r0, r0, #1
   83220:	6819      	ldr	r1, [r3, #0]
   83222:	42bc      	cmp	r4, r7
   83224:	4449      	add	r1, r9
   83226:	60ba      	str	r2, [r7, #8]
   83228:	6019      	str	r1, [r3, #0]
   8322a:	6050      	str	r0, [r2, #4]
   8322c:	d017      	beq.n	8325e <_malloc_r+0x2be>
   8322e:	f1b8 0f0f 	cmp.w	r8, #15
   83232:	f240 80fa 	bls.w	8342a <_malloc_r+0x48a>
   83236:	f04f 0c05 	mov.w	ip, #5
   8323a:	6862      	ldr	r2, [r4, #4]
   8323c:	f1a8 000c 	sub.w	r0, r8, #12
   83240:	f020 0007 	bic.w	r0, r0, #7
   83244:	f002 0201 	and.w	r2, r2, #1
   83248:	eb04 0e00 	add.w	lr, r4, r0
   8324c:	4302      	orrs	r2, r0
   8324e:	280f      	cmp	r0, #15
   83250:	6062      	str	r2, [r4, #4]
   83252:	f8ce c004 	str.w	ip, [lr, #4]
   83256:	f8ce c008 	str.w	ip, [lr, #8]
   8325a:	f200 8116 	bhi.w	8348a <_malloc_r+0x4ea>
   8325e:	4b1d      	ldr	r3, [pc, #116]	; (832d4 <_malloc_r+0x334>)
   83260:	68bc      	ldr	r4, [r7, #8]
   83262:	681a      	ldr	r2, [r3, #0]
   83264:	4291      	cmp	r1, r2
   83266:	bf88      	it	hi
   83268:	6019      	strhi	r1, [r3, #0]
   8326a:	4b1b      	ldr	r3, [pc, #108]	; (832d8 <_malloc_r+0x338>)
   8326c:	681a      	ldr	r2, [r3, #0]
   8326e:	4291      	cmp	r1, r2
   83270:	6862      	ldr	r2, [r4, #4]
   83272:	bf88      	it	hi
   83274:	6019      	strhi	r1, [r3, #0]
   83276:	f022 0203 	bic.w	r2, r2, #3
   8327a:	4296      	cmp	r6, r2
   8327c:	eba2 0306 	sub.w	r3, r2, r6
   83280:	d801      	bhi.n	83286 <_malloc_r+0x2e6>
   83282:	2b0f      	cmp	r3, #15
   83284:	dc04      	bgt.n	83290 <_malloc_r+0x2f0>
   83286:	4628      	mov	r0, r5
   83288:	f000 fa68 	bl	8375c <__malloc_unlock>
   8328c:	2400      	movs	r4, #0
   8328e:	e74d      	b.n	8312c <_malloc_r+0x18c>
   83290:	f046 0201 	orr.w	r2, r6, #1
   83294:	f043 0301 	orr.w	r3, r3, #1
   83298:	4426      	add	r6, r4
   8329a:	6062      	str	r2, [r4, #4]
   8329c:	4628      	mov	r0, r5
   8329e:	60be      	str	r6, [r7, #8]
   832a0:	3408      	adds	r4, #8
   832a2:	6073      	str	r3, [r6, #4]
   832a4:	f000 fa5a 	bl	8375c <__malloc_unlock>
   832a8:	4620      	mov	r0, r4
   832aa:	b003      	add	sp, #12
   832ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   832b0:	2b14      	cmp	r3, #20
   832b2:	d970      	bls.n	83396 <_malloc_r+0x3f6>
   832b4:	2b54      	cmp	r3, #84	; 0x54
   832b6:	f200 80a2 	bhi.w	833fe <_malloc_r+0x45e>
   832ba:	0b33      	lsrs	r3, r6, #12
   832bc:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   832c0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   832c4:	00c1      	lsls	r1, r0, #3
   832c6:	e68d      	b.n	82fe4 <_malloc_r+0x44>
   832c8:	200706d0 	.word	0x200706d0
   832cc:	20070c50 	.word	0x20070c50
   832d0:	20070c20 	.word	0x20070c20
   832d4:	20070c48 	.word	0x20070c48
   832d8:	20070c4c 	.word	0x20070c4c
   832dc:	200706d8 	.word	0x200706d8
   832e0:	20070ad8 	.word	0x20070ad8
   832e4:	0a5a      	lsrs	r2, r3, #9
   832e6:	2a04      	cmp	r2, #4
   832e8:	d95b      	bls.n	833a2 <_malloc_r+0x402>
   832ea:	2a14      	cmp	r2, #20
   832ec:	f200 80ae 	bhi.w	8344c <_malloc_r+0x4ac>
   832f0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   832f4:	00c9      	lsls	r1, r1, #3
   832f6:	325b      	adds	r2, #91	; 0x5b
   832f8:	eb07 0c01 	add.w	ip, r7, r1
   832fc:	5879      	ldr	r1, [r7, r1]
   832fe:	f1ac 0c08 	sub.w	ip, ip, #8
   83302:	458c      	cmp	ip, r1
   83304:	f000 8088 	beq.w	83418 <_malloc_r+0x478>
   83308:	684a      	ldr	r2, [r1, #4]
   8330a:	f022 0203 	bic.w	r2, r2, #3
   8330e:	4293      	cmp	r3, r2
   83310:	d273      	bcs.n	833fa <_malloc_r+0x45a>
   83312:	6889      	ldr	r1, [r1, #8]
   83314:	458c      	cmp	ip, r1
   83316:	d1f7      	bne.n	83308 <_malloc_r+0x368>
   83318:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8331c:	687a      	ldr	r2, [r7, #4]
   8331e:	60e3      	str	r3, [r4, #12]
   83320:	f8c4 c008 	str.w	ip, [r4, #8]
   83324:	609c      	str	r4, [r3, #8]
   83326:	f8cc 400c 	str.w	r4, [ip, #12]
   8332a:	e69e      	b.n	8306a <_malloc_r+0xca>
   8332c:	f046 0c01 	orr.w	ip, r6, #1
   83330:	f042 0101 	orr.w	r1, r2, #1
   83334:	4426      	add	r6, r4
   83336:	f8c4 c004 	str.w	ip, [r4, #4]
   8333a:	4628      	mov	r0, r5
   8333c:	617e      	str	r6, [r7, #20]
   8333e:	613e      	str	r6, [r7, #16]
   83340:	f8c6 e00c 	str.w	lr, [r6, #12]
   83344:	f8c6 e008 	str.w	lr, [r6, #8]
   83348:	6071      	str	r1, [r6, #4]
   8334a:	50e2      	str	r2, [r4, r3]
   8334c:	f000 fa06 	bl	8375c <__malloc_unlock>
   83350:	3408      	adds	r4, #8
   83352:	e6eb      	b.n	8312c <_malloc_r+0x18c>
   83354:	687a      	ldr	r2, [r7, #4]
   83356:	e688      	b.n	8306a <_malloc_r+0xca>
   83358:	f108 0801 	add.w	r8, r8, #1
   8335c:	f018 0f03 	tst.w	r8, #3
   83360:	f10c 0c08 	add.w	ip, ip, #8
   83364:	f47f ae93 	bne.w	8308e <_malloc_r+0xee>
   83368:	e02d      	b.n	833c6 <_malloc_r+0x426>
   8336a:	68dc      	ldr	r4, [r3, #12]
   8336c:	42a3      	cmp	r3, r4
   8336e:	bf08      	it	eq
   83370:	3002      	addeq	r0, #2
   83372:	f43f ae4b 	beq.w	8300c <_malloc_r+0x6c>
   83376:	e6c9      	b.n	8310c <_malloc_r+0x16c>
   83378:	461c      	mov	r4, r3
   8337a:	4419      	add	r1, r3
   8337c:	684a      	ldr	r2, [r1, #4]
   8337e:	68db      	ldr	r3, [r3, #12]
   83380:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83384:	f042 0201 	orr.w	r2, r2, #1
   83388:	604a      	str	r2, [r1, #4]
   8338a:	4628      	mov	r0, r5
   8338c:	60f3      	str	r3, [r6, #12]
   8338e:	609e      	str	r6, [r3, #8]
   83390:	f000 f9e4 	bl	8375c <__malloc_unlock>
   83394:	e6ca      	b.n	8312c <_malloc_r+0x18c>
   83396:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8339a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8339e:	00c1      	lsls	r1, r0, #3
   833a0:	e620      	b.n	82fe4 <_malloc_r+0x44>
   833a2:	099a      	lsrs	r2, r3, #6
   833a4:	f102 0139 	add.w	r1, r2, #57	; 0x39
   833a8:	00c9      	lsls	r1, r1, #3
   833aa:	3238      	adds	r2, #56	; 0x38
   833ac:	e7a4      	b.n	832f8 <_malloc_r+0x358>
   833ae:	42bc      	cmp	r4, r7
   833b0:	d054      	beq.n	8345c <_malloc_r+0x4bc>
   833b2:	68bc      	ldr	r4, [r7, #8]
   833b4:	6862      	ldr	r2, [r4, #4]
   833b6:	f022 0203 	bic.w	r2, r2, #3
   833ba:	e75e      	b.n	8327a <_malloc_r+0x2da>
   833bc:	f859 3908 	ldr.w	r3, [r9], #-8
   833c0:	4599      	cmp	r9, r3
   833c2:	f040 8086 	bne.w	834d2 <_malloc_r+0x532>
   833c6:	f010 0f03 	tst.w	r0, #3
   833ca:	f100 30ff 	add.w	r0, r0, #4294967295
   833ce:	d1f5      	bne.n	833bc <_malloc_r+0x41c>
   833d0:	687b      	ldr	r3, [r7, #4]
   833d2:	ea23 0304 	bic.w	r3, r3, r4
   833d6:	607b      	str	r3, [r7, #4]
   833d8:	0064      	lsls	r4, r4, #1
   833da:	429c      	cmp	r4, r3
   833dc:	f63f aec8 	bhi.w	83170 <_malloc_r+0x1d0>
   833e0:	2c00      	cmp	r4, #0
   833e2:	f43f aec5 	beq.w	83170 <_malloc_r+0x1d0>
   833e6:	421c      	tst	r4, r3
   833e8:	4640      	mov	r0, r8
   833ea:	f47f ae4c 	bne.w	83086 <_malloc_r+0xe6>
   833ee:	0064      	lsls	r4, r4, #1
   833f0:	421c      	tst	r4, r3
   833f2:	f100 0004 	add.w	r0, r0, #4
   833f6:	d0fa      	beq.n	833ee <_malloc_r+0x44e>
   833f8:	e645      	b.n	83086 <_malloc_r+0xe6>
   833fa:	468c      	mov	ip, r1
   833fc:	e78c      	b.n	83318 <_malloc_r+0x378>
   833fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83402:	d815      	bhi.n	83430 <_malloc_r+0x490>
   83404:	0bf3      	lsrs	r3, r6, #15
   83406:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8340a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8340e:	00c1      	lsls	r1, r0, #3
   83410:	e5e8      	b.n	82fe4 <_malloc_r+0x44>
   83412:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   83416:	e6ee      	b.n	831f6 <_malloc_r+0x256>
   83418:	2101      	movs	r1, #1
   8341a:	687b      	ldr	r3, [r7, #4]
   8341c:	1092      	asrs	r2, r2, #2
   8341e:	fa01 f202 	lsl.w	r2, r1, r2
   83422:	431a      	orrs	r2, r3
   83424:	607a      	str	r2, [r7, #4]
   83426:	4663      	mov	r3, ip
   83428:	e779      	b.n	8331e <_malloc_r+0x37e>
   8342a:	2301      	movs	r3, #1
   8342c:	6053      	str	r3, [r2, #4]
   8342e:	e72a      	b.n	83286 <_malloc_r+0x2e6>
   83430:	f240 5254 	movw	r2, #1364	; 0x554
   83434:	4293      	cmp	r3, r2
   83436:	d822      	bhi.n	8347e <_malloc_r+0x4de>
   83438:	0cb3      	lsrs	r3, r6, #18
   8343a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8343e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   83442:	00c1      	lsls	r1, r0, #3
   83444:	e5ce      	b.n	82fe4 <_malloc_r+0x44>
   83446:	f103 0b10 	add.w	fp, r3, #16
   8344a:	e6af      	b.n	831ac <_malloc_r+0x20c>
   8344c:	2a54      	cmp	r2, #84	; 0x54
   8344e:	d829      	bhi.n	834a4 <_malloc_r+0x504>
   83450:	0b1a      	lsrs	r2, r3, #12
   83452:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   83456:	00c9      	lsls	r1, r1, #3
   83458:	326e      	adds	r2, #110	; 0x6e
   8345a:	e74d      	b.n	832f8 <_malloc_r+0x358>
   8345c:	4b20      	ldr	r3, [pc, #128]	; (834e0 <_malloc_r+0x540>)
   8345e:	6819      	ldr	r1, [r3, #0]
   83460:	4459      	add	r1, fp
   83462:	6019      	str	r1, [r3, #0]
   83464:	e6b3      	b.n	831ce <_malloc_r+0x22e>
   83466:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8346a:	2800      	cmp	r0, #0
   8346c:	f47f aeaf 	bne.w	831ce <_malloc_r+0x22e>
   83470:	eb08 030b 	add.w	r3, r8, fp
   83474:	68ba      	ldr	r2, [r7, #8]
   83476:	f043 0301 	orr.w	r3, r3, #1
   8347a:	6053      	str	r3, [r2, #4]
   8347c:	e6ef      	b.n	8325e <_malloc_r+0x2be>
   8347e:	207f      	movs	r0, #127	; 0x7f
   83480:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83484:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83488:	e5ac      	b.n	82fe4 <_malloc_r+0x44>
   8348a:	f104 0108 	add.w	r1, r4, #8
   8348e:	4628      	mov	r0, r5
   83490:	9300      	str	r3, [sp, #0]
   83492:	f7ff fa67 	bl	82964 <_free_r>
   83496:	9b00      	ldr	r3, [sp, #0]
   83498:	6819      	ldr	r1, [r3, #0]
   8349a:	e6e0      	b.n	8325e <_malloc_r+0x2be>
   8349c:	2001      	movs	r0, #1
   8349e:	f04f 0900 	mov.w	r9, #0
   834a2:	e6bd      	b.n	83220 <_malloc_r+0x280>
   834a4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   834a8:	d805      	bhi.n	834b6 <_malloc_r+0x516>
   834aa:	0bda      	lsrs	r2, r3, #15
   834ac:	f102 0178 	add.w	r1, r2, #120	; 0x78
   834b0:	00c9      	lsls	r1, r1, #3
   834b2:	3277      	adds	r2, #119	; 0x77
   834b4:	e720      	b.n	832f8 <_malloc_r+0x358>
   834b6:	f240 5154 	movw	r1, #1364	; 0x554
   834ba:	428a      	cmp	r2, r1
   834bc:	d805      	bhi.n	834ca <_malloc_r+0x52a>
   834be:	0c9a      	lsrs	r2, r3, #18
   834c0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   834c4:	00c9      	lsls	r1, r1, #3
   834c6:	327c      	adds	r2, #124	; 0x7c
   834c8:	e716      	b.n	832f8 <_malloc_r+0x358>
   834ca:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   834ce:	227e      	movs	r2, #126	; 0x7e
   834d0:	e712      	b.n	832f8 <_malloc_r+0x358>
   834d2:	687b      	ldr	r3, [r7, #4]
   834d4:	e780      	b.n	833d8 <_malloc_r+0x438>
   834d6:	08f0      	lsrs	r0, r6, #3
   834d8:	f106 0308 	add.w	r3, r6, #8
   834dc:	e60e      	b.n	830fc <_malloc_r+0x15c>
   834de:	bf00      	nop
   834e0:	20070c20 	.word	0x20070c20

000834e4 <__ascii_mbtowc>:
   834e4:	b082      	sub	sp, #8
   834e6:	b149      	cbz	r1, 834fc <__ascii_mbtowc+0x18>
   834e8:	b15a      	cbz	r2, 83502 <__ascii_mbtowc+0x1e>
   834ea:	b16b      	cbz	r3, 83508 <__ascii_mbtowc+0x24>
   834ec:	7813      	ldrb	r3, [r2, #0]
   834ee:	600b      	str	r3, [r1, #0]
   834f0:	7812      	ldrb	r2, [r2, #0]
   834f2:	1c10      	adds	r0, r2, #0
   834f4:	bf18      	it	ne
   834f6:	2001      	movne	r0, #1
   834f8:	b002      	add	sp, #8
   834fa:	4770      	bx	lr
   834fc:	a901      	add	r1, sp, #4
   834fe:	2a00      	cmp	r2, #0
   83500:	d1f3      	bne.n	834ea <__ascii_mbtowc+0x6>
   83502:	4610      	mov	r0, r2
   83504:	b002      	add	sp, #8
   83506:	4770      	bx	lr
   83508:	f06f 0001 	mvn.w	r0, #1
   8350c:	e7f4      	b.n	834f8 <__ascii_mbtowc+0x14>
   8350e:	bf00      	nop

00083510 <memchr>:
   83510:	0783      	lsls	r3, r0, #30
   83512:	b470      	push	{r4, r5, r6}
   83514:	b2cd      	uxtb	r5, r1
   83516:	d03d      	beq.n	83594 <memchr+0x84>
   83518:	1e54      	subs	r4, r2, #1
   8351a:	b30a      	cbz	r2, 83560 <memchr+0x50>
   8351c:	7803      	ldrb	r3, [r0, #0]
   8351e:	42ab      	cmp	r3, r5
   83520:	d01f      	beq.n	83562 <memchr+0x52>
   83522:	1c43      	adds	r3, r0, #1
   83524:	e005      	b.n	83532 <memchr+0x22>
   83526:	f114 34ff 	adds.w	r4, r4, #4294967295
   8352a:	d319      	bcc.n	83560 <memchr+0x50>
   8352c:	7802      	ldrb	r2, [r0, #0]
   8352e:	42aa      	cmp	r2, r5
   83530:	d017      	beq.n	83562 <memchr+0x52>
   83532:	f013 0f03 	tst.w	r3, #3
   83536:	4618      	mov	r0, r3
   83538:	f103 0301 	add.w	r3, r3, #1
   8353c:	d1f3      	bne.n	83526 <memchr+0x16>
   8353e:	2c03      	cmp	r4, #3
   83540:	d811      	bhi.n	83566 <memchr+0x56>
   83542:	b34c      	cbz	r4, 83598 <memchr+0x88>
   83544:	7803      	ldrb	r3, [r0, #0]
   83546:	42ab      	cmp	r3, r5
   83548:	d00b      	beq.n	83562 <memchr+0x52>
   8354a:	4404      	add	r4, r0
   8354c:	1c43      	adds	r3, r0, #1
   8354e:	e002      	b.n	83556 <memchr+0x46>
   83550:	7802      	ldrb	r2, [r0, #0]
   83552:	42aa      	cmp	r2, r5
   83554:	d005      	beq.n	83562 <memchr+0x52>
   83556:	429c      	cmp	r4, r3
   83558:	4618      	mov	r0, r3
   8355a:	f103 0301 	add.w	r3, r3, #1
   8355e:	d1f7      	bne.n	83550 <memchr+0x40>
   83560:	2000      	movs	r0, #0
   83562:	bc70      	pop	{r4, r5, r6}
   83564:	4770      	bx	lr
   83566:	0209      	lsls	r1, r1, #8
   83568:	b289      	uxth	r1, r1
   8356a:	4329      	orrs	r1, r5
   8356c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83570:	6803      	ldr	r3, [r0, #0]
   83572:	4606      	mov	r6, r0
   83574:	404b      	eors	r3, r1
   83576:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8357a:	ea22 0303 	bic.w	r3, r2, r3
   8357e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83582:	f100 0004 	add.w	r0, r0, #4
   83586:	d103      	bne.n	83590 <memchr+0x80>
   83588:	3c04      	subs	r4, #4
   8358a:	2c03      	cmp	r4, #3
   8358c:	d8f0      	bhi.n	83570 <memchr+0x60>
   8358e:	e7d8      	b.n	83542 <memchr+0x32>
   83590:	4630      	mov	r0, r6
   83592:	e7d7      	b.n	83544 <memchr+0x34>
   83594:	4614      	mov	r4, r2
   83596:	e7d2      	b.n	8353e <memchr+0x2e>
   83598:	4620      	mov	r0, r4
   8359a:	e7e2      	b.n	83562 <memchr+0x52>

0008359c <memcpy>:
   8359c:	4684      	mov	ip, r0
   8359e:	ea41 0300 	orr.w	r3, r1, r0
   835a2:	f013 0303 	ands.w	r3, r3, #3
   835a6:	d149      	bne.n	8363c <memcpy+0xa0>
   835a8:	3a40      	subs	r2, #64	; 0x40
   835aa:	d323      	bcc.n	835f4 <memcpy+0x58>
   835ac:	680b      	ldr	r3, [r1, #0]
   835ae:	6003      	str	r3, [r0, #0]
   835b0:	684b      	ldr	r3, [r1, #4]
   835b2:	6043      	str	r3, [r0, #4]
   835b4:	688b      	ldr	r3, [r1, #8]
   835b6:	6083      	str	r3, [r0, #8]
   835b8:	68cb      	ldr	r3, [r1, #12]
   835ba:	60c3      	str	r3, [r0, #12]
   835bc:	690b      	ldr	r3, [r1, #16]
   835be:	6103      	str	r3, [r0, #16]
   835c0:	694b      	ldr	r3, [r1, #20]
   835c2:	6143      	str	r3, [r0, #20]
   835c4:	698b      	ldr	r3, [r1, #24]
   835c6:	6183      	str	r3, [r0, #24]
   835c8:	69cb      	ldr	r3, [r1, #28]
   835ca:	61c3      	str	r3, [r0, #28]
   835cc:	6a0b      	ldr	r3, [r1, #32]
   835ce:	6203      	str	r3, [r0, #32]
   835d0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   835d2:	6243      	str	r3, [r0, #36]	; 0x24
   835d4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   835d6:	6283      	str	r3, [r0, #40]	; 0x28
   835d8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   835da:	62c3      	str	r3, [r0, #44]	; 0x2c
   835dc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   835de:	6303      	str	r3, [r0, #48]	; 0x30
   835e0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   835e2:	6343      	str	r3, [r0, #52]	; 0x34
   835e4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   835e6:	6383      	str	r3, [r0, #56]	; 0x38
   835e8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   835ea:	63c3      	str	r3, [r0, #60]	; 0x3c
   835ec:	3040      	adds	r0, #64	; 0x40
   835ee:	3140      	adds	r1, #64	; 0x40
   835f0:	3a40      	subs	r2, #64	; 0x40
   835f2:	d2db      	bcs.n	835ac <memcpy+0x10>
   835f4:	3230      	adds	r2, #48	; 0x30
   835f6:	d30b      	bcc.n	83610 <memcpy+0x74>
   835f8:	680b      	ldr	r3, [r1, #0]
   835fa:	6003      	str	r3, [r0, #0]
   835fc:	684b      	ldr	r3, [r1, #4]
   835fe:	6043      	str	r3, [r0, #4]
   83600:	688b      	ldr	r3, [r1, #8]
   83602:	6083      	str	r3, [r0, #8]
   83604:	68cb      	ldr	r3, [r1, #12]
   83606:	60c3      	str	r3, [r0, #12]
   83608:	3010      	adds	r0, #16
   8360a:	3110      	adds	r1, #16
   8360c:	3a10      	subs	r2, #16
   8360e:	d2f3      	bcs.n	835f8 <memcpy+0x5c>
   83610:	320c      	adds	r2, #12
   83612:	d305      	bcc.n	83620 <memcpy+0x84>
   83614:	f851 3b04 	ldr.w	r3, [r1], #4
   83618:	f840 3b04 	str.w	r3, [r0], #4
   8361c:	3a04      	subs	r2, #4
   8361e:	d2f9      	bcs.n	83614 <memcpy+0x78>
   83620:	3204      	adds	r2, #4
   83622:	d008      	beq.n	83636 <memcpy+0x9a>
   83624:	07d2      	lsls	r2, r2, #31
   83626:	bf1c      	itt	ne
   83628:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8362c:	f800 3b01 	strbne.w	r3, [r0], #1
   83630:	d301      	bcc.n	83636 <memcpy+0x9a>
   83632:	880b      	ldrh	r3, [r1, #0]
   83634:	8003      	strh	r3, [r0, #0]
   83636:	4660      	mov	r0, ip
   83638:	4770      	bx	lr
   8363a:	bf00      	nop
   8363c:	2a08      	cmp	r2, #8
   8363e:	d313      	bcc.n	83668 <memcpy+0xcc>
   83640:	078b      	lsls	r3, r1, #30
   83642:	d0b1      	beq.n	835a8 <memcpy+0xc>
   83644:	f010 0303 	ands.w	r3, r0, #3
   83648:	d0ae      	beq.n	835a8 <memcpy+0xc>
   8364a:	f1c3 0304 	rsb	r3, r3, #4
   8364e:	1ad2      	subs	r2, r2, r3
   83650:	07db      	lsls	r3, r3, #31
   83652:	bf1c      	itt	ne
   83654:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83658:	f800 3b01 	strbne.w	r3, [r0], #1
   8365c:	d3a4      	bcc.n	835a8 <memcpy+0xc>
   8365e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83662:	f820 3b02 	strh.w	r3, [r0], #2
   83666:	e79f      	b.n	835a8 <memcpy+0xc>
   83668:	3a04      	subs	r2, #4
   8366a:	d3d9      	bcc.n	83620 <memcpy+0x84>
   8366c:	3a01      	subs	r2, #1
   8366e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83672:	f800 3b01 	strb.w	r3, [r0], #1
   83676:	d2f9      	bcs.n	8366c <memcpy+0xd0>
   83678:	780b      	ldrb	r3, [r1, #0]
   8367a:	7003      	strb	r3, [r0, #0]
   8367c:	784b      	ldrb	r3, [r1, #1]
   8367e:	7043      	strb	r3, [r0, #1]
   83680:	788b      	ldrb	r3, [r1, #2]
   83682:	7083      	strb	r3, [r0, #2]
   83684:	4660      	mov	r0, ip
   83686:	4770      	bx	lr

00083688 <memmove>:
   83688:	4288      	cmp	r0, r1
   8368a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8368c:	d90d      	bls.n	836aa <memmove+0x22>
   8368e:	188b      	adds	r3, r1, r2
   83690:	4298      	cmp	r0, r3
   83692:	d20a      	bcs.n	836aa <memmove+0x22>
   83694:	1884      	adds	r4, r0, r2
   83696:	2a00      	cmp	r2, #0
   83698:	d051      	beq.n	8373e <memmove+0xb6>
   8369a:	4622      	mov	r2, r4
   8369c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   836a0:	4299      	cmp	r1, r3
   836a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   836a6:	d1f9      	bne.n	8369c <memmove+0x14>
   836a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   836aa:	2a0f      	cmp	r2, #15
   836ac:	d948      	bls.n	83740 <memmove+0xb8>
   836ae:	ea41 0300 	orr.w	r3, r1, r0
   836b2:	079b      	lsls	r3, r3, #30
   836b4:	d146      	bne.n	83744 <memmove+0xbc>
   836b6:	4615      	mov	r5, r2
   836b8:	f100 0410 	add.w	r4, r0, #16
   836bc:	f101 0310 	add.w	r3, r1, #16
   836c0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   836c4:	3d10      	subs	r5, #16
   836c6:	f844 6c10 	str.w	r6, [r4, #-16]
   836ca:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   836ce:	2d0f      	cmp	r5, #15
   836d0:	f844 6c0c 	str.w	r6, [r4, #-12]
   836d4:	f853 6c08 	ldr.w	r6, [r3, #-8]
   836d8:	f104 0410 	add.w	r4, r4, #16
   836dc:	f844 6c18 	str.w	r6, [r4, #-24]
   836e0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   836e4:	f103 0310 	add.w	r3, r3, #16
   836e8:	f844 6c14 	str.w	r6, [r4, #-20]
   836ec:	d8e8      	bhi.n	836c0 <memmove+0x38>
   836ee:	f1a2 0310 	sub.w	r3, r2, #16
   836f2:	f023 030f 	bic.w	r3, r3, #15
   836f6:	f002 0e0f 	and.w	lr, r2, #15
   836fa:	3310      	adds	r3, #16
   836fc:	f1be 0f03 	cmp.w	lr, #3
   83700:	4419      	add	r1, r3
   83702:	4403      	add	r3, r0
   83704:	d921      	bls.n	8374a <memmove+0xc2>
   83706:	460e      	mov	r6, r1
   83708:	4674      	mov	r4, lr
   8370a:	1f1d      	subs	r5, r3, #4
   8370c:	f856 7b04 	ldr.w	r7, [r6], #4
   83710:	3c04      	subs	r4, #4
   83712:	2c03      	cmp	r4, #3
   83714:	f845 7f04 	str.w	r7, [r5, #4]!
   83718:	d8f8      	bhi.n	8370c <memmove+0x84>
   8371a:	f1ae 0404 	sub.w	r4, lr, #4
   8371e:	f024 0403 	bic.w	r4, r4, #3
   83722:	3404      	adds	r4, #4
   83724:	4421      	add	r1, r4
   83726:	4423      	add	r3, r4
   83728:	f002 0203 	and.w	r2, r2, #3
   8372c:	b162      	cbz	r2, 83748 <memmove+0xc0>
   8372e:	3b01      	subs	r3, #1
   83730:	440a      	add	r2, r1
   83732:	f811 4b01 	ldrb.w	r4, [r1], #1
   83736:	428a      	cmp	r2, r1
   83738:	f803 4f01 	strb.w	r4, [r3, #1]!
   8373c:	d1f9      	bne.n	83732 <memmove+0xaa>
   8373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83740:	4603      	mov	r3, r0
   83742:	e7f3      	b.n	8372c <memmove+0xa4>
   83744:	4603      	mov	r3, r0
   83746:	e7f2      	b.n	8372e <memmove+0xa6>
   83748:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8374a:	4672      	mov	r2, lr
   8374c:	e7ee      	b.n	8372c <memmove+0xa4>
   8374e:	bf00      	nop

00083750 <__malloc_lock>:
   83750:	4801      	ldr	r0, [pc, #4]	; (83758 <__malloc_lock+0x8>)
   83752:	f7ff bba1 	b.w	82e98 <__retarget_lock_acquire_recursive>
   83756:	bf00      	nop
   83758:	20071c70 	.word	0x20071c70

0008375c <__malloc_unlock>:
   8375c:	4801      	ldr	r0, [pc, #4]	; (83764 <__malloc_unlock+0x8>)
   8375e:	f7ff bb9d 	b.w	82e9c <__retarget_lock_release_recursive>
   83762:	bf00      	nop
   83764:	20071c70 	.word	0x20071c70

00083768 <_realloc_r>:
   83768:	2900      	cmp	r1, #0
   8376a:	f000 8094 	beq.w	83896 <_realloc_r+0x12e>
   8376e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83772:	460c      	mov	r4, r1
   83774:	4615      	mov	r5, r2
   83776:	b083      	sub	sp, #12
   83778:	4680      	mov	r8, r0
   8377a:	f105 060b 	add.w	r6, r5, #11
   8377e:	f7ff ffe7 	bl	83750 <__malloc_lock>
   83782:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83786:	2e16      	cmp	r6, #22
   83788:	f02e 0703 	bic.w	r7, lr, #3
   8378c:	f1a4 0908 	sub.w	r9, r4, #8
   83790:	d83c      	bhi.n	8380c <_realloc_r+0xa4>
   83792:	2210      	movs	r2, #16
   83794:	4616      	mov	r6, r2
   83796:	42b5      	cmp	r5, r6
   83798:	d83d      	bhi.n	83816 <_realloc_r+0xae>
   8379a:	4297      	cmp	r7, r2
   8379c:	da43      	bge.n	83826 <_realloc_r+0xbe>
   8379e:	4bc6      	ldr	r3, [pc, #792]	; (83ab8 <_realloc_r+0x350>)
   837a0:	eb09 0007 	add.w	r0, r9, r7
   837a4:	6899      	ldr	r1, [r3, #8]
   837a6:	4288      	cmp	r0, r1
   837a8:	f000 80c3 	beq.w	83932 <_realloc_r+0x1ca>
   837ac:	6843      	ldr	r3, [r0, #4]
   837ae:	f023 0101 	bic.w	r1, r3, #1
   837b2:	4401      	add	r1, r0
   837b4:	6849      	ldr	r1, [r1, #4]
   837b6:	07c9      	lsls	r1, r1, #31
   837b8:	d54d      	bpl.n	83856 <_realloc_r+0xee>
   837ba:	f01e 0f01 	tst.w	lr, #1
   837be:	f000 809b 	beq.w	838f8 <_realloc_r+0x190>
   837c2:	4629      	mov	r1, r5
   837c4:	4640      	mov	r0, r8
   837c6:	f7ff fbeb 	bl	82fa0 <_malloc_r>
   837ca:	4605      	mov	r5, r0
   837cc:	2800      	cmp	r0, #0
   837ce:	d03b      	beq.n	83848 <_realloc_r+0xe0>
   837d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   837d4:	f1a0 0208 	sub.w	r2, r0, #8
   837d8:	f023 0301 	bic.w	r3, r3, #1
   837dc:	444b      	add	r3, r9
   837de:	429a      	cmp	r2, r3
   837e0:	f000 812b 	beq.w	83a3a <_realloc_r+0x2d2>
   837e4:	1f3a      	subs	r2, r7, #4
   837e6:	2a24      	cmp	r2, #36	; 0x24
   837e8:	f200 8118 	bhi.w	83a1c <_realloc_r+0x2b4>
   837ec:	2a13      	cmp	r2, #19
   837ee:	f200 80eb 	bhi.w	839c8 <_realloc_r+0x260>
   837f2:	4603      	mov	r3, r0
   837f4:	4622      	mov	r2, r4
   837f6:	6811      	ldr	r1, [r2, #0]
   837f8:	6019      	str	r1, [r3, #0]
   837fa:	6851      	ldr	r1, [r2, #4]
   837fc:	6059      	str	r1, [r3, #4]
   837fe:	6892      	ldr	r2, [r2, #8]
   83800:	609a      	str	r2, [r3, #8]
   83802:	4621      	mov	r1, r4
   83804:	4640      	mov	r0, r8
   83806:	f7ff f8ad 	bl	82964 <_free_r>
   8380a:	e01d      	b.n	83848 <_realloc_r+0xe0>
   8380c:	f026 0607 	bic.w	r6, r6, #7
   83810:	2e00      	cmp	r6, #0
   83812:	4632      	mov	r2, r6
   83814:	dabf      	bge.n	83796 <_realloc_r+0x2e>
   83816:	2500      	movs	r5, #0
   83818:	230c      	movs	r3, #12
   8381a:	4628      	mov	r0, r5
   8381c:	f8c8 3000 	str.w	r3, [r8]
   83820:	b003      	add	sp, #12
   83822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83826:	4625      	mov	r5, r4
   83828:	1bbb      	subs	r3, r7, r6
   8382a:	2b0f      	cmp	r3, #15
   8382c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83830:	d81d      	bhi.n	8386e <_realloc_r+0x106>
   83832:	f002 0201 	and.w	r2, r2, #1
   83836:	433a      	orrs	r2, r7
   83838:	eb09 0107 	add.w	r1, r9, r7
   8383c:	f8c9 2004 	str.w	r2, [r9, #4]
   83840:	684b      	ldr	r3, [r1, #4]
   83842:	f043 0301 	orr.w	r3, r3, #1
   83846:	604b      	str	r3, [r1, #4]
   83848:	4640      	mov	r0, r8
   8384a:	f7ff ff87 	bl	8375c <__malloc_unlock>
   8384e:	4628      	mov	r0, r5
   83850:	b003      	add	sp, #12
   83852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83856:	f023 0303 	bic.w	r3, r3, #3
   8385a:	18f9      	adds	r1, r7, r3
   8385c:	4291      	cmp	r1, r2
   8385e:	db1d      	blt.n	8389c <_realloc_r+0x134>
   83860:	68c3      	ldr	r3, [r0, #12]
   83862:	6882      	ldr	r2, [r0, #8]
   83864:	4625      	mov	r5, r4
   83866:	60d3      	str	r3, [r2, #12]
   83868:	460f      	mov	r7, r1
   8386a:	609a      	str	r2, [r3, #8]
   8386c:	e7dc      	b.n	83828 <_realloc_r+0xc0>
   8386e:	f002 0201 	and.w	r2, r2, #1
   83872:	eb09 0106 	add.w	r1, r9, r6
   83876:	f043 0301 	orr.w	r3, r3, #1
   8387a:	4332      	orrs	r2, r6
   8387c:	f8c9 2004 	str.w	r2, [r9, #4]
   83880:	444f      	add	r7, r9
   83882:	604b      	str	r3, [r1, #4]
   83884:	687b      	ldr	r3, [r7, #4]
   83886:	3108      	adds	r1, #8
   83888:	f043 0301 	orr.w	r3, r3, #1
   8388c:	607b      	str	r3, [r7, #4]
   8388e:	4640      	mov	r0, r8
   83890:	f7ff f868 	bl	82964 <_free_r>
   83894:	e7d8      	b.n	83848 <_realloc_r+0xe0>
   83896:	4611      	mov	r1, r2
   83898:	f7ff bb82 	b.w	82fa0 <_malloc_r>
   8389c:	f01e 0f01 	tst.w	lr, #1
   838a0:	d18f      	bne.n	837c2 <_realloc_r+0x5a>
   838a2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   838a6:	eba9 0a01 	sub.w	sl, r9, r1
   838aa:	f8da 1004 	ldr.w	r1, [sl, #4]
   838ae:	f021 0103 	bic.w	r1, r1, #3
   838b2:	440b      	add	r3, r1
   838b4:	443b      	add	r3, r7
   838b6:	4293      	cmp	r3, r2
   838b8:	db26      	blt.n	83908 <_realloc_r+0x1a0>
   838ba:	4655      	mov	r5, sl
   838bc:	68c1      	ldr	r1, [r0, #12]
   838be:	6880      	ldr	r0, [r0, #8]
   838c0:	1f3a      	subs	r2, r7, #4
   838c2:	60c1      	str	r1, [r0, #12]
   838c4:	6088      	str	r0, [r1, #8]
   838c6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   838ca:	f8da 100c 	ldr.w	r1, [sl, #12]
   838ce:	2a24      	cmp	r2, #36	; 0x24
   838d0:	60c1      	str	r1, [r0, #12]
   838d2:	6088      	str	r0, [r1, #8]
   838d4:	d826      	bhi.n	83924 <_realloc_r+0x1bc>
   838d6:	2a13      	cmp	r2, #19
   838d8:	f240 8081 	bls.w	839de <_realloc_r+0x276>
   838dc:	6821      	ldr	r1, [r4, #0]
   838de:	2a1b      	cmp	r2, #27
   838e0:	f8ca 1008 	str.w	r1, [sl, #8]
   838e4:	6861      	ldr	r1, [r4, #4]
   838e6:	f8ca 100c 	str.w	r1, [sl, #12]
   838ea:	f200 80ad 	bhi.w	83a48 <_realloc_r+0x2e0>
   838ee:	f104 0008 	add.w	r0, r4, #8
   838f2:	f10a 0210 	add.w	r2, sl, #16
   838f6:	e074      	b.n	839e2 <_realloc_r+0x27a>
   838f8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   838fc:	eba9 0a03 	sub.w	sl, r9, r3
   83900:	f8da 1004 	ldr.w	r1, [sl, #4]
   83904:	f021 0103 	bic.w	r1, r1, #3
   83908:	187b      	adds	r3, r7, r1
   8390a:	4293      	cmp	r3, r2
   8390c:	f6ff af59 	blt.w	837c2 <_realloc_r+0x5a>
   83910:	4655      	mov	r5, sl
   83912:	f8da 100c 	ldr.w	r1, [sl, #12]
   83916:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8391a:	1f3a      	subs	r2, r7, #4
   8391c:	2a24      	cmp	r2, #36	; 0x24
   8391e:	60c1      	str	r1, [r0, #12]
   83920:	6088      	str	r0, [r1, #8]
   83922:	d9d8      	bls.n	838d6 <_realloc_r+0x16e>
   83924:	4621      	mov	r1, r4
   83926:	4628      	mov	r0, r5
   83928:	461f      	mov	r7, r3
   8392a:	46d1      	mov	r9, sl
   8392c:	f7ff feac 	bl	83688 <memmove>
   83930:	e77a      	b.n	83828 <_realloc_r+0xc0>
   83932:	6841      	ldr	r1, [r0, #4]
   83934:	f106 0010 	add.w	r0, r6, #16
   83938:	f021 0b03 	bic.w	fp, r1, #3
   8393c:	44bb      	add	fp, r7
   8393e:	4583      	cmp	fp, r0
   83940:	da58      	bge.n	839f4 <_realloc_r+0x28c>
   83942:	f01e 0f01 	tst.w	lr, #1
   83946:	f47f af3c 	bne.w	837c2 <_realloc_r+0x5a>
   8394a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8394e:	eba9 0a01 	sub.w	sl, r9, r1
   83952:	f8da 1004 	ldr.w	r1, [sl, #4]
   83956:	f021 0103 	bic.w	r1, r1, #3
   8395a:	448b      	add	fp, r1
   8395c:	4558      	cmp	r0, fp
   8395e:	dcd3      	bgt.n	83908 <_realloc_r+0x1a0>
   83960:	4655      	mov	r5, sl
   83962:	f8da 100c 	ldr.w	r1, [sl, #12]
   83966:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8396a:	1f3a      	subs	r2, r7, #4
   8396c:	2a24      	cmp	r2, #36	; 0x24
   8396e:	60c1      	str	r1, [r0, #12]
   83970:	6088      	str	r0, [r1, #8]
   83972:	f200 808d 	bhi.w	83a90 <_realloc_r+0x328>
   83976:	2a13      	cmp	r2, #19
   83978:	f240 8087 	bls.w	83a8a <_realloc_r+0x322>
   8397c:	6821      	ldr	r1, [r4, #0]
   8397e:	2a1b      	cmp	r2, #27
   83980:	f8ca 1008 	str.w	r1, [sl, #8]
   83984:	6861      	ldr	r1, [r4, #4]
   83986:	f8ca 100c 	str.w	r1, [sl, #12]
   8398a:	f200 8088 	bhi.w	83a9e <_realloc_r+0x336>
   8398e:	f104 0108 	add.w	r1, r4, #8
   83992:	f10a 0210 	add.w	r2, sl, #16
   83996:	6808      	ldr	r0, [r1, #0]
   83998:	6010      	str	r0, [r2, #0]
   8399a:	6848      	ldr	r0, [r1, #4]
   8399c:	6050      	str	r0, [r2, #4]
   8399e:	6889      	ldr	r1, [r1, #8]
   839a0:	6091      	str	r1, [r2, #8]
   839a2:	ebab 0206 	sub.w	r2, fp, r6
   839a6:	eb0a 0106 	add.w	r1, sl, r6
   839aa:	f042 0201 	orr.w	r2, r2, #1
   839ae:	6099      	str	r1, [r3, #8]
   839b0:	604a      	str	r2, [r1, #4]
   839b2:	f8da 3004 	ldr.w	r3, [sl, #4]
   839b6:	4640      	mov	r0, r8
   839b8:	f003 0301 	and.w	r3, r3, #1
   839bc:	431e      	orrs	r6, r3
   839be:	f8ca 6004 	str.w	r6, [sl, #4]
   839c2:	f7ff fecb 	bl	8375c <__malloc_unlock>
   839c6:	e742      	b.n	8384e <_realloc_r+0xe6>
   839c8:	6823      	ldr	r3, [r4, #0]
   839ca:	2a1b      	cmp	r2, #27
   839cc:	6003      	str	r3, [r0, #0]
   839ce:	6863      	ldr	r3, [r4, #4]
   839d0:	6043      	str	r3, [r0, #4]
   839d2:	d827      	bhi.n	83a24 <_realloc_r+0x2bc>
   839d4:	f100 0308 	add.w	r3, r0, #8
   839d8:	f104 0208 	add.w	r2, r4, #8
   839dc:	e70b      	b.n	837f6 <_realloc_r+0x8e>
   839de:	4620      	mov	r0, r4
   839e0:	462a      	mov	r2, r5
   839e2:	6801      	ldr	r1, [r0, #0]
   839e4:	461f      	mov	r7, r3
   839e6:	6011      	str	r1, [r2, #0]
   839e8:	6841      	ldr	r1, [r0, #4]
   839ea:	46d1      	mov	r9, sl
   839ec:	6051      	str	r1, [r2, #4]
   839ee:	6883      	ldr	r3, [r0, #8]
   839f0:	6093      	str	r3, [r2, #8]
   839f2:	e719      	b.n	83828 <_realloc_r+0xc0>
   839f4:	ebab 0b06 	sub.w	fp, fp, r6
   839f8:	eb09 0106 	add.w	r1, r9, r6
   839fc:	f04b 0201 	orr.w	r2, fp, #1
   83a00:	6099      	str	r1, [r3, #8]
   83a02:	604a      	str	r2, [r1, #4]
   83a04:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83a08:	4640      	mov	r0, r8
   83a0a:	f003 0301 	and.w	r3, r3, #1
   83a0e:	431e      	orrs	r6, r3
   83a10:	f844 6c04 	str.w	r6, [r4, #-4]
   83a14:	f7ff fea2 	bl	8375c <__malloc_unlock>
   83a18:	4625      	mov	r5, r4
   83a1a:	e718      	b.n	8384e <_realloc_r+0xe6>
   83a1c:	4621      	mov	r1, r4
   83a1e:	f7ff fe33 	bl	83688 <memmove>
   83a22:	e6ee      	b.n	83802 <_realloc_r+0x9a>
   83a24:	68a3      	ldr	r3, [r4, #8]
   83a26:	2a24      	cmp	r2, #36	; 0x24
   83a28:	6083      	str	r3, [r0, #8]
   83a2a:	68e3      	ldr	r3, [r4, #12]
   83a2c:	60c3      	str	r3, [r0, #12]
   83a2e:	d018      	beq.n	83a62 <_realloc_r+0x2fa>
   83a30:	f100 0310 	add.w	r3, r0, #16
   83a34:	f104 0210 	add.w	r2, r4, #16
   83a38:	e6dd      	b.n	837f6 <_realloc_r+0x8e>
   83a3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83a3e:	4625      	mov	r5, r4
   83a40:	f023 0303 	bic.w	r3, r3, #3
   83a44:	441f      	add	r7, r3
   83a46:	e6ef      	b.n	83828 <_realloc_r+0xc0>
   83a48:	68a1      	ldr	r1, [r4, #8]
   83a4a:	2a24      	cmp	r2, #36	; 0x24
   83a4c:	f8ca 1010 	str.w	r1, [sl, #16]
   83a50:	68e1      	ldr	r1, [r4, #12]
   83a52:	f8ca 1014 	str.w	r1, [sl, #20]
   83a56:	d00d      	beq.n	83a74 <_realloc_r+0x30c>
   83a58:	f104 0010 	add.w	r0, r4, #16
   83a5c:	f10a 0218 	add.w	r2, sl, #24
   83a60:	e7bf      	b.n	839e2 <_realloc_r+0x27a>
   83a62:	6922      	ldr	r2, [r4, #16]
   83a64:	f100 0318 	add.w	r3, r0, #24
   83a68:	6102      	str	r2, [r0, #16]
   83a6a:	6961      	ldr	r1, [r4, #20]
   83a6c:	f104 0218 	add.w	r2, r4, #24
   83a70:	6141      	str	r1, [r0, #20]
   83a72:	e6c0      	b.n	837f6 <_realloc_r+0x8e>
   83a74:	6922      	ldr	r2, [r4, #16]
   83a76:	f104 0018 	add.w	r0, r4, #24
   83a7a:	f8ca 2018 	str.w	r2, [sl, #24]
   83a7e:	6961      	ldr	r1, [r4, #20]
   83a80:	f10a 0220 	add.w	r2, sl, #32
   83a84:	f8ca 101c 	str.w	r1, [sl, #28]
   83a88:	e7ab      	b.n	839e2 <_realloc_r+0x27a>
   83a8a:	4621      	mov	r1, r4
   83a8c:	462a      	mov	r2, r5
   83a8e:	e782      	b.n	83996 <_realloc_r+0x22e>
   83a90:	4621      	mov	r1, r4
   83a92:	4628      	mov	r0, r5
   83a94:	9301      	str	r3, [sp, #4]
   83a96:	f7ff fdf7 	bl	83688 <memmove>
   83a9a:	9b01      	ldr	r3, [sp, #4]
   83a9c:	e781      	b.n	839a2 <_realloc_r+0x23a>
   83a9e:	68a1      	ldr	r1, [r4, #8]
   83aa0:	2a24      	cmp	r2, #36	; 0x24
   83aa2:	f8ca 1010 	str.w	r1, [sl, #16]
   83aa6:	68e1      	ldr	r1, [r4, #12]
   83aa8:	f8ca 1014 	str.w	r1, [sl, #20]
   83aac:	d006      	beq.n	83abc <_realloc_r+0x354>
   83aae:	f104 0110 	add.w	r1, r4, #16
   83ab2:	f10a 0218 	add.w	r2, sl, #24
   83ab6:	e76e      	b.n	83996 <_realloc_r+0x22e>
   83ab8:	200706d0 	.word	0x200706d0
   83abc:	6922      	ldr	r2, [r4, #16]
   83abe:	f104 0118 	add.w	r1, r4, #24
   83ac2:	f8ca 2018 	str.w	r2, [sl, #24]
   83ac6:	6960      	ldr	r0, [r4, #20]
   83ac8:	f10a 0220 	add.w	r2, sl, #32
   83acc:	f8ca 001c 	str.w	r0, [sl, #28]
   83ad0:	e761      	b.n	83996 <_realloc_r+0x22e>
   83ad2:	bf00      	nop

00083ad4 <_sbrk_r>:
   83ad4:	b538      	push	{r3, r4, r5, lr}
   83ad6:	2300      	movs	r3, #0
   83ad8:	4c06      	ldr	r4, [pc, #24]	; (83af4 <_sbrk_r+0x20>)
   83ada:	4605      	mov	r5, r0
   83adc:	4608      	mov	r0, r1
   83ade:	6023      	str	r3, [r4, #0]
   83ae0:	f7fd f8ba 	bl	80c58 <_sbrk>
   83ae4:	1c43      	adds	r3, r0, #1
   83ae6:	d000      	beq.n	83aea <_sbrk_r+0x16>
   83ae8:	bd38      	pop	{r3, r4, r5, pc}
   83aea:	6823      	ldr	r3, [r4, #0]
   83aec:	2b00      	cmp	r3, #0
   83aee:	d0fb      	beq.n	83ae8 <_sbrk_r+0x14>
   83af0:	602b      	str	r3, [r5, #0]
   83af2:	bd38      	pop	{r3, r4, r5, pc}
   83af4:	20071c84 	.word	0x20071c84

00083af8 <__sread>:
   83af8:	b510      	push	{r4, lr}
   83afa:	460c      	mov	r4, r1
   83afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b00:	f000 f9f4 	bl	83eec <_read_r>
   83b04:	2800      	cmp	r0, #0
   83b06:	db03      	blt.n	83b10 <__sread+0x18>
   83b08:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83b0a:	4403      	add	r3, r0
   83b0c:	6523      	str	r3, [r4, #80]	; 0x50
   83b0e:	bd10      	pop	{r4, pc}
   83b10:	89a3      	ldrh	r3, [r4, #12]
   83b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83b16:	81a3      	strh	r3, [r4, #12]
   83b18:	bd10      	pop	{r4, pc}
   83b1a:	bf00      	nop

00083b1c <__swrite>:
   83b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83b20:	460c      	mov	r4, r1
   83b22:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83b26:	461f      	mov	r7, r3
   83b28:	05cb      	lsls	r3, r1, #23
   83b2a:	4616      	mov	r6, r2
   83b2c:	4605      	mov	r5, r0
   83b2e:	d507      	bpl.n	83b40 <__swrite+0x24>
   83b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83b34:	2302      	movs	r3, #2
   83b36:	2200      	movs	r2, #0
   83b38:	f000 f9c2 	bl	83ec0 <_lseek_r>
   83b3c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83b40:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83b44:	81a1      	strh	r1, [r4, #12]
   83b46:	463b      	mov	r3, r7
   83b48:	4632      	mov	r2, r6
   83b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83b4e:	4628      	mov	r0, r5
   83b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b54:	f000 b8a2 	b.w	83c9c <_write_r>

00083b58 <__sseek>:
   83b58:	b510      	push	{r4, lr}
   83b5a:	460c      	mov	r4, r1
   83b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b60:	f000 f9ae 	bl	83ec0 <_lseek_r>
   83b64:	89a3      	ldrh	r3, [r4, #12]
   83b66:	1c42      	adds	r2, r0, #1
   83b68:	bf0e      	itee	eq
   83b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83b72:	6520      	strne	r0, [r4, #80]	; 0x50
   83b74:	81a3      	strh	r3, [r4, #12]
   83b76:	bd10      	pop	{r4, pc}

00083b78 <__sclose>:
   83b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b7c:	f000 b906 	b.w	83d8c <_close_r>

00083b80 <__swbuf_r>:
   83b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b82:	460d      	mov	r5, r1
   83b84:	4614      	mov	r4, r2
   83b86:	4606      	mov	r6, r0
   83b88:	b110      	cbz	r0, 83b90 <__swbuf_r+0x10>
   83b8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b8c:	2b00      	cmp	r3, #0
   83b8e:	d04b      	beq.n	83c28 <__swbuf_r+0xa8>
   83b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83b94:	69a3      	ldr	r3, [r4, #24]
   83b96:	b291      	uxth	r1, r2
   83b98:	0708      	lsls	r0, r1, #28
   83b9a:	60a3      	str	r3, [r4, #8]
   83b9c:	d539      	bpl.n	83c12 <__swbuf_r+0x92>
   83b9e:	6923      	ldr	r3, [r4, #16]
   83ba0:	2b00      	cmp	r3, #0
   83ba2:	d036      	beq.n	83c12 <__swbuf_r+0x92>
   83ba4:	b2ed      	uxtb	r5, r5
   83ba6:	0489      	lsls	r1, r1, #18
   83ba8:	462f      	mov	r7, r5
   83baa:	d515      	bpl.n	83bd8 <__swbuf_r+0x58>
   83bac:	6822      	ldr	r2, [r4, #0]
   83bae:	6961      	ldr	r1, [r4, #20]
   83bb0:	1ad3      	subs	r3, r2, r3
   83bb2:	428b      	cmp	r3, r1
   83bb4:	da1c      	bge.n	83bf0 <__swbuf_r+0x70>
   83bb6:	3301      	adds	r3, #1
   83bb8:	68a1      	ldr	r1, [r4, #8]
   83bba:	1c50      	adds	r0, r2, #1
   83bbc:	3901      	subs	r1, #1
   83bbe:	60a1      	str	r1, [r4, #8]
   83bc0:	6020      	str	r0, [r4, #0]
   83bc2:	7015      	strb	r5, [r2, #0]
   83bc4:	6962      	ldr	r2, [r4, #20]
   83bc6:	429a      	cmp	r2, r3
   83bc8:	d01a      	beq.n	83c00 <__swbuf_r+0x80>
   83bca:	89a3      	ldrh	r3, [r4, #12]
   83bcc:	07db      	lsls	r3, r3, #31
   83bce:	d501      	bpl.n	83bd4 <__swbuf_r+0x54>
   83bd0:	2d0a      	cmp	r5, #10
   83bd2:	d015      	beq.n	83c00 <__swbuf_r+0x80>
   83bd4:	4638      	mov	r0, r7
   83bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83bd8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83bda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83bde:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83be2:	81a2      	strh	r2, [r4, #12]
   83be4:	6822      	ldr	r2, [r4, #0]
   83be6:	6661      	str	r1, [r4, #100]	; 0x64
   83be8:	6961      	ldr	r1, [r4, #20]
   83bea:	1ad3      	subs	r3, r2, r3
   83bec:	428b      	cmp	r3, r1
   83bee:	dbe2      	blt.n	83bb6 <__swbuf_r+0x36>
   83bf0:	4621      	mov	r1, r4
   83bf2:	4630      	mov	r0, r6
   83bf4:	f7fe fd38 	bl	82668 <_fflush_r>
   83bf8:	b940      	cbnz	r0, 83c0c <__swbuf_r+0x8c>
   83bfa:	2301      	movs	r3, #1
   83bfc:	6822      	ldr	r2, [r4, #0]
   83bfe:	e7db      	b.n	83bb8 <__swbuf_r+0x38>
   83c00:	4621      	mov	r1, r4
   83c02:	4630      	mov	r0, r6
   83c04:	f7fe fd30 	bl	82668 <_fflush_r>
   83c08:	2800      	cmp	r0, #0
   83c0a:	d0e3      	beq.n	83bd4 <__swbuf_r+0x54>
   83c0c:	f04f 37ff 	mov.w	r7, #4294967295
   83c10:	e7e0      	b.n	83bd4 <__swbuf_r+0x54>
   83c12:	4621      	mov	r1, r4
   83c14:	4630      	mov	r0, r6
   83c16:	f7fe fc17 	bl	82448 <__swsetup_r>
   83c1a:	2800      	cmp	r0, #0
   83c1c:	d1f6      	bne.n	83c0c <__swbuf_r+0x8c>
   83c1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83c22:	6923      	ldr	r3, [r4, #16]
   83c24:	b291      	uxth	r1, r2
   83c26:	e7bd      	b.n	83ba4 <__swbuf_r+0x24>
   83c28:	f7fe fd76 	bl	82718 <__sinit>
   83c2c:	e7b0      	b.n	83b90 <__swbuf_r+0x10>
   83c2e:	bf00      	nop

00083c30 <_wcrtomb_r>:
   83c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   83c32:	4606      	mov	r6, r0
   83c34:	b085      	sub	sp, #20
   83c36:	461f      	mov	r7, r3
   83c38:	b189      	cbz	r1, 83c5e <_wcrtomb_r+0x2e>
   83c3a:	4c10      	ldr	r4, [pc, #64]	; (83c7c <_wcrtomb_r+0x4c>)
   83c3c:	4d10      	ldr	r5, [pc, #64]	; (83c80 <_wcrtomb_r+0x50>)
   83c3e:	6824      	ldr	r4, [r4, #0]
   83c40:	6b64      	ldr	r4, [r4, #52]	; 0x34
   83c42:	2c00      	cmp	r4, #0
   83c44:	bf08      	it	eq
   83c46:	462c      	moveq	r4, r5
   83c48:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83c4c:	47a0      	blx	r4
   83c4e:	1c43      	adds	r3, r0, #1
   83c50:	d103      	bne.n	83c5a <_wcrtomb_r+0x2a>
   83c52:	2200      	movs	r2, #0
   83c54:	238a      	movs	r3, #138	; 0x8a
   83c56:	603a      	str	r2, [r7, #0]
   83c58:	6033      	str	r3, [r6, #0]
   83c5a:	b005      	add	sp, #20
   83c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c5e:	460c      	mov	r4, r1
   83c60:	4a06      	ldr	r2, [pc, #24]	; (83c7c <_wcrtomb_r+0x4c>)
   83c62:	4d07      	ldr	r5, [pc, #28]	; (83c80 <_wcrtomb_r+0x50>)
   83c64:	6811      	ldr	r1, [r2, #0]
   83c66:	4622      	mov	r2, r4
   83c68:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83c6a:	a901      	add	r1, sp, #4
   83c6c:	2c00      	cmp	r4, #0
   83c6e:	bf08      	it	eq
   83c70:	462c      	moveq	r4, r5
   83c72:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83c76:	47a0      	blx	r4
   83c78:	e7e9      	b.n	83c4e <_wcrtomb_r+0x1e>
   83c7a:	bf00      	nop
   83c7c:	20070134 	.word	0x20070134
   83c80:	20070564 	.word	0x20070564

00083c84 <__ascii_wctomb>:
   83c84:	b119      	cbz	r1, 83c8e <__ascii_wctomb+0xa>
   83c86:	2aff      	cmp	r2, #255	; 0xff
   83c88:	d803      	bhi.n	83c92 <__ascii_wctomb+0xe>
   83c8a:	700a      	strb	r2, [r1, #0]
   83c8c:	2101      	movs	r1, #1
   83c8e:	4608      	mov	r0, r1
   83c90:	4770      	bx	lr
   83c92:	238a      	movs	r3, #138	; 0x8a
   83c94:	f04f 31ff 	mov.w	r1, #4294967295
   83c98:	6003      	str	r3, [r0, #0]
   83c9a:	e7f8      	b.n	83c8e <__ascii_wctomb+0xa>

00083c9c <_write_r>:
   83c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c9e:	460e      	mov	r6, r1
   83ca0:	2500      	movs	r5, #0
   83ca2:	4c08      	ldr	r4, [pc, #32]	; (83cc4 <_write_r+0x28>)
   83ca4:	4611      	mov	r1, r2
   83ca6:	4607      	mov	r7, r0
   83ca8:	461a      	mov	r2, r3
   83caa:	4630      	mov	r0, r6
   83cac:	6025      	str	r5, [r4, #0]
   83cae:	f7fc fbd9 	bl	80464 <_write>
   83cb2:	1c43      	adds	r3, r0, #1
   83cb4:	d000      	beq.n	83cb8 <_write_r+0x1c>
   83cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cb8:	6823      	ldr	r3, [r4, #0]
   83cba:	2b00      	cmp	r3, #0
   83cbc:	d0fb      	beq.n	83cb6 <_write_r+0x1a>
   83cbe:	603b      	str	r3, [r7, #0]
   83cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cc2:	bf00      	nop
   83cc4:	20071c84 	.word	0x20071c84

00083cc8 <__register_exitproc>:
   83cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83ccc:	4d2c      	ldr	r5, [pc, #176]	; (83d80 <__register_exitproc+0xb8>)
   83cce:	4606      	mov	r6, r0
   83cd0:	6828      	ldr	r0, [r5, #0]
   83cd2:	4698      	mov	r8, r3
   83cd4:	460f      	mov	r7, r1
   83cd6:	4691      	mov	r9, r2
   83cd8:	f7ff f8de 	bl	82e98 <__retarget_lock_acquire_recursive>
   83cdc:	4b29      	ldr	r3, [pc, #164]	; (83d84 <__register_exitproc+0xbc>)
   83cde:	681c      	ldr	r4, [r3, #0]
   83ce0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83ce4:	2b00      	cmp	r3, #0
   83ce6:	d03e      	beq.n	83d66 <__register_exitproc+0x9e>
   83ce8:	685a      	ldr	r2, [r3, #4]
   83cea:	2a1f      	cmp	r2, #31
   83cec:	dc1c      	bgt.n	83d28 <__register_exitproc+0x60>
   83cee:	f102 0e01 	add.w	lr, r2, #1
   83cf2:	b176      	cbz	r6, 83d12 <__register_exitproc+0x4a>
   83cf4:	2101      	movs	r1, #1
   83cf6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83cfa:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83cfe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83d02:	4091      	lsls	r1, r2
   83d04:	4308      	orrs	r0, r1
   83d06:	2e02      	cmp	r6, #2
   83d08:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83d0c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83d10:	d023      	beq.n	83d5a <__register_exitproc+0x92>
   83d12:	3202      	adds	r2, #2
   83d14:	f8c3 e004 	str.w	lr, [r3, #4]
   83d18:	6828      	ldr	r0, [r5, #0]
   83d1a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83d1e:	f7ff f8bd 	bl	82e9c <__retarget_lock_release_recursive>
   83d22:	2000      	movs	r0, #0
   83d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d28:	4b17      	ldr	r3, [pc, #92]	; (83d88 <__register_exitproc+0xc0>)
   83d2a:	b30b      	cbz	r3, 83d70 <__register_exitproc+0xa8>
   83d2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83d30:	f7ff f92e 	bl	82f90 <malloc>
   83d34:	4603      	mov	r3, r0
   83d36:	b1d8      	cbz	r0, 83d70 <__register_exitproc+0xa8>
   83d38:	2000      	movs	r0, #0
   83d3a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83d3e:	f04f 0e01 	mov.w	lr, #1
   83d42:	6058      	str	r0, [r3, #4]
   83d44:	6019      	str	r1, [r3, #0]
   83d46:	4602      	mov	r2, r0
   83d48:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83d4c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83d50:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83d54:	2e00      	cmp	r6, #0
   83d56:	d0dc      	beq.n	83d12 <__register_exitproc+0x4a>
   83d58:	e7cc      	b.n	83cf4 <__register_exitproc+0x2c>
   83d5a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83d5e:	4301      	orrs	r1, r0
   83d60:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83d64:	e7d5      	b.n	83d12 <__register_exitproc+0x4a>
   83d66:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83d6a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83d6e:	e7bb      	b.n	83ce8 <__register_exitproc+0x20>
   83d70:	6828      	ldr	r0, [r5, #0]
   83d72:	f7ff f893 	bl	82e9c <__retarget_lock_release_recursive>
   83d76:	f04f 30ff 	mov.w	r0, #4294967295
   83d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d7e:	bf00      	nop
   83d80:	20070560 	.word	0x20070560
   83d84:	00084284 	.word	0x00084284
   83d88:	00082f91 	.word	0x00082f91

00083d8c <_close_r>:
   83d8c:	b538      	push	{r3, r4, r5, lr}
   83d8e:	2300      	movs	r3, #0
   83d90:	4c06      	ldr	r4, [pc, #24]	; (83dac <_close_r+0x20>)
   83d92:	4605      	mov	r5, r0
   83d94:	4608      	mov	r0, r1
   83d96:	6023      	str	r3, [r4, #0]
   83d98:	f7fc ff7a 	bl	80c90 <_close>
   83d9c:	1c43      	adds	r3, r0, #1
   83d9e:	d000      	beq.n	83da2 <_close_r+0x16>
   83da0:	bd38      	pop	{r3, r4, r5, pc}
   83da2:	6823      	ldr	r3, [r4, #0]
   83da4:	2b00      	cmp	r3, #0
   83da6:	d0fb      	beq.n	83da0 <_close_r+0x14>
   83da8:	602b      	str	r3, [r5, #0]
   83daa:	bd38      	pop	{r3, r4, r5, pc}
   83dac:	20071c84 	.word	0x20071c84

00083db0 <_fclose_r>:
   83db0:	b570      	push	{r4, r5, r6, lr}
   83db2:	b159      	cbz	r1, 83dcc <_fclose_r+0x1c>
   83db4:	4605      	mov	r5, r0
   83db6:	460c      	mov	r4, r1
   83db8:	b110      	cbz	r0, 83dc0 <_fclose_r+0x10>
   83dba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83dbc:	2b00      	cmp	r3, #0
   83dbe:	d03c      	beq.n	83e3a <_fclose_r+0x8a>
   83dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83dc2:	07d8      	lsls	r0, r3, #31
   83dc4:	d505      	bpl.n	83dd2 <_fclose_r+0x22>
   83dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83dca:	b92b      	cbnz	r3, 83dd8 <_fclose_r+0x28>
   83dcc:	2600      	movs	r6, #0
   83dce:	4630      	mov	r0, r6
   83dd0:	bd70      	pop	{r4, r5, r6, pc}
   83dd2:	89a3      	ldrh	r3, [r4, #12]
   83dd4:	0599      	lsls	r1, r3, #22
   83dd6:	d53c      	bpl.n	83e52 <_fclose_r+0xa2>
   83dd8:	4621      	mov	r1, r4
   83dda:	4628      	mov	r0, r5
   83ddc:	f7fe fba8 	bl	82530 <__sflush_r>
   83de0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83de2:	4606      	mov	r6, r0
   83de4:	b133      	cbz	r3, 83df4 <_fclose_r+0x44>
   83de6:	69e1      	ldr	r1, [r4, #28]
   83de8:	4628      	mov	r0, r5
   83dea:	4798      	blx	r3
   83dec:	2800      	cmp	r0, #0
   83dee:	bfb8      	it	lt
   83df0:	f04f 36ff 	movlt.w	r6, #4294967295
   83df4:	89a3      	ldrh	r3, [r4, #12]
   83df6:	061a      	lsls	r2, r3, #24
   83df8:	d422      	bmi.n	83e40 <_fclose_r+0x90>
   83dfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83dfc:	b141      	cbz	r1, 83e10 <_fclose_r+0x60>
   83dfe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83e02:	4299      	cmp	r1, r3
   83e04:	d002      	beq.n	83e0c <_fclose_r+0x5c>
   83e06:	4628      	mov	r0, r5
   83e08:	f7fe fdac 	bl	82964 <_free_r>
   83e0c:	2300      	movs	r3, #0
   83e0e:	6323      	str	r3, [r4, #48]	; 0x30
   83e10:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83e12:	b121      	cbz	r1, 83e1e <_fclose_r+0x6e>
   83e14:	4628      	mov	r0, r5
   83e16:	f7fe fda5 	bl	82964 <_free_r>
   83e1a:	2300      	movs	r3, #0
   83e1c:	6463      	str	r3, [r4, #68]	; 0x44
   83e1e:	f7fe fcab 	bl	82778 <__sfp_lock_acquire>
   83e22:	2200      	movs	r2, #0
   83e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83e26:	81a2      	strh	r2, [r4, #12]
   83e28:	07db      	lsls	r3, r3, #31
   83e2a:	d50e      	bpl.n	83e4a <_fclose_r+0x9a>
   83e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e2e:	f7ff f831 	bl	82e94 <__retarget_lock_close_recursive>
   83e32:	f7fe fca7 	bl	82784 <__sfp_lock_release>
   83e36:	4630      	mov	r0, r6
   83e38:	bd70      	pop	{r4, r5, r6, pc}
   83e3a:	f7fe fc6d 	bl	82718 <__sinit>
   83e3e:	e7bf      	b.n	83dc0 <_fclose_r+0x10>
   83e40:	6921      	ldr	r1, [r4, #16]
   83e42:	4628      	mov	r0, r5
   83e44:	f7fe fd8e 	bl	82964 <_free_r>
   83e48:	e7d7      	b.n	83dfa <_fclose_r+0x4a>
   83e4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e4c:	f7ff f826 	bl	82e9c <__retarget_lock_release_recursive>
   83e50:	e7ec      	b.n	83e2c <_fclose_r+0x7c>
   83e52:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e54:	f7ff f820 	bl	82e98 <__retarget_lock_acquire_recursive>
   83e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e5c:	2b00      	cmp	r3, #0
   83e5e:	d1bb      	bne.n	83dd8 <_fclose_r+0x28>
   83e60:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83e62:	f016 0601 	ands.w	r6, r6, #1
   83e66:	d1b1      	bne.n	83dcc <_fclose_r+0x1c>
   83e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e6a:	f7ff f817 	bl	82e9c <__retarget_lock_release_recursive>
   83e6e:	4630      	mov	r0, r6
   83e70:	bd70      	pop	{r4, r5, r6, pc}
   83e72:	bf00      	nop

00083e74 <_fstat_r>:
   83e74:	b570      	push	{r4, r5, r6, lr}
   83e76:	460d      	mov	r5, r1
   83e78:	2300      	movs	r3, #0
   83e7a:	4c07      	ldr	r4, [pc, #28]	; (83e98 <_fstat_r+0x24>)
   83e7c:	4606      	mov	r6, r0
   83e7e:	4611      	mov	r1, r2
   83e80:	4628      	mov	r0, r5
   83e82:	6023      	str	r3, [r4, #0]
   83e84:	f7fc ff07 	bl	80c96 <_fstat>
   83e88:	1c43      	adds	r3, r0, #1
   83e8a:	d000      	beq.n	83e8e <_fstat_r+0x1a>
   83e8c:	bd70      	pop	{r4, r5, r6, pc}
   83e8e:	6823      	ldr	r3, [r4, #0]
   83e90:	2b00      	cmp	r3, #0
   83e92:	d0fb      	beq.n	83e8c <_fstat_r+0x18>
   83e94:	6033      	str	r3, [r6, #0]
   83e96:	bd70      	pop	{r4, r5, r6, pc}
   83e98:	20071c84 	.word	0x20071c84

00083e9c <_isatty_r>:
   83e9c:	b538      	push	{r3, r4, r5, lr}
   83e9e:	2300      	movs	r3, #0
   83ea0:	4c06      	ldr	r4, [pc, #24]	; (83ebc <_isatty_r+0x20>)
   83ea2:	4605      	mov	r5, r0
   83ea4:	4608      	mov	r0, r1
   83ea6:	6023      	str	r3, [r4, #0]
   83ea8:	f7fc fefa 	bl	80ca0 <_isatty>
   83eac:	1c43      	adds	r3, r0, #1
   83eae:	d000      	beq.n	83eb2 <_isatty_r+0x16>
   83eb0:	bd38      	pop	{r3, r4, r5, pc}
   83eb2:	6823      	ldr	r3, [r4, #0]
   83eb4:	2b00      	cmp	r3, #0
   83eb6:	d0fb      	beq.n	83eb0 <_isatty_r+0x14>
   83eb8:	602b      	str	r3, [r5, #0]
   83eba:	bd38      	pop	{r3, r4, r5, pc}
   83ebc:	20071c84 	.word	0x20071c84

00083ec0 <_lseek_r>:
   83ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ec2:	460e      	mov	r6, r1
   83ec4:	2500      	movs	r5, #0
   83ec6:	4c08      	ldr	r4, [pc, #32]	; (83ee8 <_lseek_r+0x28>)
   83ec8:	4611      	mov	r1, r2
   83eca:	4607      	mov	r7, r0
   83ecc:	461a      	mov	r2, r3
   83ece:	4630      	mov	r0, r6
   83ed0:	6025      	str	r5, [r4, #0]
   83ed2:	f7fc fee7 	bl	80ca4 <_lseek>
   83ed6:	1c43      	adds	r3, r0, #1
   83ed8:	d000      	beq.n	83edc <_lseek_r+0x1c>
   83eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83edc:	6823      	ldr	r3, [r4, #0]
   83ede:	2b00      	cmp	r3, #0
   83ee0:	d0fb      	beq.n	83eda <_lseek_r+0x1a>
   83ee2:	603b      	str	r3, [r7, #0]
   83ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ee6:	bf00      	nop
   83ee8:	20071c84 	.word	0x20071c84

00083eec <_read_r>:
   83eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83eee:	460e      	mov	r6, r1
   83ef0:	2500      	movs	r5, #0
   83ef2:	4c08      	ldr	r4, [pc, #32]	; (83f14 <_read_r+0x28>)
   83ef4:	4611      	mov	r1, r2
   83ef6:	4607      	mov	r7, r0
   83ef8:	461a      	mov	r2, r3
   83efa:	4630      	mov	r0, r6
   83efc:	6025      	str	r5, [r4, #0]
   83efe:	f7fc fa3f 	bl	80380 <_read>
   83f02:	1c43      	adds	r3, r0, #1
   83f04:	d000      	beq.n	83f08 <_read_r+0x1c>
   83f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f08:	6823      	ldr	r3, [r4, #0]
   83f0a:	2b00      	cmp	r3, #0
   83f0c:	d0fb      	beq.n	83f06 <_read_r+0x1a>
   83f0e:	603b      	str	r3, [r7, #0]
   83f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f12:	bf00      	nop
   83f14:	20071c84 	.word	0x20071c84

00083f18 <__aeabi_uldivmod>:
   83f18:	b953      	cbnz	r3, 83f30 <__aeabi_uldivmod+0x18>
   83f1a:	b94a      	cbnz	r2, 83f30 <__aeabi_uldivmod+0x18>
   83f1c:	2900      	cmp	r1, #0
   83f1e:	bf08      	it	eq
   83f20:	2800      	cmpeq	r0, #0
   83f22:	bf1c      	itt	ne
   83f24:	f04f 31ff 	movne.w	r1, #4294967295
   83f28:	f04f 30ff 	movne.w	r0, #4294967295
   83f2c:	f000 b97a 	b.w	84224 <__aeabi_idiv0>
   83f30:	f1ad 0c08 	sub.w	ip, sp, #8
   83f34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83f38:	f000 f806 	bl	83f48 <__udivmoddi4>
   83f3c:	f8dd e004 	ldr.w	lr, [sp, #4]
   83f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83f44:	b004      	add	sp, #16
   83f46:	4770      	bx	lr

00083f48 <__udivmoddi4>:
   83f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83f4c:	468c      	mov	ip, r1
   83f4e:	460e      	mov	r6, r1
   83f50:	4604      	mov	r4, r0
   83f52:	9d08      	ldr	r5, [sp, #32]
   83f54:	2b00      	cmp	r3, #0
   83f56:	d150      	bne.n	83ffa <__udivmoddi4+0xb2>
   83f58:	428a      	cmp	r2, r1
   83f5a:	4617      	mov	r7, r2
   83f5c:	d96c      	bls.n	84038 <__udivmoddi4+0xf0>
   83f5e:	fab2 fe82 	clz	lr, r2
   83f62:	f1be 0f00 	cmp.w	lr, #0
   83f66:	d00b      	beq.n	83f80 <__udivmoddi4+0x38>
   83f68:	f1ce 0c20 	rsb	ip, lr, #32
   83f6c:	fa01 f60e 	lsl.w	r6, r1, lr
   83f70:	fa20 fc0c 	lsr.w	ip, r0, ip
   83f74:	fa02 f70e 	lsl.w	r7, r2, lr
   83f78:	ea4c 0c06 	orr.w	ip, ip, r6
   83f7c:	fa00 f40e 	lsl.w	r4, r0, lr
   83f80:	0c3a      	lsrs	r2, r7, #16
   83f82:	fbbc f9f2 	udiv	r9, ip, r2
   83f86:	b2bb      	uxth	r3, r7
   83f88:	fb02 cc19 	mls	ip, r2, r9, ip
   83f8c:	fb09 fa03 	mul.w	sl, r9, r3
   83f90:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83f94:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83f98:	45b2      	cmp	sl, r6
   83f9a:	d90a      	bls.n	83fb2 <__udivmoddi4+0x6a>
   83f9c:	19f6      	adds	r6, r6, r7
   83f9e:	f109 31ff 	add.w	r1, r9, #4294967295
   83fa2:	f080 8125 	bcs.w	841f0 <__udivmoddi4+0x2a8>
   83fa6:	45b2      	cmp	sl, r6
   83fa8:	f240 8122 	bls.w	841f0 <__udivmoddi4+0x2a8>
   83fac:	f1a9 0902 	sub.w	r9, r9, #2
   83fb0:	443e      	add	r6, r7
   83fb2:	eba6 060a 	sub.w	r6, r6, sl
   83fb6:	fbb6 f0f2 	udiv	r0, r6, r2
   83fba:	fb02 6610 	mls	r6, r2, r0, r6
   83fbe:	fb00 f303 	mul.w	r3, r0, r3
   83fc2:	b2a4      	uxth	r4, r4
   83fc4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83fc8:	42a3      	cmp	r3, r4
   83fca:	d909      	bls.n	83fe0 <__udivmoddi4+0x98>
   83fcc:	19e4      	adds	r4, r4, r7
   83fce:	f100 32ff 	add.w	r2, r0, #4294967295
   83fd2:	f080 810b 	bcs.w	841ec <__udivmoddi4+0x2a4>
   83fd6:	42a3      	cmp	r3, r4
   83fd8:	f240 8108 	bls.w	841ec <__udivmoddi4+0x2a4>
   83fdc:	3802      	subs	r0, #2
   83fde:	443c      	add	r4, r7
   83fe0:	2100      	movs	r1, #0
   83fe2:	1ae4      	subs	r4, r4, r3
   83fe4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83fe8:	2d00      	cmp	r5, #0
   83fea:	d062      	beq.n	840b2 <__udivmoddi4+0x16a>
   83fec:	2300      	movs	r3, #0
   83fee:	fa24 f40e 	lsr.w	r4, r4, lr
   83ff2:	602c      	str	r4, [r5, #0]
   83ff4:	606b      	str	r3, [r5, #4]
   83ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83ffa:	428b      	cmp	r3, r1
   83ffc:	d907      	bls.n	8400e <__udivmoddi4+0xc6>
   83ffe:	2d00      	cmp	r5, #0
   84000:	d055      	beq.n	840ae <__udivmoddi4+0x166>
   84002:	2100      	movs	r1, #0
   84004:	e885 0041 	stmia.w	r5, {r0, r6}
   84008:	4608      	mov	r0, r1
   8400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8400e:	fab3 f183 	clz	r1, r3
   84012:	2900      	cmp	r1, #0
   84014:	f040 808f 	bne.w	84136 <__udivmoddi4+0x1ee>
   84018:	42b3      	cmp	r3, r6
   8401a:	d302      	bcc.n	84022 <__udivmoddi4+0xda>
   8401c:	4282      	cmp	r2, r0
   8401e:	f200 80fc 	bhi.w	8421a <__udivmoddi4+0x2d2>
   84022:	1a84      	subs	r4, r0, r2
   84024:	eb66 0603 	sbc.w	r6, r6, r3
   84028:	2001      	movs	r0, #1
   8402a:	46b4      	mov	ip, r6
   8402c:	2d00      	cmp	r5, #0
   8402e:	d040      	beq.n	840b2 <__udivmoddi4+0x16a>
   84030:	e885 1010 	stmia.w	r5, {r4, ip}
   84034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84038:	b912      	cbnz	r2, 84040 <__udivmoddi4+0xf8>
   8403a:	2701      	movs	r7, #1
   8403c:	fbb7 f7f2 	udiv	r7, r7, r2
   84040:	fab7 fe87 	clz	lr, r7
   84044:	f1be 0f00 	cmp.w	lr, #0
   84048:	d135      	bne.n	840b6 <__udivmoddi4+0x16e>
   8404a:	2101      	movs	r1, #1
   8404c:	1bf6      	subs	r6, r6, r7
   8404e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84052:	fa1f f887 	uxth.w	r8, r7
   84056:	fbb6 f2fc 	udiv	r2, r6, ip
   8405a:	fb0c 6612 	mls	r6, ip, r2, r6
   8405e:	fb08 f002 	mul.w	r0, r8, r2
   84062:	0c23      	lsrs	r3, r4, #16
   84064:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   84068:	42b0      	cmp	r0, r6
   8406a:	d907      	bls.n	8407c <__udivmoddi4+0x134>
   8406c:	19f6      	adds	r6, r6, r7
   8406e:	f102 33ff 	add.w	r3, r2, #4294967295
   84072:	d202      	bcs.n	8407a <__udivmoddi4+0x132>
   84074:	42b0      	cmp	r0, r6
   84076:	f200 80d2 	bhi.w	8421e <__udivmoddi4+0x2d6>
   8407a:	461a      	mov	r2, r3
   8407c:	1a36      	subs	r6, r6, r0
   8407e:	fbb6 f0fc 	udiv	r0, r6, ip
   84082:	fb0c 6610 	mls	r6, ip, r0, r6
   84086:	fb08 f800 	mul.w	r8, r8, r0
   8408a:	b2a3      	uxth	r3, r4
   8408c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   84090:	45a0      	cmp	r8, r4
   84092:	d907      	bls.n	840a4 <__udivmoddi4+0x15c>
   84094:	19e4      	adds	r4, r4, r7
   84096:	f100 33ff 	add.w	r3, r0, #4294967295
   8409a:	d202      	bcs.n	840a2 <__udivmoddi4+0x15a>
   8409c:	45a0      	cmp	r8, r4
   8409e:	f200 80b9 	bhi.w	84214 <__udivmoddi4+0x2cc>
   840a2:	4618      	mov	r0, r3
   840a4:	eba4 0408 	sub.w	r4, r4, r8
   840a8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   840ac:	e79c      	b.n	83fe8 <__udivmoddi4+0xa0>
   840ae:	4629      	mov	r1, r5
   840b0:	4628      	mov	r0, r5
   840b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   840b6:	fa07 f70e 	lsl.w	r7, r7, lr
   840ba:	f1ce 0320 	rsb	r3, lr, #32
   840be:	fa26 f203 	lsr.w	r2, r6, r3
   840c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   840c6:	fbb2 f1fc 	udiv	r1, r2, ip
   840ca:	fa1f f887 	uxth.w	r8, r7
   840ce:	fb0c 2211 	mls	r2, ip, r1, r2
   840d2:	fa06 f60e 	lsl.w	r6, r6, lr
   840d6:	fa20 f303 	lsr.w	r3, r0, r3
   840da:	fb01 f908 	mul.w	r9, r1, r8
   840de:	4333      	orrs	r3, r6
   840e0:	0c1e      	lsrs	r6, r3, #16
   840e2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   840e6:	45b1      	cmp	r9, r6
   840e8:	fa00 f40e 	lsl.w	r4, r0, lr
   840ec:	d909      	bls.n	84102 <__udivmoddi4+0x1ba>
   840ee:	19f6      	adds	r6, r6, r7
   840f0:	f101 32ff 	add.w	r2, r1, #4294967295
   840f4:	f080 808c 	bcs.w	84210 <__udivmoddi4+0x2c8>
   840f8:	45b1      	cmp	r9, r6
   840fa:	f240 8089 	bls.w	84210 <__udivmoddi4+0x2c8>
   840fe:	3902      	subs	r1, #2
   84100:	443e      	add	r6, r7
   84102:	eba6 0609 	sub.w	r6, r6, r9
   84106:	fbb6 f0fc 	udiv	r0, r6, ip
   8410a:	fb0c 6210 	mls	r2, ip, r0, r6
   8410e:	fb00 f908 	mul.w	r9, r0, r8
   84112:	b29e      	uxth	r6, r3
   84114:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   84118:	45b1      	cmp	r9, r6
   8411a:	d907      	bls.n	8412c <__udivmoddi4+0x1e4>
   8411c:	19f6      	adds	r6, r6, r7
   8411e:	f100 33ff 	add.w	r3, r0, #4294967295
   84122:	d271      	bcs.n	84208 <__udivmoddi4+0x2c0>
   84124:	45b1      	cmp	r9, r6
   84126:	d96f      	bls.n	84208 <__udivmoddi4+0x2c0>
   84128:	3802      	subs	r0, #2
   8412a:	443e      	add	r6, r7
   8412c:	eba6 0609 	sub.w	r6, r6, r9
   84130:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   84134:	e78f      	b.n	84056 <__udivmoddi4+0x10e>
   84136:	f1c1 0720 	rsb	r7, r1, #32
   8413a:	fa22 f807 	lsr.w	r8, r2, r7
   8413e:	408b      	lsls	r3, r1
   84140:	ea48 0303 	orr.w	r3, r8, r3
   84144:	fa26 f407 	lsr.w	r4, r6, r7
   84148:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   8414c:	fbb4 f9fe 	udiv	r9, r4, lr
   84150:	fa1f fc83 	uxth.w	ip, r3
   84154:	fb0e 4419 	mls	r4, lr, r9, r4
   84158:	408e      	lsls	r6, r1
   8415a:	fa20 f807 	lsr.w	r8, r0, r7
   8415e:	fb09 fa0c 	mul.w	sl, r9, ip
   84162:	ea48 0806 	orr.w	r8, r8, r6
   84166:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8416a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8416e:	45a2      	cmp	sl, r4
   84170:	fa02 f201 	lsl.w	r2, r2, r1
   84174:	fa00 f601 	lsl.w	r6, r0, r1
   84178:	d908      	bls.n	8418c <__udivmoddi4+0x244>
   8417a:	18e4      	adds	r4, r4, r3
   8417c:	f109 30ff 	add.w	r0, r9, #4294967295
   84180:	d244      	bcs.n	8420c <__udivmoddi4+0x2c4>
   84182:	45a2      	cmp	sl, r4
   84184:	d942      	bls.n	8420c <__udivmoddi4+0x2c4>
   84186:	f1a9 0902 	sub.w	r9, r9, #2
   8418a:	441c      	add	r4, r3
   8418c:	eba4 040a 	sub.w	r4, r4, sl
   84190:	fbb4 f0fe 	udiv	r0, r4, lr
   84194:	fb0e 4410 	mls	r4, lr, r0, r4
   84198:	fb00 fc0c 	mul.w	ip, r0, ip
   8419c:	fa1f f888 	uxth.w	r8, r8
   841a0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   841a4:	45a4      	cmp	ip, r4
   841a6:	d907      	bls.n	841b8 <__udivmoddi4+0x270>
   841a8:	18e4      	adds	r4, r4, r3
   841aa:	f100 3eff 	add.w	lr, r0, #4294967295
   841ae:	d229      	bcs.n	84204 <__udivmoddi4+0x2bc>
   841b0:	45a4      	cmp	ip, r4
   841b2:	d927      	bls.n	84204 <__udivmoddi4+0x2bc>
   841b4:	3802      	subs	r0, #2
   841b6:	441c      	add	r4, r3
   841b8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   841bc:	fba0 8902 	umull	r8, r9, r0, r2
   841c0:	eba4 0c0c 	sub.w	ip, r4, ip
   841c4:	45cc      	cmp	ip, r9
   841c6:	46c2      	mov	sl, r8
   841c8:	46ce      	mov	lr, r9
   841ca:	d315      	bcc.n	841f8 <__udivmoddi4+0x2b0>
   841cc:	d012      	beq.n	841f4 <__udivmoddi4+0x2ac>
   841ce:	b155      	cbz	r5, 841e6 <__udivmoddi4+0x29e>
   841d0:	ebb6 030a 	subs.w	r3, r6, sl
   841d4:	eb6c 060e 	sbc.w	r6, ip, lr
   841d8:	fa06 f707 	lsl.w	r7, r6, r7
   841dc:	40cb      	lsrs	r3, r1
   841de:	431f      	orrs	r7, r3
   841e0:	40ce      	lsrs	r6, r1
   841e2:	602f      	str	r7, [r5, #0]
   841e4:	606e      	str	r6, [r5, #4]
   841e6:	2100      	movs	r1, #0
   841e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   841ec:	4610      	mov	r0, r2
   841ee:	e6f7      	b.n	83fe0 <__udivmoddi4+0x98>
   841f0:	4689      	mov	r9, r1
   841f2:	e6de      	b.n	83fb2 <__udivmoddi4+0x6a>
   841f4:	4546      	cmp	r6, r8
   841f6:	d2ea      	bcs.n	841ce <__udivmoddi4+0x286>
   841f8:	ebb8 0a02 	subs.w	sl, r8, r2
   841fc:	eb69 0e03 	sbc.w	lr, r9, r3
   84200:	3801      	subs	r0, #1
   84202:	e7e4      	b.n	841ce <__udivmoddi4+0x286>
   84204:	4670      	mov	r0, lr
   84206:	e7d7      	b.n	841b8 <__udivmoddi4+0x270>
   84208:	4618      	mov	r0, r3
   8420a:	e78f      	b.n	8412c <__udivmoddi4+0x1e4>
   8420c:	4681      	mov	r9, r0
   8420e:	e7bd      	b.n	8418c <__udivmoddi4+0x244>
   84210:	4611      	mov	r1, r2
   84212:	e776      	b.n	84102 <__udivmoddi4+0x1ba>
   84214:	3802      	subs	r0, #2
   84216:	443c      	add	r4, r7
   84218:	e744      	b.n	840a4 <__udivmoddi4+0x15c>
   8421a:	4608      	mov	r0, r1
   8421c:	e706      	b.n	8402c <__udivmoddi4+0xe4>
   8421e:	3a02      	subs	r2, #2
   84220:	443e      	add	r6, r7
   84222:	e72b      	b.n	8407c <__udivmoddi4+0x134>

00084224 <__aeabi_idiv0>:
   84224:	4770      	bx	lr
   84226:	bf00      	nop
   84228:	66667542 	.word	0x66667542
   8422c:	76207265 	.word	0x76207265
   84230:	65756c61 	.word	0x65756c61
   84234:	25203a73 	.word	0x25203a73
   84238:	69202c75 	.word	0x69202c75
   8423c:	7865646e 	.word	0x7865646e
   84240:	7525203a 	.word	0x7525203a
   84244:	0000000a 	.word	0x0000000a
   84248:	736e6f43 	.word	0x736e6f43
   8424c:	20656c6f 	.word	0x20656c6f
   84250:	64616572 	.word	0x64616572
   84254:	00000a79 	.word	0x00000a79
   84258:	3d3d3d3d 	.word	0x3d3d3d3d
   8425c:	3d3d3d3d 	.word	0x3d3d3d3d
   84260:	3d3d3d3d 	.word	0x3d3d3d3d
   84264:	00000a3d 	.word	0x00000a3d
   84268:	656d6954 	.word	0x656d6954
   8426c:	6f432072 	.word	0x6f432072
   84270:	65746e75 	.word	0x65746e75
   84274:	61762072 	.word	0x61762072
   84278:	3a65756c 	.word	0x3a65756c
   8427c:	0a752520 	.word	0x0a752520
   84280:	00000000 	.word	0x00000000

00084284 <_global_impure_ptr>:
   84284:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   84294:	46454443 00000000 33323130 37363534     CDEF....01234567
   842a4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   842b4:	0000296c                                l)..

000842b8 <blanks.7217>:
   842b8:	20202020 20202020 20202020 20202020                     

000842c8 <zeroes.7218>:
   842c8:	30303030 30303030 30303030 30303030     0000000000000000
   842d8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000842e8 <_ctype_>:
   842e8:	20202000 20202020 28282020 20282828     .         ((((( 
   842f8:	20202020 20202020 20202020 20202020                     
   84308:	10108820 10101010 10101010 10101010      ...............
   84318:	04040410 04040404 10040404 10101010     ................
   84328:	41411010 41414141 01010101 01010101     ..AAAAAA........
   84338:	01010101 01010101 01010101 10101010     ................
   84348:	42421010 42424242 02020202 02020202     ..BBBBBB........
   84358:	02020202 02020202 02020202 10101010     ................
   84368:	00000020 00000000 00000000 00000000      ...............
	...

000843ec <_init>:
   843ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   843ee:	bf00      	nop
   843f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   843f2:	bc08      	pop	{r3}
   843f4:	469e      	mov	lr, r3
   843f6:	4770      	bx	lr

000843f8 <__init_array_start>:
   843f8:	00082511 	.word	0x00082511

000843fc <__frame_dummy_init_array_entry>:
   843fc:	00080119                                ....

00084400 <_fini>:
   84400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84402:	bf00      	nop
   84404:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84406:	bc08      	pop	{r3}
   84408:	469e      	mov	lr, r3
   8440a:	4770      	bx	lr

0008440c <__fini_array_start>:
   8440c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20071c60                                `.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00083c85 000834e5 00000000 000842e8     .<...4.......B..
20070654:	000842e4 00084280 00084280 00084280     .B...B...B...B..
20070664:	00084280 00084280 00084280 00084280     .B...B...B...B..
20070674:	00084280 00084280 ffffffff ffffffff     .B...B..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
