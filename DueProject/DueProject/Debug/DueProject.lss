
DueProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043d0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000843d0  000843d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  000843d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000011a4  20070ae0  00084eb8  00020ae0  2**2
                  ALLOC
  4 .stack        00002004  20071c84  0008605c  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019d0c  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003bb4  00000000  00000000  0003a86e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005145  00000000  00000000  0003e422  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c40  00000000  00000000  00043567  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ba0  00000000  00000000  000441a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009bc7  00000000  00000000  00044d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000126e0  00000000  00000000  0004e90e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000661c4  00000000  00000000  00060fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000027b0  00000000  00000000  000c71b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	88 3c 07 20 69 0a 08 00 65 0a 08 00 65 0a 08 00     .<. i...e...e...
   80010:	65 0a 08 00 65 0a 08 00 65 0a 08 00 00 00 00 00     e...e...e.......
	...
   8002c:	65 0a 08 00 65 0a 08 00 00 00 00 00 65 0a 08 00     e...e.......e...
   8003c:	65 0a 08 00 65 0a 08 00 65 0a 08 00 65 0a 08 00     e...e...e...e...
   8004c:	65 0a 08 00 65 0a 08 00 65 0a 08 00 65 0a 08 00     e...e...e...e...
   8005c:	65 0a 08 00 65 0a 08 00 65 0a 08 00 00 00 00 00     e...e...e.......
   8006c:	d9 08 08 00 ed 08 08 00 01 09 08 00 15 09 08 00     ................
	...
   80084:	c5 03 08 00 65 0a 08 00 65 0a 08 00 65 0a 08 00     ....e...e...e...
   80094:	65 0a 08 00 65 0a 08 00 65 0a 08 00 65 0a 08 00     e...e...e...e...
   800a4:	00 00 00 00 65 0a 08 00 61 01 08 00 65 0a 08 00     ....e...a...e...
   800b4:	65 0a 08 00 65 0a 08 00 65 0a 08 00 65 0a 08 00     e...e...e...e...
   800c4:	65 0a 08 00 65 0a 08 00 65 0a 08 00 65 0a 08 00     e...e...e...e...
   800d4:	7d 02 08 00 65 0a 08 00 65 0a 08 00 65 0a 08 00     }...e...e...e...
   800e4:	65 0a 08 00 65 0a 08 00 65 0a 08 00 65 0a 08 00     e...e...e...e...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	000843d8 	.word	0x000843d8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000843d8 	.word	0x000843d8
   80154:	20070ae4 	.word	0x20070ae4
   80158:	000843d8 	.word	0x000843d8
   8015c:	00000000 	.word	0x00000000

00080160 <TC0_Handler>:

/**
 *  Interrupt handler for TC0 interrupt.
 */
void TC0_Handler(void)
{
   80160:	b500      	push	{lr}
   80162:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/* Clear status bit to acknowledge interrupt */
	ul_dummy = tc_get_status(TC0, 0);	//The compare bit is cleared by reading the register, manual p. 915
   80164:	2100      	movs	r1, #0
   80166:	4805      	ldr	r0, [pc, #20]	; (8017c <TC0_Handler+0x1c>)
   80168:	4b05      	ldr	r3, [pc, #20]	; (80180 <TC0_Handler+0x20>)
   8016a:	4798      	blx	r3
   8016c:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
   8016e:	9b01      	ldr	r3, [sp, #4]
	
	/* Start sampling (i.e. convert one sample value) */
	adc_start(ADC);
   80170:	4804      	ldr	r0, [pc, #16]	; (80184 <TC0_Handler+0x24>)
   80172:	4b05      	ldr	r3, [pc, #20]	; (80188 <TC0_Handler+0x28>)
   80174:	4798      	blx	r3
	
}
   80176:	b003      	add	sp, #12
   80178:	f85d fb04 	ldr.w	pc, [sp], #4
   8017c:	40080000 	.word	0x40080000
   80180:	0008038f 	.word	0x0008038f
   80184:	400c0000 	.word	0x400c0000
   80188:	0008037d 	.word	0x0008037d

0008018c <read_counter_value>:
static void start_clock(void);

uint32_t read_counter_value(){
	uint32_t counterValue = *p_TC_CV1;
	return counterValue;
}
   8018c:	4b01      	ldr	r3, [pc, #4]	; (80194 <read_counter_value+0x8>)
   8018e:	6818      	ldr	r0, [r3, #0]
   80190:	4770      	bx	lr
   80192:	bf00      	nop
   80194:	40084050 	.word	0x40084050

00080198 <configure_timerCounter>:
static void start_clock(void){
	*p_TC1_CCR |= (1 << SWTRG);
}

void configure_timerCounter(void)
{
   80198:	b508      	push	{r3, lr}
	/* Configure power management of timer clocks (ID_TC4 = channel 1 of TC1) */
	pmc_enable_periph_clk(ID_TC4);
   8019a:	201f      	movs	r0, #31
   8019c:	4b08      	ldr	r3, [pc, #32]	; (801c0 <configure_timerCounter+0x28>)
   8019e:	4798      	blx	r3
	*p_TC_CMR1 &= 0x11111110;
   801a0:	4a08      	ldr	r2, [pc, #32]	; (801c4 <configure_timerCounter+0x2c>)
   801a2:	6813      	ldr	r3, [r2, #0]
   801a4:	f003 3311 	and.w	r3, r3, #286331153	; 0x11111111
   801a8:	f023 0301 	bic.w	r3, r3, #1
   801ac:	6013      	str	r3, [r2, #0]
	*p_TC1_CCR |= (1 << SWTRG);
   801ae:	3a04      	subs	r2, #4
	*p_TC1_CCR &= ~(1 << CLKDIS); // clear disable bit
   801b0:	6813      	ldr	r3, [r2, #0]
   801b2:	f023 0302 	bic.w	r3, r3, #2
	*p_TC1_CCR |= (1 << SWTRG);
   801b6:	f043 0305 	orr.w	r3, r3, #5
   801ba:	6013      	str	r3, [r2, #0]
   801bc:	bd08      	pop	{r3, pc}
   801be:	bf00      	nop
   801c0:	00080a11 	.word	0x00080a11
   801c4:	40084044 	.word	0x40084044

000801c8 <smooth_values>:
	/* Enable ADC interrupt. */
	NVIC_EnableIRQ(ADC_IRQn);
}

static void smooth_values(uint16_t *buffer)
{
   801c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801cc:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
   801d0:	b085      	sub	sp, #20
   801d2:	f1a0 0802 	sub.w	r8, r0, #2
   801d6:	f10d 050e 	add.w	r5, sp, #14
   801da:	f50d 5b80 	add.w	fp, sp, #4096	; 0x1000
   801de:	f10b 0b0e 	add.w	fp, fp, #14
   801e2:	4b20      	ldr	r3, [pc, #128]	; (80264 <smooth_values+0x9c>)
   801e4:	685a      	ldr	r2, [r3, #4]
   801e6:	9200      	str	r2, [sp, #0]
   801e8:	681b      	ldr	r3, [r3, #0]
		for(int k = M-1; k >= 0; k--)
		{
			xbuff[k+1] = xbuff[k];
		}
		invalue = buffer[i];
		xbuff[0] =(float)invalue;
   801ea:	462c      	mov	r4, r5
   801ec:	46c1      	mov	r9, r8
		float sum = 0;
		// Construct sum 
		for(int j = 0; j <= M; j++){
			sum += (xbuff[j]*b[j]);
   801ee:	4f1e      	ldr	r7, [pc, #120]	; (80268 <smooth_values+0xa0>)
   801f0:	4e1e      	ldr	r6, [pc, #120]	; (8026c <smooth_values+0xa4>)
		}
		outvalue = (uint16_t)sum;
   801f2:	f8df a084 	ldr.w	sl, [pc, #132]	; 80278 <smooth_values+0xb0>
   801f6:	9502      	str	r5, [sp, #8]
   801f8:	461d      	mov	r5, r3
   801fa:	f8cd 800c 	str.w	r8, [sp, #12]
   801fe:	e001      	b.n	80204 <smooth_values+0x3c>
			xbuff[k+1] = xbuff[k];
   80200:	9500      	str	r5, [sp, #0]
		xbuff[0] =(float)invalue;
   80202:	9d01      	ldr	r5, [sp, #4]
   80204:	f839 0f02 	ldrh.w	r0, [r9, #2]!
   80208:	4b19      	ldr	r3, [pc, #100]	; (80270 <smooth_values+0xa8>)
   8020a:	4798      	blx	r3
   8020c:	9001      	str	r0, [sp, #4]
			sum += (xbuff[j]*b[j]);
   8020e:	4919      	ldr	r1, [pc, #100]	; (80274 <smooth_values+0xac>)
   80210:	47b8      	blx	r7
   80212:	2100      	movs	r1, #0
   80214:	47b0      	blx	r6
   80216:	4680      	mov	r8, r0
   80218:	4916      	ldr	r1, [pc, #88]	; (80274 <smooth_values+0xac>)
   8021a:	4628      	mov	r0, r5
   8021c:	47b8      	blx	r7
   8021e:	4641      	mov	r1, r8
   80220:	47b0      	blx	r6
   80222:	4680      	mov	r8, r0
   80224:	4913      	ldr	r1, [pc, #76]	; (80274 <smooth_values+0xac>)
   80226:	9800      	ldr	r0, [sp, #0]
   80228:	47b8      	blx	r7
   8022a:	4641      	mov	r1, r8
   8022c:	47b0      	blx	r6
		outvalue = (uint16_t)sum;
   8022e:	47d0      	blx	sl
   80230:	f824 0f02 	strh.w	r0, [r4, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80234:	455c      	cmp	r4, fp
   80236:	d1e3      	bne.n	80200 <smooth_values+0x38>
   80238:	462a      	mov	r2, r5
   8023a:	9d02      	ldr	r5, [sp, #8]
   8023c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   80240:	4b08      	ldr	r3, [pc, #32]	; (80264 <smooth_values+0x9c>)
   80242:	605a      	str	r2, [r3, #4]
   80244:	9a00      	ldr	r2, [sp, #0]
   80246:	609a      	str	r2, [r3, #8]
   80248:	9a01      	ldr	r2, [sp, #4]
   8024a:	601a      	str	r2, [r3, #0]
	//Copy values of temp_buff into old buffer
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
	{
		uint16_t *ip;       /* ip is a pointer to uint16_t */
		ip = &buffer[i];    /* sets ip to point to element i of buffer (contains address of buffer[i]) */
		*ip = temp_buff[i]; /* *ip points to content of buffer[i], this will change content of buffer[i] */
   8024c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
   80250:	f828 3f02 	strh.w	r3, [r8, #2]!
	for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80254:	42ac      	cmp	r4, r5
   80256:	d1f9      	bne.n	8024c <smooth_values+0x84>
	}
}
   80258:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
   8025c:	b005      	add	sp, #20
   8025e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80262:	bf00      	nop
   80264:	20070afc 	.word	0x20070afc
   80268:	00081089 	.word	0x00081089
   8026c:	00080e79 	.word	0x00080e79
   80270:	00080fd9 	.word	0x00080fd9
   80274:	3eaaa64c 	.word	0x3eaaa64c
   80278:	00081329 	.word	0x00081329

0008027c <ADC_Handler>:

void ADC_Handler(void){
   8027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Data transfer has been stopped (is complete) and RXBUFF status flag is set because ADC_RCR
	* and the ADC_RNCR have reached zero. Buffer of sample values is full.
	*/
	if ((adc_get_status(ADC) & ADC_ISR_RXBUFF) == ADC_ISR_RXBUFF) {
   8027e:	4824      	ldr	r0, [pc, #144]	; (80310 <ADC_Handler+0x94>)
   80280:	4b24      	ldr	r3, [pc, #144]	; (80314 <ADC_Handler+0x98>)
   80282:	4798      	blx	r3
   80284:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   80288:	d100      	bne.n	8028c <ADC_Handler+0x10>
   8028a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tc_stop(TC0, 0);  
   8028c:	2100      	movs	r1, #0
   8028e:	4822      	ldr	r0, [pc, #136]	; (80318 <ADC_Handler+0x9c>)
   80290:	4b22      	ldr	r3, [pc, #136]	; (8031c <ADC_Handler+0xa0>)
   80292:	4798      	blx	r3
   80294:	4d22      	ldr	r5, [pc, #136]	; (80320 <ADC_Handler+0xa4>)
		
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   80296:	2400      	movs	r4, #0
		{
			printf("Buffer values: %u, index: %u\n", adc_buffer_sample_values[i], i);
   80298:	4f22      	ldr	r7, [pc, #136]	; (80324 <ADC_Handler+0xa8>)
   8029a:	4e23      	ldr	r6, [pc, #140]	; (80328 <ADC_Handler+0xac>)
   8029c:	4622      	mov	r2, r4
   8029e:	f835 1f02 	ldrh.w	r1, [r5, #2]!
   802a2:	4638      	mov	r0, r7
   802a4:	47b0      	blx	r6
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
   802a6:	3401      	adds	r4, #1
   802a8:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   802ac:	d1f6      	bne.n	8029c <ADC_Handler+0x20>
		}
		smooth_values(adc_buffer_sample_values);
   802ae:	4c1f      	ldr	r4, [pc, #124]	; (8032c <ADC_Handler+0xb0>)
   802b0:	4620      	mov	r0, r4
   802b2:	4b1f      	ldr	r3, [pc, #124]	; (80330 <ADC_Handler+0xb4>)
   802b4:	4798      	blx	r3
		for (int i = 0; i < ADC_BUFFER_SIZE; i++)
		{
			printf("Temp buffer: %u, index: %u\n", adc_buffer_sample_values[i], i);
		}
		*/
	    pio_enable_interrupt(PIOB, PIO_PB26); //re-enable edge-level detection 
   802b6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   802ba:	481e      	ldr	r0, [pc, #120]	; (80334 <ADC_Handler+0xb8>)
   802bc:	4b1e      	ldr	r3, [pc, #120]	; (80338 <ADC_Handler+0xbc>)
   802be:	4798      	blx	r3
		/* Clear sample buffer */
		memset((void *)&adc_buffer_sample_values, 0, sizeof(adc_buffer_sample_values));
   802c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   802c4:	2100      	movs	r1, #0
   802c6:	4620      	mov	r0, r4
   802c8:	4b1c      	ldr	r3, [pc, #112]	; (8033c <ADC_Handler+0xc0>)
   802ca:	4798      	blx	r3
	if ((p_adc->ADC_RCR == 0) && (p_adc->ADC_RNCR == 0)) {
   802cc:	4b10      	ldr	r3, [pc, #64]	; (80310 <ADC_Handler+0x94>)
   802ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   802d2:	b91b      	cbnz	r3, 802dc <ADC_Handler+0x60>
   802d4:	4b0e      	ldr	r3, [pc, #56]	; (80310 <ADC_Handler+0x94>)
   802d6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   802da:	b16b      	cbz	r3, 802f8 <ADC_Handler+0x7c>
		if (p_adc->ADC_RNCR == 0)
   802dc:	4b0c      	ldr	r3, [pc, #48]	; (80310 <ADC_Handler+0x94>)
   802de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
   802e2:	2b00      	cmp	r3, #0
   802e4:	d1d1      	bne.n	8028a <ADC_Handler+0xe>
			p_adc->ADC_RNPR = (uint32_t) p_s_buffer; /* Receive Next Pointer Register */
   802e6:	4b0a      	ldr	r3, [pc, #40]	; (80310 <ADC_Handler+0x94>)
   802e8:	4a10      	ldr	r2, [pc, #64]	; (8032c <ADC_Handler+0xb0>)
   802ea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			p_adc->ADC_RNCR = ul_size;               /* Receive Next Counter Register */
   802ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   802f2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		/* Read new buffer data. Necessary, otherwise buffer values are null/zero */
		adc_read_buffer(ADC, adc_buffer_sample_values, ADC_BUFFER_SIZE);
	}
}
   802f6:	e7c8      	b.n	8028a <ADC_Handler+0xe>
		p_adc->ADC_RPR = (uint32_t) p_s_buffer; /* Receive Pointer Register */
   802f8:	4b05      	ldr	r3, [pc, #20]	; (80310 <ADC_Handler+0x94>)
   802fa:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
		p_adc->ADC_RCR = ul_size;               /* Receive Counter Register */
   802fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80302:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		p_adc->ADC_PTCR = ADC_PTCR_RXTEN; /*ADC_PTCR = Transfer Control Register, RXTEN: Receiver Transfer Enable */
   80306:	2201      	movs	r2, #1
   80308:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   8030c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8030e:	bf00      	nop
   80310:	400c0000 	.word	0x400c0000
   80314:	00080383 	.word	0x00080383
   80318:	40080000 	.word	0x40080000
   8031c:	00080387 	.word	0x00080387
   80320:	20070c4e 	.word	0x20070c4e
   80324:	000841e8 	.word	0x000841e8
   80328:	000813b9 	.word	0x000813b9
   8032c:	20070c50 	.word	0x20070c50
   80330:	000801c9 	.word	0x000801c9
   80334:	400e1000 	.word	0x400e1000
   80338:	0008070f 	.word	0x0008070f
   8033c:	000813e1 	.word	0x000813e1

00080340 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80344:	b980      	cbnz	r0, 80368 <_read+0x28>
   80346:	460c      	mov	r4, r1
   80348:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8034a:	2a00      	cmp	r2, #0
   8034c:	dd0f      	ble.n	8036e <_read+0x2e>
   8034e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80350:	4e08      	ldr	r6, [pc, #32]	; (80374 <_read+0x34>)
   80352:	4d09      	ldr	r5, [pc, #36]	; (80378 <_read+0x38>)
   80354:	6830      	ldr	r0, [r6, #0]
   80356:	4621      	mov	r1, r4
   80358:	682b      	ldr	r3, [r5, #0]
   8035a:	4798      	blx	r3
		ptr++;
   8035c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8035e:	42bc      	cmp	r4, r7
   80360:	d1f8      	bne.n	80354 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80362:	4640      	mov	r0, r8
   80364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80368:	f04f 38ff 	mov.w	r8, #4294967295
   8036c:	e7f9      	b.n	80362 <_read+0x22>
	for (; len > 0; --len) {
   8036e:	4680      	mov	r8, r0
   80370:	e7f7      	b.n	80362 <_read+0x22>
   80372:	bf00      	nop
   80374:	20071c58 	.word	0x20071c58
   80378:	20071c50 	.word	0x20071c50

0008037c <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
   8037c:	2302      	movs	r3, #2
   8037e:	6003      	str	r3, [r0, #0]
   80380:	4770      	bx	lr

00080382 <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
   80382:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
   80384:	4770      	bx	lr

00080386 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80386:	0189      	lsls	r1, r1, #6
   80388:	2302      	movs	r3, #2
   8038a:	5043      	str	r3, [r0, r1]
   8038c:	4770      	bx	lr

0008038e <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8038e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
   80392:	6a08      	ldr	r0, [r1, #32]
}
   80394:	4770      	bx	lr

00080396 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80396:	6943      	ldr	r3, [r0, #20]
   80398:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8039c:	bf1d      	ittte	ne
   8039e:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   803a2:	61c1      	strne	r1, [r0, #28]
	return 0;
   803a4:	2000      	movne	r0, #0
		return 1;
   803a6:	2001      	moveq	r0, #1
}
   803a8:	4770      	bx	lr

000803aa <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   803aa:	6943      	ldr	r3, [r0, #20]
   803ac:	f013 0f01 	tst.w	r3, #1
   803b0:	d005      	beq.n	803be <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   803b2:	6983      	ldr	r3, [r0, #24]
   803b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   803b8:	600b      	str	r3, [r1, #0]

	return 0;
   803ba:	2000      	movs	r0, #0
   803bc:	4770      	bx	lr
		return 1;
   803be:	2001      	movs	r0, #1
}
   803c0:	4770      	bx	lr
	...

000803c4 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   803c4:	b500      	push	{lr}
   803c6:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   803c8:	2201      	movs	r2, #1
   803ca:	f10d 0107 	add.w	r1, sp, #7
   803ce:	4810      	ldr	r0, [pc, #64]	; (80410 <USART0_Handler+0x4c>)
   803d0:	4b10      	ldr	r3, [pc, #64]	; (80414 <USART0_Handler+0x50>)
   803d2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   803d4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   803d6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   803da:	2200      	movs	r2, #0
   803dc:	4b0e      	ldr	r3, [pc, #56]	; (80418 <USART0_Handler+0x54>)
   803de:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   803e0:	4b0e      	ldr	r3, [pc, #56]	; (8041c <USART0_Handler+0x58>)
   803e2:	781b      	ldrb	r3, [r3, #0]
   803e4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   803e8:	4a0d      	ldr	r2, [pc, #52]	; (80420 <USART0_Handler+0x5c>)
   803ea:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   803ec:	2b9b      	cmp	r3, #155	; 0x9b
   803ee:	d00b      	beq.n	80408 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   803f0:	3301      	adds	r3, #1
   803f2:	4a0a      	ldr	r2, [pc, #40]	; (8041c <USART0_Handler+0x58>)
   803f4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   803f6:	2201      	movs	r2, #1
   803f8:	4b07      	ldr	r3, [pc, #28]	; (80418 <USART0_Handler+0x54>)
   803fa:	701a      	strb	r2, [r3, #0]
   803fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80400:	b662      	cpsie	i
}
   80402:	b003      	add	sp, #12
   80404:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   80408:	2200      	movs	r2, #0
   8040a:	4b04      	ldr	r3, [pc, #16]	; (8041c <USART0_Handler+0x58>)
   8040c:	701a      	strb	r2, [r3, #0]
   8040e:	e7f2      	b.n	803f6 <USART0_Handler+0x32>
   80410:	40098000 	.word	0x40098000
   80414:	00080475 	.word	0x00080475
   80418:	2007012c 	.word	0x2007012c
   8041c:	20070ba4 	.word	0x20070ba4
   80420:	20070b08 	.word	0x20070b08

00080424 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80424:	3801      	subs	r0, #1
   80426:	2802      	cmp	r0, #2
   80428:	d815      	bhi.n	80456 <_write+0x32>
{
   8042a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8042e:	460e      	mov	r6, r1
   80430:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80432:	b19a      	cbz	r2, 8045c <_write+0x38>
   80434:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80436:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80470 <_write+0x4c>
   8043a:	4f0c      	ldr	r7, [pc, #48]	; (8046c <_write+0x48>)
   8043c:	f8d8 0000 	ldr.w	r0, [r8]
   80440:	f815 1b01 	ldrb.w	r1, [r5], #1
   80444:	683b      	ldr	r3, [r7, #0]
   80446:	4798      	blx	r3
   80448:	2800      	cmp	r0, #0
   8044a:	db0a      	blt.n	80462 <_write+0x3e>
   8044c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8044e:	3c01      	subs	r4, #1
   80450:	d1f4      	bne.n	8043c <_write+0x18>
   80452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80456:	f04f 30ff 	mov.w	r0, #4294967295
   8045a:	4770      	bx	lr
	for (; len != 0; --len) {
   8045c:	4610      	mov	r0, r2
   8045e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80462:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8046a:	bf00      	nop
   8046c:	20071c54 	.word	0x20071c54
   80470:	20071c58 	.word	0x20071c58

00080474 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80474:	2a00      	cmp	r2, #0
   80476:	d051      	beq.n	8051c <usart_serial_read_packet+0xa8>
{
   80478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8047c:	b083      	sub	sp, #12
   8047e:	4605      	mov	r5, r0
   80480:	460c      	mov	r4, r1
   80482:	4692      	mov	sl, r2
   80484:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80486:	4f26      	ldr	r7, [pc, #152]	; (80520 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   80488:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80534 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8048c:	4e25      	ldr	r6, [pc, #148]	; (80524 <usart_serial_read_packet+0xb0>)
   8048e:	e01d      	b.n	804cc <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   80490:	4621      	mov	r1, r4
   80492:	4638      	mov	r0, r7
   80494:	47c8      	blx	r9
   80496:	2800      	cmp	r0, #0
   80498:	d1fa      	bne.n	80490 <usart_serial_read_packet+0x1c>
   8049a:	e021      	b.n	804e0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   8049c:	469b      	mov	fp, r3
   8049e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80538 <usart_serial_read_packet+0xc4>
   804a2:	a901      	add	r1, sp, #4
   804a4:	4658      	mov	r0, fp
   804a6:	47c0      	blx	r8
   804a8:	2800      	cmp	r0, #0
   804aa:	d1fa      	bne.n	804a2 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   804ac:	9b01      	ldr	r3, [sp, #4]
   804ae:	7023      	strb	r3, [r4, #0]
   804b0:	e019      	b.n	804e6 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   804b2:	469b      	mov	fp, r3
   804b4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80538 <usart_serial_read_packet+0xc4>
   804b8:	a901      	add	r1, sp, #4
   804ba:	4658      	mov	r0, fp
   804bc:	47c0      	blx	r8
   804be:	2800      	cmp	r0, #0
   804c0:	d1fa      	bne.n	804b8 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   804c2:	9b01      	ldr	r3, [sp, #4]
   804c4:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   804c6:	3401      	adds	r4, #1
	while (len) {
   804c8:	4554      	cmp	r4, sl
   804ca:	d023      	beq.n	80514 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   804cc:	2300      	movs	r3, #0
   804ce:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   804d0:	42bd      	cmp	r5, r7
   804d2:	d0dd      	beq.n	80490 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   804d4:	4b14      	ldr	r3, [pc, #80]	; (80528 <usart_serial_read_packet+0xb4>)
   804d6:	429d      	cmp	r5, r3
   804d8:	d0e0      	beq.n	8049c <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   804da:	4b14      	ldr	r3, [pc, #80]	; (8052c <usart_serial_read_packet+0xb8>)
   804dc:	429d      	cmp	r5, r3
   804de:	d0e8      	beq.n	804b2 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   804e0:	4b13      	ldr	r3, [pc, #76]	; (80530 <usart_serial_read_packet+0xbc>)
   804e2:	429d      	cmp	r5, r3
   804e4:	d00b      	beq.n	804fe <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   804e6:	42b5      	cmp	r5, r6
   804e8:	d1ed      	bne.n	804c6 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   804ea:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80538 <usart_serial_read_packet+0xc4>
   804ee:	a901      	add	r1, sp, #4
   804f0:	4630      	mov	r0, r6
   804f2:	47c0      	blx	r8
   804f4:	2800      	cmp	r0, #0
   804f6:	d1fa      	bne.n	804ee <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   804f8:	9b01      	ldr	r3, [sp, #4]
   804fa:	7023      	strb	r3, [r4, #0]
   804fc:	e7e3      	b.n	804c6 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   804fe:	469b      	mov	fp, r3
   80500:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80538 <usart_serial_read_packet+0xc4>
   80504:	a901      	add	r1, sp, #4
   80506:	4658      	mov	r0, fp
   80508:	47c0      	blx	r8
   8050a:	2800      	cmp	r0, #0
   8050c:	d1fa      	bne.n	80504 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   8050e:	9b01      	ldr	r3, [sp, #4]
   80510:	7023      	strb	r3, [r4, #0]
   80512:	e7d8      	b.n	804c6 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80514:	2000      	movs	r0, #0
   80516:	b003      	add	sp, #12
   80518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8051c:	2000      	movs	r0, #0
   8051e:	4770      	bx	lr
   80520:	400e0800 	.word	0x400e0800
   80524:	400a4000 	.word	0x400a4000
   80528:	40098000 	.word	0x40098000
   8052c:	4009c000 	.word	0x4009c000
   80530:	400a0000 	.word	0x400a0000
   80534:	00080583 	.word	0x00080583
   80538:	000803ab 	.word	0x000803ab

0008053c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8053c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8053e:	23ac      	movs	r3, #172	; 0xac
   80540:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80542:	680b      	ldr	r3, [r1, #0]
   80544:	684a      	ldr	r2, [r1, #4]
   80546:	fbb3 f3f2 	udiv	r3, r3, r2
   8054a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8054c:	1e5c      	subs	r4, r3, #1
   8054e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80552:	4294      	cmp	r4, r2
   80554:	d80b      	bhi.n	8056e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80556:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80558:	688b      	ldr	r3, [r1, #8]
   8055a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8055c:	f240 2302 	movw	r3, #514	; 0x202
   80560:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80564:	2350      	movs	r3, #80	; 0x50
   80566:	6003      	str	r3, [r0, #0]

	return 0;
   80568:	2000      	movs	r0, #0
}
   8056a:	bc10      	pop	{r4}
   8056c:	4770      	bx	lr
		return 1;
   8056e:	2001      	movs	r0, #1
   80570:	e7fb      	b.n	8056a <uart_init+0x2e>

00080572 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80572:	6943      	ldr	r3, [r0, #20]
   80574:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80578:	bf1a      	itte	ne
   8057a:	61c1      	strne	r1, [r0, #28]
	return 0;
   8057c:	2000      	movne	r0, #0
		return 1;
   8057e:	2001      	moveq	r0, #1
}
   80580:	4770      	bx	lr

00080582 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80582:	6943      	ldr	r3, [r0, #20]
   80584:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80588:	bf1d      	ittte	ne
   8058a:	6983      	ldrne	r3, [r0, #24]
   8058c:	700b      	strbne	r3, [r1, #0]
	return 0;
   8058e:	2000      	movne	r0, #0
		return 1;
   80590:	2001      	moveq	r0, #1
}
   80592:	4770      	bx	lr

00080594 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80594:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80596:	480e      	ldr	r0, [pc, #56]	; (805d0 <sysclk_init+0x3c>)
   80598:	4b0e      	ldr	r3, [pc, #56]	; (805d4 <sysclk_init+0x40>)
   8059a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8059c:	213e      	movs	r1, #62	; 0x3e
   8059e:	2000      	movs	r0, #0
   805a0:	4b0d      	ldr	r3, [pc, #52]	; (805d8 <sysclk_init+0x44>)
   805a2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   805a4:	4c0d      	ldr	r4, [pc, #52]	; (805dc <sysclk_init+0x48>)
   805a6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   805a8:	2800      	cmp	r0, #0
   805aa:	d0fc      	beq.n	805a6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   805ac:	4b0c      	ldr	r3, [pc, #48]	; (805e0 <sysclk_init+0x4c>)
   805ae:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   805b0:	4a0c      	ldr	r2, [pc, #48]	; (805e4 <sysclk_init+0x50>)
   805b2:	4b0d      	ldr	r3, [pc, #52]	; (805e8 <sysclk_init+0x54>)
   805b4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   805b6:	4c0d      	ldr	r4, [pc, #52]	; (805ec <sysclk_init+0x58>)
   805b8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   805ba:	2800      	cmp	r0, #0
   805bc:	d0fc      	beq.n	805b8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   805be:	2010      	movs	r0, #16
   805c0:	4b0b      	ldr	r3, [pc, #44]	; (805f0 <sysclk_init+0x5c>)
   805c2:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   805c4:	4b0b      	ldr	r3, [pc, #44]	; (805f4 <sysclk_init+0x60>)
   805c6:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   805c8:	4801      	ldr	r0, [pc, #4]	; (805d0 <sysclk_init+0x3c>)
   805ca:	4b02      	ldr	r3, [pc, #8]	; (805d4 <sysclk_init+0x40>)
   805cc:	4798      	blx	r3
   805ce:	bd10      	pop	{r4, pc}
   805d0:	0501bd00 	.word	0x0501bd00
   805d4:	200700a5 	.word	0x200700a5
   805d8:	0008098d 	.word	0x0008098d
   805dc:	000809e1 	.word	0x000809e1
   805e0:	000809f1 	.word	0x000809f1
   805e4:	200d3f01 	.word	0x200d3f01
   805e8:	400e0600 	.word	0x400e0600
   805ec:	00080a01 	.word	0x00080a01
   805f0:	00080929 	.word	0x00080929
   805f4:	00080b01 	.word	0x00080b01

000805f8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   805f8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   805fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805fe:	4b16      	ldr	r3, [pc, #88]	; (80658 <board_init+0x60>)
   80600:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80602:	200b      	movs	r0, #11
   80604:	4c15      	ldr	r4, [pc, #84]	; (8065c <board_init+0x64>)
   80606:	47a0      	blx	r4
   80608:	200c      	movs	r0, #12
   8060a:	47a0      	blx	r4
   8060c:	200d      	movs	r0, #13
   8060e:	47a0      	blx	r4
   80610:	200e      	movs	r0, #14
   80612:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80614:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80618:	203b      	movs	r0, #59	; 0x3b
   8061a:	4c11      	ldr	r4, [pc, #68]	; (80660 <board_init+0x68>)
   8061c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8061e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80622:	2055      	movs	r0, #85	; 0x55
   80624:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80626:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8062a:	2056      	movs	r0, #86	; 0x56
   8062c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8062e:	490d      	ldr	r1, [pc, #52]	; (80664 <board_init+0x6c>)
   80630:	2068      	movs	r0, #104	; 0x68
   80632:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80634:	490c      	ldr	r1, [pc, #48]	; (80668 <board_init+0x70>)
   80636:	205c      	movs	r0, #92	; 0x5c
   80638:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8063a:	4a0c      	ldr	r2, [pc, #48]	; (8066c <board_init+0x74>)
   8063c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80640:	480b      	ldr	r0, [pc, #44]	; (80670 <board_init+0x78>)
   80642:	4b0c      	ldr	r3, [pc, #48]	; (80674 <board_init+0x7c>)
   80644:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80646:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8064a:	202b      	movs	r0, #43	; 0x2b
   8064c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8064e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80652:	202a      	movs	r0, #42	; 0x2a
   80654:	47a0      	blx	r4
   80656:	bd10      	pop	{r4, pc}
   80658:	400e1a50 	.word	0x400e1a50
   8065c:	00080a11 	.word	0x00080a11
   80660:	0008071d 	.word	0x0008071d
   80664:	28000079 	.word	0x28000079
   80668:	28000001 	.word	0x28000001
   8066c:	08000001 	.word	0x08000001
   80670:	400e0e00 	.word	0x400e0e00
   80674:	000807ed 	.word	0x000807ed

00080678 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80678:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8067a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8067e:	d016      	beq.n	806ae <pio_set_peripheral+0x36>
   80680:	d80b      	bhi.n	8069a <pio_set_peripheral+0x22>
   80682:	b149      	cbz	r1, 80698 <pio_set_peripheral+0x20>
   80684:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80688:	d105      	bne.n	80696 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8068a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8068c:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8068e:	400b      	ands	r3, r1
   80690:	ea23 0302 	bic.w	r3, r3, r2
   80694:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80696:	6042      	str	r2, [r0, #4]
   80698:	4770      	bx	lr
	switch (ul_type) {
   8069a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8069e:	d0fb      	beq.n	80698 <pio_set_peripheral+0x20>
   806a0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   806a4:	d0f8      	beq.n	80698 <pio_set_peripheral+0x20>
   806a6:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   806aa:	d1f4      	bne.n	80696 <pio_set_peripheral+0x1e>
   806ac:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   806ae:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   806b0:	4313      	orrs	r3, r2
   806b2:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   806b4:	e7ef      	b.n	80696 <pio_set_peripheral+0x1e>

000806b6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   806b6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   806b8:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   806bc:	bf14      	ite	ne
   806be:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   806c0:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   806c2:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   806c6:	bf14      	ite	ne
   806c8:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   806ca:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   806cc:	f012 0f02 	tst.w	r2, #2
   806d0:	d107      	bne.n	806e2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   806d2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   806d6:	bf18      	it	ne
   806d8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   806dc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   806de:	6001      	str	r1, [r0, #0]
   806e0:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   806e2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   806e6:	e7f9      	b.n	806dc <pio_set_input+0x26>

000806e8 <pio_set_output>:
{
   806e8:	b410      	push	{r4}
   806ea:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   806ec:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   806ee:	b944      	cbnz	r4, 80702 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   806f0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   806f2:	b143      	cbz	r3, 80706 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   806f4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   806f6:	b942      	cbnz	r2, 8070a <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   806f8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   806fa:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   806fc:	6001      	str	r1, [r0, #0]
}
   806fe:	bc10      	pop	{r4}
   80700:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80702:	6641      	str	r1, [r0, #100]	; 0x64
   80704:	e7f5      	b.n	806f2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80706:	6541      	str	r1, [r0, #84]	; 0x54
   80708:	e7f5      	b.n	806f6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8070a:	6301      	str	r1, [r0, #48]	; 0x30
   8070c:	e7f5      	b.n	806fa <pio_set_output+0x12>

0008070e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   8070e:	6401      	str	r1, [r0, #64]	; 0x40
   80710:	4770      	bx	lr

00080712 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80712:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80714:	4770      	bx	lr

00080716 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80716:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80718:	4770      	bx	lr
	...

0008071c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8071c:	b570      	push	{r4, r5, r6, lr}
   8071e:	b082      	sub	sp, #8
   80720:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80722:	0943      	lsrs	r3, r0, #5
   80724:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80728:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8072c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8072e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80732:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80736:	d031      	beq.n	8079c <pio_configure_pin+0x80>
   80738:	d816      	bhi.n	80768 <pio_configure_pin+0x4c>
   8073a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8073e:	d01b      	beq.n	80778 <pio_configure_pin+0x5c>
   80740:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80744:	d116      	bne.n	80774 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80746:	f000 001f 	and.w	r0, r0, #31
   8074a:	2601      	movs	r6, #1
   8074c:	4086      	lsls	r6, r0
   8074e:	4632      	mov	r2, r6
   80750:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80754:	4620      	mov	r0, r4
   80756:	4b22      	ldr	r3, [pc, #136]	; (807e0 <pio_configure_pin+0xc4>)
   80758:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8075a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8075e:	bf14      	ite	ne
   80760:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80762:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80764:	2001      	movs	r0, #1
   80766:	e017      	b.n	80798 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8076c:	d021      	beq.n	807b2 <pio_configure_pin+0x96>
   8076e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80772:	d01e      	beq.n	807b2 <pio_configure_pin+0x96>
		return 0;
   80774:	2000      	movs	r0, #0
   80776:	e00f      	b.n	80798 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80778:	f000 001f 	and.w	r0, r0, #31
   8077c:	2601      	movs	r6, #1
   8077e:	4086      	lsls	r6, r0
   80780:	4632      	mov	r2, r6
   80782:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80786:	4620      	mov	r0, r4
   80788:	4b15      	ldr	r3, [pc, #84]	; (807e0 <pio_configure_pin+0xc4>)
   8078a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8078c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80790:	bf14      	ite	ne
   80792:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80794:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80796:	2001      	movs	r0, #1
}
   80798:	b002      	add	sp, #8
   8079a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8079c:	f000 011f 	and.w	r1, r0, #31
   807a0:	2601      	movs	r6, #1
   807a2:	462a      	mov	r2, r5
   807a4:	fa06 f101 	lsl.w	r1, r6, r1
   807a8:	4620      	mov	r0, r4
   807aa:	4b0e      	ldr	r3, [pc, #56]	; (807e4 <pio_configure_pin+0xc8>)
   807ac:	4798      	blx	r3
	return 1;
   807ae:	4630      	mov	r0, r6
		break;
   807b0:	e7f2      	b.n	80798 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   807b2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   807b6:	f000 011f 	and.w	r1, r0, #31
   807ba:	2601      	movs	r6, #1
   807bc:	ea05 0306 	and.w	r3, r5, r6
   807c0:	9300      	str	r3, [sp, #0]
   807c2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   807c6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   807ca:	bf14      	ite	ne
   807cc:	2200      	movne	r2, #0
   807ce:	2201      	moveq	r2, #1
   807d0:	fa06 f101 	lsl.w	r1, r6, r1
   807d4:	4620      	mov	r0, r4
   807d6:	4c04      	ldr	r4, [pc, #16]	; (807e8 <pio_configure_pin+0xcc>)
   807d8:	47a0      	blx	r4
	return 1;
   807da:	4630      	mov	r0, r6
		break;
   807dc:	e7dc      	b.n	80798 <pio_configure_pin+0x7c>
   807de:	bf00      	nop
   807e0:	00080679 	.word	0x00080679
   807e4:	000806b7 	.word	0x000806b7
   807e8:	000806e9 	.word	0x000806e9

000807ec <pio_configure_pin_group>:
{
   807ec:	b570      	push	{r4, r5, r6, lr}
   807ee:	b082      	sub	sp, #8
   807f0:	4605      	mov	r5, r0
   807f2:	460e      	mov	r6, r1
   807f4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   807f6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   807fa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   807fe:	d027      	beq.n	80850 <pio_configure_pin_group+0x64>
   80800:	d811      	bhi.n	80826 <pio_configure_pin_group+0x3a>
   80802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80806:	d016      	beq.n	80836 <pio_configure_pin_group+0x4a>
   80808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8080c:	d111      	bne.n	80832 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8080e:	460a      	mov	r2, r1
   80810:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80814:	4b19      	ldr	r3, [pc, #100]	; (8087c <pio_configure_pin_group+0x90>)
   80816:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80818:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8081c:	bf14      	ite	ne
   8081e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80820:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80822:	2001      	movs	r0, #1
   80824:	e012      	b.n	8084c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80826:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8082a:	d015      	beq.n	80858 <pio_configure_pin_group+0x6c>
   8082c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80830:	d012      	beq.n	80858 <pio_configure_pin_group+0x6c>
		return 0;
   80832:	2000      	movs	r0, #0
   80834:	e00a      	b.n	8084c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80836:	460a      	mov	r2, r1
   80838:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8083c:	4b0f      	ldr	r3, [pc, #60]	; (8087c <pio_configure_pin_group+0x90>)
   8083e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80840:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80844:	bf14      	ite	ne
   80846:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80848:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8084a:	2001      	movs	r0, #1
}
   8084c:	b002      	add	sp, #8
   8084e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80850:	4b0b      	ldr	r3, [pc, #44]	; (80880 <pio_configure_pin_group+0x94>)
   80852:	4798      	blx	r3
	return 1;
   80854:	2001      	movs	r0, #1
		break;
   80856:	e7f9      	b.n	8084c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80858:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8085c:	f004 0301 	and.w	r3, r4, #1
   80860:	9300      	str	r3, [sp, #0]
   80862:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80866:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8086a:	bf14      	ite	ne
   8086c:	2200      	movne	r2, #0
   8086e:	2201      	moveq	r2, #1
   80870:	4631      	mov	r1, r6
   80872:	4628      	mov	r0, r5
   80874:	4c03      	ldr	r4, [pc, #12]	; (80884 <pio_configure_pin_group+0x98>)
   80876:	47a0      	blx	r4
	return 1;
   80878:	2001      	movs	r0, #1
		break;
   8087a:	e7e7      	b.n	8084c <pio_configure_pin_group+0x60>
   8087c:	00080679 	.word	0x00080679
   80880:	000806b7 	.word	0x000806b7
   80884:	000806e9 	.word	0x000806e9

00080888 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8088c:	4604      	mov	r4, r0
   8088e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80890:	4b0e      	ldr	r3, [pc, #56]	; (808cc <pio_handler_process+0x44>)
   80892:	4798      	blx	r3
   80894:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80896:	4620      	mov	r0, r4
   80898:	4b0d      	ldr	r3, [pc, #52]	; (808d0 <pio_handler_process+0x48>)
   8089a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8089c:	4005      	ands	r5, r0
   8089e:	d013      	beq.n	808c8 <pio_handler_process+0x40>
   808a0:	4c0c      	ldr	r4, [pc, #48]	; (808d4 <pio_handler_process+0x4c>)
   808a2:	f104 0660 	add.w	r6, r4, #96	; 0x60
   808a6:	e003      	b.n	808b0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   808a8:	42b4      	cmp	r4, r6
   808aa:	d00d      	beq.n	808c8 <pio_handler_process+0x40>
   808ac:	3410      	adds	r4, #16
		while (status != 0) {
   808ae:	b15d      	cbz	r5, 808c8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   808b0:	6820      	ldr	r0, [r4, #0]
   808b2:	4540      	cmp	r0, r8
   808b4:	d1f8      	bne.n	808a8 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   808b6:	6861      	ldr	r1, [r4, #4]
   808b8:	4229      	tst	r1, r5
   808ba:	d0f5      	beq.n	808a8 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   808bc:	68e3      	ldr	r3, [r4, #12]
   808be:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   808c0:	6863      	ldr	r3, [r4, #4]
   808c2:	ea25 0503 	bic.w	r5, r5, r3
   808c6:	e7ef      	b.n	808a8 <pio_handler_process+0x20>
   808c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   808cc:	00080713 	.word	0x00080713
   808d0:	00080717 	.word	0x00080717
   808d4:	20070ba8 	.word	0x20070ba8

000808d8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   808d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   808da:	210b      	movs	r1, #11
   808dc:	4801      	ldr	r0, [pc, #4]	; (808e4 <PIOA_Handler+0xc>)
   808de:	4b02      	ldr	r3, [pc, #8]	; (808e8 <PIOA_Handler+0x10>)
   808e0:	4798      	blx	r3
   808e2:	bd08      	pop	{r3, pc}
   808e4:	400e0e00 	.word	0x400e0e00
   808e8:	00080889 	.word	0x00080889

000808ec <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   808ec:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   808ee:	210c      	movs	r1, #12
   808f0:	4801      	ldr	r0, [pc, #4]	; (808f8 <PIOB_Handler+0xc>)
   808f2:	4b02      	ldr	r3, [pc, #8]	; (808fc <PIOB_Handler+0x10>)
   808f4:	4798      	blx	r3
   808f6:	bd08      	pop	{r3, pc}
   808f8:	400e1000 	.word	0x400e1000
   808fc:	00080889 	.word	0x00080889

00080900 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80900:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80902:	210d      	movs	r1, #13
   80904:	4801      	ldr	r0, [pc, #4]	; (8090c <PIOC_Handler+0xc>)
   80906:	4b02      	ldr	r3, [pc, #8]	; (80910 <PIOC_Handler+0x10>)
   80908:	4798      	blx	r3
   8090a:	bd08      	pop	{r3, pc}
   8090c:	400e1200 	.word	0x400e1200
   80910:	00080889 	.word	0x00080889

00080914 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80914:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80916:	210e      	movs	r1, #14
   80918:	4801      	ldr	r0, [pc, #4]	; (80920 <PIOD_Handler+0xc>)
   8091a:	4b02      	ldr	r3, [pc, #8]	; (80924 <PIOD_Handler+0x10>)
   8091c:	4798      	blx	r3
   8091e:	bd08      	pop	{r3, pc}
   80920:	400e1400 	.word	0x400e1400
   80924:	00080889 	.word	0x00080889

00080928 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80928:	4a17      	ldr	r2, [pc, #92]	; (80988 <pmc_switch_mck_to_pllack+0x60>)
   8092a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8092c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80930:	4318      	orrs	r0, r3
   80932:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80934:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80936:	f013 0f08 	tst.w	r3, #8
   8093a:	d10a      	bne.n	80952 <pmc_switch_mck_to_pllack+0x2a>
   8093c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80940:	4911      	ldr	r1, [pc, #68]	; (80988 <pmc_switch_mck_to_pllack+0x60>)
   80942:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80944:	f012 0f08 	tst.w	r2, #8
   80948:	d103      	bne.n	80952 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8094a:	3b01      	subs	r3, #1
   8094c:	d1f9      	bne.n	80942 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8094e:	2001      	movs	r0, #1
   80950:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80952:	4a0d      	ldr	r2, [pc, #52]	; (80988 <pmc_switch_mck_to_pllack+0x60>)
   80954:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80956:	f023 0303 	bic.w	r3, r3, #3
   8095a:	f043 0302 	orr.w	r3, r3, #2
   8095e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80960:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80962:	f013 0f08 	tst.w	r3, #8
   80966:	d10a      	bne.n	8097e <pmc_switch_mck_to_pllack+0x56>
   80968:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8096c:	4906      	ldr	r1, [pc, #24]	; (80988 <pmc_switch_mck_to_pllack+0x60>)
   8096e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80970:	f012 0f08 	tst.w	r2, #8
   80974:	d105      	bne.n	80982 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80976:	3b01      	subs	r3, #1
   80978:	d1f9      	bne.n	8096e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8097a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8097c:	4770      	bx	lr
	return 0;
   8097e:	2000      	movs	r0, #0
   80980:	4770      	bx	lr
   80982:	2000      	movs	r0, #0
   80984:	4770      	bx	lr
   80986:	bf00      	nop
   80988:	400e0600 	.word	0x400e0600

0008098c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8098c:	b9c8      	cbnz	r0, 809c2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8098e:	4a11      	ldr	r2, [pc, #68]	; (809d4 <pmc_switch_mainck_to_xtal+0x48>)
   80990:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80992:	0209      	lsls	r1, r1, #8
   80994:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80996:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8099a:	f023 0303 	bic.w	r3, r3, #3
   8099e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   809a2:	f043 0301 	orr.w	r3, r3, #1
   809a6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809a8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   809aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   809ac:	f013 0f01 	tst.w	r3, #1
   809b0:	d0fb      	beq.n	809aa <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   809b2:	4a08      	ldr	r2, [pc, #32]	; (809d4 <pmc_switch_mainck_to_xtal+0x48>)
   809b4:	6a13      	ldr	r3, [r2, #32]
   809b6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   809ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   809be:	6213      	str	r3, [r2, #32]
   809c0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   809c2:	4904      	ldr	r1, [pc, #16]	; (809d4 <pmc_switch_mainck_to_xtal+0x48>)
   809c4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   809c6:	4a04      	ldr	r2, [pc, #16]	; (809d8 <pmc_switch_mainck_to_xtal+0x4c>)
   809c8:	401a      	ands	r2, r3
   809ca:	4b04      	ldr	r3, [pc, #16]	; (809dc <pmc_switch_mainck_to_xtal+0x50>)
   809cc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   809ce:	620b      	str	r3, [r1, #32]
   809d0:	4770      	bx	lr
   809d2:	bf00      	nop
   809d4:	400e0600 	.word	0x400e0600
   809d8:	fec8fffc 	.word	0xfec8fffc
   809dc:	01370002 	.word	0x01370002

000809e0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   809e0:	4b02      	ldr	r3, [pc, #8]	; (809ec <pmc_osc_is_ready_mainck+0xc>)
   809e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   809e4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   809e8:	4770      	bx	lr
   809ea:	bf00      	nop
   809ec:	400e0600 	.word	0x400e0600

000809f0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   809f0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   809f4:	4b01      	ldr	r3, [pc, #4]	; (809fc <pmc_disable_pllack+0xc>)
   809f6:	629a      	str	r2, [r3, #40]	; 0x28
   809f8:	4770      	bx	lr
   809fa:	bf00      	nop
   809fc:	400e0600 	.word	0x400e0600

00080a00 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80a00:	4b02      	ldr	r3, [pc, #8]	; (80a0c <pmc_is_locked_pllack+0xc>)
   80a02:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80a04:	f000 0002 	and.w	r0, r0, #2
   80a08:	4770      	bx	lr
   80a0a:	bf00      	nop
   80a0c:	400e0600 	.word	0x400e0600

00080a10 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80a10:	282c      	cmp	r0, #44	; 0x2c
   80a12:	d81e      	bhi.n	80a52 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80a14:	281f      	cmp	r0, #31
   80a16:	d80c      	bhi.n	80a32 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80a18:	4b11      	ldr	r3, [pc, #68]	; (80a60 <pmc_enable_periph_clk+0x50>)
   80a1a:	699a      	ldr	r2, [r3, #24]
   80a1c:	2301      	movs	r3, #1
   80a1e:	4083      	lsls	r3, r0
   80a20:	4393      	bics	r3, r2
   80a22:	d018      	beq.n	80a56 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80a24:	2301      	movs	r3, #1
   80a26:	fa03 f000 	lsl.w	r0, r3, r0
   80a2a:	4b0d      	ldr	r3, [pc, #52]	; (80a60 <pmc_enable_periph_clk+0x50>)
   80a2c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80a2e:	2000      	movs	r0, #0
   80a30:	4770      	bx	lr
		ul_id -= 32;
   80a32:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80a34:	4b0a      	ldr	r3, [pc, #40]	; (80a60 <pmc_enable_periph_clk+0x50>)
   80a36:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80a3a:	2301      	movs	r3, #1
   80a3c:	4083      	lsls	r3, r0
   80a3e:	4393      	bics	r3, r2
   80a40:	d00b      	beq.n	80a5a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80a42:	2301      	movs	r3, #1
   80a44:	fa03 f000 	lsl.w	r0, r3, r0
   80a48:	4b05      	ldr	r3, [pc, #20]	; (80a60 <pmc_enable_periph_clk+0x50>)
   80a4a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80a4e:	2000      	movs	r0, #0
   80a50:	4770      	bx	lr
		return 1;
   80a52:	2001      	movs	r0, #1
   80a54:	4770      	bx	lr
	return 0;
   80a56:	2000      	movs	r0, #0
   80a58:	4770      	bx	lr
   80a5a:	2000      	movs	r0, #0
}
   80a5c:	4770      	bx	lr
   80a5e:	bf00      	nop
   80a60:	400e0600 	.word	0x400e0600

00080a64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80a64:	e7fe      	b.n	80a64 <Dummy_Handler>
	...

00080a68 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80a68:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80a6a:	4b1c      	ldr	r3, [pc, #112]	; (80adc <Reset_Handler+0x74>)
   80a6c:	4a1c      	ldr	r2, [pc, #112]	; (80ae0 <Reset_Handler+0x78>)
   80a6e:	429a      	cmp	r2, r3
   80a70:	d010      	beq.n	80a94 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80a72:	4b1c      	ldr	r3, [pc, #112]	; (80ae4 <Reset_Handler+0x7c>)
   80a74:	4a19      	ldr	r2, [pc, #100]	; (80adc <Reset_Handler+0x74>)
   80a76:	429a      	cmp	r2, r3
   80a78:	d20c      	bcs.n	80a94 <Reset_Handler+0x2c>
   80a7a:	3b01      	subs	r3, #1
   80a7c:	1a9b      	subs	r3, r3, r2
   80a7e:	f023 0303 	bic.w	r3, r3, #3
   80a82:	3304      	adds	r3, #4
   80a84:	4413      	add	r3, r2
   80a86:	4916      	ldr	r1, [pc, #88]	; (80ae0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80a88:	f851 0b04 	ldr.w	r0, [r1], #4
   80a8c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80a90:	429a      	cmp	r2, r3
   80a92:	d1f9      	bne.n	80a88 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a94:	4b14      	ldr	r3, [pc, #80]	; (80ae8 <Reset_Handler+0x80>)
   80a96:	4a15      	ldr	r2, [pc, #84]	; (80aec <Reset_Handler+0x84>)
   80a98:	429a      	cmp	r2, r3
   80a9a:	d20a      	bcs.n	80ab2 <Reset_Handler+0x4a>
   80a9c:	3b01      	subs	r3, #1
   80a9e:	1a9b      	subs	r3, r3, r2
   80aa0:	f023 0303 	bic.w	r3, r3, #3
   80aa4:	3304      	adds	r3, #4
   80aa6:	4413      	add	r3, r2
		*pDest++ = 0;
   80aa8:	2100      	movs	r1, #0
   80aaa:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80aae:	4293      	cmp	r3, r2
   80ab0:	d1fb      	bne.n	80aaa <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80ab2:	4b0f      	ldr	r3, [pc, #60]	; (80af0 <Reset_Handler+0x88>)
   80ab4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80ab8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80abc:	490d      	ldr	r1, [pc, #52]	; (80af4 <Reset_Handler+0x8c>)
   80abe:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80ac0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80ac8:	d203      	bcs.n	80ad2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80aca:	688b      	ldr	r3, [r1, #8]
   80acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80ad0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80ad2:	4b09      	ldr	r3, [pc, #36]	; (80af8 <Reset_Handler+0x90>)
   80ad4:	4798      	blx	r3

	/* Branch to main function */
	main();
   80ad6:	4b09      	ldr	r3, [pc, #36]	; (80afc <Reset_Handler+0x94>)
   80ad8:	4798      	blx	r3
   80ada:	e7fe      	b.n	80ada <Reset_Handler+0x72>
   80adc:	20070000 	.word	0x20070000
   80ae0:	000843d8 	.word	0x000843d8
   80ae4:	20070ae0 	.word	0x20070ae0
   80ae8:	20071c84 	.word	0x20071c84
   80aec:	20070ae0 	.word	0x20070ae0
   80af0:	00080000 	.word	0x00080000
   80af4:	e000ed00 	.word	0xe000ed00
   80af8:	00081369 	.word	0x00081369
   80afc:	00080db1 	.word	0x00080db1

00080b00 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80b00:	4b3d      	ldr	r3, [pc, #244]	; (80bf8 <SystemCoreClockUpdate+0xf8>)
   80b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b04:	f003 0303 	and.w	r3, r3, #3
   80b08:	2b03      	cmp	r3, #3
   80b0a:	d80e      	bhi.n	80b2a <SystemCoreClockUpdate+0x2a>
   80b0c:	e8df f003 	tbb	[pc, r3]
   80b10:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80b14:	4b39      	ldr	r3, [pc, #228]	; (80bfc <SystemCoreClockUpdate+0xfc>)
   80b16:	695b      	ldr	r3, [r3, #20]
   80b18:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80b1c:	bf14      	ite	ne
   80b1e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80b22:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80b26:	4b36      	ldr	r3, [pc, #216]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80b28:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80b2a:	4b33      	ldr	r3, [pc, #204]	; (80bf8 <SystemCoreClockUpdate+0xf8>)
   80b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b32:	2b70      	cmp	r3, #112	; 0x70
   80b34:	d057      	beq.n	80be6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80b36:	4b30      	ldr	r3, [pc, #192]	; (80bf8 <SystemCoreClockUpdate+0xf8>)
   80b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80b3a:	4931      	ldr	r1, [pc, #196]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80b3c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80b40:	680b      	ldr	r3, [r1, #0]
   80b42:	40d3      	lsrs	r3, r2
   80b44:	600b      	str	r3, [r1, #0]
   80b46:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b48:	4b2b      	ldr	r3, [pc, #172]	; (80bf8 <SystemCoreClockUpdate+0xf8>)
   80b4a:	6a1b      	ldr	r3, [r3, #32]
   80b4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b50:	d003      	beq.n	80b5a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b52:	4a2c      	ldr	r2, [pc, #176]	; (80c04 <SystemCoreClockUpdate+0x104>)
   80b54:	4b2a      	ldr	r3, [pc, #168]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80b56:	601a      	str	r2, [r3, #0]
   80b58:	e7e7      	b.n	80b2a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b5a:	4a2b      	ldr	r2, [pc, #172]	; (80c08 <SystemCoreClockUpdate+0x108>)
   80b5c:	4b28      	ldr	r3, [pc, #160]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80b5e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b60:	4b25      	ldr	r3, [pc, #148]	; (80bf8 <SystemCoreClockUpdate+0xf8>)
   80b62:	6a1b      	ldr	r3, [r3, #32]
   80b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b68:	2b10      	cmp	r3, #16
   80b6a:	d005      	beq.n	80b78 <SystemCoreClockUpdate+0x78>
   80b6c:	2b20      	cmp	r3, #32
   80b6e:	d1dc      	bne.n	80b2a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80b70:	4a24      	ldr	r2, [pc, #144]	; (80c04 <SystemCoreClockUpdate+0x104>)
   80b72:	4b23      	ldr	r3, [pc, #140]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80b74:	601a      	str	r2, [r3, #0]
				break;
   80b76:	e7d8      	b.n	80b2a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80b78:	4a24      	ldr	r2, [pc, #144]	; (80c0c <SystemCoreClockUpdate+0x10c>)
   80b7a:	4b21      	ldr	r3, [pc, #132]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80b7c:	601a      	str	r2, [r3, #0]
				break;
   80b7e:	e7d4      	b.n	80b2a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b80:	4b1d      	ldr	r3, [pc, #116]	; (80bf8 <SystemCoreClockUpdate+0xf8>)
   80b82:	6a1b      	ldr	r3, [r3, #32]
   80b84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b88:	d00c      	beq.n	80ba4 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b8a:	4a1e      	ldr	r2, [pc, #120]	; (80c04 <SystemCoreClockUpdate+0x104>)
   80b8c:	4b1c      	ldr	r3, [pc, #112]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80b8e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80b90:	4b19      	ldr	r3, [pc, #100]	; (80bf8 <SystemCoreClockUpdate+0xf8>)
   80b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b94:	f003 0303 	and.w	r3, r3, #3
   80b98:	2b02      	cmp	r3, #2
   80b9a:	d016      	beq.n	80bca <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80b9c:	4a1c      	ldr	r2, [pc, #112]	; (80c10 <SystemCoreClockUpdate+0x110>)
   80b9e:	4b18      	ldr	r3, [pc, #96]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80ba0:	601a      	str	r2, [r3, #0]
   80ba2:	e7c2      	b.n	80b2a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ba4:	4a18      	ldr	r2, [pc, #96]	; (80c08 <SystemCoreClockUpdate+0x108>)
   80ba6:	4b16      	ldr	r3, [pc, #88]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80ba8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80baa:	4b13      	ldr	r3, [pc, #76]	; (80bf8 <SystemCoreClockUpdate+0xf8>)
   80bac:	6a1b      	ldr	r3, [r3, #32]
   80bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80bb2:	2b10      	cmp	r3, #16
   80bb4:	d005      	beq.n	80bc2 <SystemCoreClockUpdate+0xc2>
   80bb6:	2b20      	cmp	r3, #32
   80bb8:	d1ea      	bne.n	80b90 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80bba:	4a12      	ldr	r2, [pc, #72]	; (80c04 <SystemCoreClockUpdate+0x104>)
   80bbc:	4b10      	ldr	r3, [pc, #64]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80bbe:	601a      	str	r2, [r3, #0]
				break;
   80bc0:	e7e6      	b.n	80b90 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80bc2:	4a12      	ldr	r2, [pc, #72]	; (80c0c <SystemCoreClockUpdate+0x10c>)
   80bc4:	4b0e      	ldr	r3, [pc, #56]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80bc6:	601a      	str	r2, [r3, #0]
				break;
   80bc8:	e7e2      	b.n	80b90 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80bca:	4a0b      	ldr	r2, [pc, #44]	; (80bf8 <SystemCoreClockUpdate+0xf8>)
   80bcc:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80bce:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80bd0:	480b      	ldr	r0, [pc, #44]	; (80c00 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80bd2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80bd6:	6803      	ldr	r3, [r0, #0]
   80bd8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80bdc:	b2d2      	uxtb	r2, r2
   80bde:	fbb3 f3f2 	udiv	r3, r3, r2
   80be2:	6003      	str	r3, [r0, #0]
   80be4:	e7a1      	b.n	80b2a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80be6:	4a06      	ldr	r2, [pc, #24]	; (80c00 <SystemCoreClockUpdate+0x100>)
   80be8:	6813      	ldr	r3, [r2, #0]
   80bea:	490a      	ldr	r1, [pc, #40]	; (80c14 <SystemCoreClockUpdate+0x114>)
   80bec:	fba1 1303 	umull	r1, r3, r1, r3
   80bf0:	085b      	lsrs	r3, r3, #1
   80bf2:	6013      	str	r3, [r2, #0]
   80bf4:	4770      	bx	lr
   80bf6:	bf00      	nop
   80bf8:	400e0600 	.word	0x400e0600
   80bfc:	400e1a10 	.word	0x400e1a10
   80c00:	20070130 	.word	0x20070130
   80c04:	00b71b00 	.word	0x00b71b00
   80c08:	003d0900 	.word	0x003d0900
   80c0c:	007a1200 	.word	0x007a1200
   80c10:	0e4e1c00 	.word	0x0e4e1c00
   80c14:	aaaaaaab 	.word	0xaaaaaaab

00080c18 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80c18:	4b0a      	ldr	r3, [pc, #40]	; (80c44 <_sbrk+0x2c>)
   80c1a:	681b      	ldr	r3, [r3, #0]
   80c1c:	b153      	cbz	r3, 80c34 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80c1e:	4b09      	ldr	r3, [pc, #36]	; (80c44 <_sbrk+0x2c>)
   80c20:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80c22:	181a      	adds	r2, r3, r0
   80c24:	4908      	ldr	r1, [pc, #32]	; (80c48 <_sbrk+0x30>)
   80c26:	4291      	cmp	r1, r2
   80c28:	db08      	blt.n	80c3c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80c2a:	4610      	mov	r0, r2
   80c2c:	4a05      	ldr	r2, [pc, #20]	; (80c44 <_sbrk+0x2c>)
   80c2e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80c30:	4618      	mov	r0, r3
   80c32:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80c34:	4a05      	ldr	r2, [pc, #20]	; (80c4c <_sbrk+0x34>)
   80c36:	4b03      	ldr	r3, [pc, #12]	; (80c44 <_sbrk+0x2c>)
   80c38:	601a      	str	r2, [r3, #0]
   80c3a:	e7f0      	b.n	80c1e <_sbrk+0x6>
		return (caddr_t) -1;	
   80c3c:	f04f 30ff 	mov.w	r0, #4294967295
}
   80c40:	4770      	bx	lr
   80c42:	bf00      	nop
   80c44:	20070c18 	.word	0x20070c18
   80c48:	20087ffc 	.word	0x20087ffc
   80c4c:	20073c88 	.word	0x20073c88

00080c50 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80c50:	f04f 30ff 	mov.w	r0, #4294967295
   80c54:	4770      	bx	lr

00080c56 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80c5a:	604b      	str	r3, [r1, #4]

	return 0;
}
   80c5c:	2000      	movs	r0, #0
   80c5e:	4770      	bx	lr

00080c60 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80c60:	2001      	movs	r0, #1
   80c62:	4770      	bx	lr

00080c64 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80c64:	2000      	movs	r0, #0
   80c66:	4770      	bx	lr

00080c68 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80c68:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c6a:	b083      	sub	sp, #12
   80c6c:	4604      	mov	r4, r0
   80c6e:	460d      	mov	r5, r1
	uint32_t val = 0;
   80c70:	2300      	movs	r3, #0
   80c72:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80c74:	4b20      	ldr	r3, [pc, #128]	; (80cf8 <usart_serial_getchar+0x90>)
   80c76:	4298      	cmp	r0, r3
   80c78:	d00d      	beq.n	80c96 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80c7a:	4b20      	ldr	r3, [pc, #128]	; (80cfc <usart_serial_getchar+0x94>)
   80c7c:	4298      	cmp	r0, r3
   80c7e:	d012      	beq.n	80ca6 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80c80:	4b1f      	ldr	r3, [pc, #124]	; (80d00 <usart_serial_getchar+0x98>)
   80c82:	4298      	cmp	r0, r3
   80c84:	d019      	beq.n	80cba <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80c86:	4b1f      	ldr	r3, [pc, #124]	; (80d04 <usart_serial_getchar+0x9c>)
   80c88:	429c      	cmp	r4, r3
   80c8a:	d020      	beq.n	80cce <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80c8c:	4b1e      	ldr	r3, [pc, #120]	; (80d08 <usart_serial_getchar+0xa0>)
   80c8e:	429c      	cmp	r4, r3
   80c90:	d027      	beq.n	80ce2 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80c92:	b003      	add	sp, #12
   80c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80c96:	461f      	mov	r7, r3
   80c98:	4e1c      	ldr	r6, [pc, #112]	; (80d0c <usart_serial_getchar+0xa4>)
   80c9a:	4629      	mov	r1, r5
   80c9c:	4638      	mov	r0, r7
   80c9e:	47b0      	blx	r6
   80ca0:	2800      	cmp	r0, #0
   80ca2:	d1fa      	bne.n	80c9a <usart_serial_getchar+0x32>
   80ca4:	e7ef      	b.n	80c86 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80ca6:	461f      	mov	r7, r3
   80ca8:	4e19      	ldr	r6, [pc, #100]	; (80d10 <usart_serial_getchar+0xa8>)
   80caa:	a901      	add	r1, sp, #4
   80cac:	4638      	mov	r0, r7
   80cae:	47b0      	blx	r6
   80cb0:	2800      	cmp	r0, #0
   80cb2:	d1fa      	bne.n	80caa <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80cb4:	9b01      	ldr	r3, [sp, #4]
   80cb6:	702b      	strb	r3, [r5, #0]
   80cb8:	e7e8      	b.n	80c8c <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80cba:	461e      	mov	r6, r3
   80cbc:	4c14      	ldr	r4, [pc, #80]	; (80d10 <usart_serial_getchar+0xa8>)
   80cbe:	a901      	add	r1, sp, #4
   80cc0:	4630      	mov	r0, r6
   80cc2:	47a0      	blx	r4
   80cc4:	2800      	cmp	r0, #0
   80cc6:	d1fa      	bne.n	80cbe <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80cc8:	9b01      	ldr	r3, [sp, #4]
   80cca:	702b      	strb	r3, [r5, #0]
   80ccc:	e7e1      	b.n	80c92 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80cce:	461e      	mov	r6, r3
   80cd0:	4c0f      	ldr	r4, [pc, #60]	; (80d10 <usart_serial_getchar+0xa8>)
   80cd2:	a901      	add	r1, sp, #4
   80cd4:	4630      	mov	r0, r6
   80cd6:	47a0      	blx	r4
   80cd8:	2800      	cmp	r0, #0
   80cda:	d1fa      	bne.n	80cd2 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80cdc:	9b01      	ldr	r3, [sp, #4]
   80cde:	702b      	strb	r3, [r5, #0]
   80ce0:	e7d7      	b.n	80c92 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80ce2:	461e      	mov	r6, r3
   80ce4:	4c0a      	ldr	r4, [pc, #40]	; (80d10 <usart_serial_getchar+0xa8>)
   80ce6:	a901      	add	r1, sp, #4
   80ce8:	4630      	mov	r0, r6
   80cea:	47a0      	blx	r4
   80cec:	2800      	cmp	r0, #0
   80cee:	d1fa      	bne.n	80ce6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80cf0:	9b01      	ldr	r3, [sp, #4]
   80cf2:	702b      	strb	r3, [r5, #0]
}
   80cf4:	e7cd      	b.n	80c92 <usart_serial_getchar+0x2a>
   80cf6:	bf00      	nop
   80cf8:	400e0800 	.word	0x400e0800
   80cfc:	40098000 	.word	0x40098000
   80d00:	4009c000 	.word	0x4009c000
   80d04:	400a0000 	.word	0x400a0000
   80d08:	400a4000 	.word	0x400a4000
   80d0c:	00080583 	.word	0x00080583
   80d10:	000803ab 	.word	0x000803ab

00080d14 <usart_serial_putchar>:
{
   80d14:	b570      	push	{r4, r5, r6, lr}
   80d16:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80d18:	4b1e      	ldr	r3, [pc, #120]	; (80d94 <usart_serial_putchar+0x80>)
   80d1a:	4298      	cmp	r0, r3
   80d1c:	d00d      	beq.n	80d3a <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80d1e:	4b1e      	ldr	r3, [pc, #120]	; (80d98 <usart_serial_putchar+0x84>)
   80d20:	4298      	cmp	r0, r3
   80d22:	d013      	beq.n	80d4c <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80d24:	4b1d      	ldr	r3, [pc, #116]	; (80d9c <usart_serial_putchar+0x88>)
   80d26:	4298      	cmp	r0, r3
   80d28:	d019      	beq.n	80d5e <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80d2a:	4b1d      	ldr	r3, [pc, #116]	; (80da0 <usart_serial_putchar+0x8c>)
   80d2c:	4298      	cmp	r0, r3
   80d2e:	d01f      	beq.n	80d70 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80d30:	4b1c      	ldr	r3, [pc, #112]	; (80da4 <usart_serial_putchar+0x90>)
   80d32:	4298      	cmp	r0, r3
   80d34:	d025      	beq.n	80d82 <usart_serial_putchar+0x6e>
	return 0;
   80d36:	2000      	movs	r0, #0
}
   80d38:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80d3a:	461e      	mov	r6, r3
   80d3c:	4d1a      	ldr	r5, [pc, #104]	; (80da8 <usart_serial_putchar+0x94>)
   80d3e:	4621      	mov	r1, r4
   80d40:	4630      	mov	r0, r6
   80d42:	47a8      	blx	r5
   80d44:	2800      	cmp	r0, #0
   80d46:	d1fa      	bne.n	80d3e <usart_serial_putchar+0x2a>
		return 1;
   80d48:	2001      	movs	r0, #1
   80d4a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d4c:	461e      	mov	r6, r3
   80d4e:	4d17      	ldr	r5, [pc, #92]	; (80dac <usart_serial_putchar+0x98>)
   80d50:	4621      	mov	r1, r4
   80d52:	4630      	mov	r0, r6
   80d54:	47a8      	blx	r5
   80d56:	2800      	cmp	r0, #0
   80d58:	d1fa      	bne.n	80d50 <usart_serial_putchar+0x3c>
		return 1;
   80d5a:	2001      	movs	r0, #1
   80d5c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d5e:	461e      	mov	r6, r3
   80d60:	4d12      	ldr	r5, [pc, #72]	; (80dac <usart_serial_putchar+0x98>)
   80d62:	4621      	mov	r1, r4
   80d64:	4630      	mov	r0, r6
   80d66:	47a8      	blx	r5
   80d68:	2800      	cmp	r0, #0
   80d6a:	d1fa      	bne.n	80d62 <usart_serial_putchar+0x4e>
		return 1;
   80d6c:	2001      	movs	r0, #1
   80d6e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d70:	461e      	mov	r6, r3
   80d72:	4d0e      	ldr	r5, [pc, #56]	; (80dac <usart_serial_putchar+0x98>)
   80d74:	4621      	mov	r1, r4
   80d76:	4630      	mov	r0, r6
   80d78:	47a8      	blx	r5
   80d7a:	2800      	cmp	r0, #0
   80d7c:	d1fa      	bne.n	80d74 <usart_serial_putchar+0x60>
		return 1;
   80d7e:	2001      	movs	r0, #1
   80d80:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80d82:	461e      	mov	r6, r3
   80d84:	4d09      	ldr	r5, [pc, #36]	; (80dac <usart_serial_putchar+0x98>)
   80d86:	4621      	mov	r1, r4
   80d88:	4630      	mov	r0, r6
   80d8a:	47a8      	blx	r5
   80d8c:	2800      	cmp	r0, #0
   80d8e:	d1fa      	bne.n	80d86 <usart_serial_putchar+0x72>
		return 1;
   80d90:	2001      	movs	r0, #1
   80d92:	bd70      	pop	{r4, r5, r6, pc}
   80d94:	400e0800 	.word	0x400e0800
   80d98:	40098000 	.word	0x40098000
   80d9c:	4009c000 	.word	0x4009c000
   80da0:	400a0000 	.word	0x400a0000
   80da4:	400a4000 	.word	0x400a4000
   80da8:	00080573 	.word	0x00080573
   80dac:	00080397 	.word	0x00080397

00080db0 <main>:
	printf("=============\n");
}


int main (void)
{
   80db0:	b500      	push	{lr}
   80db2:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   80db4:	4b1a      	ldr	r3, [pc, #104]	; (80e20 <main+0x70>)
   80db6:	4798      	blx	r3
	board_init();
   80db8:	4b1a      	ldr	r3, [pc, #104]	; (80e24 <main+0x74>)
   80dba:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80dbc:	2008      	movs	r0, #8
   80dbe:	4d1a      	ldr	r5, [pc, #104]	; (80e28 <main+0x78>)
   80dc0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80dc2:	4c1a      	ldr	r4, [pc, #104]	; (80e2c <main+0x7c>)
   80dc4:	4b1a      	ldr	r3, [pc, #104]	; (80e30 <main+0x80>)
   80dc6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80dc8:	4a1a      	ldr	r2, [pc, #104]	; (80e34 <main+0x84>)
   80dca:	4b1b      	ldr	r3, [pc, #108]	; (80e38 <main+0x88>)
   80dcc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80dce:	4a1b      	ldr	r2, [pc, #108]	; (80e3c <main+0x8c>)
   80dd0:	4b1b      	ldr	r3, [pc, #108]	; (80e40 <main+0x90>)
   80dd2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80dd4:	4b1b      	ldr	r3, [pc, #108]	; (80e44 <main+0x94>)
   80dd6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80dd8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80ddc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80dde:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80de2:	9303      	str	r3, [sp, #12]
   80de4:	2008      	movs	r0, #8
   80de6:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80de8:	a901      	add	r1, sp, #4
   80dea:	4620      	mov	r0, r4
   80dec:	4b16      	ldr	r3, [pc, #88]	; (80e48 <main+0x98>)
   80dee:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80df0:	4d16      	ldr	r5, [pc, #88]	; (80e4c <main+0x9c>)
   80df2:	682b      	ldr	r3, [r5, #0]
   80df4:	2100      	movs	r1, #0
   80df6:	6898      	ldr	r0, [r3, #8]
   80df8:	4c15      	ldr	r4, [pc, #84]	; (80e50 <main+0xa0>)
   80dfa:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80dfc:	682b      	ldr	r3, [r5, #0]
   80dfe:	2100      	movs	r1, #0
   80e00:	6858      	ldr	r0, [r3, #4]
   80e02:	47a0      	blx	r4
	printf("Console ready\n");
   80e04:	4813      	ldr	r0, [pc, #76]	; (80e54 <main+0xa4>)
   80e06:	4c14      	ldr	r4, [pc, #80]	; (80e58 <main+0xa8>)
   80e08:	47a0      	blx	r4
	printf("=============\n");
   80e0a:	4814      	ldr	r0, [pc, #80]	; (80e5c <main+0xac>)
   80e0c:	47a0      	blx	r4
	ioport_init();
	adc_setup();
	configure_tc();
	init_amplitude_trigger();
	*/
	configure_timerCounter();
   80e0e:	4b14      	ldr	r3, [pc, #80]	; (80e60 <main+0xb0>)
   80e10:	4798      	blx	r3
	
	
	//do nothing in main()-loop
	while (1)
	{
		printf("Timer Counter value: %lu\n", read_counter_value()); //tc_read_cv(TC1, 1)
   80e12:	4e14      	ldr	r6, [pc, #80]	; (80e64 <main+0xb4>)
   80e14:	4d14      	ldr	r5, [pc, #80]	; (80e68 <main+0xb8>)
   80e16:	47b0      	blx	r6
   80e18:	4601      	mov	r1, r0
   80e1a:	4628      	mov	r0, r5
   80e1c:	47a0      	blx	r4
   80e1e:	e7fa      	b.n	80e16 <main+0x66>
   80e20:	00080595 	.word	0x00080595
   80e24:	000805f9 	.word	0x000805f9
   80e28:	00080a11 	.word	0x00080a11
   80e2c:	400e0800 	.word	0x400e0800
   80e30:	20071c58 	.word	0x20071c58
   80e34:	00080d15 	.word	0x00080d15
   80e38:	20071c54 	.word	0x20071c54
   80e3c:	00080c69 	.word	0x00080c69
   80e40:	20071c50 	.word	0x20071c50
   80e44:	0501bd00 	.word	0x0501bd00
   80e48:	0008053d 	.word	0x0008053d
   80e4c:	20070134 	.word	0x20070134
   80e50:	0008147d 	.word	0x0008147d
   80e54:	00084208 	.word	0x00084208
   80e58:	000813b9 	.word	0x000813b9
   80e5c:	00084218 	.word	0x00084218
   80e60:	00080199 	.word	0x00080199
   80e64:	0008018d 	.word	0x0008018d
   80e68:	00084228 	.word	0x00084228

00080e6c <__aeabi_frsub>:
   80e6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   80e70:	e002      	b.n	80e78 <__addsf3>
   80e72:	bf00      	nop

00080e74 <__aeabi_fsub>:
   80e74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00080e78 <__addsf3>:
   80e78:	0042      	lsls	r2, r0, #1
   80e7a:	bf1f      	itttt	ne
   80e7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   80e80:	ea92 0f03 	teqne	r2, r3
   80e84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   80e88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80e8c:	d06a      	beq.n	80f64 <__addsf3+0xec>
   80e8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   80e92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   80e96:	bfc1      	itttt	gt
   80e98:	18d2      	addgt	r2, r2, r3
   80e9a:	4041      	eorgt	r1, r0
   80e9c:	4048      	eorgt	r0, r1
   80e9e:	4041      	eorgt	r1, r0
   80ea0:	bfb8      	it	lt
   80ea2:	425b      	neglt	r3, r3
   80ea4:	2b19      	cmp	r3, #25
   80ea6:	bf88      	it	hi
   80ea8:	4770      	bxhi	lr
   80eaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   80eae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80eb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   80eb6:	bf18      	it	ne
   80eb8:	4240      	negne	r0, r0
   80eba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   80ebe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80ec2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   80ec6:	bf18      	it	ne
   80ec8:	4249      	negne	r1, r1
   80eca:	ea92 0f03 	teq	r2, r3
   80ece:	d03f      	beq.n	80f50 <__addsf3+0xd8>
   80ed0:	f1a2 0201 	sub.w	r2, r2, #1
   80ed4:	fa41 fc03 	asr.w	ip, r1, r3
   80ed8:	eb10 000c 	adds.w	r0, r0, ip
   80edc:	f1c3 0320 	rsb	r3, r3, #32
   80ee0:	fa01 f103 	lsl.w	r1, r1, r3
   80ee4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80ee8:	d502      	bpl.n	80ef0 <__addsf3+0x78>
   80eea:	4249      	negs	r1, r1
   80eec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   80ef0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   80ef4:	d313      	bcc.n	80f1e <__addsf3+0xa6>
   80ef6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   80efa:	d306      	bcc.n	80f0a <__addsf3+0x92>
   80efc:	0840      	lsrs	r0, r0, #1
   80efe:	ea4f 0131 	mov.w	r1, r1, rrx
   80f02:	f102 0201 	add.w	r2, r2, #1
   80f06:	2afe      	cmp	r2, #254	; 0xfe
   80f08:	d251      	bcs.n	80fae <__addsf3+0x136>
   80f0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   80f0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   80f12:	bf08      	it	eq
   80f14:	f020 0001 	biceq.w	r0, r0, #1
   80f18:	ea40 0003 	orr.w	r0, r0, r3
   80f1c:	4770      	bx	lr
   80f1e:	0049      	lsls	r1, r1, #1
   80f20:	eb40 0000 	adc.w	r0, r0, r0
   80f24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   80f28:	f1a2 0201 	sub.w	r2, r2, #1
   80f2c:	d1ed      	bne.n	80f0a <__addsf3+0x92>
   80f2e:	fab0 fc80 	clz	ip, r0
   80f32:	f1ac 0c08 	sub.w	ip, ip, #8
   80f36:	ebb2 020c 	subs.w	r2, r2, ip
   80f3a:	fa00 f00c 	lsl.w	r0, r0, ip
   80f3e:	bfaa      	itet	ge
   80f40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   80f44:	4252      	neglt	r2, r2
   80f46:	4318      	orrge	r0, r3
   80f48:	bfbc      	itt	lt
   80f4a:	40d0      	lsrlt	r0, r2
   80f4c:	4318      	orrlt	r0, r3
   80f4e:	4770      	bx	lr
   80f50:	f092 0f00 	teq	r2, #0
   80f54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   80f58:	bf06      	itte	eq
   80f5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   80f5e:	3201      	addeq	r2, #1
   80f60:	3b01      	subne	r3, #1
   80f62:	e7b5      	b.n	80ed0 <__addsf3+0x58>
   80f64:	ea4f 0341 	mov.w	r3, r1, lsl #1
   80f68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   80f6c:	bf18      	it	ne
   80f6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   80f72:	d021      	beq.n	80fb8 <__addsf3+0x140>
   80f74:	ea92 0f03 	teq	r2, r3
   80f78:	d004      	beq.n	80f84 <__addsf3+0x10c>
   80f7a:	f092 0f00 	teq	r2, #0
   80f7e:	bf08      	it	eq
   80f80:	4608      	moveq	r0, r1
   80f82:	4770      	bx	lr
   80f84:	ea90 0f01 	teq	r0, r1
   80f88:	bf1c      	itt	ne
   80f8a:	2000      	movne	r0, #0
   80f8c:	4770      	bxne	lr
   80f8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   80f92:	d104      	bne.n	80f9e <__addsf3+0x126>
   80f94:	0040      	lsls	r0, r0, #1
   80f96:	bf28      	it	cs
   80f98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   80f9c:	4770      	bx	lr
   80f9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   80fa2:	bf3c      	itt	cc
   80fa4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   80fa8:	4770      	bxcc	lr
   80faa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   80fae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   80fb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   80fb6:	4770      	bx	lr
   80fb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   80fbc:	bf16      	itet	ne
   80fbe:	4608      	movne	r0, r1
   80fc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   80fc4:	4601      	movne	r1, r0
   80fc6:	0242      	lsls	r2, r0, #9
   80fc8:	bf06      	itte	eq
   80fca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   80fce:	ea90 0f01 	teqeq	r0, r1
   80fd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   80fd6:	4770      	bx	lr

00080fd8 <__aeabi_ui2f>:
   80fd8:	f04f 0300 	mov.w	r3, #0
   80fdc:	e004      	b.n	80fe8 <__aeabi_i2f+0x8>
   80fde:	bf00      	nop

00080fe0 <__aeabi_i2f>:
   80fe0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   80fe4:	bf48      	it	mi
   80fe6:	4240      	negmi	r0, r0
   80fe8:	ea5f 0c00 	movs.w	ip, r0
   80fec:	bf08      	it	eq
   80fee:	4770      	bxeq	lr
   80ff0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   80ff4:	4601      	mov	r1, r0
   80ff6:	f04f 0000 	mov.w	r0, #0
   80ffa:	e01c      	b.n	81036 <__aeabi_l2f+0x2a>

00080ffc <__aeabi_ul2f>:
   80ffc:	ea50 0201 	orrs.w	r2, r0, r1
   81000:	bf08      	it	eq
   81002:	4770      	bxeq	lr
   81004:	f04f 0300 	mov.w	r3, #0
   81008:	e00a      	b.n	81020 <__aeabi_l2f+0x14>
   8100a:	bf00      	nop

0008100c <__aeabi_l2f>:
   8100c:	ea50 0201 	orrs.w	r2, r0, r1
   81010:	bf08      	it	eq
   81012:	4770      	bxeq	lr
   81014:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   81018:	d502      	bpl.n	81020 <__aeabi_l2f+0x14>
   8101a:	4240      	negs	r0, r0
   8101c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81020:	ea5f 0c01 	movs.w	ip, r1
   81024:	bf02      	ittt	eq
   81026:	4684      	moveq	ip, r0
   81028:	4601      	moveq	r1, r0
   8102a:	2000      	moveq	r0, #0
   8102c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   81030:	bf08      	it	eq
   81032:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   81036:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8103a:	fabc f28c 	clz	r2, ip
   8103e:	3a08      	subs	r2, #8
   81040:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   81044:	db10      	blt.n	81068 <__aeabi_l2f+0x5c>
   81046:	fa01 fc02 	lsl.w	ip, r1, r2
   8104a:	4463      	add	r3, ip
   8104c:	fa00 fc02 	lsl.w	ip, r0, r2
   81050:	f1c2 0220 	rsb	r2, r2, #32
   81054:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81058:	fa20 f202 	lsr.w	r2, r0, r2
   8105c:	eb43 0002 	adc.w	r0, r3, r2
   81060:	bf08      	it	eq
   81062:	f020 0001 	biceq.w	r0, r0, #1
   81066:	4770      	bx	lr
   81068:	f102 0220 	add.w	r2, r2, #32
   8106c:	fa01 fc02 	lsl.w	ip, r1, r2
   81070:	f1c2 0220 	rsb	r2, r2, #32
   81074:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   81078:	fa21 f202 	lsr.w	r2, r1, r2
   8107c:	eb43 0002 	adc.w	r0, r3, r2
   81080:	bf08      	it	eq
   81082:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   81086:	4770      	bx	lr

00081088 <__aeabi_fmul>:
   81088:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8108c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   81090:	bf1e      	ittt	ne
   81092:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   81096:	ea92 0f0c 	teqne	r2, ip
   8109a:	ea93 0f0c 	teqne	r3, ip
   8109e:	d06f      	beq.n	81180 <__aeabi_fmul+0xf8>
   810a0:	441a      	add	r2, r3
   810a2:	ea80 0c01 	eor.w	ip, r0, r1
   810a6:	0240      	lsls	r0, r0, #9
   810a8:	bf18      	it	ne
   810aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   810ae:	d01e      	beq.n	810ee <__aeabi_fmul+0x66>
   810b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   810b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   810b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   810bc:	fba0 3101 	umull	r3, r1, r0, r1
   810c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   810c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   810c8:	bf3e      	ittt	cc
   810ca:	0049      	lslcc	r1, r1, #1
   810cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   810d0:	005b      	lslcc	r3, r3, #1
   810d2:	ea40 0001 	orr.w	r0, r0, r1
   810d6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   810da:	2afd      	cmp	r2, #253	; 0xfd
   810dc:	d81d      	bhi.n	8111a <__aeabi_fmul+0x92>
   810de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   810e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   810e6:	bf08      	it	eq
   810e8:	f020 0001 	biceq.w	r0, r0, #1
   810ec:	4770      	bx	lr
   810ee:	f090 0f00 	teq	r0, #0
   810f2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   810f6:	bf08      	it	eq
   810f8:	0249      	lsleq	r1, r1, #9
   810fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   810fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   81102:	3a7f      	subs	r2, #127	; 0x7f
   81104:	bfc2      	ittt	gt
   81106:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8110a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8110e:	4770      	bxgt	lr
   81110:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   81114:	f04f 0300 	mov.w	r3, #0
   81118:	3a01      	subs	r2, #1
   8111a:	dc5d      	bgt.n	811d8 <__aeabi_fmul+0x150>
   8111c:	f112 0f19 	cmn.w	r2, #25
   81120:	bfdc      	itt	le
   81122:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   81126:	4770      	bxle	lr
   81128:	f1c2 0200 	rsb	r2, r2, #0
   8112c:	0041      	lsls	r1, r0, #1
   8112e:	fa21 f102 	lsr.w	r1, r1, r2
   81132:	f1c2 0220 	rsb	r2, r2, #32
   81136:	fa00 fc02 	lsl.w	ip, r0, r2
   8113a:	ea5f 0031 	movs.w	r0, r1, rrx
   8113e:	f140 0000 	adc.w	r0, r0, #0
   81142:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   81146:	bf08      	it	eq
   81148:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8114c:	4770      	bx	lr
   8114e:	f092 0f00 	teq	r2, #0
   81152:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   81156:	bf02      	ittt	eq
   81158:	0040      	lsleq	r0, r0, #1
   8115a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8115e:	3a01      	subeq	r2, #1
   81160:	d0f9      	beq.n	81156 <__aeabi_fmul+0xce>
   81162:	ea40 000c 	orr.w	r0, r0, ip
   81166:	f093 0f00 	teq	r3, #0
   8116a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8116e:	bf02      	ittt	eq
   81170:	0049      	lsleq	r1, r1, #1
   81172:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   81176:	3b01      	subeq	r3, #1
   81178:	d0f9      	beq.n	8116e <__aeabi_fmul+0xe6>
   8117a:	ea41 010c 	orr.w	r1, r1, ip
   8117e:	e78f      	b.n	810a0 <__aeabi_fmul+0x18>
   81180:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   81184:	ea92 0f0c 	teq	r2, ip
   81188:	bf18      	it	ne
   8118a:	ea93 0f0c 	teqne	r3, ip
   8118e:	d00a      	beq.n	811a6 <__aeabi_fmul+0x11e>
   81190:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   81194:	bf18      	it	ne
   81196:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8119a:	d1d8      	bne.n	8114e <__aeabi_fmul+0xc6>
   8119c:	ea80 0001 	eor.w	r0, r0, r1
   811a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   811a4:	4770      	bx	lr
   811a6:	f090 0f00 	teq	r0, #0
   811aa:	bf17      	itett	ne
   811ac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   811b0:	4608      	moveq	r0, r1
   811b2:	f091 0f00 	teqne	r1, #0
   811b6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   811ba:	d014      	beq.n	811e6 <__aeabi_fmul+0x15e>
   811bc:	ea92 0f0c 	teq	r2, ip
   811c0:	d101      	bne.n	811c6 <__aeabi_fmul+0x13e>
   811c2:	0242      	lsls	r2, r0, #9
   811c4:	d10f      	bne.n	811e6 <__aeabi_fmul+0x15e>
   811c6:	ea93 0f0c 	teq	r3, ip
   811ca:	d103      	bne.n	811d4 <__aeabi_fmul+0x14c>
   811cc:	024b      	lsls	r3, r1, #9
   811ce:	bf18      	it	ne
   811d0:	4608      	movne	r0, r1
   811d2:	d108      	bne.n	811e6 <__aeabi_fmul+0x15e>
   811d4:	ea80 0001 	eor.w	r0, r0, r1
   811d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   811dc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   811e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   811e4:	4770      	bx	lr
   811e6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   811ea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   811ee:	4770      	bx	lr

000811f0 <__aeabi_fdiv>:
   811f0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   811f4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   811f8:	bf1e      	ittt	ne
   811fa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   811fe:	ea92 0f0c 	teqne	r2, ip
   81202:	ea93 0f0c 	teqne	r3, ip
   81206:	d069      	beq.n	812dc <__aeabi_fdiv+0xec>
   81208:	eba2 0203 	sub.w	r2, r2, r3
   8120c:	ea80 0c01 	eor.w	ip, r0, r1
   81210:	0249      	lsls	r1, r1, #9
   81212:	ea4f 2040 	mov.w	r0, r0, lsl #9
   81216:	d037      	beq.n	81288 <__aeabi_fdiv+0x98>
   81218:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8121c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   81220:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   81224:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   81228:	428b      	cmp	r3, r1
   8122a:	bf38      	it	cc
   8122c:	005b      	lslcc	r3, r3, #1
   8122e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   81232:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   81236:	428b      	cmp	r3, r1
   81238:	bf24      	itt	cs
   8123a:	1a5b      	subcs	r3, r3, r1
   8123c:	ea40 000c 	orrcs.w	r0, r0, ip
   81240:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   81244:	bf24      	itt	cs
   81246:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8124a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8124e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   81252:	bf24      	itt	cs
   81254:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   81258:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8125c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   81260:	bf24      	itt	cs
   81262:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   81266:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8126a:	011b      	lsls	r3, r3, #4
   8126c:	bf18      	it	ne
   8126e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   81272:	d1e0      	bne.n	81236 <__aeabi_fdiv+0x46>
   81274:	2afd      	cmp	r2, #253	; 0xfd
   81276:	f63f af50 	bhi.w	8111a <__aeabi_fmul+0x92>
   8127a:	428b      	cmp	r3, r1
   8127c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   81280:	bf08      	it	eq
   81282:	f020 0001 	biceq.w	r0, r0, #1
   81286:	4770      	bx	lr
   81288:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8128c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   81290:	327f      	adds	r2, #127	; 0x7f
   81292:	bfc2      	ittt	gt
   81294:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   81298:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8129c:	4770      	bxgt	lr
   8129e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   812a2:	f04f 0300 	mov.w	r3, #0
   812a6:	3a01      	subs	r2, #1
   812a8:	e737      	b.n	8111a <__aeabi_fmul+0x92>
   812aa:	f092 0f00 	teq	r2, #0
   812ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   812b2:	bf02      	ittt	eq
   812b4:	0040      	lsleq	r0, r0, #1
   812b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   812ba:	3a01      	subeq	r2, #1
   812bc:	d0f9      	beq.n	812b2 <__aeabi_fdiv+0xc2>
   812be:	ea40 000c 	orr.w	r0, r0, ip
   812c2:	f093 0f00 	teq	r3, #0
   812c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   812ca:	bf02      	ittt	eq
   812cc:	0049      	lsleq	r1, r1, #1
   812ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   812d2:	3b01      	subeq	r3, #1
   812d4:	d0f9      	beq.n	812ca <__aeabi_fdiv+0xda>
   812d6:	ea41 010c 	orr.w	r1, r1, ip
   812da:	e795      	b.n	81208 <__aeabi_fdiv+0x18>
   812dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   812e0:	ea92 0f0c 	teq	r2, ip
   812e4:	d108      	bne.n	812f8 <__aeabi_fdiv+0x108>
   812e6:	0242      	lsls	r2, r0, #9
   812e8:	f47f af7d 	bne.w	811e6 <__aeabi_fmul+0x15e>
   812ec:	ea93 0f0c 	teq	r3, ip
   812f0:	f47f af70 	bne.w	811d4 <__aeabi_fmul+0x14c>
   812f4:	4608      	mov	r0, r1
   812f6:	e776      	b.n	811e6 <__aeabi_fmul+0x15e>
   812f8:	ea93 0f0c 	teq	r3, ip
   812fc:	d104      	bne.n	81308 <__aeabi_fdiv+0x118>
   812fe:	024b      	lsls	r3, r1, #9
   81300:	f43f af4c 	beq.w	8119c <__aeabi_fmul+0x114>
   81304:	4608      	mov	r0, r1
   81306:	e76e      	b.n	811e6 <__aeabi_fmul+0x15e>
   81308:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8130c:	bf18      	it	ne
   8130e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   81312:	d1ca      	bne.n	812aa <__aeabi_fdiv+0xba>
   81314:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   81318:	f47f af5c 	bne.w	811d4 <__aeabi_fmul+0x14c>
   8131c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   81320:	f47f af3c 	bne.w	8119c <__aeabi_fmul+0x114>
   81324:	e75f      	b.n	811e6 <__aeabi_fmul+0x15e>
   81326:	bf00      	nop

00081328 <__aeabi_f2uiz>:
   81328:	0042      	lsls	r2, r0, #1
   8132a:	d20e      	bcs.n	8134a <__aeabi_f2uiz+0x22>
   8132c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   81330:	d30b      	bcc.n	8134a <__aeabi_f2uiz+0x22>
   81332:	f04f 039e 	mov.w	r3, #158	; 0x9e
   81336:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8133a:	d409      	bmi.n	81350 <__aeabi_f2uiz+0x28>
   8133c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   81340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81344:	fa23 f002 	lsr.w	r0, r3, r2
   81348:	4770      	bx	lr
   8134a:	f04f 0000 	mov.w	r0, #0
   8134e:	4770      	bx	lr
   81350:	f112 0f61 	cmn.w	r2, #97	; 0x61
   81354:	d101      	bne.n	8135a <__aeabi_f2uiz+0x32>
   81356:	0242      	lsls	r2, r0, #9
   81358:	d102      	bne.n	81360 <__aeabi_f2uiz+0x38>
   8135a:	f04f 30ff 	mov.w	r0, #4294967295
   8135e:	4770      	bx	lr
   81360:	f04f 0000 	mov.w	r0, #0
   81364:	4770      	bx	lr
   81366:	bf00      	nop

00081368 <__libc_init_array>:
   81368:	b570      	push	{r4, r5, r6, lr}
   8136a:	4e0f      	ldr	r6, [pc, #60]	; (813a8 <__libc_init_array+0x40>)
   8136c:	4d0f      	ldr	r5, [pc, #60]	; (813ac <__libc_init_array+0x44>)
   8136e:	1b76      	subs	r6, r6, r5
   81370:	10b6      	asrs	r6, r6, #2
   81372:	bf18      	it	ne
   81374:	2400      	movne	r4, #0
   81376:	d005      	beq.n	81384 <__libc_init_array+0x1c>
   81378:	3401      	adds	r4, #1
   8137a:	f855 3b04 	ldr.w	r3, [r5], #4
   8137e:	4798      	blx	r3
   81380:	42a6      	cmp	r6, r4
   81382:	d1f9      	bne.n	81378 <__libc_init_array+0x10>
   81384:	4e0a      	ldr	r6, [pc, #40]	; (813b0 <__libc_init_array+0x48>)
   81386:	4d0b      	ldr	r5, [pc, #44]	; (813b4 <__libc_init_array+0x4c>)
   81388:	f003 f810 	bl	843ac <_init>
   8138c:	1b76      	subs	r6, r6, r5
   8138e:	10b6      	asrs	r6, r6, #2
   81390:	bf18      	it	ne
   81392:	2400      	movne	r4, #0
   81394:	d006      	beq.n	813a4 <__libc_init_array+0x3c>
   81396:	3401      	adds	r4, #1
   81398:	f855 3b04 	ldr.w	r3, [r5], #4
   8139c:	4798      	blx	r3
   8139e:	42a6      	cmp	r6, r4
   813a0:	d1f9      	bne.n	81396 <__libc_init_array+0x2e>
   813a2:	bd70      	pop	{r4, r5, r6, pc}
   813a4:	bd70      	pop	{r4, r5, r6, pc}
   813a6:	bf00      	nop
   813a8:	000843b8 	.word	0x000843b8
   813ac:	000843b8 	.word	0x000843b8
   813b0:	000843c0 	.word	0x000843c0
   813b4:	000843b8 	.word	0x000843b8

000813b8 <iprintf>:
   813b8:	b40f      	push	{r0, r1, r2, r3}
   813ba:	b510      	push	{r4, lr}
   813bc:	4b07      	ldr	r3, [pc, #28]	; (813dc <iprintf+0x24>)
   813be:	b082      	sub	sp, #8
   813c0:	ac04      	add	r4, sp, #16
   813c2:	f854 2b04 	ldr.w	r2, [r4], #4
   813c6:	6818      	ldr	r0, [r3, #0]
   813c8:	4623      	mov	r3, r4
   813ca:	6881      	ldr	r1, [r0, #8]
   813cc:	9401      	str	r4, [sp, #4]
   813ce:	f000 f993 	bl	816f8 <_vfiprintf_r>
   813d2:	b002      	add	sp, #8
   813d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   813d8:	b004      	add	sp, #16
   813da:	4770      	bx	lr
   813dc:	20070134 	.word	0x20070134

000813e0 <memset>:
   813e0:	b470      	push	{r4, r5, r6}
   813e2:	0786      	lsls	r6, r0, #30
   813e4:	d046      	beq.n	81474 <memset+0x94>
   813e6:	1e54      	subs	r4, r2, #1
   813e8:	2a00      	cmp	r2, #0
   813ea:	d041      	beq.n	81470 <memset+0x90>
   813ec:	b2ca      	uxtb	r2, r1
   813ee:	4603      	mov	r3, r0
   813f0:	e002      	b.n	813f8 <memset+0x18>
   813f2:	f114 34ff 	adds.w	r4, r4, #4294967295
   813f6:	d33b      	bcc.n	81470 <memset+0x90>
   813f8:	f803 2b01 	strb.w	r2, [r3], #1
   813fc:	079d      	lsls	r5, r3, #30
   813fe:	d1f8      	bne.n	813f2 <memset+0x12>
   81400:	2c03      	cmp	r4, #3
   81402:	d92e      	bls.n	81462 <memset+0x82>
   81404:	b2cd      	uxtb	r5, r1
   81406:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8140a:	2c0f      	cmp	r4, #15
   8140c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81410:	d919      	bls.n	81446 <memset+0x66>
   81412:	4626      	mov	r6, r4
   81414:	f103 0210 	add.w	r2, r3, #16
   81418:	3e10      	subs	r6, #16
   8141a:	2e0f      	cmp	r6, #15
   8141c:	f842 5c10 	str.w	r5, [r2, #-16]
   81420:	f842 5c0c 	str.w	r5, [r2, #-12]
   81424:	f842 5c08 	str.w	r5, [r2, #-8]
   81428:	f842 5c04 	str.w	r5, [r2, #-4]
   8142c:	f102 0210 	add.w	r2, r2, #16
   81430:	d8f2      	bhi.n	81418 <memset+0x38>
   81432:	f1a4 0210 	sub.w	r2, r4, #16
   81436:	f022 020f 	bic.w	r2, r2, #15
   8143a:	f004 040f 	and.w	r4, r4, #15
   8143e:	3210      	adds	r2, #16
   81440:	2c03      	cmp	r4, #3
   81442:	4413      	add	r3, r2
   81444:	d90d      	bls.n	81462 <memset+0x82>
   81446:	461e      	mov	r6, r3
   81448:	4622      	mov	r2, r4
   8144a:	3a04      	subs	r2, #4
   8144c:	2a03      	cmp	r2, #3
   8144e:	f846 5b04 	str.w	r5, [r6], #4
   81452:	d8fa      	bhi.n	8144a <memset+0x6a>
   81454:	1f22      	subs	r2, r4, #4
   81456:	f022 0203 	bic.w	r2, r2, #3
   8145a:	3204      	adds	r2, #4
   8145c:	4413      	add	r3, r2
   8145e:	f004 0403 	and.w	r4, r4, #3
   81462:	b12c      	cbz	r4, 81470 <memset+0x90>
   81464:	b2c9      	uxtb	r1, r1
   81466:	441c      	add	r4, r3
   81468:	f803 1b01 	strb.w	r1, [r3], #1
   8146c:	429c      	cmp	r4, r3
   8146e:	d1fb      	bne.n	81468 <memset+0x88>
   81470:	bc70      	pop	{r4, r5, r6}
   81472:	4770      	bx	lr
   81474:	4614      	mov	r4, r2
   81476:	4603      	mov	r3, r0
   81478:	e7c2      	b.n	81400 <memset+0x20>
   8147a:	bf00      	nop

0008147c <setbuf>:
   8147c:	2900      	cmp	r1, #0
   8147e:	bf0c      	ite	eq
   81480:	2202      	moveq	r2, #2
   81482:	2200      	movne	r2, #0
   81484:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81488:	f000 b800 	b.w	8148c <setvbuf>

0008148c <setvbuf>:
   8148c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81490:	4d61      	ldr	r5, [pc, #388]	; (81618 <setvbuf+0x18c>)
   81492:	b083      	sub	sp, #12
   81494:	682d      	ldr	r5, [r5, #0]
   81496:	4604      	mov	r4, r0
   81498:	460f      	mov	r7, r1
   8149a:	4690      	mov	r8, r2
   8149c:	461e      	mov	r6, r3
   8149e:	b115      	cbz	r5, 814a6 <setvbuf+0x1a>
   814a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   814a2:	2b00      	cmp	r3, #0
   814a4:	d064      	beq.n	81570 <setvbuf+0xe4>
   814a6:	f1b8 0f02 	cmp.w	r8, #2
   814aa:	d006      	beq.n	814ba <setvbuf+0x2e>
   814ac:	f1b8 0f01 	cmp.w	r8, #1
   814b0:	f200 809f 	bhi.w	815f2 <setvbuf+0x166>
   814b4:	2e00      	cmp	r6, #0
   814b6:	f2c0 809c 	blt.w	815f2 <setvbuf+0x166>
   814ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
   814bc:	07d8      	lsls	r0, r3, #31
   814be:	d534      	bpl.n	8152a <setvbuf+0x9e>
   814c0:	4621      	mov	r1, r4
   814c2:	4628      	mov	r0, r5
   814c4:	f001 f8b0 	bl	82628 <_fflush_r>
   814c8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   814ca:	b141      	cbz	r1, 814de <setvbuf+0x52>
   814cc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   814d0:	4299      	cmp	r1, r3
   814d2:	d002      	beq.n	814da <setvbuf+0x4e>
   814d4:	4628      	mov	r0, r5
   814d6:	f001 fa25 	bl	82924 <_free_r>
   814da:	2300      	movs	r3, #0
   814dc:	6323      	str	r3, [r4, #48]	; 0x30
   814de:	2200      	movs	r2, #0
   814e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   814e4:	61a2      	str	r2, [r4, #24]
   814e6:	6062      	str	r2, [r4, #4]
   814e8:	061a      	lsls	r2, r3, #24
   814ea:	d43a      	bmi.n	81562 <setvbuf+0xd6>
   814ec:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   814f0:	f023 0303 	bic.w	r3, r3, #3
   814f4:	f1b8 0f02 	cmp.w	r8, #2
   814f8:	81a3      	strh	r3, [r4, #12]
   814fa:	d01d      	beq.n	81538 <setvbuf+0xac>
   814fc:	ab01      	add	r3, sp, #4
   814fe:	466a      	mov	r2, sp
   81500:	4621      	mov	r1, r4
   81502:	4628      	mov	r0, r5
   81504:	f001 fcac 	bl	82e60 <__swhatbuf_r>
   81508:	89a3      	ldrh	r3, [r4, #12]
   8150a:	4318      	orrs	r0, r3
   8150c:	81a0      	strh	r0, [r4, #12]
   8150e:	2e00      	cmp	r6, #0
   81510:	d132      	bne.n	81578 <setvbuf+0xec>
   81512:	9e00      	ldr	r6, [sp, #0]
   81514:	4630      	mov	r0, r6
   81516:	f001 fd1b 	bl	82f50 <malloc>
   8151a:	4607      	mov	r7, r0
   8151c:	2800      	cmp	r0, #0
   8151e:	d06b      	beq.n	815f8 <setvbuf+0x16c>
   81520:	89a3      	ldrh	r3, [r4, #12]
   81522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81526:	81a3      	strh	r3, [r4, #12]
   81528:	e028      	b.n	8157c <setvbuf+0xf0>
   8152a:	89a3      	ldrh	r3, [r4, #12]
   8152c:	0599      	lsls	r1, r3, #22
   8152e:	d4c7      	bmi.n	814c0 <setvbuf+0x34>
   81530:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81532:	f001 fc91 	bl	82e58 <__retarget_lock_acquire_recursive>
   81536:	e7c3      	b.n	814c0 <setvbuf+0x34>
   81538:	2500      	movs	r5, #0
   8153a:	2600      	movs	r6, #0
   8153c:	2001      	movs	r0, #1
   8153e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81540:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81544:	f043 0302 	orr.w	r3, r3, #2
   81548:	60a6      	str	r6, [r4, #8]
   8154a:	07ce      	lsls	r6, r1, #31
   8154c:	81a3      	strh	r3, [r4, #12]
   8154e:	6160      	str	r0, [r4, #20]
   81550:	6022      	str	r2, [r4, #0]
   81552:	6122      	str	r2, [r4, #16]
   81554:	d401      	bmi.n	8155a <setvbuf+0xce>
   81556:	0598      	lsls	r0, r3, #22
   81558:	d53e      	bpl.n	815d8 <setvbuf+0x14c>
   8155a:	4628      	mov	r0, r5
   8155c:	b003      	add	sp, #12
   8155e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81562:	6921      	ldr	r1, [r4, #16]
   81564:	4628      	mov	r0, r5
   81566:	f001 f9dd 	bl	82924 <_free_r>
   8156a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8156e:	e7bd      	b.n	814ec <setvbuf+0x60>
   81570:	4628      	mov	r0, r5
   81572:	f001 f8b1 	bl	826d8 <__sinit>
   81576:	e796      	b.n	814a6 <setvbuf+0x1a>
   81578:	2f00      	cmp	r7, #0
   8157a:	d0cb      	beq.n	81514 <setvbuf+0x88>
   8157c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8157e:	2b00      	cmp	r3, #0
   81580:	d033      	beq.n	815ea <setvbuf+0x15e>
   81582:	9b00      	ldr	r3, [sp, #0]
   81584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81588:	429e      	cmp	r6, r3
   8158a:	bf1c      	itt	ne
   8158c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81590:	81a2      	strhne	r2, [r4, #12]
   81592:	f1b8 0f01 	cmp.w	r8, #1
   81596:	bf04      	itt	eq
   81598:	f042 0201 	orreq.w	r2, r2, #1
   8159c:	81a2      	strheq	r2, [r4, #12]
   8159e:	b292      	uxth	r2, r2
   815a0:	f012 0308 	ands.w	r3, r2, #8
   815a4:	6027      	str	r7, [r4, #0]
   815a6:	6127      	str	r7, [r4, #16]
   815a8:	6166      	str	r6, [r4, #20]
   815aa:	d00e      	beq.n	815ca <setvbuf+0x13e>
   815ac:	07d1      	lsls	r1, r2, #31
   815ae:	d51a      	bpl.n	815e6 <setvbuf+0x15a>
   815b0:	2300      	movs	r3, #0
   815b2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   815b4:	4276      	negs	r6, r6
   815b6:	f015 0501 	ands.w	r5, r5, #1
   815ba:	61a6      	str	r6, [r4, #24]
   815bc:	60a3      	str	r3, [r4, #8]
   815be:	d009      	beq.n	815d4 <setvbuf+0x148>
   815c0:	2500      	movs	r5, #0
   815c2:	4628      	mov	r0, r5
   815c4:	b003      	add	sp, #12
   815c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   815ca:	60a3      	str	r3, [r4, #8]
   815cc:	6e65      	ldr	r5, [r4, #100]	; 0x64
   815ce:	f015 0501 	ands.w	r5, r5, #1
   815d2:	d1f5      	bne.n	815c0 <setvbuf+0x134>
   815d4:	0593      	lsls	r3, r2, #22
   815d6:	d4c0      	bmi.n	8155a <setvbuf+0xce>
   815d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   815da:	f001 fc3f 	bl	82e5c <__retarget_lock_release_recursive>
   815de:	4628      	mov	r0, r5
   815e0:	b003      	add	sp, #12
   815e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   815e6:	60a6      	str	r6, [r4, #8]
   815e8:	e7f0      	b.n	815cc <setvbuf+0x140>
   815ea:	4628      	mov	r0, r5
   815ec:	f001 f874 	bl	826d8 <__sinit>
   815f0:	e7c7      	b.n	81582 <setvbuf+0xf6>
   815f2:	f04f 35ff 	mov.w	r5, #4294967295
   815f6:	e7b0      	b.n	8155a <setvbuf+0xce>
   815f8:	f8dd 9000 	ldr.w	r9, [sp]
   815fc:	45b1      	cmp	r9, r6
   815fe:	d004      	beq.n	8160a <setvbuf+0x17e>
   81600:	4648      	mov	r0, r9
   81602:	f001 fca5 	bl	82f50 <malloc>
   81606:	4607      	mov	r7, r0
   81608:	b920      	cbnz	r0, 81614 <setvbuf+0x188>
   8160a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8160e:	f04f 35ff 	mov.w	r5, #4294967295
   81612:	e792      	b.n	8153a <setvbuf+0xae>
   81614:	464e      	mov	r6, r9
   81616:	e783      	b.n	81520 <setvbuf+0x94>
   81618:	20070134 	.word	0x20070134

0008161c <strlen>:
   8161c:	f020 0103 	bic.w	r1, r0, #3
   81620:	f010 0003 	ands.w	r0, r0, #3
   81624:	f1c0 0000 	rsb	r0, r0, #0
   81628:	f851 3b04 	ldr.w	r3, [r1], #4
   8162c:	f100 0c04 	add.w	ip, r0, #4
   81630:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81634:	f06f 0200 	mvn.w	r2, #0
   81638:	bf1c      	itt	ne
   8163a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8163e:	4313      	orrne	r3, r2
   81640:	f04f 0c01 	mov.w	ip, #1
   81644:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81648:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8164c:	eba3 020c 	sub.w	r2, r3, ip
   81650:	ea22 0203 	bic.w	r2, r2, r3
   81654:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81658:	bf04      	itt	eq
   8165a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8165e:	3004      	addeq	r0, #4
   81660:	d0f4      	beq.n	8164c <strlen+0x30>
   81662:	f1c2 0100 	rsb	r1, r2, #0
   81666:	ea02 0201 	and.w	r2, r2, r1
   8166a:	fab2 f282 	clz	r2, r2
   8166e:	f1c2 021f 	rsb	r2, r2, #31
   81672:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   81676:	4770      	bx	lr

00081678 <__sprint_r.part.0>:
   81678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8167c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8167e:	4693      	mov	fp, r2
   81680:	049c      	lsls	r4, r3, #18
   81682:	d52f      	bpl.n	816e4 <__sprint_r.part.0+0x6c>
   81684:	6893      	ldr	r3, [r2, #8]
   81686:	6812      	ldr	r2, [r2, #0]
   81688:	b353      	cbz	r3, 816e0 <__sprint_r.part.0+0x68>
   8168a:	460e      	mov	r6, r1
   8168c:	4607      	mov	r7, r0
   8168e:	f102 0908 	add.w	r9, r2, #8
   81692:	e919 0420 	ldmdb	r9, {r5, sl}
   81696:	ea5f 089a 	movs.w	r8, sl, lsr #2
   8169a:	d017      	beq.n	816cc <__sprint_r.part.0+0x54>
   8169c:	2400      	movs	r4, #0
   8169e:	3d04      	subs	r5, #4
   816a0:	e001      	b.n	816a6 <__sprint_r.part.0+0x2e>
   816a2:	45a0      	cmp	r8, r4
   816a4:	d010      	beq.n	816c8 <__sprint_r.part.0+0x50>
   816a6:	4632      	mov	r2, r6
   816a8:	f855 1f04 	ldr.w	r1, [r5, #4]!
   816ac:	4638      	mov	r0, r7
   816ae:	f001 f8b5 	bl	8281c <_fputwc_r>
   816b2:	1c43      	adds	r3, r0, #1
   816b4:	f104 0401 	add.w	r4, r4, #1
   816b8:	d1f3      	bne.n	816a2 <__sprint_r.part.0+0x2a>
   816ba:	2300      	movs	r3, #0
   816bc:	f8cb 3008 	str.w	r3, [fp, #8]
   816c0:	f8cb 3004 	str.w	r3, [fp, #4]
   816c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816c8:	f8db 3008 	ldr.w	r3, [fp, #8]
   816cc:	f02a 0a03 	bic.w	sl, sl, #3
   816d0:	eba3 030a 	sub.w	r3, r3, sl
   816d4:	f8cb 3008 	str.w	r3, [fp, #8]
   816d8:	f109 0908 	add.w	r9, r9, #8
   816dc:	2b00      	cmp	r3, #0
   816de:	d1d8      	bne.n	81692 <__sprint_r.part.0+0x1a>
   816e0:	2000      	movs	r0, #0
   816e2:	e7ea      	b.n	816ba <__sprint_r.part.0+0x42>
   816e4:	f001 fa04 	bl	82af0 <__sfvwrite_r>
   816e8:	2300      	movs	r3, #0
   816ea:	f8cb 3008 	str.w	r3, [fp, #8]
   816ee:	f8cb 3004 	str.w	r3, [fp, #4]
   816f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816f6:	bf00      	nop

000816f8 <_vfiprintf_r>:
   816f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   816fc:	b0ad      	sub	sp, #180	; 0xb4
   816fe:	461d      	mov	r5, r3
   81700:	468b      	mov	fp, r1
   81702:	4690      	mov	r8, r2
   81704:	9307      	str	r3, [sp, #28]
   81706:	9006      	str	r0, [sp, #24]
   81708:	b118      	cbz	r0, 81712 <_vfiprintf_r+0x1a>
   8170a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8170c:	2b00      	cmp	r3, #0
   8170e:	f000 80f3 	beq.w	818f8 <_vfiprintf_r+0x200>
   81712:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81716:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8171a:	07df      	lsls	r7, r3, #31
   8171c:	b281      	uxth	r1, r0
   8171e:	d402      	bmi.n	81726 <_vfiprintf_r+0x2e>
   81720:	058e      	lsls	r6, r1, #22
   81722:	f140 80fc 	bpl.w	8191e <_vfiprintf_r+0x226>
   81726:	048c      	lsls	r4, r1, #18
   81728:	d40a      	bmi.n	81740 <_vfiprintf_r+0x48>
   8172a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8172e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81736:	f8ab 100c 	strh.w	r1, [fp, #12]
   8173a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8173e:	b289      	uxth	r1, r1
   81740:	0708      	lsls	r0, r1, #28
   81742:	f140 80b3 	bpl.w	818ac <_vfiprintf_r+0x1b4>
   81746:	f8db 3010 	ldr.w	r3, [fp, #16]
   8174a:	2b00      	cmp	r3, #0
   8174c:	f000 80ae 	beq.w	818ac <_vfiprintf_r+0x1b4>
   81750:	f001 031a 	and.w	r3, r1, #26
   81754:	2b0a      	cmp	r3, #10
   81756:	f000 80b5 	beq.w	818c4 <_vfiprintf_r+0x1cc>
   8175a:	2300      	movs	r3, #0
   8175c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81760:	46d1      	mov	r9, sl
   81762:	930b      	str	r3, [sp, #44]	; 0x2c
   81764:	9303      	str	r3, [sp, #12]
   81766:	9311      	str	r3, [sp, #68]	; 0x44
   81768:	9310      	str	r3, [sp, #64]	; 0x40
   8176a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8176e:	f8cd b010 	str.w	fp, [sp, #16]
   81772:	f898 3000 	ldrb.w	r3, [r8]
   81776:	4644      	mov	r4, r8
   81778:	b1fb      	cbz	r3, 817ba <_vfiprintf_r+0xc2>
   8177a:	2b25      	cmp	r3, #37	; 0x25
   8177c:	d102      	bne.n	81784 <_vfiprintf_r+0x8c>
   8177e:	e01c      	b.n	817ba <_vfiprintf_r+0xc2>
   81780:	2b25      	cmp	r3, #37	; 0x25
   81782:	d003      	beq.n	8178c <_vfiprintf_r+0x94>
   81784:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81788:	2b00      	cmp	r3, #0
   8178a:	d1f9      	bne.n	81780 <_vfiprintf_r+0x88>
   8178c:	eba4 0508 	sub.w	r5, r4, r8
   81790:	b19d      	cbz	r5, 817ba <_vfiprintf_r+0xc2>
   81792:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81794:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81796:	3301      	adds	r3, #1
   81798:	442a      	add	r2, r5
   8179a:	2b07      	cmp	r3, #7
   8179c:	f8c9 8000 	str.w	r8, [r9]
   817a0:	f8c9 5004 	str.w	r5, [r9, #4]
   817a4:	9211      	str	r2, [sp, #68]	; 0x44
   817a6:	9310      	str	r3, [sp, #64]	; 0x40
   817a8:	dd7a      	ble.n	818a0 <_vfiprintf_r+0x1a8>
   817aa:	2a00      	cmp	r2, #0
   817ac:	f040 84b5 	bne.w	8211a <_vfiprintf_r+0xa22>
   817b0:	46d1      	mov	r9, sl
   817b2:	9b03      	ldr	r3, [sp, #12]
   817b4:	9210      	str	r2, [sp, #64]	; 0x40
   817b6:	442b      	add	r3, r5
   817b8:	9303      	str	r3, [sp, #12]
   817ba:	7823      	ldrb	r3, [r4, #0]
   817bc:	2b00      	cmp	r3, #0
   817be:	f000 83e5 	beq.w	81f8c <_vfiprintf_r+0x894>
   817c2:	2000      	movs	r0, #0
   817c4:	f04f 0300 	mov.w	r3, #0
   817c8:	f104 0801 	add.w	r8, r4, #1
   817cc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   817d0:	7862      	ldrb	r2, [r4, #1]
   817d2:	4606      	mov	r6, r0
   817d4:	4605      	mov	r5, r0
   817d6:	4603      	mov	r3, r0
   817d8:	f04f 34ff 	mov.w	r4, #4294967295
   817dc:	f108 0801 	add.w	r8, r8, #1
   817e0:	f1a2 0120 	sub.w	r1, r2, #32
   817e4:	2958      	cmp	r1, #88	; 0x58
   817e6:	f200 82d9 	bhi.w	81d9c <_vfiprintf_r+0x6a4>
   817ea:	e8df f011 	tbh	[pc, r1, lsl #1]
   817ee:	0228      	.short	0x0228
   817f0:	02d702d7 	.word	0x02d702d7
   817f4:	02d70230 	.word	0x02d70230
   817f8:	02d702d7 	.word	0x02d702d7
   817fc:	02d702d7 	.word	0x02d702d7
   81800:	00a002d7 	.word	0x00a002d7
   81804:	02d70288 	.word	0x02d70288
   81808:	02b800a8 	.word	0x02b800a8
   8180c:	01a602d7 	.word	0x01a602d7
   81810:	01ab01ab 	.word	0x01ab01ab
   81814:	01ab01ab 	.word	0x01ab01ab
   81818:	01ab01ab 	.word	0x01ab01ab
   8181c:	01ab01ab 	.word	0x01ab01ab
   81820:	02d701ab 	.word	0x02d701ab
   81824:	02d702d7 	.word	0x02d702d7
   81828:	02d702d7 	.word	0x02d702d7
   8182c:	02d702d7 	.word	0x02d702d7
   81830:	02d702d7 	.word	0x02d702d7
   81834:	01b902d7 	.word	0x01b902d7
   81838:	02d702d7 	.word	0x02d702d7
   8183c:	02d702d7 	.word	0x02d702d7
   81840:	02d702d7 	.word	0x02d702d7
   81844:	02d702d7 	.word	0x02d702d7
   81848:	02d702d7 	.word	0x02d702d7
   8184c:	02d7019e 	.word	0x02d7019e
   81850:	02d702d7 	.word	0x02d702d7
   81854:	02d702d7 	.word	0x02d702d7
   81858:	02d701a2 	.word	0x02d701a2
   8185c:	025a02d7 	.word	0x025a02d7
   81860:	02d702d7 	.word	0x02d702d7
   81864:	02d702d7 	.word	0x02d702d7
   81868:	02d702d7 	.word	0x02d702d7
   8186c:	02d702d7 	.word	0x02d702d7
   81870:	02d702d7 	.word	0x02d702d7
   81874:	02220261 	.word	0x02220261
   81878:	02d702d7 	.word	0x02d702d7
   8187c:	027602d7 	.word	0x027602d7
   81880:	02d70222 	.word	0x02d70222
   81884:	027b02d7 	.word	0x027b02d7
   81888:	01fc02d7 	.word	0x01fc02d7
   8188c:	02100189 	.word	0x02100189
   81890:	02d702d2 	.word	0x02d702d2
   81894:	02d70295 	.word	0x02d70295
   81898:	02d700ad 	.word	0x02d700ad
   8189c:	023502d7 	.word	0x023502d7
   818a0:	f109 0908 	add.w	r9, r9, #8
   818a4:	9b03      	ldr	r3, [sp, #12]
   818a6:	442b      	add	r3, r5
   818a8:	9303      	str	r3, [sp, #12]
   818aa:	e786      	b.n	817ba <_vfiprintf_r+0xc2>
   818ac:	4659      	mov	r1, fp
   818ae:	9806      	ldr	r0, [sp, #24]
   818b0:	f000 fdaa 	bl	82408 <__swsetup_r>
   818b4:	bb18      	cbnz	r0, 818fe <_vfiprintf_r+0x206>
   818b6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   818ba:	f001 031a 	and.w	r3, r1, #26
   818be:	2b0a      	cmp	r3, #10
   818c0:	f47f af4b 	bne.w	8175a <_vfiprintf_r+0x62>
   818c4:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   818c8:	2b00      	cmp	r3, #0
   818ca:	f6ff af46 	blt.w	8175a <_vfiprintf_r+0x62>
   818ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   818d2:	07db      	lsls	r3, r3, #31
   818d4:	d405      	bmi.n	818e2 <_vfiprintf_r+0x1ea>
   818d6:	058f      	lsls	r7, r1, #22
   818d8:	d403      	bmi.n	818e2 <_vfiprintf_r+0x1ea>
   818da:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   818de:	f001 fabd 	bl	82e5c <__retarget_lock_release_recursive>
   818e2:	462b      	mov	r3, r5
   818e4:	4642      	mov	r2, r8
   818e6:	4659      	mov	r1, fp
   818e8:	9806      	ldr	r0, [sp, #24]
   818ea:	f000 fd49 	bl	82380 <__sbprintf>
   818ee:	9003      	str	r0, [sp, #12]
   818f0:	9803      	ldr	r0, [sp, #12]
   818f2:	b02d      	add	sp, #180	; 0xb4
   818f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   818f8:	f000 feee 	bl	826d8 <__sinit>
   818fc:	e709      	b.n	81712 <_vfiprintf_r+0x1a>
   818fe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81902:	07d9      	lsls	r1, r3, #31
   81904:	d404      	bmi.n	81910 <_vfiprintf_r+0x218>
   81906:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8190a:	059a      	lsls	r2, r3, #22
   8190c:	f140 84ae 	bpl.w	8226c <_vfiprintf_r+0xb74>
   81910:	f04f 33ff 	mov.w	r3, #4294967295
   81914:	9303      	str	r3, [sp, #12]
   81916:	9803      	ldr	r0, [sp, #12]
   81918:	b02d      	add	sp, #180	; 0xb4
   8191a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8191e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81922:	f001 fa99 	bl	82e58 <__retarget_lock_acquire_recursive>
   81926:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8192a:	b281      	uxth	r1, r0
   8192c:	e6fb      	b.n	81726 <_vfiprintf_r+0x2e>
   8192e:	9907      	ldr	r1, [sp, #28]
   81930:	460a      	mov	r2, r1
   81932:	680d      	ldr	r5, [r1, #0]
   81934:	3204      	adds	r2, #4
   81936:	2d00      	cmp	r5, #0
   81938:	9207      	str	r2, [sp, #28]
   8193a:	da02      	bge.n	81942 <_vfiprintf_r+0x24a>
   8193c:	426d      	negs	r5, r5
   8193e:	f043 0304 	orr.w	r3, r3, #4
   81942:	f898 2000 	ldrb.w	r2, [r8]
   81946:	e749      	b.n	817dc <_vfiprintf_r+0xe4>
   81948:	9508      	str	r5, [sp, #32]
   8194a:	069e      	lsls	r6, r3, #26
   8194c:	f100 845a 	bmi.w	82204 <_vfiprintf_r+0xb0c>
   81950:	9907      	ldr	r1, [sp, #28]
   81952:	06dd      	lsls	r5, r3, #27
   81954:	460a      	mov	r2, r1
   81956:	f100 83ef 	bmi.w	82138 <_vfiprintf_r+0xa40>
   8195a:	0658      	lsls	r0, r3, #25
   8195c:	f140 83ec 	bpl.w	82138 <_vfiprintf_r+0xa40>
   81960:	2700      	movs	r7, #0
   81962:	2201      	movs	r2, #1
   81964:	880e      	ldrh	r6, [r1, #0]
   81966:	3104      	adds	r1, #4
   81968:	9107      	str	r1, [sp, #28]
   8196a:	f04f 0100 	mov.w	r1, #0
   8196e:	2500      	movs	r5, #0
   81970:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81974:	1c61      	adds	r1, r4, #1
   81976:	f000 8117 	beq.w	81ba8 <_vfiprintf_r+0x4b0>
   8197a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   8197e:	9102      	str	r1, [sp, #8]
   81980:	ea56 0107 	orrs.w	r1, r6, r7
   81984:	f040 8115 	bne.w	81bb2 <_vfiprintf_r+0x4ba>
   81988:	2c00      	cmp	r4, #0
   8198a:	f040 835b 	bne.w	82044 <_vfiprintf_r+0x94c>
   8198e:	2a00      	cmp	r2, #0
   81990:	f040 83b6 	bne.w	82100 <_vfiprintf_r+0xa08>
   81994:	f013 0301 	ands.w	r3, r3, #1
   81998:	9305      	str	r3, [sp, #20]
   8199a:	f000 8455 	beq.w	82248 <_vfiprintf_r+0xb50>
   8199e:	2330      	movs	r3, #48	; 0x30
   819a0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   819a4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   819a8:	9b05      	ldr	r3, [sp, #20]
   819aa:	42a3      	cmp	r3, r4
   819ac:	bfb8      	it	lt
   819ae:	4623      	movlt	r3, r4
   819b0:	9301      	str	r3, [sp, #4]
   819b2:	b10d      	cbz	r5, 819b8 <_vfiprintf_r+0x2c0>
   819b4:	3301      	adds	r3, #1
   819b6:	9301      	str	r3, [sp, #4]
   819b8:	9b02      	ldr	r3, [sp, #8]
   819ba:	f013 0302 	ands.w	r3, r3, #2
   819be:	9309      	str	r3, [sp, #36]	; 0x24
   819c0:	d002      	beq.n	819c8 <_vfiprintf_r+0x2d0>
   819c2:	9b01      	ldr	r3, [sp, #4]
   819c4:	3302      	adds	r3, #2
   819c6:	9301      	str	r3, [sp, #4]
   819c8:	9b02      	ldr	r3, [sp, #8]
   819ca:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   819ce:	930a      	str	r3, [sp, #40]	; 0x28
   819d0:	f040 8215 	bne.w	81dfe <_vfiprintf_r+0x706>
   819d4:	9b08      	ldr	r3, [sp, #32]
   819d6:	9a01      	ldr	r2, [sp, #4]
   819d8:	1a9d      	subs	r5, r3, r2
   819da:	2d00      	cmp	r5, #0
   819dc:	f340 820f 	ble.w	81dfe <_vfiprintf_r+0x706>
   819e0:	2d10      	cmp	r5, #16
   819e2:	f340 8484 	ble.w	822ee <_vfiprintf_r+0xbf6>
   819e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   819e8:	46ce      	mov	lr, r9
   819ea:	2710      	movs	r7, #16
   819ec:	46a1      	mov	r9, r4
   819ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
   819f0:	4ec5      	ldr	r6, [pc, #788]	; (81d08 <_vfiprintf_r+0x610>)
   819f2:	4619      	mov	r1, r3
   819f4:	9c06      	ldr	r4, [sp, #24]
   819f6:	e007      	b.n	81a08 <_vfiprintf_r+0x310>
   819f8:	f101 0c02 	add.w	ip, r1, #2
   819fc:	4601      	mov	r1, r0
   819fe:	f10e 0e08 	add.w	lr, lr, #8
   81a02:	3d10      	subs	r5, #16
   81a04:	2d10      	cmp	r5, #16
   81a06:	dd11      	ble.n	81a2c <_vfiprintf_r+0x334>
   81a08:	1c48      	adds	r0, r1, #1
   81a0a:	3210      	adds	r2, #16
   81a0c:	2807      	cmp	r0, #7
   81a0e:	9211      	str	r2, [sp, #68]	; 0x44
   81a10:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81a14:	9010      	str	r0, [sp, #64]	; 0x40
   81a16:	ddef      	ble.n	819f8 <_vfiprintf_r+0x300>
   81a18:	2a00      	cmp	r2, #0
   81a1a:	f040 81d9 	bne.w	81dd0 <_vfiprintf_r+0x6d8>
   81a1e:	3d10      	subs	r5, #16
   81a20:	2d10      	cmp	r5, #16
   81a22:	4611      	mov	r1, r2
   81a24:	f04f 0c01 	mov.w	ip, #1
   81a28:	46d6      	mov	lr, sl
   81a2a:	dced      	bgt.n	81a08 <_vfiprintf_r+0x310>
   81a2c:	464c      	mov	r4, r9
   81a2e:	4661      	mov	r1, ip
   81a30:	46f1      	mov	r9, lr
   81a32:	442a      	add	r2, r5
   81a34:	2907      	cmp	r1, #7
   81a36:	9211      	str	r2, [sp, #68]	; 0x44
   81a38:	f8c9 6000 	str.w	r6, [r9]
   81a3c:	f8c9 5004 	str.w	r5, [r9, #4]
   81a40:	9110      	str	r1, [sp, #64]	; 0x40
   81a42:	f300 82eb 	bgt.w	8201c <_vfiprintf_r+0x924>
   81a46:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81a4a:	f109 0908 	add.w	r9, r9, #8
   81a4e:	1c48      	adds	r0, r1, #1
   81a50:	2d00      	cmp	r5, #0
   81a52:	f040 81dc 	bne.w	81e0e <_vfiprintf_r+0x716>
   81a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81a58:	2b00      	cmp	r3, #0
   81a5a:	f000 81f6 	beq.w	81e4a <_vfiprintf_r+0x752>
   81a5e:	2102      	movs	r1, #2
   81a60:	ab0e      	add	r3, sp, #56	; 0x38
   81a62:	440a      	add	r2, r1
   81a64:	2807      	cmp	r0, #7
   81a66:	9211      	str	r2, [sp, #68]	; 0x44
   81a68:	9010      	str	r0, [sp, #64]	; 0x40
   81a6a:	f8c9 1004 	str.w	r1, [r9, #4]
   81a6e:	f8c9 3000 	str.w	r3, [r9]
   81a72:	f340 81e6 	ble.w	81e42 <_vfiprintf_r+0x74a>
   81a76:	2a00      	cmp	r2, #0
   81a78:	f040 8395 	bne.w	821a6 <_vfiprintf_r+0xaae>
   81a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81a7e:	2001      	movs	r0, #1
   81a80:	2b80      	cmp	r3, #128	; 0x80
   81a82:	4611      	mov	r1, r2
   81a84:	46d1      	mov	r9, sl
   81a86:	f040 81e4 	bne.w	81e52 <_vfiprintf_r+0x75a>
   81a8a:	9b08      	ldr	r3, [sp, #32]
   81a8c:	9d01      	ldr	r5, [sp, #4]
   81a8e:	1b5e      	subs	r6, r3, r5
   81a90:	2e00      	cmp	r6, #0
   81a92:	f340 81de 	ble.w	81e52 <_vfiprintf_r+0x75a>
   81a96:	2e10      	cmp	r6, #16
   81a98:	f340 843c 	ble.w	82314 <_vfiprintf_r+0xc1c>
   81a9c:	46cc      	mov	ip, r9
   81a9e:	2710      	movs	r7, #16
   81aa0:	46a1      	mov	r9, r4
   81aa2:	4d9a      	ldr	r5, [pc, #616]	; (81d0c <_vfiprintf_r+0x614>)
   81aa4:	9c06      	ldr	r4, [sp, #24]
   81aa6:	e007      	b.n	81ab8 <_vfiprintf_r+0x3c0>
   81aa8:	f101 0e02 	add.w	lr, r1, #2
   81aac:	4601      	mov	r1, r0
   81aae:	f10c 0c08 	add.w	ip, ip, #8
   81ab2:	3e10      	subs	r6, #16
   81ab4:	2e10      	cmp	r6, #16
   81ab6:	dd11      	ble.n	81adc <_vfiprintf_r+0x3e4>
   81ab8:	1c48      	adds	r0, r1, #1
   81aba:	3210      	adds	r2, #16
   81abc:	2807      	cmp	r0, #7
   81abe:	9211      	str	r2, [sp, #68]	; 0x44
   81ac0:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81ac4:	9010      	str	r0, [sp, #64]	; 0x40
   81ac6:	ddef      	ble.n	81aa8 <_vfiprintf_r+0x3b0>
   81ac8:	2a00      	cmp	r2, #0
   81aca:	f040 829b 	bne.w	82004 <_vfiprintf_r+0x90c>
   81ace:	3e10      	subs	r6, #16
   81ad0:	2e10      	cmp	r6, #16
   81ad2:	f04f 0e01 	mov.w	lr, #1
   81ad6:	4611      	mov	r1, r2
   81ad8:	46d4      	mov	ip, sl
   81ada:	dced      	bgt.n	81ab8 <_vfiprintf_r+0x3c0>
   81adc:	464c      	mov	r4, r9
   81ade:	46e1      	mov	r9, ip
   81ae0:	4432      	add	r2, r6
   81ae2:	f1be 0f07 	cmp.w	lr, #7
   81ae6:	9211      	str	r2, [sp, #68]	; 0x44
   81ae8:	e889 0060 	stmia.w	r9, {r5, r6}
   81aec:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81af0:	f300 8366 	bgt.w	821c0 <_vfiprintf_r+0xac8>
   81af4:	f109 0908 	add.w	r9, r9, #8
   81af8:	f10e 0001 	add.w	r0, lr, #1
   81afc:	4671      	mov	r1, lr
   81afe:	e1a8      	b.n	81e52 <_vfiprintf_r+0x75a>
   81b00:	9508      	str	r5, [sp, #32]
   81b02:	f013 0220 	ands.w	r2, r3, #32
   81b06:	f040 8389 	bne.w	8221c <_vfiprintf_r+0xb24>
   81b0a:	f013 0110 	ands.w	r1, r3, #16
   81b0e:	f040 8319 	bne.w	82144 <_vfiprintf_r+0xa4c>
   81b12:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   81b16:	f000 8315 	beq.w	82144 <_vfiprintf_r+0xa4c>
   81b1a:	9807      	ldr	r0, [sp, #28]
   81b1c:	460a      	mov	r2, r1
   81b1e:	4601      	mov	r1, r0
   81b20:	3104      	adds	r1, #4
   81b22:	8806      	ldrh	r6, [r0, #0]
   81b24:	2700      	movs	r7, #0
   81b26:	9107      	str	r1, [sp, #28]
   81b28:	e71f      	b.n	8196a <_vfiprintf_r+0x272>
   81b2a:	9508      	str	r5, [sp, #32]
   81b2c:	f043 0310 	orr.w	r3, r3, #16
   81b30:	e7e7      	b.n	81b02 <_vfiprintf_r+0x40a>
   81b32:	9508      	str	r5, [sp, #32]
   81b34:	f043 0310 	orr.w	r3, r3, #16
   81b38:	e707      	b.n	8194a <_vfiprintf_r+0x252>
   81b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81b3e:	f898 2000 	ldrb.w	r2, [r8]
   81b42:	e64b      	b.n	817dc <_vfiprintf_r+0xe4>
   81b44:	2500      	movs	r5, #0
   81b46:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81b4a:	f818 2b01 	ldrb.w	r2, [r8], #1
   81b4e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81b52:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   81b56:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81b5a:	2909      	cmp	r1, #9
   81b5c:	d9f5      	bls.n	81b4a <_vfiprintf_r+0x452>
   81b5e:	e63f      	b.n	817e0 <_vfiprintf_r+0xe8>
   81b60:	9508      	str	r5, [sp, #32]
   81b62:	2800      	cmp	r0, #0
   81b64:	f040 8402 	bne.w	8236c <_vfiprintf_r+0xc74>
   81b68:	f043 0310 	orr.w	r3, r3, #16
   81b6c:	069e      	lsls	r6, r3, #26
   81b6e:	f100 833d 	bmi.w	821ec <_vfiprintf_r+0xaf4>
   81b72:	9907      	ldr	r1, [sp, #28]
   81b74:	06dd      	lsls	r5, r3, #27
   81b76:	460a      	mov	r2, r1
   81b78:	f100 82f0 	bmi.w	8215c <_vfiprintf_r+0xa64>
   81b7c:	0658      	lsls	r0, r3, #25
   81b7e:	f140 82ed 	bpl.w	8215c <_vfiprintf_r+0xa64>
   81b82:	f9b1 6000 	ldrsh.w	r6, [r1]
   81b86:	3204      	adds	r2, #4
   81b88:	17f7      	asrs	r7, r6, #31
   81b8a:	4630      	mov	r0, r6
   81b8c:	4639      	mov	r1, r7
   81b8e:	9207      	str	r2, [sp, #28]
   81b90:	2800      	cmp	r0, #0
   81b92:	f171 0200 	sbcs.w	r2, r1, #0
   81b96:	f2c0 835a 	blt.w	8224e <_vfiprintf_r+0xb56>
   81b9a:	1c61      	adds	r1, r4, #1
   81b9c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81ba0:	f04f 0201 	mov.w	r2, #1
   81ba4:	f47f aee9 	bne.w	8197a <_vfiprintf_r+0x282>
   81ba8:	ea56 0107 	orrs.w	r1, r6, r7
   81bac:	f000 824b 	beq.w	82046 <_vfiprintf_r+0x94e>
   81bb0:	9302      	str	r3, [sp, #8]
   81bb2:	2a01      	cmp	r2, #1
   81bb4:	f000 828a 	beq.w	820cc <_vfiprintf_r+0x9d4>
   81bb8:	2a02      	cmp	r2, #2
   81bba:	f040 825a 	bne.w	82072 <_vfiprintf_r+0x97a>
   81bbe:	46d3      	mov	fp, sl
   81bc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   81bc2:	0933      	lsrs	r3, r6, #4
   81bc4:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81bc8:	0939      	lsrs	r1, r7, #4
   81bca:	f006 020f 	and.w	r2, r6, #15
   81bce:	460f      	mov	r7, r1
   81bd0:	461e      	mov	r6, r3
   81bd2:	5c83      	ldrb	r3, [r0, r2]
   81bd4:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81bd8:	ea56 0307 	orrs.w	r3, r6, r7
   81bdc:	d1f1      	bne.n	81bc2 <_vfiprintf_r+0x4ca>
   81bde:	ebaa 030b 	sub.w	r3, sl, fp
   81be2:	9305      	str	r3, [sp, #20]
   81be4:	e6e0      	b.n	819a8 <_vfiprintf_r+0x2b0>
   81be6:	2800      	cmp	r0, #0
   81be8:	f040 83bd 	bne.w	82366 <_vfiprintf_r+0xc6e>
   81bec:	0699      	lsls	r1, r3, #26
   81bee:	f100 8359 	bmi.w	822a4 <_vfiprintf_r+0xbac>
   81bf2:	06da      	lsls	r2, r3, #27
   81bf4:	f100 80e5 	bmi.w	81dc2 <_vfiprintf_r+0x6ca>
   81bf8:	065b      	lsls	r3, r3, #25
   81bfa:	f140 80e2 	bpl.w	81dc2 <_vfiprintf_r+0x6ca>
   81bfe:	9a07      	ldr	r2, [sp, #28]
   81c00:	6813      	ldr	r3, [r2, #0]
   81c02:	3204      	adds	r2, #4
   81c04:	9207      	str	r2, [sp, #28]
   81c06:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   81c0a:	801a      	strh	r2, [r3, #0]
   81c0c:	e5b1      	b.n	81772 <_vfiprintf_r+0x7a>
   81c0e:	2278      	movs	r2, #120	; 0x78
   81c10:	2130      	movs	r1, #48	; 0x30
   81c12:	9508      	str	r5, [sp, #32]
   81c14:	9d07      	ldr	r5, [sp, #28]
   81c16:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81c1a:	1d2a      	adds	r2, r5, #4
   81c1c:	9207      	str	r2, [sp, #28]
   81c1e:	4a3c      	ldr	r2, [pc, #240]	; (81d10 <_vfiprintf_r+0x618>)
   81c20:	682e      	ldr	r6, [r5, #0]
   81c22:	920b      	str	r2, [sp, #44]	; 0x2c
   81c24:	f043 0302 	orr.w	r3, r3, #2
   81c28:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81c2c:	2700      	movs	r7, #0
   81c2e:	2202      	movs	r2, #2
   81c30:	e69b      	b.n	8196a <_vfiprintf_r+0x272>
   81c32:	9508      	str	r5, [sp, #32]
   81c34:	2800      	cmp	r0, #0
   81c36:	d099      	beq.n	81b6c <_vfiprintf_r+0x474>
   81c38:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81c3c:	e796      	b.n	81b6c <_vfiprintf_r+0x474>
   81c3e:	f898 2000 	ldrb.w	r2, [r8]
   81c42:	2e00      	cmp	r6, #0
   81c44:	f47f adca 	bne.w	817dc <_vfiprintf_r+0xe4>
   81c48:	2001      	movs	r0, #1
   81c4a:	2620      	movs	r6, #32
   81c4c:	e5c6      	b.n	817dc <_vfiprintf_r+0xe4>
   81c4e:	f043 0301 	orr.w	r3, r3, #1
   81c52:	f898 2000 	ldrb.w	r2, [r8]
   81c56:	e5c1      	b.n	817dc <_vfiprintf_r+0xe4>
   81c58:	9508      	str	r5, [sp, #32]
   81c5a:	2800      	cmp	r0, #0
   81c5c:	f040 8380 	bne.w	82360 <_vfiprintf_r+0xc68>
   81c60:	492b      	ldr	r1, [pc, #172]	; (81d10 <_vfiprintf_r+0x618>)
   81c62:	910b      	str	r1, [sp, #44]	; 0x2c
   81c64:	069f      	lsls	r7, r3, #26
   81c66:	f100 82e5 	bmi.w	82234 <_vfiprintf_r+0xb3c>
   81c6a:	9807      	ldr	r0, [sp, #28]
   81c6c:	06de      	lsls	r6, r3, #27
   81c6e:	4601      	mov	r1, r0
   81c70:	f100 826f 	bmi.w	82152 <_vfiprintf_r+0xa5a>
   81c74:	065d      	lsls	r5, r3, #25
   81c76:	f140 826c 	bpl.w	82152 <_vfiprintf_r+0xa5a>
   81c7a:	2700      	movs	r7, #0
   81c7c:	3104      	adds	r1, #4
   81c7e:	8806      	ldrh	r6, [r0, #0]
   81c80:	9107      	str	r1, [sp, #28]
   81c82:	07d8      	lsls	r0, r3, #31
   81c84:	f140 8220 	bpl.w	820c8 <_vfiprintf_r+0x9d0>
   81c88:	ea56 0107 	orrs.w	r1, r6, r7
   81c8c:	f000 821c 	beq.w	820c8 <_vfiprintf_r+0x9d0>
   81c90:	2130      	movs	r1, #48	; 0x30
   81c92:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81c96:	f043 0302 	orr.w	r3, r3, #2
   81c9a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81c9e:	2202      	movs	r2, #2
   81ca0:	e663      	b.n	8196a <_vfiprintf_r+0x272>
   81ca2:	9508      	str	r5, [sp, #32]
   81ca4:	2800      	cmp	r0, #0
   81ca6:	f040 8355 	bne.w	82354 <_vfiprintf_r+0xc5c>
   81caa:	491a      	ldr	r1, [pc, #104]	; (81d14 <_vfiprintf_r+0x61c>)
   81cac:	910b      	str	r1, [sp, #44]	; 0x2c
   81cae:	e7d9      	b.n	81c64 <_vfiprintf_r+0x56c>
   81cb0:	2201      	movs	r2, #1
   81cb2:	9807      	ldr	r0, [sp, #28]
   81cb4:	4611      	mov	r1, r2
   81cb6:	9201      	str	r2, [sp, #4]
   81cb8:	6802      	ldr	r2, [r0, #0]
   81cba:	f04f 0400 	mov.w	r4, #0
   81cbe:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81cc2:	4602      	mov	r2, r0
   81cc4:	3204      	adds	r2, #4
   81cc6:	9508      	str	r5, [sp, #32]
   81cc8:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81ccc:	9105      	str	r1, [sp, #20]
   81cce:	9207      	str	r2, [sp, #28]
   81cd0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81cd4:	9302      	str	r3, [sp, #8]
   81cd6:	2400      	movs	r4, #0
   81cd8:	e66e      	b.n	819b8 <_vfiprintf_r+0x2c0>
   81cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81cde:	f898 2000 	ldrb.w	r2, [r8]
   81ce2:	e57b      	b.n	817dc <_vfiprintf_r+0xe4>
   81ce4:	f898 2000 	ldrb.w	r2, [r8]
   81ce8:	2a6c      	cmp	r2, #108	; 0x6c
   81cea:	bf03      	ittte	eq
   81cec:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81cf0:	f043 0320 	orreq.w	r3, r3, #32
   81cf4:	f108 0801 	addeq.w	r8, r8, #1
   81cf8:	f043 0310 	orrne.w	r3, r3, #16
   81cfc:	e56e      	b.n	817dc <_vfiprintf_r+0xe4>
   81cfe:	f898 2000 	ldrb.w	r2, [r8]
   81d02:	2001      	movs	r0, #1
   81d04:	262b      	movs	r6, #43	; 0x2b
   81d06:	e569      	b.n	817dc <_vfiprintf_r+0xe4>
   81d08:	00084278 	.word	0x00084278
   81d0c:	00084288 	.word	0x00084288
   81d10:	0008425c 	.word	0x0008425c
   81d14:	00084248 	.word	0x00084248
   81d18:	f04f 0200 	mov.w	r2, #0
   81d1c:	9907      	ldr	r1, [sp, #28]
   81d1e:	9508      	str	r5, [sp, #32]
   81d20:	f8d1 b000 	ldr.w	fp, [r1]
   81d24:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81d28:	1d0d      	adds	r5, r1, #4
   81d2a:	f1bb 0f00 	cmp.w	fp, #0
   81d2e:	f000 82e4 	beq.w	822fa <_vfiprintf_r+0xc02>
   81d32:	1c67      	adds	r7, r4, #1
   81d34:	f000 82c3 	beq.w	822be <_vfiprintf_r+0xbc6>
   81d38:	4622      	mov	r2, r4
   81d3a:	2100      	movs	r1, #0
   81d3c:	4658      	mov	r0, fp
   81d3e:	9301      	str	r3, [sp, #4]
   81d40:	f001 fbc6 	bl	834d0 <memchr>
   81d44:	9b01      	ldr	r3, [sp, #4]
   81d46:	2800      	cmp	r0, #0
   81d48:	f000 82e8 	beq.w	8231c <_vfiprintf_r+0xc24>
   81d4c:	eba0 020b 	sub.w	r2, r0, fp
   81d50:	9507      	str	r5, [sp, #28]
   81d52:	9205      	str	r2, [sp, #20]
   81d54:	9302      	str	r3, [sp, #8]
   81d56:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81d5a:	2400      	movs	r4, #0
   81d5c:	e624      	b.n	819a8 <_vfiprintf_r+0x2b0>
   81d5e:	f898 2000 	ldrb.w	r2, [r8]
   81d62:	f108 0701 	add.w	r7, r8, #1
   81d66:	2a2a      	cmp	r2, #42	; 0x2a
   81d68:	f000 82e9 	beq.w	8233e <_vfiprintf_r+0xc46>
   81d6c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81d70:	2909      	cmp	r1, #9
   81d72:	46b8      	mov	r8, r7
   81d74:	f04f 0400 	mov.w	r4, #0
   81d78:	f63f ad32 	bhi.w	817e0 <_vfiprintf_r+0xe8>
   81d7c:	f818 2b01 	ldrb.w	r2, [r8], #1
   81d80:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81d84:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81d88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81d8c:	2909      	cmp	r1, #9
   81d8e:	d9f5      	bls.n	81d7c <_vfiprintf_r+0x684>
   81d90:	e526      	b.n	817e0 <_vfiprintf_r+0xe8>
   81d92:	f043 0320 	orr.w	r3, r3, #32
   81d96:	f898 2000 	ldrb.w	r2, [r8]
   81d9a:	e51f      	b.n	817dc <_vfiprintf_r+0xe4>
   81d9c:	9508      	str	r5, [sp, #32]
   81d9e:	2800      	cmp	r0, #0
   81da0:	f040 82db 	bne.w	8235a <_vfiprintf_r+0xc62>
   81da4:	2a00      	cmp	r2, #0
   81da6:	f000 80f1 	beq.w	81f8c <_vfiprintf_r+0x894>
   81daa:	2101      	movs	r1, #1
   81dac:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81db0:	f04f 0200 	mov.w	r2, #0
   81db4:	9101      	str	r1, [sp, #4]
   81db6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81dba:	9105      	str	r1, [sp, #20]
   81dbc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81dc0:	e788      	b.n	81cd4 <_vfiprintf_r+0x5dc>
   81dc2:	9a07      	ldr	r2, [sp, #28]
   81dc4:	6813      	ldr	r3, [r2, #0]
   81dc6:	3204      	adds	r2, #4
   81dc8:	9207      	str	r2, [sp, #28]
   81dca:	9a03      	ldr	r2, [sp, #12]
   81dcc:	601a      	str	r2, [r3, #0]
   81dce:	e4d0      	b.n	81772 <_vfiprintf_r+0x7a>
   81dd0:	aa0f      	add	r2, sp, #60	; 0x3c
   81dd2:	9904      	ldr	r1, [sp, #16]
   81dd4:	4620      	mov	r0, r4
   81dd6:	f7ff fc4f 	bl	81678 <__sprint_r.part.0>
   81dda:	2800      	cmp	r0, #0
   81ddc:	f040 8143 	bne.w	82066 <_vfiprintf_r+0x96e>
   81de0:	9910      	ldr	r1, [sp, #64]	; 0x40
   81de2:	46d6      	mov	lr, sl
   81de4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81de6:	f101 0c01 	add.w	ip, r1, #1
   81dea:	e60a      	b.n	81a02 <_vfiprintf_r+0x30a>
   81dec:	aa0f      	add	r2, sp, #60	; 0x3c
   81dee:	9904      	ldr	r1, [sp, #16]
   81df0:	9806      	ldr	r0, [sp, #24]
   81df2:	f7ff fc41 	bl	81678 <__sprint_r.part.0>
   81df6:	2800      	cmp	r0, #0
   81df8:	f040 8135 	bne.w	82066 <_vfiprintf_r+0x96e>
   81dfc:	46d1      	mov	r9, sl
   81dfe:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e00:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e04:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e06:	1c48      	adds	r0, r1, #1
   81e08:	2d00      	cmp	r5, #0
   81e0a:	f43f ae24 	beq.w	81a56 <_vfiprintf_r+0x35e>
   81e0e:	2101      	movs	r1, #1
   81e10:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81e14:	440a      	add	r2, r1
   81e16:	2807      	cmp	r0, #7
   81e18:	9211      	str	r2, [sp, #68]	; 0x44
   81e1a:	9010      	str	r0, [sp, #64]	; 0x40
   81e1c:	f8c9 1004 	str.w	r1, [r9, #4]
   81e20:	f8c9 5000 	str.w	r5, [r9]
   81e24:	f340 8109 	ble.w	8203a <_vfiprintf_r+0x942>
   81e28:	2a00      	cmp	r2, #0
   81e2a:	f040 81af 	bne.w	8218c <_vfiprintf_r+0xa94>
   81e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81e30:	2b00      	cmp	r3, #0
   81e32:	f43f ae23 	beq.w	81a7c <_vfiprintf_r+0x384>
   81e36:	2202      	movs	r2, #2
   81e38:	4608      	mov	r0, r1
   81e3a:	46d1      	mov	r9, sl
   81e3c:	ab0e      	add	r3, sp, #56	; 0x38
   81e3e:	921d      	str	r2, [sp, #116]	; 0x74
   81e40:	931c      	str	r3, [sp, #112]	; 0x70
   81e42:	4601      	mov	r1, r0
   81e44:	f109 0908 	add.w	r9, r9, #8
   81e48:	3001      	adds	r0, #1
   81e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81e4c:	2b80      	cmp	r3, #128	; 0x80
   81e4e:	f43f ae1c 	beq.w	81a8a <_vfiprintf_r+0x392>
   81e52:	9b05      	ldr	r3, [sp, #20]
   81e54:	1ae4      	subs	r4, r4, r3
   81e56:	2c00      	cmp	r4, #0
   81e58:	dd2f      	ble.n	81eba <_vfiprintf_r+0x7c2>
   81e5a:	2c10      	cmp	r4, #16
   81e5c:	f340 8220 	ble.w	822a0 <_vfiprintf_r+0xba8>
   81e60:	46ce      	mov	lr, r9
   81e62:	2610      	movs	r6, #16
   81e64:	4db2      	ldr	r5, [pc, #712]	; (82130 <_vfiprintf_r+0xa38>)
   81e66:	9f06      	ldr	r7, [sp, #24]
   81e68:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81e6c:	e006      	b.n	81e7c <_vfiprintf_r+0x784>
   81e6e:	1c88      	adds	r0, r1, #2
   81e70:	4619      	mov	r1, r3
   81e72:	f10e 0e08 	add.w	lr, lr, #8
   81e76:	3c10      	subs	r4, #16
   81e78:	2c10      	cmp	r4, #16
   81e7a:	dd10      	ble.n	81e9e <_vfiprintf_r+0x7a6>
   81e7c:	1c4b      	adds	r3, r1, #1
   81e7e:	3210      	adds	r2, #16
   81e80:	2b07      	cmp	r3, #7
   81e82:	9211      	str	r2, [sp, #68]	; 0x44
   81e84:	e88e 0060 	stmia.w	lr, {r5, r6}
   81e88:	9310      	str	r3, [sp, #64]	; 0x40
   81e8a:	ddf0      	ble.n	81e6e <_vfiprintf_r+0x776>
   81e8c:	2a00      	cmp	r2, #0
   81e8e:	d165      	bne.n	81f5c <_vfiprintf_r+0x864>
   81e90:	3c10      	subs	r4, #16
   81e92:	2c10      	cmp	r4, #16
   81e94:	f04f 0001 	mov.w	r0, #1
   81e98:	4611      	mov	r1, r2
   81e9a:	46d6      	mov	lr, sl
   81e9c:	dcee      	bgt.n	81e7c <_vfiprintf_r+0x784>
   81e9e:	46f1      	mov	r9, lr
   81ea0:	4422      	add	r2, r4
   81ea2:	2807      	cmp	r0, #7
   81ea4:	9211      	str	r2, [sp, #68]	; 0x44
   81ea6:	f8c9 5000 	str.w	r5, [r9]
   81eaa:	f8c9 4004 	str.w	r4, [r9, #4]
   81eae:	9010      	str	r0, [sp, #64]	; 0x40
   81eb0:	f300 8085 	bgt.w	81fbe <_vfiprintf_r+0x8c6>
   81eb4:	f109 0908 	add.w	r9, r9, #8
   81eb8:	3001      	adds	r0, #1
   81eba:	9905      	ldr	r1, [sp, #20]
   81ebc:	2807      	cmp	r0, #7
   81ebe:	440a      	add	r2, r1
   81ec0:	9211      	str	r2, [sp, #68]	; 0x44
   81ec2:	f8c9 b000 	str.w	fp, [r9]
   81ec6:	f8c9 1004 	str.w	r1, [r9, #4]
   81eca:	9010      	str	r0, [sp, #64]	; 0x40
   81ecc:	f340 8082 	ble.w	81fd4 <_vfiprintf_r+0x8dc>
   81ed0:	2a00      	cmp	r2, #0
   81ed2:	f040 8118 	bne.w	82106 <_vfiprintf_r+0xa0e>
   81ed6:	9b02      	ldr	r3, [sp, #8]
   81ed8:	9210      	str	r2, [sp, #64]	; 0x40
   81eda:	0758      	lsls	r0, r3, #29
   81edc:	d535      	bpl.n	81f4a <_vfiprintf_r+0x852>
   81ede:	9b08      	ldr	r3, [sp, #32]
   81ee0:	9901      	ldr	r1, [sp, #4]
   81ee2:	1a5c      	subs	r4, r3, r1
   81ee4:	2c00      	cmp	r4, #0
   81ee6:	f340 80e7 	ble.w	820b8 <_vfiprintf_r+0x9c0>
   81eea:	46d1      	mov	r9, sl
   81eec:	2c10      	cmp	r4, #16
   81eee:	f340 820d 	ble.w	8230c <_vfiprintf_r+0xc14>
   81ef2:	2510      	movs	r5, #16
   81ef4:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ef6:	4e8f      	ldr	r6, [pc, #572]	; (82134 <_vfiprintf_r+0xa3c>)
   81ef8:	9f06      	ldr	r7, [sp, #24]
   81efa:	f8dd b010 	ldr.w	fp, [sp, #16]
   81efe:	e006      	b.n	81f0e <_vfiprintf_r+0x816>
   81f00:	1c88      	adds	r0, r1, #2
   81f02:	4619      	mov	r1, r3
   81f04:	f109 0908 	add.w	r9, r9, #8
   81f08:	3c10      	subs	r4, #16
   81f0a:	2c10      	cmp	r4, #16
   81f0c:	dd11      	ble.n	81f32 <_vfiprintf_r+0x83a>
   81f0e:	1c4b      	adds	r3, r1, #1
   81f10:	3210      	adds	r2, #16
   81f12:	2b07      	cmp	r3, #7
   81f14:	9211      	str	r2, [sp, #68]	; 0x44
   81f16:	f8c9 6000 	str.w	r6, [r9]
   81f1a:	f8c9 5004 	str.w	r5, [r9, #4]
   81f1e:	9310      	str	r3, [sp, #64]	; 0x40
   81f20:	ddee      	ble.n	81f00 <_vfiprintf_r+0x808>
   81f22:	bb42      	cbnz	r2, 81f76 <_vfiprintf_r+0x87e>
   81f24:	3c10      	subs	r4, #16
   81f26:	2c10      	cmp	r4, #16
   81f28:	f04f 0001 	mov.w	r0, #1
   81f2c:	4611      	mov	r1, r2
   81f2e:	46d1      	mov	r9, sl
   81f30:	dced      	bgt.n	81f0e <_vfiprintf_r+0x816>
   81f32:	4422      	add	r2, r4
   81f34:	2807      	cmp	r0, #7
   81f36:	9211      	str	r2, [sp, #68]	; 0x44
   81f38:	f8c9 6000 	str.w	r6, [r9]
   81f3c:	f8c9 4004 	str.w	r4, [r9, #4]
   81f40:	9010      	str	r0, [sp, #64]	; 0x40
   81f42:	dd51      	ble.n	81fe8 <_vfiprintf_r+0x8f0>
   81f44:	2a00      	cmp	r2, #0
   81f46:	f040 819a 	bne.w	8227e <_vfiprintf_r+0xb86>
   81f4a:	9b03      	ldr	r3, [sp, #12]
   81f4c:	9a08      	ldr	r2, [sp, #32]
   81f4e:	9901      	ldr	r1, [sp, #4]
   81f50:	428a      	cmp	r2, r1
   81f52:	bfac      	ite	ge
   81f54:	189b      	addge	r3, r3, r2
   81f56:	185b      	addlt	r3, r3, r1
   81f58:	9303      	str	r3, [sp, #12]
   81f5a:	e04e      	b.n	81ffa <_vfiprintf_r+0x902>
   81f5c:	aa0f      	add	r2, sp, #60	; 0x3c
   81f5e:	4649      	mov	r1, r9
   81f60:	4638      	mov	r0, r7
   81f62:	f7ff fb89 	bl	81678 <__sprint_r.part.0>
   81f66:	2800      	cmp	r0, #0
   81f68:	f040 813e 	bne.w	821e8 <_vfiprintf_r+0xaf0>
   81f6c:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f6e:	46d6      	mov	lr, sl
   81f70:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f72:	1c48      	adds	r0, r1, #1
   81f74:	e77f      	b.n	81e76 <_vfiprintf_r+0x77e>
   81f76:	aa0f      	add	r2, sp, #60	; 0x3c
   81f78:	4659      	mov	r1, fp
   81f7a:	4638      	mov	r0, r7
   81f7c:	f7ff fb7c 	bl	81678 <__sprint_r.part.0>
   81f80:	b960      	cbnz	r0, 81f9c <_vfiprintf_r+0x8a4>
   81f82:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f84:	46d1      	mov	r9, sl
   81f86:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f88:	1c48      	adds	r0, r1, #1
   81f8a:	e7bd      	b.n	81f08 <_vfiprintf_r+0x810>
   81f8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81f8e:	f8dd b010 	ldr.w	fp, [sp, #16]
   81f92:	2b00      	cmp	r3, #0
   81f94:	f040 81ca 	bne.w	8232c <_vfiprintf_r+0xc34>
   81f98:	2300      	movs	r3, #0
   81f9a:	9310      	str	r3, [sp, #64]	; 0x40
   81f9c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81fa0:	f013 0f01 	tst.w	r3, #1
   81fa4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81fa8:	d102      	bne.n	81fb0 <_vfiprintf_r+0x8b8>
   81faa:	059a      	lsls	r2, r3, #22
   81fac:	f140 80dd 	bpl.w	8216a <_vfiprintf_r+0xa72>
   81fb0:	065b      	lsls	r3, r3, #25
   81fb2:	f53f acad 	bmi.w	81910 <_vfiprintf_r+0x218>
   81fb6:	9803      	ldr	r0, [sp, #12]
   81fb8:	b02d      	add	sp, #180	; 0xb4
   81fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81fbe:	2a00      	cmp	r2, #0
   81fc0:	f040 8105 	bne.w	821ce <_vfiprintf_r+0xad6>
   81fc4:	2301      	movs	r3, #1
   81fc6:	46d1      	mov	r9, sl
   81fc8:	9a05      	ldr	r2, [sp, #20]
   81fca:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81fce:	921d      	str	r2, [sp, #116]	; 0x74
   81fd0:	9211      	str	r2, [sp, #68]	; 0x44
   81fd2:	9310      	str	r3, [sp, #64]	; 0x40
   81fd4:	f109 0908 	add.w	r9, r9, #8
   81fd8:	9b02      	ldr	r3, [sp, #8]
   81fda:	0759      	lsls	r1, r3, #29
   81fdc:	d504      	bpl.n	81fe8 <_vfiprintf_r+0x8f0>
   81fde:	9b08      	ldr	r3, [sp, #32]
   81fe0:	9901      	ldr	r1, [sp, #4]
   81fe2:	1a5c      	subs	r4, r3, r1
   81fe4:	2c00      	cmp	r4, #0
   81fe6:	dc81      	bgt.n	81eec <_vfiprintf_r+0x7f4>
   81fe8:	9b03      	ldr	r3, [sp, #12]
   81fea:	9908      	ldr	r1, [sp, #32]
   81fec:	9801      	ldr	r0, [sp, #4]
   81fee:	4281      	cmp	r1, r0
   81ff0:	bfac      	ite	ge
   81ff2:	185b      	addge	r3, r3, r1
   81ff4:	181b      	addlt	r3, r3, r0
   81ff6:	9303      	str	r3, [sp, #12]
   81ff8:	bb72      	cbnz	r2, 82058 <_vfiprintf_r+0x960>
   81ffa:	2300      	movs	r3, #0
   81ffc:	46d1      	mov	r9, sl
   81ffe:	9310      	str	r3, [sp, #64]	; 0x40
   82000:	f7ff bbb7 	b.w	81772 <_vfiprintf_r+0x7a>
   82004:	aa0f      	add	r2, sp, #60	; 0x3c
   82006:	9904      	ldr	r1, [sp, #16]
   82008:	4620      	mov	r0, r4
   8200a:	f7ff fb35 	bl	81678 <__sprint_r.part.0>
   8200e:	bb50      	cbnz	r0, 82066 <_vfiprintf_r+0x96e>
   82010:	9910      	ldr	r1, [sp, #64]	; 0x40
   82012:	46d4      	mov	ip, sl
   82014:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82016:	f101 0e01 	add.w	lr, r1, #1
   8201a:	e54a      	b.n	81ab2 <_vfiprintf_r+0x3ba>
   8201c:	2a00      	cmp	r2, #0
   8201e:	f47f aee5 	bne.w	81dec <_vfiprintf_r+0x6f4>
   82022:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82026:	2900      	cmp	r1, #0
   82028:	f000 811a 	beq.w	82260 <_vfiprintf_r+0xb68>
   8202c:	2201      	movs	r2, #1
   8202e:	46d1      	mov	r9, sl
   82030:	4610      	mov	r0, r2
   82032:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82036:	921d      	str	r2, [sp, #116]	; 0x74
   82038:	911c      	str	r1, [sp, #112]	; 0x70
   8203a:	4601      	mov	r1, r0
   8203c:	f109 0908 	add.w	r9, r9, #8
   82040:	3001      	adds	r0, #1
   82042:	e508      	b.n	81a56 <_vfiprintf_r+0x35e>
   82044:	9b02      	ldr	r3, [sp, #8]
   82046:	2a01      	cmp	r2, #1
   82048:	f000 8097 	beq.w	8217a <_vfiprintf_r+0xa82>
   8204c:	2a02      	cmp	r2, #2
   8204e:	d10d      	bne.n	8206c <_vfiprintf_r+0x974>
   82050:	9302      	str	r3, [sp, #8]
   82052:	2600      	movs	r6, #0
   82054:	2700      	movs	r7, #0
   82056:	e5b2      	b.n	81bbe <_vfiprintf_r+0x4c6>
   82058:	aa0f      	add	r2, sp, #60	; 0x3c
   8205a:	9904      	ldr	r1, [sp, #16]
   8205c:	9806      	ldr	r0, [sp, #24]
   8205e:	f7ff fb0b 	bl	81678 <__sprint_r.part.0>
   82062:	2800      	cmp	r0, #0
   82064:	d0c9      	beq.n	81ffa <_vfiprintf_r+0x902>
   82066:	f8dd b010 	ldr.w	fp, [sp, #16]
   8206a:	e797      	b.n	81f9c <_vfiprintf_r+0x8a4>
   8206c:	2600      	movs	r6, #0
   8206e:	2700      	movs	r7, #0
   82070:	9302      	str	r3, [sp, #8]
   82072:	4651      	mov	r1, sl
   82074:	e000      	b.n	82078 <_vfiprintf_r+0x980>
   82076:	4659      	mov	r1, fp
   82078:	08f2      	lsrs	r2, r6, #3
   8207a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8207e:	08f8      	lsrs	r0, r7, #3
   82080:	f006 0307 	and.w	r3, r6, #7
   82084:	4607      	mov	r7, r0
   82086:	4616      	mov	r6, r2
   82088:	3330      	adds	r3, #48	; 0x30
   8208a:	ea56 0207 	orrs.w	r2, r6, r7
   8208e:	f801 3c01 	strb.w	r3, [r1, #-1]
   82092:	f101 3bff 	add.w	fp, r1, #4294967295
   82096:	d1ee      	bne.n	82076 <_vfiprintf_r+0x97e>
   82098:	9a02      	ldr	r2, [sp, #8]
   8209a:	07d6      	lsls	r6, r2, #31
   8209c:	f57f ad9f 	bpl.w	81bde <_vfiprintf_r+0x4e6>
   820a0:	2b30      	cmp	r3, #48	; 0x30
   820a2:	f43f ad9c 	beq.w	81bde <_vfiprintf_r+0x4e6>
   820a6:	2330      	movs	r3, #48	; 0x30
   820a8:	3902      	subs	r1, #2
   820aa:	f80b 3c01 	strb.w	r3, [fp, #-1]
   820ae:	ebaa 0301 	sub.w	r3, sl, r1
   820b2:	9305      	str	r3, [sp, #20]
   820b4:	468b      	mov	fp, r1
   820b6:	e477      	b.n	819a8 <_vfiprintf_r+0x2b0>
   820b8:	9b03      	ldr	r3, [sp, #12]
   820ba:	9a08      	ldr	r2, [sp, #32]
   820bc:	428a      	cmp	r2, r1
   820be:	bfac      	ite	ge
   820c0:	189b      	addge	r3, r3, r2
   820c2:	185b      	addlt	r3, r3, r1
   820c4:	9303      	str	r3, [sp, #12]
   820c6:	e798      	b.n	81ffa <_vfiprintf_r+0x902>
   820c8:	2202      	movs	r2, #2
   820ca:	e44e      	b.n	8196a <_vfiprintf_r+0x272>
   820cc:	2f00      	cmp	r7, #0
   820ce:	bf08      	it	eq
   820d0:	2e0a      	cmpeq	r6, #10
   820d2:	d351      	bcc.n	82178 <_vfiprintf_r+0xa80>
   820d4:	46d3      	mov	fp, sl
   820d6:	4630      	mov	r0, r6
   820d8:	4639      	mov	r1, r7
   820da:	220a      	movs	r2, #10
   820dc:	2300      	movs	r3, #0
   820de:	f001 fefb 	bl	83ed8 <__aeabi_uldivmod>
   820e2:	3230      	adds	r2, #48	; 0x30
   820e4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   820e8:	4630      	mov	r0, r6
   820ea:	4639      	mov	r1, r7
   820ec:	2300      	movs	r3, #0
   820ee:	220a      	movs	r2, #10
   820f0:	f001 fef2 	bl	83ed8 <__aeabi_uldivmod>
   820f4:	4606      	mov	r6, r0
   820f6:	460f      	mov	r7, r1
   820f8:	ea56 0307 	orrs.w	r3, r6, r7
   820fc:	d1eb      	bne.n	820d6 <_vfiprintf_r+0x9de>
   820fe:	e56e      	b.n	81bde <_vfiprintf_r+0x4e6>
   82100:	9405      	str	r4, [sp, #20]
   82102:	46d3      	mov	fp, sl
   82104:	e450      	b.n	819a8 <_vfiprintf_r+0x2b0>
   82106:	aa0f      	add	r2, sp, #60	; 0x3c
   82108:	9904      	ldr	r1, [sp, #16]
   8210a:	9806      	ldr	r0, [sp, #24]
   8210c:	f7ff fab4 	bl	81678 <__sprint_r.part.0>
   82110:	2800      	cmp	r0, #0
   82112:	d1a8      	bne.n	82066 <_vfiprintf_r+0x96e>
   82114:	46d1      	mov	r9, sl
   82116:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82118:	e75e      	b.n	81fd8 <_vfiprintf_r+0x8e0>
   8211a:	aa0f      	add	r2, sp, #60	; 0x3c
   8211c:	9904      	ldr	r1, [sp, #16]
   8211e:	9806      	ldr	r0, [sp, #24]
   82120:	f7ff faaa 	bl	81678 <__sprint_r.part.0>
   82124:	2800      	cmp	r0, #0
   82126:	d19e      	bne.n	82066 <_vfiprintf_r+0x96e>
   82128:	46d1      	mov	r9, sl
   8212a:	f7ff bbbb 	b.w	818a4 <_vfiprintf_r+0x1ac>
   8212e:	bf00      	nop
   82130:	00084288 	.word	0x00084288
   82134:	00084278 	.word	0x00084278
   82138:	3104      	adds	r1, #4
   8213a:	6816      	ldr	r6, [r2, #0]
   8213c:	2700      	movs	r7, #0
   8213e:	2201      	movs	r2, #1
   82140:	9107      	str	r1, [sp, #28]
   82142:	e412      	b.n	8196a <_vfiprintf_r+0x272>
   82144:	9807      	ldr	r0, [sp, #28]
   82146:	2700      	movs	r7, #0
   82148:	4601      	mov	r1, r0
   8214a:	3104      	adds	r1, #4
   8214c:	6806      	ldr	r6, [r0, #0]
   8214e:	9107      	str	r1, [sp, #28]
   82150:	e40b      	b.n	8196a <_vfiprintf_r+0x272>
   82152:	680e      	ldr	r6, [r1, #0]
   82154:	3104      	adds	r1, #4
   82156:	9107      	str	r1, [sp, #28]
   82158:	2700      	movs	r7, #0
   8215a:	e592      	b.n	81c82 <_vfiprintf_r+0x58a>
   8215c:	6816      	ldr	r6, [r2, #0]
   8215e:	3204      	adds	r2, #4
   82160:	17f7      	asrs	r7, r6, #31
   82162:	9207      	str	r2, [sp, #28]
   82164:	4630      	mov	r0, r6
   82166:	4639      	mov	r1, r7
   82168:	e512      	b.n	81b90 <_vfiprintf_r+0x498>
   8216a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8216e:	f000 fe75 	bl	82e5c <__retarget_lock_release_recursive>
   82172:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82176:	e71b      	b.n	81fb0 <_vfiprintf_r+0x8b8>
   82178:	9b02      	ldr	r3, [sp, #8]
   8217a:	9302      	str	r3, [sp, #8]
   8217c:	2301      	movs	r3, #1
   8217e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82182:	3630      	adds	r6, #48	; 0x30
   82184:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   82188:	9305      	str	r3, [sp, #20]
   8218a:	e40d      	b.n	819a8 <_vfiprintf_r+0x2b0>
   8218c:	aa0f      	add	r2, sp, #60	; 0x3c
   8218e:	9904      	ldr	r1, [sp, #16]
   82190:	9806      	ldr	r0, [sp, #24]
   82192:	f7ff fa71 	bl	81678 <__sprint_r.part.0>
   82196:	2800      	cmp	r0, #0
   82198:	f47f af65 	bne.w	82066 <_vfiprintf_r+0x96e>
   8219c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8219e:	46d1      	mov	r9, sl
   821a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821a2:	1c48      	adds	r0, r1, #1
   821a4:	e457      	b.n	81a56 <_vfiprintf_r+0x35e>
   821a6:	aa0f      	add	r2, sp, #60	; 0x3c
   821a8:	9904      	ldr	r1, [sp, #16]
   821aa:	9806      	ldr	r0, [sp, #24]
   821ac:	f7ff fa64 	bl	81678 <__sprint_r.part.0>
   821b0:	2800      	cmp	r0, #0
   821b2:	f47f af58 	bne.w	82066 <_vfiprintf_r+0x96e>
   821b6:	9910      	ldr	r1, [sp, #64]	; 0x40
   821b8:	46d1      	mov	r9, sl
   821ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821bc:	1c48      	adds	r0, r1, #1
   821be:	e644      	b.n	81e4a <_vfiprintf_r+0x752>
   821c0:	2a00      	cmp	r2, #0
   821c2:	f040 8087 	bne.w	822d4 <_vfiprintf_r+0xbdc>
   821c6:	2001      	movs	r0, #1
   821c8:	4611      	mov	r1, r2
   821ca:	46d1      	mov	r9, sl
   821cc:	e641      	b.n	81e52 <_vfiprintf_r+0x75a>
   821ce:	aa0f      	add	r2, sp, #60	; 0x3c
   821d0:	9904      	ldr	r1, [sp, #16]
   821d2:	9806      	ldr	r0, [sp, #24]
   821d4:	f7ff fa50 	bl	81678 <__sprint_r.part.0>
   821d8:	2800      	cmp	r0, #0
   821da:	f47f af44 	bne.w	82066 <_vfiprintf_r+0x96e>
   821de:	9810      	ldr	r0, [sp, #64]	; 0x40
   821e0:	46d1      	mov	r9, sl
   821e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821e4:	3001      	adds	r0, #1
   821e6:	e668      	b.n	81eba <_vfiprintf_r+0x7c2>
   821e8:	46cb      	mov	fp, r9
   821ea:	e6d7      	b.n	81f9c <_vfiprintf_r+0x8a4>
   821ec:	9d07      	ldr	r5, [sp, #28]
   821ee:	3507      	adds	r5, #7
   821f0:	f025 0507 	bic.w	r5, r5, #7
   821f4:	f105 0208 	add.w	r2, r5, #8
   821f8:	e9d5 0100 	ldrd	r0, r1, [r5]
   821fc:	9207      	str	r2, [sp, #28]
   821fe:	4606      	mov	r6, r0
   82200:	460f      	mov	r7, r1
   82202:	e4c5      	b.n	81b90 <_vfiprintf_r+0x498>
   82204:	9d07      	ldr	r5, [sp, #28]
   82206:	3507      	adds	r5, #7
   82208:	f025 0207 	bic.w	r2, r5, #7
   8220c:	f102 0108 	add.w	r1, r2, #8
   82210:	e9d2 6700 	ldrd	r6, r7, [r2]
   82214:	9107      	str	r1, [sp, #28]
   82216:	2201      	movs	r2, #1
   82218:	f7ff bba7 	b.w	8196a <_vfiprintf_r+0x272>
   8221c:	9d07      	ldr	r5, [sp, #28]
   8221e:	3507      	adds	r5, #7
   82220:	f025 0207 	bic.w	r2, r5, #7
   82224:	f102 0108 	add.w	r1, r2, #8
   82228:	e9d2 6700 	ldrd	r6, r7, [r2]
   8222c:	9107      	str	r1, [sp, #28]
   8222e:	2200      	movs	r2, #0
   82230:	f7ff bb9b 	b.w	8196a <_vfiprintf_r+0x272>
   82234:	9d07      	ldr	r5, [sp, #28]
   82236:	3507      	adds	r5, #7
   82238:	f025 0107 	bic.w	r1, r5, #7
   8223c:	f101 0008 	add.w	r0, r1, #8
   82240:	9007      	str	r0, [sp, #28]
   82242:	e9d1 6700 	ldrd	r6, r7, [r1]
   82246:	e51c      	b.n	81c82 <_vfiprintf_r+0x58a>
   82248:	46d3      	mov	fp, sl
   8224a:	f7ff bbad 	b.w	819a8 <_vfiprintf_r+0x2b0>
   8224e:	252d      	movs	r5, #45	; 0x2d
   82250:	4276      	negs	r6, r6
   82252:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82256:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8225a:	2201      	movs	r2, #1
   8225c:	f7ff bb8a 	b.w	81974 <_vfiprintf_r+0x27c>
   82260:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82262:	b9b3      	cbnz	r3, 82292 <_vfiprintf_r+0xb9a>
   82264:	4611      	mov	r1, r2
   82266:	2001      	movs	r0, #1
   82268:	46d1      	mov	r9, sl
   8226a:	e5f2      	b.n	81e52 <_vfiprintf_r+0x75a>
   8226c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82270:	f000 fdf4 	bl	82e5c <__retarget_lock_release_recursive>
   82274:	f04f 33ff 	mov.w	r3, #4294967295
   82278:	9303      	str	r3, [sp, #12]
   8227a:	f7ff bb4c 	b.w	81916 <_vfiprintf_r+0x21e>
   8227e:	aa0f      	add	r2, sp, #60	; 0x3c
   82280:	9904      	ldr	r1, [sp, #16]
   82282:	9806      	ldr	r0, [sp, #24]
   82284:	f7ff f9f8 	bl	81678 <__sprint_r.part.0>
   82288:	2800      	cmp	r0, #0
   8228a:	f47f aeec 	bne.w	82066 <_vfiprintf_r+0x96e>
   8228e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82290:	e6aa      	b.n	81fe8 <_vfiprintf_r+0x8f0>
   82292:	2202      	movs	r2, #2
   82294:	ab0e      	add	r3, sp, #56	; 0x38
   82296:	921d      	str	r2, [sp, #116]	; 0x74
   82298:	931c      	str	r3, [sp, #112]	; 0x70
   8229a:	2001      	movs	r0, #1
   8229c:	46d1      	mov	r9, sl
   8229e:	e5d0      	b.n	81e42 <_vfiprintf_r+0x74a>
   822a0:	4d34      	ldr	r5, [pc, #208]	; (82374 <_vfiprintf_r+0xc7c>)
   822a2:	e5fd      	b.n	81ea0 <_vfiprintf_r+0x7a8>
   822a4:	9a07      	ldr	r2, [sp, #28]
   822a6:	4613      	mov	r3, r2
   822a8:	3304      	adds	r3, #4
   822aa:	9307      	str	r3, [sp, #28]
   822ac:	9b03      	ldr	r3, [sp, #12]
   822ae:	6811      	ldr	r1, [r2, #0]
   822b0:	17dd      	asrs	r5, r3, #31
   822b2:	461a      	mov	r2, r3
   822b4:	462b      	mov	r3, r5
   822b6:	e9c1 2300 	strd	r2, r3, [r1]
   822ba:	f7ff ba5a 	b.w	81772 <_vfiprintf_r+0x7a>
   822be:	4658      	mov	r0, fp
   822c0:	9507      	str	r5, [sp, #28]
   822c2:	9302      	str	r3, [sp, #8]
   822c4:	f7ff f9aa 	bl	8161c <strlen>
   822c8:	2400      	movs	r4, #0
   822ca:	9005      	str	r0, [sp, #20]
   822cc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   822d0:	f7ff bb6a 	b.w	819a8 <_vfiprintf_r+0x2b0>
   822d4:	aa0f      	add	r2, sp, #60	; 0x3c
   822d6:	9904      	ldr	r1, [sp, #16]
   822d8:	9806      	ldr	r0, [sp, #24]
   822da:	f7ff f9cd 	bl	81678 <__sprint_r.part.0>
   822de:	2800      	cmp	r0, #0
   822e0:	f47f aec1 	bne.w	82066 <_vfiprintf_r+0x96e>
   822e4:	9910      	ldr	r1, [sp, #64]	; 0x40
   822e6:	46d1      	mov	r9, sl
   822e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   822ea:	1c48      	adds	r0, r1, #1
   822ec:	e5b1      	b.n	81e52 <_vfiprintf_r+0x75a>
   822ee:	9910      	ldr	r1, [sp, #64]	; 0x40
   822f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   822f2:	3101      	adds	r1, #1
   822f4:	4e20      	ldr	r6, [pc, #128]	; (82378 <_vfiprintf_r+0xc80>)
   822f6:	f7ff bb9c 	b.w	81a32 <_vfiprintf_r+0x33a>
   822fa:	2c06      	cmp	r4, #6
   822fc:	bf28      	it	cs
   822fe:	2406      	movcs	r4, #6
   82300:	9507      	str	r5, [sp, #28]
   82302:	9405      	str	r4, [sp, #20]
   82304:	9401      	str	r4, [sp, #4]
   82306:	f8df b074 	ldr.w	fp, [pc, #116]	; 8237c <_vfiprintf_r+0xc84>
   8230a:	e4e3      	b.n	81cd4 <_vfiprintf_r+0x5dc>
   8230c:	9810      	ldr	r0, [sp, #64]	; 0x40
   8230e:	4e1a      	ldr	r6, [pc, #104]	; (82378 <_vfiprintf_r+0xc80>)
   82310:	3001      	adds	r0, #1
   82312:	e60e      	b.n	81f32 <_vfiprintf_r+0x83a>
   82314:	4686      	mov	lr, r0
   82316:	4d17      	ldr	r5, [pc, #92]	; (82374 <_vfiprintf_r+0xc7c>)
   82318:	f7ff bbe2 	b.w	81ae0 <_vfiprintf_r+0x3e8>
   8231c:	9405      	str	r4, [sp, #20]
   8231e:	9507      	str	r5, [sp, #28]
   82320:	9302      	str	r3, [sp, #8]
   82322:	4604      	mov	r4, r0
   82324:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82328:	f7ff bb3e 	b.w	819a8 <_vfiprintf_r+0x2b0>
   8232c:	9806      	ldr	r0, [sp, #24]
   8232e:	aa0f      	add	r2, sp, #60	; 0x3c
   82330:	4659      	mov	r1, fp
   82332:	f7ff f9a1 	bl	81678 <__sprint_r.part.0>
   82336:	2800      	cmp	r0, #0
   82338:	f43f ae2e 	beq.w	81f98 <_vfiprintf_r+0x8a0>
   8233c:	e62e      	b.n	81f9c <_vfiprintf_r+0x8a4>
   8233e:	9907      	ldr	r1, [sp, #28]
   82340:	f898 2001 	ldrb.w	r2, [r8, #1]
   82344:	680c      	ldr	r4, [r1, #0]
   82346:	3104      	adds	r1, #4
   82348:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   8234c:	46b8      	mov	r8, r7
   8234e:	9107      	str	r1, [sp, #28]
   82350:	f7ff ba44 	b.w	817dc <_vfiprintf_r+0xe4>
   82354:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82358:	e4a7      	b.n	81caa <_vfiprintf_r+0x5b2>
   8235a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8235e:	e521      	b.n	81da4 <_vfiprintf_r+0x6ac>
   82360:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82364:	e47c      	b.n	81c60 <_vfiprintf_r+0x568>
   82366:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8236a:	e43f      	b.n	81bec <_vfiprintf_r+0x4f4>
   8236c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82370:	f7ff bbfa 	b.w	81b68 <_vfiprintf_r+0x470>
   82374:	00084288 	.word	0x00084288
   82378:	00084278 	.word	0x00084278
   8237c:	00084270 	.word	0x00084270

00082380 <__sbprintf>:
   82380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82384:	460c      	mov	r4, r1
   82386:	f04f 0e00 	mov.w	lr, #0
   8238a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8238e:	4606      	mov	r6, r0
   82390:	4617      	mov	r7, r2
   82392:	4698      	mov	r8, r3
   82394:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82396:	89e3      	ldrh	r3, [r4, #14]
   82398:	8989      	ldrh	r1, [r1, #12]
   8239a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8239e:	f021 0102 	bic.w	r1, r1, #2
   823a2:	9219      	str	r2, [sp, #100]	; 0x64
   823a4:	f8ad 300e 	strh.w	r3, [sp, #14]
   823a8:	69e2      	ldr	r2, [r4, #28]
   823aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   823ac:	f8ad 100c 	strh.w	r1, [sp, #12]
   823b0:	a816      	add	r0, sp, #88	; 0x58
   823b2:	a91a      	add	r1, sp, #104	; 0x68
   823b4:	f8cd e018 	str.w	lr, [sp, #24]
   823b8:	9207      	str	r2, [sp, #28]
   823ba:	9309      	str	r3, [sp, #36]	; 0x24
   823bc:	9100      	str	r1, [sp, #0]
   823be:	9104      	str	r1, [sp, #16]
   823c0:	9502      	str	r5, [sp, #8]
   823c2:	9505      	str	r5, [sp, #20]
   823c4:	f000 fd44 	bl	82e50 <__retarget_lock_init_recursive>
   823c8:	4643      	mov	r3, r8
   823ca:	463a      	mov	r2, r7
   823cc:	4669      	mov	r1, sp
   823ce:	4630      	mov	r0, r6
   823d0:	f7ff f992 	bl	816f8 <_vfiprintf_r>
   823d4:	1e05      	subs	r5, r0, #0
   823d6:	db07      	blt.n	823e8 <__sbprintf+0x68>
   823d8:	4630      	mov	r0, r6
   823da:	4669      	mov	r1, sp
   823dc:	f000 f924 	bl	82628 <_fflush_r>
   823e0:	2800      	cmp	r0, #0
   823e2:	bf18      	it	ne
   823e4:	f04f 35ff 	movne.w	r5, #4294967295
   823e8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   823ec:	065b      	lsls	r3, r3, #25
   823ee:	d503      	bpl.n	823f8 <__sbprintf+0x78>
   823f0:	89a3      	ldrh	r3, [r4, #12]
   823f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823f6:	81a3      	strh	r3, [r4, #12]
   823f8:	9816      	ldr	r0, [sp, #88]	; 0x58
   823fa:	f000 fd2b 	bl	82e54 <__retarget_lock_close_recursive>
   823fe:	4628      	mov	r0, r5
   82400:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082408 <__swsetup_r>:
   82408:	b538      	push	{r3, r4, r5, lr}
   8240a:	4b30      	ldr	r3, [pc, #192]	; (824cc <__swsetup_r+0xc4>)
   8240c:	4605      	mov	r5, r0
   8240e:	6818      	ldr	r0, [r3, #0]
   82410:	460c      	mov	r4, r1
   82412:	b110      	cbz	r0, 8241a <__swsetup_r+0x12>
   82414:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82416:	2b00      	cmp	r3, #0
   82418:	d038      	beq.n	8248c <__swsetup_r+0x84>
   8241a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8241e:	b293      	uxth	r3, r2
   82420:	0718      	lsls	r0, r3, #28
   82422:	d50c      	bpl.n	8243e <__swsetup_r+0x36>
   82424:	6920      	ldr	r0, [r4, #16]
   82426:	b1a8      	cbz	r0, 82454 <__swsetup_r+0x4c>
   82428:	f013 0201 	ands.w	r2, r3, #1
   8242c:	d01e      	beq.n	8246c <__swsetup_r+0x64>
   8242e:	2200      	movs	r2, #0
   82430:	6963      	ldr	r3, [r4, #20]
   82432:	60a2      	str	r2, [r4, #8]
   82434:	425b      	negs	r3, r3
   82436:	61a3      	str	r3, [r4, #24]
   82438:	b1f0      	cbz	r0, 82478 <__swsetup_r+0x70>
   8243a:	2000      	movs	r0, #0
   8243c:	bd38      	pop	{r3, r4, r5, pc}
   8243e:	06d9      	lsls	r1, r3, #27
   82440:	d53b      	bpl.n	824ba <__swsetup_r+0xb2>
   82442:	0758      	lsls	r0, r3, #29
   82444:	d425      	bmi.n	82492 <__swsetup_r+0x8a>
   82446:	6920      	ldr	r0, [r4, #16]
   82448:	f042 0308 	orr.w	r3, r2, #8
   8244c:	81a3      	strh	r3, [r4, #12]
   8244e:	b29b      	uxth	r3, r3
   82450:	2800      	cmp	r0, #0
   82452:	d1e9      	bne.n	82428 <__swsetup_r+0x20>
   82454:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82458:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8245c:	d0e4      	beq.n	82428 <__swsetup_r+0x20>
   8245e:	4628      	mov	r0, r5
   82460:	4621      	mov	r1, r4
   82462:	f000 fd2b 	bl	82ebc <__smakebuf_r>
   82466:	89a3      	ldrh	r3, [r4, #12]
   82468:	6920      	ldr	r0, [r4, #16]
   8246a:	e7dd      	b.n	82428 <__swsetup_r+0x20>
   8246c:	0799      	lsls	r1, r3, #30
   8246e:	bf58      	it	pl
   82470:	6962      	ldrpl	r2, [r4, #20]
   82472:	60a2      	str	r2, [r4, #8]
   82474:	2800      	cmp	r0, #0
   82476:	d1e0      	bne.n	8243a <__swsetup_r+0x32>
   82478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8247c:	061a      	lsls	r2, r3, #24
   8247e:	d5dd      	bpl.n	8243c <__swsetup_r+0x34>
   82480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82484:	81a3      	strh	r3, [r4, #12]
   82486:	f04f 30ff 	mov.w	r0, #4294967295
   8248a:	bd38      	pop	{r3, r4, r5, pc}
   8248c:	f000 f924 	bl	826d8 <__sinit>
   82490:	e7c3      	b.n	8241a <__swsetup_r+0x12>
   82492:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82494:	b151      	cbz	r1, 824ac <__swsetup_r+0xa4>
   82496:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8249a:	4299      	cmp	r1, r3
   8249c:	d004      	beq.n	824a8 <__swsetup_r+0xa0>
   8249e:	4628      	mov	r0, r5
   824a0:	f000 fa40 	bl	82924 <_free_r>
   824a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   824a8:	2300      	movs	r3, #0
   824aa:	6323      	str	r3, [r4, #48]	; 0x30
   824ac:	2300      	movs	r3, #0
   824ae:	6920      	ldr	r0, [r4, #16]
   824b0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   824b4:	e884 0009 	stmia.w	r4, {r0, r3}
   824b8:	e7c6      	b.n	82448 <__swsetup_r+0x40>
   824ba:	2309      	movs	r3, #9
   824bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   824c0:	602b      	str	r3, [r5, #0]
   824c2:	f04f 30ff 	mov.w	r0, #4294967295
   824c6:	81a2      	strh	r2, [r4, #12]
   824c8:	bd38      	pop	{r3, r4, r5, pc}
   824ca:	bf00      	nop
   824cc:	20070134 	.word	0x20070134

000824d0 <register_fini>:
   824d0:	4b02      	ldr	r3, [pc, #8]	; (824dc <register_fini+0xc>)
   824d2:	b113      	cbz	r3, 824da <register_fini+0xa>
   824d4:	4802      	ldr	r0, [pc, #8]	; (824e0 <register_fini+0x10>)
   824d6:	f000 b805 	b.w	824e4 <atexit>
   824da:	4770      	bx	lr
   824dc:	00000000 	.word	0x00000000
   824e0:	00082751 	.word	0x00082751

000824e4 <atexit>:
   824e4:	2300      	movs	r3, #0
   824e6:	4601      	mov	r1, r0
   824e8:	461a      	mov	r2, r3
   824ea:	4618      	mov	r0, r3
   824ec:	f001 bbcc 	b.w	83c88 <__register_exitproc>

000824f0 <__sflush_r>:
   824f0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   824f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824f8:	b29a      	uxth	r2, r3
   824fa:	460d      	mov	r5, r1
   824fc:	0711      	lsls	r1, r2, #28
   824fe:	4680      	mov	r8, r0
   82500:	d43a      	bmi.n	82578 <__sflush_r+0x88>
   82502:	686a      	ldr	r2, [r5, #4]
   82504:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82508:	2a00      	cmp	r2, #0
   8250a:	81ab      	strh	r3, [r5, #12]
   8250c:	dd70      	ble.n	825f0 <__sflush_r+0x100>
   8250e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82510:	2c00      	cmp	r4, #0
   82512:	d04a      	beq.n	825aa <__sflush_r+0xba>
   82514:	2200      	movs	r2, #0
   82516:	b29b      	uxth	r3, r3
   82518:	f8d8 6000 	ldr.w	r6, [r8]
   8251c:	f8c8 2000 	str.w	r2, [r8]
   82520:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82524:	d068      	beq.n	825f8 <__sflush_r+0x108>
   82526:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82528:	075f      	lsls	r7, r3, #29
   8252a:	d505      	bpl.n	82538 <__sflush_r+0x48>
   8252c:	6869      	ldr	r1, [r5, #4]
   8252e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82530:	1a52      	subs	r2, r2, r1
   82532:	b10b      	cbz	r3, 82538 <__sflush_r+0x48>
   82534:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82536:	1ad2      	subs	r2, r2, r3
   82538:	2300      	movs	r3, #0
   8253a:	69e9      	ldr	r1, [r5, #28]
   8253c:	4640      	mov	r0, r8
   8253e:	47a0      	blx	r4
   82540:	1c44      	adds	r4, r0, #1
   82542:	d03d      	beq.n	825c0 <__sflush_r+0xd0>
   82544:	2100      	movs	r1, #0
   82546:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8254a:	692a      	ldr	r2, [r5, #16]
   8254c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82550:	81ab      	strh	r3, [r5, #12]
   82552:	04db      	lsls	r3, r3, #19
   82554:	6069      	str	r1, [r5, #4]
   82556:	602a      	str	r2, [r5, #0]
   82558:	d448      	bmi.n	825ec <__sflush_r+0xfc>
   8255a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8255c:	f8c8 6000 	str.w	r6, [r8]
   82560:	b319      	cbz	r1, 825aa <__sflush_r+0xba>
   82562:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82566:	4299      	cmp	r1, r3
   82568:	d002      	beq.n	82570 <__sflush_r+0x80>
   8256a:	4640      	mov	r0, r8
   8256c:	f000 f9da 	bl	82924 <_free_r>
   82570:	2000      	movs	r0, #0
   82572:	6328      	str	r0, [r5, #48]	; 0x30
   82574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82578:	692e      	ldr	r6, [r5, #16]
   8257a:	b1b6      	cbz	r6, 825aa <__sflush_r+0xba>
   8257c:	0791      	lsls	r1, r2, #30
   8257e:	bf18      	it	ne
   82580:	2300      	movne	r3, #0
   82582:	682c      	ldr	r4, [r5, #0]
   82584:	bf08      	it	eq
   82586:	696b      	ldreq	r3, [r5, #20]
   82588:	602e      	str	r6, [r5, #0]
   8258a:	1ba4      	subs	r4, r4, r6
   8258c:	60ab      	str	r3, [r5, #8]
   8258e:	e00a      	b.n	825a6 <__sflush_r+0xb6>
   82590:	4623      	mov	r3, r4
   82592:	4632      	mov	r2, r6
   82594:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82596:	69e9      	ldr	r1, [r5, #28]
   82598:	4640      	mov	r0, r8
   8259a:	47b8      	blx	r7
   8259c:	2800      	cmp	r0, #0
   8259e:	eba4 0400 	sub.w	r4, r4, r0
   825a2:	4406      	add	r6, r0
   825a4:	dd04      	ble.n	825b0 <__sflush_r+0xc0>
   825a6:	2c00      	cmp	r4, #0
   825a8:	dcf2      	bgt.n	82590 <__sflush_r+0xa0>
   825aa:	2000      	movs	r0, #0
   825ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825b0:	89ab      	ldrh	r3, [r5, #12]
   825b2:	f04f 30ff 	mov.w	r0, #4294967295
   825b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825ba:	81ab      	strh	r3, [r5, #12]
   825bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   825c0:	f8d8 4000 	ldr.w	r4, [r8]
   825c4:	2c1d      	cmp	r4, #29
   825c6:	d8f3      	bhi.n	825b0 <__sflush_r+0xc0>
   825c8:	4b16      	ldr	r3, [pc, #88]	; (82624 <__sflush_r+0x134>)
   825ca:	40e3      	lsrs	r3, r4
   825cc:	43db      	mvns	r3, r3
   825ce:	f013 0301 	ands.w	r3, r3, #1
   825d2:	d1ed      	bne.n	825b0 <__sflush_r+0xc0>
   825d4:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   825d8:	6929      	ldr	r1, [r5, #16]
   825da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   825de:	81aa      	strh	r2, [r5, #12]
   825e0:	04d2      	lsls	r2, r2, #19
   825e2:	606b      	str	r3, [r5, #4]
   825e4:	6029      	str	r1, [r5, #0]
   825e6:	d5b8      	bpl.n	8255a <__sflush_r+0x6a>
   825e8:	2c00      	cmp	r4, #0
   825ea:	d1b6      	bne.n	8255a <__sflush_r+0x6a>
   825ec:	6528      	str	r0, [r5, #80]	; 0x50
   825ee:	e7b4      	b.n	8255a <__sflush_r+0x6a>
   825f0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   825f2:	2a00      	cmp	r2, #0
   825f4:	dc8b      	bgt.n	8250e <__sflush_r+0x1e>
   825f6:	e7d8      	b.n	825aa <__sflush_r+0xba>
   825f8:	2301      	movs	r3, #1
   825fa:	69e9      	ldr	r1, [r5, #28]
   825fc:	4640      	mov	r0, r8
   825fe:	47a0      	blx	r4
   82600:	1c43      	adds	r3, r0, #1
   82602:	4602      	mov	r2, r0
   82604:	d002      	beq.n	8260c <__sflush_r+0x11c>
   82606:	89ab      	ldrh	r3, [r5, #12]
   82608:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8260a:	e78d      	b.n	82528 <__sflush_r+0x38>
   8260c:	f8d8 3000 	ldr.w	r3, [r8]
   82610:	2b00      	cmp	r3, #0
   82612:	d0f8      	beq.n	82606 <__sflush_r+0x116>
   82614:	2b1d      	cmp	r3, #29
   82616:	d001      	beq.n	8261c <__sflush_r+0x12c>
   82618:	2b16      	cmp	r3, #22
   8261a:	d1c9      	bne.n	825b0 <__sflush_r+0xc0>
   8261c:	f8c8 6000 	str.w	r6, [r8]
   82620:	e7c3      	b.n	825aa <__sflush_r+0xba>
   82622:	bf00      	nop
   82624:	20400001 	.word	0x20400001

00082628 <_fflush_r>:
   82628:	b538      	push	{r3, r4, r5, lr}
   8262a:	460d      	mov	r5, r1
   8262c:	4604      	mov	r4, r0
   8262e:	b108      	cbz	r0, 82634 <_fflush_r+0xc>
   82630:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82632:	b1bb      	cbz	r3, 82664 <_fflush_r+0x3c>
   82634:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82638:	b188      	cbz	r0, 8265e <_fflush_r+0x36>
   8263a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8263c:	07db      	lsls	r3, r3, #31
   8263e:	d401      	bmi.n	82644 <_fflush_r+0x1c>
   82640:	0581      	lsls	r1, r0, #22
   82642:	d517      	bpl.n	82674 <_fflush_r+0x4c>
   82644:	4620      	mov	r0, r4
   82646:	4629      	mov	r1, r5
   82648:	f7ff ff52 	bl	824f0 <__sflush_r>
   8264c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8264e:	4604      	mov	r4, r0
   82650:	07da      	lsls	r2, r3, #31
   82652:	d402      	bmi.n	8265a <_fflush_r+0x32>
   82654:	89ab      	ldrh	r3, [r5, #12]
   82656:	059b      	lsls	r3, r3, #22
   82658:	d507      	bpl.n	8266a <_fflush_r+0x42>
   8265a:	4620      	mov	r0, r4
   8265c:	bd38      	pop	{r3, r4, r5, pc}
   8265e:	4604      	mov	r4, r0
   82660:	4620      	mov	r0, r4
   82662:	bd38      	pop	{r3, r4, r5, pc}
   82664:	f000 f838 	bl	826d8 <__sinit>
   82668:	e7e4      	b.n	82634 <_fflush_r+0xc>
   8266a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8266c:	f000 fbf6 	bl	82e5c <__retarget_lock_release_recursive>
   82670:	4620      	mov	r0, r4
   82672:	bd38      	pop	{r3, r4, r5, pc}
   82674:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82676:	f000 fbef 	bl	82e58 <__retarget_lock_acquire_recursive>
   8267a:	e7e3      	b.n	82644 <_fflush_r+0x1c>

0008267c <_cleanup_r>:
   8267c:	4901      	ldr	r1, [pc, #4]	; (82684 <_cleanup_r+0x8>)
   8267e:	f000 bbb1 	b.w	82de4 <_fwalk_reent>
   82682:	bf00      	nop
   82684:	00083d71 	.word	0x00083d71

00082688 <std.isra.0>:
   82688:	2300      	movs	r3, #0
   8268a:	b510      	push	{r4, lr}
   8268c:	4604      	mov	r4, r0
   8268e:	8181      	strh	r1, [r0, #12]
   82690:	81c2      	strh	r2, [r0, #14]
   82692:	6003      	str	r3, [r0, #0]
   82694:	6043      	str	r3, [r0, #4]
   82696:	6083      	str	r3, [r0, #8]
   82698:	6643      	str	r3, [r0, #100]	; 0x64
   8269a:	6103      	str	r3, [r0, #16]
   8269c:	6143      	str	r3, [r0, #20]
   8269e:	6183      	str	r3, [r0, #24]
   826a0:	4619      	mov	r1, r3
   826a2:	2208      	movs	r2, #8
   826a4:	305c      	adds	r0, #92	; 0x5c
   826a6:	f7fe fe9b 	bl	813e0 <memset>
   826aa:	4807      	ldr	r0, [pc, #28]	; (826c8 <std.isra.0+0x40>)
   826ac:	4907      	ldr	r1, [pc, #28]	; (826cc <std.isra.0+0x44>)
   826ae:	4a08      	ldr	r2, [pc, #32]	; (826d0 <std.isra.0+0x48>)
   826b0:	4b08      	ldr	r3, [pc, #32]	; (826d4 <std.isra.0+0x4c>)
   826b2:	6220      	str	r0, [r4, #32]
   826b4:	61e4      	str	r4, [r4, #28]
   826b6:	6261      	str	r1, [r4, #36]	; 0x24
   826b8:	62a2      	str	r2, [r4, #40]	; 0x28
   826ba:	62e3      	str	r3, [r4, #44]	; 0x2c
   826bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   826c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   826c4:	f000 bbc4 	b.w	82e50 <__retarget_lock_init_recursive>
   826c8:	00083ab9 	.word	0x00083ab9
   826cc:	00083add 	.word	0x00083add
   826d0:	00083b19 	.word	0x00083b19
   826d4:	00083b39 	.word	0x00083b39

000826d8 <__sinit>:
   826d8:	b510      	push	{r4, lr}
   826da:	4604      	mov	r4, r0
   826dc:	4814      	ldr	r0, [pc, #80]	; (82730 <__sinit+0x58>)
   826de:	f000 fbbb 	bl	82e58 <__retarget_lock_acquire_recursive>
   826e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   826e4:	b9fa      	cbnz	r2, 82726 <__sinit+0x4e>
   826e6:	2003      	movs	r0, #3
   826e8:	4912      	ldr	r1, [pc, #72]	; (82734 <__sinit+0x5c>)
   826ea:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   826ee:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   826f2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   826f6:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   826fa:	63e1      	str	r1, [r4, #60]	; 0x3c
   826fc:	6860      	ldr	r0, [r4, #4]
   826fe:	2104      	movs	r1, #4
   82700:	f7ff ffc2 	bl	82688 <std.isra.0>
   82704:	68a0      	ldr	r0, [r4, #8]
   82706:	2201      	movs	r2, #1
   82708:	2109      	movs	r1, #9
   8270a:	f7ff ffbd 	bl	82688 <std.isra.0>
   8270e:	68e0      	ldr	r0, [r4, #12]
   82710:	2202      	movs	r2, #2
   82712:	2112      	movs	r1, #18
   82714:	f7ff ffb8 	bl	82688 <std.isra.0>
   82718:	2301      	movs	r3, #1
   8271a:	4805      	ldr	r0, [pc, #20]	; (82730 <__sinit+0x58>)
   8271c:	63a3      	str	r3, [r4, #56]	; 0x38
   8271e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82722:	f000 bb9b 	b.w	82e5c <__retarget_lock_release_recursive>
   82726:	4802      	ldr	r0, [pc, #8]	; (82730 <__sinit+0x58>)
   82728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8272c:	f000 bb96 	b.w	82e5c <__retarget_lock_release_recursive>
   82730:	20071c68 	.word	0x20071c68
   82734:	0008267d 	.word	0x0008267d

00082738 <__sfp_lock_acquire>:
   82738:	4801      	ldr	r0, [pc, #4]	; (82740 <__sfp_lock_acquire+0x8>)
   8273a:	f000 bb8d 	b.w	82e58 <__retarget_lock_acquire_recursive>
   8273e:	bf00      	nop
   82740:	20071c7c 	.word	0x20071c7c

00082744 <__sfp_lock_release>:
   82744:	4801      	ldr	r0, [pc, #4]	; (8274c <__sfp_lock_release+0x8>)
   82746:	f000 bb89 	b.w	82e5c <__retarget_lock_release_recursive>
   8274a:	bf00      	nop
   8274c:	20071c7c 	.word	0x20071c7c

00082750 <__libc_fini_array>:
   82750:	b538      	push	{r3, r4, r5, lr}
   82752:	4c0a      	ldr	r4, [pc, #40]	; (8277c <__libc_fini_array+0x2c>)
   82754:	4d0a      	ldr	r5, [pc, #40]	; (82780 <__libc_fini_array+0x30>)
   82756:	1b64      	subs	r4, r4, r5
   82758:	10a4      	asrs	r4, r4, #2
   8275a:	d00a      	beq.n	82772 <__libc_fini_array+0x22>
   8275c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82760:	3b01      	subs	r3, #1
   82762:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82766:	3c01      	subs	r4, #1
   82768:	f855 3904 	ldr.w	r3, [r5], #-4
   8276c:	4798      	blx	r3
   8276e:	2c00      	cmp	r4, #0
   82770:	d1f9      	bne.n	82766 <__libc_fini_array+0x16>
   82772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82776:	f001 be23 	b.w	843c0 <_fini>
   8277a:	bf00      	nop
   8277c:	000843d0 	.word	0x000843d0
   82780:	000843cc 	.word	0x000843cc

00082784 <__fputwc>:
   82784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82788:	b083      	sub	sp, #12
   8278a:	4607      	mov	r7, r0
   8278c:	4688      	mov	r8, r1
   8278e:	4614      	mov	r4, r2
   82790:	f000 fb50 	bl	82e34 <__locale_mb_cur_max>
   82794:	2801      	cmp	r0, #1
   82796:	d033      	beq.n	82800 <__fputwc+0x7c>
   82798:	4642      	mov	r2, r8
   8279a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8279e:	a901      	add	r1, sp, #4
   827a0:	4638      	mov	r0, r7
   827a2:	f001 fa25 	bl	83bf0 <_wcrtomb_r>
   827a6:	1c42      	adds	r2, r0, #1
   827a8:	4606      	mov	r6, r0
   827aa:	d022      	beq.n	827f2 <__fputwc+0x6e>
   827ac:	b390      	cbz	r0, 82814 <__fputwc+0x90>
   827ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
   827b2:	2500      	movs	r5, #0
   827b4:	f10d 0904 	add.w	r9, sp, #4
   827b8:	e008      	b.n	827cc <__fputwc+0x48>
   827ba:	6823      	ldr	r3, [r4, #0]
   827bc:	1c5a      	adds	r2, r3, #1
   827be:	6022      	str	r2, [r4, #0]
   827c0:	7019      	strb	r1, [r3, #0]
   827c2:	3501      	adds	r5, #1
   827c4:	42b5      	cmp	r5, r6
   827c6:	d225      	bcs.n	82814 <__fputwc+0x90>
   827c8:	f815 1009 	ldrb.w	r1, [r5, r9]
   827cc:	68a3      	ldr	r3, [r4, #8]
   827ce:	3b01      	subs	r3, #1
   827d0:	2b00      	cmp	r3, #0
   827d2:	60a3      	str	r3, [r4, #8]
   827d4:	daf1      	bge.n	827ba <__fputwc+0x36>
   827d6:	69a2      	ldr	r2, [r4, #24]
   827d8:	4293      	cmp	r3, r2
   827da:	db01      	blt.n	827e0 <__fputwc+0x5c>
   827dc:	290a      	cmp	r1, #10
   827de:	d1ec      	bne.n	827ba <__fputwc+0x36>
   827e0:	4622      	mov	r2, r4
   827e2:	4638      	mov	r0, r7
   827e4:	f001 f9ac 	bl	83b40 <__swbuf_r>
   827e8:	1c43      	adds	r3, r0, #1
   827ea:	d1ea      	bne.n	827c2 <__fputwc+0x3e>
   827ec:	b003      	add	sp, #12
   827ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   827f2:	89a3      	ldrh	r3, [r4, #12]
   827f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   827f8:	81a3      	strh	r3, [r4, #12]
   827fa:	b003      	add	sp, #12
   827fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82800:	f108 33ff 	add.w	r3, r8, #4294967295
   82804:	2bfe      	cmp	r3, #254	; 0xfe
   82806:	d8c7      	bhi.n	82798 <__fputwc+0x14>
   82808:	fa5f f188 	uxtb.w	r1, r8
   8280c:	4606      	mov	r6, r0
   8280e:	f88d 1004 	strb.w	r1, [sp, #4]
   82812:	e7ce      	b.n	827b2 <__fputwc+0x2e>
   82814:	4640      	mov	r0, r8
   82816:	b003      	add	sp, #12
   82818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008281c <_fputwc_r>:
   8281c:	b530      	push	{r4, r5, lr}
   8281e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82820:	4614      	mov	r4, r2
   82822:	f013 0f01 	tst.w	r3, #1
   82826:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8282a:	b083      	sub	sp, #12
   8282c:	4605      	mov	r5, r0
   8282e:	b29a      	uxth	r2, r3
   82830:	d101      	bne.n	82836 <_fputwc_r+0x1a>
   82832:	0590      	lsls	r0, r2, #22
   82834:	d51c      	bpl.n	82870 <_fputwc_r+0x54>
   82836:	0490      	lsls	r0, r2, #18
   82838:	d406      	bmi.n	82848 <_fputwc_r+0x2c>
   8283a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8283c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82844:	81a3      	strh	r3, [r4, #12]
   82846:	6662      	str	r2, [r4, #100]	; 0x64
   82848:	4628      	mov	r0, r5
   8284a:	4622      	mov	r2, r4
   8284c:	f7ff ff9a 	bl	82784 <__fputwc>
   82850:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82852:	4605      	mov	r5, r0
   82854:	07da      	lsls	r2, r3, #31
   82856:	d402      	bmi.n	8285e <_fputwc_r+0x42>
   82858:	89a3      	ldrh	r3, [r4, #12]
   8285a:	059b      	lsls	r3, r3, #22
   8285c:	d502      	bpl.n	82864 <_fputwc_r+0x48>
   8285e:	4628      	mov	r0, r5
   82860:	b003      	add	sp, #12
   82862:	bd30      	pop	{r4, r5, pc}
   82864:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82866:	f000 faf9 	bl	82e5c <__retarget_lock_release_recursive>
   8286a:	4628      	mov	r0, r5
   8286c:	b003      	add	sp, #12
   8286e:	bd30      	pop	{r4, r5, pc}
   82870:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82872:	9101      	str	r1, [sp, #4]
   82874:	f000 faf0 	bl	82e58 <__retarget_lock_acquire_recursive>
   82878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8287c:	9901      	ldr	r1, [sp, #4]
   8287e:	b29a      	uxth	r2, r3
   82880:	e7d9      	b.n	82836 <_fputwc_r+0x1a>
   82882:	bf00      	nop

00082884 <_malloc_trim_r>:
   82884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82886:	460c      	mov	r4, r1
   82888:	4f23      	ldr	r7, [pc, #140]	; (82918 <_malloc_trim_r+0x94>)
   8288a:	4606      	mov	r6, r0
   8288c:	f000 ff40 	bl	83710 <__malloc_lock>
   82890:	68bb      	ldr	r3, [r7, #8]
   82892:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82896:	685d      	ldr	r5, [r3, #4]
   82898:	310f      	adds	r1, #15
   8289a:	f025 0503 	bic.w	r5, r5, #3
   8289e:	4429      	add	r1, r5
   828a0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   828a4:	f021 010f 	bic.w	r1, r1, #15
   828a8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   828ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   828b0:	db07      	blt.n	828c2 <_malloc_trim_r+0x3e>
   828b2:	2100      	movs	r1, #0
   828b4:	4630      	mov	r0, r6
   828b6:	f001 f8ed 	bl	83a94 <_sbrk_r>
   828ba:	68bb      	ldr	r3, [r7, #8]
   828bc:	442b      	add	r3, r5
   828be:	4298      	cmp	r0, r3
   828c0:	d004      	beq.n	828cc <_malloc_trim_r+0x48>
   828c2:	4630      	mov	r0, r6
   828c4:	f000 ff2a 	bl	8371c <__malloc_unlock>
   828c8:	2000      	movs	r0, #0
   828ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   828cc:	4261      	negs	r1, r4
   828ce:	4630      	mov	r0, r6
   828d0:	f001 f8e0 	bl	83a94 <_sbrk_r>
   828d4:	3001      	adds	r0, #1
   828d6:	d00d      	beq.n	828f4 <_malloc_trim_r+0x70>
   828d8:	4b10      	ldr	r3, [pc, #64]	; (8291c <_malloc_trim_r+0x98>)
   828da:	68ba      	ldr	r2, [r7, #8]
   828dc:	6819      	ldr	r1, [r3, #0]
   828de:	1b2d      	subs	r5, r5, r4
   828e0:	f045 0501 	orr.w	r5, r5, #1
   828e4:	4630      	mov	r0, r6
   828e6:	1b09      	subs	r1, r1, r4
   828e8:	6055      	str	r5, [r2, #4]
   828ea:	6019      	str	r1, [r3, #0]
   828ec:	f000 ff16 	bl	8371c <__malloc_unlock>
   828f0:	2001      	movs	r0, #1
   828f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   828f4:	2100      	movs	r1, #0
   828f6:	4630      	mov	r0, r6
   828f8:	f001 f8cc 	bl	83a94 <_sbrk_r>
   828fc:	68ba      	ldr	r2, [r7, #8]
   828fe:	1a83      	subs	r3, r0, r2
   82900:	2b0f      	cmp	r3, #15
   82902:	ddde      	ble.n	828c2 <_malloc_trim_r+0x3e>
   82904:	4c06      	ldr	r4, [pc, #24]	; (82920 <_malloc_trim_r+0x9c>)
   82906:	4905      	ldr	r1, [pc, #20]	; (8291c <_malloc_trim_r+0x98>)
   82908:	6824      	ldr	r4, [r4, #0]
   8290a:	f043 0301 	orr.w	r3, r3, #1
   8290e:	1b00      	subs	r0, r0, r4
   82910:	6053      	str	r3, [r2, #4]
   82912:	6008      	str	r0, [r1, #0]
   82914:	e7d5      	b.n	828c2 <_malloc_trim_r+0x3e>
   82916:	bf00      	nop
   82918:	200706d0 	.word	0x200706d0
   8291c:	20070c1c 	.word	0x20070c1c
   82920:	20070ad8 	.word	0x20070ad8

00082924 <_free_r>:
   82924:	2900      	cmp	r1, #0
   82926:	d044      	beq.n	829b2 <_free_r+0x8e>
   82928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8292c:	460d      	mov	r5, r1
   8292e:	4680      	mov	r8, r0
   82930:	f000 feee 	bl	83710 <__malloc_lock>
   82934:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82938:	4969      	ldr	r1, [pc, #420]	; (82ae0 <_free_r+0x1bc>)
   8293a:	f1a5 0408 	sub.w	r4, r5, #8
   8293e:	f027 0301 	bic.w	r3, r7, #1
   82942:	18e2      	adds	r2, r4, r3
   82944:	688e      	ldr	r6, [r1, #8]
   82946:	6850      	ldr	r0, [r2, #4]
   82948:	42b2      	cmp	r2, r6
   8294a:	f020 0003 	bic.w	r0, r0, #3
   8294e:	d05e      	beq.n	82a0e <_free_r+0xea>
   82950:	07fe      	lsls	r6, r7, #31
   82952:	6050      	str	r0, [r2, #4]
   82954:	d40b      	bmi.n	8296e <_free_r+0x4a>
   82956:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8295a:	f101 0e08 	add.w	lr, r1, #8
   8295e:	1be4      	subs	r4, r4, r7
   82960:	68a5      	ldr	r5, [r4, #8]
   82962:	443b      	add	r3, r7
   82964:	4575      	cmp	r5, lr
   82966:	d06d      	beq.n	82a44 <_free_r+0x120>
   82968:	68e7      	ldr	r7, [r4, #12]
   8296a:	60ef      	str	r7, [r5, #12]
   8296c:	60bd      	str	r5, [r7, #8]
   8296e:	1815      	adds	r5, r2, r0
   82970:	686d      	ldr	r5, [r5, #4]
   82972:	07ed      	lsls	r5, r5, #31
   82974:	d53e      	bpl.n	829f4 <_free_r+0xd0>
   82976:	f043 0201 	orr.w	r2, r3, #1
   8297a:	6062      	str	r2, [r4, #4]
   8297c:	50e3      	str	r3, [r4, r3]
   8297e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82982:	d217      	bcs.n	829b4 <_free_r+0x90>
   82984:	2201      	movs	r2, #1
   82986:	08db      	lsrs	r3, r3, #3
   82988:	1098      	asrs	r0, r3, #2
   8298a:	684d      	ldr	r5, [r1, #4]
   8298c:	4413      	add	r3, r2
   8298e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82992:	4082      	lsls	r2, r0
   82994:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82998:	432a      	orrs	r2, r5
   8299a:	3808      	subs	r0, #8
   8299c:	60e0      	str	r0, [r4, #12]
   8299e:	60a7      	str	r7, [r4, #8]
   829a0:	604a      	str	r2, [r1, #4]
   829a2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   829a6:	60fc      	str	r4, [r7, #12]
   829a8:	4640      	mov	r0, r8
   829aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   829ae:	f000 beb5 	b.w	8371c <__malloc_unlock>
   829b2:	4770      	bx	lr
   829b4:	0a5a      	lsrs	r2, r3, #9
   829b6:	2a04      	cmp	r2, #4
   829b8:	d852      	bhi.n	82a60 <_free_r+0x13c>
   829ba:	099a      	lsrs	r2, r3, #6
   829bc:	f102 0739 	add.w	r7, r2, #57	; 0x39
   829c0:	00ff      	lsls	r7, r7, #3
   829c2:	f102 0538 	add.w	r5, r2, #56	; 0x38
   829c6:	19c8      	adds	r0, r1, r7
   829c8:	59ca      	ldr	r2, [r1, r7]
   829ca:	3808      	subs	r0, #8
   829cc:	4290      	cmp	r0, r2
   829ce:	d04f      	beq.n	82a70 <_free_r+0x14c>
   829d0:	6851      	ldr	r1, [r2, #4]
   829d2:	f021 0103 	bic.w	r1, r1, #3
   829d6:	428b      	cmp	r3, r1
   829d8:	d232      	bcs.n	82a40 <_free_r+0x11c>
   829da:	6892      	ldr	r2, [r2, #8]
   829dc:	4290      	cmp	r0, r2
   829de:	d1f7      	bne.n	829d0 <_free_r+0xac>
   829e0:	68c3      	ldr	r3, [r0, #12]
   829e2:	60a0      	str	r0, [r4, #8]
   829e4:	60e3      	str	r3, [r4, #12]
   829e6:	609c      	str	r4, [r3, #8]
   829e8:	60c4      	str	r4, [r0, #12]
   829ea:	4640      	mov	r0, r8
   829ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   829f0:	f000 be94 	b.w	8371c <__malloc_unlock>
   829f4:	6895      	ldr	r5, [r2, #8]
   829f6:	4f3b      	ldr	r7, [pc, #236]	; (82ae4 <_free_r+0x1c0>)
   829f8:	4403      	add	r3, r0
   829fa:	42bd      	cmp	r5, r7
   829fc:	d040      	beq.n	82a80 <_free_r+0x15c>
   829fe:	68d0      	ldr	r0, [r2, #12]
   82a00:	f043 0201 	orr.w	r2, r3, #1
   82a04:	60e8      	str	r0, [r5, #12]
   82a06:	6085      	str	r5, [r0, #8]
   82a08:	6062      	str	r2, [r4, #4]
   82a0a:	50e3      	str	r3, [r4, r3]
   82a0c:	e7b7      	b.n	8297e <_free_r+0x5a>
   82a0e:	07ff      	lsls	r7, r7, #31
   82a10:	4403      	add	r3, r0
   82a12:	d407      	bmi.n	82a24 <_free_r+0x100>
   82a14:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82a18:	1b64      	subs	r4, r4, r5
   82a1a:	68e2      	ldr	r2, [r4, #12]
   82a1c:	68a0      	ldr	r0, [r4, #8]
   82a1e:	442b      	add	r3, r5
   82a20:	60c2      	str	r2, [r0, #12]
   82a22:	6090      	str	r0, [r2, #8]
   82a24:	4a30      	ldr	r2, [pc, #192]	; (82ae8 <_free_r+0x1c4>)
   82a26:	f043 0001 	orr.w	r0, r3, #1
   82a2a:	6812      	ldr	r2, [r2, #0]
   82a2c:	6060      	str	r0, [r4, #4]
   82a2e:	4293      	cmp	r3, r2
   82a30:	608c      	str	r4, [r1, #8]
   82a32:	d3b9      	bcc.n	829a8 <_free_r+0x84>
   82a34:	4b2d      	ldr	r3, [pc, #180]	; (82aec <_free_r+0x1c8>)
   82a36:	4640      	mov	r0, r8
   82a38:	6819      	ldr	r1, [r3, #0]
   82a3a:	f7ff ff23 	bl	82884 <_malloc_trim_r>
   82a3e:	e7b3      	b.n	829a8 <_free_r+0x84>
   82a40:	4610      	mov	r0, r2
   82a42:	e7cd      	b.n	829e0 <_free_r+0xbc>
   82a44:	1811      	adds	r1, r2, r0
   82a46:	6849      	ldr	r1, [r1, #4]
   82a48:	07c9      	lsls	r1, r1, #31
   82a4a:	d444      	bmi.n	82ad6 <_free_r+0x1b2>
   82a4c:	6891      	ldr	r1, [r2, #8]
   82a4e:	4403      	add	r3, r0
   82a50:	68d2      	ldr	r2, [r2, #12]
   82a52:	f043 0001 	orr.w	r0, r3, #1
   82a56:	60ca      	str	r2, [r1, #12]
   82a58:	6091      	str	r1, [r2, #8]
   82a5a:	6060      	str	r0, [r4, #4]
   82a5c:	50e3      	str	r3, [r4, r3]
   82a5e:	e7a3      	b.n	829a8 <_free_r+0x84>
   82a60:	2a14      	cmp	r2, #20
   82a62:	d816      	bhi.n	82a92 <_free_r+0x16e>
   82a64:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82a68:	00ff      	lsls	r7, r7, #3
   82a6a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82a6e:	e7aa      	b.n	829c6 <_free_r+0xa2>
   82a70:	2301      	movs	r3, #1
   82a72:	10aa      	asrs	r2, r5, #2
   82a74:	684d      	ldr	r5, [r1, #4]
   82a76:	4093      	lsls	r3, r2
   82a78:	432b      	orrs	r3, r5
   82a7a:	604b      	str	r3, [r1, #4]
   82a7c:	4603      	mov	r3, r0
   82a7e:	e7b0      	b.n	829e2 <_free_r+0xbe>
   82a80:	f043 0201 	orr.w	r2, r3, #1
   82a84:	614c      	str	r4, [r1, #20]
   82a86:	610c      	str	r4, [r1, #16]
   82a88:	60e5      	str	r5, [r4, #12]
   82a8a:	60a5      	str	r5, [r4, #8]
   82a8c:	6062      	str	r2, [r4, #4]
   82a8e:	50e3      	str	r3, [r4, r3]
   82a90:	e78a      	b.n	829a8 <_free_r+0x84>
   82a92:	2a54      	cmp	r2, #84	; 0x54
   82a94:	d806      	bhi.n	82aa4 <_free_r+0x180>
   82a96:	0b1a      	lsrs	r2, r3, #12
   82a98:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82a9c:	00ff      	lsls	r7, r7, #3
   82a9e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82aa2:	e790      	b.n	829c6 <_free_r+0xa2>
   82aa4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82aa8:	d806      	bhi.n	82ab8 <_free_r+0x194>
   82aaa:	0bda      	lsrs	r2, r3, #15
   82aac:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82ab0:	00ff      	lsls	r7, r7, #3
   82ab2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82ab6:	e786      	b.n	829c6 <_free_r+0xa2>
   82ab8:	f240 5054 	movw	r0, #1364	; 0x554
   82abc:	4282      	cmp	r2, r0
   82abe:	d806      	bhi.n	82ace <_free_r+0x1aa>
   82ac0:	0c9a      	lsrs	r2, r3, #18
   82ac2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82ac6:	00ff      	lsls	r7, r7, #3
   82ac8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82acc:	e77b      	b.n	829c6 <_free_r+0xa2>
   82ace:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82ad2:	257e      	movs	r5, #126	; 0x7e
   82ad4:	e777      	b.n	829c6 <_free_r+0xa2>
   82ad6:	f043 0101 	orr.w	r1, r3, #1
   82ada:	6061      	str	r1, [r4, #4]
   82adc:	6013      	str	r3, [r2, #0]
   82ade:	e763      	b.n	829a8 <_free_r+0x84>
   82ae0:	200706d0 	.word	0x200706d0
   82ae4:	200706d8 	.word	0x200706d8
   82ae8:	20070adc 	.word	0x20070adc
   82aec:	20070c4c 	.word	0x20070c4c

00082af0 <__sfvwrite_r>:
   82af0:	6893      	ldr	r3, [r2, #8]
   82af2:	2b00      	cmp	r3, #0
   82af4:	d071      	beq.n	82bda <__sfvwrite_r+0xea>
   82af6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82afa:	898b      	ldrh	r3, [r1, #12]
   82afc:	b083      	sub	sp, #12
   82afe:	460c      	mov	r4, r1
   82b00:	0719      	lsls	r1, r3, #28
   82b02:	9000      	str	r0, [sp, #0]
   82b04:	4616      	mov	r6, r2
   82b06:	d525      	bpl.n	82b54 <__sfvwrite_r+0x64>
   82b08:	6922      	ldr	r2, [r4, #16]
   82b0a:	b31a      	cbz	r2, 82b54 <__sfvwrite_r+0x64>
   82b0c:	f013 0002 	ands.w	r0, r3, #2
   82b10:	6835      	ldr	r5, [r6, #0]
   82b12:	d02b      	beq.n	82b6c <__sfvwrite_r+0x7c>
   82b14:	f04f 0900 	mov.w	r9, #0
   82b18:	46b0      	mov	r8, r6
   82b1a:	464f      	mov	r7, r9
   82b1c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82de0 <__sfvwrite_r+0x2f0>
   82b20:	2f00      	cmp	r7, #0
   82b22:	d055      	beq.n	82bd0 <__sfvwrite_r+0xe0>
   82b24:	4557      	cmp	r7, sl
   82b26:	463b      	mov	r3, r7
   82b28:	464a      	mov	r2, r9
   82b2a:	bf28      	it	cs
   82b2c:	4653      	movcs	r3, sl
   82b2e:	69e1      	ldr	r1, [r4, #28]
   82b30:	9800      	ldr	r0, [sp, #0]
   82b32:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82b34:	47b0      	blx	r6
   82b36:	2800      	cmp	r0, #0
   82b38:	dd56      	ble.n	82be8 <__sfvwrite_r+0xf8>
   82b3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   82b3e:	4481      	add	r9, r0
   82b40:	1a1b      	subs	r3, r3, r0
   82b42:	1a3f      	subs	r7, r7, r0
   82b44:	f8c8 3008 	str.w	r3, [r8, #8]
   82b48:	2b00      	cmp	r3, #0
   82b4a:	d1e9      	bne.n	82b20 <__sfvwrite_r+0x30>
   82b4c:	2000      	movs	r0, #0
   82b4e:	b003      	add	sp, #12
   82b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b54:	4621      	mov	r1, r4
   82b56:	9800      	ldr	r0, [sp, #0]
   82b58:	f7ff fc56 	bl	82408 <__swsetup_r>
   82b5c:	2800      	cmp	r0, #0
   82b5e:	f040 8135 	bne.w	82dcc <__sfvwrite_r+0x2dc>
   82b62:	89a3      	ldrh	r3, [r4, #12]
   82b64:	6835      	ldr	r5, [r6, #0]
   82b66:	f013 0002 	ands.w	r0, r3, #2
   82b6a:	d1d3      	bne.n	82b14 <__sfvwrite_r+0x24>
   82b6c:	f013 0901 	ands.w	r9, r3, #1
   82b70:	d144      	bne.n	82bfc <__sfvwrite_r+0x10c>
   82b72:	464f      	mov	r7, r9
   82b74:	9601      	str	r6, [sp, #4]
   82b76:	b337      	cbz	r7, 82bc6 <__sfvwrite_r+0xd6>
   82b78:	059a      	lsls	r2, r3, #22
   82b7a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82b7e:	f140 8085 	bpl.w	82c8c <__sfvwrite_r+0x19c>
   82b82:	4547      	cmp	r7, r8
   82b84:	46c3      	mov	fp, r8
   82b86:	f0c0 80ad 	bcc.w	82ce4 <__sfvwrite_r+0x1f4>
   82b8a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82b8e:	f040 80ae 	bne.w	82cee <__sfvwrite_r+0x1fe>
   82b92:	46ba      	mov	sl, r7
   82b94:	6820      	ldr	r0, [r4, #0]
   82b96:	465a      	mov	r2, fp
   82b98:	4649      	mov	r1, r9
   82b9a:	f000 fd55 	bl	83648 <memmove>
   82b9e:	68a2      	ldr	r2, [r4, #8]
   82ba0:	6823      	ldr	r3, [r4, #0]
   82ba2:	eba2 0208 	sub.w	r2, r2, r8
   82ba6:	445b      	add	r3, fp
   82ba8:	60a2      	str	r2, [r4, #8]
   82baa:	6023      	str	r3, [r4, #0]
   82bac:	9a01      	ldr	r2, [sp, #4]
   82bae:	44d1      	add	r9, sl
   82bb0:	6893      	ldr	r3, [r2, #8]
   82bb2:	eba7 070a 	sub.w	r7, r7, sl
   82bb6:	eba3 030a 	sub.w	r3, r3, sl
   82bba:	6093      	str	r3, [r2, #8]
   82bbc:	2b00      	cmp	r3, #0
   82bbe:	d0c5      	beq.n	82b4c <__sfvwrite_r+0x5c>
   82bc0:	89a3      	ldrh	r3, [r4, #12]
   82bc2:	2f00      	cmp	r7, #0
   82bc4:	d1d8      	bne.n	82b78 <__sfvwrite_r+0x88>
   82bc6:	f8d5 9000 	ldr.w	r9, [r5]
   82bca:	686f      	ldr	r7, [r5, #4]
   82bcc:	3508      	adds	r5, #8
   82bce:	e7d2      	b.n	82b76 <__sfvwrite_r+0x86>
   82bd0:	f8d5 9000 	ldr.w	r9, [r5]
   82bd4:	686f      	ldr	r7, [r5, #4]
   82bd6:	3508      	adds	r5, #8
   82bd8:	e7a2      	b.n	82b20 <__sfvwrite_r+0x30>
   82bda:	2000      	movs	r0, #0
   82bdc:	4770      	bx	lr
   82bde:	4621      	mov	r1, r4
   82be0:	9800      	ldr	r0, [sp, #0]
   82be2:	f7ff fd21 	bl	82628 <_fflush_r>
   82be6:	b378      	cbz	r0, 82c48 <__sfvwrite_r+0x158>
   82be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82bec:	f04f 30ff 	mov.w	r0, #4294967295
   82bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82bf4:	81a3      	strh	r3, [r4, #12]
   82bf6:	b003      	add	sp, #12
   82bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82bfc:	4681      	mov	r9, r0
   82bfe:	4633      	mov	r3, r6
   82c00:	464e      	mov	r6, r9
   82c02:	46a8      	mov	r8, r5
   82c04:	469a      	mov	sl, r3
   82c06:	464d      	mov	r5, r9
   82c08:	b356      	cbz	r6, 82c60 <__sfvwrite_r+0x170>
   82c0a:	2800      	cmp	r0, #0
   82c0c:	d032      	beq.n	82c74 <__sfvwrite_r+0x184>
   82c0e:	45b1      	cmp	r9, r6
   82c10:	46cb      	mov	fp, r9
   82c12:	bf28      	it	cs
   82c14:	46b3      	movcs	fp, r6
   82c16:	6820      	ldr	r0, [r4, #0]
   82c18:	6923      	ldr	r3, [r4, #16]
   82c1a:	465f      	mov	r7, fp
   82c1c:	4298      	cmp	r0, r3
   82c1e:	6962      	ldr	r2, [r4, #20]
   82c20:	d904      	bls.n	82c2c <__sfvwrite_r+0x13c>
   82c22:	68a3      	ldr	r3, [r4, #8]
   82c24:	4413      	add	r3, r2
   82c26:	459b      	cmp	fp, r3
   82c28:	f300 80a8 	bgt.w	82d7c <__sfvwrite_r+0x28c>
   82c2c:	4593      	cmp	fp, r2
   82c2e:	db4d      	blt.n	82ccc <__sfvwrite_r+0x1dc>
   82c30:	4613      	mov	r3, r2
   82c32:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82c34:	462a      	mov	r2, r5
   82c36:	69e1      	ldr	r1, [r4, #28]
   82c38:	9800      	ldr	r0, [sp, #0]
   82c3a:	47b8      	blx	r7
   82c3c:	1e07      	subs	r7, r0, #0
   82c3e:	ddd3      	ble.n	82be8 <__sfvwrite_r+0xf8>
   82c40:	ebb9 0907 	subs.w	r9, r9, r7
   82c44:	d0cb      	beq.n	82bde <__sfvwrite_r+0xee>
   82c46:	2001      	movs	r0, #1
   82c48:	f8da 3008 	ldr.w	r3, [sl, #8]
   82c4c:	443d      	add	r5, r7
   82c4e:	1bdb      	subs	r3, r3, r7
   82c50:	1bf6      	subs	r6, r6, r7
   82c52:	f8ca 3008 	str.w	r3, [sl, #8]
   82c56:	2b00      	cmp	r3, #0
   82c58:	f43f af78 	beq.w	82b4c <__sfvwrite_r+0x5c>
   82c5c:	2e00      	cmp	r6, #0
   82c5e:	d1d4      	bne.n	82c0a <__sfvwrite_r+0x11a>
   82c60:	f108 0308 	add.w	r3, r8, #8
   82c64:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82c68:	4698      	mov	r8, r3
   82c6a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   82c6e:	3308      	adds	r3, #8
   82c70:	2e00      	cmp	r6, #0
   82c72:	d0f7      	beq.n	82c64 <__sfvwrite_r+0x174>
   82c74:	4632      	mov	r2, r6
   82c76:	210a      	movs	r1, #10
   82c78:	4628      	mov	r0, r5
   82c7a:	f000 fc29 	bl	834d0 <memchr>
   82c7e:	2800      	cmp	r0, #0
   82c80:	f000 80a1 	beq.w	82dc6 <__sfvwrite_r+0x2d6>
   82c84:	3001      	adds	r0, #1
   82c86:	eba0 0905 	sub.w	r9, r0, r5
   82c8a:	e7c0      	b.n	82c0e <__sfvwrite_r+0x11e>
   82c8c:	6820      	ldr	r0, [r4, #0]
   82c8e:	6923      	ldr	r3, [r4, #16]
   82c90:	4298      	cmp	r0, r3
   82c92:	d802      	bhi.n	82c9a <__sfvwrite_r+0x1aa>
   82c94:	6963      	ldr	r3, [r4, #20]
   82c96:	429f      	cmp	r7, r3
   82c98:	d25d      	bcs.n	82d56 <__sfvwrite_r+0x266>
   82c9a:	45b8      	cmp	r8, r7
   82c9c:	bf28      	it	cs
   82c9e:	46b8      	movcs	r8, r7
   82ca0:	4649      	mov	r1, r9
   82ca2:	4642      	mov	r2, r8
   82ca4:	f000 fcd0 	bl	83648 <memmove>
   82ca8:	68a3      	ldr	r3, [r4, #8]
   82caa:	6822      	ldr	r2, [r4, #0]
   82cac:	eba3 0308 	sub.w	r3, r3, r8
   82cb0:	4442      	add	r2, r8
   82cb2:	60a3      	str	r3, [r4, #8]
   82cb4:	6022      	str	r2, [r4, #0]
   82cb6:	b10b      	cbz	r3, 82cbc <__sfvwrite_r+0x1cc>
   82cb8:	46c2      	mov	sl, r8
   82cba:	e777      	b.n	82bac <__sfvwrite_r+0xbc>
   82cbc:	4621      	mov	r1, r4
   82cbe:	9800      	ldr	r0, [sp, #0]
   82cc0:	f7ff fcb2 	bl	82628 <_fflush_r>
   82cc4:	2800      	cmp	r0, #0
   82cc6:	d18f      	bne.n	82be8 <__sfvwrite_r+0xf8>
   82cc8:	46c2      	mov	sl, r8
   82cca:	e76f      	b.n	82bac <__sfvwrite_r+0xbc>
   82ccc:	465a      	mov	r2, fp
   82cce:	4629      	mov	r1, r5
   82cd0:	f000 fcba 	bl	83648 <memmove>
   82cd4:	68a2      	ldr	r2, [r4, #8]
   82cd6:	6823      	ldr	r3, [r4, #0]
   82cd8:	eba2 020b 	sub.w	r2, r2, fp
   82cdc:	445b      	add	r3, fp
   82cde:	60a2      	str	r2, [r4, #8]
   82ce0:	6023      	str	r3, [r4, #0]
   82ce2:	e7ad      	b.n	82c40 <__sfvwrite_r+0x150>
   82ce4:	46b8      	mov	r8, r7
   82ce6:	46ba      	mov	sl, r7
   82ce8:	46bb      	mov	fp, r7
   82cea:	6820      	ldr	r0, [r4, #0]
   82cec:	e753      	b.n	82b96 <__sfvwrite_r+0xa6>
   82cee:	6962      	ldr	r2, [r4, #20]
   82cf0:	6820      	ldr	r0, [r4, #0]
   82cf2:	6921      	ldr	r1, [r4, #16]
   82cf4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82cf8:	eba0 0a01 	sub.w	sl, r0, r1
   82cfc:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82d00:	f10a 0001 	add.w	r0, sl, #1
   82d04:	ea4f 0868 	mov.w	r8, r8, asr #1
   82d08:	4438      	add	r0, r7
   82d0a:	4540      	cmp	r0, r8
   82d0c:	4642      	mov	r2, r8
   82d0e:	bf84      	itt	hi
   82d10:	4680      	movhi	r8, r0
   82d12:	4642      	movhi	r2, r8
   82d14:	055b      	lsls	r3, r3, #21
   82d16:	d544      	bpl.n	82da2 <__sfvwrite_r+0x2b2>
   82d18:	4611      	mov	r1, r2
   82d1a:	9800      	ldr	r0, [sp, #0]
   82d1c:	f000 f920 	bl	82f60 <_malloc_r>
   82d20:	4683      	mov	fp, r0
   82d22:	2800      	cmp	r0, #0
   82d24:	d055      	beq.n	82dd2 <__sfvwrite_r+0x2e2>
   82d26:	4652      	mov	r2, sl
   82d28:	6921      	ldr	r1, [r4, #16]
   82d2a:	f000 fc17 	bl	8355c <memcpy>
   82d2e:	89a3      	ldrh	r3, [r4, #12]
   82d30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82d38:	81a3      	strh	r3, [r4, #12]
   82d3a:	eb0b 000a 	add.w	r0, fp, sl
   82d3e:	eba8 030a 	sub.w	r3, r8, sl
   82d42:	f8c4 b010 	str.w	fp, [r4, #16]
   82d46:	f8c4 8014 	str.w	r8, [r4, #20]
   82d4a:	6020      	str	r0, [r4, #0]
   82d4c:	60a3      	str	r3, [r4, #8]
   82d4e:	46b8      	mov	r8, r7
   82d50:	46ba      	mov	sl, r7
   82d52:	46bb      	mov	fp, r7
   82d54:	e71f      	b.n	82b96 <__sfvwrite_r+0xa6>
   82d56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82d5a:	42ba      	cmp	r2, r7
   82d5c:	bf28      	it	cs
   82d5e:	463a      	movcs	r2, r7
   82d60:	fb92 f2f3 	sdiv	r2, r2, r3
   82d64:	69e1      	ldr	r1, [r4, #28]
   82d66:	fb03 f302 	mul.w	r3, r3, r2
   82d6a:	9800      	ldr	r0, [sp, #0]
   82d6c:	464a      	mov	r2, r9
   82d6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82d70:	47b0      	blx	r6
   82d72:	f1b0 0a00 	subs.w	sl, r0, #0
   82d76:	f73f af19 	bgt.w	82bac <__sfvwrite_r+0xbc>
   82d7a:	e735      	b.n	82be8 <__sfvwrite_r+0xf8>
   82d7c:	461a      	mov	r2, r3
   82d7e:	4629      	mov	r1, r5
   82d80:	9301      	str	r3, [sp, #4]
   82d82:	f000 fc61 	bl	83648 <memmove>
   82d86:	6822      	ldr	r2, [r4, #0]
   82d88:	9b01      	ldr	r3, [sp, #4]
   82d8a:	4621      	mov	r1, r4
   82d8c:	441a      	add	r2, r3
   82d8e:	6022      	str	r2, [r4, #0]
   82d90:	9800      	ldr	r0, [sp, #0]
   82d92:	f7ff fc49 	bl	82628 <_fflush_r>
   82d96:	9b01      	ldr	r3, [sp, #4]
   82d98:	2800      	cmp	r0, #0
   82d9a:	f47f af25 	bne.w	82be8 <__sfvwrite_r+0xf8>
   82d9e:	461f      	mov	r7, r3
   82da0:	e74e      	b.n	82c40 <__sfvwrite_r+0x150>
   82da2:	9800      	ldr	r0, [sp, #0]
   82da4:	f000 fcc0 	bl	83728 <_realloc_r>
   82da8:	4683      	mov	fp, r0
   82daa:	2800      	cmp	r0, #0
   82dac:	d1c5      	bne.n	82d3a <__sfvwrite_r+0x24a>
   82dae:	9d00      	ldr	r5, [sp, #0]
   82db0:	6921      	ldr	r1, [r4, #16]
   82db2:	4628      	mov	r0, r5
   82db4:	f7ff fdb6 	bl	82924 <_free_r>
   82db8:	220c      	movs	r2, #12
   82dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82dbe:	602a      	str	r2, [r5, #0]
   82dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82dc4:	e712      	b.n	82bec <__sfvwrite_r+0xfc>
   82dc6:	f106 0901 	add.w	r9, r6, #1
   82dca:	e720      	b.n	82c0e <__sfvwrite_r+0x11e>
   82dcc:	f04f 30ff 	mov.w	r0, #4294967295
   82dd0:	e6bd      	b.n	82b4e <__sfvwrite_r+0x5e>
   82dd2:	220c      	movs	r2, #12
   82dd4:	9900      	ldr	r1, [sp, #0]
   82dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82dda:	600a      	str	r2, [r1, #0]
   82ddc:	e706      	b.n	82bec <__sfvwrite_r+0xfc>
   82dde:	bf00      	nop
   82de0:	7ffffc00 	.word	0x7ffffc00

00082de4 <_fwalk_reent>:
   82de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82de8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82dec:	d01e      	beq.n	82e2c <_fwalk_reent+0x48>
   82dee:	4688      	mov	r8, r1
   82df0:	4607      	mov	r7, r0
   82df2:	f04f 0900 	mov.w	r9, #0
   82df6:	6875      	ldr	r5, [r6, #4]
   82df8:	68b4      	ldr	r4, [r6, #8]
   82dfa:	3d01      	subs	r5, #1
   82dfc:	d410      	bmi.n	82e20 <_fwalk_reent+0x3c>
   82dfe:	89a3      	ldrh	r3, [r4, #12]
   82e00:	3d01      	subs	r5, #1
   82e02:	2b01      	cmp	r3, #1
   82e04:	d908      	bls.n	82e18 <_fwalk_reent+0x34>
   82e06:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82e0a:	3301      	adds	r3, #1
   82e0c:	d004      	beq.n	82e18 <_fwalk_reent+0x34>
   82e0e:	4621      	mov	r1, r4
   82e10:	4638      	mov	r0, r7
   82e12:	47c0      	blx	r8
   82e14:	ea49 0900 	orr.w	r9, r9, r0
   82e18:	1c6b      	adds	r3, r5, #1
   82e1a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82e1e:	d1ee      	bne.n	82dfe <_fwalk_reent+0x1a>
   82e20:	6836      	ldr	r6, [r6, #0]
   82e22:	2e00      	cmp	r6, #0
   82e24:	d1e7      	bne.n	82df6 <_fwalk_reent+0x12>
   82e26:	4648      	mov	r0, r9
   82e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82e2c:	46b1      	mov	r9, r6
   82e2e:	4648      	mov	r0, r9
   82e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082e34 <__locale_mb_cur_max>:
   82e34:	4b04      	ldr	r3, [pc, #16]	; (82e48 <__locale_mb_cur_max+0x14>)
   82e36:	4a05      	ldr	r2, [pc, #20]	; (82e4c <__locale_mb_cur_max+0x18>)
   82e38:	681b      	ldr	r3, [r3, #0]
   82e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82e3c:	2b00      	cmp	r3, #0
   82e3e:	bf08      	it	eq
   82e40:	4613      	moveq	r3, r2
   82e42:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82e46:	4770      	bx	lr
   82e48:	20070134 	.word	0x20070134
   82e4c:	20070564 	.word	0x20070564

00082e50 <__retarget_lock_init_recursive>:
   82e50:	4770      	bx	lr
   82e52:	bf00      	nop

00082e54 <__retarget_lock_close_recursive>:
   82e54:	4770      	bx	lr
   82e56:	bf00      	nop

00082e58 <__retarget_lock_acquire_recursive>:
   82e58:	4770      	bx	lr
   82e5a:	bf00      	nop

00082e5c <__retarget_lock_release_recursive>:
   82e5c:	4770      	bx	lr
   82e5e:	bf00      	nop

00082e60 <__swhatbuf_r>:
   82e60:	b570      	push	{r4, r5, r6, lr}
   82e62:	460c      	mov	r4, r1
   82e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82e68:	b090      	sub	sp, #64	; 0x40
   82e6a:	2900      	cmp	r1, #0
   82e6c:	4615      	mov	r5, r2
   82e6e:	461e      	mov	r6, r3
   82e70:	db14      	blt.n	82e9c <__swhatbuf_r+0x3c>
   82e72:	aa01      	add	r2, sp, #4
   82e74:	f000 ffde 	bl	83e34 <_fstat_r>
   82e78:	2800      	cmp	r0, #0
   82e7a:	db0f      	blt.n	82e9c <__swhatbuf_r+0x3c>
   82e7c:	9a02      	ldr	r2, [sp, #8]
   82e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82e82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82e86:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82e8a:	fab2 f282 	clz	r2, r2
   82e8e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82e92:	0952      	lsrs	r2, r2, #5
   82e94:	6032      	str	r2, [r6, #0]
   82e96:	602b      	str	r3, [r5, #0]
   82e98:	b010      	add	sp, #64	; 0x40
   82e9a:	bd70      	pop	{r4, r5, r6, pc}
   82e9c:	2300      	movs	r3, #0
   82e9e:	89a2      	ldrh	r2, [r4, #12]
   82ea0:	6033      	str	r3, [r6, #0]
   82ea2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82ea6:	d004      	beq.n	82eb2 <__swhatbuf_r+0x52>
   82ea8:	2240      	movs	r2, #64	; 0x40
   82eaa:	4618      	mov	r0, r3
   82eac:	602a      	str	r2, [r5, #0]
   82eae:	b010      	add	sp, #64	; 0x40
   82eb0:	bd70      	pop	{r4, r5, r6, pc}
   82eb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82eb6:	602b      	str	r3, [r5, #0]
   82eb8:	b010      	add	sp, #64	; 0x40
   82eba:	bd70      	pop	{r4, r5, r6, pc}

00082ebc <__smakebuf_r>:
   82ebc:	898a      	ldrh	r2, [r1, #12]
   82ebe:	460b      	mov	r3, r1
   82ec0:	0792      	lsls	r2, r2, #30
   82ec2:	d506      	bpl.n	82ed2 <__smakebuf_r+0x16>
   82ec4:	2101      	movs	r1, #1
   82ec6:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82eca:	6159      	str	r1, [r3, #20]
   82ecc:	601a      	str	r2, [r3, #0]
   82ece:	611a      	str	r2, [r3, #16]
   82ed0:	4770      	bx	lr
   82ed2:	b5f0      	push	{r4, r5, r6, r7, lr}
   82ed4:	b083      	sub	sp, #12
   82ed6:	ab01      	add	r3, sp, #4
   82ed8:	466a      	mov	r2, sp
   82eda:	460c      	mov	r4, r1
   82edc:	4606      	mov	r6, r0
   82ede:	f7ff ffbf 	bl	82e60 <__swhatbuf_r>
   82ee2:	9900      	ldr	r1, [sp, #0]
   82ee4:	4605      	mov	r5, r0
   82ee6:	4630      	mov	r0, r6
   82ee8:	f000 f83a 	bl	82f60 <_malloc_r>
   82eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82ef0:	b1d8      	cbz	r0, 82f2a <__smakebuf_r+0x6e>
   82ef2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82ef6:	4f15      	ldr	r7, [pc, #84]	; (82f4c <__smakebuf_r+0x90>)
   82ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82efc:	63f7      	str	r7, [r6, #60]	; 0x3c
   82efe:	81a3      	strh	r3, [r4, #12]
   82f00:	6020      	str	r0, [r4, #0]
   82f02:	6120      	str	r0, [r4, #16]
   82f04:	6161      	str	r1, [r4, #20]
   82f06:	b91a      	cbnz	r2, 82f10 <__smakebuf_r+0x54>
   82f08:	432b      	orrs	r3, r5
   82f0a:	81a3      	strh	r3, [r4, #12]
   82f0c:	b003      	add	sp, #12
   82f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82f10:	4630      	mov	r0, r6
   82f12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82f16:	f000 ffa1 	bl	83e5c <_isatty_r>
   82f1a:	b1a0      	cbz	r0, 82f46 <__smakebuf_r+0x8a>
   82f1c:	89a3      	ldrh	r3, [r4, #12]
   82f1e:	f023 0303 	bic.w	r3, r3, #3
   82f22:	f043 0301 	orr.w	r3, r3, #1
   82f26:	b21b      	sxth	r3, r3
   82f28:	e7ee      	b.n	82f08 <__smakebuf_r+0x4c>
   82f2a:	059a      	lsls	r2, r3, #22
   82f2c:	d4ee      	bmi.n	82f0c <__smakebuf_r+0x50>
   82f2e:	2101      	movs	r1, #1
   82f30:	f023 0303 	bic.w	r3, r3, #3
   82f34:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82f38:	f043 0302 	orr.w	r3, r3, #2
   82f3c:	81a3      	strh	r3, [r4, #12]
   82f3e:	6161      	str	r1, [r4, #20]
   82f40:	6022      	str	r2, [r4, #0]
   82f42:	6122      	str	r2, [r4, #16]
   82f44:	e7e2      	b.n	82f0c <__smakebuf_r+0x50>
   82f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82f4a:	e7dd      	b.n	82f08 <__smakebuf_r+0x4c>
   82f4c:	0008267d 	.word	0x0008267d

00082f50 <malloc>:
   82f50:	4b02      	ldr	r3, [pc, #8]	; (82f5c <malloc+0xc>)
   82f52:	4601      	mov	r1, r0
   82f54:	6818      	ldr	r0, [r3, #0]
   82f56:	f000 b803 	b.w	82f60 <_malloc_r>
   82f5a:	bf00      	nop
   82f5c:	20070134 	.word	0x20070134

00082f60 <_malloc_r>:
   82f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f64:	f101 060b 	add.w	r6, r1, #11
   82f68:	2e16      	cmp	r6, #22
   82f6a:	b083      	sub	sp, #12
   82f6c:	4605      	mov	r5, r0
   82f6e:	f240 809e 	bls.w	830ae <_malloc_r+0x14e>
   82f72:	f036 0607 	bics.w	r6, r6, #7
   82f76:	f100 80bd 	bmi.w	830f4 <_malloc_r+0x194>
   82f7a:	42b1      	cmp	r1, r6
   82f7c:	f200 80ba 	bhi.w	830f4 <_malloc_r+0x194>
   82f80:	f000 fbc6 	bl	83710 <__malloc_lock>
   82f84:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82f88:	f0c0 8285 	bcc.w	83496 <_malloc_r+0x536>
   82f8c:	0a73      	lsrs	r3, r6, #9
   82f8e:	f000 80b8 	beq.w	83102 <_malloc_r+0x1a2>
   82f92:	2b04      	cmp	r3, #4
   82f94:	f200 816c 	bhi.w	83270 <_malloc_r+0x310>
   82f98:	09b3      	lsrs	r3, r6, #6
   82f9a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82f9e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82fa2:	00c1      	lsls	r1, r0, #3
   82fa4:	4fb8      	ldr	r7, [pc, #736]	; (83288 <_malloc_r+0x328>)
   82fa6:	4439      	add	r1, r7
   82fa8:	684c      	ldr	r4, [r1, #4]
   82faa:	3908      	subs	r1, #8
   82fac:	42a1      	cmp	r1, r4
   82fae:	d106      	bne.n	82fbe <_malloc_r+0x5e>
   82fb0:	e00c      	b.n	82fcc <_malloc_r+0x6c>
   82fb2:	2a00      	cmp	r2, #0
   82fb4:	f280 80ab 	bge.w	8310e <_malloc_r+0x1ae>
   82fb8:	68e4      	ldr	r4, [r4, #12]
   82fba:	42a1      	cmp	r1, r4
   82fbc:	d006      	beq.n	82fcc <_malloc_r+0x6c>
   82fbe:	6863      	ldr	r3, [r4, #4]
   82fc0:	f023 0303 	bic.w	r3, r3, #3
   82fc4:	1b9a      	subs	r2, r3, r6
   82fc6:	2a0f      	cmp	r2, #15
   82fc8:	ddf3      	ble.n	82fb2 <_malloc_r+0x52>
   82fca:	4670      	mov	r0, lr
   82fcc:	693c      	ldr	r4, [r7, #16]
   82fce:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8329c <_malloc_r+0x33c>
   82fd2:	4574      	cmp	r4, lr
   82fd4:	f000 819e 	beq.w	83314 <_malloc_r+0x3b4>
   82fd8:	6863      	ldr	r3, [r4, #4]
   82fda:	f023 0303 	bic.w	r3, r3, #3
   82fde:	1b9a      	subs	r2, r3, r6
   82fe0:	2a0f      	cmp	r2, #15
   82fe2:	f300 8183 	bgt.w	832ec <_malloc_r+0x38c>
   82fe6:	2a00      	cmp	r2, #0
   82fe8:	f8c7 e014 	str.w	lr, [r7, #20]
   82fec:	f8c7 e010 	str.w	lr, [r7, #16]
   82ff0:	f280 8091 	bge.w	83116 <_malloc_r+0x1b6>
   82ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82ff8:	f080 8154 	bcs.w	832a4 <_malloc_r+0x344>
   82ffc:	2201      	movs	r2, #1
   82ffe:	08db      	lsrs	r3, r3, #3
   83000:	6879      	ldr	r1, [r7, #4]
   83002:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83006:	4413      	add	r3, r2
   83008:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8300c:	fa02 f20c 	lsl.w	r2, r2, ip
   83010:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83014:	430a      	orrs	r2, r1
   83016:	f1ac 0108 	sub.w	r1, ip, #8
   8301a:	60e1      	str	r1, [r4, #12]
   8301c:	f8c4 8008 	str.w	r8, [r4, #8]
   83020:	607a      	str	r2, [r7, #4]
   83022:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83026:	f8c8 400c 	str.w	r4, [r8, #12]
   8302a:	2401      	movs	r4, #1
   8302c:	1083      	asrs	r3, r0, #2
   8302e:	409c      	lsls	r4, r3
   83030:	4294      	cmp	r4, r2
   83032:	d87d      	bhi.n	83130 <_malloc_r+0x1d0>
   83034:	4214      	tst	r4, r2
   83036:	d106      	bne.n	83046 <_malloc_r+0xe6>
   83038:	f020 0003 	bic.w	r0, r0, #3
   8303c:	0064      	lsls	r4, r4, #1
   8303e:	4214      	tst	r4, r2
   83040:	f100 0004 	add.w	r0, r0, #4
   83044:	d0fa      	beq.n	8303c <_malloc_r+0xdc>
   83046:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8304a:	46cc      	mov	ip, r9
   8304c:	4680      	mov	r8, r0
   8304e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83052:	459c      	cmp	ip, r3
   83054:	d107      	bne.n	83066 <_malloc_r+0x106>
   83056:	e15f      	b.n	83318 <_malloc_r+0x3b8>
   83058:	2a00      	cmp	r2, #0
   8305a:	f280 816d 	bge.w	83338 <_malloc_r+0x3d8>
   8305e:	68db      	ldr	r3, [r3, #12]
   83060:	459c      	cmp	ip, r3
   83062:	f000 8159 	beq.w	83318 <_malloc_r+0x3b8>
   83066:	6859      	ldr	r1, [r3, #4]
   83068:	f021 0103 	bic.w	r1, r1, #3
   8306c:	1b8a      	subs	r2, r1, r6
   8306e:	2a0f      	cmp	r2, #15
   83070:	ddf2      	ble.n	83058 <_malloc_r+0xf8>
   83072:	68dc      	ldr	r4, [r3, #12]
   83074:	f8d3 c008 	ldr.w	ip, [r3, #8]
   83078:	f046 0801 	orr.w	r8, r6, #1
   8307c:	4628      	mov	r0, r5
   8307e:	441e      	add	r6, r3
   83080:	f042 0501 	orr.w	r5, r2, #1
   83084:	f8c3 8004 	str.w	r8, [r3, #4]
   83088:	f8cc 400c 	str.w	r4, [ip, #12]
   8308c:	f8c4 c008 	str.w	ip, [r4, #8]
   83090:	617e      	str	r6, [r7, #20]
   83092:	613e      	str	r6, [r7, #16]
   83094:	f8c6 e00c 	str.w	lr, [r6, #12]
   83098:	f8c6 e008 	str.w	lr, [r6, #8]
   8309c:	6075      	str	r5, [r6, #4]
   8309e:	505a      	str	r2, [r3, r1]
   830a0:	9300      	str	r3, [sp, #0]
   830a2:	f000 fb3b 	bl	8371c <__malloc_unlock>
   830a6:	9b00      	ldr	r3, [sp, #0]
   830a8:	f103 0408 	add.w	r4, r3, #8
   830ac:	e01e      	b.n	830ec <_malloc_r+0x18c>
   830ae:	2910      	cmp	r1, #16
   830b0:	d820      	bhi.n	830f4 <_malloc_r+0x194>
   830b2:	f000 fb2d 	bl	83710 <__malloc_lock>
   830b6:	2610      	movs	r6, #16
   830b8:	2318      	movs	r3, #24
   830ba:	2002      	movs	r0, #2
   830bc:	4f72      	ldr	r7, [pc, #456]	; (83288 <_malloc_r+0x328>)
   830be:	443b      	add	r3, r7
   830c0:	685c      	ldr	r4, [r3, #4]
   830c2:	f1a3 0208 	sub.w	r2, r3, #8
   830c6:	4294      	cmp	r4, r2
   830c8:	f000 812f 	beq.w	8332a <_malloc_r+0x3ca>
   830cc:	6863      	ldr	r3, [r4, #4]
   830ce:	68e1      	ldr	r1, [r4, #12]
   830d0:	f023 0303 	bic.w	r3, r3, #3
   830d4:	4423      	add	r3, r4
   830d6:	685a      	ldr	r2, [r3, #4]
   830d8:	68a6      	ldr	r6, [r4, #8]
   830da:	f042 0201 	orr.w	r2, r2, #1
   830de:	60f1      	str	r1, [r6, #12]
   830e0:	4628      	mov	r0, r5
   830e2:	608e      	str	r6, [r1, #8]
   830e4:	605a      	str	r2, [r3, #4]
   830e6:	f000 fb19 	bl	8371c <__malloc_unlock>
   830ea:	3408      	adds	r4, #8
   830ec:	4620      	mov	r0, r4
   830ee:	b003      	add	sp, #12
   830f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830f4:	2400      	movs	r4, #0
   830f6:	230c      	movs	r3, #12
   830f8:	4620      	mov	r0, r4
   830fa:	602b      	str	r3, [r5, #0]
   830fc:	b003      	add	sp, #12
   830fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83102:	2040      	movs	r0, #64	; 0x40
   83104:	f44f 7100 	mov.w	r1, #512	; 0x200
   83108:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8310c:	e74a      	b.n	82fa4 <_malloc_r+0x44>
   8310e:	4423      	add	r3, r4
   83110:	685a      	ldr	r2, [r3, #4]
   83112:	68e1      	ldr	r1, [r4, #12]
   83114:	e7e0      	b.n	830d8 <_malloc_r+0x178>
   83116:	4423      	add	r3, r4
   83118:	685a      	ldr	r2, [r3, #4]
   8311a:	4628      	mov	r0, r5
   8311c:	f042 0201 	orr.w	r2, r2, #1
   83120:	605a      	str	r2, [r3, #4]
   83122:	3408      	adds	r4, #8
   83124:	f000 fafa 	bl	8371c <__malloc_unlock>
   83128:	4620      	mov	r0, r4
   8312a:	b003      	add	sp, #12
   8312c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83130:	68bc      	ldr	r4, [r7, #8]
   83132:	6863      	ldr	r3, [r4, #4]
   83134:	f023 0803 	bic.w	r8, r3, #3
   83138:	45b0      	cmp	r8, r6
   8313a:	d304      	bcc.n	83146 <_malloc_r+0x1e6>
   8313c:	eba8 0306 	sub.w	r3, r8, r6
   83140:	2b0f      	cmp	r3, #15
   83142:	f300 8085 	bgt.w	83250 <_malloc_r+0x2f0>
   83146:	f8df 9158 	ldr.w	r9, [pc, #344]	; 832a0 <_malloc_r+0x340>
   8314a:	4b50      	ldr	r3, [pc, #320]	; (8328c <_malloc_r+0x32c>)
   8314c:	f8d9 2000 	ldr.w	r2, [r9]
   83150:	681b      	ldr	r3, [r3, #0]
   83152:	3201      	adds	r2, #1
   83154:	4433      	add	r3, r6
   83156:	eb04 0a08 	add.w	sl, r4, r8
   8315a:	f000 8154 	beq.w	83406 <_malloc_r+0x4a6>
   8315e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83162:	330f      	adds	r3, #15
   83164:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83168:	f02b 0b0f 	bic.w	fp, fp, #15
   8316c:	4659      	mov	r1, fp
   8316e:	4628      	mov	r0, r5
   83170:	f000 fc90 	bl	83a94 <_sbrk_r>
   83174:	1c41      	adds	r1, r0, #1
   83176:	4602      	mov	r2, r0
   83178:	f000 80fb 	beq.w	83372 <_malloc_r+0x412>
   8317c:	4582      	cmp	sl, r0
   8317e:	f200 80f6 	bhi.w	8336e <_malloc_r+0x40e>
   83182:	4b43      	ldr	r3, [pc, #268]	; (83290 <_malloc_r+0x330>)
   83184:	6819      	ldr	r1, [r3, #0]
   83186:	4459      	add	r1, fp
   83188:	6019      	str	r1, [r3, #0]
   8318a:	f000 814c 	beq.w	83426 <_malloc_r+0x4c6>
   8318e:	f8d9 0000 	ldr.w	r0, [r9]
   83192:	3001      	adds	r0, #1
   83194:	bf1b      	ittet	ne
   83196:	eba2 0a0a 	subne.w	sl, r2, sl
   8319a:	4451      	addne	r1, sl
   8319c:	f8c9 2000 	streq.w	r2, [r9]
   831a0:	6019      	strne	r1, [r3, #0]
   831a2:	f012 0107 	ands.w	r1, r2, #7
   831a6:	f000 8114 	beq.w	833d2 <_malloc_r+0x472>
   831aa:	f1c1 0008 	rsb	r0, r1, #8
   831ae:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   831b2:	4402      	add	r2, r0
   831b4:	3108      	adds	r1, #8
   831b6:	eb02 090b 	add.w	r9, r2, fp
   831ba:	f3c9 090b 	ubfx	r9, r9, #0, #12
   831be:	eba1 0909 	sub.w	r9, r1, r9
   831c2:	4649      	mov	r1, r9
   831c4:	4628      	mov	r0, r5
   831c6:	9301      	str	r3, [sp, #4]
   831c8:	9200      	str	r2, [sp, #0]
   831ca:	f000 fc63 	bl	83a94 <_sbrk_r>
   831ce:	1c43      	adds	r3, r0, #1
   831d0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   831d4:	f000 8142 	beq.w	8345c <_malloc_r+0x4fc>
   831d8:	1a80      	subs	r0, r0, r2
   831da:	4448      	add	r0, r9
   831dc:	f040 0001 	orr.w	r0, r0, #1
   831e0:	6819      	ldr	r1, [r3, #0]
   831e2:	42bc      	cmp	r4, r7
   831e4:	4449      	add	r1, r9
   831e6:	60ba      	str	r2, [r7, #8]
   831e8:	6019      	str	r1, [r3, #0]
   831ea:	6050      	str	r0, [r2, #4]
   831ec:	d017      	beq.n	8321e <_malloc_r+0x2be>
   831ee:	f1b8 0f0f 	cmp.w	r8, #15
   831f2:	f240 80fa 	bls.w	833ea <_malloc_r+0x48a>
   831f6:	f04f 0c05 	mov.w	ip, #5
   831fa:	6862      	ldr	r2, [r4, #4]
   831fc:	f1a8 000c 	sub.w	r0, r8, #12
   83200:	f020 0007 	bic.w	r0, r0, #7
   83204:	f002 0201 	and.w	r2, r2, #1
   83208:	eb04 0e00 	add.w	lr, r4, r0
   8320c:	4302      	orrs	r2, r0
   8320e:	280f      	cmp	r0, #15
   83210:	6062      	str	r2, [r4, #4]
   83212:	f8ce c004 	str.w	ip, [lr, #4]
   83216:	f8ce c008 	str.w	ip, [lr, #8]
   8321a:	f200 8116 	bhi.w	8344a <_malloc_r+0x4ea>
   8321e:	4b1d      	ldr	r3, [pc, #116]	; (83294 <_malloc_r+0x334>)
   83220:	68bc      	ldr	r4, [r7, #8]
   83222:	681a      	ldr	r2, [r3, #0]
   83224:	4291      	cmp	r1, r2
   83226:	bf88      	it	hi
   83228:	6019      	strhi	r1, [r3, #0]
   8322a:	4b1b      	ldr	r3, [pc, #108]	; (83298 <_malloc_r+0x338>)
   8322c:	681a      	ldr	r2, [r3, #0]
   8322e:	4291      	cmp	r1, r2
   83230:	6862      	ldr	r2, [r4, #4]
   83232:	bf88      	it	hi
   83234:	6019      	strhi	r1, [r3, #0]
   83236:	f022 0203 	bic.w	r2, r2, #3
   8323a:	4296      	cmp	r6, r2
   8323c:	eba2 0306 	sub.w	r3, r2, r6
   83240:	d801      	bhi.n	83246 <_malloc_r+0x2e6>
   83242:	2b0f      	cmp	r3, #15
   83244:	dc04      	bgt.n	83250 <_malloc_r+0x2f0>
   83246:	4628      	mov	r0, r5
   83248:	f000 fa68 	bl	8371c <__malloc_unlock>
   8324c:	2400      	movs	r4, #0
   8324e:	e74d      	b.n	830ec <_malloc_r+0x18c>
   83250:	f046 0201 	orr.w	r2, r6, #1
   83254:	f043 0301 	orr.w	r3, r3, #1
   83258:	4426      	add	r6, r4
   8325a:	6062      	str	r2, [r4, #4]
   8325c:	4628      	mov	r0, r5
   8325e:	60be      	str	r6, [r7, #8]
   83260:	3408      	adds	r4, #8
   83262:	6073      	str	r3, [r6, #4]
   83264:	f000 fa5a 	bl	8371c <__malloc_unlock>
   83268:	4620      	mov	r0, r4
   8326a:	b003      	add	sp, #12
   8326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83270:	2b14      	cmp	r3, #20
   83272:	d970      	bls.n	83356 <_malloc_r+0x3f6>
   83274:	2b54      	cmp	r3, #84	; 0x54
   83276:	f200 80a2 	bhi.w	833be <_malloc_r+0x45e>
   8327a:	0b33      	lsrs	r3, r6, #12
   8327c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83280:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83284:	00c1      	lsls	r1, r0, #3
   83286:	e68d      	b.n	82fa4 <_malloc_r+0x44>
   83288:	200706d0 	.word	0x200706d0
   8328c:	20070c4c 	.word	0x20070c4c
   83290:	20070c1c 	.word	0x20070c1c
   83294:	20070c44 	.word	0x20070c44
   83298:	20070c48 	.word	0x20070c48
   8329c:	200706d8 	.word	0x200706d8
   832a0:	20070ad8 	.word	0x20070ad8
   832a4:	0a5a      	lsrs	r2, r3, #9
   832a6:	2a04      	cmp	r2, #4
   832a8:	d95b      	bls.n	83362 <_malloc_r+0x402>
   832aa:	2a14      	cmp	r2, #20
   832ac:	f200 80ae 	bhi.w	8340c <_malloc_r+0x4ac>
   832b0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   832b4:	00c9      	lsls	r1, r1, #3
   832b6:	325b      	adds	r2, #91	; 0x5b
   832b8:	eb07 0c01 	add.w	ip, r7, r1
   832bc:	5879      	ldr	r1, [r7, r1]
   832be:	f1ac 0c08 	sub.w	ip, ip, #8
   832c2:	458c      	cmp	ip, r1
   832c4:	f000 8088 	beq.w	833d8 <_malloc_r+0x478>
   832c8:	684a      	ldr	r2, [r1, #4]
   832ca:	f022 0203 	bic.w	r2, r2, #3
   832ce:	4293      	cmp	r3, r2
   832d0:	d273      	bcs.n	833ba <_malloc_r+0x45a>
   832d2:	6889      	ldr	r1, [r1, #8]
   832d4:	458c      	cmp	ip, r1
   832d6:	d1f7      	bne.n	832c8 <_malloc_r+0x368>
   832d8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   832dc:	687a      	ldr	r2, [r7, #4]
   832de:	60e3      	str	r3, [r4, #12]
   832e0:	f8c4 c008 	str.w	ip, [r4, #8]
   832e4:	609c      	str	r4, [r3, #8]
   832e6:	f8cc 400c 	str.w	r4, [ip, #12]
   832ea:	e69e      	b.n	8302a <_malloc_r+0xca>
   832ec:	f046 0c01 	orr.w	ip, r6, #1
   832f0:	f042 0101 	orr.w	r1, r2, #1
   832f4:	4426      	add	r6, r4
   832f6:	f8c4 c004 	str.w	ip, [r4, #4]
   832fa:	4628      	mov	r0, r5
   832fc:	617e      	str	r6, [r7, #20]
   832fe:	613e      	str	r6, [r7, #16]
   83300:	f8c6 e00c 	str.w	lr, [r6, #12]
   83304:	f8c6 e008 	str.w	lr, [r6, #8]
   83308:	6071      	str	r1, [r6, #4]
   8330a:	50e2      	str	r2, [r4, r3]
   8330c:	f000 fa06 	bl	8371c <__malloc_unlock>
   83310:	3408      	adds	r4, #8
   83312:	e6eb      	b.n	830ec <_malloc_r+0x18c>
   83314:	687a      	ldr	r2, [r7, #4]
   83316:	e688      	b.n	8302a <_malloc_r+0xca>
   83318:	f108 0801 	add.w	r8, r8, #1
   8331c:	f018 0f03 	tst.w	r8, #3
   83320:	f10c 0c08 	add.w	ip, ip, #8
   83324:	f47f ae93 	bne.w	8304e <_malloc_r+0xee>
   83328:	e02d      	b.n	83386 <_malloc_r+0x426>
   8332a:	68dc      	ldr	r4, [r3, #12]
   8332c:	42a3      	cmp	r3, r4
   8332e:	bf08      	it	eq
   83330:	3002      	addeq	r0, #2
   83332:	f43f ae4b 	beq.w	82fcc <_malloc_r+0x6c>
   83336:	e6c9      	b.n	830cc <_malloc_r+0x16c>
   83338:	461c      	mov	r4, r3
   8333a:	4419      	add	r1, r3
   8333c:	684a      	ldr	r2, [r1, #4]
   8333e:	68db      	ldr	r3, [r3, #12]
   83340:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83344:	f042 0201 	orr.w	r2, r2, #1
   83348:	604a      	str	r2, [r1, #4]
   8334a:	4628      	mov	r0, r5
   8334c:	60f3      	str	r3, [r6, #12]
   8334e:	609e      	str	r6, [r3, #8]
   83350:	f000 f9e4 	bl	8371c <__malloc_unlock>
   83354:	e6ca      	b.n	830ec <_malloc_r+0x18c>
   83356:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8335a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8335e:	00c1      	lsls	r1, r0, #3
   83360:	e620      	b.n	82fa4 <_malloc_r+0x44>
   83362:	099a      	lsrs	r2, r3, #6
   83364:	f102 0139 	add.w	r1, r2, #57	; 0x39
   83368:	00c9      	lsls	r1, r1, #3
   8336a:	3238      	adds	r2, #56	; 0x38
   8336c:	e7a4      	b.n	832b8 <_malloc_r+0x358>
   8336e:	42bc      	cmp	r4, r7
   83370:	d054      	beq.n	8341c <_malloc_r+0x4bc>
   83372:	68bc      	ldr	r4, [r7, #8]
   83374:	6862      	ldr	r2, [r4, #4]
   83376:	f022 0203 	bic.w	r2, r2, #3
   8337a:	e75e      	b.n	8323a <_malloc_r+0x2da>
   8337c:	f859 3908 	ldr.w	r3, [r9], #-8
   83380:	4599      	cmp	r9, r3
   83382:	f040 8086 	bne.w	83492 <_malloc_r+0x532>
   83386:	f010 0f03 	tst.w	r0, #3
   8338a:	f100 30ff 	add.w	r0, r0, #4294967295
   8338e:	d1f5      	bne.n	8337c <_malloc_r+0x41c>
   83390:	687b      	ldr	r3, [r7, #4]
   83392:	ea23 0304 	bic.w	r3, r3, r4
   83396:	607b      	str	r3, [r7, #4]
   83398:	0064      	lsls	r4, r4, #1
   8339a:	429c      	cmp	r4, r3
   8339c:	f63f aec8 	bhi.w	83130 <_malloc_r+0x1d0>
   833a0:	2c00      	cmp	r4, #0
   833a2:	f43f aec5 	beq.w	83130 <_malloc_r+0x1d0>
   833a6:	421c      	tst	r4, r3
   833a8:	4640      	mov	r0, r8
   833aa:	f47f ae4c 	bne.w	83046 <_malloc_r+0xe6>
   833ae:	0064      	lsls	r4, r4, #1
   833b0:	421c      	tst	r4, r3
   833b2:	f100 0004 	add.w	r0, r0, #4
   833b6:	d0fa      	beq.n	833ae <_malloc_r+0x44e>
   833b8:	e645      	b.n	83046 <_malloc_r+0xe6>
   833ba:	468c      	mov	ip, r1
   833bc:	e78c      	b.n	832d8 <_malloc_r+0x378>
   833be:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   833c2:	d815      	bhi.n	833f0 <_malloc_r+0x490>
   833c4:	0bf3      	lsrs	r3, r6, #15
   833c6:	f103 0078 	add.w	r0, r3, #120	; 0x78
   833ca:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   833ce:	00c1      	lsls	r1, r0, #3
   833d0:	e5e8      	b.n	82fa4 <_malloc_r+0x44>
   833d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   833d6:	e6ee      	b.n	831b6 <_malloc_r+0x256>
   833d8:	2101      	movs	r1, #1
   833da:	687b      	ldr	r3, [r7, #4]
   833dc:	1092      	asrs	r2, r2, #2
   833de:	fa01 f202 	lsl.w	r2, r1, r2
   833e2:	431a      	orrs	r2, r3
   833e4:	607a      	str	r2, [r7, #4]
   833e6:	4663      	mov	r3, ip
   833e8:	e779      	b.n	832de <_malloc_r+0x37e>
   833ea:	2301      	movs	r3, #1
   833ec:	6053      	str	r3, [r2, #4]
   833ee:	e72a      	b.n	83246 <_malloc_r+0x2e6>
   833f0:	f240 5254 	movw	r2, #1364	; 0x554
   833f4:	4293      	cmp	r3, r2
   833f6:	d822      	bhi.n	8343e <_malloc_r+0x4de>
   833f8:	0cb3      	lsrs	r3, r6, #18
   833fa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   833fe:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   83402:	00c1      	lsls	r1, r0, #3
   83404:	e5ce      	b.n	82fa4 <_malloc_r+0x44>
   83406:	f103 0b10 	add.w	fp, r3, #16
   8340a:	e6af      	b.n	8316c <_malloc_r+0x20c>
   8340c:	2a54      	cmp	r2, #84	; 0x54
   8340e:	d829      	bhi.n	83464 <_malloc_r+0x504>
   83410:	0b1a      	lsrs	r2, r3, #12
   83412:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   83416:	00c9      	lsls	r1, r1, #3
   83418:	326e      	adds	r2, #110	; 0x6e
   8341a:	e74d      	b.n	832b8 <_malloc_r+0x358>
   8341c:	4b20      	ldr	r3, [pc, #128]	; (834a0 <_malloc_r+0x540>)
   8341e:	6819      	ldr	r1, [r3, #0]
   83420:	4459      	add	r1, fp
   83422:	6019      	str	r1, [r3, #0]
   83424:	e6b3      	b.n	8318e <_malloc_r+0x22e>
   83426:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8342a:	2800      	cmp	r0, #0
   8342c:	f47f aeaf 	bne.w	8318e <_malloc_r+0x22e>
   83430:	eb08 030b 	add.w	r3, r8, fp
   83434:	68ba      	ldr	r2, [r7, #8]
   83436:	f043 0301 	orr.w	r3, r3, #1
   8343a:	6053      	str	r3, [r2, #4]
   8343c:	e6ef      	b.n	8321e <_malloc_r+0x2be>
   8343e:	207f      	movs	r0, #127	; 0x7f
   83440:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83444:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83448:	e5ac      	b.n	82fa4 <_malloc_r+0x44>
   8344a:	f104 0108 	add.w	r1, r4, #8
   8344e:	4628      	mov	r0, r5
   83450:	9300      	str	r3, [sp, #0]
   83452:	f7ff fa67 	bl	82924 <_free_r>
   83456:	9b00      	ldr	r3, [sp, #0]
   83458:	6819      	ldr	r1, [r3, #0]
   8345a:	e6e0      	b.n	8321e <_malloc_r+0x2be>
   8345c:	2001      	movs	r0, #1
   8345e:	f04f 0900 	mov.w	r9, #0
   83462:	e6bd      	b.n	831e0 <_malloc_r+0x280>
   83464:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83468:	d805      	bhi.n	83476 <_malloc_r+0x516>
   8346a:	0bda      	lsrs	r2, r3, #15
   8346c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83470:	00c9      	lsls	r1, r1, #3
   83472:	3277      	adds	r2, #119	; 0x77
   83474:	e720      	b.n	832b8 <_malloc_r+0x358>
   83476:	f240 5154 	movw	r1, #1364	; 0x554
   8347a:	428a      	cmp	r2, r1
   8347c:	d805      	bhi.n	8348a <_malloc_r+0x52a>
   8347e:	0c9a      	lsrs	r2, r3, #18
   83480:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83484:	00c9      	lsls	r1, r1, #3
   83486:	327c      	adds	r2, #124	; 0x7c
   83488:	e716      	b.n	832b8 <_malloc_r+0x358>
   8348a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8348e:	227e      	movs	r2, #126	; 0x7e
   83490:	e712      	b.n	832b8 <_malloc_r+0x358>
   83492:	687b      	ldr	r3, [r7, #4]
   83494:	e780      	b.n	83398 <_malloc_r+0x438>
   83496:	08f0      	lsrs	r0, r6, #3
   83498:	f106 0308 	add.w	r3, r6, #8
   8349c:	e60e      	b.n	830bc <_malloc_r+0x15c>
   8349e:	bf00      	nop
   834a0:	20070c1c 	.word	0x20070c1c

000834a4 <__ascii_mbtowc>:
   834a4:	b082      	sub	sp, #8
   834a6:	b149      	cbz	r1, 834bc <__ascii_mbtowc+0x18>
   834a8:	b15a      	cbz	r2, 834c2 <__ascii_mbtowc+0x1e>
   834aa:	b16b      	cbz	r3, 834c8 <__ascii_mbtowc+0x24>
   834ac:	7813      	ldrb	r3, [r2, #0]
   834ae:	600b      	str	r3, [r1, #0]
   834b0:	7812      	ldrb	r2, [r2, #0]
   834b2:	1c10      	adds	r0, r2, #0
   834b4:	bf18      	it	ne
   834b6:	2001      	movne	r0, #1
   834b8:	b002      	add	sp, #8
   834ba:	4770      	bx	lr
   834bc:	a901      	add	r1, sp, #4
   834be:	2a00      	cmp	r2, #0
   834c0:	d1f3      	bne.n	834aa <__ascii_mbtowc+0x6>
   834c2:	4610      	mov	r0, r2
   834c4:	b002      	add	sp, #8
   834c6:	4770      	bx	lr
   834c8:	f06f 0001 	mvn.w	r0, #1
   834cc:	e7f4      	b.n	834b8 <__ascii_mbtowc+0x14>
   834ce:	bf00      	nop

000834d0 <memchr>:
   834d0:	0783      	lsls	r3, r0, #30
   834d2:	b470      	push	{r4, r5, r6}
   834d4:	b2cd      	uxtb	r5, r1
   834d6:	d03d      	beq.n	83554 <memchr+0x84>
   834d8:	1e54      	subs	r4, r2, #1
   834da:	b30a      	cbz	r2, 83520 <memchr+0x50>
   834dc:	7803      	ldrb	r3, [r0, #0]
   834de:	42ab      	cmp	r3, r5
   834e0:	d01f      	beq.n	83522 <memchr+0x52>
   834e2:	1c43      	adds	r3, r0, #1
   834e4:	e005      	b.n	834f2 <memchr+0x22>
   834e6:	f114 34ff 	adds.w	r4, r4, #4294967295
   834ea:	d319      	bcc.n	83520 <memchr+0x50>
   834ec:	7802      	ldrb	r2, [r0, #0]
   834ee:	42aa      	cmp	r2, r5
   834f0:	d017      	beq.n	83522 <memchr+0x52>
   834f2:	f013 0f03 	tst.w	r3, #3
   834f6:	4618      	mov	r0, r3
   834f8:	f103 0301 	add.w	r3, r3, #1
   834fc:	d1f3      	bne.n	834e6 <memchr+0x16>
   834fe:	2c03      	cmp	r4, #3
   83500:	d811      	bhi.n	83526 <memchr+0x56>
   83502:	b34c      	cbz	r4, 83558 <memchr+0x88>
   83504:	7803      	ldrb	r3, [r0, #0]
   83506:	42ab      	cmp	r3, r5
   83508:	d00b      	beq.n	83522 <memchr+0x52>
   8350a:	4404      	add	r4, r0
   8350c:	1c43      	adds	r3, r0, #1
   8350e:	e002      	b.n	83516 <memchr+0x46>
   83510:	7802      	ldrb	r2, [r0, #0]
   83512:	42aa      	cmp	r2, r5
   83514:	d005      	beq.n	83522 <memchr+0x52>
   83516:	429c      	cmp	r4, r3
   83518:	4618      	mov	r0, r3
   8351a:	f103 0301 	add.w	r3, r3, #1
   8351e:	d1f7      	bne.n	83510 <memchr+0x40>
   83520:	2000      	movs	r0, #0
   83522:	bc70      	pop	{r4, r5, r6}
   83524:	4770      	bx	lr
   83526:	0209      	lsls	r1, r1, #8
   83528:	b289      	uxth	r1, r1
   8352a:	4329      	orrs	r1, r5
   8352c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83530:	6803      	ldr	r3, [r0, #0]
   83532:	4606      	mov	r6, r0
   83534:	404b      	eors	r3, r1
   83536:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8353a:	ea22 0303 	bic.w	r3, r2, r3
   8353e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83542:	f100 0004 	add.w	r0, r0, #4
   83546:	d103      	bne.n	83550 <memchr+0x80>
   83548:	3c04      	subs	r4, #4
   8354a:	2c03      	cmp	r4, #3
   8354c:	d8f0      	bhi.n	83530 <memchr+0x60>
   8354e:	e7d8      	b.n	83502 <memchr+0x32>
   83550:	4630      	mov	r0, r6
   83552:	e7d7      	b.n	83504 <memchr+0x34>
   83554:	4614      	mov	r4, r2
   83556:	e7d2      	b.n	834fe <memchr+0x2e>
   83558:	4620      	mov	r0, r4
   8355a:	e7e2      	b.n	83522 <memchr+0x52>

0008355c <memcpy>:
   8355c:	4684      	mov	ip, r0
   8355e:	ea41 0300 	orr.w	r3, r1, r0
   83562:	f013 0303 	ands.w	r3, r3, #3
   83566:	d149      	bne.n	835fc <memcpy+0xa0>
   83568:	3a40      	subs	r2, #64	; 0x40
   8356a:	d323      	bcc.n	835b4 <memcpy+0x58>
   8356c:	680b      	ldr	r3, [r1, #0]
   8356e:	6003      	str	r3, [r0, #0]
   83570:	684b      	ldr	r3, [r1, #4]
   83572:	6043      	str	r3, [r0, #4]
   83574:	688b      	ldr	r3, [r1, #8]
   83576:	6083      	str	r3, [r0, #8]
   83578:	68cb      	ldr	r3, [r1, #12]
   8357a:	60c3      	str	r3, [r0, #12]
   8357c:	690b      	ldr	r3, [r1, #16]
   8357e:	6103      	str	r3, [r0, #16]
   83580:	694b      	ldr	r3, [r1, #20]
   83582:	6143      	str	r3, [r0, #20]
   83584:	698b      	ldr	r3, [r1, #24]
   83586:	6183      	str	r3, [r0, #24]
   83588:	69cb      	ldr	r3, [r1, #28]
   8358a:	61c3      	str	r3, [r0, #28]
   8358c:	6a0b      	ldr	r3, [r1, #32]
   8358e:	6203      	str	r3, [r0, #32]
   83590:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83592:	6243      	str	r3, [r0, #36]	; 0x24
   83594:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83596:	6283      	str	r3, [r0, #40]	; 0x28
   83598:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8359a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8359c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8359e:	6303      	str	r3, [r0, #48]	; 0x30
   835a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   835a2:	6343      	str	r3, [r0, #52]	; 0x34
   835a4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   835a6:	6383      	str	r3, [r0, #56]	; 0x38
   835a8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   835aa:	63c3      	str	r3, [r0, #60]	; 0x3c
   835ac:	3040      	adds	r0, #64	; 0x40
   835ae:	3140      	adds	r1, #64	; 0x40
   835b0:	3a40      	subs	r2, #64	; 0x40
   835b2:	d2db      	bcs.n	8356c <memcpy+0x10>
   835b4:	3230      	adds	r2, #48	; 0x30
   835b6:	d30b      	bcc.n	835d0 <memcpy+0x74>
   835b8:	680b      	ldr	r3, [r1, #0]
   835ba:	6003      	str	r3, [r0, #0]
   835bc:	684b      	ldr	r3, [r1, #4]
   835be:	6043      	str	r3, [r0, #4]
   835c0:	688b      	ldr	r3, [r1, #8]
   835c2:	6083      	str	r3, [r0, #8]
   835c4:	68cb      	ldr	r3, [r1, #12]
   835c6:	60c3      	str	r3, [r0, #12]
   835c8:	3010      	adds	r0, #16
   835ca:	3110      	adds	r1, #16
   835cc:	3a10      	subs	r2, #16
   835ce:	d2f3      	bcs.n	835b8 <memcpy+0x5c>
   835d0:	320c      	adds	r2, #12
   835d2:	d305      	bcc.n	835e0 <memcpy+0x84>
   835d4:	f851 3b04 	ldr.w	r3, [r1], #4
   835d8:	f840 3b04 	str.w	r3, [r0], #4
   835dc:	3a04      	subs	r2, #4
   835de:	d2f9      	bcs.n	835d4 <memcpy+0x78>
   835e0:	3204      	adds	r2, #4
   835e2:	d008      	beq.n	835f6 <memcpy+0x9a>
   835e4:	07d2      	lsls	r2, r2, #31
   835e6:	bf1c      	itt	ne
   835e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   835ec:	f800 3b01 	strbne.w	r3, [r0], #1
   835f0:	d301      	bcc.n	835f6 <memcpy+0x9a>
   835f2:	880b      	ldrh	r3, [r1, #0]
   835f4:	8003      	strh	r3, [r0, #0]
   835f6:	4660      	mov	r0, ip
   835f8:	4770      	bx	lr
   835fa:	bf00      	nop
   835fc:	2a08      	cmp	r2, #8
   835fe:	d313      	bcc.n	83628 <memcpy+0xcc>
   83600:	078b      	lsls	r3, r1, #30
   83602:	d0b1      	beq.n	83568 <memcpy+0xc>
   83604:	f010 0303 	ands.w	r3, r0, #3
   83608:	d0ae      	beq.n	83568 <memcpy+0xc>
   8360a:	f1c3 0304 	rsb	r3, r3, #4
   8360e:	1ad2      	subs	r2, r2, r3
   83610:	07db      	lsls	r3, r3, #31
   83612:	bf1c      	itt	ne
   83614:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83618:	f800 3b01 	strbne.w	r3, [r0], #1
   8361c:	d3a4      	bcc.n	83568 <memcpy+0xc>
   8361e:	f831 3b02 	ldrh.w	r3, [r1], #2
   83622:	f820 3b02 	strh.w	r3, [r0], #2
   83626:	e79f      	b.n	83568 <memcpy+0xc>
   83628:	3a04      	subs	r2, #4
   8362a:	d3d9      	bcc.n	835e0 <memcpy+0x84>
   8362c:	3a01      	subs	r2, #1
   8362e:	f811 3b01 	ldrb.w	r3, [r1], #1
   83632:	f800 3b01 	strb.w	r3, [r0], #1
   83636:	d2f9      	bcs.n	8362c <memcpy+0xd0>
   83638:	780b      	ldrb	r3, [r1, #0]
   8363a:	7003      	strb	r3, [r0, #0]
   8363c:	784b      	ldrb	r3, [r1, #1]
   8363e:	7043      	strb	r3, [r0, #1]
   83640:	788b      	ldrb	r3, [r1, #2]
   83642:	7083      	strb	r3, [r0, #2]
   83644:	4660      	mov	r0, ip
   83646:	4770      	bx	lr

00083648 <memmove>:
   83648:	4288      	cmp	r0, r1
   8364a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8364c:	d90d      	bls.n	8366a <memmove+0x22>
   8364e:	188b      	adds	r3, r1, r2
   83650:	4298      	cmp	r0, r3
   83652:	d20a      	bcs.n	8366a <memmove+0x22>
   83654:	1884      	adds	r4, r0, r2
   83656:	2a00      	cmp	r2, #0
   83658:	d051      	beq.n	836fe <memmove+0xb6>
   8365a:	4622      	mov	r2, r4
   8365c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83660:	4299      	cmp	r1, r3
   83662:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83666:	d1f9      	bne.n	8365c <memmove+0x14>
   83668:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8366a:	2a0f      	cmp	r2, #15
   8366c:	d948      	bls.n	83700 <memmove+0xb8>
   8366e:	ea41 0300 	orr.w	r3, r1, r0
   83672:	079b      	lsls	r3, r3, #30
   83674:	d146      	bne.n	83704 <memmove+0xbc>
   83676:	4615      	mov	r5, r2
   83678:	f100 0410 	add.w	r4, r0, #16
   8367c:	f101 0310 	add.w	r3, r1, #16
   83680:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83684:	3d10      	subs	r5, #16
   83686:	f844 6c10 	str.w	r6, [r4, #-16]
   8368a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8368e:	2d0f      	cmp	r5, #15
   83690:	f844 6c0c 	str.w	r6, [r4, #-12]
   83694:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83698:	f104 0410 	add.w	r4, r4, #16
   8369c:	f844 6c18 	str.w	r6, [r4, #-24]
   836a0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   836a4:	f103 0310 	add.w	r3, r3, #16
   836a8:	f844 6c14 	str.w	r6, [r4, #-20]
   836ac:	d8e8      	bhi.n	83680 <memmove+0x38>
   836ae:	f1a2 0310 	sub.w	r3, r2, #16
   836b2:	f023 030f 	bic.w	r3, r3, #15
   836b6:	f002 0e0f 	and.w	lr, r2, #15
   836ba:	3310      	adds	r3, #16
   836bc:	f1be 0f03 	cmp.w	lr, #3
   836c0:	4419      	add	r1, r3
   836c2:	4403      	add	r3, r0
   836c4:	d921      	bls.n	8370a <memmove+0xc2>
   836c6:	460e      	mov	r6, r1
   836c8:	4674      	mov	r4, lr
   836ca:	1f1d      	subs	r5, r3, #4
   836cc:	f856 7b04 	ldr.w	r7, [r6], #4
   836d0:	3c04      	subs	r4, #4
   836d2:	2c03      	cmp	r4, #3
   836d4:	f845 7f04 	str.w	r7, [r5, #4]!
   836d8:	d8f8      	bhi.n	836cc <memmove+0x84>
   836da:	f1ae 0404 	sub.w	r4, lr, #4
   836de:	f024 0403 	bic.w	r4, r4, #3
   836e2:	3404      	adds	r4, #4
   836e4:	4421      	add	r1, r4
   836e6:	4423      	add	r3, r4
   836e8:	f002 0203 	and.w	r2, r2, #3
   836ec:	b162      	cbz	r2, 83708 <memmove+0xc0>
   836ee:	3b01      	subs	r3, #1
   836f0:	440a      	add	r2, r1
   836f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   836f6:	428a      	cmp	r2, r1
   836f8:	f803 4f01 	strb.w	r4, [r3, #1]!
   836fc:	d1f9      	bne.n	836f2 <memmove+0xaa>
   836fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83700:	4603      	mov	r3, r0
   83702:	e7f3      	b.n	836ec <memmove+0xa4>
   83704:	4603      	mov	r3, r0
   83706:	e7f2      	b.n	836ee <memmove+0xa6>
   83708:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8370a:	4672      	mov	r2, lr
   8370c:	e7ee      	b.n	836ec <memmove+0xa4>
   8370e:	bf00      	nop

00083710 <__malloc_lock>:
   83710:	4801      	ldr	r0, [pc, #4]	; (83718 <__malloc_lock+0x8>)
   83712:	f7ff bba1 	b.w	82e58 <__retarget_lock_acquire_recursive>
   83716:	bf00      	nop
   83718:	20071c6c 	.word	0x20071c6c

0008371c <__malloc_unlock>:
   8371c:	4801      	ldr	r0, [pc, #4]	; (83724 <__malloc_unlock+0x8>)
   8371e:	f7ff bb9d 	b.w	82e5c <__retarget_lock_release_recursive>
   83722:	bf00      	nop
   83724:	20071c6c 	.word	0x20071c6c

00083728 <_realloc_r>:
   83728:	2900      	cmp	r1, #0
   8372a:	f000 8094 	beq.w	83856 <_realloc_r+0x12e>
   8372e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83732:	460c      	mov	r4, r1
   83734:	4615      	mov	r5, r2
   83736:	b083      	sub	sp, #12
   83738:	4680      	mov	r8, r0
   8373a:	f105 060b 	add.w	r6, r5, #11
   8373e:	f7ff ffe7 	bl	83710 <__malloc_lock>
   83742:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83746:	2e16      	cmp	r6, #22
   83748:	f02e 0703 	bic.w	r7, lr, #3
   8374c:	f1a4 0908 	sub.w	r9, r4, #8
   83750:	d83c      	bhi.n	837cc <_realloc_r+0xa4>
   83752:	2210      	movs	r2, #16
   83754:	4616      	mov	r6, r2
   83756:	42b5      	cmp	r5, r6
   83758:	d83d      	bhi.n	837d6 <_realloc_r+0xae>
   8375a:	4297      	cmp	r7, r2
   8375c:	da43      	bge.n	837e6 <_realloc_r+0xbe>
   8375e:	4bc6      	ldr	r3, [pc, #792]	; (83a78 <_realloc_r+0x350>)
   83760:	eb09 0007 	add.w	r0, r9, r7
   83764:	6899      	ldr	r1, [r3, #8]
   83766:	4288      	cmp	r0, r1
   83768:	f000 80c3 	beq.w	838f2 <_realloc_r+0x1ca>
   8376c:	6843      	ldr	r3, [r0, #4]
   8376e:	f023 0101 	bic.w	r1, r3, #1
   83772:	4401      	add	r1, r0
   83774:	6849      	ldr	r1, [r1, #4]
   83776:	07c9      	lsls	r1, r1, #31
   83778:	d54d      	bpl.n	83816 <_realloc_r+0xee>
   8377a:	f01e 0f01 	tst.w	lr, #1
   8377e:	f000 809b 	beq.w	838b8 <_realloc_r+0x190>
   83782:	4629      	mov	r1, r5
   83784:	4640      	mov	r0, r8
   83786:	f7ff fbeb 	bl	82f60 <_malloc_r>
   8378a:	4605      	mov	r5, r0
   8378c:	2800      	cmp	r0, #0
   8378e:	d03b      	beq.n	83808 <_realloc_r+0xe0>
   83790:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83794:	f1a0 0208 	sub.w	r2, r0, #8
   83798:	f023 0301 	bic.w	r3, r3, #1
   8379c:	444b      	add	r3, r9
   8379e:	429a      	cmp	r2, r3
   837a0:	f000 812b 	beq.w	839fa <_realloc_r+0x2d2>
   837a4:	1f3a      	subs	r2, r7, #4
   837a6:	2a24      	cmp	r2, #36	; 0x24
   837a8:	f200 8118 	bhi.w	839dc <_realloc_r+0x2b4>
   837ac:	2a13      	cmp	r2, #19
   837ae:	f200 80eb 	bhi.w	83988 <_realloc_r+0x260>
   837b2:	4603      	mov	r3, r0
   837b4:	4622      	mov	r2, r4
   837b6:	6811      	ldr	r1, [r2, #0]
   837b8:	6019      	str	r1, [r3, #0]
   837ba:	6851      	ldr	r1, [r2, #4]
   837bc:	6059      	str	r1, [r3, #4]
   837be:	6892      	ldr	r2, [r2, #8]
   837c0:	609a      	str	r2, [r3, #8]
   837c2:	4621      	mov	r1, r4
   837c4:	4640      	mov	r0, r8
   837c6:	f7ff f8ad 	bl	82924 <_free_r>
   837ca:	e01d      	b.n	83808 <_realloc_r+0xe0>
   837cc:	f026 0607 	bic.w	r6, r6, #7
   837d0:	2e00      	cmp	r6, #0
   837d2:	4632      	mov	r2, r6
   837d4:	dabf      	bge.n	83756 <_realloc_r+0x2e>
   837d6:	2500      	movs	r5, #0
   837d8:	230c      	movs	r3, #12
   837da:	4628      	mov	r0, r5
   837dc:	f8c8 3000 	str.w	r3, [r8]
   837e0:	b003      	add	sp, #12
   837e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837e6:	4625      	mov	r5, r4
   837e8:	1bbb      	subs	r3, r7, r6
   837ea:	2b0f      	cmp	r3, #15
   837ec:	f8d9 2004 	ldr.w	r2, [r9, #4]
   837f0:	d81d      	bhi.n	8382e <_realloc_r+0x106>
   837f2:	f002 0201 	and.w	r2, r2, #1
   837f6:	433a      	orrs	r2, r7
   837f8:	eb09 0107 	add.w	r1, r9, r7
   837fc:	f8c9 2004 	str.w	r2, [r9, #4]
   83800:	684b      	ldr	r3, [r1, #4]
   83802:	f043 0301 	orr.w	r3, r3, #1
   83806:	604b      	str	r3, [r1, #4]
   83808:	4640      	mov	r0, r8
   8380a:	f7ff ff87 	bl	8371c <__malloc_unlock>
   8380e:	4628      	mov	r0, r5
   83810:	b003      	add	sp, #12
   83812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83816:	f023 0303 	bic.w	r3, r3, #3
   8381a:	18f9      	adds	r1, r7, r3
   8381c:	4291      	cmp	r1, r2
   8381e:	db1d      	blt.n	8385c <_realloc_r+0x134>
   83820:	68c3      	ldr	r3, [r0, #12]
   83822:	6882      	ldr	r2, [r0, #8]
   83824:	4625      	mov	r5, r4
   83826:	60d3      	str	r3, [r2, #12]
   83828:	460f      	mov	r7, r1
   8382a:	609a      	str	r2, [r3, #8]
   8382c:	e7dc      	b.n	837e8 <_realloc_r+0xc0>
   8382e:	f002 0201 	and.w	r2, r2, #1
   83832:	eb09 0106 	add.w	r1, r9, r6
   83836:	f043 0301 	orr.w	r3, r3, #1
   8383a:	4332      	orrs	r2, r6
   8383c:	f8c9 2004 	str.w	r2, [r9, #4]
   83840:	444f      	add	r7, r9
   83842:	604b      	str	r3, [r1, #4]
   83844:	687b      	ldr	r3, [r7, #4]
   83846:	3108      	adds	r1, #8
   83848:	f043 0301 	orr.w	r3, r3, #1
   8384c:	607b      	str	r3, [r7, #4]
   8384e:	4640      	mov	r0, r8
   83850:	f7ff f868 	bl	82924 <_free_r>
   83854:	e7d8      	b.n	83808 <_realloc_r+0xe0>
   83856:	4611      	mov	r1, r2
   83858:	f7ff bb82 	b.w	82f60 <_malloc_r>
   8385c:	f01e 0f01 	tst.w	lr, #1
   83860:	d18f      	bne.n	83782 <_realloc_r+0x5a>
   83862:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83866:	eba9 0a01 	sub.w	sl, r9, r1
   8386a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8386e:	f021 0103 	bic.w	r1, r1, #3
   83872:	440b      	add	r3, r1
   83874:	443b      	add	r3, r7
   83876:	4293      	cmp	r3, r2
   83878:	db26      	blt.n	838c8 <_realloc_r+0x1a0>
   8387a:	4655      	mov	r5, sl
   8387c:	68c1      	ldr	r1, [r0, #12]
   8387e:	6880      	ldr	r0, [r0, #8]
   83880:	1f3a      	subs	r2, r7, #4
   83882:	60c1      	str	r1, [r0, #12]
   83884:	6088      	str	r0, [r1, #8]
   83886:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8388a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8388e:	2a24      	cmp	r2, #36	; 0x24
   83890:	60c1      	str	r1, [r0, #12]
   83892:	6088      	str	r0, [r1, #8]
   83894:	d826      	bhi.n	838e4 <_realloc_r+0x1bc>
   83896:	2a13      	cmp	r2, #19
   83898:	f240 8081 	bls.w	8399e <_realloc_r+0x276>
   8389c:	6821      	ldr	r1, [r4, #0]
   8389e:	2a1b      	cmp	r2, #27
   838a0:	f8ca 1008 	str.w	r1, [sl, #8]
   838a4:	6861      	ldr	r1, [r4, #4]
   838a6:	f8ca 100c 	str.w	r1, [sl, #12]
   838aa:	f200 80ad 	bhi.w	83a08 <_realloc_r+0x2e0>
   838ae:	f104 0008 	add.w	r0, r4, #8
   838b2:	f10a 0210 	add.w	r2, sl, #16
   838b6:	e074      	b.n	839a2 <_realloc_r+0x27a>
   838b8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   838bc:	eba9 0a03 	sub.w	sl, r9, r3
   838c0:	f8da 1004 	ldr.w	r1, [sl, #4]
   838c4:	f021 0103 	bic.w	r1, r1, #3
   838c8:	187b      	adds	r3, r7, r1
   838ca:	4293      	cmp	r3, r2
   838cc:	f6ff af59 	blt.w	83782 <_realloc_r+0x5a>
   838d0:	4655      	mov	r5, sl
   838d2:	f8da 100c 	ldr.w	r1, [sl, #12]
   838d6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   838da:	1f3a      	subs	r2, r7, #4
   838dc:	2a24      	cmp	r2, #36	; 0x24
   838de:	60c1      	str	r1, [r0, #12]
   838e0:	6088      	str	r0, [r1, #8]
   838e2:	d9d8      	bls.n	83896 <_realloc_r+0x16e>
   838e4:	4621      	mov	r1, r4
   838e6:	4628      	mov	r0, r5
   838e8:	461f      	mov	r7, r3
   838ea:	46d1      	mov	r9, sl
   838ec:	f7ff feac 	bl	83648 <memmove>
   838f0:	e77a      	b.n	837e8 <_realloc_r+0xc0>
   838f2:	6841      	ldr	r1, [r0, #4]
   838f4:	f106 0010 	add.w	r0, r6, #16
   838f8:	f021 0b03 	bic.w	fp, r1, #3
   838fc:	44bb      	add	fp, r7
   838fe:	4583      	cmp	fp, r0
   83900:	da58      	bge.n	839b4 <_realloc_r+0x28c>
   83902:	f01e 0f01 	tst.w	lr, #1
   83906:	f47f af3c 	bne.w	83782 <_realloc_r+0x5a>
   8390a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8390e:	eba9 0a01 	sub.w	sl, r9, r1
   83912:	f8da 1004 	ldr.w	r1, [sl, #4]
   83916:	f021 0103 	bic.w	r1, r1, #3
   8391a:	448b      	add	fp, r1
   8391c:	4558      	cmp	r0, fp
   8391e:	dcd3      	bgt.n	838c8 <_realloc_r+0x1a0>
   83920:	4655      	mov	r5, sl
   83922:	f8da 100c 	ldr.w	r1, [sl, #12]
   83926:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8392a:	1f3a      	subs	r2, r7, #4
   8392c:	2a24      	cmp	r2, #36	; 0x24
   8392e:	60c1      	str	r1, [r0, #12]
   83930:	6088      	str	r0, [r1, #8]
   83932:	f200 808d 	bhi.w	83a50 <_realloc_r+0x328>
   83936:	2a13      	cmp	r2, #19
   83938:	f240 8087 	bls.w	83a4a <_realloc_r+0x322>
   8393c:	6821      	ldr	r1, [r4, #0]
   8393e:	2a1b      	cmp	r2, #27
   83940:	f8ca 1008 	str.w	r1, [sl, #8]
   83944:	6861      	ldr	r1, [r4, #4]
   83946:	f8ca 100c 	str.w	r1, [sl, #12]
   8394a:	f200 8088 	bhi.w	83a5e <_realloc_r+0x336>
   8394e:	f104 0108 	add.w	r1, r4, #8
   83952:	f10a 0210 	add.w	r2, sl, #16
   83956:	6808      	ldr	r0, [r1, #0]
   83958:	6010      	str	r0, [r2, #0]
   8395a:	6848      	ldr	r0, [r1, #4]
   8395c:	6050      	str	r0, [r2, #4]
   8395e:	6889      	ldr	r1, [r1, #8]
   83960:	6091      	str	r1, [r2, #8]
   83962:	ebab 0206 	sub.w	r2, fp, r6
   83966:	eb0a 0106 	add.w	r1, sl, r6
   8396a:	f042 0201 	orr.w	r2, r2, #1
   8396e:	6099      	str	r1, [r3, #8]
   83970:	604a      	str	r2, [r1, #4]
   83972:	f8da 3004 	ldr.w	r3, [sl, #4]
   83976:	4640      	mov	r0, r8
   83978:	f003 0301 	and.w	r3, r3, #1
   8397c:	431e      	orrs	r6, r3
   8397e:	f8ca 6004 	str.w	r6, [sl, #4]
   83982:	f7ff fecb 	bl	8371c <__malloc_unlock>
   83986:	e742      	b.n	8380e <_realloc_r+0xe6>
   83988:	6823      	ldr	r3, [r4, #0]
   8398a:	2a1b      	cmp	r2, #27
   8398c:	6003      	str	r3, [r0, #0]
   8398e:	6863      	ldr	r3, [r4, #4]
   83990:	6043      	str	r3, [r0, #4]
   83992:	d827      	bhi.n	839e4 <_realloc_r+0x2bc>
   83994:	f100 0308 	add.w	r3, r0, #8
   83998:	f104 0208 	add.w	r2, r4, #8
   8399c:	e70b      	b.n	837b6 <_realloc_r+0x8e>
   8399e:	4620      	mov	r0, r4
   839a0:	462a      	mov	r2, r5
   839a2:	6801      	ldr	r1, [r0, #0]
   839a4:	461f      	mov	r7, r3
   839a6:	6011      	str	r1, [r2, #0]
   839a8:	6841      	ldr	r1, [r0, #4]
   839aa:	46d1      	mov	r9, sl
   839ac:	6051      	str	r1, [r2, #4]
   839ae:	6883      	ldr	r3, [r0, #8]
   839b0:	6093      	str	r3, [r2, #8]
   839b2:	e719      	b.n	837e8 <_realloc_r+0xc0>
   839b4:	ebab 0b06 	sub.w	fp, fp, r6
   839b8:	eb09 0106 	add.w	r1, r9, r6
   839bc:	f04b 0201 	orr.w	r2, fp, #1
   839c0:	6099      	str	r1, [r3, #8]
   839c2:	604a      	str	r2, [r1, #4]
   839c4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   839c8:	4640      	mov	r0, r8
   839ca:	f003 0301 	and.w	r3, r3, #1
   839ce:	431e      	orrs	r6, r3
   839d0:	f844 6c04 	str.w	r6, [r4, #-4]
   839d4:	f7ff fea2 	bl	8371c <__malloc_unlock>
   839d8:	4625      	mov	r5, r4
   839da:	e718      	b.n	8380e <_realloc_r+0xe6>
   839dc:	4621      	mov	r1, r4
   839de:	f7ff fe33 	bl	83648 <memmove>
   839e2:	e6ee      	b.n	837c2 <_realloc_r+0x9a>
   839e4:	68a3      	ldr	r3, [r4, #8]
   839e6:	2a24      	cmp	r2, #36	; 0x24
   839e8:	6083      	str	r3, [r0, #8]
   839ea:	68e3      	ldr	r3, [r4, #12]
   839ec:	60c3      	str	r3, [r0, #12]
   839ee:	d018      	beq.n	83a22 <_realloc_r+0x2fa>
   839f0:	f100 0310 	add.w	r3, r0, #16
   839f4:	f104 0210 	add.w	r2, r4, #16
   839f8:	e6dd      	b.n	837b6 <_realloc_r+0x8e>
   839fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
   839fe:	4625      	mov	r5, r4
   83a00:	f023 0303 	bic.w	r3, r3, #3
   83a04:	441f      	add	r7, r3
   83a06:	e6ef      	b.n	837e8 <_realloc_r+0xc0>
   83a08:	68a1      	ldr	r1, [r4, #8]
   83a0a:	2a24      	cmp	r2, #36	; 0x24
   83a0c:	f8ca 1010 	str.w	r1, [sl, #16]
   83a10:	68e1      	ldr	r1, [r4, #12]
   83a12:	f8ca 1014 	str.w	r1, [sl, #20]
   83a16:	d00d      	beq.n	83a34 <_realloc_r+0x30c>
   83a18:	f104 0010 	add.w	r0, r4, #16
   83a1c:	f10a 0218 	add.w	r2, sl, #24
   83a20:	e7bf      	b.n	839a2 <_realloc_r+0x27a>
   83a22:	6922      	ldr	r2, [r4, #16]
   83a24:	f100 0318 	add.w	r3, r0, #24
   83a28:	6102      	str	r2, [r0, #16]
   83a2a:	6961      	ldr	r1, [r4, #20]
   83a2c:	f104 0218 	add.w	r2, r4, #24
   83a30:	6141      	str	r1, [r0, #20]
   83a32:	e6c0      	b.n	837b6 <_realloc_r+0x8e>
   83a34:	6922      	ldr	r2, [r4, #16]
   83a36:	f104 0018 	add.w	r0, r4, #24
   83a3a:	f8ca 2018 	str.w	r2, [sl, #24]
   83a3e:	6961      	ldr	r1, [r4, #20]
   83a40:	f10a 0220 	add.w	r2, sl, #32
   83a44:	f8ca 101c 	str.w	r1, [sl, #28]
   83a48:	e7ab      	b.n	839a2 <_realloc_r+0x27a>
   83a4a:	4621      	mov	r1, r4
   83a4c:	462a      	mov	r2, r5
   83a4e:	e782      	b.n	83956 <_realloc_r+0x22e>
   83a50:	4621      	mov	r1, r4
   83a52:	4628      	mov	r0, r5
   83a54:	9301      	str	r3, [sp, #4]
   83a56:	f7ff fdf7 	bl	83648 <memmove>
   83a5a:	9b01      	ldr	r3, [sp, #4]
   83a5c:	e781      	b.n	83962 <_realloc_r+0x23a>
   83a5e:	68a1      	ldr	r1, [r4, #8]
   83a60:	2a24      	cmp	r2, #36	; 0x24
   83a62:	f8ca 1010 	str.w	r1, [sl, #16]
   83a66:	68e1      	ldr	r1, [r4, #12]
   83a68:	f8ca 1014 	str.w	r1, [sl, #20]
   83a6c:	d006      	beq.n	83a7c <_realloc_r+0x354>
   83a6e:	f104 0110 	add.w	r1, r4, #16
   83a72:	f10a 0218 	add.w	r2, sl, #24
   83a76:	e76e      	b.n	83956 <_realloc_r+0x22e>
   83a78:	200706d0 	.word	0x200706d0
   83a7c:	6922      	ldr	r2, [r4, #16]
   83a7e:	f104 0118 	add.w	r1, r4, #24
   83a82:	f8ca 2018 	str.w	r2, [sl, #24]
   83a86:	6960      	ldr	r0, [r4, #20]
   83a88:	f10a 0220 	add.w	r2, sl, #32
   83a8c:	f8ca 001c 	str.w	r0, [sl, #28]
   83a90:	e761      	b.n	83956 <_realloc_r+0x22e>
   83a92:	bf00      	nop

00083a94 <_sbrk_r>:
   83a94:	b538      	push	{r3, r4, r5, lr}
   83a96:	2300      	movs	r3, #0
   83a98:	4c06      	ldr	r4, [pc, #24]	; (83ab4 <_sbrk_r+0x20>)
   83a9a:	4605      	mov	r5, r0
   83a9c:	4608      	mov	r0, r1
   83a9e:	6023      	str	r3, [r4, #0]
   83aa0:	f7fd f8ba 	bl	80c18 <_sbrk>
   83aa4:	1c43      	adds	r3, r0, #1
   83aa6:	d000      	beq.n	83aaa <_sbrk_r+0x16>
   83aa8:	bd38      	pop	{r3, r4, r5, pc}
   83aaa:	6823      	ldr	r3, [r4, #0]
   83aac:	2b00      	cmp	r3, #0
   83aae:	d0fb      	beq.n	83aa8 <_sbrk_r+0x14>
   83ab0:	602b      	str	r3, [r5, #0]
   83ab2:	bd38      	pop	{r3, r4, r5, pc}
   83ab4:	20071c80 	.word	0x20071c80

00083ab8 <__sread>:
   83ab8:	b510      	push	{r4, lr}
   83aba:	460c      	mov	r4, r1
   83abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83ac0:	f000 f9f4 	bl	83eac <_read_r>
   83ac4:	2800      	cmp	r0, #0
   83ac6:	db03      	blt.n	83ad0 <__sread+0x18>
   83ac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83aca:	4403      	add	r3, r0
   83acc:	6523      	str	r3, [r4, #80]	; 0x50
   83ace:	bd10      	pop	{r4, pc}
   83ad0:	89a3      	ldrh	r3, [r4, #12]
   83ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83ad6:	81a3      	strh	r3, [r4, #12]
   83ad8:	bd10      	pop	{r4, pc}
   83ada:	bf00      	nop

00083adc <__swrite>:
   83adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ae0:	460c      	mov	r4, r1
   83ae2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83ae6:	461f      	mov	r7, r3
   83ae8:	05cb      	lsls	r3, r1, #23
   83aea:	4616      	mov	r6, r2
   83aec:	4605      	mov	r5, r0
   83aee:	d507      	bpl.n	83b00 <__swrite+0x24>
   83af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83af4:	2302      	movs	r3, #2
   83af6:	2200      	movs	r2, #0
   83af8:	f000 f9c2 	bl	83e80 <_lseek_r>
   83afc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83b00:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83b04:	81a1      	strh	r1, [r4, #12]
   83b06:	463b      	mov	r3, r7
   83b08:	4632      	mov	r2, r6
   83b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83b0e:	4628      	mov	r0, r5
   83b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b14:	f000 b8a2 	b.w	83c5c <_write_r>

00083b18 <__sseek>:
   83b18:	b510      	push	{r4, lr}
   83b1a:	460c      	mov	r4, r1
   83b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b20:	f000 f9ae 	bl	83e80 <_lseek_r>
   83b24:	89a3      	ldrh	r3, [r4, #12]
   83b26:	1c42      	adds	r2, r0, #1
   83b28:	bf0e      	itee	eq
   83b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83b32:	6520      	strne	r0, [r4, #80]	; 0x50
   83b34:	81a3      	strh	r3, [r4, #12]
   83b36:	bd10      	pop	{r4, pc}

00083b38 <__sclose>:
   83b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b3c:	f000 b906 	b.w	83d4c <_close_r>

00083b40 <__swbuf_r>:
   83b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b42:	460d      	mov	r5, r1
   83b44:	4614      	mov	r4, r2
   83b46:	4606      	mov	r6, r0
   83b48:	b110      	cbz	r0, 83b50 <__swbuf_r+0x10>
   83b4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b4c:	2b00      	cmp	r3, #0
   83b4e:	d04b      	beq.n	83be8 <__swbuf_r+0xa8>
   83b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83b54:	69a3      	ldr	r3, [r4, #24]
   83b56:	b291      	uxth	r1, r2
   83b58:	0708      	lsls	r0, r1, #28
   83b5a:	60a3      	str	r3, [r4, #8]
   83b5c:	d539      	bpl.n	83bd2 <__swbuf_r+0x92>
   83b5e:	6923      	ldr	r3, [r4, #16]
   83b60:	2b00      	cmp	r3, #0
   83b62:	d036      	beq.n	83bd2 <__swbuf_r+0x92>
   83b64:	b2ed      	uxtb	r5, r5
   83b66:	0489      	lsls	r1, r1, #18
   83b68:	462f      	mov	r7, r5
   83b6a:	d515      	bpl.n	83b98 <__swbuf_r+0x58>
   83b6c:	6822      	ldr	r2, [r4, #0]
   83b6e:	6961      	ldr	r1, [r4, #20]
   83b70:	1ad3      	subs	r3, r2, r3
   83b72:	428b      	cmp	r3, r1
   83b74:	da1c      	bge.n	83bb0 <__swbuf_r+0x70>
   83b76:	3301      	adds	r3, #1
   83b78:	68a1      	ldr	r1, [r4, #8]
   83b7a:	1c50      	adds	r0, r2, #1
   83b7c:	3901      	subs	r1, #1
   83b7e:	60a1      	str	r1, [r4, #8]
   83b80:	6020      	str	r0, [r4, #0]
   83b82:	7015      	strb	r5, [r2, #0]
   83b84:	6962      	ldr	r2, [r4, #20]
   83b86:	429a      	cmp	r2, r3
   83b88:	d01a      	beq.n	83bc0 <__swbuf_r+0x80>
   83b8a:	89a3      	ldrh	r3, [r4, #12]
   83b8c:	07db      	lsls	r3, r3, #31
   83b8e:	d501      	bpl.n	83b94 <__swbuf_r+0x54>
   83b90:	2d0a      	cmp	r5, #10
   83b92:	d015      	beq.n	83bc0 <__swbuf_r+0x80>
   83b94:	4638      	mov	r0, r7
   83b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83b98:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83b9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83b9e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83ba2:	81a2      	strh	r2, [r4, #12]
   83ba4:	6822      	ldr	r2, [r4, #0]
   83ba6:	6661      	str	r1, [r4, #100]	; 0x64
   83ba8:	6961      	ldr	r1, [r4, #20]
   83baa:	1ad3      	subs	r3, r2, r3
   83bac:	428b      	cmp	r3, r1
   83bae:	dbe2      	blt.n	83b76 <__swbuf_r+0x36>
   83bb0:	4621      	mov	r1, r4
   83bb2:	4630      	mov	r0, r6
   83bb4:	f7fe fd38 	bl	82628 <_fflush_r>
   83bb8:	b940      	cbnz	r0, 83bcc <__swbuf_r+0x8c>
   83bba:	2301      	movs	r3, #1
   83bbc:	6822      	ldr	r2, [r4, #0]
   83bbe:	e7db      	b.n	83b78 <__swbuf_r+0x38>
   83bc0:	4621      	mov	r1, r4
   83bc2:	4630      	mov	r0, r6
   83bc4:	f7fe fd30 	bl	82628 <_fflush_r>
   83bc8:	2800      	cmp	r0, #0
   83bca:	d0e3      	beq.n	83b94 <__swbuf_r+0x54>
   83bcc:	f04f 37ff 	mov.w	r7, #4294967295
   83bd0:	e7e0      	b.n	83b94 <__swbuf_r+0x54>
   83bd2:	4621      	mov	r1, r4
   83bd4:	4630      	mov	r0, r6
   83bd6:	f7fe fc17 	bl	82408 <__swsetup_r>
   83bda:	2800      	cmp	r0, #0
   83bdc:	d1f6      	bne.n	83bcc <__swbuf_r+0x8c>
   83bde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83be2:	6923      	ldr	r3, [r4, #16]
   83be4:	b291      	uxth	r1, r2
   83be6:	e7bd      	b.n	83b64 <__swbuf_r+0x24>
   83be8:	f7fe fd76 	bl	826d8 <__sinit>
   83bec:	e7b0      	b.n	83b50 <__swbuf_r+0x10>
   83bee:	bf00      	nop

00083bf0 <_wcrtomb_r>:
   83bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   83bf2:	4606      	mov	r6, r0
   83bf4:	b085      	sub	sp, #20
   83bf6:	461f      	mov	r7, r3
   83bf8:	b189      	cbz	r1, 83c1e <_wcrtomb_r+0x2e>
   83bfa:	4c10      	ldr	r4, [pc, #64]	; (83c3c <_wcrtomb_r+0x4c>)
   83bfc:	4d10      	ldr	r5, [pc, #64]	; (83c40 <_wcrtomb_r+0x50>)
   83bfe:	6824      	ldr	r4, [r4, #0]
   83c00:	6b64      	ldr	r4, [r4, #52]	; 0x34
   83c02:	2c00      	cmp	r4, #0
   83c04:	bf08      	it	eq
   83c06:	462c      	moveq	r4, r5
   83c08:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83c0c:	47a0      	blx	r4
   83c0e:	1c43      	adds	r3, r0, #1
   83c10:	d103      	bne.n	83c1a <_wcrtomb_r+0x2a>
   83c12:	2200      	movs	r2, #0
   83c14:	238a      	movs	r3, #138	; 0x8a
   83c16:	603a      	str	r2, [r7, #0]
   83c18:	6033      	str	r3, [r6, #0]
   83c1a:	b005      	add	sp, #20
   83c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c1e:	460c      	mov	r4, r1
   83c20:	4a06      	ldr	r2, [pc, #24]	; (83c3c <_wcrtomb_r+0x4c>)
   83c22:	4d07      	ldr	r5, [pc, #28]	; (83c40 <_wcrtomb_r+0x50>)
   83c24:	6811      	ldr	r1, [r2, #0]
   83c26:	4622      	mov	r2, r4
   83c28:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83c2a:	a901      	add	r1, sp, #4
   83c2c:	2c00      	cmp	r4, #0
   83c2e:	bf08      	it	eq
   83c30:	462c      	moveq	r4, r5
   83c32:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83c36:	47a0      	blx	r4
   83c38:	e7e9      	b.n	83c0e <_wcrtomb_r+0x1e>
   83c3a:	bf00      	nop
   83c3c:	20070134 	.word	0x20070134
   83c40:	20070564 	.word	0x20070564

00083c44 <__ascii_wctomb>:
   83c44:	b119      	cbz	r1, 83c4e <__ascii_wctomb+0xa>
   83c46:	2aff      	cmp	r2, #255	; 0xff
   83c48:	d803      	bhi.n	83c52 <__ascii_wctomb+0xe>
   83c4a:	700a      	strb	r2, [r1, #0]
   83c4c:	2101      	movs	r1, #1
   83c4e:	4608      	mov	r0, r1
   83c50:	4770      	bx	lr
   83c52:	238a      	movs	r3, #138	; 0x8a
   83c54:	f04f 31ff 	mov.w	r1, #4294967295
   83c58:	6003      	str	r3, [r0, #0]
   83c5a:	e7f8      	b.n	83c4e <__ascii_wctomb+0xa>

00083c5c <_write_r>:
   83c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c5e:	460e      	mov	r6, r1
   83c60:	2500      	movs	r5, #0
   83c62:	4c08      	ldr	r4, [pc, #32]	; (83c84 <_write_r+0x28>)
   83c64:	4611      	mov	r1, r2
   83c66:	4607      	mov	r7, r0
   83c68:	461a      	mov	r2, r3
   83c6a:	4630      	mov	r0, r6
   83c6c:	6025      	str	r5, [r4, #0]
   83c6e:	f7fc fbd9 	bl	80424 <_write>
   83c72:	1c43      	adds	r3, r0, #1
   83c74:	d000      	beq.n	83c78 <_write_r+0x1c>
   83c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c78:	6823      	ldr	r3, [r4, #0]
   83c7a:	2b00      	cmp	r3, #0
   83c7c:	d0fb      	beq.n	83c76 <_write_r+0x1a>
   83c7e:	603b      	str	r3, [r7, #0]
   83c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c82:	bf00      	nop
   83c84:	20071c80 	.word	0x20071c80

00083c88 <__register_exitproc>:
   83c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83c8c:	4d2c      	ldr	r5, [pc, #176]	; (83d40 <__register_exitproc+0xb8>)
   83c8e:	4606      	mov	r6, r0
   83c90:	6828      	ldr	r0, [r5, #0]
   83c92:	4698      	mov	r8, r3
   83c94:	460f      	mov	r7, r1
   83c96:	4691      	mov	r9, r2
   83c98:	f7ff f8de 	bl	82e58 <__retarget_lock_acquire_recursive>
   83c9c:	4b29      	ldr	r3, [pc, #164]	; (83d44 <__register_exitproc+0xbc>)
   83c9e:	681c      	ldr	r4, [r3, #0]
   83ca0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83ca4:	2b00      	cmp	r3, #0
   83ca6:	d03e      	beq.n	83d26 <__register_exitproc+0x9e>
   83ca8:	685a      	ldr	r2, [r3, #4]
   83caa:	2a1f      	cmp	r2, #31
   83cac:	dc1c      	bgt.n	83ce8 <__register_exitproc+0x60>
   83cae:	f102 0e01 	add.w	lr, r2, #1
   83cb2:	b176      	cbz	r6, 83cd2 <__register_exitproc+0x4a>
   83cb4:	2101      	movs	r1, #1
   83cb6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83cba:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83cbe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83cc2:	4091      	lsls	r1, r2
   83cc4:	4308      	orrs	r0, r1
   83cc6:	2e02      	cmp	r6, #2
   83cc8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83ccc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83cd0:	d023      	beq.n	83d1a <__register_exitproc+0x92>
   83cd2:	3202      	adds	r2, #2
   83cd4:	f8c3 e004 	str.w	lr, [r3, #4]
   83cd8:	6828      	ldr	r0, [r5, #0]
   83cda:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83cde:	f7ff f8bd 	bl	82e5c <__retarget_lock_release_recursive>
   83ce2:	2000      	movs	r0, #0
   83ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83ce8:	4b17      	ldr	r3, [pc, #92]	; (83d48 <__register_exitproc+0xc0>)
   83cea:	b30b      	cbz	r3, 83d30 <__register_exitproc+0xa8>
   83cec:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83cf0:	f7ff f92e 	bl	82f50 <malloc>
   83cf4:	4603      	mov	r3, r0
   83cf6:	b1d8      	cbz	r0, 83d30 <__register_exitproc+0xa8>
   83cf8:	2000      	movs	r0, #0
   83cfa:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83cfe:	f04f 0e01 	mov.w	lr, #1
   83d02:	6058      	str	r0, [r3, #4]
   83d04:	6019      	str	r1, [r3, #0]
   83d06:	4602      	mov	r2, r0
   83d08:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83d0c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83d10:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83d14:	2e00      	cmp	r6, #0
   83d16:	d0dc      	beq.n	83cd2 <__register_exitproc+0x4a>
   83d18:	e7cc      	b.n	83cb4 <__register_exitproc+0x2c>
   83d1a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83d1e:	4301      	orrs	r1, r0
   83d20:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83d24:	e7d5      	b.n	83cd2 <__register_exitproc+0x4a>
   83d26:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83d2a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83d2e:	e7bb      	b.n	83ca8 <__register_exitproc+0x20>
   83d30:	6828      	ldr	r0, [r5, #0]
   83d32:	f7ff f893 	bl	82e5c <__retarget_lock_release_recursive>
   83d36:	f04f 30ff 	mov.w	r0, #4294967295
   83d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d3e:	bf00      	nop
   83d40:	20070560 	.word	0x20070560
   83d44:	00084244 	.word	0x00084244
   83d48:	00082f51 	.word	0x00082f51

00083d4c <_close_r>:
   83d4c:	b538      	push	{r3, r4, r5, lr}
   83d4e:	2300      	movs	r3, #0
   83d50:	4c06      	ldr	r4, [pc, #24]	; (83d6c <_close_r+0x20>)
   83d52:	4605      	mov	r5, r0
   83d54:	4608      	mov	r0, r1
   83d56:	6023      	str	r3, [r4, #0]
   83d58:	f7fc ff7a 	bl	80c50 <_close>
   83d5c:	1c43      	adds	r3, r0, #1
   83d5e:	d000      	beq.n	83d62 <_close_r+0x16>
   83d60:	bd38      	pop	{r3, r4, r5, pc}
   83d62:	6823      	ldr	r3, [r4, #0]
   83d64:	2b00      	cmp	r3, #0
   83d66:	d0fb      	beq.n	83d60 <_close_r+0x14>
   83d68:	602b      	str	r3, [r5, #0]
   83d6a:	bd38      	pop	{r3, r4, r5, pc}
   83d6c:	20071c80 	.word	0x20071c80

00083d70 <_fclose_r>:
   83d70:	b570      	push	{r4, r5, r6, lr}
   83d72:	b159      	cbz	r1, 83d8c <_fclose_r+0x1c>
   83d74:	4605      	mov	r5, r0
   83d76:	460c      	mov	r4, r1
   83d78:	b110      	cbz	r0, 83d80 <_fclose_r+0x10>
   83d7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83d7c:	2b00      	cmp	r3, #0
   83d7e:	d03c      	beq.n	83dfa <_fclose_r+0x8a>
   83d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83d82:	07d8      	lsls	r0, r3, #31
   83d84:	d505      	bpl.n	83d92 <_fclose_r+0x22>
   83d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83d8a:	b92b      	cbnz	r3, 83d98 <_fclose_r+0x28>
   83d8c:	2600      	movs	r6, #0
   83d8e:	4630      	mov	r0, r6
   83d90:	bd70      	pop	{r4, r5, r6, pc}
   83d92:	89a3      	ldrh	r3, [r4, #12]
   83d94:	0599      	lsls	r1, r3, #22
   83d96:	d53c      	bpl.n	83e12 <_fclose_r+0xa2>
   83d98:	4621      	mov	r1, r4
   83d9a:	4628      	mov	r0, r5
   83d9c:	f7fe fba8 	bl	824f0 <__sflush_r>
   83da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83da2:	4606      	mov	r6, r0
   83da4:	b133      	cbz	r3, 83db4 <_fclose_r+0x44>
   83da6:	69e1      	ldr	r1, [r4, #28]
   83da8:	4628      	mov	r0, r5
   83daa:	4798      	blx	r3
   83dac:	2800      	cmp	r0, #0
   83dae:	bfb8      	it	lt
   83db0:	f04f 36ff 	movlt.w	r6, #4294967295
   83db4:	89a3      	ldrh	r3, [r4, #12]
   83db6:	061a      	lsls	r2, r3, #24
   83db8:	d422      	bmi.n	83e00 <_fclose_r+0x90>
   83dba:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83dbc:	b141      	cbz	r1, 83dd0 <_fclose_r+0x60>
   83dbe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83dc2:	4299      	cmp	r1, r3
   83dc4:	d002      	beq.n	83dcc <_fclose_r+0x5c>
   83dc6:	4628      	mov	r0, r5
   83dc8:	f7fe fdac 	bl	82924 <_free_r>
   83dcc:	2300      	movs	r3, #0
   83dce:	6323      	str	r3, [r4, #48]	; 0x30
   83dd0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83dd2:	b121      	cbz	r1, 83dde <_fclose_r+0x6e>
   83dd4:	4628      	mov	r0, r5
   83dd6:	f7fe fda5 	bl	82924 <_free_r>
   83dda:	2300      	movs	r3, #0
   83ddc:	6463      	str	r3, [r4, #68]	; 0x44
   83dde:	f7fe fcab 	bl	82738 <__sfp_lock_acquire>
   83de2:	2200      	movs	r2, #0
   83de4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83de6:	81a2      	strh	r2, [r4, #12]
   83de8:	07db      	lsls	r3, r3, #31
   83dea:	d50e      	bpl.n	83e0a <_fclose_r+0x9a>
   83dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83dee:	f7ff f831 	bl	82e54 <__retarget_lock_close_recursive>
   83df2:	f7fe fca7 	bl	82744 <__sfp_lock_release>
   83df6:	4630      	mov	r0, r6
   83df8:	bd70      	pop	{r4, r5, r6, pc}
   83dfa:	f7fe fc6d 	bl	826d8 <__sinit>
   83dfe:	e7bf      	b.n	83d80 <_fclose_r+0x10>
   83e00:	6921      	ldr	r1, [r4, #16]
   83e02:	4628      	mov	r0, r5
   83e04:	f7fe fd8e 	bl	82924 <_free_r>
   83e08:	e7d7      	b.n	83dba <_fclose_r+0x4a>
   83e0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e0c:	f7ff f826 	bl	82e5c <__retarget_lock_release_recursive>
   83e10:	e7ec      	b.n	83dec <_fclose_r+0x7c>
   83e12:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e14:	f7ff f820 	bl	82e58 <__retarget_lock_acquire_recursive>
   83e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e1c:	2b00      	cmp	r3, #0
   83e1e:	d1bb      	bne.n	83d98 <_fclose_r+0x28>
   83e20:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83e22:	f016 0601 	ands.w	r6, r6, #1
   83e26:	d1b1      	bne.n	83d8c <_fclose_r+0x1c>
   83e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e2a:	f7ff f817 	bl	82e5c <__retarget_lock_release_recursive>
   83e2e:	4630      	mov	r0, r6
   83e30:	bd70      	pop	{r4, r5, r6, pc}
   83e32:	bf00      	nop

00083e34 <_fstat_r>:
   83e34:	b570      	push	{r4, r5, r6, lr}
   83e36:	460d      	mov	r5, r1
   83e38:	2300      	movs	r3, #0
   83e3a:	4c07      	ldr	r4, [pc, #28]	; (83e58 <_fstat_r+0x24>)
   83e3c:	4606      	mov	r6, r0
   83e3e:	4611      	mov	r1, r2
   83e40:	4628      	mov	r0, r5
   83e42:	6023      	str	r3, [r4, #0]
   83e44:	f7fc ff07 	bl	80c56 <_fstat>
   83e48:	1c43      	adds	r3, r0, #1
   83e4a:	d000      	beq.n	83e4e <_fstat_r+0x1a>
   83e4c:	bd70      	pop	{r4, r5, r6, pc}
   83e4e:	6823      	ldr	r3, [r4, #0]
   83e50:	2b00      	cmp	r3, #0
   83e52:	d0fb      	beq.n	83e4c <_fstat_r+0x18>
   83e54:	6033      	str	r3, [r6, #0]
   83e56:	bd70      	pop	{r4, r5, r6, pc}
   83e58:	20071c80 	.word	0x20071c80

00083e5c <_isatty_r>:
   83e5c:	b538      	push	{r3, r4, r5, lr}
   83e5e:	2300      	movs	r3, #0
   83e60:	4c06      	ldr	r4, [pc, #24]	; (83e7c <_isatty_r+0x20>)
   83e62:	4605      	mov	r5, r0
   83e64:	4608      	mov	r0, r1
   83e66:	6023      	str	r3, [r4, #0]
   83e68:	f7fc fefa 	bl	80c60 <_isatty>
   83e6c:	1c43      	adds	r3, r0, #1
   83e6e:	d000      	beq.n	83e72 <_isatty_r+0x16>
   83e70:	bd38      	pop	{r3, r4, r5, pc}
   83e72:	6823      	ldr	r3, [r4, #0]
   83e74:	2b00      	cmp	r3, #0
   83e76:	d0fb      	beq.n	83e70 <_isatty_r+0x14>
   83e78:	602b      	str	r3, [r5, #0]
   83e7a:	bd38      	pop	{r3, r4, r5, pc}
   83e7c:	20071c80 	.word	0x20071c80

00083e80 <_lseek_r>:
   83e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83e82:	460e      	mov	r6, r1
   83e84:	2500      	movs	r5, #0
   83e86:	4c08      	ldr	r4, [pc, #32]	; (83ea8 <_lseek_r+0x28>)
   83e88:	4611      	mov	r1, r2
   83e8a:	4607      	mov	r7, r0
   83e8c:	461a      	mov	r2, r3
   83e8e:	4630      	mov	r0, r6
   83e90:	6025      	str	r5, [r4, #0]
   83e92:	f7fc fee7 	bl	80c64 <_lseek>
   83e96:	1c43      	adds	r3, r0, #1
   83e98:	d000      	beq.n	83e9c <_lseek_r+0x1c>
   83e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83e9c:	6823      	ldr	r3, [r4, #0]
   83e9e:	2b00      	cmp	r3, #0
   83ea0:	d0fb      	beq.n	83e9a <_lseek_r+0x1a>
   83ea2:	603b      	str	r3, [r7, #0]
   83ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ea6:	bf00      	nop
   83ea8:	20071c80 	.word	0x20071c80

00083eac <_read_r>:
   83eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83eae:	460e      	mov	r6, r1
   83eb0:	2500      	movs	r5, #0
   83eb2:	4c08      	ldr	r4, [pc, #32]	; (83ed4 <_read_r+0x28>)
   83eb4:	4611      	mov	r1, r2
   83eb6:	4607      	mov	r7, r0
   83eb8:	461a      	mov	r2, r3
   83eba:	4630      	mov	r0, r6
   83ebc:	6025      	str	r5, [r4, #0]
   83ebe:	f7fc fa3f 	bl	80340 <_read>
   83ec2:	1c43      	adds	r3, r0, #1
   83ec4:	d000      	beq.n	83ec8 <_read_r+0x1c>
   83ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ec8:	6823      	ldr	r3, [r4, #0]
   83eca:	2b00      	cmp	r3, #0
   83ecc:	d0fb      	beq.n	83ec6 <_read_r+0x1a>
   83ece:	603b      	str	r3, [r7, #0]
   83ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ed2:	bf00      	nop
   83ed4:	20071c80 	.word	0x20071c80

00083ed8 <__aeabi_uldivmod>:
   83ed8:	b953      	cbnz	r3, 83ef0 <__aeabi_uldivmod+0x18>
   83eda:	b94a      	cbnz	r2, 83ef0 <__aeabi_uldivmod+0x18>
   83edc:	2900      	cmp	r1, #0
   83ede:	bf08      	it	eq
   83ee0:	2800      	cmpeq	r0, #0
   83ee2:	bf1c      	itt	ne
   83ee4:	f04f 31ff 	movne.w	r1, #4294967295
   83ee8:	f04f 30ff 	movne.w	r0, #4294967295
   83eec:	f000 b97a 	b.w	841e4 <__aeabi_idiv0>
   83ef0:	f1ad 0c08 	sub.w	ip, sp, #8
   83ef4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83ef8:	f000 f806 	bl	83f08 <__udivmoddi4>
   83efc:	f8dd e004 	ldr.w	lr, [sp, #4]
   83f00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83f04:	b004      	add	sp, #16
   83f06:	4770      	bx	lr

00083f08 <__udivmoddi4>:
   83f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83f0c:	468c      	mov	ip, r1
   83f0e:	460e      	mov	r6, r1
   83f10:	4604      	mov	r4, r0
   83f12:	9d08      	ldr	r5, [sp, #32]
   83f14:	2b00      	cmp	r3, #0
   83f16:	d150      	bne.n	83fba <__udivmoddi4+0xb2>
   83f18:	428a      	cmp	r2, r1
   83f1a:	4617      	mov	r7, r2
   83f1c:	d96c      	bls.n	83ff8 <__udivmoddi4+0xf0>
   83f1e:	fab2 fe82 	clz	lr, r2
   83f22:	f1be 0f00 	cmp.w	lr, #0
   83f26:	d00b      	beq.n	83f40 <__udivmoddi4+0x38>
   83f28:	f1ce 0c20 	rsb	ip, lr, #32
   83f2c:	fa01 f60e 	lsl.w	r6, r1, lr
   83f30:	fa20 fc0c 	lsr.w	ip, r0, ip
   83f34:	fa02 f70e 	lsl.w	r7, r2, lr
   83f38:	ea4c 0c06 	orr.w	ip, ip, r6
   83f3c:	fa00 f40e 	lsl.w	r4, r0, lr
   83f40:	0c3a      	lsrs	r2, r7, #16
   83f42:	fbbc f9f2 	udiv	r9, ip, r2
   83f46:	b2bb      	uxth	r3, r7
   83f48:	fb02 cc19 	mls	ip, r2, r9, ip
   83f4c:	fb09 fa03 	mul.w	sl, r9, r3
   83f50:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83f54:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83f58:	45b2      	cmp	sl, r6
   83f5a:	d90a      	bls.n	83f72 <__udivmoddi4+0x6a>
   83f5c:	19f6      	adds	r6, r6, r7
   83f5e:	f109 31ff 	add.w	r1, r9, #4294967295
   83f62:	f080 8125 	bcs.w	841b0 <__udivmoddi4+0x2a8>
   83f66:	45b2      	cmp	sl, r6
   83f68:	f240 8122 	bls.w	841b0 <__udivmoddi4+0x2a8>
   83f6c:	f1a9 0902 	sub.w	r9, r9, #2
   83f70:	443e      	add	r6, r7
   83f72:	eba6 060a 	sub.w	r6, r6, sl
   83f76:	fbb6 f0f2 	udiv	r0, r6, r2
   83f7a:	fb02 6610 	mls	r6, r2, r0, r6
   83f7e:	fb00 f303 	mul.w	r3, r0, r3
   83f82:	b2a4      	uxth	r4, r4
   83f84:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83f88:	42a3      	cmp	r3, r4
   83f8a:	d909      	bls.n	83fa0 <__udivmoddi4+0x98>
   83f8c:	19e4      	adds	r4, r4, r7
   83f8e:	f100 32ff 	add.w	r2, r0, #4294967295
   83f92:	f080 810b 	bcs.w	841ac <__udivmoddi4+0x2a4>
   83f96:	42a3      	cmp	r3, r4
   83f98:	f240 8108 	bls.w	841ac <__udivmoddi4+0x2a4>
   83f9c:	3802      	subs	r0, #2
   83f9e:	443c      	add	r4, r7
   83fa0:	2100      	movs	r1, #0
   83fa2:	1ae4      	subs	r4, r4, r3
   83fa4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83fa8:	2d00      	cmp	r5, #0
   83faa:	d062      	beq.n	84072 <__udivmoddi4+0x16a>
   83fac:	2300      	movs	r3, #0
   83fae:	fa24 f40e 	lsr.w	r4, r4, lr
   83fb2:	602c      	str	r4, [r5, #0]
   83fb4:	606b      	str	r3, [r5, #4]
   83fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83fba:	428b      	cmp	r3, r1
   83fbc:	d907      	bls.n	83fce <__udivmoddi4+0xc6>
   83fbe:	2d00      	cmp	r5, #0
   83fc0:	d055      	beq.n	8406e <__udivmoddi4+0x166>
   83fc2:	2100      	movs	r1, #0
   83fc4:	e885 0041 	stmia.w	r5, {r0, r6}
   83fc8:	4608      	mov	r0, r1
   83fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83fce:	fab3 f183 	clz	r1, r3
   83fd2:	2900      	cmp	r1, #0
   83fd4:	f040 808f 	bne.w	840f6 <__udivmoddi4+0x1ee>
   83fd8:	42b3      	cmp	r3, r6
   83fda:	d302      	bcc.n	83fe2 <__udivmoddi4+0xda>
   83fdc:	4282      	cmp	r2, r0
   83fde:	f200 80fc 	bhi.w	841da <__udivmoddi4+0x2d2>
   83fe2:	1a84      	subs	r4, r0, r2
   83fe4:	eb66 0603 	sbc.w	r6, r6, r3
   83fe8:	2001      	movs	r0, #1
   83fea:	46b4      	mov	ip, r6
   83fec:	2d00      	cmp	r5, #0
   83fee:	d040      	beq.n	84072 <__udivmoddi4+0x16a>
   83ff0:	e885 1010 	stmia.w	r5, {r4, ip}
   83ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83ff8:	b912      	cbnz	r2, 84000 <__udivmoddi4+0xf8>
   83ffa:	2701      	movs	r7, #1
   83ffc:	fbb7 f7f2 	udiv	r7, r7, r2
   84000:	fab7 fe87 	clz	lr, r7
   84004:	f1be 0f00 	cmp.w	lr, #0
   84008:	d135      	bne.n	84076 <__udivmoddi4+0x16e>
   8400a:	2101      	movs	r1, #1
   8400c:	1bf6      	subs	r6, r6, r7
   8400e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84012:	fa1f f887 	uxth.w	r8, r7
   84016:	fbb6 f2fc 	udiv	r2, r6, ip
   8401a:	fb0c 6612 	mls	r6, ip, r2, r6
   8401e:	fb08 f002 	mul.w	r0, r8, r2
   84022:	0c23      	lsrs	r3, r4, #16
   84024:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   84028:	42b0      	cmp	r0, r6
   8402a:	d907      	bls.n	8403c <__udivmoddi4+0x134>
   8402c:	19f6      	adds	r6, r6, r7
   8402e:	f102 33ff 	add.w	r3, r2, #4294967295
   84032:	d202      	bcs.n	8403a <__udivmoddi4+0x132>
   84034:	42b0      	cmp	r0, r6
   84036:	f200 80d2 	bhi.w	841de <__udivmoddi4+0x2d6>
   8403a:	461a      	mov	r2, r3
   8403c:	1a36      	subs	r6, r6, r0
   8403e:	fbb6 f0fc 	udiv	r0, r6, ip
   84042:	fb0c 6610 	mls	r6, ip, r0, r6
   84046:	fb08 f800 	mul.w	r8, r8, r0
   8404a:	b2a3      	uxth	r3, r4
   8404c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   84050:	45a0      	cmp	r8, r4
   84052:	d907      	bls.n	84064 <__udivmoddi4+0x15c>
   84054:	19e4      	adds	r4, r4, r7
   84056:	f100 33ff 	add.w	r3, r0, #4294967295
   8405a:	d202      	bcs.n	84062 <__udivmoddi4+0x15a>
   8405c:	45a0      	cmp	r8, r4
   8405e:	f200 80b9 	bhi.w	841d4 <__udivmoddi4+0x2cc>
   84062:	4618      	mov	r0, r3
   84064:	eba4 0408 	sub.w	r4, r4, r8
   84068:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8406c:	e79c      	b.n	83fa8 <__udivmoddi4+0xa0>
   8406e:	4629      	mov	r1, r5
   84070:	4628      	mov	r0, r5
   84072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84076:	fa07 f70e 	lsl.w	r7, r7, lr
   8407a:	f1ce 0320 	rsb	r3, lr, #32
   8407e:	fa26 f203 	lsr.w	r2, r6, r3
   84082:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84086:	fbb2 f1fc 	udiv	r1, r2, ip
   8408a:	fa1f f887 	uxth.w	r8, r7
   8408e:	fb0c 2211 	mls	r2, ip, r1, r2
   84092:	fa06 f60e 	lsl.w	r6, r6, lr
   84096:	fa20 f303 	lsr.w	r3, r0, r3
   8409a:	fb01 f908 	mul.w	r9, r1, r8
   8409e:	4333      	orrs	r3, r6
   840a0:	0c1e      	lsrs	r6, r3, #16
   840a2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   840a6:	45b1      	cmp	r9, r6
   840a8:	fa00 f40e 	lsl.w	r4, r0, lr
   840ac:	d909      	bls.n	840c2 <__udivmoddi4+0x1ba>
   840ae:	19f6      	adds	r6, r6, r7
   840b0:	f101 32ff 	add.w	r2, r1, #4294967295
   840b4:	f080 808c 	bcs.w	841d0 <__udivmoddi4+0x2c8>
   840b8:	45b1      	cmp	r9, r6
   840ba:	f240 8089 	bls.w	841d0 <__udivmoddi4+0x2c8>
   840be:	3902      	subs	r1, #2
   840c0:	443e      	add	r6, r7
   840c2:	eba6 0609 	sub.w	r6, r6, r9
   840c6:	fbb6 f0fc 	udiv	r0, r6, ip
   840ca:	fb0c 6210 	mls	r2, ip, r0, r6
   840ce:	fb00 f908 	mul.w	r9, r0, r8
   840d2:	b29e      	uxth	r6, r3
   840d4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   840d8:	45b1      	cmp	r9, r6
   840da:	d907      	bls.n	840ec <__udivmoddi4+0x1e4>
   840dc:	19f6      	adds	r6, r6, r7
   840de:	f100 33ff 	add.w	r3, r0, #4294967295
   840e2:	d271      	bcs.n	841c8 <__udivmoddi4+0x2c0>
   840e4:	45b1      	cmp	r9, r6
   840e6:	d96f      	bls.n	841c8 <__udivmoddi4+0x2c0>
   840e8:	3802      	subs	r0, #2
   840ea:	443e      	add	r6, r7
   840ec:	eba6 0609 	sub.w	r6, r6, r9
   840f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   840f4:	e78f      	b.n	84016 <__udivmoddi4+0x10e>
   840f6:	f1c1 0720 	rsb	r7, r1, #32
   840fa:	fa22 f807 	lsr.w	r8, r2, r7
   840fe:	408b      	lsls	r3, r1
   84100:	ea48 0303 	orr.w	r3, r8, r3
   84104:	fa26 f407 	lsr.w	r4, r6, r7
   84108:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   8410c:	fbb4 f9fe 	udiv	r9, r4, lr
   84110:	fa1f fc83 	uxth.w	ip, r3
   84114:	fb0e 4419 	mls	r4, lr, r9, r4
   84118:	408e      	lsls	r6, r1
   8411a:	fa20 f807 	lsr.w	r8, r0, r7
   8411e:	fb09 fa0c 	mul.w	sl, r9, ip
   84122:	ea48 0806 	orr.w	r8, r8, r6
   84126:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8412a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8412e:	45a2      	cmp	sl, r4
   84130:	fa02 f201 	lsl.w	r2, r2, r1
   84134:	fa00 f601 	lsl.w	r6, r0, r1
   84138:	d908      	bls.n	8414c <__udivmoddi4+0x244>
   8413a:	18e4      	adds	r4, r4, r3
   8413c:	f109 30ff 	add.w	r0, r9, #4294967295
   84140:	d244      	bcs.n	841cc <__udivmoddi4+0x2c4>
   84142:	45a2      	cmp	sl, r4
   84144:	d942      	bls.n	841cc <__udivmoddi4+0x2c4>
   84146:	f1a9 0902 	sub.w	r9, r9, #2
   8414a:	441c      	add	r4, r3
   8414c:	eba4 040a 	sub.w	r4, r4, sl
   84150:	fbb4 f0fe 	udiv	r0, r4, lr
   84154:	fb0e 4410 	mls	r4, lr, r0, r4
   84158:	fb00 fc0c 	mul.w	ip, r0, ip
   8415c:	fa1f f888 	uxth.w	r8, r8
   84160:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   84164:	45a4      	cmp	ip, r4
   84166:	d907      	bls.n	84178 <__udivmoddi4+0x270>
   84168:	18e4      	adds	r4, r4, r3
   8416a:	f100 3eff 	add.w	lr, r0, #4294967295
   8416e:	d229      	bcs.n	841c4 <__udivmoddi4+0x2bc>
   84170:	45a4      	cmp	ip, r4
   84172:	d927      	bls.n	841c4 <__udivmoddi4+0x2bc>
   84174:	3802      	subs	r0, #2
   84176:	441c      	add	r4, r3
   84178:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8417c:	fba0 8902 	umull	r8, r9, r0, r2
   84180:	eba4 0c0c 	sub.w	ip, r4, ip
   84184:	45cc      	cmp	ip, r9
   84186:	46c2      	mov	sl, r8
   84188:	46ce      	mov	lr, r9
   8418a:	d315      	bcc.n	841b8 <__udivmoddi4+0x2b0>
   8418c:	d012      	beq.n	841b4 <__udivmoddi4+0x2ac>
   8418e:	b155      	cbz	r5, 841a6 <__udivmoddi4+0x29e>
   84190:	ebb6 030a 	subs.w	r3, r6, sl
   84194:	eb6c 060e 	sbc.w	r6, ip, lr
   84198:	fa06 f707 	lsl.w	r7, r6, r7
   8419c:	40cb      	lsrs	r3, r1
   8419e:	431f      	orrs	r7, r3
   841a0:	40ce      	lsrs	r6, r1
   841a2:	602f      	str	r7, [r5, #0]
   841a4:	606e      	str	r6, [r5, #4]
   841a6:	2100      	movs	r1, #0
   841a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   841ac:	4610      	mov	r0, r2
   841ae:	e6f7      	b.n	83fa0 <__udivmoddi4+0x98>
   841b0:	4689      	mov	r9, r1
   841b2:	e6de      	b.n	83f72 <__udivmoddi4+0x6a>
   841b4:	4546      	cmp	r6, r8
   841b6:	d2ea      	bcs.n	8418e <__udivmoddi4+0x286>
   841b8:	ebb8 0a02 	subs.w	sl, r8, r2
   841bc:	eb69 0e03 	sbc.w	lr, r9, r3
   841c0:	3801      	subs	r0, #1
   841c2:	e7e4      	b.n	8418e <__udivmoddi4+0x286>
   841c4:	4670      	mov	r0, lr
   841c6:	e7d7      	b.n	84178 <__udivmoddi4+0x270>
   841c8:	4618      	mov	r0, r3
   841ca:	e78f      	b.n	840ec <__udivmoddi4+0x1e4>
   841cc:	4681      	mov	r9, r0
   841ce:	e7bd      	b.n	8414c <__udivmoddi4+0x244>
   841d0:	4611      	mov	r1, r2
   841d2:	e776      	b.n	840c2 <__udivmoddi4+0x1ba>
   841d4:	3802      	subs	r0, #2
   841d6:	443c      	add	r4, r7
   841d8:	e744      	b.n	84064 <__udivmoddi4+0x15c>
   841da:	4608      	mov	r0, r1
   841dc:	e706      	b.n	83fec <__udivmoddi4+0xe4>
   841de:	3a02      	subs	r2, #2
   841e0:	443e      	add	r6, r7
   841e2:	e72b      	b.n	8403c <__udivmoddi4+0x134>

000841e4 <__aeabi_idiv0>:
   841e4:	4770      	bx	lr
   841e6:	bf00      	nop
   841e8:	66667542 	.word	0x66667542
   841ec:	76207265 	.word	0x76207265
   841f0:	65756c61 	.word	0x65756c61
   841f4:	25203a73 	.word	0x25203a73
   841f8:	69202c75 	.word	0x69202c75
   841fc:	7865646e 	.word	0x7865646e
   84200:	7525203a 	.word	0x7525203a
   84204:	0000000a 	.word	0x0000000a
   84208:	736e6f43 	.word	0x736e6f43
   8420c:	20656c6f 	.word	0x20656c6f
   84210:	64616572 	.word	0x64616572
   84214:	00000a79 	.word	0x00000a79
   84218:	3d3d3d3d 	.word	0x3d3d3d3d
   8421c:	3d3d3d3d 	.word	0x3d3d3d3d
   84220:	3d3d3d3d 	.word	0x3d3d3d3d
   84224:	00000a3d 	.word	0x00000a3d
   84228:	656d6954 	.word	0x656d6954
   8422c:	6f432072 	.word	0x6f432072
   84230:	65746e75 	.word	0x65746e75
   84234:	61762072 	.word	0x61762072
   84238:	3a65756c 	.word	0x3a65756c
   8423c:	756c2520 	.word	0x756c2520
   84240:	0000000a 	.word	0x0000000a

00084244 <_global_impure_ptr>:
   84244:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   84254:	46454443 00000000 33323130 37363534     CDEF....01234567
   84264:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84274:	0000296c                                l)..

00084278 <blanks.7217>:
   84278:	20202020 20202020 20202020 20202020                     

00084288 <zeroes.7218>:
   84288:	30303030 30303030 30303030 30303030     0000000000000000
   84298:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000842a8 <_ctype_>:
   842a8:	20202000 20202020 28282020 20282828     .         ((((( 
   842b8:	20202020 20202020 20202020 20202020                     
   842c8:	10108820 10101010 10101010 10101010      ...............
   842d8:	04040410 04040404 10040404 10101010     ................
   842e8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   842f8:	01010101 01010101 01010101 10101010     ................
   84308:	42421010 42424242 02020202 02020202     ..BBBBBB........
   84318:	02020202 02020202 02020202 10101010     ................
   84328:	00000020 00000000 00000000 00000000      ...............
	...

000843ac <_init>:
   843ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   843ae:	bf00      	nop
   843b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   843b2:	bc08      	pop	{r3}
   843b4:	469e      	mov	lr, r3
   843b6:	4770      	bx	lr

000843b8 <__init_array_start>:
   843b8:	000824d1 	.word	0x000824d1

000843bc <__frame_dummy_init_array_entry>:
   843bc:	00080119                                ....

000843c0 <_fini>:
   843c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   843c2:	bf00      	nop
   843c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   843c6:	bc08      	pop	{r3}
   843c8:	469e      	mov	lr, r3
   843ca:	4770      	bx	lr

000843cc <__fini_array_start>:
   843cc:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20071c5c                                \.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00083c45 000834a5 00000000 000842a8     E<...4.......B..
20070654:	000842a4 00084258 00084258 00084258     .B..XB..XB..XB..
20070664:	00084258 00084258 00084258 00084258     XB..XB..XB..XB..
20070674:	00084258 00084258 ffffffff ffffffff     XB..XB..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
